<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocAlertContextMenuDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

#define.DocAlertContextMenuDefinition_ID('Alert')

/// <summary>
/// The DocAlertContextMenuDefinition class defines the context menu definition 
/// for alerts for the specified form control.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DocContextMenuDefinitionBase)),
    ExportMetadataAttribute(extendedTypeStr(DocContextMenuDefinitionId), #DocAlertContextMenuDefinition_ID)]
public class DocAlertContextMenuDefinition extends DocContextMenuDefinitionBase
{
    public const int EventRuleCreateMenuOption = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the context menu definition.
    /// </summary>
    /// <returns>The context menu definition ID</returns>
    public DocContextMenuDefinitionId getId()
    {
        return #DocAlertContextMenuDefinition_ID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the custom context menu definition is enabled.
    /// </summary>
    /// <returns>True if the context definition is enabled; otherwise false</returns>
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the custom context menu definition for the specified form control.
    /// </summary>
    /// <param name = "_formControl">An instance of the FormControl object</param>
    /// <returns>An instance of the ContextMenu object</returns>
    public ContextMenu getContextMenuOptions(FormControl _formControl)
    {
        ContextMenu menu = new ContextMenu();

        // Add the EventAlertRuleCreate menu item to the context menu
        this.addContextMenuOption(menu, _formControl, "@Alerts:CreateAlertRule", EventRuleCreateMenuOption);
        
        return menu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedMenuOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs an action specified for the selected menu option (menu item) from the context menu definition.
    /// </summary>
    /// <param name = "_selectedOption">Selected menu option (menu item) from the context menu</param>
    /// <param name = "_formControl">An instance of the FormControl object</param>
    public void selectedMenuOption(int _selectedOption, FormControl _formControl)
    {
        switch (_selectedOption)
        {
            case EventRuleCreateMenuOption:  // Create an alert rule
                MenuFunction mf = new MenuFunction(menuItemDisplayStr(EventAlertRuleCreate), MenuItemType::Display);
                // Verify user has access to create alerts
                if (hasMenuItemSecurityAccess(mf))
                {
                    // Set the selected form control to the specified form control
                    _formControl.formRun().selectControl(_formControl);

                    Args args = new Args();
                    args.caller(_formControl.formRun());

                    // Display the progress indicator window because it may take some time before 
                    // the EventAlertRuleCreate form is displayed to the user.
                    DocGlobalHelper::startLengthyOperation(mf.label());

                    // Runs the menu item
                    mf.run(args);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddContextMenuOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified menu option (menu item) can be added to the context menu for
    /// the specified form control.
    /// </summary>
    /// <param name = "_formControl">An instance of the FormControl object</param>
    /// <param name = "_menuOptionId">Menu option (menu item) ID</param>
    /// <returns>True if the specified menu option (menu item) can be added to the context menu; otherwise false</returns>
    public boolean canAddContextMenuOption(FormControl _formControl, int _menuOptionId)
    {
        switch (_menuOptionId)
        {
            case EventRuleCreateMenuOption:
                // Check whether the EventAlertRuleCreate menu item can be added to the context menu
                return this.canAddEventAlertRuleCreateMenuItem(_formControl);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddEventAlertRuleCreateMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the menu item EventAlertRuleCreate can be added to the context menu for
    /// the specified form control.
    /// </summary>
    /// <param name = "_formControl">An instance of the FormControl object</param>
    /// <returns>True if the menu item can be added to the context menu; otherwise false</returns>
    private boolean canAddEventAlertRuleCreateMenuItem(Object _formControl)
    {
        // Check whether the menu item EventAlertRuleCreate can be added to the context menu
        if (!(isConfigurationkeyEnabled(configurationKeyNum(Event))
                && _formControl.formRun().name() != formStr(EventAlertInbox)
                && _formControl.formRun().name() != formStr(EventRule)
                && _formControl.formRun().name() != formStr(DocEventRuleGridView)
                && _formControl.formRun().design().style() != FormStyle::Workspace))
        {
            return false;
        }
        // Check whether a form control is visible
        if (!_formControl.visible())
        {
            return false;
        }
        // Check whether a form control is of the type that is valid for creating an aler rule
        if (!EventBuildValidAlertFields::isControlTypeValid(_formControl))
        {
            return false;
        }
        // Check whether a form control is bound to the form data source
        if (!_formControl.dataField() || !_formControl.dataSource())
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>