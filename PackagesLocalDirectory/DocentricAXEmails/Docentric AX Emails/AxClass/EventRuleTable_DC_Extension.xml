<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EventRuleTable_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class EventRuleTable_DC_Extension is an extension of the table EventRule.
/// </summary>
[ExtensionOf(tableStr(EventRule))]
final class EventRuleTable_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current record.
    /// </summary>
    /// <returns>True if the record is validated successfully; otherwise false</returns>
    public boolean validateWrite()
    {
        boolean ret = next validateWrite();

        if (this.SendAlertEmail)
        {
            // Validate the Email recipients field.
            if (this.EmailRecipients && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(this.EmailRecipients))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:EmailRecipientsNotValid", this.EmailRecipients));
                ret = ret && false;
            }

            // Validate the Cc field
            if (this.SendEmailUsingDocentric_DC && this.EmailCc_DC && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(this.EmailCc_DC))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:CcEmailAddressesNotValid", this.EmailCc_DC));
                ret = ret && false;
            }

            // Validate the Bcc field
            if (this.SendEmailUsingDocentric_DC && this.EmailBcc_DC && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(this.EmailBcc_DC))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:BccEmailAddressesNotValid", this.EmailBcc_DC));
                ret = ret && false;
            }
        }

        if (this.IncludeInSummaryEmail_DC)
        {
            // Validate the Summary email recipients field.
            if (this.SummaryEmailRecipients_DC && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(this.SummaryEmailRecipients_DC))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:AlertSummaryEmailRecipientsNotValid", this.SummaryEmailRecipients_DC));
                ret = ret && false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the value of the field is changed.
    /// </summary>
    /// <param name = "_fieldId">Field Id</param>
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EventRule, UserId):
                // Pop up a warning message if the UserId field is being changed
                if (this.UserId != this.orig().UserId && FormDataUtil::isFormDataSource(this) 
                        && FormDataUtil::getFormDataSource(this).formRun().name() != formStr(EventCreateRule))
                {
                    if (Box::okCancel("@DocentricAX4:EventRuleUserIdModified", DialogButton::Cancel) == DialogButton::Cancel)
                    {
                        this.UserId = this.orig().UserId;
                    }
                }
                break;

            case fieldNum(EventRule, UserGroupId_DC):
                // Pop up a warning message if the UserGroupId_DC field is being changed
                if (this.UserGroupId_DC != this.orig().UserGroupId_DC && FormDataUtil::isFormDataSource(this) 
                        && FormDataUtil::getFormDataSource(this).formRun().name() != formStr(EventCreateRule))
                {
                    if (Box::okCancel("@DocentricAX4:EventRuleUserGroupIdModified", DialogButton::Cancel) == DialogButton::Cancel)
                    {
                        this.UserGroupId_DC = this.orig().UserGroupId_DC;
                    }
                }
                break;

            case fieldNum(EventRule, SendAlertEmail):
                if (!this.SendAlertEmail && this.SendEmailUsingDocentric_DC)
                {
                    this.SendEmailUsingDocentric_DC = this.SendAlertEmail;
                }
                // Enable/disable the fields based on the SendAlertEmail field
                this.setFields_DC(_fieldId);
                break;

            case fieldNum(EventRule, IncludeInSummaryEmail_DC):
                if (this.IncludeInSummaryEmail_DC)
                {
                    str callerFormName = FormDataUtil::isFormDataSource(this) ? FormDataUtil::getFormDataSource(this).formRun().name() : formStr(EventRule);

                    // If there is no valid licence, user will be warned, but we will still let him to set the flag Include in summary email.
                    // Later in the pipeline we will throw the exception if the flag is used, but the license is invalid.
                    DocLicenseMng::checkLicenseUI(DocConstant::FeatureAlertSummaryEmails, callerFormName);
                }

                // Enable/disable the fields based on the IncludeInSummaryEmail_DC field
                this.setFields_DC(_fieldId);
                break;

            case fieldNum(EventRule, SendEmailUsingDocentric_DC):
                // Enable/disable the fields based on the SendAlertEmail and SendEmailUsingDocentric_DC field
                this.setFields_DC(_fieldId);
                break;

            case fieldNum(EventRule, EmailRecipients):
                // Clean the email address list.
                str emailAddressList = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(this.EmailRecipients);
                if (emailAddressList != this.EmailRecipients)
                {
                    this.EmailRecipients = emailAddressList;
                }

                // Validate email address list but ignore placeholders.
                if (emailAddressList && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(emailAddressList))
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:EmailRecipientsNotValid", emailAddressList));
                }
                break;

            case fieldNum(EventRule, EmailCc_DC):
                // Clean the email Cc address list.
                str emailCcAddressList = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(this.EmailCc_DC);
                if (emailCcAddressList != this.EmailCc_DC)
                {
                    this.EmailCc_DC = emailCcAddressList;
                }

                // Validate email address list but ignore placeholders.
                if (emailCcAddressList && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(emailCcAddressList))
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:CcEmailAddressesNotValid", emailCcAddressList));
                }
                break;

            case fieldNum(EventRule, EmailBcc_DC):
                // Clean the email Bcc address list.
                str emailBccAddressList = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(this.EmailBcc_DC);
                if (emailBccAddressList != this.EmailBcc_DC)
                {
                    this.EmailBcc_DC = emailBccAddressList;
                }

                // Validate email address list but ignore placeholders.
                if (emailBccAddressList && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(emailBccAddressList))
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:BccEmailAddressesNotValid", emailBccAddressList));
                }
                break;

            case fieldNum(EventRule, SummaryEmailRecipients_DC):
                // Clean the email address list.
                str summaryEmailAddressList = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(this.SummaryEmailRecipients_DC);
                if (summaryEmailAddressList != this.SummaryEmailRecipients_DC)
                {
                    this.SummaryEmailRecipients_DC = summaryEmailAddressList;
                }

                // Validate email address list but ignore placeholders.
                if (summaryEmailAddressList && !DocEmailTemplateHelper::validateEmailListSkipPlaceholders(summaryEmailAddressList))
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:AlertSummaryEmailRecipientsNotValid", summaryEmailAddressList));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFields_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form data source fields depending on the specified field Id.
    /// </summary>
    /// <param name = "_fieldId">Field Id</param>
    public void setFields_DC(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(EventRule, SendAlertEmail):
                // Enable/disable the fields based on the SendAlertEmail field
                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataSource fds = FormDataUtil::getFormDataSource(this);
                    if (fds)
                    {
                        fds.object(fieldNum(EventRule, EmailRecipients)).mandatory(this.SendAlertEmail);
                        fds.object(fieldNum(EventRule, SendEmailUsingDocentric_DC)).allowEdit(this.SendAlertEmail);
                    }
                }
            case fieldNum(EventRule, SendEmailUsingDocentric_DC):
                // Enable/disable the fields based on the SendAlertEmail and SendEmailUsingDocentric_DC field
                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataSource fds = FormDataUtil::getFormDataSource(this);
                    if (fds)
                    {
                        // Template ID: enable/disable and make it mandatory if 'Send email using Docentric'
                        fds.object(fieldNum(EventRule, EmailId_DC)).allowEdit(this.SendAlertEmail && this.SendEmailUsingDocentric_DC);
                        fds.object(fieldNum(EventRule, EmailId_DC)).mandatory(this.SendAlertEmail && this.SendEmailUsingDocentric_DC);

                        // Enable/disable other Docentric controls
                        fds.object(fieldNum(EventRule, EmailSendingMode_DC)).allowEdit(this.SendAlertEmail && this.SendEmailUsingDocentric_DC);
                        fds.object(fieldNum(EventRule, EmailCc_DC)).allowEdit(this.SendAlertEmail && this.SendEmailUsingDocentric_DC);
                        fds.object(fieldNum(EventRule, EmailBcc_DC)).allowEdit(this.SendAlertEmail && this.SendEmailUsingDocentric_DC);
                    }
                }
                break;

            case fieldNum(EventRule, IncludeInSummaryEmail_DC):
                // Enable/disable the fields based on the IncludeInSummaryEmail_DC field
                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataSource fds = FormDataUtil::getFormDataSource(this);
                    if (fds)
                    {
                        fds.object(fieldNum(EventRule, SummaryEmailRecipients_DC)).mandatory(this.IncludeInSummaryEmail_DC);
                        fds.object(fieldNum(EventRule, SummaryEmailRecipients_DC)).allowEdit(this.IncludeInSummaryEmail_DC);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEmailId_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs form lookup on the EmailId_DC control.
    /// </summary>
    /// <param name = "_callerControl">An instance of a caller control</param>
    /// <param name = "_companyId">Company ID</param>
    public static void lookupEmailId_DC(FormControl _callerControl, CompanyId _companyId)
    {
        if (_companyId == '')
        {
            // Global rule --> lookup into System templates
            
            SysTableLookup lookup = SysTableLookup::newParameters(tablenum(SysEmailSystemTable), _callerControl);

            Query query = new Query();
            
            QueryBuildDataSource qbds = query.addDataSource(tablenum(SysEmailSystemTable));
            qbds.addSortField(fieldnum(SysEmailSystemTable, EmailId));
            qbds.addRange(fieldNum(SysEmailSystemTable, IsUsedForAlert_DC)).value(queryValue(NoYes::Yes));

            lookup.addLookupfield(fieldnum(SysEmailSystemTable, EmailId), true);
            lookup.setLabel("@DocentricAX4:EmailId"); // Template ID

            lookup.addLookupfield(fieldnum(SysEmailSystemTable, Description));
            lookup.setLabel("@SYS7576"); // Description

            lookup.parmQuery(query);
            lookup.performFormLookup();
        }
        else
        {
            // Lookup into Organizational templates
            
            SysTableLookup lookup = SysTableLookup::newParameters(tablenum(SysEmailTable), _callerControl);

            Query query = new Query();
            query.allowCrossCompany(true);
            query.addCompanyRange(_companyId);

            QueryBuildDataSource qbds = query.addDataSource(tablenum(SysEmailTable));
            qbds.addSortField(fieldnum(SysEmailTable, EmailId));
            qbds.addRange(fieldNum(SysEmailTable, IsUsedForAlert_DC)).value(queryValue(NoYes::Yes));

            lookup.addLookupfield(fieldnum(SysEmailTable, EmailId), true);
            lookup.setLabel("@DocentricAX4:EmailId"); // Template ID

            lookup.addLookupfield(fieldnum(SysEmailTable, Description));
            lookup.setLabel("@SYS7576"); // Description

            lookup.parmQuery(query);
            lookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefEmailId_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs form jumpRef on the EmailId_DC control.
    /// </summary>
    /// <param name = "_callerFormRun">An instance of a caller form run</param>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_companyId">Company ID</param>
    public static void jumpRefEmailId_DC(FormRun _callerFormRun, DocAlertEmailId _emailId, CompanyId _companyId)
    {
        CompanyId curCompanyId = curExt();
        if (_companyId != '')
        {
            appl.setDefaultCompany(_companyId, false);
        }

        try
        {
            Args args = new Args();
            args.caller(_callerFormRun);

            FormRun formRun;
            if (_companyId != '')
            {
                args.lookupRecord(SysEmailTable::find(_emailId));
                formRun = new MenuFunction(menuItemDisplayStr(SysEmailTable), MenuItemType::Display).create(args);
            }
            else
            {
                args.lookupRecord(SysEmailSystemTable::find(_emailId));
                formRun = new MenuFunction(menuItemDisplayStr(SysEmailSystemTable), MenuItemType::Display).create(args);
            }

            formRun.run();
            formRun.wait(true);
        }
        finally
        {
            if (_companyId != '')
            {
                appl.setDefaultCompany(curCompanyId, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConditional_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a flag indicating whether the event rule is conditional.
    /// </summary>
    /// <returns>True if the event rule is conditional; otherwise false</returns>
    public display DocEventRuleConditional isConditional_DC()
    {
        container filter = this.filter();

        if (filter == conNull())
        {
            filter = this.getEventRuleFilterQuery_DC();
        }

        if (filter == conNull())
        {
            return false;
        }

        Query query = new Query(filter);
        if (query == null)
        {
            return false;
        }

        // Get defined query ranges
        for (int dsNumber = 1; dsNumber <= query.dataSourceCount(); dsNumber++)
        {
            QueryBuildDatasource qbds = query.dataSourceNo(dsNumber);
            if (qbds.enabled())
            {
                for (int rangeNumber = 1; rangeNumber <= qbds.rangeCount(); rangeNumber++)
                {
                    QueryBuildRange qbr = qbds.range(rangeNumber);

                    // Skip the hidden ranges
                    if (qbr.status() != RangeStatus::Hidden && qbr.value())
                    {
                        return true;
                    }
                }
            }
        }

        // Get defined query filters
        for (int qfNumber = 1; qfNumber <= query.queryFilterCount(); qfNumber++)
        {
            QueryFilter qf = query.queryFilter(qfNumber);

            if (qf.value())
            {
                return true;
            }
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conditionCriteria_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for defined event rule condition criteria.
    /// </summary>
    /// <returns>Defined event rule condition criteria as string</returns>
    public display DocEventRuleConditionCriteria conditionCriteria_DC()
    {
        container filter = this.filter();

        if (filter == conNull())
        {
            filter = this.getEventRuleFilterQuery_DC();
        }

        if (filter == conNull())
        {
            return '';
        }

        Query query = new Query(filter);
        if (query == null)
        {
            return '';
        }

        return DocGlobalHelper::getQueryCriteria(query, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventRuleFilterQuery_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the event rule filter query from the caller form and receives the notification that 
    /// the display methods linked to observable event needs to be executed.
    /// </summary>
    /// <returns>Event rule filter query</returns>
    private container getEventRuleFilterQuery_DC()
    {
        container filter = conNull();

        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataSource fds = FormDataUtil::getFormDataSource(this);
            if (fds)
            {
                FormRun fr = fds.formRun();
                // Checks if the method runBase exists on the current form
                if (fr && formHasMethod(fr, identifierStr(runBase)))
                {
                    DictClass frDictClass = new DictClass(classNum(FormRun));
                    if (frDictClass)
                    {
                        // Check if the method getEventRuleIsConditionalObservableLink_DC exists on the current form
                        if (formHasMethod(fr, identifierStr(getEventRuleIsConditionalObservableLink_DC)))
                        {
                            // Get the form  observable link to receive the notification that the display methods 
                            // linked to observable event needs to be executed.
                            var eventRuleIsConditionalObservableLink_DC = frDictClass.callObject(identifierStr(getEventRuleIsConditionalObservableLink_DC), fr);
                            if (eventRuleIsConditionalObservableLink_DC)
                            {
                                eventRuleIsConditionalObservableLink_DC.observe();
                            }
                        }

                        // Calls the method runBase to get the filter query
                        var eventCreateRule = frDictClass.callObject(identifierStr(runBase), fr);
                        if (eventCreateRule)
                        {
                            filter = eventCreateRule.queryRun().query().pack();
                        }
                    }
                }
            }
        }

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserGroupOriginated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for the flag indicating whether the alert rule was created by another user
    /// and originated from the current user's membership in the user group defined in the alert rule.
    /// </summary>
    /// <returns>True/False</returns>
    public display DocEventRuleUserGroupOriginated isUserGroupOriginated_DC()
    {
        if (this.UserId && this.UserId != curUserId() && this.UserGroupId_DC)
        {
            // Get the user group list for the current user
            str userGroupsStr = UserGroupList::groupsForUser(curUserId());

            // Check if the user group of the alert rule matches one of the user groups in the list
            return DocGlobalHelper::containsTags(userGroupsStr, this.UserGroupId_DC);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primTableName_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for primary table name.
    /// </summary>
    /// <returns>Primary table name</returns>
    public display TableName primTableName_DC()
    {
        return tableId2Name(this.PrimTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>primInstanceRelationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for primary instance relation name.
    /// </summary>
    /// <returns>Primary instance relation name</returns>
    public display RelationName primInstanceRelationName()
    {
        return tableId2Name(int642int(this.PrimInstanceRelationType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for alert table name.
    /// </summary>
    /// <returns>Alert table name</returns>
    public display TableName alertTableName()
    {
        return tableId2Name(this.AlertTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertInstanceRelationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for alert instance relation name.
    /// </summary>
    /// <returns>Alert instance relation name</returns>
    public display RelationName alertInstanceRelationName()
    {
        return tableId2Name(int642int(this.AlertInstanceRelationType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for alert field name.
    /// </summary>
    /// <returns>Alert field name</returns>
    public display FieldName alertFieldName()
    {
        return fieldId2Name(this.AlertTableId, this.AlertFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for event type name.
    /// </summary>
    /// <returns>Event type name</returns>
    public display ClassName typeName()
    {
        return classId2Name(this.TypeId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>