<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailMessageSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEmailMessageSettings class contains settings for email messages.
/// </summary>
public class DocEmailMessageSettings
{
    str             emailFrom;
    str             emailSenderDisplayName;
    str             emailTo;
    str             emailCc;
    str             emailBcc;
    str             emailReplyTo;
    str             emailBounceTo;
    str             emailSubject;
    str             emailBody;
    str             emailAttachmentName;
    container       emailAttachmentContent;     // the email attachment content
    container       emailAdditionalAttachments; // [ [attachmentName, [content]], [attachmentName, [content]], ...]
    eMailPriority   emailPriority;
    Map             emailImages;                // Map(ContentId (DocPlaceholderName) -> ImageContent (Bitmap))



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAdditionalAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an additional email attachment along the report itself
    /// for the email that will be sent in case of Email print destination.
    /// </summary>
    /// <param name="_additionalAttachmentName">Additional attachment name (e.g. 'AdditionalAttachment.pdf').</param>
    /// <param name="_additionalAttachmentFileContent">Email additional attachment file content.</param>
    /// <remarks>
    /// This is the utility method for setting the emailAdditionalAttachments field.
    /// </remarks>
    public void addAdditionalAttachment(str _additionalAttachmentName, container _additionalAttachmentFileContent)
    {
        container   additionalAttachment;
        Filename    additionalAttachmentName;
        Filename    filePath, onlyFilename, fileExt;
            

        if (_additionalAttachmentName == '')
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:EmailAttachmentNameIsNotSet");
        }

        if (_additionalAttachmentFileContent == conNull())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:EmailAttachmentContentIsNotSet");
        }

        if (_additionalAttachmentName)
        {
            [filePath, onlyFilename, fileExt] = Global::fileNameSplit(_additionalAttachmentName);
        }
        
        if (onlyFilename == '' || fileExt == '.')
        {
            DocGlobalHelper::handleException("@DocentricAX:EmailAttachmentNameCannotBeSet");
        }
            
        additionalAttachmentName = onlyFilename + fileExt;
    
        // We are making a structure like:
        // [ [attachmentName, [content]], [attachmentName, [content]], ...]
        additionalAttachment = [additionalAttachmentName, _additionalAttachmentFileContent];
        emailAdditionalAttachments = emailAdditionalAttachments + [additionalAttachment];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyAndDuplicatedEmailAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes empty and duplicated email addresses from To, Cc, Bcc and Reply-to email lists, if any.
    /// </summary>
    /// <returns>True if any empty or duplicated email address is found.</returns>
    /// <remarks>
    /// Empty or duplicated email address in an email list can exist after placeholders are replaced with the
    /// empty or duplicated strings. (e.g. 'name@company.com;;name2@company.com' contains one empty email address)
    /// </remarks>
    public boolean deleteEmptyAndDuplicatedEmailAddresses()
    {
        boolean     foundEmptyAddress;
        str         emailToNew, emailCcNew, emailBccNew, emailFromNew, emailReplyToNew, emailBounceToNew;
    
        emailToNew = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(emailTo);
        emailCcNew = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(emailCc);
        emailBccNew = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(emailBcc);
        emailFromNew = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(emailFrom);
        emailReplyToNew = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(emailReplyTo);
        emailBounceToNew = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(emailBounceTo);

        foundEmptyAddress = false;
        if (emailTo != emailToNew)
        {
            emailTo = emailToNew;
            foundEmptyAddress = true;
        }
    
        if (emailCc != emailCcNew)
        {
            emailCc = emailCcNew;
            foundEmptyAddress = true;
        }
    
        if (emailBcc != emailBccNew)
        {
            emailBcc = emailBccNew;
            foundEmptyAddress = true;
        }
  
        if (emailFrom != emailFromNew)
        {
            emailFrom = emailFromNew;
            foundEmptyAddress = true;
        }

        if (emailReplyTo != emailReplyToNew)
        {
            emailReplyTo = emailReplyToNew;
            foundEmptyAddress = true;
        }

        if (emailBounceTo != emailBounceToNew)
        {
            emailBounceTo = emailBounceToNew;
            foundEmptyAddress = true;
        }
    
        return foundEmptyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailAdditionalAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the container with additional email attachments ([ [attachmentName, [content]], [attachmentName, [content]], ...]).
    /// </summary>
    /// <param name = "_emailAdditionalAttachments">The container with additional email attachments</param>
    /// <returns>The container with additional email attachments</returns>
    public container parmEmailAdditionalAttachments(container _emailAdditionalAttachments = emailAdditionalAttachments)
    {
        emailAdditionalAttachments = _emailAdditionalAttachments;
        return emailAdditionalAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailAttachmentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the email attachment name.
    /// </summary>
    /// <param name="_emailAttachmentName">Email attachment name.</param>
    /// <returns>Email attachment name.</returns>
    public str parmEmailAttachmentName(str _emailAttachmentName = emailAttachmentName)
    {
        emailAttachmentName = _emailAttachmentName;
        return emailAttachmentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailAttachmentContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the email attachment content.
    /// </summary>
    /// <param name = "_emailAttachmentContent">Email attachment content.</param>
    /// <returns>Email attachment content.</returns>
    public container parmEmailAttachmentContent(container _emailAttachmentContent = emailAttachmentContent)
    {
        emailAttachmentContent = _emailAttachmentContent;
        return emailAttachmentContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets email priority.
    /// </summary>
    /// <param name = "_emailPriority">Email priority</param>
    /// <returns>Email priority</returns>
    public eMailPriority parmEmailPriority(eMailPriority _emailPriority = emailPriority)
    {
        emailPriority = _emailPriority;
        return emailPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailSenderDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets email sender display name.
    /// </summary>
    /// <param name = "_emailSenderDisplayName">Email sender display name</param>
    /// <returns>Email sender display name</returns>
    public str parmEmailSenderDisplayName(str _emailSenderDisplayName = emailSenderDisplayName)
    {
        emailSenderDisplayName = _emailSenderDisplayName;
        return emailSenderDisplayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailBcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets one or more emails separated by commas or semicolons.
    /// </summary>
    /// <param name="_emailBcc">One or more emails separated by commas or semicolons.</param>
    /// <returns>One or more emails separated by commas or semicolons.</returns>
    public str parmEmailBcc(str _emailBcc = emailBcc)
    {
        emailBcc = _emailBcc;
        return emailBcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailReplyTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets one or more emails separated by commas or semicolons.
    /// </summary>
    /// <param name = "_emailReplyTo">One or more emails separated by commas or semicolons.</param>
    /// <returns>One or more emails separated by commas or semicolons.</returns>
    public str parmEmailReplyTo(str _emailReplyTo = emailReplyTo)
    {
        emailReplyTo = _emailReplyTo;
        return emailReplyTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailBounceTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets Bounce-to email address.
    /// </summary>
    /// <param name = "_emailBounceTo">Bounce-to email address</param>
    /// <returns>Bounce-to email address</returns>
    public str parmEmailBounceTo(str _emailBounceTo = emailBounceTo)
    {
        emailBounceTo = _emailBounceTo;
        return emailBounceTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the email body.
    /// </summary>
    /// <param name="_emailBody">Email body.</param>
    /// <returns>Email body.</returns>
    public str parmEmailBody(str _emailBody = emailBody)
    {
        emailBody = _emailBody;
        return emailBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailCc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets one or more emails separated by commas or semicolons.
    /// </summary>
    /// <param name="_emailCc">One or more emails separated by commas or semicolons.</param>
    /// <returns>One or more emails separated by commas or semicolons.</returns>
    public str parmEmailCc(str _emailCc = emailCc)
    {
        emailCc = _emailCc;
        return emailCc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets one or more emails separated by commas or semicolons.
    /// </summary>
    /// <param name="_emailFrom">One or more emails separated by commas or semicolons.</param>
    /// <returns>One or more emails separated by commas or semicolons.</returns>
    public str parmEmailFrom(str _emailFrom = emailFrom)
    {
        emailFrom = _emailFrom;
        return emailFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the email subject.
    /// </summary>
    /// <param name="_emailSubject">Email subject.</param>
    /// <returns>Email subject.</returns>
    public str parmEmailSubject(str _emailSubject = emailSubject)
    {
        emailSubject = _emailSubject;
        return emailSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets one or more emails separated by commas or semicolons.
    /// </summary>
    /// <param name="_emailTo">One or more emails separated by commas or semicolons.</param>
    /// <returns>One or more emails separated by commas or semicolons.</returns>
    public str parmEmailTo(str _emailTo = emailTo)
    {
        emailTo = _emailTo;
        return emailTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailImages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets images used in the email.
    /// </summary>
    /// <param name = "_emailImages">Map(ContentId (DocPlaceholderName) -> ImageContent (Bitmap))</param>
    /// <returns>Image map</returns>
    public Map parmEmailImages(Map _emailImages = emailImages)
    {
        emailImages = _emailImages;
        return emailImages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultParmValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default parm values.
    /// </summary>
    public void setDefaultParmValues()
    {
        if (!emailFrom)
        {
            emailFrom = DocEmailMngHelper::getDefaultEmailProviderEmailAddress();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toMessageInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string with From, To and Subject information.
    /// </summary>
    /// <returns>A string with From, To and Subject information</returns>
    public str toMessageInfo()
    {
        str displayStr = '';

        // From
        if (emailFrom)
        {
            displayStr = strFmt('%1: %2', "@DocentricAX:From", emailFrom);
        }

        // To
        if (emailTo)
        {           
            displayStr += (displayStr ? ', ' : '') + strFmt('%1: %2', "@DocentricAX:To", emailTo);
        }

        // Subject
        if (emailSubject)
        {
            displayStr += (displayStr ? ', ' : '') + strFmt('%1: %2', "@DocentricAX:Subject", emailSubject);
        }

        return displayStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the email message.
    /// </summary>
    /// <param name = "_printValidationErrors">Should the validation errors be displayed</param>
    /// <returns>True if validation was successful; otherwise false</returns>
    public boolean validate(boolean _printValidationErrors = true)
    {
        boolean isValid = true;

        if (!emailTo)
        {
            isValid = false;
            if (_printValidationErrors)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:ToFieldNotSpecified");
            }
        }
        else
        {
            if (!DocGlobalHelper::validateEmailList(emailTo))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ToEmailAddressesNotValid", emailTo));
                }
            }
        }
    
        if (emailCc)
        {
            if (!DocGlobalHelper::validateEmailList(emailCc))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:CcEmailAddressesNotValid", emailCc));
                }
            }
        }
    
        if (emailBcc)
        {
            if (!DocGlobalHelper::validateEmailList(emailBcc))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:BccEmailAddressesNotValid", emailBcc));
                }
            }
        }

        if (emailReplyTo)
        {
            if (!DocGlobalHelper::validateEmailList(emailReplyTo))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReplyToEmailAddressesNotValid", emailReplyTo));
                }
            }
        }

        if (emailBounceTo)
        {
            if (!DocGlobalHelper::validateEmail(emailBounceTo))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:BounceToEmailAddressesNotValid", emailBounceTo));
                }
            }
        }
    
        if (!emailFrom)
        {
            if (SysEmailParameters::find().MailerNonInteractive == '')
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX:BatchEmailProviderNotSet");
                }
            }
            else if (DocEmailMngHelper::getDefaultEmailProviderType() == 255)  // Unsupported email provider
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:BatchEmailProviderNotSupported", SysEmailParameters::find().MailerNonInteractive));
                }
            }
            else if (DocEmailMngHelper::getDefaultEmailProviderType() == DocEmailProviderType::SMTP)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX:EmailAccountForSMTPNotSet");
                }
            }
            else if (DocEmailMngHelper::getDefaultEmailProviderType() == DocEmailProviderType::Exchange)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:EmailUserAccountForExchangeNotSet", curUserId()));
                }
            }
            else if (DocEmailMngHelper::getDefaultEmailProviderType() == DocEmailProviderType::Graph)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX5:EmailUserAccountForGraphNotSet", curUserId()));
                }
            }
        }
        else
        {
            if (!DocGlobalHelper::validateEmail(emailFrom))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:FromEmailAddressesInvalid", emailFrom));
                }
            }
        }
    
        if (emailAttachmentName)
        {
            if (!DocFileMngHelper::isValidOnlyFilename(emailAttachmentName))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:AttachmentFilenameInvalid", emailAttachmentName));
                }
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSysEmailTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocEmailMessageSettings class from organization email templates.
    /// </summary>
    /// <param name = "_emailTable">The SysEmailTable table buffer</param>
    /// <param name = "_emailMessage">The SysEmailMessageTable table buffer </param>
    /// <returns>An instance of the DocEmailMessageSettings class</returns>
    public static DocEmailMessageSettings createFromSysEmailTable(SysEmailTable _emailTable, SysEmailMessageTable _emailMessage)
    {
        DocEmailMessageSettings emailMsgSettings = new DocEmailMessageSettings();

        // Frome SysEmailTable: From, Sender Display Name, Priority.
        emailMsgSettings.parmEmailFrom(_emailTable.SenderAddr);
        emailMsgSettings.parmEmailSenderDisplayName(_emailTable.SenderName);
        emailMsgSettings.parmEmailPriority(_emailTable.Priority);

        // From SysEmailMessageTable: Subject, Body.
        emailMsgSettings.parmEmailSubject(_emailMessage.Subject);
        if (_emailMessage.Mail)
        {
            emailMsgSettings.parmEmailBody(_emailMessage.Mail);
        }

        // Set the default values including From email address.
        emailMsgSettings.setDefaultParmValues();

        return emailMsgSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSysEmailSystemTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocEmailMessageSettings class from system email templates.
    /// </summary>
    /// <param name = "_emailSystemTable">The SysEmailSystemTable table buffer</param>
    /// <param name = "_emailMessageSystemTable">The SysEmailMessageSystemTable table buffer</param>
    /// <returns>An instance of the DocEmailMessageSettings class</returns>
    public static DocEmailMessageSettings createFromSysEmailSystemTable(SysEmailSystemTable _emailSystemTable, SysEmailMessageSystemTable _emailMessageSystemTable)
    {
        DocEmailMessageSettings emailMsgSettings = new DocEmailMessageSettings();

        // Frome SysEmailTable: From, Sender Display Name, Priority.
        emailMsgSettings.parmEmailFrom(_emailSystemTable.SenderAddr);
        emailMsgSettings.parmEmailSenderDisplayName(_emailSystemTable.SenderName);
        emailMsgSettings.parmEmailPriority(_emailSystemTable.Priority);

        // From SysEmailMessageTable: Subject, Body.
        emailMsgSettings.parmEmailSubject(_emailMessageSystemTable.Subject);
        if (_emailMessageSystemTable.Mail)
        {
            emailMsgSettings.parmEmailBody(_emailMessageSystemTable.Mail);
        }

        // Set the default values including From email address.
        emailMsgSettings.setDefaultParmValues();

        return emailMsgSettings;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>