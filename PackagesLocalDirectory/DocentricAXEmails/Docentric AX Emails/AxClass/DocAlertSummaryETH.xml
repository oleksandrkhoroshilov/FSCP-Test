<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocAlertSummaryETH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocAlertSummaryETH class is used as an extended handler for alert summary emails.
/// This class supports the alert summary email template stored in the DocAlertSummaryEmailBodyHTM resource file.
/// It is automatically loaded into the System email templates when the Alert summary emails option is enabled 
/// in this form and no email template exists yet.
/// </summary>
public class DocAlertSummaryETH extends DocEmailTemplateAdvancedHandlerWFAL
{
    public const DocPlaceholderName PlaceholderMaxAlertInSummaryLimitExceededWarning = 'MaxAlertInSummaryLimitExceededWarning';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>Class description</returns>
    public ClassDescription description()
    {
        return "@DocentricAX4:AlertSummaryEmailsHandlerClass";
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineCustomPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the given custom placeholder map with placeholder names and their display names.
    /// </summary>
    /// <param name = "_customPlaceholderDefinitionMap">Map of custom placeholders and their display names: Map(DocPlaceholderNameEx -> DocPlaceholderDescription)</param>
    protected void defineCustomPlaceholders(Map _customPlaceholderDefinitionMap /* Map(DocPlaceholderName, DocPlaceholderDescription) */)
    {
        super(_customPlaceholderDefinitionMap);

        if (this.getEventNotificationSource() == DocEmailTemplateEventNotificationSource::Alert)
        {
            // The following placeholders are only available for alert summary email
            if (!_customPlaceholderDefinitionMap.exists(DocAlertSummaryETH::PlaceholderMaxAlertInSummaryLimitExceededWarning))
            {
                _customPlaceholderDefinitionMap.insert(DocAlertSummaryETH::PlaceholderMaxAlertInSummaryLimitExceededWarning, 'ALS - Max alerts in summary limit exceeded warning');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappingsWithCustomPlaceholderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the mappings with custom placeholder values.
    /// </summary>
    /// <param name = "_mappings">Map of custom placeholders and their values: Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_contextInfo">Context info that can be provided for filling _mappings with placeholders' values</param>
    public void fillMappingsWithCustomPlaceholderValues(Map _mappings, container _contextInfo = conNull())
    {
        super(_mappings);

        // Check if the source of the notification event is Alert. If so, store the alert summary context info parameters in the private field.
        if (this.getEventNotificationSource() == DocEmailTemplateEventNotificationSource::Alert)
        {
            // Annul the max alerts in summary exceeded limit warning
            _mappings.insert(DocAlertSummaryETH::PlaceholderMaxAlertInSummaryLimitExceededWarning, '');

            DocAlertSummaryEmailContextInfoParams alertSummaryEmailContextInfoParams = DocAlertSummaryEmailContextInfoParams::createFromAlertSummaryEmailContextInfoContainer(_contextInfo);
            if (alertSummaryEmailContextInfoParams == null || alertSummaryEmailContextInfoParams.getAlertsRemaining() == 0)
            {
                return;
            }

            str warning = strFmt('%1 %2', 
                DocLabelHelper::resolveSysLabel(literalStr("@DocentricAX4:AlertSummaryEmailBodyFooter1"), this.languageId),
                strFmt(DocLabelHelper::resolveSysLabel(literalStr("@DocentricAX4:AlertSummaryEmailBodyFooter2"), this.languageId),
                    alertSummaryEmailContextInfoParams.getAlertsProcessed(), alertSummaryEmailContextInfoParams.getMaxAlertsInSummary(),
                    alertSummaryEmailContextInfoParams.getEmailToAddr(), alertSummaryEmailContextInfoParams.getAlertsRemaining()));

            // Set the max alerts in summary exceeded limit warning
            _mappings.insert(PlaceholderMaxAlertInSummaryLimitExceededWarning, warning);
        } 
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>