<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EventRuleForm_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The class EventRuleForm_DC_Extension is an extension of the form EventRule.
/// </summary>
[ExtensionOf(formStr(EventRule))]
final class EventRuleForm_DC_Extension
{
    private DocEventRuleFormHandler docEventRuleFormHandler;
    private boolean isCurrentUserAdmin_DC;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        // Set the flag indicating if the current user is admin
        isCurrentUserAdmin_DC = EventSecurity::construct(curUserId()).isUserAdmin();

        // Create an instance of the form handler class
        docEventRuleFormHandler = DocEventRuleFormHandler::construct(this);

        next init();

        // Set the admin mode in the instance of form handler class
        docEventRuleFormHandler.setAdminMode(adminMode);

        // Set the value of the ShowRules custom filter combo box from the caller form
        docEventRuleFormHandler.setShowRulesCustomFilterFromCaller();

        // Set the value of the ShowRules custom filter to All when the form is called
        // directly or via the EventAlertInbox and SysOutgoingEmailTable form
        FormRun callerFormRun = this.args().caller();
        if (!callerFormRun || (callerFormRun && (callerFormRun.form().name() == formStr(EventAlertInbox) || callerFormRun.form().name() == formStr(SysOutgoingEmailTable))))
        {
            ShowRules_DC.selection(DocEventRuleShowRules::All);
            FilterAdmin_DC.selection(DocEventRuleFilterAdmin::All);
        }

        this.setControls_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the form.
    /// </summary>
    public void run()
    {
        next run();

        // The field UserId must be visible because all the users from the user group defined in the UserGroupId_DC
        // field can see the alert rule. By default the UserId field is hidden if the form is not open in the Admin mode.
        EventRule_ds.object(fieldNum(EventRule, UserId)).visible(true);
        EventRule_ds.object(fieldNum(EventRule, UserId)).allowEdit(adminMode || isCurrentUserAdmin_DC);

        // Set the field UserGroupId_DC editable depending on the security settings.
        // Only users with the DocentricAXAlertUserGroupMaintain privilege or -SYSADMIN- role can change the field value.
        SecurityRights securityRights = SecurityRights::construct();
        AccessRight accessRight = securityRights.fieldAccessRight(tableStr(EventRule), fieldStr(EventRule, UserGroupId_DC));
        EventRule_ds.object(fieldNum(EventRule, UserGroupId_DC)).allowEdit(accessRight > AccessRight::View);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form controls.
    /// </summary>
    private void setControls_DC()
    {
        // Show/hide the DocEventRuleGridView menu item depending on the admin mode
        DocEventRuleGridView_DC.visible(!adminMode);
        DocEventRuleGridViewAdmin_DC.visible(adminMode);

        // Show/hide the ShowRules custom filter form controls depending on the admin mode
        ShowRules_DC.visible(!adminMode);
        FilterAdmin_DC.visible(adminMode);
        ShowRulesForUserAdmin_DC.visible(adminMode && FilterAdmin_DC.selection() == DocEventRuleFilterAdmin::FilterByUser);
        ShowRulesAdmin_DC.visible(adminMode && (FilterAdmin_DC.selection() == DocEventRuleFilterAdmin::FilterByUser || FilterAdmin_DC.selection() == DocEventRuleFilterAdmin::BulkFilter));

        // Resize The ShowRules custom filter form controls
        ShowRulesFilterGroup_DC.widthMode(FormWidth::SizeToAvailable);
        ShowRules_DC.widthMode(FormWidth::SizeToAvailable);
        FilterAdmin_DC.widthMode(FormWidth::SizeToAvailable);
        ShowRulesForUserAdmin_DC.widthMode(FormWidth::SizeToAvailable);
        ShowRulesAdmin_DC.widthMode(FormWidth::SizeToAvailable);

        // The flag IsUserGroupOriginated can only be visible in non-admin mode
        EventRule_isUserGroupOriginated_DC.visible(!adminMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventRule_OnInitialized_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EventRule data source is initialized.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void EventRule_OnInitialized_DC(FormDataSource _dataSource)
    {
        // Find or create additional query ranges in the root data source query
        docEventRuleFormHandler.findOrCreateQueryRanges(_dataSource.query());

        // Override the jumpRef event for the field RuleId in the EventRule data source
        _dataSource.object(fieldNum(EventRule, RuleId)).
            registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(EventRule, RuleId_OnJumpRef_DC), this);

        // Override the jumpRef event for the field EmailId_DC in the EventRule data source
        _dataSource.object(fieldNum(EventRule, EmailId_DC)).
            registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(EventRule, EmailId_DC_OnJumpRef_DC), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventRule_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EventRule data source is activated.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void EventRule_OnActivated_DC(FormDataSource _dataSource)
    {
        EventRule.setFields_DC(fieldNum(EventRule, SendAlertEmail));
        EventRule.setFields_DC(fieldNum(EventRule, IncludeInSummaryEmail_DC));

        if (!(adminMode || isCurrentUserAdmin_DC))
        {
            // The alert rule must not be editable and not be able to be deleted if the current user is not its owner
            _dataSource.allowEdit(EventRule.UserId == curUserId());
            _dataSource.allowDelete(EventRule.UserId == curUserId());
            DocEventRuleCondition_DC.enabled(EventRule.UserId == curUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventRule_OnQueryExecuting_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EventRule data source query is executing.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void EventRule_OnQueryExecuting_DC(FormDataSource _dataSource)
    {
        // Set query ranges in the root data source query
        docEventRuleFormHandler.setQueryRanges(_dataSource.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventRuleData_AlertField_OnInitialized_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EventRuleData data source is initialized.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void EventRuleData_AlertField_OnInitialized_DC(FormDataSource _dataSource)
    {
        // Extend the default query with additional data sources to retreive all EventRule records where
        // the current user is the owner of the alert rule or belongs to the user group defined in the alert rule.
        docEventRuleFormHandler.addAdditionalDataSources(_dataSource.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowRules_DC_OnSelectionChanged_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the selection of the ShowRules_DC combo box is changed.
    /// </summary>
    public void ShowRules_DC_OnSelectionChanged_DC()
    {
        EventRule_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FilterAdmin_DC_OnSelectionChanged_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the selection of the FilterAdmin_DC combo box is changed.
    /// </summary>
    /// <param name = "_filterAdmin">An instance of the FilterAdmin_DC control</param>
    public void FilterAdmin_DC_OnSelectionChanged_DC(FormComboBoxControl _filterAdmin)
    {
        ShowRulesForUserAdmin_DC.visible(_filterAdmin.selection() == DocEventRuleFilterAdmin::FilterByUser);
        ShowRulesAdmin_DC.visible(_filterAdmin.selection() == DocEventRuleFilterAdmin::FilterByUser || _filterAdmin.selection() == DocEventRuleFilterAdmin::BulkFilter);

        EventRule_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowRulesForUserAdmin_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the ShowRulesForUserAdmin_DC control is modified.
    /// </summary>
    public void ShowRulesForUserAdmin_DC_OnModified_DC()
    {
        EventRule_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowRulesAdmin_DC_OnSelectionChanged_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the selection of the ShowRulesAdmin_DC combo box is changed.
    /// </summary>
    public void ShowRulesAdmin_DC_OnSelectionChanged_DC()
    {
        EventRule_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>RuleId_OnJumpRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified field.
    /// </summary>
    /// <param name = "_field">Form data object</param>
    public void RuleId_OnJumpRef_DC(FormDataObject _field)
    {
        // Skip the default jumpRef to the EventRule form becasue
        // it does not take into account the admin mode.
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailId_DC_OnJumpRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified field.
    /// </summary>
    /// <param name = "_field">Form data object</param>
    public void EmailId_DC_OnJumpRef_DC(FormDataObject _field)
    {
        EventRule::jumpRefEmailId_DC(this, EventRule.EmailId_DC, EventRule.CompanyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailId_DC_OnLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the EmailId_DC is fired.
    /// </summary>
    /// <param name = "_emailId">An instance of the EmailId_DC control</param>
    public void EmailId_DC_OnLookup_DC(FormStringControl _emailId)
    {
        EventRule::lookupEmailId_DC(_emailId, EventRule.CompanyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventRule_GlobalRule_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// When switching between organization-wide and company-specific rule,
    /// clear the previously selected template.
    /// </summary>
    public void EventRule_GlobalRule_OnModified_DC()
    {
        EventRule.EmailId_DC = '';
        EventRule_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>