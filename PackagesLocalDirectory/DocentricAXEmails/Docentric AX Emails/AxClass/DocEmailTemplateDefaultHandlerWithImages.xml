<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTemplateDefaultHandlerWithImages</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEmailTemplateDefaultHandlerWithImages class is a default email template handler class with images.
/// </summary>
public class DocEmailTemplateDefaultHandlerWithImages extends DocEmailTemplateHandlerBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>Class description</returns>
    public ClassDescription description()
    {
        return "@DocentricAX:DefaultHandlerClassWithImages";
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineCustomPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines custom placeholder map.
    /// </summary>
    /// <param name = "_customPlaceholderDefinitionMap">Map of custom placeholders and their display names: Map(DocPlaceholderNameEx -> DocPlaceholderDescription)</param>
    protected void defineCustomPlaceholders(Map _customPlaceholderDefinitionMap /* Map(DocPlaceholderNameEx -> DocPlaceholderDescription) */)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStandardPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the standard placeholder definition map.
    /// </summary>
    /// <param name = "_standardPlaceholderDefinitionMap">Map of standard placeholders and their display names: Map(DocPlaceholderNameEx -> DocPlaceholderDescription)</param>
    protected void changeStandardPlaceholderDefinitionMap(Map _standardPlaceholderDefinitionMap)
    {
        super(_standardPlaceholderDefinitionMap);

        // Add standard image placeholders.
        // Note that image placeholders we need to add to the definition map differently.

        // -- @COMPANYLOGO@
        DocPlaceholderNameEx imagePlaceholderNameExCompanyLogo = DocEmailTemplateHelper::createImagePlaceholderNameEx(DocConstantPlaceholderET::PlaceholderCompanyLogo, 80, 180);
        _standardPlaceholderDefinitionMap.insert(imagePlaceholderNameExCompanyLogo, "@DocentricAX:CompanyLogo");

        // -- @WORKERIMAGE@
        DocPlaceholderNameEx imagePlaceholderNameExWorkerImage = DocEmailTemplateHelper::createImagePlaceholderNameEx(DocConstantPlaceholderET::PlaceholderWorkerImage, 80, 80);
        _standardPlaceholderDefinitionMap.insert(imagePlaceholderNameExWorkerImage, "@DocentricAX2:WorkerImage");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappingsWithStandardPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the _mappings map with the standard placeholders' values.
    /// </summary>
    /// <param name = "_mappings">Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    public void fillMappingsWithStandardPlaceholders(Map _mappings)
    {
        super(_mappings);

        // Add standard image placeholder values.
        // Note that image placeholders we need to add to _mappings differently.

        // -- Company Logo
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCompanyLogo))
        {
            CompanyImage currentCompanyImage = CompanyImage::findByRecord(CompanyInfo::find());
            if (currentCompanyImage.Image)
            {
                DocPlaceholderNameEx imagePlaceholderNameEx_CompanyLogo = DocEmailTemplateHelper::createImagePlaceholderNameEx(DocConstantPlaceholderET::PlaceholderCompanyLogo);
                DocPlaceholderValue imagePlaceholderContent_CompanyLogo = DocEmailTemplateHelper::createImagePlaceholderValueForMappings(currentCompanyImage.Image);
                _mappings.insert(imagePlaceholderNameEx_CompanyLogo, imagePlaceholderContent_CompanyLogo);
            }
        }

        // -- Worker image
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderWorkerImage))
        {
            HcmWorker currentWorker = HcmWorker::find(HcmWorkerLookup::currentWorker());
            if (currentWorker)
            {
                Bitmap workerImage = currentWorker.personImageOrNull_DC();
                if (workerImage)
                {
                    DocPlaceholderNameEx imagePlaceholderNameEx_WorkerImage = DocEmailTemplateHelper::createImagePlaceholderNameEx(DocConstantPlaceholderET::PlaceholderWorkerImage);
                    DocPlaceholderValue imagePlaceholderContent_WorkerImage = DocEmailTemplateHelper::createImagePlaceholderValueForMappings(workerImage);
                    _mappings.insert(imagePlaceholderNameEx_WorkerImage, imagePlaceholderContent_WorkerImage);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>