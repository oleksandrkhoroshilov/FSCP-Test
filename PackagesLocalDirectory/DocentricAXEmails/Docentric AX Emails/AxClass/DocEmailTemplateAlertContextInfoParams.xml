<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTemplateAlertContextInfoParams</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEmailTemplateAlertContextInfoParams class is used to store the context information for alerts.
/// </summary>
public class DocEmailTemplateAlertContextInfoParams implements SysPackable
{
    private EventRule eventRule;
    private EventRuleId eventRuleId;

    private EventInbox eventInbox;
    private EventInboxId eventInboxId;

    private Common alertTable;
    private TableId alertTableTableId;
    private RecId alertTableRecId;
    private DataAreaId alertTableDataAreadId;
    
    private EventType eventType;
    private str linkToBusinessData;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        alertTableTableId,
        alertTableRecId,
        alertTableDataAreadId,
        eventRuleId,
        eventInboxId,
        linkToBusinessData
    #endmacro

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAlertTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the context table buffer for which the alert rule is defined.
    /// Also sets the alert table's TableId, RecId and DataAreaId.
    /// </summary>
    /// <param name = "_alertTable">Alert context table buffer</param>
    /// <returns>Alert table buffer</returns>
    public Common parmAlertTable(Common _alertTable = alertTable)
    {
        alertTable = _alertTable;

        if (!prmIsDefault(_alertTable))  // Setter is called.
        {
            alertTableTableId = _alertTable.TableId;
            alertTableRecId = _alertTable.RecId;
            alertTableDataAreadId = _alertTable.DataAreaId;
        }

        return alertTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the event rule record. Also sets EventRuleId.
    /// </summary>
    /// <param name = "_eventRule">Event rule record</param>
    /// <returns>Event rule record</returns>
    public EventRule parmEventRule(EventRule _eventRule = eventRule)
    {
        eventRule = _eventRule;

        if (!prmIsDefault(_eventRule))  // Setter is called.
        {
            eventRuleId = eventRule.RuleId;
        }

        return eventRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventInbox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the event inbox record. Also sets EventRuleId.
    /// </summary>
    /// <param name = "_eventInbox">Event inbox record</param>
    /// <returns>Event inbox record</returns>
    public EventInbox parmEventInbox(EventInbox _eventInbox = eventInbox)
    {
        eventInbox = _eventInbox;

        if (!prmIsDefault(_eventInbox))  // Setter is called.
        {
            eventInboxId = _eventInbox.InboxId;
        }

        return eventInbox;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets an instance of the EventType class.
    /// </summary>
    /// <param name = "_eventType">An instance of the EventType class</param>
    /// <returns>An instance of the EventType class</returns>
    public EventType parmEventType(EventType _eventType = eventType)
    {
        eventType = _eventType;
        return eventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinkToBusinessData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the url link to business data.
    /// </summary>
    /// <param name = "_linkToBusinessData">The url link to business data</param>
    /// <returns>The url link to business data</returns>
    public str parmLinkToBusinessData(str _linkToBusinessData = linkToBusinessData)
    {
        linkToBusinessData = _linkToBusinessData;
        return linkToBusinessData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the DocEmailTemplateAlertContextInfoParams class.
    /// </summary>
    /// <returns>A container that contains the current instance of the DocEmailTemplateAlertContextInfoParams class</returns>
    public container pack()
    {
        container eventTypeContainer = conNull();

        if (eventType != null)
        {
            eventTypeContainer = eventType.pack();
        }

        return [#CurrentVersion, #CurrentList, eventTypeContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the _packedClass parameter to an instance of the DocEmailTemplateAlertContextInfoParams class.
    /// </summary>
    /// <param name="_packedClass">The container from which to deserialize the instance.</param>
    /// <returns>True if deserialization was successful; otherwise, false</returns>
    public boolean unpack(container _packedClass)
    {
        boolean ret = false;
        int version = RunBase::getVersion(_packedClass);
        container eventTypeContainer = conNull();

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, eventTypeContainer] = _packedClass;
                ret = true;
                break;

            default :
                ret = false;
        }

        if (ret)
        {
            if (eventTypeContainer != conNull() && eventRuleId)
            {
                EventTypeId eventTypeId = EventRule::find(eventRuleId).TypeId;
                if (eventTypeId)
                {
                    eventType = DictClass::createObject(classId2Name(eventTypeId));
                    if (eventType != null)
                    {
                        ret = eventType.unpack(eventTypeContainer) && ret;
                    }
                }
            }
            else
            {
                eventType = null;
            }
        }

        eventInbox = EventInbox::find(eventInboxId);
        eventRule = EventRule::find(eventRuleId);
        if (alertTableTableId)
        {
            alertTable = DocGlobalHelper::getTableRecord(alertTableTableId, alertTableRecId, alertTableDataAreadId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocEmailTemplateAlertContextInfoParams object.
    /// </summary>
    /// <param name = "_eventRule">The EventRule table buffer</param>
    /// <param name = "_eventType">An instance of the EventType class</param>
    /// <param name = "_alertTable">The alert table buffer</param>
    /// <param name = "_eventInbox">The EventInbox table buffer</param>
    /// <param name = "_linkToBusinessData">The url link to business data related to event action</param>
    /// <returns>DocEmailTemplateAlertContextInfoParams object</returns>
    public static DocEmailTemplateAlertContextInfoParams construct(EventRule _eventRule, EventType _eventType, Common _alertTable, EventInbox _eventInbox, str _linkToBusinessData)
    {
        DocEmailTemplateAlertContextInfoParams contextInfoParams = new DocEmailTemplateAlertContextInfoParams();
        contextInfoParams.parmAlertTable(_alertTable);
        contextInfoParams.parmEventRule(_eventRule);
        contextInfoParams.parmEventType(_eventType);
        contextInfoParams.parmEventInbox(_eventInbox);
        contextInfoParams.parmLinkToBusinessData(_linkToBusinessData);

        return contextInfoParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAlertContextInfoContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocEmailTemplateAlertContextInfoParams object from the provided container.
    /// If container is not provided or it doesn't represent Alert Context Info, which is the case
    /// if the first element in the container is the value 'Alert' - a symbol value of the enum element
    /// DocEmailTemplateEventNotificationSource::Alert, returns null.
    /// </summary>
    /// <param name = "_alertContextInfoContainer">Alert Context Info container</param>
    /// <returns>DocEmailTemplateAlertContextInfoParams object</returns>
    public static DocEmailTemplateAlertContextInfoParams createFromAlertContextInfoContainer(container _alertContextInfoContainer)
    {
        if (_alertContextInfoContainer != conNull() &&
            conPeek(_alertContextInfoContainer, 1) == enum2Symbol(enumNum(DocEmailTemplateEventNotificationSource), DocEmailTemplateEventNotificationSource::Alert))
        {
            DocEmailTemplateAlertContextInfoParams alertContextInfoParams = new DocEmailTemplateAlertContextInfoParams();
            if (conLen(_alertContextInfoContainer) > 1)
            {
                alertContextInfoParams.unpack(conPeek(_alertContextInfoContainer, 2));
            }
            return alertContextInfoParams;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAlertContextInfoContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a context info container for alert.
    /// A container has 2 elements:
    /// - 'Alert' - a symbol value of the enum element DocEmailTemplateEventNotificationSource::Alert
    /// - an instance of the DocEmailTemplateAlertContextInfoParams class as packed container
    /// </summary>
    /// <param name = "_alertContextInfoParams">The DocEmailTemplateAlertContextInfoParams object contains alert context info</param>
    /// <returns>A context info container for alert</returns>
    public static container createAlertContextInfoContainer(DocEmailTemplateAlertContextInfoParams _alertContextInfoParams)
    {
        return [enum2Symbol(enumNum(DocEmailTemplateEventNotificationSource), DocEmailTemplateEventNotificationSource::Alert), _alertContextInfoParams.pack()];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>