<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTemplateAdvancedHandlerWFAL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Runtime.Remoting.Messaging;

/// <summary>
/// The DocEmailTemplateAdvancedHandlerWFAL class is used as advanced handler for workflows and alerts.
/// </summary>
public class DocEmailTemplateAdvancedHandlerWFAL extends DocEmailTemplateDefaultHandlerWithImages implements DocEmailTemplateEmailProcessingActions, IDocEmailTemplateAlerts
{
    public const str EventInboxIdKey = 'EventInboxId';

    private EventInbox m_eventInboxRecord;
    private Common wfAlEntity;
    // Applicable for alerts only:
    private container alertContextInfoContainer;
    private DocEmailTemplateAlertContextInfoParams alertContextInfo;

}


/* Alert email template with DocEmailTemplateAdvancedHandlerWFAL

<style type="text/css">* {
    font-family: Roboto, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

#header {
    font-size: large;
    font-weight: bold;
    background-color: #2a495d;
    color: #fff;
    padding: 10px;
}

table {
    border-spacing: 10px;
    border-collapse: separate;
}

.header-cell
{
    font-weight: bold;
    background-color: #40b69c;
    color: #fff;
    padding: 10px;
    min-width: 150px;
    width: 75px;
}
</style>
<p id="header">New alert notification</p>

<p>Hi&nbsp;%WORKER%,</p>

<p>You have a new alert for:</p>

<table cell="" id="alert-details">
    <tbody>
        <tr>
            <td class="header-cell">Related record</td>
            <td><a href="%LinkToBusinessData%" target="_blank">%For%</a></td>
        </tr>
        <tr>
            <td class="header-cell">Company</td>
            <td>%Company%</td>
        </tr>
        <tr>
            <td class="header-cell">Details</td>
            <td><a href="%LinkToAlertRule%" target="_blank">%Subject%</a></td>
        </tr>
        <tr>
            <td class="header-cell">Action to take</td>
            <td>%Message%</td>
        </tr>
        <tr>
            <td class="header-cell">Modified date</td>
            <td>%Occurred%</td>
        </tr>
        <tr>
            <td class="header-cell">Environment</td>
            <td>%ENVDOMAINNAME%</td>
        </tr>
    </tbody>
</table>

<p>Best regards,</p>

<p>Your&#39;s D365FO ðŸ’ª</p>
*/
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>Class description</returns>
    public ClassDescription description()
    {
        return "@DocentricAX:AdvancedHandlerClassWFAndAlerts";
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineCustomPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the given custom placeholder map with placeholder names and their display names.
    /// </summary>
    /// <param name = "_customPlaceholderDefinitionMap">Map of custom placeholders and their display names: Map(DocPlaceholderNameEx -> DocPlaceholderDescription)</param>
    protected void defineCustomPlaceholders(Map _customPlaceholderDefinitionMap /* Map(DocPlaceholderName, DocPlaceholderDescription) */)
    {
        super(_customPlaceholderDefinitionMap);

        if (this.getEventNotificationSource() == DocEmailTemplateEventNotificationSource::Workflow)
        {
            // The following placeholders are only available for workflow notifications
            if (!_customPlaceholderDefinitionMap.exists(DocConstantPlaceholderET::PlaceholderEntityUrl))
            {
                _customPlaceholderDefinitionMap.insert(DocConstantPlaceholderET::PlaceholderEntityUrl, 'WF - Entity URL');
            }
            if (!_customPlaceholderDefinitionMap.exists(DocConstantPlaceholderET::PlaceholderFirstComment))
            {
                _customPlaceholderDefinitionMap.insert(DocConstantPlaceholderET::PlaceholderFirstComment, 'WF - First comment');
            }
            if (!_customPlaceholderDefinitionMap.exists(DocConstantPlaceholderET::PlaceholderLastComment))
            {
                _customPlaceholderDefinitionMap.insert(DocConstantPlaceholderET::PlaceholderLastComment, 'WF - Last comment');
            }
            if (!_customPlaceholderDefinitionMap.exists(DocConstantPlaceholderET::PlaceholderAllComments))
            {
                _customPlaceholderDefinitionMap.insert(DocConstantPlaceholderET::PlaceholderAllComments, 'WF - All comments');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappingsWithCustomPlaceholderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the mappings with custom placeholder values.
    /// </summary>
    /// <param name = "_mappings">Map of custom placeholders and their values: Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_contextInfo">Context info that can be provided for filling _mappings with placeholders' values</param>
    public void fillMappingsWithCustomPlaceholderValues(Map _mappings, container _contextInfo = conNull())
    {
        super(_mappings);

        int64 eventInboxId;

        if (_mappings.exists('alertid'))
        {
            eventInboxId = _mappings.lookup('alertid');
        }

        EventInbox eventInbox = EventInbox::find(eventInboxId);

        if (eventInbox.RecId != 0)
        {
            // Store Event Inbox Id which can be used later in the pipeline for handling attachments or
            // some advanced processing of the email message, e.g. some additional changes of the email body.
            this.setEventInboxId(eventInboxId);
        }

        // Check if the source of the notification event is Alert. If so, store the alert context info parameters in the private field.
        if (this.getEventNotificationSource() == DocEmailTemplateEventNotificationSource::Alert)
        {
            alertContextInfoContainer = _contextInfo;
        }

        /* URL link to the corresponding entity. Applicable to both Workflows and Alerts */
        // Note that after MS redesign of Alerts, Docentric fully controlls the input _mappings for Alerts,
        // so it already contains the URL link to the alert entity. Thus, we need to create the URL link only for a WF entity.

        // Check if the source of the notification event is not Workflow. If so, return.
        if (this.getEventNotificationSource() != DocEmailTemplateEventNotificationSource::Workflow)
        {
            return;
        }

        if (eventInbox.RecId != 0)
        {
            try
            {
                // Create the valid URL that opens the WF underlying entity.
                if (eventInbox.contextData() != conNull())
                {
                    str linkToBusinessData = DocEmailTemplateHelper::getLinkToBusinessData(this.workflowAlertEntity(), eventInbox);

                    if (linkToBusinessData && !_mappings.exists(DocConstantPlaceholderET::PlaceholderEntityUrl))
                    {
                        _mappings.insert(DocConstantPlaceholderET::PlaceholderEntityUrl, linkToBusinessData);
                    }
                    // Set the link to business data
                    if (_mappings.exists('LinkToBusinessData'))
                    {
                        _mappings.insert('LinkToBusinessData', linkToBusinessData);
                    }
                }
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:DeepLinkCreationFailed", DocConstantPlaceholderET::PlaceholderEntityUrl));
            }

            // Set the link to alert
            if (_mappings.exists('LinkToAlert'))
            {
                Map fieldNameValueMap = new Map(Types::String, Types::String);
                fieldNameValueMap.insert(fieldStr(EventInbox, InboxId), int642Str(eventInbox.InboxId));
                str linkToAlert = DocGlobalHelper::generateRecordUrl(
                    menuItemDisplayStr(DocEventAlertInbox), MenuItemType::Display, tableStr(EventInbox), fieldNameValueMap, eventInbox.CompanyId);
                _mappings.insert('LinkToAlert', linkToAlert);
            }

            // Annul the link to alert rule
            if (_mappings.exists('LinkToAlertRule'))
            {
                _mappings.insert('LinkToAlertRule', '');
            }
           
            this.fillMappingsWithWorkflowComments(_mappings, _contextInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappingsWithWorkflowComments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the mappings with workflow comments values.
    /// </summary>
    /// <param name = "_mappings">Map of custom placeholders and their values: Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_contextInfo">Context info that can be provided for filling _mappings with placeholders' values</param>
    protected void fillMappingsWithWorkflowComments(Map _mappings, container _contextInfo = conNull())
    {
        // Get the WF comments to insert them in the _mappings.
        try
        {
            DocWorkflowCommentWriter workflowCommentWriter = DocWorkflowCommentWriter::constructDefault(this.workflowAlertEntity().TableId, this.workflowAlertEntity().RecId, languageId);
            workflowCommentWriter.parmIncludeCommentUser(true);
            workflowCommentWriter.parmIncludeCommentDateTime(true);
            workflowCommentWriter.parmIncludeTrackingMessage(false);
            
            // Set the first comment for the workflow record that is in process
            _mappings.insert(DocConstantPlaceholderET::PlaceholderFirstComment, workflowCommentWriter.firstWorkflowCommentToString());

            // Set the last comment for the workflow record that is in process
            _mappings.insert(DocConstantPlaceholderET::PlaceholderLastComment, workflowCommentWriter.lastWorkflowCommentToString());

            // Set all the comments for the workflow record that is in process
            _mappings.insert(DocConstantPlaceholderET::PlaceholderAllComments, workflowCommentWriter.allWorkflowCommentsToString());
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX4:FailedFetchingWfCommentsErrorMsg");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEventInboxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the event inbox Id.
    /// </summary>
    /// <param name = "_eventInboxId">Event inbox Id</param>
    protected void setEventInboxId(int64 _eventInboxId)
    {
        CallContext::SetData(DocEmailTemplateAdvancedHandlerWFAL::EventInboxIdKey, _eventInboxId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventInboxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the event inbox Id.
    /// </summary>
    /// <returns>Event inbox Id</returns>
    protected int64 getEventInboxId()
    {
        int64 eventInboxId = CallContext::GetData(DocEmailTemplateAdvancedHandlerWFAL::EventInboxIdKey);
        return eventInboxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventInboxRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the event inbox record.
    /// </summary>
    /// <returns>Event inbox record</returns>
    public EventInbox getEventInboxRecord()
    {
        if (m_eventInboxRecord.RecId == 0)
        {
            m_eventInboxRecord = EventInbox::find(this.getEventInboxId());
        }
        return m_eventInboxRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowAlertEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the workflow/alert underlying entity.
    /// </summary>
    /// <returns>The workflow/alert underlying entity record</returns>
    public Common workflowAlertEntity()
    {
        if (wfAlEntity.RecId == 0)
        {
            EventInbox ei = this.getEventInboxRecord();
            if (ei.RecId != 0)
            {
                wfAlEntity = SysDictTable::findFromKeyData(ei.ParentTableId, ei.keyFieldData());
            }
        }
        return wfAlEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachmentsContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the context record that Attachments should be fetched from.
    /// </summary>
    /// <returns>The attachment context record as Common</returns>
    public Common getAttachmentsContextRecord()
    {
        Common attachmentsContextRecord = this.workflowAlertEntity();
        return attachmentsContextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposeEventInboxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dsiposes the event inbox Id.
    /// </summary>
    protected void disposeEventInboxId()
    {
        CallContext::FreeNamedDataSlot(DocEmailTemplateAdvancedHandlerWFAL::EventInboxIdKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove EventInboxId from CallContext.
    /// NOTE: Invoke this method in the end of the emailing process, if the fillMappingsWithCustomPlaceholderValues() method has been executed.
    /// </summary>
    public void finalize()
    {
        // Dispose EventInboxId saved in the executing thread's TLS.
        this.disposeEventInboxId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAlertContextInfo</Name>
				<Source><![CDATA[
    /*********************************************************/
    /*       METHODS RELATED TO ALERT EMAILS ONLY         */
    /*********************************************************/
    /// <summary>
    /// WARNING: Can be used only for alert email notifications.
    /// Gets alert context info parameters, which contains the EventRule and EventInbox records, alert table buffer, EventType class instance, Url to alert entity.
    /// </summary>
    /// <returns>Alert context info parameters</returns>
    public DocEmailTemplateAlertContextInfoParams getAlertContextInfo()
    {
        if (alertContextInfo == null && this.getEventNotificationSource() == DocEmailTemplateEventNotificationSource::Alert)
        {
            alertContextInfo = DocEmailTemplateAlertContextInfoParams::createFromAlertContextInfoContainer(alertContextInfoContainer);
        }
        return alertContextInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAlertAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// WARNING: Can be used only for alert email notifications.
    /// The method is invoked from the DocEmailTemplateManager::processAlertEmail() method.
    /// Handles document attachments in the wanted way, when standard handling is not flexible enough.
    /// Use to this.getAttachmentsContextRecord() method to get the attachment context record, which is the corresponding Alert entity.
    /// How does the standard handling work: If SysEmailTable/SysEmailSystemTable.AddEmailAttachments_DC == true,
    /// add all attachments which are tagged with the SysEmailTable/SysEmailSystemTable.EmailAttachmentsTags_DC tags.
    /// </summary>
    /// <param name = "_emailMsgSettings">
    /// Email message settings. Add attachments using the _emailMsgSettings.addAdditionalAttachment(fileName, fileContent) method.
    /// </param>
    /// <returns>Returns False if the standard attachment handling should be skipped</returns>
    public boolean handleAlertAttachments(DocEmailMessageSettings _emailMsgSettings)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAlertEmailProcessingParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// WARNING: Can be used only for alert email notifications.
    /// The method is invoked from the DocEmailTemplateManager::processAlertEmail() method.
    /// Implement this method in order to change out-of-the-box populated email processing parameters.
    /// </summary>
    /// <param name = "_emailProcessingParams">Email processing parameters</param>
    public void changeAlertEmailProcessingParams(DocEmailProcessingParams _emailProcessingParams)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessMailMessageWFAL</Name>
				<Source><![CDATA[
    /*********************************************************/
    /*       METHODS RELATED TO WORKFLOW EMAILS ONLY         */
    /*********************************************************/
    
    /// <summary>
    /// WARNING: Can be used only for workflow email notifications.
    /// Override this method instead of postProcessMailMessage()
    /// to provide your custom implementation for changing the outgoing email.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The SysOutgoingEmailTable table buffer</param>
    /// <param name = "_parameters">Input parameters</param>
    protected void postProcessMailMessageWFAL(SysOutgoingEmailTable _outgoingEmailTable, container _parameters = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessMailMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// WARNING: Can be used only for workflow email notifications.
    /// The method is invoked from DataEventHandler(tableStr(SysOutgoingEmailTable), DataEventType::Inserting).
    /// Performs post-processing of the email message inserting into Batch email sending status.
    /// Change here the email message body, subject or any other field, including extension fields added by Docentric.
    /// Instead of overriding this method override the postProcessMailMessageWFAL() method.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The Batch email sending status table</param>
    /// <param name = "_parameters">Input parameters</param>
    /// <returns>True</returns>
    public boolean postProcessMailMessage(SysOutgoingEmailTable _outgoingEmailTable, container _parameters = conNull())
    {
        // Override this method to provide your custom implementation for changing the outgoing email.
        this.postProcessMailMessageWFAL(_outgoingEmailTable, _parameters);

        // Set the fields related to Account data.
        DocAccountRole accountType;
        DocAccountNum accountNum;
        [accountType, accountNum] = DocDirPartyHelper::getAccountData(this.workflowAlertEntity());
        if (accountType != DocAccountRole::NA)
        {
            _outgoingEmailTable.AccountNum_DC = accountNum;
            _outgoingEmailTable.AccountType_DC = accountType;
        }

        // Set the ContextInfo field.
        EventInbox eventInbox = this.getEventInboxRecord();
        _outgoingEmailTable.ContextInfo_DC = strFmt('%1 (%2)', tableId2Name(eventInbox.AlertTableId), eventInbox.AlertedFor);
        
        // Update the EmailId field in the EventInbox table
        // NOTE: Do not uncomment the code below - it will cause the UpdateConflict error in the EventInbox table, because
        // the other EventInvoice table buffer instace in the EventNotificationWorkflow::create method is in update state.
        // We need to find another solution to this problem.
        //EventInbox eventInbox = this.getEventInboxRecord();
        //if (eventInbox)
        //{
        //    ttsbegin;
        //    eventInbox.selectForUpdate(true);
        //    eventInbox.EmailId = _outgoingEmailTable.EmailItemId;
        //    eventInbox.update();
        //    ttscommit;
        //}

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// WARNING: Can be used only for workflow email notifications.
    /// The method is invoked from DataEventHandler(tableStr(SysOutgoingEmailTable), DataEventType::Inserting).
    /// Handles document attachments in the wanted way, when standard handling is not flexible enough.
    /// Use to this.getAttachmentsContextRecord() method to get the attachment context record, which is the corresponding WF entity.
    /// How does the standard handling work: If SysEmailTable/SysEmailSystemTable.AddEmailAttachments_DC == true,
    /// add all attachments which are tagged with the SysEmailTable/SysEmailSystemTable.EmailAttachmentsTags_DC tags.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The Batch email sending status table</param>
    /// <param name = "_parameters">Input parameters</param>
    /// <returns>Returns False if the standard attachment handling should be skipped</returns>
    public boolean handleAttachments(SysOutgoingEmailTable _outgoingEmailTable, container _parameters = conNull())
    {
        // Use the corresponding EventInbox record, i.e. the this.getAttachmentsContextRecord() method
        // to handle document attachments in the wanted way.
        /* Example:
        Common commonTable = this.getAttachmentsContextRecord();
        if (tableNum(PurchReqTable) == commonTable.TableId)
        {
            _outgoingEmailTable.insertAttachmentsFromCommon_DC(commonTable);
            // NOTE: For handling attachments, check also other _DC methods on the extended SysOutgoingEmailTable.
        }
        return false;
        */
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>