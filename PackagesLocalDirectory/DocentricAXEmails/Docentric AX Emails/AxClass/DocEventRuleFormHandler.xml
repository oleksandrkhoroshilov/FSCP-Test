<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEventRuleFormHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEventRuleFormHandler class is a form handler for the DocEventRuleGridView and EventRule form.
/// </summary>
public class DocEventRuleFormHandler
{
    private FormRun formRun;
    private boolean adminMode;
    private const str EventRuleExistsDsName = 'EventRuleExists';
    private QueryBuildRange qbrEventRuleUserId;
    private QueryBuildRange qbrEventRuleUserGroupId_DC;
    private QueryBuildRange qbrEventRuleExistsUserId;

    private FormComboBoxControl eventRuleShowRules;
    private FormComboBoxControl eventRuleFilterAdmin;
    private FormStringControl eventRuleShowRulesForUserAdmin;
    private FormComboBoxControl eventRuleShowRulesAdmin;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the DocEventRuleFormHandler class.
    /// </summary>
    /// <param name = "_formRun">An instance of the FormRun class</param>
    protected void new(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the DocEventRuleFormHandler class.
    /// </summary>
    /// <param name = "_formRun">An instance of the FormRun class</param>
    /// <returns>An instance of the DocEventRuleFormHandler class</returns>
    public static DocEventRuleFormHandler construct(FormRun _formRun)
    {
        if (!_formRun || !(_formRun.form().name() == formStr(EventRule) || _formRun.form().name() == formStr(DocEventRuleGridView)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt('The %1 class must be instantiated from the %2 or %3 form.', classStr(DocEventRuleFormHandler), formStr(EventRule), formStr(DocEventRuleGridView)));
        }

        DocEventRuleFormHandler docEventRuleFormHandler = new DocEventRuleFormHandler(_formRun);
        return docEventRuleFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdminMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag indicating whether the form is open in admin mode or not.
    /// </summary>
    /// <param name = "_adminMode">True if the form is open in admin mode; otherwise false</param>
    public void setAdminMode(boolean _adminMode)
    {
        adminMode = _adminMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowRulesCustomFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an instances of the ShowRules custom filter form controls.
    /// </summary>
    public void setShowRulesCustomFilter()
    {
        switch (formRun.form().name())
        {
            case formStr(EventRule):
                eventRuleFilterAdmin = formRun.design().controlName(formControlStr(EventRule, FilterAdmin_DC));
                eventRuleShowRulesForUserAdmin = formRun.design().controlName(formControlStr(EventRule, ShowRulesForUserAdmin_DC));
                eventRuleShowRulesAdmin = formRun.design().controlName(formControlStr(EventRule, ShowRulesAdmin_DC));
                eventRuleShowRules = formRun.design().controlName(formControlStr(EventRule, ShowRules_DC));
                break;

            case formStr(DocEventRuleGridView):
                eventRuleFilterAdmin = formRun.design().controlName(formControlStr(DocEventRuleGridView, FilterAdmin));
                eventRuleShowRulesForUserAdmin = formRun.design().controlName(formControlStr(DocEventRuleGridView, ShowRulesForUserAdmin));
                eventRuleShowRulesAdmin = formRun.design().controlName(formControlStr(DocEventRuleGridView, ShowRulesAdmin));
                eventRuleShowRules = formRun.design().controlName(formControlStr(DocEventRuleGridView, ShowRules));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowRulesCustomFilterFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the ShowRules custom filter form controls depending
    /// on the value of the ShowRules custom filter form controls from the caller form.
    /// </summary>
    public void setShowRulesCustomFilterFromCaller()
    {
        FormRun callerFormRun = formRun.args().caller();
        if (callerFormRun)
        {
            FormComboBoxControl callerEventRuleShowRules;
            FormComboBoxControl callerEventRuleFilterAdmin;
            FormStringControl callerEventRuleShowRulesForUserAdmin;
            FormComboBoxControl callerEventRuleShowRulesAdmin;

            // Get an instace of the ShowRules custom filter combo box control from the caller form
            switch (callerFormRun.form().name())
            {
                case formStr(EventRule):
                    callerEventRuleFilterAdmin = callerFormRun.design().controlName(formControlStr(EventRule, FilterAdmin_DC));
                    callerEventRuleShowRulesForUserAdmin = callerFormRun.design().controlName(formControlStr(EventRule, ShowRulesForUserAdmin_DC));
                    callerEventRuleShowRulesAdmin = callerFormRun.design().controlName(formControlStr(EventRule, ShowRulesAdmin_DC));
                    callerEventRuleShowRules = callerFormRun.design().controlName(formControlStr(EventRule, ShowRules_DC));
                    break;

                case formStr(DocEventRuleGridView):
                    callerEventRuleFilterAdmin = callerFormRun.design().controlName(formControlStr(DocEventRuleGridView, FilterAdmin));
                    callerEventRuleShowRulesForUserAdmin = callerFormRun.design().controlName(formControlStr(DocEventRuleGridView, ShowRulesForUserAdmin));
                    callerEventRuleShowRulesAdmin = callerFormRun.design().controlName(formControlStr(DocEventRuleGridView, ShowRulesAdmin));
                    callerEventRuleShowRules = callerFormRun.design().controlName(formControlStr(DocEventRuleGridView, ShowRules));
                    break;
            }

            if (callerEventRuleFilterAdmin)
            {
                this.setShowRulesCustomFilter();

                // Set the value of the ShowRules custom filter combo box control in the current form
                eventRuleFilterAdmin.selection(callerEventRuleFilterAdmin.selection());
                eventRuleShowRulesForUserAdmin.text(callerEventRuleShowRulesForUserAdmin.valueStr());
                eventRuleShowRulesAdmin.selection(callerEventRuleShowRulesAdmin.selection());
                eventRuleShowRules.selection(callerEventRuleShowRules.selection());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds additional data sources to the specified query object.
    /// </summary>
    /// <param name = "_query">Query object</param>
    public void addAdditionalDataSources(Query _query)
    {
        if (!_query || _query.dataSourceNo(1).name() != tableStr(EventRule))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_query)));
        }

        // Check if additional datasources already exist
        if (_query.dataSourceName(EventRuleExistsDsName))
        {
            return;
        }

        // Extend the default query with additional data sources to retreive all EventRule records where
        // the current user is the owner of the alert rule or belongs to the user group defined in the alert rule.
        QueryBuildDataSource qbdsEventRuleExists = _query.dataSourceName(tableStr(EventRule)).addDataSource(tableNum(EventRule), EventRuleExistsDsName);
        qbdsEventRuleExists.addLink(fieldNum(EventRule, RuleId), fieldNum(EventRule, RuleId), tableStr(EventRule));
        qbdsEventRuleExists.joinMode(JoinMode::ExistsJoin);
        qbrEventRuleExistsUserId = qbdsEventRuleExists.addRange(fieldNum(EventRule, UserId));
        qbrEventRuleExistsUserId.status(RangeStatus::Locked);

        QueryBuildDataSource qbdsUserGroupInfo = qbdsEventRuleExists.addDataSource(tableNum(UserGroupInfo), tableStr(UserGroupInfo));
        qbdsUserGroupInfo.addLink(fieldNum(EventRule, UserGroupId_DC), fieldNum(UserGroupInfo, id), EventRuleExistsDsName);
        qbdsUserGroupInfo.joinMode(JoinMode::OuterJoin);

        QueryBuildDataSource qbdsUserGroupList = qbdsUserGroupInfo.addDataSource(tableNum(UserGroupList), tableStr(UserGroupList));
        qbdsUserGroupList.addLink(fieldNum(UserGroupInfo, id), fieldNum(UserGroupList, groupId), tableStr(UserGroupInfo));
        qbdsUserGroupList.joinMode(JoinMode::OuterJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates additional query ranges in the specified query object.
    /// </summary>
    /// <param name = "_query">Query object</param>
    public void findOrCreateQueryRanges(Query _query)
    {
        if (!_query || _query.dataSourceNo(1).name() != tableStr(EventRule))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_query)));
        }

        qbrEventRuleUserId = SysQuery::findOrCreateRange(_query.dataSourceName(tableStr(EventRule)), fieldNum(EventRule, UserId));
        qbrEventRuleUserGroupId_DC = SysQuery::findOrCreateRange(_query.dataSourceName(tableStr(EventRule)), fieldNum(EventRule, UserGroupId_DC));
        qbrEventRuleExistsUserId = SysQuery::findOrCreateRange(_query.dataSourceName(EventRuleExistsDsName), fieldNum(EventRule, UserId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the query ranges in the specified query object depending on the
    /// admin mode and the value of the ShowRules custom filter form controls.
    /// </summary>
    /// <param name = "_query">Query object</param>
    public void setQueryRanges(Query _query)
    {
        if (!_query || _query.dataSourceNo(1).name() != tableStr(EventRule))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_query)));
        }

        this.setShowRulesCustomFilter();

        if (adminMode)
        {
            switch (eventRuleFilterAdmin.selection())
            {
                // Show all event rules 
                case DocEventRuleFilterAdmin::All:
                    _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::ExistsJoin);

                    qbrEventRuleUserId.value('');
                    qbrEventRuleUserGroupId_DC.value('');
                    qbrEventRuleExistsUserId.value('');
                    break;

                // Show event rules for specified user
                case DocEventRuleFilterAdmin::FilterByUser:
                    switch (eventRuleShowRulesAdmin.selection())
                    {
                        case DocEventRuleShowRulesAdmin::UserIsCreatorOrUserGroupMember:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::ExistsJoin);

                            qbrEventRuleUserId.value('');
                            qbrEventRuleUserGroupId_DC.value('');
                            qbrEventRuleExistsUserId.value(strFmt('((%1.%2 == "%3") || (%4.%5 == "%3"))',
                                EventRuleExistsDsName,
                                fieldStr(EventRule, UserId),
                                eventRuleShowRulesForUserAdmin.valueStr(),
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId)));
                            break;

                        case DocEventRuleShowRulesAdmin::UserIsCreatorAndUserGroupMember:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::ExistsJoin);

                            qbrEventRuleUserId.value('');
                            qbrEventRuleUserGroupId_DC.value('');
                            qbrEventRuleExistsUserId.value(strFmt('((%1.%2 == "%3") && (%4.%5 == "%3"))',
                                EventRuleExistsDsName,
                                fieldStr(EventRule, UserId),
                                eventRuleShowRulesForUserAdmin.valueStr(),
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId)));
                            break;

                        case DocEventRuleShowRulesAdmin::UserIsCreatorAndNotUserGroupMember:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::NoExistsJoin);

                            qbrEventRuleUserId.value(SysQuery::value(eventRuleShowRulesForUserAdmin.valueStr()));
                            qbrEventRuleUserGroupId_DC.value('');
                            qbrEventRuleExistsUserId.value(strFmt('((%1.%2 == "%3") && (%4.%5 == "%3"))',
                                EventRuleExistsDsName,
                                fieldStr(EventRule, UserId),
                                eventRuleShowRulesForUserAdmin.valueStr(),
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId)));
                            break;

                        case DocEventRuleShowRulesAdmin::UserIsUserGroupMemberAndNotCreator:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::ExistsJoin);

                            qbrEventRuleUserId.value(queryValue(strFmt('!%1', eventRuleShowRulesForUserAdmin.valueStr())));
                            qbrEventRuleUserGroupId_DC.value(strFmt('!%1', SysQueryRangeUtil::valueEmptyString()));
                            qbrEventRuleExistsUserId.value(strFmt('(%1.%2 == "%3")',
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId),
                                eventRuleShowRulesForUserAdmin.valueStr()));
                            break;
                    }
                    break;

                // Show event rules using bulk filter
                case DocEventRuleFilterAdmin::BulkFilter:
                    switch (eventRuleShowRulesAdmin.selection())
                    {
                        case DocEventRuleShowRulesAdmin::UserIsCreatorOrUserGroupMember:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::ExistsJoin);

                            qbrEventRuleUserId.value('');
                            qbrEventRuleUserGroupId_DC.value('');
                            qbrEventRuleExistsUserId.value(strFmt('((%1.%2 == %3.%4) || (%5.%6 == %3.%4))',
                                EventRuleExistsDsName,
                                fieldStr(EventRule, UserId),
                                tableStr(EventRule),
                                fieldStr(EventRule, UserId),
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId)));
                            break;

                        case DocEventRuleShowRulesAdmin::UserIsCreatorAndUserGroupMember:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::ExistsJoin);

                            qbrEventRuleUserId.value('');
                            qbrEventRuleUserGroupId_DC.value('');
                            qbrEventRuleExistsUserId.value(strFmt('((%1.%2 == %3.%4) && (%5.%6 == %3.%4))',
                                EventRuleExistsDsName,
                                fieldStr(EventRule, UserId),
                                tableStr(EventRule),
                                fieldStr(EventRule, UserId),
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId)));
                            break;

                        case DocEventRuleShowRulesAdmin::UserIsCreatorAndNotUserGroupMember:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::NoExistsJoin);

                            qbrEventRuleUserId.value('');
                            qbrEventRuleUserGroupId_DC.value('');
                            qbrEventRuleExistsUserId.value(strFmt('((%1.%2 == %3.%4) && (%5.%6 == %3.%4))',
                                EventRuleExistsDsName,
                                fieldStr(EventRule, UserId),
                                tableStr(EventRule),
                                fieldStr(EventRule, UserId),
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId)));
                            break;

                        case DocEventRuleShowRulesAdmin::UserIsUserGroupMemberAndNotCreator:
                            _query.dataSourceName(EventRuleExistsDsName).joinMode(JoinMode::ExistsJoin);

                            qbrEventRuleUserId.value('');
                            qbrEventRuleUserGroupId_DC.value(strFmt('!%1', SysQueryRangeUtil::valueEmptyString()));
                            qbrEventRuleExistsUserId.value(strFmt('(%1.%2 != %3.%4)',
                                tableStr(EventRule),
                                fieldStr(EventRule, UserId),
                                tableStr(UserGroupList),
                                fieldStr(UserGroupList, userId)));
                            break;
                    }

                    break;
            }
        }
        else
        {
            switch (eventRuleShowRules.selection())
            {
                case DocEventRuleShowRules::My:
                    qbrEventRuleUserId.value(SysQuery::value(curUserId()));
                    qbrEventRuleExistsUserId.value('');
                    break;

                case DocEventRuleShowRules::UserGroupOriginated:
                    qbrEventRuleUserId.value(queryValue(SysQueryRangeUtil::anyUserIdNotCurrent()));
                    qbrEventRuleExistsUserId.value(strFmt('(%1.%2 == "%3")',
                        tableStr(UserGroupList),
                        fieldStr(UserGroupList, userId),
                        curUserId()));
                    break;

                case DocEventRuleShowRules::All:
                    qbrEventRuleUserId.value('');
                    qbrEventRuleExistsUserId.value(strFmt('((%1.%2 == "%3") || (%4.%5 == "%3"))',
                        EventRuleExistsDsName,
                        fieldStr(EventRule, UserId),
                        curUserId(),
                        tableStr(UserGroupList),
                        fieldStr(UserGroupList, userId)));
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>