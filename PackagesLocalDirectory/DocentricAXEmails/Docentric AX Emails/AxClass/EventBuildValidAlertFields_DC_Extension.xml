<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EventBuildValidAlertFields_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class EventBuildValidAlertFields_DC_Extension is an extension of the class EventBuildValidAlertFields.
/// </summary>
[ExtensionOf(classStr(EventBuildValidAlertFields))]
final class EventBuildValidAlertFields_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field label for the specified form control.
    /// </summary>
    /// <param name="_formControl">The <see cref="T:FormControl" /> for which a label is requested.</param>
    /// <returns>The message event field label.</returns>
    /// <remarks>
    /// Used internally in the processing to convert a <see cref="T:FormControl" /> into a label. Only
    /// returns a label if the label does not already exist for another control, based on the same database
    /// field; otherwise, blank will be returned.
    /// </remarks>
    protected EventFieldLabel getFieldLabel(Object _formControl)
    {
        // Get the field label for the specified control. The base method returns an empty label if the label
        // already exists for another control, based on the same database field.
        EventFieldLabel fieldLabel = next getFieldLabel(_formControl);

        // When we create an alert rule for a selected caller form control via the context menu, we must return
        // its label, even if the same label already exists for another control based on the same database field. 
        // This is necessary to correctly set the name of the alert table and field in the EventCreateRule form.
        if (!fieldLabel && this.parmFormRun().selectedControl() && EventBuildValidAlertFields::isControlTypeValid(this.parmFormRun().selectedControl()))
        {
            TableId tableId;
            FieldId fieldId;
            DataSourceNumber dataSourceId;

            if (this.isDimensionField(_formControl))
            {
                ListEnumerator le = strSplit(_formControl.dataRelationPath(), '.').getEnumerator();
                le.moveNext();
                tableId = tableName2Id(le.current());
                le.moveNext();
                fieldId = fieldId2Ext(fieldName2Id(tableId, le.current()), 1);
                dataSourceId = 0;

                if (tableId == 0 || fieldId == 0)
                {
                    return '';
                }
            }
            else
            {
                FormDataSource fdsCurrentControl = formDataSourceMap.lookup(_formControl.dataSource());

                if (!fdsCurrentControl)
                {
                    return '';
                }

                tableId = fdsCurrentControl.cursor().TableId;
                fieldId = _formControl.dataField();
                dataSourceId = fdsCurrentControl.id();
            }

            TmpEventAlertField tmpEventAlertFieldCheck;
            tmpEventAlertFieldCheck.setTmpData(this.parmTmpEventAlertField());

            // Select already created entries for the very same field on the very same datasource
            select firstonly tmpEventAlertFieldCheck
                index hint RefIdx
                where tmpEventAlertFieldCheck.RefTableName == tableId2name(tableId)        
                   && tmpEventAlertFieldCheck.RefFieldName == fieldId2name(tableId, fieldId)
                   && tmpEventAlertFieldCheck.DataSourceId == dataSourceId
                   && tmpEventAlertFieldCheck.ControlId == _formControl.id();

            // If same field with exact same form control already created, then return <blank> to avoid the field being created twice
            if (tmpEventAlertFieldCheck.RecId)
            {
                return '';
            }
        }

        return _formControl.labelText();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>