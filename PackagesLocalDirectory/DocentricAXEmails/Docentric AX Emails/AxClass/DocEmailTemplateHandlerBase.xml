<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTemplateHandlerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEmailTemplateHandlerBase abstract class is a base handler class for email templates.
/// </summary>
abstract class DocEmailTemplateHandlerBase
{
    private SysEmailId emailId;
    private boolean isSystem;
    private DocEmailTemplateEventNotificationSource eventNotificationSource;
    protected LanguageId languageId;
    protected Map standardPlaceholderDefinitionMap;   // Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))
    // NOTE: For custom placeholders a subclass is resposible.
    protected Map customPlaceholderDefinitionMap;     // Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))
    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of the DocEmailTemplateHandlerBase class.
    /// </summary>    
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmailId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the email Id.
    /// </summary>
    /// <param name = "_emailId">Email Id</param>
    private void setEmailId(SysEmailId _emailId)
    {
        emailId = _emailId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email Id.
    /// </summary>
    /// <returns>Email Id</returns>
    public SysEmailId emailId()
    {
        return emailId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEventNotificationSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the soource of the notification event.
    /// </summary>
    /// <param name = "_eventNotificationSource">The source of the notification event</param>
    private void setEventNotificationSource(DocEmailTemplateEventNotificationSource _eventNotificationSource)
    {
        eventNotificationSource = _eventNotificationSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventNotificationSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source of the notification event.
    /// </summary>
    /// <returns>The source of the notification event</returns>
    public DocEmailTemplateEventNotificationSource getEventNotificationSource()
    {
        return eventNotificationSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the language of the Email Template Handler (ETH) class.
    /// If empty, the default language from the corresponding SysEmailTable/SysEmailSystemTable is used.
    /// If empty, the current user language is used.
    /// </summary>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>The language of the Email Template Handler (ETH) class</returns>
    public LanguageId parmLanguageId(LanguageId _languageId = languageId)
    {
        languageId = _languageId;
        if (languageId == '')
        {
            // If empty, use the default language.
            if (isSystem)
            {
                languageId = SysEmailSystemTable::find(emailId).DefaultLanguage;
            }
            else
            {
                languageId = SysEmailTable::find(emailId).DefaultLanguage;
            }
            // If empty, use the current user language.
            if (languageId == '')
            {
                languageId = currentUserLanguage();
            }
        }
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the email is a system email.
    /// </summary>
    /// <param name = "_isSystem">A flag indicating whether the email is a system email</param>
    /// <returns>True/False</returns>
    public boolean parmIsSystem(boolean _isSystem = isSystem)
    {
        isSystem = _isSystem;
        return isSystem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implement this method in your derived class to provide the class description.
    /// </summary>
    /// <returns>Description of the specific Email Template Handler (ETH) class</returns>
    public abstract ClassDescription description()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /*------------------------------------------------------------------------------------*/
    /*  Instance methods used for defining placeholders showed in Docentric email editor  */
    /*------------------------------------------------------------------------------------*/
    /// <summary>
    /// Gets/Sets the standard placeholder definiton map.
    /// If getter is called and the map doesn't exist, then the map is built and returned.
    /// </summary>
    /// <param name = "_standardPlaceholderDefinitionMap">Standard placeholder definition map: Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</param>
    /// <returns>Standard placeholder definition map: Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</returns>
    public Map parmStandardPlaceholderDefinitionMap(Map _standardPlaceholderDefinitionMap = standardPlaceholderDefinitionMap)
    {
        standardPlaceholderDefinitionMap = _standardPlaceholderDefinitionMap;
        if (prmIsDefault(_standardPlaceholderDefinitionMap) && standardPlaceholderDefinitionMap == null)
        {
            this.defineStandardPlaceholders();
        }
        return standardPlaceholderDefinitionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the custom placeholder definiton map.
    /// If getter is called and the map doesn't exist, then the map is built and returned.
    /// </summary>
    /// <param name = "_customPlaceholderDefinitionMap">Custom placeholder definition map: Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</param>
    /// <returns>Custom placeholder definition map: Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</returns>
    public Map parmCustomPlaceholderDefinitionMap(Map _customPlaceholderDefinitionMap = customPlaceholderDefinitionMap)
    {
        customPlaceholderDefinitionMap = _customPlaceholderDefinitionMap;
        if (prmIsDefault(_customPlaceholderDefinitionMap) && customPlaceholderDefinitionMap == null)
        {
            customPlaceholderDefinitionMap = new Map(Types::String, Types::String); // Map(DocPlaceholderNameEx -> DocPlaceholderDescription)
            this.defineCustomPlaceholders(customPlaceholderDefinitionMap);
        }
        return customPlaceholderDefinitionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineStandardPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the standard placeholder definiton map.
    /// </summary>
    private void defineStandardPlaceholders()
    {
        standardPlaceholderDefinitionMap = new Map(Types::String, Types::String); // Map(DocPlaceholderNameEx -> DocPlaceholderDescription)
        DocEmailTemplateHelper::fillStandardPlaceholderDefinitionMap(standardPlaceholderDefinitionMap);
        
        boolean isUsedForWF    = false;
        str     workflowType   = '';
        boolean isUsedForAlert = false;
        if (isSystem)
        {
            SysEmailSystemTable emailSystemTable = SysEmailSystemTable::find(emailId);
            isUsedForWF = emailSystemTable.IsUsedForWF_DC;
            workflowType = emailSystemTable.WorkflowType_DC;
            isUsedForAlert = (emailSystemTable.IsUsedForAlert_DC || emailSystemTable.IsUsedForAlertSummaryEmail_DC);
        }
        else
        {
            SysEmailTable emailTable = SysEmailTable::find(emailId);
            isUsedForWF = emailTable.IsUsedForWF_DC;
            workflowType = emailTable.WorkflowType_DC;
            isUsedForAlert = emailTable.IsUsedForAlert_DC;
        }

        if (isUsedForWF)
        {
            // Add common workflow placeholders, if the Use WF flag is set.
            DocEmailTemplateHelper::fillStandardPlaceholderDefinitionMapForWfCommon(standardPlaceholderDefinitionMap);
        }

        /* NOTE: This functionality is disabled.
        if (workflowType != '')
        {
            // Add workflow specific placeholders, if workflow is set.
            DocEmailTemplateHelper::fillStandardPlaceholderDefinitionMapForWfType(workflowType, standardPlaceholderDefinitionMap);
        } */

        if (isUsedForAlert)
        {
            DocEmailTemplateHelper::fillStandardPlaceholderDefinitionMapForAlerts(standardPlaceholderDefinitionMap);
        }

        // Give a chance to a sub-class to remove some standard placeholders.
        // This can be useful in case of emails sent from within a workflow, since there it could be numerous
        // placeholders defined by the specific workflow type, which can be confusing for end-users.
        this.changeStandardPlaceholderDefinitionMap(standardPlaceholderDefinitionMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStandardPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implement this method in your derived class to remove some standard placeholders.
    /// </summary>
    /// <param name = "_standardPlaceholderDefinitionMap">Map of standard placeholders and their display names: Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</param>
    protected void changeStandardPlaceholderDefinitionMap(Map _standardPlaceholderDefinitionMap)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineCustomPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implement this method in your derived class if you need to provide custom placeholders, which will be showed in Docentric email editor.
    /// Fill the given _customPlaceholderDefinitionMap map with placeholder names and their display names.
    /// </summary>
    /// <param name = "_customPlaceholderDefinitionMap">Map of custom placeholders and their display names: Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</param>
    abstract protected void defineCustomPlaceholders(Map _customPlaceholderDefinitionMap /* Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str)) */)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappingsWithStandardPlaceholders</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------------------------------------------------------------*/
    /*  Instance methods used for the generation time, i.e. when email is generated and placeholders are being replaced  */
    /*-------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    /// Fills the _mappings map with the standard placeholders' values.
    /// </summary>
    /// <param name = "_mappings">Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str))</param>
    public void fillMappingsWithStandardPlaceholders(Map _mappings)
    {
        DocEmailTemplateHelper::fillMappingsWithStandardPlaceholderValues(emailId, this.parmLanguageId(), _mappings, isSystem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappingsWithCustomPlaceholderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implement this method in your derived class if you need to provide custom placeholder values and fill
    /// _mappings, using the provided context info or other placeholder values already filled in _mappings.
    /// Usually, this happens when you use the SysEmailTable::sendEmail() or SysSystemEmailTable::sendEmail() method.
    /// </summary>
    /// <param name = "_mappings">Map of custom placeholders and their values: Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str))</param>
    /// <param name = "_contextInfo">Context info that could be used for providing the placeholder values and filling _mappings</param>
    public void fillMappingsWithCustomPlaceholderValues(Map _mappings, container _contextInfo = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLineMappingsWithCustomPlaceholderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implement this method in your derived class if you need to provide custom placeholder values for a dynamic table and
    /// fill _lineMappings, using the provided context info or other placeholder values already filled in _mappings.
    /// </summary>
    /// <param name = "_lineMappings">
    /// List of Map(PlaceholderName (str) -> PlaceholderValue (str)). Each item from the list contains a map of placeholders used for a corresponding email body line.
    /// If you have multiple dynamic tables, use the fillMultipleLineMappingsWithCustomPlaceholderValues() method instead.
    /// </param>
    /// <param name = "_mappings">Map of custom placeholders and their values: Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str))</param>
    /// <param name = "_contextInfo">Context info that could be used for providing the placeholder values and filling _lineMappings</param>
    public void fillLineMappingsWithCustomPlaceholderValues(List _lineMappings, Map _mappings, container _contextInfo = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMultipleLineMappingsWithCustomPlaceholderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implement this method in your derived class if you need to provide custom placeholder values for multiple
    /// dynamic tables, using the provided context info or other placeholder values already filled in _mappings.
    /// </summary>
    /// <param name = "_multipleLineMappings">
    /// Map(DynamicTableName (str) -> List of Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str)));
    /// Map of custom placeholders and their values for lines for each of dynamic tables.
    /// If you have only one dynamic table, use the fillLineMappingsWithCustomPlaceholderValues() method instead.
    /// </param>
    /// <param name = "_mappings">Map of custom placeholders and their values: Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str))</param>
    /// <param name = "_contextInfo">Context info that could be used for providing the placeholder values and filling _multipleLineMappings</param>
    public void fillMultipleLineMappingsWithCustomPlaceholderValues(Map _multipleLineMappings, Map _mappings, container _contextInfo = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromEmailId</Name>
				<Source><![CDATA[
    /*-----------------------*/
    /*  Construction method  */
    /*-----------------------*/
    /// <summary>
    /// Constructs the corresponding ETH (Email Template Handler) class instance from the given email ID.
    /// </summary>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_isSystem">Specify whether the email is a system email</param>
    /// <returns>An instance of the DocEmailTemplateHandlerBase class</returns>
    public static DocEmailTemplateHandlerBase constructFromEmailId(SysEmailId _emailId, boolean _isSystem = false)
    {
        if (!_emailId)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _emailId is not set');
        }
    
        str ethClassName;
        DocEmailTemplateEventNotificationSource eventNotificationSource;
        if (_isSystem)
        {
            SysEmailSystemTable emailSystemTable = SysEmailSystemTable::find(_emailId);
            ethClassName = emailSystemTable.EmailTemplateHandlerClass_DC;
            // Get the source of the notification event
            if (emailSystemTable.IsUsedForWF_DC)
            {
                eventNotificationSource = DocEmailTemplateEventNotificationSource::Workflow;
            } 
            else if (emailSystemTable.IsUsedForAlert_DC || emailSystemTable.IsUsedForAlertSummaryEmail_DC)
            {
                eventNotificationSource = DocEmailTemplateEventNotificationSource::Alert;
            }
        }
        else
        {
            SysEmailTable emailTable = SysEmailTable::find(_emailId);
            ethClassName = emailTable.EmailTemplateHandlerClass_DC;
            // Get the source of the notification event
            if (emailTable.IsUsedForWF_DC)
            {
                eventNotificationSource = DocEmailTemplateEventNotificationSource::Workflow;
            }
            else if (emailTable.IsUsedForAlert_DC)
            {
                eventNotificationSource = DocEmailTemplateEventNotificationSource::Alert;
            }
        }

        if (ethClassName == '')
        {
            DocGlobalHelper::handleException(funcName(), strFmt('No email message or ETH class found for the given ID (%1)', _emailId));
        }

        SysDictClass ethClassSysDictClass = new SysDictClass(className2Id(ethClassName));
        if (ethClassSysDictClass == null)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('ETH class for the email message (%1) does not exist', _emailId));
        }

        DocEmailTemplateHandlerBase ethClassInstance = ethClassSysDictClass.makeObject();
        ethClassInstance.setEmailId(_emailId);
        ethClassInstance.parmIsSystem(_isSystem);
        ethClassInstance.setEventNotificationSource(eventNotificationSource);
        return ethClassInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /*------------------------------------------------------------------------------------*/
    /*  The entry method used for defining placeholders shown in Docentric email editor  */
    /*------------------------------------------------------------------------------------*/
    /// <summary>
    /// Gets all the placeholders for the given email ID, including both standard and custom placeholders.
    /// </summary>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_isSystem">Specify whether the email is a system email</param>
    /// <returns>Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</returns>
    public static Map getAllPlaceholderDefinitionMap(SysEmailId _emailId, boolean _isSystem = false)
    {
        DocEmailTemplateHandlerBase ethClass = DocEmailTemplateHandlerBase::constructFromEmailId(_emailId, _isSystem);

        Map stdPlaceholderDefMap = ethClass.parmStandardPlaceholderDefinitionMap();
        Map customPlaceholderDefMap = ethClass.parmCustomPlaceholderDefinitionMap();

        // Make union of these two maps.
        Map allPlaceholderDefMap = stdPlaceholderDefMap;
        MapEnumerator customMapEnum = customPlaceholderDefMap.getEnumerator();
        while (customMapEnum.moveNext())
        {
            if (!allPlaceholderDefMap.exists(customMapEnum.currentKey()))
            {
                allPlaceholderDefMap.insert(customMapEnum.currentKey(), customMapEnum.currentValue());
            }
        }

        return allPlaceholderDefMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------------------------------------------------*/
    /*  Use this method for getting list of standard and custom placeholders defined by a derived ETH class  */
    /*-------------------------------------------------------------------------------------------------------*/
    /// <summary>
    /// Gets the custom placeholders for the given email ID.
    /// </summary>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_isSystem">Specify whether the email is a system email</param>
    /// <returns>Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</returns>
    public static Map getCustomPlaceholderDefinitionMap(SysEmailId _emailId, boolean _isSystem = false)
    {
        DocEmailTemplateHandlerBase ethClass = DocEmailTemplateHandlerBase::constructFromEmailId(_emailId, _isSystem);
        Map customPlaceholderDefMap = ethClass.parmCustomPlaceholderDefinitionMap();
        return customPlaceholderDefMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStandardPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the standard placeholders for the given email ID.
    /// </summary>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_isSystem">Specify whether the email is a system email</param>
    /// <returns>Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</returns>
    public static Map getStandardPlaceholderDefinitionMap(SysEmailId _emailId, boolean _isSystem = false)
    {
        DocEmailTemplateHandlerBase ethClass = DocEmailTemplateHandlerBase::constructFromEmailId(_emailId, _isSystem);
        Map standardPlaceholderDefMap = ethClass.parmStandardPlaceholderDefinitionMap();
        return standardPlaceholderDefMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>placeholderDefinitionMapToDefinitionMapEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str)) to Map(DocPlaceholderName (str) -> DocPlaceholderDefinition (class))
    /// </summary>
    /// <param name = "_placeholderDefinitionMap">Map(DocPlaceholderNameEx (str) -> DocPlaceholderDescription (str))</param>
    /// <returns>Map(DocPlaceholderName (str) -> DocPlaceholderDefinition (class))</returns>
    public static Map placeholderDefinitionMapToDefinitionMapEx(Map _placeholderDefinitionMap)
    {
        Map placeholderDefinitionMapEx = new Map(Types::String, Types::Class);
        MapEnumerator e = _placeholderDefinitionMap.getEnumerator();
        while (e.moveNext())
        {
            DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(e.currentKey(), e.currentValue());
            placeholderDefinitionMapEx.insert(placeholderDef.name(), placeholderDef);
        }

        return placeholderDefinitionMapEx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllPlaceholderDefinitionMapEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the placeholders for the given email ID, including both standard and custom placeholders.
    /// </summary>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_isSystem">Specify whether the email is a system email</param>
    /// <returns>Map(DocPlaceholderName (str) -> DocPlaceholderDefinition (class))</returns>
    public static Map getAllPlaceholderDefinitionMapEx(SysEmailId _emailId, boolean _isSystem = false)
    {
        return DocEmailTemplateHandlerBase::placeholderDefinitionMapToDefinitionMapEx(
                    DocEmailTemplateHandlerBase::getAllPlaceholderDefinitionMap(_emailId, _isSystem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappings</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------------------------------------------------------------*/
    /*  The entry method used for the generation time, i.e. when email is generated and placeholders are being replaced  */
    /*-------------------------------------------------------------------------------------------------------------------*/
    /// <summary>
    /// Fill the given _mappings map (and optionally _lineMappings) with placeholder's values for the given email,
    /// using the already provided placeholder values in _mappings and/or the provided contenxt info.
    /// </summary>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_languageId">Language ID. It is used for formatting some standard placeholder values. If empty, the default language of the given email is used</param>
    /// <param name = "_mappings">Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str))</param>
    /// <param name = "_isSystem">True, if the provided _emailId is the ID of a System email template; otherwise the ID of an Organization email template.</param>
    /// <param name = "_contextInfo">Context info that can be provided for filling _mappings and _lineMappings with placeholders' values</param>
    /// <param name = "_lineMappings">List of Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str))</param>
    /// <param name = "_multipleLineMappings">Map(DynamicTableName (str) -> List of Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str)))</param>
    /// <returns>Instanced ETH class object that has been used for filling mappings</returns>
    public static DocEmailTemplateHandlerBase fillMappings(SysEmailId _emailId, LanguageId _languageId,
                                                           Map _mappings  /* Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str)) */,
                                                           boolean _isSystem = false,
                                                           container _contextInfo = conNull(),
                                                           List _lineMappings = null  /* List of Map(DocPlaceholderNameEx -> DocPlaceholderValue) */,
                                                           Map _multipleLineMappings = null  /* Map(DynamicTableName -> List of Map(DocPlaceholderNameEx -> DocPlaceholderValue)) */)
    {
        if (_mappings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _mappings is not set');
        }

        DocEmailTemplateHandlerBase ethClass = DocEmailTemplateHandlerBase::constructFromEmailId(_emailId, _isSystem);
        ethClass.parmLanguageId(_languageId);
        
        // Fill _mappings with the standard placeholder values.
        ethClass.fillMappingsWithStandardPlaceholders(_mappings);

        // Fill _mappings with the custom placeholder values using _contextInfo.
        ethClass.fillMappingsWithCustomPlaceholderValues(_mappings, _contextInfo);

        if (_lineMappings != null)
        {
            // Fill _lineMappings with the custom placeholder values using _mappings and _contextInfo.
            ethClass.fillLineMappingsWithCustomPlaceholderValues(_lineMappings, _mappings, _contextInfo);
        }

        if (_multipleLineMappings != null)
        {
            // Fill _multipleLineMappings with the custom placeholder values using _mappings and _contextInfo.
            ethClass.fillMultipleLineMappingsWithCustomPlaceholderValues(_multipleLineMappings, _mappings, _contextInfo);
        }

        return ethClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>