<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysEmailTable_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SysEmailTable_DC_Extension is an extension of the table SysEmailTable.
/// </summary>
[ExtensionOf(tableStr(SysEmailTable))]
final class SysEmailTable_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>htmlEncodeParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// For Docentric's HTML placeholders avoid HTML encoding, and for each HTML placeholder replace
    /// the extended placeholder name with its name. For example, replace %signature?Html% with %signature%.
    /// </summary>
    /// <param name = "_params">A map with placeholders</param>
    /// <returns>A map with encoded HTML placeholders</returns>
    public static Map htmlEncodeParameters(Map _params)
    {
        Map htmlMap = new Map(Types::String, Types::String);
        
        // Fill the map with Docentric's HTML placeholders.
        if (_params)
        {
            MapEnumerator mapEnum = _params.getEnumerator();
            while (mapEnum.moveNext())
            {
                DocPlaceholderNameEx placeholderNameEx = mapEnum.currentKey();
                DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

                if (placeholderDef.type() == DocPlaceholderType::HTML)
                {
                    htmlMap.insert(placeholderNameEx, mapEnum.currentValue());
                }
            }
        }
        
        // Invoke the built-in htmlEncodeParameters() method.
        Map encodedMap = next htmlEncodeParameters(_params);
        
        // If there are HTML placeholders in the mappings, update their names and replace their HTML encoded values with the stored values.
        if (!htmlMap.empty())
        {
            // Update name of each HTML placeholder in mappings in order to be successfully replaced
            // by standard functionality later in the pipeline with its value (which is an HTML fragment).
            // For example: %signature?Html% should be updated to %signature%.
            // Also, replace its value previosly encoded by the built-in method with the stored value,
            // since HTML placeholders' values shouldn't be HTML encoded.
            MapEnumerator htmlMapEnum = htmlMap.getEnumerator();
            while (htmlMapEnum.moveNext())
            {
                DocPlaceholderNameEx placeholderNameEx = htmlMapEnum.currentKey();
                DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

                encodedMap.remove(placeholderNameEx);

                if (encodedMap.exists(placeholderDef.name()))
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Two placeholders with the same name found (%1)', placeholderDef.name()));
                }
                encodedMap.insert(placeholderDef.name(), htmlMapEnum.currentValue());
            }
        }

        return encodedMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an email.
    /// 
    /// The built-in mappings are being filled up with the values of additional placeholders 
    /// from the corresponding ETH class, and then being replaced in the same method
    /// </summary>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_language">Language Id</param>
    /// <param name = "_emailAddr">Email recipients</param>
    /// <param name = "_mappings">Mappings: Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str)</param>
    /// <param name = "_attachmentFilename">Attachment file name</param>
    /// <param name = "_xmlData">Xml data</param>
    /// <param name = "_isTraceable">Is traceble</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_isWithRetries">Is with retries</param>
    public static void sendMail(
        SysEmailId _emailId,
        LanguageId _language,
        str _emailAddr,
        Map _mappings,
        Filename _attachmentFilename,
        str _xmlData,
        boolean _isTraceable,
        UserId _userId,
        boolean _isWithRetries)
    {
        // Check if the Docentric's improvement of Email templates is turned on.
        if (DocEmailTemplateHelper::isDocentricImprovedEmailTemplatesTurnedOn(_emailId, false))
        {
            // Create the mappings if it is not provided.
            if (_mappings == null)
            {
                _mappings = new Map(Types::String, Types::String);  // Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str))
            }

            // Publish event that map with placeholder values will be filled.
            DocEmailTemplateDelegates emailTemplateDelegates = DocEmailTemplateDelegates::instance();
            DocEventHandlerResult res = emailTemplateDelegates.onBeforeFillingMappings(_emailId, _language, _emailAddr, _mappings, _attachmentFilename, false);
            if (!res.cancelExecution())
            {
                container contextInfo = conNull();
                try
                {
                    if (res.result())
                    {
                        contextInfo = res.result();
                    }
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Event Handler Result (res.result()) should return a container with context info for email (%1)', _emailId));
                }
        
                try
                {
                    // Instance the proper ETH class and additionally fill _mapping with
                    // the standard and custom placeholders using emailId and languageId.
                    DocEmailTemplateHandlerBase::fillMappings(_emailId, _language, _mappings, false, contextInfo);

                    // If sending email is traceable, for each image placeholder save its value (i.e. image content)
                    // to the global cache and update the placeholder value to the global cache image content key.
                    if (_isTraceable)
                    {
                        DocEmailTemplateHelper::prepareMappingsWithImagesForBuiltInEmailing(_mappings, _emailId, _language, false);

                        // Note that the event handler [DataEventHandler(tableStr(SysOutgoingEmailTable), DataEventType::Inserting)]
                        // is used to embed images for image placeholders from the email body when the outgoing email message is being saved.
                    }
                    else
                    {
                        int numberOfUsedImagesInEmailBody = DocEmailTemplateHelper::removeUnusedImagesFromMappingsForBuiltInEmailing(_mappings, _emailId, _language, false);
                        if (numberOfUsedImagesInEmailBody > 0)
                        {
                            // Image placeholders are not currently supported for non-traceable emails.
                            DocGlobalHelper::handleError(
                            strFmt('Image placeholders are not currently supported for non-traceable emails. The email (%1) will be sent but without images.', _emailId));
                        }
                    }
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Error while filling the mappings with placeholder values for email template (%1)', _emailId));
                }
            }
        }

        next sendMail(_emailId, _language, _emailAddr, _mappings, _attachmentFilename, _xmlData, _isTraceable, _userId, _isWithRetries);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>