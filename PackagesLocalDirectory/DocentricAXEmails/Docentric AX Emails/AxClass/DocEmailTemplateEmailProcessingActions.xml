<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTemplateEmailProcessingActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// WARNING: This interface is used for Workflow but NOT for Alert email notifications.
/// Previously, when Alert emails were implemented in the same way as Workflow emails, they had been sent only via Batch email sending status
/// using the built-in SysEmailTable/SysEmailSystemTable::sendMail() methods. Docentric didn't have full controll of this process and that's why
/// these methods were invoked from DataEventHandler(tableStr(SysOutgoingEmailTable), DataEventType::Inserting).
/// After the latest Microsoft's redesign of Alerts, the built-in Alert emails are sent using Email provider (and without using Email templates).
/// Docentric extended the Alert functionality to re-enable sending via Batch email sending status and using Email templates.
/// By creating this extension, Docentric gained full controll on how Alert emails are sent and there was no need for using such
/// complex logic (this interface) anymore.
/// Thus, this interface is currently applicable only to Workflow emails (and all other email notifications based on Email templates that are
/// sent using the SysEmailTable/SysEmailSystemTable::sendMail() methods), because this is the only way to achieve custom scenarios
/// such as email attachments and dynamic tables in the email body. On the other hand, for Alert emails there are other simpler approaches.
/// However, for the legacy reasons, the advanced ETH class which are used for both Workflows and Alerts (DocEmailTemplateAdvancedHandlerWFAL)
/// still implements this inteface. Just keep in mind that these methods are used for Workflow emails only.
/// </summary>
interface DocEmailTemplateEmailProcessingActions
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAttachmentsContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the context record that Attachments should be fetched from.
    /// </summary>
    /// <returns>The attachment context record as Common</returns>
    public Common getAttachmentsContextRecord()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessMailMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is invoked from DataEventHandler(tableStr(SysOutgoingEmailTable), DataEventType::Inserting).
    /// Performs post-processing of the email message inserting into Batch email sending status.
    /// Change here the email message body, subject or any other field, including extension fields added by Docentric.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The Batch email sending status table</param>
    /// <param name = "_parameters">Input parameters</param>
    /// <returns>True</returns>
    public boolean postProcessMailMessage(SysOutgoingEmailTable _outgoingEmailTable, container _parameters = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is invoked from DataEventHandler(tableStr(SysOutgoingEmailTable), DataEventType::Inserting).
    /// Handles document attachments in the wanted way, when standard handling is not flexible enough.
    /// Use to this.getAttachmentsContextRecord() method to get the attachment context record.
    /// How does the standard handling work: If SysEmailTable/SysEmailSystemTable.AddEmailAttachments_DC == true,
    /// add all attachments which are tagged with the SysEmailTable/SysEmailSystemTable.EmailAttachmentsTags_DC tags.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The Batch email sending status table</param>
    /// <param name = "_parameters">Input parameters</param>
    /// <returns>Returns False if the standard attachment handling should be skipped</returns>
    public boolean handleAttachments(SysOutgoingEmailTable _outgoingEmailTable, container _parameters = conNull())
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>