<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTraceContextAlerts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used for tracing the Alerts pipeline.
/// </summary>
public class DocTraceContextAlerts implements IDocTraceContext
{
    boolean notificationTraceEvent;
    boolean emailingTraceEvent;
    boolean emailingErrorTraceEvent;

    DocEmailTemplateAlertContextInfoParams alertContextInfo;
    DocEmailMessageSettings emailMsgSettings;
    DocEmailProcessingParams emailProcessingParams;
    DocEmailTemplateHandlerBase ethClassInstance; 
    DocSysEmailTableMap emailTableMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTraceContextInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new trace context info.
    /// </summary>
    /// <returns>An instance of the DocTraceContextInfo class</returns>
    private DocTraceContextInfo createTraceContextInfo()
    {
        DocTraceContextInfo traceContextInfo = new DocTraceContextInfo();

        if (notificationTraceEvent && !emailingErrorTraceEvent)
        {
            // (1) EventInboxId
            traceContextInfo.addEnd(['EventInboxId', int642Str(alertContextInfo.parmEventInbox().InboxId)]);
            // (2) AlertRuleId
            traceContextInfo.addEnd(['AlertRuleId', alertContextInfo.parmEventRule().RuleId]);
            // (3) SendEmail
            str sendEmail = strFmt('SendEmail=%1; IncludeInSummaryEmail=%2', 
                                alertContextInfo.parmEventRule().SendAlertEmail == NoYes::Yes ? 'true' : 'false',
                                alertContextInfo.parmEventRule().IncludeInSummaryEmail_DC == NoYes::Yes ? 'true' : 'false');
            traceContextInfo.addEnd(['SendEmail', sendEmail]);
            // (4) SendEmailWithDocentric
            traceContextInfo.addEnd(['SendEmailWithDocentric', alertContextInfo.parmEventRule().SendEmailUsingDocentric_DC == NoYes::Yes ? 'true' : 'false']);
            // (5) CompanyId
            traceContextInfo.addEnd(['CompanyId', alertContextInfo.parmEventInbox().CompanyId]);
            // (6) UserId
            str userId = alertContextInfo.parmEventRule().UserId;
            EventRule eventRule = EventRule::find(alertContextInfo.parmEventRule().RuleId);
            if (eventRule.UserGroupId_DC && !alertContextInfo.parmEventRule().UserGroupId_DC)
            {
                userId = strFmt('UserGroupMemberId=%1; UserGroupId=%2; OrigUserId=%3', alertContextInfo.parmEventRule().UserId, eventRule.UserGroupId_DC, eventRule.UserId);
            }
            traceContextInfo.addEnd(['UserId', userId]);
            // (7) Recipients
            traceContextInfo.addEnd(['Recipients', this.getEmailRecipients()]);
        }

        else if (emailingTraceEvent)
        {
            // (1) EventInboxId
            traceContextInfo.addEnd(['EventInboxId', int642Str(alertContextInfo.parmEventInbox().InboxId)]);
            // (2) Sender
            traceContextInfo.addEnd(['Sender', emailMsgSettings.parmEmailFrom()]);
            // (3) LanguageId
            traceContextInfo.addEnd(['LanguageId', ethClassInstance.parmLanguageId()]);
            // (4) EmailTemplateId
            traceContextInfo.addEnd(['EmailTemplateId', emailTableMap.EmailId]);
            // (5) AttachmentCount
            traceContextInfo.addEnd(['AttachmentCount', int2Str(conLen(emailMsgSettings.parmEmailAdditionalAttachments()))]);
            // (6) EmailProcessing
            traceContextInfo.addEnd(['EmailProcessing', alertContextInfo.parmEventRule().EmailSendingMode_DC == DocEmailSendingMode::EmailProcessing ? 'true' : 'false']);
            // (7) Recipients
            traceContextInfo.addEnd(['Recipients', this.getEmailRecipients()]);
        }

        else if (emailingErrorTraceEvent)
        {
            // (1) EventInboxId
            traceContextInfo.addEnd(['EventInboxId', int642Str(alertContextInfo.parmEventInbox().InboxId)]);

            // (2) ErrorMsg
            traceContextInfo.addEnd(['ErrorMsg', DocGlobalHelper::getInfoLogMessages(1, ' >> ')]);
        }

        return traceContextInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTraceMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a trace message.
    /// </summary>
    /// <param name = "_message">A trace message</param>
    /// <returns>A trace message</returns>
    private DocMessage createTraceMessage(DocMessage _message)
    {
        if (alertContextInfo)
        {
            _message += (_message ? ' | ' : '') + tableId2PName(alertContextInfo.parmAlertTable().TableId);
        }

        return _message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocTraceContextAlerts class.
    /// </summary>
    /// <param name = "_alertContextInfo">An instance of the DocEmailTemplateAlertContextInfoParams class</param>
    /// <param name = "_emailMsgSettings">An instance of the DocEmailMessageSettings class</param>
    /// <param name = "_emailProcessingParams">An instance of the DocEmailProcessingParams class</param>
    /// <param name = "_ethClassInstance">An instance of the ETH class</param>
    /// <param name = "_emailTableMap">A DocSysEmailTableMap map</param>
    protected void new(DocEmailTemplateAlertContextInfoParams _alertContextInfo, DocEmailMessageSettings _emailMsgSettings,
                       DocEmailProcessingParams _emailProcessingParams, DocEmailTemplateHandlerBase _ethClassInstance, DocSysEmailTableMap _emailTableMap)
    {
        alertContextInfo = _alertContextInfo;
        emailMsgSettings = _emailMsgSettings;
        emailProcessingParams = _emailProcessingParams;
        ethClassInstance = _ethClassInstance;
        emailTableMap = _emailTableMap;

        notificationTraceEvent = false;
        emailingTraceEvent = false;
        emailingErrorTraceEvent = false;
        if (_emailMsgSettings != null)
        {
            emailingTraceEvent = true;
        }
        else 
        {
            notificationTraceEvent = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class DocTraceContextAlerts for email.
    /// </summary>
    /// <param name = "_emailMsgSettings">An instance of the DocEmailMessageSettings class</param>
    /// <param name = "_emailProcessingParams">An instance of the DocEmailProcessingParams class</param>
    /// <param name = "_ethClassInstance">An instance of the ETH class</param>
    /// <param name = "_emailTableMap">A DocSysEmailTableMap map</param>
    /// <param name = "_alertContextInfoContainer">An alert context info container</param>
    /// <returns>An instance of the class DocTraceContextAlerts</returns>
    public static DocTraceContextAlerts constructForEmail(DocEmailMessageSettings _emailMsgSettings, DocEmailProcessingParams _emailProcessingParams,
                                                          DocEmailTemplateHandlerBase _ethClassInstance, DocSysEmailTableMap _emailTableMap, container _alertContextInfoContainer)
    {
        DocEmailTemplateAlertContextInfoParams alertContextInfo = DocEmailTemplateAlertContextInfoParams::createFromAlertContextInfoContainer(_alertContextInfoContainer);
        return new DocTraceContextAlerts(alertContextInfo, _emailMsgSettings, _emailProcessingParams, _ethClassInstance,  _emailTableMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class DocTraceContextAlerts for notification.
    /// </summary>
    /// <param name = "_eventRule">An EventRule table buffer</param>
    /// <param name = "_eventType">An instance of the EventTzpe class</param>
    /// <param name = "_alertTable">A table buffer for which the alert rule is defined</param>
    /// <param name = "_eventInbox">An EventInbox table buffer</param>
    /// <returns>An instance of the class DocTraceContextAlerts</returns>
    public static DocTraceContextAlerts constructForNotification(EventRule _eventRule, EventType _eventType, Common _alertTable, EventInbox _eventInbox)
    {
        DocEmailTemplateAlertContextInfoParams alertContextInfo = DocEmailTemplateAlertContextInfoParams::construct(_eventRule, _eventType, _alertTable, _eventInbox, '');
        return new DocTraceContextAlerts(alertContextInfo, null, null, null, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTraceContextInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the DocTraceContextInfo class.
    /// </summary>
    /// <returns>An instance of the DocTraceContextInfo class</returns>
    public DocTraceContextInfo getTraceContextInfo()
    {
        return this.createTraceContextInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTraceMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a trace message.
    /// </summary>
    /// <param name = "_message">A trace message</param>
    /// <returns>A trace message</returns>
    public DocMessage getTraceMessage(DocMessage _message = '')
    {
        return this.createTraceMessage(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsEmailingError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag that indicates whether an alert email was sent successfully.
    /// </summary>
    /// <param name = "_isEmailingError">Was an alert email sent successfully</param>
    /// <returns>An instance of the DocTraceContextAlerts class</returns>
    public DocTraceContextAlerts setIsEmailingError(boolean _isEmailingError)
    {
        this.emailingErrorTraceEvent = _isEmailingError;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailRecipients</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an email recipients string.
    /// </summary>
    /// <returns>An email recipients string</returns>
    private str getEmailRecipients()
    {
        str toField, ccField, bccField, summaryEmailRecipients;
        str emailRecipients = '';

        void addRecipients(str _messageField, str _emailAddresses)
        {
            if (_emailAddresses == '')
            {
                return;
            }

            emailRecipients +=  (emailRecipients == '' ? '' : '; ') + strFmt('%1=%2', _messageField, _emailAddresses);
        }
                
        if (notificationTraceEvent)
        {
            toField = alertContextInfo.parmEventRule().EmailRecipients;
            ccField = alertContextInfo.parmEventRule().EmailCc_DC;
            bccField = alertContextInfo.parmEventRule().EmailBcc_DC;
            summaryEmailRecipients = alertContextInfo.parmEventRule().SummaryEmailRecipients_DC;
        }

        else if (emailingTraceEvent)
        {
            toField = emailMsgSettings.parmEmailTo();
            ccField = emailMsgSettings.parmEmailCc();
            bccField = emailMsgSettings.parmEmailBcc();
        }
        
        addRecipients('To', toField);
        addRecipients('Cc', ccField);
        addRecipients('Bcc', bccField);
        addRecipients('SummaryEmailRecipients', summaryEmailRecipients);

        return emailRecipients;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>