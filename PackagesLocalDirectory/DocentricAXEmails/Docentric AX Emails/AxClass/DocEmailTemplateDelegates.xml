<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTemplateDelegates</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEmailTemplateDelegates class contains delegates for Docentric email templates.
/// </summary>
public class DocEmailTemplateDelegates
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the DocEmailTemplateDelegates class.
    /// </summary>
    /// <returns>An instance of the DocEmailTemplateDelegates class</returns>
    public static DocEmailTemplateDelegates instance()
    {
        DocEmailTemplateDelegates instance;
        SysGlobalCache  globalCache = appl.globalCache();

        if (globalCache.isSet(classStr(DocEmailTemplateDelegates), 0))
        {
            instance = globalCache.get(classStr(DocEmailTemplateDelegates), 0);
        }
        else
        {
            instance = new DocEmailTemplateDelegates();
            appl.globalCache().set(classStr(DocEmailTemplateDelegates), 0, instance);
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeFillingMappings</Name>
				<Source><![CDATA[
    /**********************************************************************/
    /*                   BEFORE FILLING MAPPINGS                          */
    /**********************************************************************/
    /// <summary>
    /// Delegate for supplying context information for filling _mappings; this is the point before filling the map with placeholder values.
    /// </summary>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <param name = "_emailToAddr">Email To Address</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_attachmentFilename">Attachment filename</param>
    /// <param name = "_isSystem">Specify whether the email is a system email</param>
    /// <param name = "_result">The handler result. Set result.result([context info]) where context info (as a container) will be used for filling _mappings with placeholder values</param>
    delegate void beforeFillingMappings(SysEmailId _emailId, LanguageId _languageId, str _emailToAddr, Map _mappings,
                                        str _attachmentFilename, boolean _isSystem, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeFillingMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for supplying context information for filling _mappings; this is the point before filling the map with placeholder values.
    /// </summary>
    /// <param name = "_emailId">Email ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <param name = "_emailToAddr">Email To Address</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_attachmentFilename">Attachment filename</param>
    /// <param name = "_isSystem">Specify whether the email is a system email</param>
    /// <returns>The handler result which should contain context info in form of a container, which will be used for filling _mappings with placeholder values</returns>
    public DocEventHandlerResult onBeforeFillingMappings(SysEmailId _emailId, LanguageId _languageId, str _emailToAddr,
                                                         Map _mappings, str _attachmentFilename, boolean _isSystem)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        result.result(conNull());
        
        this.beforeFillingMappings(_emailId, _languageId, _emailToAddr, _mappings, _attachmentFilename, _isSystem, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeReplacingPlaceholders</Name>
				<Source><![CDATA[
    /**********************************************************************/
    /*                 CHANGING EMAIL MESSAGE SETTINGS                    */
    /**********************************************************************/
    /// <summary>
    /// Delegate for changing the Email message settings before replacing placeholders in the email body and subject.
    /// </summary>
    /// <param name = "_emailMsgSettings">The DocEmailMessageSettings object to change</param>
    /// <param name = "_emailId">Email template ID</param>
    /// <param name = "_languageId">Language ID that determines the email template body</param>
    /// <param name = "_isSystemEmail">NoYes::No, if this is an Organization email template; otherwise System email template.</param>
    /// <param name = "_mappings">Mappings for resolving placeholders</param>
    /// <param name = "_lineMappings">Line mappings for resolving placeholders in lines</param>
    /// <param name = "_contextInfo">Context information</param>
    /// <param name = "_multipleLineMappings">Line mappings for resolving placeholders in additional dynamic tables</param>
    /// <param name = "_useEmailProcessing">True, if Batch email sending status is used for sending emails</param>
    /// <param name = "_emailProcessingParams">Additional parameters for populating Batch email sending status; can be changed if needed.</param>
    delegate void beforeReplacingPlaceholders(DocEmailMessageSettings _emailMsgSettings,
                                              SysEmailId _emailId,
                                              LanguageId _languageId,
                                              NoYes _isSystemEmail,
                                              Map _mappings,
                                              List _lineMappings,
                                              container _contextInfo,
                                              Map _multipleLineMappings,
                                              boolean _useEmailProcessing,
                                              DocEmailProcessingParams _emailProcessingParams)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeReplacingPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for changing the Email message settings before replacing placeholders in the email body and subject.
    /// </summary>
    /// <param name = "_emailMsgSettings">The DocEmailMessageSettings object to change</param>
    /// <param name = "_emailId">Email template ID</param>
    /// <param name = "_languageId">Language ID that determines the email template body</param>
    /// <param name = "_isSystemEmail">NoYes::No, if this is an Organization email template; otherwise System email template.</param>
    /// <param name = "_mappings">Mappings for resolving placeholders</param>
    /// <param name = "_lineMappings">Line mappings for resolving placeholders in lines</param>
    /// <param name = "_contextInfo">Context information</param>
    /// <param name = "_multipleLineMappings">Line mappings for resolving placeholders in additional dynamic tables</param>
    /// <param name = "_useEmailProcessing">True, if Batch email sending status is used for sending emails</param>
    /// <param name = "_emailProcessingParams">Additional parameters for populating Batch email sending status; can be changed if needed.</param>
    public void onBeforeReplacingPlaceholders(DocEmailMessageSettings _emailMsgSettings,
                                              SysEmailId _emailId,
                                              LanguageId _languageId,
                                              NoYes _isSystemEmail,
                                              Map _mappings,
                                              List _lineMappings,
                                              container _contextInfo,
                                              Map _multipleLineMappings,
                                              boolean _useEmailProcessing,
                                              DocEmailProcessingParams _emailProcessingParams)
    {
        try
        {
            this.beforeReplacingPlaceholders(_emailMsgSettings,
                                             _emailId,
                                             _languageId,
                                             _isSystemEmail,
                                             _mappings,
                                             _lineMappings,
                                             _contextInfo,
                                             _multipleLineMappings,
                                             _useEmailProcessing,
                                             _emailProcessingParams);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeReplacingPlaceholders() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeReplacingPlaceholders() delegate method');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSendingEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for changing the Email message settings after replacing placeholders in the email body and subject, and before the email based on an Email template is sent.
    /// </summary>
    /// <param name = "_emailMsgSettings">The DocEmailMessageSettings object to change</param>
    /// <param name = "_emailId">Email template ID</param>
    /// <param name = "_languageId">Language ID that determines the email template body</param>
    /// <param name = "_isSystemEmail">NoYes::No, if this is an Organization email template; otherwise System email template.</param>
    /// <param name = "_mappings">Mappings for resolving placeholders</param>
    /// <param name = "_lineMappings">Line mappings for resolving placeholders in lines</param>
    /// <param name = "_contextInfo">Context information</param>
    /// <param name = "_multipleLineMappings">Line mappings for resolving placeholders in additional dynamic tables</param>
    /// <param name = "_useEmailProcessing">True, if Batch email sending status is used for sending emails</param>
    /// <param name = "_emailProcessingParams">Additional parameters for populating Batch email sending status; can be changed if needed.</param>
    /// <param name = "_eventHandlerResult">
    /// Set _eventHandlerResult.hasResult(true) and _eventHandlerResult.booleanResult() if you need to change the _useEmailProcessing parameter.
    /// </param>
    delegate void beforeSendingEmail(DocEmailMessageSettings _emailMsgSettings,
                                     SysEmailId _emailId,
                                     LanguageId _languageId,
                                     NoYes _isSystemEmail,
                                     Map _mappings,
                                     List _lineMappings,
                                     container _contextInfo,
                                     Map _multipleLineMappings,
                                     boolean _useEmailProcessing,
                                     DocEmailProcessingParams _emailProcessingParams,
                                     EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSendingEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for changing the Email message settings after replacing placeholders in the email body and subject, and before the email based on an Email template is sent.
    /// </summary>
    /// <param name = "_emailMsgSettings">The DocEmailMessageSettings object to change</param>
    /// <param name = "_emailId">Email template ID</param>
    /// <param name = "_languageId">Language ID that determines the email template body</param>
    /// <param name = "_isSystemEmail">NoYes::No, if this is an Organization email template; otherwise System email template.</param>
    /// <param name = "_mappings">Mappings for resolving placeholders</param>
    /// <param name = "_lineMappings">Line mappings for resolving placeholders in lines</param>
    /// <param name = "_contextInfo">Context information</param>
    /// <param name = "_multipleLineMappings">Line mappings for resolving placeholders in additional dynamic tables</param>
    /// <param name = "_useEmailProcessing">True, if Batch email sending status is used for sending emails</param>
    /// <param name = "_emailProcessingParams">Additional parameters for populating Batch email sending status; can be changed if needed.</param>
    /// <returns>Returns the new value of the _useEmailProcessing parameters if it has been changed; otherwise returns the unchanged value.</returns>
    public boolean onBeforeSendingEmail(DocEmailMessageSettings _emailMsgSettings,
                                        SysEmailId _emailId,
                                        LanguageId _languageId,
                                        NoYes _isSystemEmail,
                                        Map _mappings,
                                        List _lineMappings,
                                        container _contextInfo,
                                        Map _multipleLineMappings,
                                        boolean _useEmailProcessing,
                                        DocEmailProcessingParams _emailProcessingParams)
    {
        EventHandlerResult eventHandlerResult = EventHandlerResult::newDefault();
        eventHandlerResult.hasResult(false);

        try
        {
            this.beforeSendingEmail(_emailMsgSettings,
                                    _emailId,
                                    _languageId,
                                    _isSystemEmail,
                                    _mappings,
                                    _lineMappings,
                                    _contextInfo,
                                    _multipleLineMappings,
                                    _useEmailProcessing,
                                    _emailProcessingParams,
                                    eventHandlerResult);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSendingEmail() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSendingEmail() delegate method');
        }

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.booleanResult();
        }
        else
        {
            return _useEmailProcessing;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailMessageCreated</Name>
				<Source><![CDATA[
    /**********************************************************************/
    /*                   SENDING EMAIL MESSAGES                           */
    /**********************************************************************/
    /// <summary>
    /// Delegate for sending an email message, this is the point after the mail message has been created.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailTable">The corresponding SysEmailTable record</param>
    /// <param name = "_emailMessageTable">The corresponding SysEmailMessageTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_contextInfo">Context info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void emailMessageCreated(System.Net.Mail.MailMessage _mailMessage,
                                      DocEmailMessageSettings _emailMsgSettings,
                                      SysEmailTable _emailTable,
                                      SysEmailMessageTable _emailMessageTable,
                                      Map _mappings,
                                      List _lineMappings,
                                      container _contextInfo,
                                      DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEmailMessageCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for sending an email message, this is the point after the mail message has been created.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailTable">The corresponding SysEmailTable record</param>
    /// <param name = "_emailMessageTable">The corresponding SysEmailMessageTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_contextInfo">Context info</param>
    /// <param name = "_multipleLineMappings">Map of placeholders for multiple dynamic tables: Map(DynamicTableName -> List of Map(DocPlaceholderNameEx -> DocPlaceholderValue))</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onEmailMessageCreated(System.Net.Mail.MailMessage _mailMessage,
                                                       DocEmailMessageSettings _emailMsgSettings,
                                                       SysEmailTable _emailTable,
                                                       SysEmailMessageTable _emailMessageTable,
                                                       Map _mappings,
                                                       List _lineMappings,
                                                       container _contextInfo,
                                                       Map _multipleLineMappings)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        // Note: we'll put multiple dynamic table mappings into the result.result() object because of vertical compatibility.
        result.result(_multipleLineMappings);

        this.emailMessageCreated(_mailMessage, _emailMsgSettings, _emailTable, _emailMessageTable, _mappings, _lineMappings, _contextInfo, result);
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailMessageSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for sending an email message, this is the point after the mail message has been sent.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailTable">The corresponding SysEmailTable record</param>
    /// <param name = "_emailMessageTable">The corresponding SysEmailMessageTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_contextInfo">Context info</param>
    /// <param name = "_multipleLineMappings">Map of placeholders for multiple dynamic tables: Map(DynamicTableName -> List of Map(DocPlaceholderNameEx -> DocPlaceholderValue))</param>
    delegate void emailMessageSent(System.Net.Mail.MailMessage _mailMessage,
                                   DocEmailMessageSettings _emailMsgSettings,
                                   SysEmailTable _emailTable,
                                   SysEmailMessageTable _emailMessageTable,
                                   Map _mappings,
                                   List _lineMappings,
                                   container _contextInfo,
                                   Map _multipleLineMappings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEmailMessageSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for sending an email message, this is the point after the mail message has been sent.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailTable">The corresponding SysEmailTable record</param>
    /// <param name = "_emailMessageTable">The corresponding SysEmailMessageTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_contextInfo">Context info</param>
    /// <param name = "_multipleLineMappings">Map of placeholders for multiple dynamic tables: Map(DynamicTableName -> List of Map(DocPlaceholderNameEx -> DocPlaceholderValue))</param>
    public void onEmailMessageSent(System.Net.Mail.MailMessage _mailMessage,
                                   DocEmailMessageSettings _emailMsgSettings,
                                   SysEmailTable _emailTable,
                                   SysEmailMessageTable _emailMessageTable,
                                   Map _mappings,
                                   List _lineMappings,
                                   container _contextInfo,
                                   Map _multipleLineMappings)
    {
        this.emailMessageSent(_mailMessage, _emailMsgSettings, _emailTable, _emailMessageTable, _mappings, _lineMappings, _contextInfo, _multipleLineMappings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailSysMessageCreated</Name>
				<Source><![CDATA[
    /**********************************************************************/
    /*                 SENDING SYSTEM EMAIL MESSAGES                      */
    /**********************************************************************/
    /// <summary>
    /// Delegate for sending a system email message, this is the point after the mail message has been created.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailSystemTable">The corresponding SysEmailSystemTable record</param>
    /// <param name = "_emailMessageSystemTable">The corresponding SysEmailMessageSystemTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue))</param>
    /// <param name = "_contextInfo">Context info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void emailSysMessageCreated(System.Net.Mail.MailMessage _mailMessage,
                                         DocEmailMessageSettings _emailMsgSettings,
                                         SysEmailSystemTable _emailSystemTable,
                                         SysEmailMessageSystemTable _emailMessageSystemTable,
                                         Map _mappings,
                                         List _lineMappings,
                                         container _contextInfo,
                                         DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEmailSysMessageCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for sending a system email message, this is the point after the mail message has been created.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailSystemTable">The corresponding SysEmailSystemTable record</param>
    /// <param name = "_emailMessageSystemTable">The corresponding SysEmailMessageSystemTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue))</param>
    /// <param name = "_contextInfo">Context info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onEmailSysMessageCreated(System.Net.Mail.MailMessage _mailMessage,
                                                          DocEmailMessageSettings _emailMsgSettings,
                                                          SysEmailSystemTable _emailSystemTable,
                                                          SysEmailMessageSystemTable _emailMessageSystemTable,
                                                          Map _mappings,
                                                          List _lineMappings,
                                                          container _contextInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.emailSysMessageCreated(_mailMessage, _emailMsgSettings, _emailSystemTable, _emailMessageSystemTable, _mappings, _lineMappings, _contextInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailSysMessageSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for sending a system email message, this is the point after the mail message has been sent.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailSystemTable">The corresponding SysEmailSystemTable record</param>
    /// <param name = "_emailMessageSystemTable">The corresponding SysEmailMessageSystemTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue))</param>
    /// <param name = "_contextInfo">Context info</param>
    delegate void emailSysMessageSent(System.Net.Mail.MailMessage _mailMessage,
                                      DocEmailMessageSettings _emailMsgSettings,
                                      SysEmailSystemTable _emailSystemTable,
                                      SysEmailMessageSystemTable _emailMessageSystemTable,
                                      Map _mappings,
                                      List _lineMappings,
                                      container _contextInfo)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEmailSysMessageSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for sending a system email message, this is the point after the mail message has been sent.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_emailMsgSettings">Mail message settings, e.g. To, Cc, Bcc, From, Subject, Body, Attachment...</param>
    /// <param name = "_emailSystemTable">The corresponding SysEmailSystemTable record</param>
    /// <param name = "_emailMessageSystemTable">The corresponding SysEmailMessageSystemTable record</param>
    /// <param name = "_mappings">Map of placeholder values used in email body Map(DocPlaceholderNameEx -> DocPlaceholderValue)</param>
    /// <param name = "_lineMappings">List of maps of placeholder values used in email body lines List of Map(DocPlaceholderNameEx -> DocPlaceholderValue))</param>
    /// <param name = "_contextInfo">Context info</param>
    public void onEmailSysMessageSent(System.Net.Mail.MailMessage _mailMessage,
                                      DocEmailMessageSettings _emailMsgSettings,
                                      SysEmailSystemTable _emailSystemTable,
                                      SysEmailMessageSystemTable _emailMessageSystemTable,
                                      Map _mappings,
                                      List _lineMappings,
                                      container _contextInfo)
    {
        this.emailSysMessageSent(_mailMessage, _emailMsgSettings, _emailSystemTable, _emailMessageSystemTable, _mappings, _lineMappings, _contextInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLanguageForAlertEmail</Name>
				<Source><![CDATA[
    /**********************************************************************/
    /*                   SENDING ALERT EMAILS                             */
    /**********************************************************************/

    /// <summary>
    /// Delegate for changing the alert language which affects which email body of the email template will be used
    /// as well as how alert standard placeholders will be formatted.
    /// </summary>
    /// <param name = "_alertContextInfo">Alert context info containg the EventRule and EventInbox records, alert table buffer, EventType class instance, Url to alert entity</param>
    /// <param name = "_currentAlertLanguageId">Current alert language ID</param>
    /// <param name = "_eventHandlerResult">
    /// Set _eventHandlerResult.hasResult(true) and _eventHandlerResult.result(newAlertLanguageId) if you need to change the _currentAlertLanguageId parameter.
    /// </param>
    delegate void changeLanguageForAlertEmail(DocEmailTemplateAlertContextInfoParams _alertContextInfo, LanguageId _currentAlertLanguageId, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEventChangeLanguageForAlertEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for changing the alert language which affects which email body of the email template will be used
    /// as well as how alert standard placeholders will be formatted.
    /// </summary>
    /// <param name = "_alertContextInfo">Alert context info containg the EventRule and EventInbox records, alert table buffer, EventType class instance, Url to alert entity</param>
    /// <param name = "_currentAlertLanguageId">Current alert language ID</param>
    /// <returns>New alert language if changed, otherwise current alert language</returns>
    public LanguageId publishEventChangeLanguageForAlertEmail(DocEmailTemplateAlertContextInfoParams _alertContextInfo, LanguageId _currentAlertLanguageId)
    {
        EventHandlerResult eventHandlerResult = EventHandlerResult::newDefault();
        eventHandlerResult.hasResult(false);

        try
        {
            this.changeLanguageForAlertEmail(_alertContextInfo, _currentAlertLanguageId, eventHandlerResult);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertEmail)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertEmail)));
        }

        if (eventHandlerResult.hasResult())
        {
            if (typeOf(eventHandlerResult.result()) != Types::String)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", 
                    delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertEmail)) + ' The new alert language is not of type string.');
            }

            LanguageId newAlertLanguageId = eventHandlerResult.result();
            
            if (newAlertLanguageId != '' && !LanguageTable::exist(newAlertLanguageId))
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", 
                    delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertEmail)) + ' The new alert language has not a valid language ID.');
            }
            
            return newAlertLanguageId;
        }
        else
        {
            return _currentAlertLanguageId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLanguageForAlertSummaryEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for changing the alert summary email language which affects which email body of the email template will be used
    /// as well as how alert standard placeholders will be formatted.
    /// </summary>
    /// <param name = "_alertSummaryEmailContextInfo">An instance of the DocAlertSummaryEmailContextInfoParams class</param>
    /// <param name = "_currentAlertSummaryLanguageId">Current alert summary email language ID</param>
    /// <param name = "_eventHandlerResult">
    /// Set _eventHandlerResult.hasResult(true) and _eventHandlerResult.result(newAlertSummaryLanguageId) if you need to change the _currentAlertSummaryLanguageId parameter.
    /// </param>
    delegate void changeLanguageForAlertSummaryEmail(DocAlertSummaryEmailContextInfoParams _alertSummaryEmailContextInfo, LanguageId _currentAlertSummaryLanguageId, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEventChangeLanguageForAlertSummaryEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for changing the alert summary email language which affects which email body of the email template will be used
    /// as well as how alert standard placeholders will be formatted.
    /// </summary>
    /// <param name = "_alertSummaryEmailContextInfo">An instance of the DocAlertSummaryEmailContextInfoParams class</param>
    /// <param name = "_currentAlertSummaryLanguageId">Current alert summary email language ID</param>
    /// <returns>New alert summary email language if changed, otherwise current alert summary email language</returns>
    public LanguageId publishEventChangeLanguageForAlertSummaryEmail(DocAlertSummaryEmailContextInfoParams _alertSummaryEmailContextInfo, LanguageId _currentAlertSummaryLanguageId)
    {
        EventHandlerResult eventHandlerResult = EventHandlerResult::newDefault();
        eventHandlerResult.hasResult(false);

        try
        {
            this.changeLanguageForAlertSummaryEmail(_alertSummaryEmailContextInfo, _currentAlertSummaryLanguageId, eventHandlerResult);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertSummaryEmail)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertSummaryEmail)));
        }

        if (eventHandlerResult.hasResult())
        {
            if (typeOf(eventHandlerResult.result()) != Types::String)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", 
                    delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertSummaryEmail)) + ' The new alert summary email language is not of type string.');
            }

            LanguageId newAlertSummaryLanguageId = eventHandlerResult.result();
            
            if (newAlertSummaryLanguageId != '' && !LanguageTable::exist(newAlertSummaryLanguageId))
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", 
                    delegateStr(DocEmailTemplateDelegates, changeLanguageForAlertSummaryEmail)) + ' The new alert summary email language has not a valid language ID.');
            }
            
            return newAlertSummaryLanguageId;
        }
        else
        {
            return _currentAlertSummaryLanguageId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAlertStandardPlaceholderMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for changing alert standard placeholder values. You can change them using the _mappings parameter.
    /// </summary>
    /// <param name = "_mappings">A map with standard placeholder values: Map(placeholderName (str), placeholderValue (str))</param>
    /// <param name = "_alertContextInfo">Alert context info containg the EventRule and EventInbox records, alert table buffer, EventType class instance, Url to alert entity</param>
    /// <param name = "_languageId">Alert language which affects which email body of the email template will be used and how alert placeholders will be formatted.</param>
    delegate void changeAlertStandardPlaceholderMappings(Map _mappings, DocEmailTemplateAlertContextInfoParams _alertContextInfo, LanguageId _languageId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEventChangeAlertStandardPlaceholderMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for changing alert standard placeholder values. You can change them using the _mappings parameter.
    /// </summary>
    /// <param name = "_mappings">A map with standard placeholder values: Map(placeholderName (str), placeholderValue (str))</param>
    /// <param name = "_alertContextInfo">Alert context info containg the EventRule and EventInbox records, alert table buffer, EventType class instance, Url to alert entity</param>
    /// <param name = "_languageId">Alert language which affects which email body of the email template will be used and how alert placeholders will be formatted.</param>
    public void publishEventChangeAlertStandardPlaceholderMappings(Map _mappings, DocEmailTemplateAlertContextInfoParams _alertContextInfo, LanguageId _languageId)
    {
        try
        {
            this.changeAlertStandardPlaceholderMappings(_mappings, _alertContextInfo, _languageId);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocEmailTemplateDelegates, changeAlertStandardPlaceholderMappings)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocEmailTemplateDelegates, changeAlertStandardPlaceholderMappings)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>