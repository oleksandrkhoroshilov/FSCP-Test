<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EventContextInformation_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class EventContextInformation_DC_Extension is an extension of the class EventContextInformation.
/// </summary>
/// <remarks>
/// This class extension can be removed if MS fixes a bug in the methods createFormRunWithArgs and createFormRunWithFormRef.
/// The bug is triggered by the conversion of the xArgs object into the Args object, which cannot be performed.
/// </remarks>
[ExtensionOf(classStr(EventContextInformation))]
final class EventContextInformation_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the context form and returns a FormRun object. The FormRun.init method is called by the method.
    /// </summary>
    /// <returns>A FormRun object where init is called; or null</returns>
    /// <remarks>
    /// First, the form is initialized by using a packed Args class. If that fails, the FormRef property of 
    /// the alerted buffer is used to initialize the form. If that also fails, it returns null.
    /// The Args class is packed during rule creation.
    /// </remarks>
    public FormRun createFormRun()
    {
        if (!formRun && !this.createFormRunWithArgs_DC())
        {
            formRun = null;
        }

        if (!formRun && !this.createFormRunWithFormRef_DC())
        {
            formRun = null;
        }

        try
        {
            formRun = next createFormRun();
        }
        catch
        {
            formRun = null;
        }

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormRunWithArgs_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the FormRun class using unpacked Args class.
    /// </summary>
    /// <returns>True if an instace of the FormRun class was created; otherwise false</returns>
    /// <remarks>
    /// This method is a copy of the original method createFormRunWithArgs in the class EventContextInformation. 
    /// The copy was created because of an error in the original method (the xArgs object cannot be converted to the Args object). 
    /// If MS fixes the error, the class extension can be removed.
    /// </remarks>
    private boolean createFormRunWithArgs_DC()
    {
        Args args = new Args(unpackedArgs.name());
        args.designName(unpackedArgs.designName());
        args.record(unpackedArgs.record());
        args.parmEnumType(unpackedArgs.parmEnumType());
        args.parmEnum(unpackedArgs.parmEnum());
        args.parm(unpackedArgs.parm());
        args.menuItemType(unpackedArgs.menuItemType());
        args.menuItemName(unpackedArgs.menuItemName());

        this.setLookup_DC(args);

        formRun = classfactory.formRunClass(args);

        int infoLine;
        try
        {
            infoLine = infologLine();
            formRun.init();
        }
        catch
        {
            infolog.cut(infoLine + 1, infologLine());
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormRunWithFormRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the FormRun class using the FormRef property of the alerted buffer.
    /// </summary>
    /// <returns>True if an instace of the FormRun class was created; otherwise false</returns>
    /// <remarks>
    /// This method is a copy of the original method createFormRunWithFormRef in the class EventContextInformation.
    /// The copy was created because of an error in the original method (the xArgs object cannot be converted to the Args object).
    /// If MS fixes the error, the class extension can be removed.
    /// </remarks>
    private boolean createFormRunWithFormRef_DC()
    {
        DictTable dt = new DictTable(alertTableId);
        if (!dt)
        {
            return false;
        }

        MenuFunction menuFunction = new MenuFunction(dt.formRef(), MenuItemType::Display);
        Args args = new Args();

        this.setLookup_DC(args);

        int infoLine;
        try
        {
            infoLine = infologLine();
            formRun = menuFunction.create(args);
        }
        catch
        {
            infolog.cut(infoLine + 1, infologLine());
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the lookupValue and lookupField properties of the Args class to be used 
    /// when initializing the context form.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    /// <remarks>
    /// The canUseLookup and setLookup methods in the EventContextInformation class are private
    /// and must to be called via reflection.
    /// </remarks>
    private void setLookup_DC(Args _args)
    {
        DictClass eventContextInformationDictClass = new DictClass(className2Id(identifierStr(EventContextInformation)));
        if (eventContextInformationDictClass)
        {
            // Check if the lookupValue and lookupField properties of the Args class can be used 
            // when initializing the context form.
            boolean canUseLookup = eventContextInformationDictClass.callObject(identifierStr(canUseLookup), this);
            if (canUseLookup)
            {
                // Set the lookupValue and lookupField properties of the Args class
                eventContextInformationDictClass.callObject(identifierStr(setLookup), this, _args);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>