<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPlaceholderDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocPlaceholderDefinition class is used to store a placeholder definition.
/// </summary>
public class DocPlaceholderDefinition
{
    DocPlaceholderName          name;
    DocPlaceholderType          type;
    Map                         parmsMap;   // Map(parameter Name (str) -> parameter Value (str))
    DocPlaceholderDescription   description;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocPlaceholderDefinition class.
    /// </summary>
    /// <param name = "_placeholderNameEx">A placeholder name</param>
    /// <param name = "_description">A placeholder description</param>
    public void new (DocPlaceholderNameEx _placeholderNameEx, DocPlaceholderDescription  _description = '')
    {
        // Name
        int len = strLen(_placeholderNameEx);
        int i = strScan(_placeholderNameEx, '?', 1, len);
        
        name = (i ? subStr(_placeholderNameEx, 1, i - 1) : _placeholderNameEx);

        // ParmsMap
        // Parse extended placeholder name syntax (e.g. 'COMPANYLOGO?Image&defaultHeight=50&defaultWidth=190').
        parmsMap = new Map(Types::String, Types::String);
        
        if (i)
        {
            container parms = str2con_RU(subStr(_placeholderNameEx, i + 1, len - i), '&', true);
            _placeholderNameEx = subStr(_placeholderNameEx, 1, i - 1);

            for (int j = 1; j <= conLen(parms); j++)
            {
                str parm = conPeek(parms, j);
                str parmName, parmValue;
                int k = strScan(parm, '=', 1, strLen(parm));

                if (k)
                {
                    parmName = subStr(parm, 1, k - 1);
                    parmValue = subStr(parm, k + 1, strLen(parm) - k);
                }
                else
                {
                    parmName = parm;
                }

                if (parmsMap.exists(parmName))
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Placeholder (%1): Parameter (%2) cannot be used more than once', _placeholderNameEx, parmName));
                }

                parmsMap.insert(parmName, parmValue);
            }
        }

        // Type
        if (parmsMap.exists(DocConstantPlaceholderET::PlaceholderImageToken))
        {
            type = DocPlaceholderType::Image;
        }
        else if (parmsMap.exists(DocConstantPlaceholderET::PlaceholderHtmlToken))
        {
            type = DocPlaceholderType::HTML;
        }
        else
        {
            type = DocPlaceholderType::Text;
        }

        description = _description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a placeholder name.
    /// </summary>
    /// <returns>A placeholder name</returns>
    public DocPlaceholderName name()
    {
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a placeholder type.
    /// </summary>
    /// <returns>A placeholder type</returns>
    public DocPlaceholderType type()
    {
        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmsMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map of parameters for placeholder.
    /// </summary>
    /// <returns>A map of parameters for placeholder</returns>
    public Map parmsMap()
    {
        return parmsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a placeholder description.
    /// </summary>
    /// <returns>A placeholder description</returns>
    public DocPlaceholderDescription description()
    {
        return description;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>