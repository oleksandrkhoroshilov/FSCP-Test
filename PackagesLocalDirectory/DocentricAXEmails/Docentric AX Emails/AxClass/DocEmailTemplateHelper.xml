<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTemplateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEmailTemplateHelper class is used as a helper class for email templates.
/// </summary>
public class DocEmailTemplateHelper
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isDocentricImprovedEmailTemplatesTurnedOn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the Docentric improved email templates feature is turned on.
    /// </summary>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_isSystem">Flag indicating whether the system email templates are used</param>
    /// <returns>True if the Docentric improved email templates feature is turned on; otherwise false</returns>
    public static boolean isDocentricImprovedEmailTemplatesTurnedOn(str _emailId, boolean _isSystem)
    {
        if (_emailId == '')
        {
            return false;
        }

        str ethClassName = '';
        if (_isSystem)
        {
            SysEmailSystemTable emailSystemTable = SysEmailSystemTable::find(_emailId);
            ethClassName = emailSystemTable.EmailTemplateHandlerClass_DC;
        }
        else
        {
            SysEmailTable emailTable = SysEmailTable::find(_emailId);
            ethClassName = emailTable.EmailTemplateHandlerClass_DC;
        }

        if (ethClassName != '')
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEthClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ETH class.
    /// </summary>
    /// <param name = "_ethClassName">ETH class name</param>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_isUsedForAlertSummaryEmail">Is the ETH class used for alert summary email</param>
    /// <returns>True if the validation of the ETH class is successful; otherwise false</returns>
    public static boolean validateEthClass(str _ethClassName, str _emailId, boolean _isUsedForAlertSummaryEmail = false)
    {
        if (!_ethClassName)
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:EthClassMissing", _emailId));
            return false;
        }
    
        ClassId ethClassId = className2Id(_ethClassName);
        if (!ethClassId)
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:EthClassNotExist", _ethClassName, _emailId));
            return false;
        }
    
        SysDictClass ethDictClass = new SysDictClass(ethClassId);
        if (ethDictClass == null)
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:EthClassNotExist", _ethClassName, _emailId));
            return false;
        }
        
        if (!ethDictClass.isExtending(classNum(DocEmailTemplateHandlerBase)))
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:EthClassWrongBaseClass", ethDictClass.name(), _emailId));
            return false;
        }

        if (_isUsedForAlertSummaryEmail && !(ethClassId == classNum(DocAlertSummaryETH) || ethDictClass.isExtending(classNum(DocAlertSummaryETH))))
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:EthClassNotEqualToOrNotExtrendClass", ethDictClass.name(), _emailId, classId2Name(classNum(DocAlertSummaryETH))));
            return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmailListSkipPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates given email addresses separated by commas or semicolons, but skips placeholders.
    /// </summary>
    /// <param name="_emailList">Email addresses to validate.</param>
    /// <returns>True if all email addresses, which are not placeholders or email tokens, are valid; otherwise false.</returns>
    public static boolean validateEmailListSkipPlaceholders(str _emailList)
    {
        // If the email list is not provided, return false.
        if (!_emailList)
        {
            return false;
        }

        // Split the email address string and validate each email address
        List emailAddresses = DocGlobalHelper::getEmailList(_emailList);
    
        ListEnumerator enum = emailAddresses.getEnumerator();
        while (enum.moveNext())
        {
            str email = strLRTrim(enum.current());

            if (!email)
            {
                continue;
            }

            // If the first and last character is equal to '%', then the email address is a placeholder, so skip it.
            if ((strCmp(subStr(email, 1, 1), DocConstantPlaceholderET::PlaceholderStartSymbol) == 0) &&
                 strCmp(subStr(email, strLen(email), 1), DocConstantPlaceholderET::PlaceholderEndSymbol) == 0)
            {
                continue;
            }

            // If a single email address is invalid, then the whole email list is invalid.
            if (!DocGlobalHelper::validateEmail(email))
            {
                return false;
            }
        }
    
        // All email addresses in the provided email list are valid -> return true.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEmailTemplateHandlerClassIdRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a table with all available ETH classes.
    /// </summary>
    /// <returns>A table of available ETH classes</returns>
    public static DocTmpIdRef buildEmailTemplateHandlerClassIdRef()
    {
        DictClass                        dictBaseClass, dictClass;
        ListEnumerator                   listEnumerator;
        DocEmailTemplateHandlerBase      curEthClass;
        DocTmpIdRef                      dsEthClassIdRef;
    
    
        dsEthClassIdRef.clear();
    
        dictBaseClass = new DictClass(classNum(DocEmailTemplateHandlerBase));
        listEnumerator = dictBaseClass.extendedBy().getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());
            if (dictClass != null && !dictClass.isAbstract())
            {
                curEthClass = dictClass.makeObject();
    
                dsEthClassIdRef.Name       = dictClass.name();
                dsEthClassIdRef.HelpTxt    = curEthClass.description();
                dsEthClassIdRef.insert();
            }
        }
    
        return dsEthClassIdRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholderDefinitionMapAsEmailEditorInputStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a JSON string with available placeholders for email editor.
    /// </summary>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_isSystem">Flag indicating whether the system email templates are used</param>
    /// <returns>JSON string with available palceholders</returns>
    public static str getPlaceholderDefinitionMapAsEmailEditorInputStr(SysEmailId _emailId, boolean _isSystem = false)
    {
        Map placeholderMap = DocEmailTemplateHandlerBase::getAllPlaceholderDefinitionMapEx(_emailId, _isSystem);    // Map(DocPlaceholderName -> DocPlaceholderDefinition)
        MapEnumerator mapEnum = placeholderMap.getEnumerator();
    
        /* [
             { "name": "PlaceholderName1", "description": "Placeholder1 Description" },
             { "name": "PlaceholderName2", "description": "Placeholder2 Description" },
             { "name": "PlaceholderName3", "description": "Placeholder3 Description", "html": "<img src=\"cid:%CompanyLogo%\" style=\"height:50px; width:190px\" height=\"50\" width=\"190\" \/>" }
        ] */
    
        str placeholderStrRes = '';
        while (mapEnum.moveNext())
        {
            DocPlaceholderName       placeholderName = mapEnum.currentKey();
            DocPlaceholderDefinition placeholderDef = mapEnum.currentValue();
            str html = '';
      
            if (placeholderDef.type() == DocPlaceholderType::Image)
            {
                Map parmsMap = placeholderDef.parmsMap();
                str style = '';
                // We need to add width and height attributes because of Outlook!
                str widthHeightAttributes = '';
                
                if (parmsMap.exists(DocConstantPlaceholderET::PlaceholderImageDefaultHeight))
                {
                    str defaultHeight = parmsMap.lookup(DocConstantPlaceholderET::PlaceholderImageDefaultHeight);
                    style = strFmt('height:%1px', defaultHeight);
                    widthHeightAttributes = strFmt(@' height=\"%1\"', defaultHeight);
                }

                if (parmsMap.exists(DocConstantPlaceholderET::PlaceholderImageDefaultWidth))
                {    
                    str defaultWidth = parmsMap.lookup(DocConstantPlaceholderET::PlaceholderImageDefaultWidth);
                    style += strFmt((style ? '; %1' : ''), strFmt(' width:%1px', defaultWidth));
                    widthHeightAttributes += strFmt(@' width=\"%1\"', defaultWidth);
                }

                if (style)
                {
                    style = strFmt(@' style=\"%1\"', style);        // escaped JSON special characters
                }

                html = strFmt(@'<img src=\"cid:%%1%\"%2%3\/>', placeholderName, style, widthHeightAttributes);      // escaped JSON special characters
            }

            str placeholderStr = '{ "name": "' + placeholderName + '", ' +
                                   '"description": "' + placeholderDef.description()  + '"' +
                                   (html ? strFmt(', "html": "%1"', html) : '') +
                                 ' }';
       
            if (placeholderStrRes == '')
            {
                placeholderStrRes = '[' + placeholderStr;
            }
            else
            {
                placeholderStrRes = placeholderStrRes + ', ' + placeholderStr;
            }
        }
    
        if (placeholderStrRes != '')
        {
            placeholderStrRes = placeholderStrRes + ']';
        }
    
        return placeholderStrRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillStandardPlaceholderDefinitionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a standard placeholder definition map with standard placeholders.
    /// </summary>
    /// <param name = "_mapStdPlaceholderDefMap">A standard placeholder definition map</param>
    public static void fillStandardPlaceholderDefinitionMap(Map _mapStdPlaceholderDefMap /* Map(DocPlaceholderNameEx -> DocPlaceholderDescription) */)
    {
        if (_mapStdPlaceholderDefMap == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _mapStdPlaceholderDefMap is not set');
        }

        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderEmailId, "@DocentricAX:EmailId");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderEmailDescription, "@DocentricAX:EmailDescription");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderSenderName, "@DocentricAX:SenderName");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderSenderEmail, "@DocentricAX:SenderEmailPlaceholderDesc");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderCompanyId, "@DocentricAX:CompanyId");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderCompanyName, "@DocentricAX:CompanyName");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderUserId, "@DocentricAX:UserId");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderUserName, "@DocentricAX:Username");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderUserAlias, "@DocentricAX:UserAlias");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderUserEmail, "@DocentricAX:UserEmail");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderWorker, "@DocentricAX:Worker");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderWorkerTitle, "@DocentricAX:WorkerTitle");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderWorkerEmail, "@DocentricAX:WorkerEmail");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderWorkerDepartment, "@DocentricAX:WorkerDepartment");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderCurrentDate, "@DocentricAX:CurrentDate");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderCurrentDatetime, "@DocentricAX:CurrentDateAndTime");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderCurrentDay, "@DocentricAX:CurrentDay");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderCurrentMonth, "@DocentricAX:CurrentMonth");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderCurrentYear, "@DocentricAX:CurrentYear");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderEnvironmentName, "@DocentricAX4:EnvironmentName");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderEnvironmentDomainName, "@DocentricAX4:EnvironmentDomainName");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderEnvironmentType, "@DocentricAX4:EnvironmentType");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderEnvironmentMode, "@DocentricAX4:EnvironmentMode");

        // Hidden placeholders marking table begin and end, which should be used in the source HTML of email message templates only.
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderTableBegin, "@DocentricAX:HiddenTableBeginTag");
        _mapStdPlaceholderDefMap.insert(DocConstantPlaceholderET::PlaceholderTableEnd, "@DocentricAX:HiddenTableEndTag");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillStandardPlaceholderDefinitionMapForWfCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a standard placeholder definition map with common standard placeholders for WF.
    /// </summary>
    /// <param name = "_mapStdPlaceholderDefMap">A standard placeholder definition map</param>
    public static void fillStandardPlaceholderDefinitionMapForWfCommon(Map _mapStdPlaceholderDefMap /* Map(DocPlaceholderNameEx -> DocPlaceholderDescription) */)
    {
        if (_mapStdPlaceholderDefMap == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _mapStdPlaceholderDefMap is not set');
        }

        if (!_mapStdPlaceholderDefMap.exists('occurred'))
        {
            _mapStdPlaceholderDefMap.insert('occurred', 'WF - Occurred');
        }
        if (!_mapStdPlaceholderDefMap.exists('for'))
        {
            _mapStdPlaceholderDefMap.insert('for', 'WF - For');
        }
        if (!_mapStdPlaceholderDefMap.exists('company'))
        {
            _mapStdPlaceholderDefMap.insert('company', 'WF - Company');
        }
        if (!_mapStdPlaceholderDefMap.exists('subject'))
        {
            _mapStdPlaceholderDefMap.insert('subject', 'WF - Subject');
        }
        if (!_mapStdPlaceholderDefMap.exists('message'))
        {
            _mapStdPlaceholderDefMap.insert('message', 'WF - Message');
        }
        if (!_mapStdPlaceholderDefMap.exists('LinkToBusinessData'))
        {
            _mapStdPlaceholderDefMap.insert('LinkToBusinessData', 'WF - Link To Business Data');
        }
        if (!_mapStdPlaceholderDefMap.exists('LinkToAlertRule'))
        {
            _mapStdPlaceholderDefMap.insert('LinkToAlertRule', 'WF - Link To Alert Rule');
        }
        if (!_mapStdPlaceholderDefMap.exists('LinkToAlert'))
        {
            _mapStdPlaceholderDefMap.insert('LinkToAlert', 'WF - Link To Alert');
        }
        if (!_mapStdPlaceholderDefMap.exists('alertid'))
        {
            _mapStdPlaceholderDefMap.insert('alertid', 'WF - Alert ID');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillStandardPlaceholderDefinitionMapForAlerts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a standard placeholder definition map with standard placeholders for alerts.
    /// </summary>
    /// <param name = "_mapStdPlaceholderDefMap">A standard placeholder definition map</param>
    public static void fillStandardPlaceholderDefinitionMapForAlerts(Map _mapStdPlaceholderDefMap /* Map(DocPlaceholderNameEx -> DocPlaceholderDescription) */)
    {
        if (_mapStdPlaceholderDefMap == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _mapStdPlaceholderDefMap is not set');
        }

        /* The following placeholders are identical for alerts and workflows */
        if (!_mapStdPlaceholderDefMap.exists('Occurred'))
        {
            _mapStdPlaceholderDefMap.insert('Occurred', 'AL - Occurred');
        }
        if (!_mapStdPlaceholderDefMap.exists('For'))
        {
            _mapStdPlaceholderDefMap.insert('For', 'AL - For');
        }
        if (!_mapStdPlaceholderDefMap.exists('Company'))
        {
            _mapStdPlaceholderDefMap.insert('Company', 'AL - Company');
        }
        if (!_mapStdPlaceholderDefMap.exists('Subject'))
        {
            _mapStdPlaceholderDefMap.insert('Subject', 'AL - Subject');
        }
        if (!_mapStdPlaceholderDefMap.exists('Message'))
        {
            _mapStdPlaceholderDefMap.insert('Message', 'AL - Message');
        }
        if (!_mapStdPlaceholderDefMap.exists('LinkToBusinessData'))
        {
            _mapStdPlaceholderDefMap.insert('LinkToBusinessData', 'AL - Link To Business Data');
        }
        if (!_mapStdPlaceholderDefMap.exists('LinkToAlertRule'))
        {
            _mapStdPlaceholderDefMap.insert('LinkToAlertRule', 'AL - Link To Alert Rule');
        }
        if (!_mapStdPlaceholderDefMap.exists('LinkToAlert'))
        {
            _mapStdPlaceholderDefMap.insert('LinkToAlert', 'AL - Link To Alert');
        }
        if (!_mapStdPlaceholderDefMap.exists('Alertid'))
        {
            _mapStdPlaceholderDefMap.insert('Alertid', 'AL - Alert ID');
        }

        /* The following placeholders are specific for alerts */
        if (!_mapStdPlaceholderDefMap.exists('BeforeValue'))
        {
            _mapStdPlaceholderDefMap.insert('BeforeValue', 'AL - Before Value');
        }
        if (!_mapStdPlaceholderDefMap.exists('AfterValue'))
        {
            _mapStdPlaceholderDefMap.insert('AfterValue', 'AL - After Value');
        }
        if (!_mapStdPlaceholderDefMap.exists('XValue'))
        {
            _mapStdPlaceholderDefMap.insert('XValue', 'AL - X Value');
        }
        if (!_mapStdPlaceholderDefMap.exists('Data'))
        {
            _mapStdPlaceholderDefMap.insert('Data', 'AL - Data');
        }
        if (!_mapStdPlaceholderDefMap.exists('Event'))
        {
            _mapStdPlaceholderDefMap.insert('Event', 'AL - Event');
        }
        if (!_mapStdPlaceholderDefMap.exists('CreatedUser'))
        {
            _mapStdPlaceholderDefMap.insert('CreatedUser', 'AL - Created User');
        }
        if (!_mapStdPlaceholderDefMap.exists('ModifiedUser'))
        {
            _mapStdPlaceholderDefMap.insert('ModifiedUser', 'AL - Modified User');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMappingsWithStandardPlaceholderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a placeholder map with standard placeholder values.
    /// </summary>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_languageId">Language Id - if empty, the default language for emailId will be used</param>
    /// <param name = "_mappings">A placeholder map</param>
    /// <param name = "_isSystem">Flag indicating whether the system email templates are used</param>
    public static void fillMappingsWithStandardPlaceholderValues(SysEmailId _emailId, LanguageId _languageId, // if empty, the default language for emailId will be used
                                                                 Map _mappings /* Map(DocPlaceholderNameEx -> DocPlaceholderValue) */,
                                                                 boolean _isSystem = false)
    {
        if (_mappings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _mappings is not set');
        }


        /* Email ID, Email Description, Sender Name, Sender Email */
        str emailDescription, senderName, senderEmail;
        str defaultLanguageId = _languageId;
        if (_isSystem)
        {
            SysEmailSystemTable emailSystemTable = SysEmailSystemTable::find(_emailId);
            emailDescription = emailSystemTable.Description;
            senderName = emailSystemTable.SenderName;
            senderEmail = emailSystemTable.SenderAddr;
            if (!defaultLanguageId)
            {
                defaultLanguageId = emailSystemTable.DefaultLanguage;
            }
        }
        else
        {
            SysEmailTable emailTable = SysEmailTable::find(_emailId);
            emailDescription = emailTable.Description;
            senderName = emailTable.SenderName;
            senderEmail = emailTable.SenderAddr;
            if (!defaultLanguageId)
            {
                defaultLanguageId = emailTable.DefaultLanguage;
            }
        }

        if (!defaultLanguageId)
        {
            defaultLanguageId = currentUserLanguage();
        }

        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderEmailId))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderEmailId, _emailId);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderEmailDescription))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderEmailDescription, emailDescription);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderSenderName))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderSenderName, senderName);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderSenderEmail))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderSenderEmail, senderEmail);
        }
        
       
        /* Company ID, Company Name */
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCompanyId))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderCompanyId, curExt());
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCompanyName))
        {
            CompanyInfo currentCompanyInfo = CompanyInfo::findDataArea(curExt());
            _mappings.insert(DocConstantPlaceholderET::PlaceholderCompanyName, currentCompanyInfo.Name);
        }


        /* User ID, Username, UserAlias, UserEmail */
        str currentUserId = curUserId();
        UserInfo userInfo;
        select firstOnly userInfo where userInfo.id == currentUserId;
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderUserId))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderUserId, currentUserId);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderUserName))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderUserName, userInfo.name);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderUserAlias))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderUserAlias, userInfo.networkAlias);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderUserEmail))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderUserEmail, DocEmailMngHelper::getUserEmailAddress(currentUserId));
        }
        

        /* Worker, WorkerTitle, WorkerDeparment, WorkerEmail */
        HcmWorker currentWorker = HcmWorker::find(HcmWorkerLookup::currentWorker());
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderWorker))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderWorker, currentWorker.name());
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderWorkerTitle))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderWorkerTitle, currentWorker.title());
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderWorkerDepartment))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderWorkerDepartment, currentWorker.primaryDepartmentName());
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderWorkerEmail))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderWorkerEmail, currentWorker.email());
        }
        

        /* Current date, date and time, day, month and year */
        utcdatetime currentDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
        date currentDate = DateTimeUtil::date(currentDateTime);

        str currentDateStr, currentDateTimeStr;
        if (defaultLanguageId == currentUserLanguage())
        {
            currentDateStr = strFmt('%1', currentDate);
            currentDateTimeStr = strFmt('%1', currentDateTime);
        }
        else
        {
            System.Globalization.CultureInfo ci = DocGlobalHelper::getCultureInfo(defaultLanguageId);
            if (ci != null)
            {
                currentDateStr = System.String::Format(ci, '{0:d}', currentDate);
                currentDateTimeStr = System.String::Format(ci, '{0:g}', currentDateTime);
            }
        }

        // Current date and datetime.
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCurrentDate))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderCurrentDate, currentDateStr);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCurrentDatetime))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderCurrentDatetime, currentDateTimeStr);
        }

        // Current day, month and year.
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCurrentDay))
        {
            int currentDay = dayOfMth(currentDate);
            DocPlaceholderValue placeholderValue = System.String::Format('{0:00}', currentDay);
            _mappings.insert(DocConstantPlaceholderET::PlaceholderCurrentDay, placeholderValue);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCurrentMonth))
        {
            int currentMonth = mthOfYr(currentDate);
            DocPlaceholderValue placeholderValue = System.String::Format('{0:00}', currentMonth);
            _mappings.insert(DocConstantPlaceholderET::PlaceholderCurrentMonth, placeholderValue);
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderCurrentYear))
        {
            int currentYear = year(currentDate);
            DocPlaceholderValue placeholderValue = int2Str(currentYear);
            _mappings.insert(DocConstantPlaceholderET::PlaceholderCurrentYear, placeholderValue);
        }

        // Environment name, domain name, type and mode
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderEnvironmentName))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderEnvironmentName, DocDiagnosticsManager::getCurrentEnvironmentCustomName());
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderEnvironmentDomainName))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderEnvironmentDomainName, DocDiagnosticsManager::fullyQualifiedDomainName());
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderEnvironmentType))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderEnvironmentType, strFmt('%1 / %2', DocDiagnosticsManager::deploymentType(), DocDiagnosticsManager::hostingEnvironment()));
        }
        if (!_mappings.exists(DocConstantPlaceholderET::PlaceholderEnvironmentMode))
        {
            _mappings.insert(DocConstantPlaceholderET::PlaceholderEnvironmentMode, enum2Str(DocDiagnosticsManager::getCurrentEnvironmentMode()));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareMappingsWithImagesForBuiltInEmailing</Name>
				<Source><![CDATA[
    /******************************************************************/
    /*     Methods for working with Image Placeholders and mappings   */
    /******************************************************************/

    /// <summary>
    /// Prepares a map with image placeholders for built-in emailing (tracable).
    /// </summary>
    /// <param name = "_mappings">A map with placeholders</param>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_languageId">Language Id</param>
    /// <param name = "_isSystem">Flag indicating whether the system email templates are used</param>
    /// <returns>A number of used images</returns>
    public static int prepareMappingsWithImagesForBuiltInEmailing(Map _mappings, /* Map(DocPlaceholderNameEx -> DocPlaceholderValue) */
                                                                  str _emailId, str _languageId, boolean _isSystem)
    {
        str emailBody = DocEmailTemplateManager::getEmailBody(_emailId, _languageId, _isSystem);

        // For each image placeholder in _mappings, take the placeholder value, i.e. image content
        // and put it in the global cache; then save the corresponding global cache key in _mappings as the placeholoder value.

        Map imageMap = new Map(Types::String, Types::String);
        Set imagePlaceholdersToRemove = new Set(Types::String);
        MapEnumerator mapEnum = _mappings.getEnumerator();
        while (mapEnum.moveNext())
        {
            DocPlaceholderNameEx placeholderNameEx = mapEnum.currentKey();
            DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

            if (placeholderDef.type() == DocPlaceholderType::Image)
            {
                DocPlaceholderValue placeholderValue = mapEnum.currentValue();  // Image content.

                // Put only used images to Session cache.
                if (DocEmailTemplateManager::findPlaceholder(emailBody, placeholderDef.name()))
                {
                    str imageId = DocEmailTemplateHelper::addImageToSessionCache(placeholderValue);
                    imageMap.insert(placeholderNameEx, imageId);
                }
                else
                {
                    imagePlaceholdersToRemove.add(placeholderNameEx);
                }
            }
        }

        // Update _mappings with the clean placeholder names (without ?Image) and 
        // replace the corresponding placeholder value with global cache key.
        mapEnum = imageMap.getEnumerator();
        while (mapEnum.moveNext())
        {
            DocPlaceholderNameEx placeholderNameEx = mapEnum.currentKey();
            DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

            _mappings.remove(placeholderNameEx);

            if (_mappings.exists(placeholderDef.name()))
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Two placeholders with the same name found (%1)', placeholderDef.name()));
            }
            _mappings.insert(placeholderDef.name(), mapEnum.currentValue());
        }

        // Remove images unused in the email body from _mappings.
        SetEnumerator setEnum = imagePlaceholdersToRemove.getEnumerator();
        while (setEnum.moveNext())
        {
            DocPlaceholderNameEx placeholderNameEx = setEnum.current();
            _mappings.remove(placeholderNameEx);
        }

        // Returns number of used images in the email body.
        int numberOfUsedImages = imageMap.elements();
        return numberOfUsedImages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUnusedImagesFromMappingsForBuiltInEmailing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes unused image placeholders from a map for built-in emailing (non-traceable).
    /// </summary>
    /// <param name = "_mappings">A map with placeholders></param>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_languageId">Language Id</param>
    /// <param name = "_isSystem">Flag indicating whether the system email templates are used</param>
    /// <returns>A number of used images</returns>
    public static int removeUnusedImagesFromMappingsForBuiltInEmailing(Map _mappings, /* Map(DocPlaceholderNameEx -> DocPlaceholderValue) */
                                                                       str _emailId, str _languageId, boolean _isSystem)
    {
        str emailBody = DocEmailTemplateManager::getEmailBody(_emailId, _languageId, _isSystem);

        // For each image placeholder in _mappings, check if it is used in the email body.
        // If it is, increase the counter, otherwise remove it from _mappings.

        int numberOfUsedImages = 0;
        Set imagePlaceholdersToRemove = new Set(Types::String);
        MapEnumerator mapEnum = _mappings.getEnumerator();
        while (mapEnum.moveNext())
        {
            DocPlaceholderNameEx placeholderNameEx = mapEnum.currentKey();
            DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

            if (placeholderDef.type() == DocPlaceholderType::Image)
            {
                if (DocEmailTemplateManager::findPlaceholder(emailBody, placeholderDef.name()))
                {
                    numberOfUsedImages++;
                }
                else
                {
                    imagePlaceholdersToRemove.add(placeholderNameEx);
                }
            }
        }

        // Remove images unused in the email body from _mappings.
        SetEnumerator setEnum = imagePlaceholdersToRemove.getEnumerator();
        while (setEnum.moveNext())
        {
            DocPlaceholderNameEx placeholderNameEx  = setEnum.current();
            _mappings.remove(placeholderNameEx);
        }

        // Returns number of used images in the email body.
        return numberOfUsedImages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMappingsWithImagesForDocentricEmailing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a map with images for Docentric emailing.
    /// </summary>
    /// <param name = "_mappings">A map with placeholders</param>
    /// <param name = "_lineMappings">A line map with placeholders</param>
    /// <param name = "_multipleLineMappings">A multiple line map with placeholders</param>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_languageId">Language Id</param>
    /// <param name = "_isSystem">Flag indicating whether the system email templates are used</param>
    /// <returns>A map with updated image placeholders</returns>
    public static Map updateMappingsWithImagesForDocentricEmailing(Map _mappings, /* Map(DocPlaceholderNameEx -> DocPlaceholderValue) */
                                                                   List _lineMappings, /* List of Map(DocPlaceholderNameEx -> DocPlaceholderValue) */
                                                                   Map _multipleLineMappings, /* Map(DynamicTableName -> List of Map(DocPlaceholderNameEx -> DocPlaceholderValue)) */
                                                                   str _emailId, str _languageId, boolean _isSystem)
    {
        Map imageMap = DocEmailTemplateHelper::prepareMappingsWithImagesForDocentricEmailing(_mappings);
        if (imageMap.elements() > 0)
        {
            str emailBody = DocEmailTemplateManager::getEmailBody(_emailId, _languageId, _isSystem);
            DocEmailTemplateHelper::removeUnusedImagesForDocentricEmailing(imageMap, _mappings, emailBody);
        }

        if (_lineMappings != null && !_lineMappings.empty())
        {
            DocEmailTemplateHelper::prepareLineMappingsWithImagesForDocentricEmailing(_lineMappings, imageMap);
        }

        if (_multipleLineMappings != null && !_multipleLineMappings.empty())
        {
            MapEnumerator mapEnum = _multipleLineMappings.getEnumerator();
            while (mapEnum.moveNext())
            {
                str dynamicTableName = mapEnum.currentKey();
                List lineMappings = DocEmailTemplateHelper::tryGetLineMappings(mapEnum);
                if (lineMappings != null)
                {
                    DocEmailTemplateHelper::prepareLineMappingsWithImagesForDocentricEmailing(lineMappings, imageMap, dynamicTableName);
                }
            }
        }

        return imageMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareMappingsWithImagesForDocentricEmailing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a map with image palceholders for Docentric emailing.
    /// </summary>
    /// <param name = "_mappings">A map with placeholders</param>
    /// <returns>A map with updated image placeholders</returns>
    public static Map prepareMappingsWithImagesForDocentricEmailing(Map _mappings /* Map(DocPlaceholderNameEx -> DocPlaceholderValue) */)
    {
        if (_mappings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _mappings cannot be null');
        }

        // For each image placeholder in _mappings, take the placeholder value, i.e. image content
        // and put it in a new map; then save the placeholder name in _mappings as the placeholoder value.
        
        Map imageMap = new Map(Types::String, Types::Container);

        Set imagePlaceholders = new Set(Types::String);
        MapEnumerator mapEnum = _mappings.getEnumerator();
        while (mapEnum.moveNext())
        {
            DocPlaceholderNameEx placeholderNameEx = mapEnum.currentKey();
            DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

            if (placeholderDef.type() == DocPlaceholderType::Image)
            {
                imagePlaceholders.add(placeholderNameEx);
                DocPlaceholderValue imageContentBase64String = mapEnum.currentValue();
                if (imageContentBase64String)
                {
                    if (imageMap.exists(placeholderDef.name()))
                    {
                        DocGlobalHelper::handleException(funcName(), strFmt('Two image placeholders with the same name found (%1)', placeholderDef.name()));
                    }
                    imageMap.insert(placeholderDef.name(), DocGlobalHelper::convertBytesToContainer(DocGlobalHelper::convertFromBase64String(imageContentBase64String)));
                }
            }
        }

        SetEnumerator setEnum = imagePlaceholders.getEnumerator();
        while (setEnum.moveNext())
        {
            DocPlaceholderNameEx placeholderNameEx = setEnum.current();
            DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

            _mappings.remove(placeholderNameEx);

            if (_mappings.exists(placeholderDef.name()))
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Two image placeholders with the same name found (%1)', placeholderDef.name()));
            }
            _mappings.insert(placeholderDef.name(), placeholderDef.name());
        }

        return imageMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLineMappingsWithImagesForDocentricEmailing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a line map with image palceholders for Docentric emailing.
    /// </summary>
    /// <param name = "_lineMappings">A line map with placeholders</param>
    /// <param name = "_imageMap">A map with image placeholders</param>
    /// <param name = "_dynamicTableName">A dynamic table name</param>
    public static void prepareLineMappingsWithImagesForDocentricEmailing(
        List _lineMappings, /* List of Map(DocPlaceholderNameEx -> DocPlaceholderValue) */
        Map _imageMap, /* Map(DocPlaceholderName (PlaceholderName_dynamicTableName_i) -> ImageContent (Bitmap)) */
        str _dynamicTableName = '')
    {
        if (_imageMap == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _imageMap cannot be null');
        }

        if (_lineMappings == null)
        {
            return;
        }

        ListEnumerator listEnum = _lineMappings.getEnumerator();
        int i = 0;
        while (listEnum.moveNext())
        {
            i++;

            Map mappings = listEnum.current(); /* Map(DocPlaceholderNameEx -> DocPlaceholderValue) */

            if (mappings == null)
            {
                continue;
            }

            // For each image placeholder in mappings, take the placeholder value, i.e. image content
            // and put it in a new map; then save the placeholder name in mappings as the placeholoder value.

            Set imagePlaceholders = new Set(Types::String);
            MapEnumerator mapEnum = mappings.getEnumerator();
            while (mapEnum.moveNext())
            {
                DocPlaceholderNameEx placeholderNameEx = mapEnum.currentKey();
                DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

                if (placeholderDef.type() == DocPlaceholderType::Image)
                {
                    imagePlaceholders.add(placeholderNameEx);
                    str imageContentBase64String = mapEnum.currentValue();
                    if (imageContentBase64String)
                    {
                        DocPlaceholderName placeholderNameLineNum = _dynamicTableName ? strFmt('%1_%2_%3', placeholderDef.name(), _dynamicTableName, i) : strFmt('%1_%2', placeholderDef.name(), i);
                        _imageMap.insert(placeholderNameLineNum, DocGlobalHelper::convertBytesToContainer(DocGlobalHelper::convertFromBase64String(imageContentBase64String)));
                    }
                }
            }

            SetEnumerator setEnum = imagePlaceholders.getEnumerator();
            while (setEnum.moveNext())
            {
                DocPlaceholderNameEx placeholderNameEx = setEnum.current();
                DocPlaceholderDefinition placeholderDef = new DocPlaceholderDefinition(placeholderNameEx);

                mappings.remove(placeholderNameEx);

                DocPlaceholderValue placeholderNameLineNum = _dynamicTableName ? strFmt('%1_%2_%3', placeholderDef.name(), _dynamicTableName, i) : strFmt('%1_%2', placeholderDef.name(), i);
                mappings.insert(placeholderDef.name(), placeholderNameLineNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUnusedImagesForDocentricEmailing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes unused image placeholders from a map.
    /// </summary>
    /// <param name = "_imageMap">A map with image placeholders</param>
    /// <param name = "_mappings">A map with placeholders</param>
    /// <param name = "_emailBody">An email body</param>
    public static void removeUnusedImagesForDocentricEmailing(Map _imageMap, /* Map(DocPlaceholderName -> ImageContent (Bitmap)) */
                                                              Map _mappings, /* Map(DocPlaceholderNameEx -> DocPlaceholderValue) */
                                                              str _emailBody)
    {
        Set imagesToRemove = new Set(Types::String);
        MapEnumerator mapEnum = _imageMap.getEnumerator();
        while (mapEnum.moveNext())
        {
            DocPlaceholderName placeholderName = mapEnum.currentKey();
            if (DocEmailTemplateManager::findPlaceholder(_emailBody, placeholderName) == 0)
            {
                imagesToRemove.add(placeholderName);
            }
        }

        SetEnumerator setEnum = imagesToRemove.getEnumerator();
        while (setEnum.moveNext())
        {
            DocPlaceholderName placeholderName = setEnum.current();

            _imageMap.remove(placeholderName);
            _mappings.remove(DocEmailTemplateHelper::createImagePlaceholderNameEx(placeholderName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImagePlaceholderNameEx</Name>
				<Source><![CDATA[
    /***************************************************************/
    /*     Utility methods for working with Image Placeholders     */
    /***************************************************************/

    /// <summary>
    /// Creates an image placeholder name.
    /// </summary>
    /// <param name = "_placeholderName">A placeholder name</param>
    /// <param name = "_defaultHeightInPx">Default image height in pixels</param>
    /// <param name = "_defaultWidhtInPx">Default image width in pixels</param>
    /// <returns>An image placeholder name</returns>
    public static DocPlaceholderNameEx createImagePlaceholderNameEx(DocPlaceholderName _placeholderName, int _defaultHeightInPx = 0, int _defaultWidhtInPx = 0)
    {
        DocPlaceholderNameEx placeholderNameEx;

        placeholderNameEx = _placeholderName + '?' + DocConstantPlaceholderET::PlaceholderImageToken;
        if (_defaultHeightInPx)
        {
            placeholderNameEx += '&' + DocConstantPlaceholderET::PlaceholderImageDefaultHeight + '=' + int2Str(_defaultHeightInPx);
        }
        if (_defaultWidhtInPx)
        {
            placeholderNameEx += '&' + DocConstantPlaceholderET::PlaceholderImageDefaultWidth + '=' + int2Str(_defaultWidhtInPx);
        }

        return placeholderNameEx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImagePlaceholderValueForMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an image placeholder value for specified image content.
    /// </summary>
    /// <param name = "_imageContent">Image content</param>
    /// <returns>An image contet as Base64 string</returns>
    public static DocPlaceholderValue createImagePlaceholderValueForMappings(Bitmap _imageContent)
    {
        DocPlaceholderValue imageContentBase64String = DocGlobalHelper::convertToBase64String(DocGlobalHelper::convertContainerToBytes(_imageContent));
        return imageContentBase64String;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addImageToSessionCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an image placeholder value to the global cache.
    /// </summary>
    /// <param name = "_imageContent">An image placeholder value as Base64 string</param>
    /// <returns>An image Id as GUID</returns>
    public static SysGuidString addImageToSessionCache(DocPlaceholderValue _imageContent) // Base64String
    {
        SysGuidString imageId = guid2Str(newGuid());

        return appl.globalCache().set(classStr(DocEmailTemplateHelper), imageId, _imageContent) ? imageId : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageFromSessionCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an image placeholder value from the global cache.
    /// </summary>
    /// <param name = "_imageId">Image Id</param>
    /// <param name = "_delete">Flag indicating whether to delte the image value from the global cache</param>
    /// <returns>Image placeholder value as Base64 string</returns>
    public static DocPlaceholderValue getImageFromSessionCache(SysGuidString _imageId, boolean _delete = false)
    {
        SysGlobalCache cache = appl.globalCache();
        DocPlaceholderValue image = cache.get(classStr(DocEmailTemplateHelper), _imageId, '');
        // Last parameter specifies returnValue if the image is not found in the cache.

        if (_delete)
        {
            cache.remove(classStr(DocEmailTemplateHelper), _imageId);
        }

        // Return the image content which is Base64String.
        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHtmlPlaceholderNameEx</Name>
				<Source><![CDATA[
    /***************************************************************/
    /*     Utility methods                                         */
    /***************************************************************/

    /// <summary>
    /// Creates a HTML placeholder name for specified placeholder name.
    /// </summary>
    /// <param name = "_placeholderName">A placeholder name</param>
    /// <returns>A HTML placeholder name</returns>
    public static DocPlaceholderNameEx createHtmlPlaceholderNameEx(DocPlaceholderName _placeholderName)
    {
        DocPlaceholderNameEx placeholderNameForHtmlFragment = _placeholderName + '?' + DocConstantPlaceholderET::PlaceholderHtmlToken;
        return placeholderNameForHtmlFragment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHiddenDynamicTableBeginTagForMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a hidden beginning dynamic table name tag for the placeholder map.
    /// </summary>
    /// <param name = "_dynamicTableName">A dynamic table name</param>
    /// <returns>A hidden beginning dynamic table name tag</returns>
    public static DocPlaceholderNameEx createHiddenDynamicTableBeginTagForMappings(str _dynamicTableName)
    {
        DocPlaceholderNameEx placeholderName = DocConstantPlaceholderET::PlaceholderTableBegin + '.' + _dynamicTableName;
        return placeholderName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHiddenDynamicTableEndTagForMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a hidden ending dynamic table name tag for the placeholder map.
    /// </summary>
    /// <param name = "_dynamicTableName">A dynamic table name</param>
    /// <returns>A hidden ending dynamic table name tag</returns>
    public static DocPlaceholderNameEx createHiddenDynamicTableEndTagForMappings(str _dynamicTableName)
    {
        DocPlaceholderNameEx placeholderName = DocConstantPlaceholderET::PlaceholderTableEnd + '.' + _dynamicTableName;
        return placeholderName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryGetLineMappings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of line mappings from specificed multiple line mappings map enumerator.
    /// </summary>
    /// <param name = "_multipleLineMappingsMapEnum">A multiple line mappings map enumerator</param>
    /// <returns>A list of line mappings</returns>
    public static List tryGetLineMappings(MapEnumerator _multipleLineMappingsMapEnum)
    {
        List lineMappings;

        try
        {
            lineMappings = _multipleLineMappingsMapEnum.currentValue();
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Provided multiple lineMappings are not in the form: Map(DynamicTableName -> List of Map(PlaceholderName -> PlaceholderValue))');
        }

        return lineMappings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkflowTypeIdRef</Name>
				<Source><![CDATA[
    /***************************************************************/
    /*     Helper methods for Workflows (currently not in use)     */
    /*     NOTE: Parts causing warnings on P20+ are commented out  */
    /***************************************************************/

    /// <summary>
    /// Populates a table with all available workflow types.
    /// </summary>
    /// <returns>A table with all available workflow types</returns>
    public static DocTmpIdRef buildWorkflowTypeIdRef()
    {
        DocTmpIdRef dsWfTypeIdRef;
                                     
        dsWfTypeIdRef.clear();
       
        List wfList = null;  // List::create(WorkflowType::getAllModuleTypes());
        ListEnumerator listEnumerator = wfList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            container wfContainer    = listEnumerator.current();

            // [wfType.name(), wfType.document(), wfType.label(), 0, wfType.help()]

            dsWfTypeIdRef.Name       = conPeek(wfContainer, 1);
            dsWfTypeIdRef.HelpTxt    = conPeek(wfContainer, 3);
            dsWfTypeIdRef.insert();
        }
    
        return dsWfTypeIdRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillStandardPlaceholderDefinitionMapForWfType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a standard placeholder definition map with standard placeholders for workflow type.
    /// </summary>
    /// <param name = "_wfType">Workflow type</param>
    /// <param name = "_mapStdPlaceholderDefMap">A standard placeholder definition map</param>
    public static void fillStandardPlaceholderDefinitionMapForWfType(str _wfType, Map _mapStdPlaceholderDefMap /* Map(DocPlaceholderNameEx -> DocPlaceholderDescription) */)
    {
        boolean containsTwoDots(str _inputStr)
        {
            System.Text.RegularExpressions.Regex r = new System.Text.RegularExpressions.Regex(@'^.+\..+\..+$');
            if (r.IsMatch(_inputStr))
            {
                return true;
            }
            return false;
        }


        if (_mapStdPlaceholderDefMap == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _mapStdPlaceholderDefMap is not set');
        }

        /*
        SysWorkflowConfigurationService wfcService = new SysWorkflowConfigurationService();
        SysWorkflowConfigurationStringList placeholders = wfcService.getDocumentFieldList(_wfType);

        WorkflowDocumentFieldTmp wfFieldTmp = placeholders.parmDocumentFieldTable();
        while select wfFieldTmp
        {
            str fieldName = wfFieldTmp.FieldName;

            // Skip the field if its name contains more than two dots.
            if (containsTwoDots(fieldName))
            {
                continue;
            }
            
            // Calculate field display name for adding to the placeholder map.
            int fieldNameLength = strLen(fieldName);
            int dotPosition = strFind(fieldName, '.', 1, fieldNameLength);
            str fieldDisplayName = subStr(fieldName, dotPosition + 1, fieldNameLength - dotPosition - 1);
            str fieldNameForMap = subStr(fieldName, 2, fieldNameLength - 2);

            // Add the field to the placeholder map.
            if (!_mapStdPlaceholderDefMap.exists(fieldNameForMap))
            {
                _mapStdPlaceholderDefMap.insert(fieldNameForMap, fieldDisplayName);
            }
        }
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinkToBusinessData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an url link to business data.
    /// </summary>
    /// <param name = "_buffer">A context table buffer</param>
    /// <param name = "_eventInbox">An EventInbox table buffer</param>
    /// <returns>The url link to business data</returns>
    public static str getLinkToBusinessData(Common _buffer, EventInbox _eventInbox)
    {
        str linkToBusinessData = '';

        EventContextInformation eci = EventContextInformation::construct();
        eci.parmAlertBuffer(_buffer);
        eci.unpack(_eventInbox.contextData());
                        
        MenuItemName miName = eci.parmMenuItemName();
        MenuItemType miType = eci.parmMenuItemType();
        str dsName = SysWorkflowHelper::getFormDataSource(miName, eci.parmAlertBuffer().TableId);
                                   
        if (miName != '' && dsName != '' && eci.parmAlertBuffer().RecId != 0)
        {
            Map fieldNameValueMap = new Map(Types::String, Types::String);
            fieldNameValueMap.insert(fieldStr(Common, RecId), int642Str(eci.parmAlertBuffer().RecId));

            DictTable alertBufferDictTable = new DictTable(eci.parmAlertBuffer().TableId);

            if (_eventInbox.CompanyId && alertBufferDictTable.dataPrCompany())
            {
                linkToBusinessData = DocGlobalHelper::generateRecordUrl(miName, miType, dsName, fieldNameValueMap, _eventInbox.CompanyId);
            }
            else
            {
                // Creates the URL with the data area Id set to an empty string. This is the case if the context table for the WF notification
                // is a cross-company table, so that the user can open the URL in the company to which they have access. As soon as the user 
                // clicks on the URL without a company ID, the company ID is read from the user options (if available), otherwise from the Users form.
                linkToBusinessData = DocGlobalHelper::generateRecordUrl(miName, miType, dsName, fieldNameValueMap, '');
            }
        }
        // An instance of the FormRun class needs to be closed to prevent memory leak
        if (eci.parmFormRun())
        {
            eci.parmFormRun().close();
            eci.parmFormRun(null);
        }

        return linkToBusinessData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an event subject string based on the EventInbox table buffer and an instance of the EventType class.
    /// NOTE:
    /// This method is a replacement for the buildSubject method in the EventInbox table. In the original method, the
    /// xValue value is never set because an instance of the EventType class is created within the method instead of
    /// being passed as a parameter.
    /// </summary>
    /// <param name = "_eventInbox">The EventInbox table buffer</param>
    /// <param name = "_eventType">An instance of the EventType class</param>
    /// <param name = "_cultureInfo">Culture info</param>
    /// <returns>An event subject string</returns>
    public static EventSubject buildSubject(EventInbox _eventInbox, EventType _eventType, System.Globalization.CultureInfo _cultureInfo)
    {
        EventSubject subject;

        SysDictTable dictTable = new SysDictTable(_eventInbox.AlertTableId);

        if (_eventType)
        {
            if (_eventType.isFieldRelated())
            {
                if (_eventType.isRequiringX() && _eventType.parmXValue())
                {
                    str xValue = '';
                    if (_eventType.xValueEnumId())
                    {
                        SysDictEnum dictEnum = new SysDictEnum(_eventType.xValueEnumId());
                        xValue = dictEnum.value2Label(_eventType.parmXValue());
                    }
                    else
                    {
                        xValue = DocGlobalHelper::formatData(_eventType.parmXValue(), _cultureInfo, DocApplyTimeZone::CompanyTimeZone);
                    }
                    subject = strfmt("@SYS87953", _eventInbox.AlertFieldLabel, dictTable.label(), _eventType.caption(), xValue);
                }
                else
                {
                    subject = strfmt("@SYS87953", _eventInbox.AlertFieldLabel, dictTable.label(), _eventType.caption(), '');
                }
            }
            else
            {
                subject = strfmt("@SYS87954", _eventType.caption(), dictTable.label());
            }
        }
        return subject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholdersUserGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces user group placeholders (%USERGROUP_%) in given input string.
    /// </summary>
    /// <param name = "_inputStr">The string in which to search for user group placeholders.</param>
    /// <returns>Input string with replaced user group placeholders</returns>
    public static str replacePlaceholdersUserGroup(str _inputStr)
    {
        int len = strLen(_inputStr);

        str searchStr = DocConstantPlaceholderET::PlaceholderStartSymbol + DocConstantPlaceholderET::PlaceholderUserGroupStartToken;
        int searchStrLen = strLen(searchStr);

        int position = strScan(_inputStr, searchStr, 1, len);
        while (position)
        {
            int positionEnd = strScan(_inputStr, DocConstantPlaceholderET::PlaceholderEndSymbol, position + searchStrLen, len);
            if (positionEnd)
            {
                str placeholderName = subStr(_inputStr, position + 1, positionEnd - position - 1);

                // Get a user group ID from the placeholder name
                UserGroupId userGroupId = strDel(placeholderName, 1, strLen(DocConstantPlaceholderET::PlaceholderUserGroupStartToken));

                UserGroupInfo userGroupInfo;

                // Check if a user group ID exists in the UserGroupInfo table
                select firstonly userGroupInfo where userGroupInfo.id == userGroupId;
                if (userGroupInfo)
                {
                    UserGroupList userGroupList;

                    // Get the email addresses for each user in the selected user group
                    str emailRecipientAddress = '';
                    while select userId
                        from userGroupList
                            where userGroupList.groupId == userGroupId
                    {
                        str emailAddress = DocEmailMngHelper::getUserEmailAddress(userGroupList.userId);
                        if (emailAddress)
                        {
                            // Concatenate the email addresses
                            emailRecipientAddress += (emailRecipientAddress ? ';' : '') + emailAddress;
                        }
                    }
                    // Replace the user group placeholder in the _inputStr string with the email addresses of the users
                    _inputStr = strReplace(_inputStr, DocConstantPlaceholderET::PlaceholderStartSymbol + placeholderName + DocConstantPlaceholderET::PlaceholderEndSymbol, emailRecipientAddress);

                    position += strLen(emailRecipientAddress);
                }
                else
                {
                    position = positionEnd;
                }
            }
            else
            {
                position++;
            }
    
            len = strLen(_inputStr);
            position = strScan(_inputStr, searchStr, position, len);
        }

        return _inputStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholdersUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces user placeholders (%USER_%) in given input string.
    /// </summary>
    /// <param name = "_inputStr">The string in which to search for user placeholders.</param>
    /// <returns>Input string with replaced user placeholders</returns>
    public static str replacePlaceholdersUser(str _inputStr)
    {
        int len = strLen(_inputStr);

        str searchStr = DocConstantPlaceholderET::PlaceholderStartSymbol + DocConstantPlaceholderET::PlaceholderUserStartToken;
        int searchStrLen = strLen(searchStr);

        int position = strScan(_inputStr, searchStr, 1, len);
        while (position)
        {
            int positionEnd = strScan(_inputStr, DocConstantPlaceholderET::PlaceholderEndSymbol, position + searchStrLen, len);
            if (positionEnd)
            {
                str placeholderName = subStr(_inputStr, position + 1, positionEnd - position - 1);

                // Get a user ID from the placeholder name
                UserId userId = strDel(placeholderName, 1, strLen(DocConstantPlaceholderET::PlaceholderUserStartToken));

                UserInfo userInfo;

                // Check if a user ID exists in the UserInfo table
                select firstonly userInfo where userInfo.id == userId;
                if (userInfo)
                {
                    str emailRecipientAddress = DocEmailMngHelper::getUserEmailAddress(userId);

                    // Replace the user placeholder in the _inputStr string with the email addresses of the users
                    _inputStr = strReplace(_inputStr, DocConstantPlaceholderET::PlaceholderStartSymbol + placeholderName + DocConstantPlaceholderET::PlaceholderEndSymbol, emailRecipientAddress);

                    position += strLen(emailRecipientAddress);
                }
                else
                {
                    position = positionEnd;
                }
            }
            else
            {
                position++;
            }
    
            len = strLen(_inputStr);
            position = strScan(_inputStr, searchStr, position, len);
        }

        return _inputStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>