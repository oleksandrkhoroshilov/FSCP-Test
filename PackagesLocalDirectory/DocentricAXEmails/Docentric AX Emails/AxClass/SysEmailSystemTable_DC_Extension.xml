<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysEmailSystemTable_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SysEmailSystemTable_DC_Extension is an extension of the table SysEmailSystemTable.
/// </summary>
[ExtensionOf(tableStr(SysEmailSystemTable))]
final class SysEmailSystemTable_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an email.
    /// 
    /// The built-in mappings are being filled up with the values of additional placeholders 
    /// from the corresponding ETH class, and then being replaced in the same method.
    /// </summary>
    /// <param name = "_emailId">Email Id</param>
    /// <param name = "_language">Language Id</param>
    /// <param name = "_emailAddr">Email recipients</param>
    /// <param name = "_mappings">Mappings: Map(DocPlaceholderNameEx (str) -> DocPlaceholderValue (str)</param>
    /// <param name = "_attachmentfileName">Attachment file name</param>
    /// <param name = "_xmlData">Xml data</param>
    /// <param name = "_isTraceable">Is traceble</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_isWithRetries">Is with retries</param>
    public static void sendMail(
        SysEmailSystemId _emailId,
        LanguageId _language,
        str _emailAddr,
        Map _mappings,
        Filename _attachmentfileName,
        str _xmlData,
        boolean _isTraceable,
        UserId _userId,
        boolean _isWithRetries)
    {
        // Check if the Docentric's improvement of Email templates is turned on.
        if (DocEmailTemplateHelper::isDocentricImprovedEmailTemplatesTurnedOn(_emailId, true))
        {
            // Create the mappings if it is not provided.
            if (_mappings == null)
            {
                _mappings = new Map(Types::String, Types::String);  // Map(DocPlaceholderNameEx -> DocPlaceholderValue)
            }

            // Publish event that map with placeholder values will be filled.
            DocEmailTemplateDelegates emailTemplateDelegates = DocEmailTemplateDelegates::instance();
            DocEventHandlerResult res = emailTemplateDelegates.onBeforeFillingMappings(_emailId, _language, _emailAddr, _mappings, _attachmentFilename, true);
            if (!res.cancelExecution())
            {
                container contextInfo = conNull();
                try
                {
                    if (res.result())
                    {
                        contextInfo = res.result();
                    }
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Event Handler Result (res.result()) should return a container with context info for email (%1)', _emailId));
                }
       
                try
                {
                    // Instance the proper ETH class and additionally fill _mapping with
                    // the standard and custom placeholders using emailId and languageId.
                    DocEmailTemplateHandlerBase::fillMappings(_emailId, _language, _mappings, true, contextInfo);

                    // If sending email is traceable, for each image placeholder save its value (i.e. image content)
                    // to the global cache and update the placeholder value to the global cache image content key.
                    if (_isTraceable)
                    {
                        DocEmailTemplateHelper::prepareMappingsWithImagesForBuiltInEmailing(_mappings, _emailId, _language, true);

                        // Note that the event handler [DataEventHandler(tableStr(SysOutgoingEmailTable), DataEventType::Inserting)]
                        // is used to embed images for image placeholders from the email body when the outgoing email message is being saved.
                    }
                    else
                    {
                        int numberOfUsedImagesInEmailBody = DocEmailTemplateHelper::removeUnusedImagesFromMappingsForBuiltInEmailing(_mappings, _emailId, _language, true);
                        if (numberOfUsedImagesInEmailBody > 0)
                        {
                            // Image placeholders are not currently supported for non-traceable emails.
                            DocGlobalHelper::handleError(
                                strFmt('Image placeholders are not currently supported for non-traceable emails. The email (%1) will be sent but without images.', _emailId));
                        }
                    }
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Error while filling the mappings with placeholder values for email template (%1)', _emailId));
                }
            }
        }

        next sendMail(_emailId, _language, _emailAddr, _mappings, _attachmentfileName, _xmlData, _isTraceable, _userId, _isWithRetries);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>