<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EventCreateRuleForm_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class EventCreateRuleForm_DC_Extension is an extension of the form EventCreateRule.
/// </summary>
[ExtensionOf(formStr(EventCreateRule))]
final class EventCreateRuleForm_DC_Extension
{ 
    private FormObservableLink eventRuleIsConditionalObservableLink_DC;

    // Used to store link beetween form datasource and related alert table in alertTable combobox: Map[Form datasource Id, alertTable combobox item position]
    private Map alertTableMap_DC = new Map(Types::Integer, Types::Integer);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEventRuleIsConditionalObservableLink_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form observable link to observe when display methods isConditional_DC 
    /// and conditionCriteria_DC on the EventRule table should be executed.
    /// </summary>
    /// <returns>The form observable link</returns>
    public FormObservableLink getEventRuleIsConditionalObservableLink_DC()
    {
        return eventRuleIsConditionalObservableLink_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        next init();

        // By default, the UserId field is hidden if the user does not have the -SYSADMIN- role.
        // We have overridden this behaviour by showing the UserId field and setting it to editable depending on the flag adminMode. 
        EventRule_ds.object(fieldNum(EventRule, UserId)).visible(true);
        EventRule_ds.object(fieldNum(EventRule, UserId)).allowEdit(adminMode);
        EventRule_UserId.visible(true);

        // Set the field UserGroupId_DC editable depending on the security settings.
        // Only users with the roles -SYSADMIN- and DocentricAXAlertPowerUser can change the field value.
        SecurityRights securityRights = SecurityRights::construct();
        AccessRight accessRight = securityRights.fieldAccessRight(tableStr(EventRule), fieldStr(EventRule, UserGroupId_DC));
        EventRule_ds.object(fieldNum(EventRule, UserGroupId_DC)).allowEdit(accessRight > AccessRight::View);

        // Create a form observable link to observe when display methods IsConditional_DC
        // and conditionCriteria_DC on the EventRule table should be executed
        eventRuleIsConditionalObservableLink_DC = new FormObservableLink();

        EventRule.setFields_DC(fieldNum(EventRule, SendAlertEmail));
        EventRule.setFields_DC(fieldNum(EventRule, IncludeInSummaryEmail_DC));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form and data sources from the caller form.
    /// </summary>
    void initFromCaller()
    {
        // When the Create alert rule form is called from the context menu of the selected caller's 
        // form control, the alert field record is set to the field bound to that caller's form control.
        // Store the old alert field record
        TmpEventAlertField  tmpEventAlertFieldOld = this.runBase().parmTmpEventAlertField();

        // The alert field record can change to the first alert field record or
        // the <All fields> alert field record in the base method.
        next initFromCaller();

        // Store the current alert field record
        TmpEventAlertField  tmpEventAlertFieldCurrent = this.runBase().parmTmpEventAlertField();

        if (!eventRule.RecId)
        {
            return;
        }

        // When the Create alert rule form is called from the context menu of the selected caller's
        // form control, we want to set the alert field to the field bound to that caller's form control.
        // Check if the alert record has changed
        if (tmpEventAlertFieldCurrent.RefFieldName != tmpEventAlertFieldOld.RefFieldName)
        {
            // Change the selection in the alertTable combobox to the correct alert table depending on
            // the form data source to which the selected caller's form control is bound.
            if (!alertTableMap_DC.empty())
            {
                int alertTableSelection = alertTableMap_DC.lookup(tmpEventAlertFieldOld.DataSourceId);
                alertTable.selection(alertTableSelection);
                this.initRuleDataSource();
            }

            // Restore the alert field record to the old one if it has changed
            EventRule_DS.alertField(true, EventRule, tmpEventAlertFieldOld.Label);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the rule datasource when a new table is selected from the comboBox.
    /// </summary>
    /// <remarks>
    /// This method is called from the initFromCaller, alertTable.modified and
    /// eventType_OnModified_DC methods.
    /// </remarks>
    void initRuleDataSource()
    {
        next initRuleDataSource();

        // Override changes made in the base method
        if (this.isEnabledChildTables())
        {
            if (alertTableMap_DC.empty())
            {
                // The alertTable combobox is filled with tables from the form data sources in the initFromCaller method. If we have
                // different form data sources based on the same table, the same table is added to the combobox for each form data source.
                // The problem is that the information about which table is linked to which form data source is lost. Therefore, we need
                // to store this information in the alertTableMap to use it later to populate the alertField lookup correctly. The map is 
                // populated in the same way as the alertTable combobox in the initFromCaller method.
                MapEnumerator formDataSourceMapEnum  = eventCreateRule.eventBuildValidAlertFields().formDataSourceMap().getEnumerator();
                int i = 0;
                while (formDataSourceMapEnum.moveNext())
                {
                    FormDataSource fds = formDataSourceMapEnum.currentValue();
                    var alertField = eventCreateRule.eventBuildValidAlertFields(fds).first2TmpEventAlertFieldByDataSource(fds.id());
                    if (alertField && alertField.RecId)
                    {
                        // Add the ID of the form data source and the position of the alert table in the alertTable combobox to the map
                        alertTableMap_DC.add(fds.id(), i);
                        i++;
                    }
                }
            }

            // When the selection in the alertTable combobox is changed, get the correct form data source ID for the selected alert table
            // from the alertTableMap and populate the alertField lookup correctly.
            MapEnumerator alertTableMapEnum = alertTableMap_DC.getEnumerator();
            while (alertTableMapEnum.moveNext())
            {
                int alertTableFdsId = alertTableMapEnum.currentKey();
                int alertTableSelection = alertTableMapEnum.currentValue();
                if (alertTableSelection == alertTable.selection())
                {
                    ruleDataSource = eventCreateRule.eventBuildValidAlertFields().formDataSourceMap().lookup(alertTableFdsId);
                    var alertField = eventCreateRule.eventBuildValidAlertFields(ruleDataSource).first2TmpEventAlertFieldByDataSource(ruleDataSource.id());
     
                    EventRule_DS.alertField(true, eventRule, alertField.Label);
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocEventRuleCondition_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocEventRuleCondition_DC menu button is clicked.
    /// </summary>
    public void DocEventRuleCondition_DC_OnClicked_DC()
    {
        // Notify the form that it should execute the display methods IsConditional_DC
        // and conditionCriteria_DC on the EventRule table.
        eventRuleIsConditionalObservableLink_DC.markChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventType_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the eventType combobox is modified.
    /// </summary>
    public void eventType_OnModified_DC()
    {
        // Update the value of the combobox alertTable with the correct alert table when the value of the combobox eventType is changed.
        // If the eventType field is set to EventTypeTrigger::RecordInsert or EventTypeTrigger::RecordDelete, the AlertTableId field in 
        // the EventRule table is updated to the root data source of the alert query , but the value of the alertTable combobox in the 
        // standard solution remains unchanged, which is not correct.
        if (eventRule.eventType().parmTypeTrigger() == EventTypeTrigger::RecordInsert || eventRule.eventType().parmTypeTrigger() == EventTypeTrigger::RecordDelete)
        {
            // Store the currently selected EventType value, because the initRuleDataSource method
            // resets the selection to the first entry in the list 
            EventTypeDescriptionRich currentEventTypeDesc = eventRule_ds.eventType(false, eventRule, '');

            alertTable.selectText(eventRule.alertTableLabel());
            this.initRuleDataSource();

            // Restore the EventType value to the selected one 
            eventRule_ds.eventType(true, eventRule, currentEventTypeDesc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventRule_OnInitialized_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EventRule data source is initialized.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void EventRule_OnInitialized_DC(FormDataSource _dataSource)
    {
        // Override the jumpRef event for the field InboxId in the EventInbox_DCE data source
        _dataSource.object(fieldNum(EventRule, EmailId_DC)).
            registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(EventCreateRule, EmailId_DC_OnJumpRef_DC), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailId_DC_OnJumpRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified field.
    /// </summary>
    /// <param name = "_field">Form data object</param>
    public void EmailId_DC_OnJumpRef_DC(FormDataObject _field)
    {
        EventRule::jumpRefEmailId_DC(this, EventRule.EmailId_DC, EventRule.CompanyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailId_DC_OnLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the EmailId_DC is fired.
    /// </summary>
    /// <param name = "_emailId">An instance of the EmailId_DC control</param>
    public void EmailId_DC_OnLookup_DC(FormStringControl _emailId)
    {
        EventRule::lookupEmailId_DC(_emailId, EventRule.CompanyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventRule_GlobalRule_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// When switching between organization-wide and company-specific rule,
    /// clear the previously selected template.
    /// </summary>
    public void EventRule_GlobalRule_OnModified_DC()
    {
        EventRule.EmailId_DC = '';
        EventRule_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>