<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysEmailTableForm_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SysEmailTableForm_DC_Extension is an extension of the form SysEmailTable.
/// </summary>
[ExtensionOf(formStr(SysEmailTable))]
final class SysEmailTableForm_DC_Extension
{
    private str             storedEmailTemplateHandlerClass_DC;
    private boolean         storedIsUsedForWF_DC, storedIdUsedForAlert_DC;
    private str             storedWorkflowType_DC;
    private DocTmpIdRef     wfTypesIdRef, ethClassIdRef;
    private boolean         storedAddEmailAttachments_DC;
    private str             storedEmailAttachmentTags_DC;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillComboBoxes_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the comboboxes.
    /// </summary>
    private void fillComboBoxes_DC()
    {
        ethClassIdRef.clear();
        ethClassIdRef = DocEmailTemplateHelper::buildEmailTemplateHandlerClassIdRef();

        /* NOTE: This functionality is not enabled.
        wfTypesIdRef.clear();
        wfTypesIdRef = DocEmailTemplateHelper::buildWorkflowTypeIdRef();
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableControls_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or diable the controls.
    /// </summary>
    private void enableDisableControls_DC()
    {
        if (SysEmailTable.UseDocentricEmailEditor_DC == 0)
        {
            // Disable all Docentric's controls.
            EmailTemplateHandlerClass_DC.allowEdit(false);
            IsUsedForWF_DC.allowEdit(false);
            WorkflowType_DC.allowEdit(false);
            IsUsedForAlert_DC.allowEdit(false);
            AddEmailAttachments_DC.allowEdit(false);
            EmailAttachmentTags_DC.allowEdit(false);
        }
        else
        {
            // Allow Docentric's controls.
            EmailTemplateHandlerClass_DC.allowEdit(true);
            IsUsedForWF_DC.allowEdit(true);
            IsUsedForAlert_DC.allowEdit(true);

            WorkflowType_DC.allowEdit(SysEmailTable.IsUsedForWF_DC);

            AddEmailAttachments_DC.allowEdit(SysEmailTable.IsUsedForWF_DC || SysEmailTable.IsUsedForAlert_DC);
            EmailAttachmentTags_DC.allowEdit(SysEmailTable.AddEmailAttachments_DC);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeControlValues_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the control values to the local variables.
    /// </summary>
    private void storeControlValues_DC()
    {
        storedEmailTemplateHandlerClass_DC = SysEmailTable.EmailTemplateHandlerClass_DC;
        storedIsUsedForWF_DC = SysEmailTable.IsUsedForWF_DC;
        storedWorkflowType_DC = SysEmailTable.WorkflowType_DC;
        storedIdUsedForAlert_DC = SysEmailTable.IsUsedForAlert_DC;
        storedAddEmailAttachments_DC = SysEmailTable.AddEmailAttachments_DC;
        storedEmailAttachmentTags_DC = SysEmailTable.EmailAttachmentTags_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysEmailTable_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is activated.
    /// </summary>
    public void SysEmailTable_OnActivated_DC()
    {
        // Enable/Disable controls.
        this.enableDisableControls_DC();

        // Store the ETH class and workflow type.
        this.storeControlValues_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysEmailTable_OnQueryExecuted_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data executed the query.
    /// </summary>
    public void SysEmailTable_OnQueryExecuted_DC()
    {
        // Fill the combo-boxes.
        this.fillComboBoxes_DC();

        // Enable/Disable controls.
        this.enableDisableControls_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysEmailTable_OnValidatingWrite_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is validating the data.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    /// <param name = "_e">Event args</param>
    public void SysEmailTable_OnValidatingWrite_DC(FormDataSource _dataSource, FormDataSourceEventArgs _e)
    {
        FormDataSourceCancelEventArgs args = _e as FormDataSourceCancelEventArgs;
        if (_dataSource != null && args != null)
        {
            SysEmailTable emailTable = _dataSource.cursor() as SysEmailTable;

            if (emailTable.UseDocentricEmailEditor_DC)
            {
                // Validate the combination of the IsUsedForWF_DC and IsUsedForAlert_DC flags.
                if (emailTable.IsUsedForAlert_DC && emailTable.IsUsedForWF_DC)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:CannotBeUsedForWFAndAlert", emailTable.EmailId));
                    args.cancel(true);
                }

                // Validate the selected ETH class.
                if (!DocEmailTemplateHelper::validateEthClass(emailTable.EmailTemplateHandlerClass_DC, emailTable.EmailId))
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:EthIsNotValid", emailTable.EmailId));
                    args.cancel(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UseDocentricEmailEditor_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the UseDocentricEmailEditor_DC checkbox is clicked.
    /// </summary>
    public void UseDocentricEmailEditor_DC_OnClicked_DC()
    {
        if (SysEmailTable.UseDocentricEmailEditor_DC == 0)
        {
            // Store the ETH class and workflow type.
            this.storeControlValues_DC();

            // Anull all values.
            SysEmailTable.EmailTemplateHandlerClass_DC = '';
            SysEmailTable.IsUsedForWF_DC = false;
            SysEmailTable.WorkflowType_DC = '';
            SysEmailTable.IsUsedForAlert_DC = false;
            SysEmailTable.AddEmailAttachments_DC = false;
            SysEmailTable.EmailAttachmentTags_DC = '';
        }
        else
        {
            // Set the stored ETH class, or the default one, if no class is stored.
            SysEmailTable.EmailTemplateHandlerClass_DC = storedEmailTemplateHandlerClass_DC;
            if (SysEmailTable.EmailTemplateHandlerClass_DC == '')
            {
                SysEmailTable.EmailTemplateHandlerClass_DC = classStr(DocEmailTemplateDefaultHandler);
            }

            // Set the stored workflow, if needed.
            SysEmailTable.IsUsedForWF_DC = storedIsUsedForWF_DC;
            
            // Set the IsUsedForAlert_DC flag.
            SysEmailTable.IsUsedForAlert_DC = storedIdUsedForAlert_DC;

            // Reset one of these two flags if needed.
            this.IsUsedForWF_DC_OnClicked_DC();
            this.IsUsedForAlert_DC_OnClicked_DC();
        }

        this.enableDisableControls_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsUsedForAlert_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the IsUsedForAlert checkbox is clicked.
    /// </summary>
    public void IsUsedForAlert_DC_OnClicked_DC()
    {
        if (SysEmailTable.IsUsedForAlert_DC != 0)
        {
            // Reset the IsUsedForWF_DC flag.
            SysEmailTable.IsUsedForWF_DC = false;

            // Set the stored AddEmailAttachments:DC flag
            SysEmailTable.AddEmailAttachments_DC = storedAddEmailAttachments_DC;
            AddEmailAttachments_DC.allowEdit(true);
            this.AddEmailAttachments_DC_OnClicked_DC();
        }
        else
        {
            // Value changed from ON to OFF.
            // Check if there is any Event rule that uses this template.
            // If it exists, prompt for the confirmation.
            EventRule eventRule;
            boolean applyModification = true;
            select firstonly RecId 
                from eventRule 
                where eventRule.EmailId_DC == SysEmailTable.EmailId
                   && eventRule.CompanyId != '';
            if (eventRule.RecId)
            {
                applyModification = Box::confirm("@DocentricAX4:AlertEmailClearedPrompt");
            }

            if (applyModification)
            {
                // Modification confirmed or confirmation not needed.
                // Reset the AddEmailAttachments:DC flag
                if (SysEmailTable.IsUsedForWF_DC == 0)
                {
                    storedAddEmailAttachments_DC = SysEmailTable.AddEmailAttachments_DC;
                    SysEmailTable.AddEmailAttachments_DC = false;
                    AddEmailAttachments_DC.allowEdit(false);
                    this.AddEmailAttachments_DC_OnClicked_DC();
                }
            }
            else
            {
                // Return to the previous state.
                SysEmailTable.IsUsedForAlert_DC = 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsUsedForWF_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the IsUsedForWF checkbox is clicked.
    /// </summary>
    public void IsUsedForWF_DC_OnClicked_DC()
    {
        if (SysEmailTable.IsUsedForWF_DC == 0)
        {
            // Store the workflow type.
            storedWorkflowType_DC = SysEmailTable.WorkflowType_DC;

            // Anull the workflow type.
            SysEmailTable.WorkflowType_DC = '';

            // Disable the workflow type.
            WorkflowType_DC.allowEdit(false);

            // Reset the AddEmailAttachments:DC flag
            if (SysEmailTable.IsUsedForAlert_DC == 0)
            {
                storedAddEmailAttachments_DC = SysEmailTable.AddEmailAttachments_DC;
                SysEmailTable.AddEmailAttachments_DC = false;
                AddEmailAttachments_DC.allowEdit(false);
                this.AddEmailAttachments_DC_OnClicked_DC();
            }
        }
        else
        {
            // Set the stored workflow.
            SysEmailTable.WorkflowType_DC = storedWorkflowType_DC;

            // Allow the workflow type.
            WorkflowType_DC.allowEdit(true);

            // Reset the IsUsedForAlert_DC flag.
            SysEmailTable.IsUsedForAlert_DC = false;

            // Set the stored AddEmailAttachments:DC flag
            SysEmailTable.AddEmailAttachments_DC = storedAddEmailAttachments_DC;
            AddEmailAttachments_DC.allowEdit(true);
            this.AddEmailAttachments_DC_OnClicked_DC();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddEmailAttachments_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the AddEmailAttachments checkbox is clicked.
    /// </summary>
    public void AddEmailAttachments_DC_OnClicked_DC()
    {
        if (SysEmailTable.AddEmailAttachments_DC == 0)
        {
            // Store the email attachment tags
            storedEmailAttachmentTags_DC = SysEmailTable.EmailAttachmentTags_DC;

            // Anull the email attachment tags
            SysEmailTable.EmailAttachmentTags_DC = '';

            // Disable the email attachment tags
            EmailAttachmentTags_DC.allowEdit(false);
        }
        else
        {
            // Set the stored email attachment tags
            SysEmailTable.EmailAttachmentTags_DC = storedEmailAttachmentTags_DC;

            // Enable the email attachment tags
            EmailAttachmentTags_DC.allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WorkflowType_DC_OnLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the WorkflowType_DC is fired.
    /// </summary>
    public void WorkflowType_DC_OnLookup_DC()
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tablenum(DocTmpIdRef), WorkflowType_DC);
        Query                   query           = new Query();
        QueryBuildDataSource    qbds;


        sysTableLookup.addLookupfield(fieldnum(DocTmpIdRef, Name), true);
        sysTableLookup.setLabel("@DocentricAX:WfType"); // Workflow type

        sysTableLookup.addLookupfield(fieldnum(DocTmpIdRef, HelpTxt));
        sysTableLookup.setLabel("@SYS7576"); // Description

        // BP Deviation Documented
        sysTableLookup.parmTmpBuffer(wfTypesIdRef);
        qbds = query.addDataSource(tablenum(DocTmpIdRef));

        qbds.addSortField(fieldnum(DocTmpIdRef, Name));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailTemplateHandlerClass_DC_OnLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the EmailTemplateHandlerClass_DC is fired.
    /// </summary>
    public void EmailTemplateHandlerClass_DC_OnLookup_DC()
    {
        DocSysTableLookup       sysTableLookup  = DocSysTableLookup::newParameters(tablenum(DocTmpIdRef), EmailTemplateHandlerClass_DC);
        Query                   query           = new Query();
        QueryBuildDataSource    qbds;


        sysTableLookup.addLookupfield(fieldnum(DocTmpIdRef, Name), true);
        sysTableLookup.setLabel("@SYS24724"); // Class name

        sysTableLookup.addLookupfield(fieldnum(DocTmpIdRef, HelpTxt));
        sysTableLookup.setLabel("@SYS7576"); // Description

        // BP Deviation Documented
        sysTableLookup.parmTmpBuffer(ethClassIdRef);
        qbds = query.addDataSource(tablenum(DocTmpIdRef));

        qbds.addSortField(fieldnum(DocTmpIdRef, Name));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();

        sysTableLookup.datasource().positionToRecordByValue(fieldNum(DocTmpIdRef, Name), EmailTemplateHandlerClass_DC.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailTemplateHandlerClass_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value if the value of the control is empty.
    /// </summary>
    public void EmailTemplateHandlerClass_DC_OnModified_DC()
    {
        if (SysEmailTable.EmailTemplateHandlerClass_DC == '')
        {
            SysEmailTable.EmailTemplateHandlerClass_DC = classStr(DocEmailTemplateDefaultHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysEmailMessage_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is activated.
    /// </summary>
    public void SysEmailMessage_OnActivated_DC()
    {
        DocSendTestEmail.enabled(SysEmailMessage.hasBodyContent());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>