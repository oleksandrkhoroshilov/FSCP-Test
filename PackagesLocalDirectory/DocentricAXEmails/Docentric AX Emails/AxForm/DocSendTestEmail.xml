<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocSendTestEmail</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocSendTestEmail extends FormRun
{
    DocSysEmailTableMap     emailTable;
    DocSysEmailMessageMap   emailMessage;
    boolean                 isSystem;

    DocSendEmailMethod  emailSendMethod;
    DocEmailTo          emailToAddr;
    Map                 placeholderValues;      // Map(DocPlaceholderName -> DocPlaceholderValue or [image, filename])

    Map                 mappings = new Map(Types::String, Types::String);  // Map(DocPlaceholderNameEx -> DocPlaceholderValue) filled by ETH class

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        emailSendMethod,
        emailToAddr
    #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curuserid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifiername lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifiername lastValueDesignName()
    {
        return emailMessage.EmailId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        // defaults
        emailSendMethod = DocSendEmailMethod::DocentricEmailProvider;
        emailToAddr = SysUserInfo::find(curUserId()).Email;
        placeholderValues = new Map(Types::String, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, placeholderValues.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version = RunBase::getVersion(packedClass);

        if(version)
        {
            container placeholderValuesPacked;
            [version, #CurrentList, placeholderValuesPacked] = packedClass;
            placeholderValues = Map::create(placeholderValuesPacked);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if ((!element.args()) ||
           ((element.args().dataset() != tableNum(SysEmailMessageTable)) && (element.args().dataset() != tableNum(SysEmailMessageSystemTable))))
        {
            DocGlobalHelper::handleException(funcName(), 'Form is called with invalid parameters.');    // throws an exception
        }

        emailMessage = element.args().record();
        emailTable = emailMessage.DocSysEmailMessageMap::emailTable();
        isSystem = emailMessage.DocSysEmailMessageMap::isSystem();

        // load last values
        xSysLastValue::getLast(this);

        // fill initial values
        SendEmailMethod.selection(emailSendMethod);
        EmailFrom.text(emailTable.SenderAddr);
        EmailTo.text(emailToAddr ? emailToAddr : SysUserInfo::find(curUserId()).Email);
        EmailTo.modified();
        Subject.text(emailMessage.Subject);

        if (DocEmailTemplateHelper::isDocentricImprovedEmailTemplatesTurnedOn(emailMessage.EmailId, isSystem))
        {
            // fill mappings that will be filled by ETH class
            DocEmailTemplateHandlerBase::fillMappings(emailMessage.EmailId, emailMessage.LanguageId, mappings, isSystem);

            DocEmailPlaceholderTmp_ds.fillPlaceholdersTmpData();

            ValueSetByETH.text(strFmt("@DocentricAX2:SetByETHClass", emailTable.EmailTemplateHandlerClass_DC));

            if (strScan(emailMessage.Mail, DocConstantPlaceholderET::HiddenPlaceholderTableBeginTag, 1, strLen(emailMessage.Mail)))
            {
                DocGlobalHelper::handleWarning("@DocentricAX2:LinePlaceholdersShowJustOneLine");
            }
        }
        else
        {
            // hide Placeholders and skip all related code
            Placeholders.visible(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocEmailPlaceholderTmp</Name>
				<Methods>
					<Method>
						<Name>fillPlaceholdersTmpData</Name>
						<Source><![CDATA[
        void fillPlaceholdersTmpData()
        {
            DocEmailPlaceholderTmp placeholderTmp;

            DocPlaceholderNameEx createPlaceholderNameEx(DocPlaceholderName _placeholderName, DocPlaceholderType _placeholderType)
            {
                DocPlaceholderNameEx placeholderNameEx = _placeholderName;

                if (_placeholderType == DocPlaceholderType::HTML)
                {
                    placeholderNameEx += '?' + DocConstantPlaceholderET::PlaceholderHtmlToken;
                }
                else if (_placeholderType == DocPlaceholderType::Image)
                {
                    placeholderNameEx += '?' + DocConstantPlaceholderET::PlaceholderImageToken;
                }

                return placeholderNameEx;
            }
            
            void addDefinitionMap(Map _placeholderDefinitionMap /*DocPlaceholderNameEx -> DocPlaceholderDescription*/)
            {
                Map placeholderDefinitionMapEx = DocEmailTemplateHandlerBase::placeholderDefinitionMapToDefinitionMapEx(_placeholderDefinitionMap);
                MapEnumerator e = placeholderDefinitionMapEx.getEnumerator();
                while (e.moveNext())
                {
                    DocPlaceholderName placeholderName = e.currentKey();
                    DocPlaceholderDefinition placeholderDef = e.currentValue();
                        
                    // add placeholders used in email body or subject
                    if (DocEmailTemplateManager::findPlaceholder(emailMessage.Mail, placeholderName) || DocEmailTemplateManager::findPlaceholder(emailMessage.Subject, placeholderName))
                    {
                        placeholderTmp.clear();
                        placeholderTmp.PlaceholderName = placeholderName;
                        placeholderTmp.Description = placeholderDef.description();
                        placeholderTmp.Type = placeholderDef.type();
                    
                        //use value from mappings if exists, otherwise use last value from placeholderValues
                        DocPlaceholderNameEx placeholderNameExForMappings = createPlaceholderNameEx(placeholderName, placeholderTmp.Type);
                       
                        if (mappings.exists(placeholderNameExForMappings))
                        {
                            placeholderTmp.Value = mappings.lookup(placeholderNameExForMappings);
                            placeholderTmp.IsReadOnly = true;
                        }
                        else if (placeholderValues.exists(placeholderName))
                        {
                            anytype value = placeholderValues.lookup(placeholderName);

                            if (placeholderTmp.Type == DocPlaceholderType::Image)
                            {
                                [placeholderTmp.Value, placeholderTmp.FileName] = value;
                            }
                            else
                            {
                                placeholderTmp.Value = value;
                            }

                            placeholderTmp.IsReadOnly = false;
                        }

                        placeholderTmp.insert();
                    }
                }
            }
            ;

            // Custom placeholders
            addDefinitionMap(DocEmailTemplateHandlerBase::getCustomPlaceholderDefinitionMap(emailMessage.EmailId, isSystem));

            // Alerts
            if (emailTable.IsUsedForAlert_DC)
            {
                Map alertPlaceholderDefinitionMap = new Map(Types::String, Types::String); // Map(DocPlaceholderNameEx -> DocPlaceholderDescription)
                DocEmailTemplateHelper::fillStandardPlaceholderDefinitionMapForAlerts(alertPlaceholderDefinitionMap);
                addDefinitionMap(alertPlaceholderDefinitionMap);
            }

            // Workflow
            if (emailTable.IsUsedForWF_DC)
            {
                Map wfPlaceholderDefinitionMap = new Map(Types::String, Types::String); // Map(DocPlaceholderNameEx -> DocPlaceholderDescription)
                DocEmailTemplateHelper::fillStandardPlaceholderDefinitionMapForWfCommon(wfPlaceholderDefinitionMap);
                addDefinitionMap(wfPlaceholderDefinitionMap);
            }

            this.cursor().setTmpData(placeholderTmp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();

            if (!this.cursor().RecId)
            {
                this.active();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();

            ValueGroup.visible(DocEmailPlaceholderTmp.RecId != 0);
            ValueText.visible(DocEmailPlaceholderTmp.Type == DocPlaceholderType::Text);
            ValueHtml.visible(DocEmailPlaceholderTmp.Type == DocPlaceholderType::HTML);
            ValueImage.visible(DocEmailPlaceholderTmp.Type == DocPlaceholderType::Image);

            this.allowEdit(!DocEmailPlaceholderTmp.IsReadOnly);
            ValueImageActionPane.visible(this.allowEdit());
            ValueSetByETH.visible(!this.allowEdit());

            if (ValueImage.visible())
            {
                Image.showImage();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SendEmailMethod</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();

            if ((!DocEmailTemplateHelper::isDocentricImprovedEmailTemplatesTurnedOn(emailMessage.EmailId, isSystem)) && (this.selection() == DocSendEmailMethod::DocentricEmailProvider))
            {
                ret = checkFailed("@DocentricAX2:SendTestEmailNotSupported");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailTo</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            // check and fix recipient list
            this.text(DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(this.text()));
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UploadImage</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            FormRun visualForm;
            FileUpload fileUploadControl;

            //str strategyFileFilter = 'ImageFileUploadTemporaryStorageStrategy';
            visualForm = classFactory::formRunClassOnClient(new Args(formstr(SysGetFileFromUser)));
            visualForm.init();
            visualForm.design().caption("@ApplicationPlatform:GetFileImageCaption");
            
            fileUploadControl = visualForm.design().controlName('FileUpload1');

            visualForm.run();
            visualForm.wait();

            FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();

            if (fileUploadResult != null && fileUploadResult.getUploadStatus())
            {
                Bitmap  imageContainer = ImageReference::GetPackedBinaryData(fileUploadResult.getDownloadUrl());
                DocEmailPlaceholderTmp.Value = DocEmailTemplateHelper::createImagePlaceholderValueForMappings(imageContainer);
                DocEmailPlaceholderTmp.FileName = fileUploadResult.getFileName();
                Image.showImage();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveImage</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            DocEmailPlaceholderTmp.Value = '';
            DocEmailPlaceholderTmp.FileName = '';
            Image.showImage();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Image</Name>
				<Type>Image</Type>
				<Methods>
					<Method>
						<Name>showImage</Name>
						<Source><![CDATA[
        void showImage()
        {
            Bitmap imageContainer;
            
            if (DocEmailPlaceholderTmp.Value)
            {
                //imageContainer = BinData::stringToData(DocEmailPlaceholderTmp.Value); //ImageReference::GetPackedBinaryData(DocEmailPlaceholderTmp.Value);
                imageContainer = DocGlobalHelper::convertBytesToContainer(DocGlobalHelper::convertFromBase64String(DocEmailPlaceholderTmp.Value));
            }

            if (imageContainer)
            {
                Image image_ = new Image();
                image_.setData(imageContainer);
                this.image(image_);
            }
            else
            {
                this.image(null);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>toolTip</Name>
						<Source><![CDATA[
        public str toolTip()
        {
            return DocEmailPlaceholderTmp.FileName;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // validation
            if (!(SendEmailMethod.validate() && EmailTo.validate()))
            {
                return;
            }
            
            // clear and fill mappings with entered values
            mappings = new Map(Types::String, Types::String);   // Map(DocPlaceholderNameEx -> DocPlaceholderValue)

            if (DocEmailTemplateHelper::isDocentricImprovedEmailTemplatesTurnedOn(emailMessage.EmailId, isSystem))
            {
                DocEmailPlaceholderTmp placeholderTmp;
                placeholderTmp.setTmpData(DocEmailPlaceholderTmp);

                while select placeholderTmp where !placeholderTmp.IsReadOnly
                {
                    if (placeholderTmp.Type == DocPlaceholderType::Image)
                    {
                        DocPlaceholderNameEx placeholderNameEx = DocEmailTemplateHelper::createImagePlaceholderNameEx(placeholderTmp.PlaceholderName);
                        mappings.insert(placeholderNameEx, placeholderTmp.Value);
                        placeholderValues.insert(placeholderTmp.PlaceholderName, [placeholderTmp.Value, placeholderTmp.FileName]);
                    }
                    else if (placeholderTmp.Type == DocPlaceholderType::HTML)
                    {
                        DocPlaceholderNameEx placeholderNameEx = DocEmailTemplateHelper::createHtmlPlaceholderNameEx(placeholderTmp.PlaceholderName);
                        mappings.insert(placeholderNameEx, placeholderTmp.Value);
                        placeholderValues.insert(placeholderTmp.PlaceholderName, placeholderTmp.Value);
                    }
                    else // Text
                    {
                        mappings.insert(placeholderTmp.PlaceholderName, placeholderTmp.Value);      // for Text placeholders PlaceholderName = PlaceholderNameEx
                        placeholderValues.insert(placeholderTmp.PlaceholderName, placeholderTmp.Value);
                    }
                }
            }

            // save last values
            emailSendMethod = SendEmailMethod.selection();
            emailToAddr = EmailTo.text();

            xSysLastValue::saveLast(element);
            
            try
            {
                // send email
                if (emailSendMethod == DocSendEmailMethod::DocentricEmailProvider)
                {
                    if (isSystem)
                    {
                        DocEmailTemplateManager::sendSysMail(emailMessage.EmailId, emailMessage.LanguageId, emailToAddr, mappings);
                    }
                    else
                    {
                        DocEmailTemplateManager::sendMail(emailMessage.EmailId, emailMessage.LanguageId, emailToAddr, mappings);
                    }

                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:DocEmailProviderSuccessMsg",
                        emailMessage.EmailId, emailToAddr, SysEmailParameters::find().MailerNonInteractive));
                }
                else if (emailSendMethod == DocSendEmailMethod::BuiltinEmailProvider)
                {
                    emailMessage.DocSysEmailMessageMap::sendMail(emailToAddr, mappings, '', '', false, curUserId());
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:BuiltInEmailProviderSuccessMsg",
                        emailMessage.EmailId, emailToAddr, SysEmailParameters::find().MailerNonInteractive));
                }
                else if (emailSendMethod == DocSendEmailMethod::BuiltinEmailProcessing)
                {
                    emailMessage.DocSysEmailMessageMap::sendMail(emailToAddr, mappings, '', '', true, curUserId());
                    MenuFunction menuFunctionSysOutgoingEmailTable = new MenuFunction(menuItemDisplayStr(SysOutgoingEmailTable), MenuItemType::Display);
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:BuiltInEmailProcessingSuccessMsg", emailMessage.EmailId, emailToAddr, menuFunctionSysOutgoingEmailTable.label()));
                }
                else
                {
                    DocGlobalHelper::handleException(funcName(),'Unsupported email send method.');      // throws an exception
                }
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX2:SendTestEmailFailure",
                    emailMessage.EmailId, emailTable.SenderAddr, emailToAddr, emailSendMethod, SysEmailParameters::find().MailerNonInteractive));
            }
            
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocEmailPlaceholderTmp</Name>
			<Table>DocEmailPlaceholderTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsReadOnly</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlaceholderName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Value</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX2:SendTestEmail</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentSection</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabControl">
						<Name>Tab</Name>
						<AlignControl>No</AlignControl>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Tab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>Email</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>TabPage</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SenderGroup</Name>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>SendEmailMethod</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@DocentricAX2:SendEmailUsingHelp</HelpText>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<EnumType>DocSendEmailMethod</EnumType>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>EmailFrom</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048185</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@DocentricAX2:SendTestEmailFrom</HelpText>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>DocEmailFrom</ExtendedDataType>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>EmailToAndSubject</Name>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>EmailTo</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>DocEmailTo</ExtendedDataType>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Subject</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@DocentricAX:EmailSubject</HelpText>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>SysEmailSubject</ExtendedDataType>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Caption>@SYS5845</Caption>
								<FastTabExpanded>Yes</FastTabExpanded>
								<Scrollbars>Auto</Scrollbars>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>Placeholders</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>NestedSimpleListDetails</Pattern>
								<PatternVersion>UX7 1.1</PatternVersion>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PlaceholdersGroup</Name>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PlaceholdersNavigationGroup</Name>
												<ExtendedStyle>listPanel</ExtendedStyle>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>Grid</Name>
														<AllowEdit>No</AllowEdit>
														<Type>Grid</Type>
														<WidthMode>SizeToContent</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>Grid_Description</Name>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Description</DataField>
																<DataSource>DocEmailPlaceholderTmp</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>Grid_placeholderNameAndType</Name>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>placeholderNameAndType</DataMethod>
																<DataSource>DocEmailPlaceholderTmp</DataSource>
															</AxFormControl>
														</Controls>
														<DataGroup>List</DataGroup>
														<DataSource>DocEmailPlaceholderTmp</DataSource>
														<MultiSelect>No</MultiSelect>
														<ShowRowLabels>No</ShowRowLabels>
														<Style>List</Style>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PlaceholdersBody</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>Identification</Name>
														<Type>Group</Type>
														<Visible>No</Visible>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls />
														<ColumnsMode>Fill</ColumnsMode>
														<DataSource>DocEmailPlaceholderTmp</DataSource>
														<FrameType>None</FrameType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ValueGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Pattern>Custom</Pattern>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>ValueText</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Pattern>FillText</Pattern>
																<PatternVersion>UX7 1.0</PatternVersion>
																<Type>Group</Type>
																<WidthMode>SizeToAvailable</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>ValueText_Value</Name>
																		<HeightMode>SizeToAvailable</HeightMode>
																		<Type>String</Type>
																		<WidthMode>SizeToAvailable</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Value</DataField>
																		<DataSource>DocEmailPlaceholderTmp</DataSource>
																	</AxFormControl>
																</Controls>
																<DataGroup>Value</DataGroup>
																<DataSource>DocEmailPlaceholderTmp</DataSource>
																<FrameType>None</FrameType>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>ValueHtml</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HeightMode>SizeToAvailable</HeightMode>
																<Pattern>FillText</Pattern>
																<PatternVersion>UX7 1.0</PatternVersion>
																<Type>Group</Type>
																<WidthMode>SizeToAvailable</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>ValueHtml_Value</Name>
																		<HeightMode>SizeToAvailable</HeightMode>
																		<Type>String</Type>
																		<WidthMode>SizeToAvailable</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Value</DataField>
																		<DataSource>DocEmailPlaceholderTmp</DataSource>
																		<Label>@DocentricAX2:ValueHTML</Label>
																	</AxFormControl>
																</Controls>
																<DataGroup>Value</DataGroup>
																<DataSource>DocEmailPlaceholderTmp</DataSource>
																<FrameType>None</FrameType>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>ValueImage</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HeightMode>SizeToAvailable</HeightMode>
																<Pattern>ImagePreview</Pattern>
																<PatternVersion>1.1</PatternVersion>
																<Type>Group</Type>
																<WidthMode>SizeToAvailable</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormActionPaneControl">
																		<Name>ValueImageActionPane</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>715827882</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>ActionPane</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormButtonGroupControl">
																				<Name>ButtonGroupValueImage</Name>
																				<ElementPosition>1073741823</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Left>0</Left>
																				<Type>ButtonGroup</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonControl">
																						<Name>UploadImage</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>1073741822</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<HeightMode>Auto</HeightMode>
																						<Type>Button</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<WidthMode>Auto</WidthMode>
																						<FormControlExtension
																							i:nil="true" />
																						<ButtonDisplay>TextOnly</ButtonDisplay>
																						<Text>@SYS117211</Text>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonControl">
																						<Name>RemoveImage</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>1610612733</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<HeightMode>Auto</HeightMode>
																						<Type>Button</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<WidthMode>Auto</WidthMode>
																						<FormControlExtension
																							i:nil="true" />
																						<ButtonDisplay>TextOnly</ButtonDisplay>
																						<Text>@SYS26394</Text>
																					</AxFormControl>
																				</Controls>
																				<DataSource>DocEmailPlaceholderTmp</DataSource>
																			</AxFormControl>
																		</Controls>
																		<AlignChild>No</AlignChild>
																		<AlignChildren>No</AlignChildren>
																		<ArrangeMethod>Vertical</ArrangeMethod>
																		<Style>Strip</Style>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>ValueImageGroup</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Group</Type>
																		<WidthMode>SizeToAvailable</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormImageControl">
																				<Name>Image</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1431655764</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<Height>0</Height>
																				<Type>Image</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<Width>0</Width>
																				<WidthMode>SizeToAvailable</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<Label>@ApplicationPlatform:DashboardImage</Label>
																				<ShowLabel>No</ShowLabel>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>ValueImageFieldsGroup</Name>
																				<Pattern>FieldsFieldGroups</Pattern>
																				<PatternVersion>1.1</PatternVersion>
																				<Type>Group</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls />
																				<ColumnsMode>Fill</ColumnsMode>
																			</AxFormControl>
																		</Controls>
																		<Columns>2</Columns>
																	</AxFormControl>
																</Controls>
																<FrameType>None</FrameType>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>Notes</Name>
																<Pattern>FillText</Pattern>
																<PatternVersion>UX7 1.0</PatternVersion>
																<Type>Group</Type>
																<WidthMode>SizeToAvailable</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStaticTextControl">
																		<Name>ValueSetByETH</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<HeightMode>SizeToAvailable</HeightMode>
																		<Type>StaticText</Type>
																		<WidthMode>SizeToAvailable</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																	</AxFormControl>
																</Controls>
																<FrameType>None</FrameType>
															</AxFormControl>
														</Controls>
														<FrameType>None</FrameType>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@DocentricAX2:CustomPlaceholdersUsed</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<Style>FastTabs</Style>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS50570</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS30312</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>