<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocXmlRecordBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A utility class to quickly build an XML fragment by using table buffers and calculated values.
/// </summary>
public class DocXmlRecordBuilder
{
    LanguageId                      languageId;
    DocXmlRecord                    currentRecord;
    DocXmlRecord                    topRecord;
    DocXmlRecordBuildingContext     recordBuildingContext;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAllDisplayMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends all display methods of the underlying table buffer of recordBuilder.currentRecord()
    /// to this record as data fields. This method can be used only if recordBuilder.currentRecord() is
    /// a table buffer based record that has the fields used by display methods already fetched from the database.
    /// </summary>
    /// <returns>
    /// Current record.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addAllDisplayMethods()
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        // Add all display methods.
        return currentRecord.addAllDisplayMethods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends all fields of the underlying table buffer of recordBuilder.currentRecord()
    /// to this record as data fields. This method can be used only if recordBuilder.currentRecord()
    /// is a table buffer based record that has all fields already fetched from the database.
    /// </summary>
    /// <returns>
    /// Current record.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addAllFields()
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        // Add all fields.
        return currentRecord.addAllFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAllFieldsExcept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends all fields of the underlying table buffer of recordBuilder.currentRecord()
    /// to this record as data fields except those listed in the _fieldList parameter.
    /// The table buffer must have all included fields already fetched from the database.
    /// </summary>
    /// <returns>
    /// Current record.
    /// </returns>
    /// <param name="_fieldList">
    /// List of field names to exclude, provided in the form of strings separated by commas
    /// within a container [field1_name, field2_name, ...].
    /// All listed fields will be excluded from the adding record with all fields.
    /// Use the fieldStr() method to provide a field name.
    /// </param>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addAllFieldsExcept(container _fieldList)
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addAllFieldsExcept(_fieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends listed fields of the underlying table buffer of recordBuilder.currentRecord()
    /// The table buffer must have all included fields already fetched from the database.
    /// </summary>
    /// <returns>
    /// Current record.
    /// </returns>
    /// <param name="_fieldList">
    /// List of field names to include, provided in the form of strings separated by commas
    /// within a container [field1_name, field2_name, ...].
    /// Use the fieldStr() method to provide a field name.
    /// </param>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addFields(container _fieldList)
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addFields(_fieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a calculated field based on the provided value to the recordBuilder.currentRecord()
    /// record as a data field. This method can be used nevertheless recordBuilder.currentRecord() is
    /// a table buffer based record or a calculated record.
    /// </summary>
    /// <param name="_calculatedFieldName">
    /// Calculated field name.
    /// </param>
    /// <param name="_value">
    /// Field value. If the field value is of an enum or an edt type, the this.addCalculatedFieldEdt() and
    /// this.addCalculatedFieldEnum() methods should be used instead.
    /// </param>
    /// <param name="_labelIdOrValue">
    /// Label ID or label value of the calculated field.
    /// If ommited, the friendly name of the field will be missing in resulting data source.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended field, if addition succeeded; otherwise null.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlField addCalculatedField(str _calculatedFieldName, anytype _value, str _labelIdOrValue = '')
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addCalculatedField(_calculatedFieldName, _value, _labelIdOrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedFieldEdt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a calculated field based on the provided EDT to the recordBuilder.currentRecord()
    /// record as a data field. This method can be used nevertheless recordBuilder.currentRecord() is
    /// a table buffer based record or a calculated record.
    /// </summary>
    /// <param name="_calculatedFieldName">
    /// Calculated field name.
    /// </param>
    /// <param name="_edtName">
    /// Exended data type name. Use the extendedTypeStr() method to provide it.
    /// </param>
    /// <param name="_value">
    /// Field value.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying EDT is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended field, if addition succeeded; otherwise null.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlField addCalculatedFieldEdt(str _calculatedFieldName, ExtendedDataTypeName _edtName, anytype _value,
                                             str _overridingLabelIdOrValue = '')
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addCalculatedFieldFromEdt(_calculatedFieldName, _edtName, _value, _overridingLabelIdOrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedFieldEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a calculated field based on the provided enum to the recordBuilder.currentRecord()
    /// record as a data field. This method can be used nevertheless recordBuilder.currentRecord() is
    /// a table buffer based record or a calculated record.
    /// </summary>
    /// <param name="_calculatedFieldName">
    /// Calculated field name.
    /// </param>
    /// <param name="_enumName">
    /// Enum name. Use the enumStr() method to provide it.
    /// </param>
    /// <param name="_value">
    /// Field value.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying enum is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended field, if addition succeeded; otherwise null.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlField addCalculatedFieldEnum(str _calculatedFieldName, EnumName _enumName, anytype _value,
                                              str _overridingLabelIdOrValue = '')
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addCalculatedFieldFromEnum(_calculatedFieldName, _enumName, _value, _overridingLabelIdOrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedFieldUserDefEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a calculated field based on a user-defined enum to the recordBuilder.currentRecord()
    /// record as a data field. This method can be used nevertheless recordBuilder.currentRecord()
    /// is a table buffer based record or a calculated record.
    /// </summary>
    /// <param name="_calculatedFieldName">
    /// Calculated field name.
    /// </param>
    /// <param name="_enumValueName">
    /// Name of the selected user-defined enum node.
    /// </param>
    /// <param name="_enumValueLabelIdOrValue">
    /// Label ID (or Label Value, if Label ID is not provided) of the selected user-defined enum node.
    /// </param>
    /// <param name="_fieldLabelIdOrValue">
    /// Field label ID or label value.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended field, if addition succeeded; otherwise null.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlField addCalculatedFieldUserDefEnum(str _calculatedFieldName,
                                                     str _enumValueName, str _enumValueLabelIdOrValue, // selected enum node Name and Label ID or Value
                                                     str _fieldLabelIdOrValue = '')
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addCalculatedFieldFromUserDefEnum(_calculatedFieldName, _enumValueName, _enumValueLabelIdOrValue, _fieldLabelIdOrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedFieldSysLbl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a calculated field based on the provided value to the
    /// recordBuilder.currentRecord() record as a data field, with a label of another field
    /// of the underlying record table buffer.
    /// This method can be used only if recordBuilder.currentRecord() is a table buffer based record.
    /// </summary>
    /// <param name="_calculatedFieldName">
    /// Calculated field name.
    /// </param>
    /// <param name="_value">
    /// Field value.
    /// </param>
    /// <param name="_fieldNameSameTableForLabel">
    /// Field name of a field from the same context table buffer. Label of this field will be
    /// used as a friendly name of the calculated field. Use the fieldStr() method to provide it.
    /// If ommited or the current record is not a table buffer based record, an exception is thrown.
    /// </param>
    /// <returns>
    /// Created and appended field, if addition succeeded; otherwise null.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlField addCalculatedFieldSysLbl(str _calculatedFieldName, anytype _value,
                                                FieldName _fieldNameSameTableForLabel)
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addCalculatedFieldWithSysLbl(_calculatedFieldName, _value, _fieldNameSameTableForLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a calculated record as a child record of the recordBuilder.currentRecord() record.
    /// No fields are appended. Only calculated fields can be appended to a calculated record afterwards.
    /// This method can be used nevertheless recordBuilder.currentRecord() is a table buffer based record
    /// or a calculated record.
    /// WARNING:
    /// If the the name of the adding record is the same as the name of recordBuilder.currentRecord()
    /// the record is added in the same level as recordBuilder.currentRecord(); otherwise,
    /// the record is added as a child of the recordBuilder.currentRecord().
    /// </summary>
    /// <param name="_calculatedRecordName">
    /// Record name.
    /// </param>
    /// <param name="_labelIdOrValue">
    /// Label ID or label value of the calculated record.
    /// If ommited, the friendly name of the record will be missing in resulting data source.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is moved to newly added record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addCalculatedRecord(str _calculatedRecordName, str _labelIdOrValue = '')
    {
        DocXmlRecord   record;
    
    
        // Validate parameters.
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        if (!_calculatedRecordName)
        {
            DocGlobalHelper::handleException(funcName(), 'Method addCalculatedRecord: Parameter _calculatedRecordName is not provided');
        }
    
        // Create record and add it to the parent or current record.
        record = DocXmlRecord::constructCalculatedRecord(_calculatedRecordName, _labelIdOrValue, this.languageId(), this.recordBuildingContext());
    
        if (currentRecord.getRecordName() == record.getRecordName())
        {
            if (currentRecord == topRecord)
            {
                DocGlobalHelper::handleException(funcName(),
                    strFmt('Parent record of the current record (%1) of the record builder does not exist and the new record (%2) cannot be added',
                           currentRecord.getRecordName(), record.getRecordName()));
            }
    
            currentRecord.getParent().appendChildRecordNC(record);
        }
        else
        {
            currentRecord.appendChildRecordNC(record);
        }
    
        // Move pointer to the current record.
        currentRecord = record;
    
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDisplayMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a display or any other instance parameterless method as
    /// a data field of the recordBuilder.currentRecord() record. This data field will be named
    /// as a method name, and with a field value that is equal to the method returning value.
    /// This method can be used only if recordBuilder.currentRecord() is a table buffer based
    /// record that has all fields used by this display method already fetched from the database.
    /// </summary>
    /// <param name="_methodName">
    /// Name of a display or any other instance parameterless method. Use the tableMethodStr() method to provide it.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying method, if defined, is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended field, if addition succeeded; otherwise null.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlField addDisplayMethod(MethodName _methodName, str _overridingLabelIdOrValue = '')
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addDisplayMethod(_methodName, _overridingLabelIdOrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a field of the underlying table buffer to the recordBuilder.currentRecord()
    /// record as a data field. The method can be used only if recordBuilder.currentRecord() is a
    /// table buffer based record that has this particular field already fetched from the database.
    /// </summary>
    /// <param name="_fieldName">
    /// Field name. Use the fieldStr() method to provide it.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying field is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended field, if addition succeeded; otherwise null.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlField addField(FieldName _fieldName, str _overridingLabelIdOrValue = '')
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addField(_fieldName, _overridingLabelIdOrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a field group i.e. all fields and display methods from the provided field group
    /// as data fields of the recordBuilder.currentRecord() record. The method can be used only if
    /// recordBuilder.currentRecord() is a table buffer based record that has all fields
    /// from this particular field group already fetched from the database.
    /// </summary>
    /// <param name="_fieldGroupName">
    /// Field group name. Use the tableFieldgroupStr() method to provide it.
    /// </param>
    /// <returns>
    /// Current record.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addFieldGroup(FieldGroupName _fieldGroupName)
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addFieldGroup(_fieldGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldGroupAsChildRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a field group i.e. all fields and display methods from the provided field
    /// group as a child record of recordBuilder.currentRecord() that is named as the provided field group.
    /// The method can be used only if recordBuilder.currentRecord() is a table buffer based record that
    /// has all fields from this particular field group already fetched from the database.
    /// </summary>
    /// <param name="_fieldGroupName">
    /// Field group name. Use the tableFieldgroupStr() method to provide it.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying field group is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is NOT moved to the newly added record, which has been added as a child record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addFieldGroupAsChildRecord(FieldGroupName _fieldGroupName, str _overridingLabelIdOrValue = '')
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addChildCalculatedRecordFromFieldGroup(_fieldGroupName, _overridingLabelIdOrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a table buffer based record as a child record of recordBuilder.currentRecord().
    /// No fields are appended. Both table buffer based and calculated fields can be appended
    /// to a table buffer based record afterwards.
    /// This method can be used nevertheless recordBuilder.currentRecord() is a table buffer based record
    /// or a calculated record.
    /// WARNING:
    /// If the the name of the adding record is the same as recordBuilder.currentRecord()
    /// the record is added in the same level as recordBuilder.currentRecord(); otherwise,
    /// the record is added as a child of the recordBuilder.currentRecord().
    /// </summary>
    /// <param name="_common">
    /// Table buffer.
    /// NOTE: To keep the created data record (DocXmlRecord) pointing to the same Common record,
    /// use addRecord(tableBuffer.data()) instead of addRecord(tableBuffer).
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying table is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is moved to newly added record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addRecord(Common _common, str _overridingLabelIdOrValue = '')
    {
        DocXmlRecord      record;
        str               labelIdOrValue;
    
    
        // Validate parameters.
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        if (!_common.TableId)
        {
            DocGlobalHelper::handleException(funcName(), 'Method addRecord: Parameter _common is not set');
        }
    
        // Create record and add it to the parent or current record.
        if (_overridingLabelIdOrValue)
        {
            labelIdOrValue = _overridingLabelIdOrValue;
        }
        else
        {
            labelIdOrValue = this.recordBuildingContext().getLabelForTable(_common.TableId);
        }
    
        record = DocXmlRecord::constructRecord(_common, labelIdOrValue, this.languageId(), this.recordBuildingContext());
    
        if (currentRecord.getRecordName() == record.getRecordName())
        {
            if (currentRecord == topRecord)
            {
                if (currentRecord.recId() == record.recId())
                {
                    DocGlobalHelper::handleException(funcName(),
                        strFmt('Method addRecord: The record (%1) with RecId (%2) is already added to the record builder', record.getRecordName(), record.recId()));
                }
    
                DocGlobalHelper::handleException(funcName(),
                    strFmt('Method addRecord: Parent record of the current record (%1, RecId: %2) of the record builder does not exist and the new record (%3, RecId: %4) cannot be added',
                           currentRecord.getRecordName(), currentRecord.recId(), record.getRecordName(), record.recId()));
            }
    
            currentRecord.getParent().appendChildRecordNC(record);
        }
        else
        {
            currentRecord.appendChildRecordNC(record);
        }
    
        // Move pointer to the current record.
        currentRecord = record;
    
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecordWithAllFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a table buffer based record as a child record of recordBuilder.currentRecord().
    /// All belonging fields are created and appended as table buffer based fields.
    /// The table buffer must have all fields fetched from the database.
    /// This method can be used nevertheless recordBuilder.currentRecord() is a table buffer based record
    /// or a calculated record.
    /// WARNING:
    /// If the the name of the adding record is the same as recordBuilder.currentRecord()
    /// the record is added in the same level as recordBuilder.currentRecord(); otherwise,
    /// the record is added as a child of the recordBuilder.currentRecord().
    /// </summary>
    /// <param name="_common">
    /// Table buffer.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying table is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is moved to newly added record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addRecordWithAllFields(Common _common, str _overridingLabelIdOrValue = '')
    {
        // Add record.
        this.addRecord(_common, _overridingLabelIdOrValue);
    
        // Add all field.
        this.addAllFields();
    
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecordWithAllFieldsAndDisplayMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a table buffer based record as a child record of recordBuilder.currentRecord().
    /// All belonging fields and display methos are created and appended as table buffer based fields.
    /// The table buffer must have all fields fetched from the database.
    /// This method can be used nevertheless recordBuilder.currentRecord() is a table buffer based record
    /// or a calculated record.
    /// WARNING:
    /// If the the name of the adding record is the same as recordBuilder.currentRecord()
    /// the record is added in the same level as recordBuilder.currentRecord(); otherwise,
    /// the record is added as a child of the recordBuilder.currentRecord().
    /// </summary>
    /// <param name="_common">
    /// Table buffer.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying table is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is moved to newly added record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addRecordWithAllFieldsAndDisplayMethods(Common _common, str _overridingLabelIdOrValue = '')
    {
        // Add record.
        this.addRecordWithAllFields(_common, _overridingLabelIdOrValue);
    
        // Add all fields and display methods.
        this.addAllDisplayMethods();
    
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecordWithAllFieldsExcept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a table buffer based record as a child record of recordBuilder.currentRecord().
    /// All belonging fields except those listed in the _fieldList parameter are created and appended
    /// as table buffer based fields. The table buffer must have all fields fetched from the database.
    /// This method can be used nevertheless recordBuilder.currentRecord() is a table buffer based record
    /// or a calculated record.
    /// WARNING:
    /// If the the name of the adding record is the same as recordBuilder.currentRecord()
    /// the record is added in the same level as recordBuilder.currentRecord(); otherwise,
    /// the record is added as a child of the recordBuilder.currentRecord().
    /// </summary>
    /// <param name="_common">
    /// Table buffer.
    /// </param>
    /// <param name="_fieldList">
    /// List of field names to exclude, provided in the form of strings separated by commas
    /// within a container [field1_name, field2_name, ...].
    /// All listed fields will be excluded from the adding record with all fields.
    /// Use the fieldStr() method to provide a field name.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying table is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is moved to newly added record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addRecordWithAllFieldsExcept(Common _common, container _fieldList, str _overridingLabelIdOrValue = '')
    {
        // Add record.
        this.addRecord(_common, _overridingLabelIdOrValue);
    
        // Add all fields except listed.
        this.addAllFieldsExcept(_fieldList);
    
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecordWithFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a table buffer based record as a child record of recordBuilder.currentRecord().
    /// All belonging fields listed in the _fieldList parameter are created and appended
    /// as table buffer based fields. The table buffer must have all fields fetched from the database.
    /// This method can be used nevertheless recordBuilder.currentRecord() is a table buffer based record
    /// or a calculated record.
    /// WARNING:
    /// If the the name of the adding record is the same as recordBuilder.currentRecord()
    /// the record is added in the same level as recordBuilder.currentRecord(); otherwise,
    /// the record is added as a child of the recordBuilder.currentRecord().
    /// </summary>
    /// <param name="_common">
    /// Table buffer.
    /// </param>
    /// <param name="_fieldList">
    /// List of field names to include, provided in the form of strings separated by commas
    /// within a container [field1_name, field2_name, ...].
    /// All listed fields will be excluded from the adding record with all fields.
    /// Use the fieldStr() method to provide a field name.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying table is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is moved to newly added record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addRecordWithFields(Common _common, container _fieldList, str _overridingLabelIdOrValue = '')
    {
        // Add record.
        this.addRecord(_common, _overridingLabelIdOrValue);
    
        // Add all the provided fields.
        this.addFields(_fieldList);
    
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecordWithTitleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends a table buffer based record as a child record of recordBuilder.currentRecord().
    /// The belonging title fields are created and appended as table buffer based fields.
    /// The table buffer must have all fields fetched from the database.
    /// This method can be used nevertheless recordBuilder.currentRecord() is a table buffer based record
    /// or a calculated record.
    /// WARNING:
    /// If the the name of the adding record is the same as recordBuilder.currentRecord()
    /// the record is added in the same level as recordBuilder.currentRecord(); otherwise,
    /// the record is added as a child of the recordBuilder.currentRecord().
    /// </summary>
    /// <param name="_common">
    /// Table buffer.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying table is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Created and appended record. Current record pointer of the record builder recordBuilder.currentRecord()
    /// is moved to newly added record.
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addRecordWithTitleFields(Common _common, str _overridingLabelIdOrValue = '')
    {
        // Add record.
        this.addRecord(_common, _overridingLabelIdOrValue);
    
        // Add title fields.
        this.addTitleFields();
    
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSystemFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends system field of the underlying table buffer to the recordBuilder.currentRecord()
    /// record as data fields. The method can be used only if recordBuilder.currentRecord() is a
    /// table buffer based record that has the system fields already fetched from the database.
    /// </summary>
    /// <returns>
    /// Current record.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addSystemFields()
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addSystemFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTitleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and appends title field of the underlying table buffer to the recordBuilder.currentRecord()
    /// record as data fields. The method can be used only if recordBuilder.currentRecord() is a
    /// table buffer based record that has the title fields already fetched from the database.
    /// </summary>
    /// <returns>
    /// Current record.
    /// </returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public DocXmlRecord addTitleFields()
    {
        if (currentRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'In Record Builder the current data record is not set');
        }
    
        return currentRecord.addTitleFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalculatedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs calculated record with the language of the record builder.
    /// Constructed record is not append to the internal record tree of the record builder.
    /// Use methods on the constructed record to add fields and other child records.
    /// </summary>
    /// <param name="_calculatedRecordName">
    /// Name of the calculated record. It will be used as a name of the resulting XML element.
    /// </param>
    /// <param name="_recordLabelIdOrValue">
    /// A label ID or value of the record. This label value will be mapped in the Friendly name
    /// of the data record in the resulting XML data source.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Constructed XmlRecord which will be mapped to an XML element in the resulting XML
    /// named as this record.
    /// </returns>
    public DocXmlRecord createCalculatedRecord(str _calculatedRecordName, str _recordLabelIdOrValue)
    {
        return DocXmlRecord::constructCalculatedRecord(_calculatedRecordName, _recordLabelIdOrValue, this.languageId(), this.recordBuildingContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs record which is table buffer based, with the language of the record builder.
    /// Constructed record is not append to the internal record tree of the record builder.
    /// Use methods on the constructed record to add fields and other child records.
    /// </summary>
    /// <param name="_common">
    /// Table buffer.
    /// </param>
    /// <param name="_overridingLabelIdOrValue">
    /// Overriding label ID or label value. If ommited, a label of the underlying table is used.
    /// WARNING: For providing label ID use the literalStr() method.
    /// </param>
    /// <returns>
    /// Constructed XmlRecord which will be mapped to an XML element in the resulting XML
    /// named as the provided table buffer.
    /// </returns>
    public DocXmlRecord createRecord(Common _common, str _overridingLabelIdOrValue = '')
    {
        return DocXmlRecord::constructRecord(_common, _overridingLabelIdOrValue, this.languageId(), recordBuildingContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current record of the xml record builder.
    /// </summary>
    /// <returns>Current record of the internal record tree of the record builder.</returns>
    public DocXmlRecord currentRecord()
    {
        return currentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToXmlStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Utility method which exports the internal record tree of the record builder
    /// to the XML document converted to a string.
    /// </summary>
    /// <returns>Resulting XML.</returns>
    public str exportToXmlStr()
    {
        XmlDocument   xmlDocument;
        XmlElement    rootXmlElement;
        str           xmlDocumentStr;
    
    
        xmlDocument = xmlDocument::newBlank();
        try
        {
            rootXmlElement = this.serializeToXml(xmlDocument);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred while serializing to XML');
        }
    
        xmlDocument.appendChild(rootXmlElement);
    
        xmlDocumentStr = xmlDocument.toString();
    
        return xmlDocumentStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToXmlMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Utility method which exports the internal record tree of the record builder
    /// to the XML document converted to a memory stream.
    /// </summary>
    /// <returns>Resulting XML in a memory stream.</returns>
    public System.IO.Stream exportToXmlMemoryStream()
    {
        System.IO.MemoryStream xmlStream = new System.IO.MemoryStream();

        // Get the record builder as XML string.
        str dataRecordXmlStr = this.exportToXmlStr();

        System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();

        try
        {
            xmlDoc.LoadXml(dataRecordXmlStr);
            xmlDoc.Save(xmlStream);
        
            xmlStream.Flush();
            xmlStream.Position = 0;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error while saving XML document to a memory stream');
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error while saving XML document to a memory stream');
        }

        return xmlStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToXmlFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Utility method which exports the internal record tree of the record builder
    /// to the XML document saved in a file.
    /// </summary>
    /// <param name="_filename">File name (e.g. 'RecordBuilder.xml') to save the resulting XML document.</param>
    public void exportToXmlFile(str _filename = 'RecordBuilder.xml')
    {
        using (System.IO.MemoryStream xmlMemoryStream = this.exportToXmlMemoryStream())
        {
            DocFileMngHelper::sendFileToUser(xmlMemoryStream, _filename, '', '', '', '', true, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXsdElementForRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an XSD schema for the current record.
    /// </summary>
    /// <param name = "_currentRecordForXsd">Current record</param>
    /// <param name = "_parentXmlDoc">XML document</param>
    /// <returns>An XSD schema as XML element for the current record</returns>
    private XmlElement getXsdElementForRecord(DocXmlRecord _currentRecordForXsd, XmlDocument _parentXmlDoc)
    {
        XmlElement       currentXsdElement, currentXsdComplexType, currentXsdChoice;
        XmlElement       childXsdElement;
        ListEnumerator   childRecordsEnum;
        MapEnumerator    fieldsEnum;
        DocXmlField      currentField;
        DocXmlRecord     childRecord;
    
    
        currentXsdElement = _currentRecordForXsd.createXsdElement(_parentXmlDoc);
        currentXsdComplexType = DocDataSourceProviderHelper::selectXsdElement(_parentXmlDoc, currentXsdElement, 'xs:complexType');
        /* <xs:element name="Person">
            <xs:complexType>
              <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element name="Address">
                   <xs:annotation>
                      <xs:appinfo>
                        <dsp:label dsp:text="Address of the person (label)" />
                      </xs:appinfo>
                    </xs:annotation>
                    <xs:complexType>
                    <xs:attribute name="Street" type="xs:string">
                        <xs:annotation>
                          <xs:appinfo>
                            <dsp:label dsp:text="Street of the address (label)" />
                          </xs:appinfo>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="City" type ="xs:string"></xs:attribute>
                    </xs:complexType>
                </xs:element>
              </xs:choice>
              <xs:attribute name="FirstName" type="xs:string"></xs:attribute>
              <xs:attribute name="LastName" type="xs:string"></xs:attribute>
            </xs:complexType>
           </xs:element> */
    
        if (_currentRecordForXsd.childRecords().elements() > 0)
        {
            currentXsdChoice = DocDataSourceProviderHelper::selectXsdElement(_parentXmlDoc, currentXsdComplexType, 'xs:choice');
    
            // Add all child records as XSD child elements.
            childRecordsEnum = _currentRecordForXsd.childRecords().getEnumerator();
            while (childRecordsEnum.moveNext())
            {
                childRecord = childRecordsEnum.current();
                childXsdElement = this.getXsdElementForRecord(childRecord, _parentXmlDoc);
                currentXsdChoice.appendChild(childXsdElement);
            }
        }
    
        // Add all fields as XSD elements.
        fieldsEnum = _currentRecordForXsd.fields().getEnumerator();
    
        // First add dimension, enum and array edt fields as XML elements.
        while (fieldsEnum.moveNext())
        {
            currentField = fieldsEnum.currentValue();
    
            if (currentField.isDimensionField() || currentField.isEnumField() || currentField.isUserDefEnum() || currentField.isArrayEdtField())
            {
                currentField.serializeToXsdAndAppend(_parentXmlDoc, currentXsdElement);
            }
        }
    
        fieldsEnum.reset();
        // Add the rest of fields as XML attributes.
        while (fieldsEnum.moveNext())
        {
            currentField = fieldsEnum.currentValue();
    
            if (!currentField.isDimensionField() && !currentField.isEnumField() && !currentField.isArrayEdtField() && !currentField.isUserDefEnum())
            {
                currentField.serializeToXsdAndAppend(_parentXmlDoc, currentXsdElement);
            }
        }
    
        return currentXsdElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToFirstChildRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the first child record.
    /// </summary>
    /// <returns>True if succeeded, false if there is no child record.</returns>
    /// <remarks>
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// Methods topRecord() and currentRecord() retrieve top and current record in the record builder.
    /// </remarks>
    public boolean goToFirstChildRecord()
    {
        ListEnumerator enumerator;
    
        if (currentRecord.childRecords().elements() == 0)
        {
            return false;
        }
    
        enumerator = currentRecord.childRecords().getEnumerator();
        enumerator.moveNext();
    
        currentRecord = enumerator.current();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToLastChildRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the last child record.
    /// </summary>
    /// <returns>True if succeeded, false if there is no child record.</returns>
    /// <remarks>
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// Methods topRecord() and currentRecord() retrieve top and current record in the record builder.
    /// </remarks>
    public boolean goToLastChildRecord()
    {
        ListEnumerator enumerator;
    
        if (currentRecord.childRecords().elements() == 0)
        {
            return false;
        }
    
        enumerator = currentRecord.childRecords().getEnumerator();
    
        while (enumerator.moveNext())
        {
            currentRecord = enumerator.current();
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToNextSiblingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the next sibling record.
    /// </summary>
    /// <returns>True if succeeded, false if there is no next sibling record.</returns>
    /// <remarks>
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// Methods topRecord() and currentRecord() retrieve top and current record in the record builder.
    /// </remarks>
    public boolean goToNextSiblingRecord()
    {
        ListEnumerator   enumerator;
        DocXmlRecord     nextSibling, currentSibling;
    
    
        enumerator = currentRecord.getParent().childRecords().getEnumerator();
    
        while (enumerator.moveNext())
        {
            currentSibling = enumerator.current();
            if (currentSibling.isEqual(currentRecord))
            {
                if (enumerator.moveNext())
                {
                    nextSibling = enumerator.current();
                }
                break;
            }
        }
    
        if (nextSibling != null)
        {
            currentRecord = nextSibling;
            return true;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToParentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the parent record.
    /// </summary>
    /// <returns>True if succeeded, false if the current record is the top record.</returns>
    /// <remarks>
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// Methods topRecord() and currentRecord() retrieve top and current record in the record builder.
    /// </remarks>
    public boolean goToParentRecord()
    {
        if (currentRecord == topRecord)
        {
            return false;
        }
    
        currentRecord = currentRecord.getParent();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToPreviousSiblingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the previous sibling record.
    /// </summary>
    /// <returns>True if succeeded, false if there is no previous sibling record.</returns>
    /// <remarks>
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// Methods topRecord() and currentRecord() retrieve top and current record in the record builder.
    /// </remarks>
    public boolean goToPreviousSiblingRecord()
    {
        ListEnumerator   enumerator;
        DocXmlRecord     previousSibling, currentSibling;
    
    
        enumerator = currentRecord.getParent().childRecords().getEnumerator();
    
        while (enumerator.moveNext())
        {
            currentSibling = enumerator.current();
            if (currentSibling.isEqual(currentRecord))
            {
                break;
            }
    
            previousSibling = currentSibling;
        }
    
        if (previousSibling != null)
        {
            currentRecord = previousSibling;
            return true;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToTopRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the top record.
    /// </summary>
    /// <remarks>
    /// Use goToXXX navigation methods in order to change the current record pointer position.
    /// Methods topRecord() and currentRecord() retrieve top and current record in the record builder.
    /// </remarks>
    public void goToTopRecord()
    {
        currentRecord = topRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the language Id.
    /// </summary>
    /// <param name = "_languageId">Language Id</param>
    /// <returns>Language Id</returns>
    public LanguageId languageId(LanguageId _languageId = languageId)
    {
        boolean languageChanged = _languageId != languageId;
    
        languageId = _languageId;
    
        if (languageChanged && this.currentRecord())
        {
            this.currentRecord().setLanguageId(languageId);
        }
    
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeXmlSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an XSD schema for the provided XML document.
    /// </summary>
    /// <param name = "_parentXmlDoc">XML document</param>
    /// <returns>An XSD schema as XML element for The XML document</returns>
    public XmlElement makeXmlSchema(XmlDocument _parentXmlDoc)
    {
        XmlElement    topXsdElement;
        XmlElement    xsdMainElement;
        DocXmlRecord  sampleXmlTopRecord;
    
        sampleXmlTopRecord = topRecord.clone(false);
        sampleXmlTopRecord.merge(topRecord);

        /* NOTE: SingleRecord is introduced in 3.3.9 for Docentric NextGen */
        // Top record is always a single data record.
        sampleXmlTopRecord.setSingleRecord(true);
    
        // Create the main element <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
        xsdMainElement = _parentXmlDoc.createElement2('xs:schema', DocConstantDSP::XmlShemaNamespaceUri);
    
        if (sampleXmlTopRecord.containDimensionFields())
        {
            DocDataSourceProviderHelper::createAndAppendDimensionComplexTypes(_parentXmlDoc, xsdMainElement, sampleXmlTopRecord.getLanguageId(),
                                                                              this.recordBuildingContext());
        }
    
        xsdMainElement.appendChild(DocDataSourceProviderHelper::createEnumXsdElement(_parentXmlDoc, sampleXmlTopRecord.getLanguageId()));
        xsdMainElement.appendChild(DocDataSourceProviderHelper::createUserDefEnumXsdElement(_parentXmlDoc, sampleXmlTopRecord.getLanguageId()));
    
        topXsdElement = this.getXsdElementForRecord(sampleXmlTopRecord, _parentXmlDoc);
    
        xsdMainElement.appendChild(topXsdElement);
    
        return xsdMainElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocXmlRecordBuilder class.
    /// </summary>
    /// <param name = "_topRecord">Top record in the record tree</param>
    /// <param name = "_languageId">Language Id</param>
    /// <param name = "_recordBuildingContext">An instance of the DocXmlRecordBuildingContext class</param>
    protected void new(DocXmlRecord _topRecord, LanguageId _languageId, DocXmlRecordBuildingContext _recordBuildingContext)
    {
        topRecord = _topRecord;
        currentRecord = _topRecord;
        languageId = _languageId;
        recordBuildingContext = _recordBuildingContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordBuildingContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the DocXmlRecordBuildingContext class.
    /// </summary>
    /// <returns>An instance of the DocXmlRecordBuildingContext class</returns>
    public DocXmlRecordBuildingContext recordBuildingContext()
    {
        return recordBuildingContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the provided XML document to XML.
    /// </summary>
    /// <param name = "_parentXmlDoc">XML document to serialize</param>
    /// <returns>Serialized XML document as XML element</returns>
    public XmlElement serializeToXml(XmlDocument _parentXmlDoc)
    {
        XmlElement  topXmlElement;
    
        topXmlElement = topRecord.serializeToXml(_parentXmlDoc);
    
        return topXmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>topRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the top record of the xml record builder.
    /// </summary>
    /// <returns>
    /// Top record of the internal record tree of the record builder.
    /// </returns>
    public DocXmlRecord topRecord()
    {
        return topRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the record builder for quick building of an XML fragment.
    /// </summary>
    /// <param name="_topRecord">Top record in the record tree.</param>
    /// <returns>Constructed record builder.</returns>
    /// <remarks>
    /// DocXmlRecordBuilder is a utility class to quickly build an XML fragment.
    /// It enables adding of records and fields in its internal 'record tree'
    /// which is serialized to XML afterwards. Records from the internal record tree
    /// will be serialized to XML elements and fields to XML attributes.
    /// Adding records and fields can be table buffer based or calculated.
    /// Calculated records and fields serves to reshape data structure and to add calculated values.
    /// </remarks>
    public static DocXmlRecordBuilder construct(DocXmlRecord _topRecord)
    {
        if (_topRecord == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _topRecord is not set');
        }
    
        return new DocXmlRecordBuilder(_topRecord, _topRecord.getLanguageId(), _topRecord.recordBuildingContext());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>