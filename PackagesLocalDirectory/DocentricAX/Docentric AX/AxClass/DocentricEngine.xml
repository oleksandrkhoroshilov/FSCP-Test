<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocentricEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Documents;
using Docentric.AX.Fonts;
using Docentric.AX.Reporting;

class DocentricEngine implements Docentric.AX.Reporting.ILabelProvider
{
    System.String[]         documentGenerationErrors;
    DocRenderingSettings    renderingSettings;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ProvideLabel</Name>
				<Source><![CDATA[
    public System.String ProvideLabel(str labelId)
    {
        System.String labelTranslationString = null;
        str labelTranslationStr = '';

        // Resolve the label as a User-defined or a D365FO Label.
        if (labelId != '')
        {
            if (DocUserDefinedLabelHelper::isUserDefinedLabelId(labelId))
            {
                labelTranslationStr = DocUserDefinedLabelHelper::resolveUserDefinedLabel(labelId, renderingSettings.parmRenderingLanguageId());
            }
            else
            {
                labelTranslationStr = SysLabel::labelId2String(labelId, renderingSettings.parmRenderingLanguageId());
            }
        }

        if (labelTranslationStr != '')
        {
            labelTranslationString = labelTranslationStr;
        }

        return labelTranslationString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingSettings</Name>
				<Source><![CDATA[
    public DocRenderingSettings renderingSettings()
    {
        return renderingSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAndPrintDocumentOnPrem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate and print document in an on-premises environment.
    /// </summary>
    /// <param name = "_executionId">Execution ID</param>
    /// <param name = "_template">Template as byte array</param>
    /// <param name = "_dsXml">Report data source as XML string</param>
    /// <param name = "_printerName">Printer name</param>
    /// <param name = "_pageRange">Page range</param>
    /// <param name = "_numberOfCopies">Number of copies</param>
    /// <param name = "_landscape">Landscape</param>
    /// <param name = "_duplex">Duplex printing</param>
    /// <param name = "_collate">Collate</param>
    public void generateAndPrintDocumentOnPrem(str _executionId, System.Byte[] _template, str _dsXml, str _printerName,
                                               DocPrinterPageRange _pageRange, int _numberOfCopies,
                                               boolean _landscape, DocReportDuplexPrintingSetting _duplex, boolean _collate)
    {
        DocumentGenerationResult documentGenerationResult;

        if (!DocConstantGlobal::isOnPremEnvironment())
        {
            DocGlobalHelper::handleException(funcName(), 'The DocentricEngine.generateAndPrintDocumentOnPrem() method can be used only in an on-premises environment');
        }

        // boolean showDocGenErrorsOnReport = DocParameters::find().ShowDocGenErrorsOnReport;
        PageRange pageRange = null;

        if (!_pageRange.parmPrintAllPages())
        {
            pageRange = new PageRange(_pageRange.parmPrintFromPage(), _pageRange.parmPrintToPage());
        }

        try
        {
            // Update Docentric engine properties such as DefaultEmfImageGenerator, DefaultPrintEngine and DocumentConversionTimeout
            // to the DocentricEngineSetting table field values if they have been changed since the last execution of this method.
            DocentricEngineSetting::updateEnginePropertiesIfConfigurationChanged();
            
            documentGenerationResult = ReportEngineHelper::GenerateAndPrintDocument(_executionId,
                _template, _dsXml, this, _printerName, pageRange, _numberOfCopies, false, _collate);
            
            if (documentGenerationResult == null)
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:DocentricEngineInternalError", DocConstantDiagnostics::ErrDocGenAndPrintOnPrem);
            }

            documentGenerationErrors = documentGenerationResult.Errors;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToPrintInOnPremise", Exception::Error, DocConstantDiagnostics::ErrDocGenAndPrintOnPrem);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToPrintInOnPremise", DocConstantDiagnostics::ErrDocGenAndPrintOnPrem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocumentAsImages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate document as EMF images.
    /// </summary>
    /// <param name = "_executionId">Execution ID</param>
    /// <param name = "_template">Template as byte array</param>
    /// <param name = "_dsXml">Report data source as XML string</param>
    /// <param name = "_pageRange">Page range</param>
    /// <returns>Generated document as a collection of EMF images</returns>
    public System.Collections.IList generateDocumentAsImages(str _executionId, System.Byte[] _template, str _dsXml, DocPrinterPageRange _pageRange)
    {
        System.Collections.IList pages;
        DocumentGenerationResult documentGenerationResult;

        // boolean showDocGenErrorsOnReport = DocParameters::find().ShowDocGenErrorsOnReport;
        PageRange pageRange = null;

        if (!_pageRange.parmPrintAllPages())
        {
            pageRange = new PageRange(_pageRange.parmPrintFromPage(), _pageRange.parmPrintToPage());
        }

        try
        {
            // Update Docentric engine properties such as DefaultEmfImageGenerator, DefaultPrintEngine and DocumentConversionTimeout
            // to the DocentricEngineSetting table field values if they have been changed since the last execution of this method.
            DocentricEngineSetting::updateEnginePropertiesIfConfigurationChanged();
            
            documentGenerationResult = ReportEngineHelper::GenerateDocumentAsEmfImages(_executionId, _template, _dsXml, pageRange, this);
            
            if (documentGenerationResult == null || documentGenerationResult.ResultAsPageImageList == null)
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:DocentricEngineInternalError", DocConstantDiagnostics::ErrDocumentGeneration);
            }

            documentGenerationErrors = documentGenerationResult.Errors;
            pages = documentGenerationResult.ResultAsPageImageList;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateAndPrintDoc", Exception::Error, DocConstantDiagnostics::ErrDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateAndPrintDoc", DocConstantDiagnostics::ErrDocumentGeneration);
        }
        
        return pages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns generated document as byte array.
    /// </summary>
    /// <param name = "_executionId">Execution ID</param>
    /// <param name = "_template">Template as byte array</param>
    /// <param name = "_dsXml">Report data source as XML string</param>
    /// <param name = "_outputFormat">Output file format</param>
    /// <returns>Generated document as a byte array</returns>
    public System.Byte[] generateDocument(str _executionId, System.Byte[] _template, str _dsXml, DocOutputFileFormat _outputFormat)
    {
        System.Byte[]               generatedDocument;
        DocumentGenerationResult    documentGenerationResult;
        DocSaveOptions              saveOptions;

        //boolean showDocGenErrorsOnReport = DocParameters::find().ShowDocGenErrorsOnReport;
        switch (_outputFormat)
        {
            case DocOutputFileFormat::DOCX:
                saveOptions = DocSaveOptions::SaveAsWord();
                break;

            case DocOutputFileFormat::XPS:
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:FileFormatDeprecated", DocOutputFileFormat::XPS, DocOutputFileFormat::PDF));
                break;

            case DocOutputFileFormat::PDF:
                saveOptions = DocSaveOptions::SaveAsPdf();
                break;

            case DocOutputFileFormat::TIFF:
                saveOptions = DocTiffSaveOptions::SaveAsTiff();
                break;

            //case DocOutputFileFormat::MHTML:
            //case DocOutputFileFormat::PDFA:
            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported document output format: %1', _outputFormat));
        }                

        try
        {
            // Set Document Properties.
            saveOptions.set_Title(renderingSettings.parmDocumentTitle());
            saveOptions.set_Author(renderingSettings.parmDocumentAuthor());
            saveOptions.set_Subject(renderingSettings.parmDocumentSubject());
            saveOptions.set_Keywords(renderingSettings.parmDocumentKeywords());
            saveOptions.set_DateCreated(System.DateTime::Now);

            // Modify saveOptions with a configurator if provided (e.g. to change TIFF DPIs)
            if (renderingSettings.parmSaveOptionsConfigurator())
            {
                IDocSaveOptionsConfigurator saveOptionsConfigurator = renderingSettings.parmSaveOptionsConfigurator();
                saveOptions = saveOptionsConfigurator.configureSaveOptions(saveOptions);
            }

            // Update Docentric engine properties such as DefaultEmfImageGenerator, DefaultPrintEngine and DocumentConversionTimeout
            // to the DocentricEngineSetting table field values if they have been changed since the last execution of this method.
            DocentricEngineSetting::updateEnginePropertiesIfConfigurationChanged();

            documentGenerationResult = ReportEngineHelper::GenerateDocument(_executionId, _template, _dsXml, saveOptions, this, renderingSettings.parmCustomDocumentConverter());
            
            if (documentGenerationResult == null || 
                documentGenerationResult.ResultAsGeneratedDocumentByteArray == null ||
                documentGenerationResult.ResultAsGeneratedDocumentByteArray.Length == 0)
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:DocentricEngineInternalError", DocConstantDiagnostics::ErrDocumentGeneration);
            }

            documentGenerationErrors = documentGenerationResult.Errors;
            generatedDocument = documentGenerationResult.ResultAsGeneratedDocumentByteArray;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateDoc", Exception::Error, DocConstantDiagnostics::ErrDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateDoc", DocConstantDiagnostics::ErrDocumentGeneration);
        }

        return generatedDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocument_docGenErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document generation error array.
    /// </summary>
    /// <returns>Document generation error array</returns>
    public System.String[] generateDocument_docGenErrors()
    {
        if (documentGenerationErrors == null)
        {
            documentGenerationErrors = new System.String[0]();
        }
        return documentGenerationErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocument_hasDocGenErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the generated document has document generation errors.
    /// </summary>
    /// <returns>Returns true if the generated document has document generation errors</returns>
    public boolean generateDocument_hasDocGenErrors()
    {
        int docGenErrorCount;

        if (documentGenerationErrors == null)
        {
            return false;
        }
        
        docGenErrorCount = documentGenerationErrors.get_Length();
        return docGenErrorCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(DocRenderingSettings _renderingSettings = null)
    {
        renderingSettings = _renderingSettings;
        if (renderingSettings == null)
        {
            renderingSettings = new DocRenderingSettings();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>