<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocOutputManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Framework.Reports.CloudStorage;
using Microsoft.Dynamics.AX.Framework.Reporting.Shared;
using Microsoft.Dynamics.AX.Framework.DocumentContract;
using System.Diagnostics;
using Docentric.AX.Framework.Utilities;
using Docentric.AX.Documents.Pdf.Properties;

public class DocOutputManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printReportAsEmfImages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given Docentric report as EMF images (pages).
    /// </summary>
    /// <param name="_printReportSettings">
    /// Global parameters for generating a report.
    /// NOTE: The SaveToArchive flag (_printReportSettings.parmSaveToArchive()) likewise
    /// the selected Print Destination (_printReportSettings.parmPrintDestination()) will be ignored.
    /// </param>
    /// <param name="_printerPageRange">Page range settings</param>
    /// <returns>
    /// Generated Docentric report as EMF images.
    /// </returns>
    public static System.Collections.IList printReportAsEmfImages(DocPrintReportSettings _printReportSettings, DocPrinterPageRange _printerPageRange)
    {
        System.IO.MemoryStream                      templateMemoryStream;
        DocentricEngine                             docentricEngine;
        System.String[]                             docGenErrors;
        System.Collections.IList                    pages;
        int                                         numberOfPrintedPages;
        str                                         errorMsg;


        void validateParameters()
        {
            _printReportSettings.setDefaultParmValues();
            if (!_printReportSettings.validate())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintReportSettingsInvalid");
            }

            _printerPageRange.setDefaultParmValues();
            if (!_printerPageRange.validate())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PageRangeSettingsInvalid");
            }
        }
    
   
        void closeTemplateStream()
        {
            if (templateMemoryStream != null)
            {
                templateMemoryStream.Close();
                templateMemoryStream.Dispose();
            }
        }
   

        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }
    
            // Validate parameters and set default values if needed.
            validateParameters();

            // Get the template content.
            try
            {
                templateMemoryStream = DocReportingHelper::getTemplateAsStream(_printReportSettings);
            }
            catch
            {
                DocOutputManagerMessenger::displayFailureMsgRetrieveTemplate(_printReportSettings, funcName(), DocConstantDiagnostics::ErrTemplateRetrieval);
                throw Exception::Error;
            }
    
            // Generate document as image list, each page is one EMF image.
            try
            {
                docentricEngine = new DocentricEngine(DocRenderingSettings::constructFromPrintReportSettings(_printReportSettings, DocFileFormat::EMF));
                pages = docentricEngine.generateDocumentAsImages(_printReportSettings.getCurrentExecutionIdStr(),
                                                                 templateMemoryStream.ToArray(),
                                                                 _printReportSettings.parmXmlDataSourceStr(),
                                                                 _printerPageRange);
                numberOfPrintedPages = 0;
                if (pages != null)
                {
                    numberOfPrintedPages = pages.get_Count();
                }

                if (numberOfPrintedPages == 0)  // or pages == null
                {
                    errorMsg = "@DocentricAX:PrintedReportIsEmpty";
                    DocGlobalHelper::handleException(funcName(), errorMsg);
                }
            }
            catch
            {
                // NOTE: Error message has been already shown in the generateDocumentAsImages() method.
                throw Exception::Error;
            }

            // Close the template memory stream.
            closeTemplateStream();
    
            // Get document generation errors if any occurred.
            docGenErrors = docentricEngine.generateDocument_docGenErrors();
    
            // Check if there is any document generation error.
            DocOutputManagerMessenger::docGenErrorsToExceptionLogIfSetup(_printReportSettings.parmReportId(),
                                                                         _printReportSettings.parmReportCaption(),
                                                                         docGenErrors);
            docentricEngine = null;
        }
        catch
        {
            // Close the template memory stream.
            closeTemplateStream();

            docentricEngine = null;

            // Display error message and throw an error.
            DocOutputManagerMessenger::displayFailureMsgPrintToEmfImages(_printReportSettings, funcName());
            throw Exception::Error;
        }

        return pages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportAsEmfImages_DocSsrs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given Docentric or SSRS report as EMF images (pages).
    /// </summary>
    /// <param name="_printReportSettings">
    /// Global parameters for generating a report.
    /// NOTE: The SaveToArchive flag (_printReportSettings.parmSaveToArchive()) likewise
    /// the selected Print Destination (_printReportSettings.parmPrintDestination()) will be ignored.
    /// </param>
    /// <param name = "_printerPrintDestSettings">
    /// Printer settings.
    /// NOTE: For Cloud environments, only page range properties are considered, 
    /// while all other properties (including the selected printer) are ignored.
    /// </param>
    /// <returns>Generated Docentric or SSRS report as EMF images</returns>
    public static System.Collections.IList printReportAsEmfImages_DocSsrs(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        System.Collections.IList printedEmfPages;
        Stopwatch sw;

        if (!_printReportSettings || !_printerPrintDestSettings)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameters _printReportSettings and/or _printerPrintDestSettings are not set');
        }

        try
        {
            _printerPrintDestSettings.setDefaultParmValues(_printReportSettings.parmReportId(), _printReportSettings.parmReportCaption());
            if (!_printerPrintDestSettings.validate(true, false, false))
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrinterPrintDestInvalid");
            }

            sw = DocDiagnosticsManager::startMeasurement();
            if (_printReportSettings.printSrsOriginalDesign())
            {
                // Use SSRS original design.
                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport_Printer(_printReportSettings, _printerPrintDestSettings);
                printedEmfPages = printedSrsReport.getReportContentImageList();

                // Set the printed report content.
                _printReportSettings.parmPrintedReport(printedSrsReport);
            }
            else
            {
                DocPrinterPageRange printerPageRange = DocPrinterPageRange::create(_printerPrintDestSettings);
                printedEmfPages = DocOutputManager::printReportAsEmfImages(_printReportSettings, printerPageRange);

                // Set the printed report content.
                _printReportSettings.addPrintedReportDocFromImageList(printedEmfPages);
            }
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:FailedPrintReportAsEmfListErrMsg", _printReportSettings.parmReportId()));
        }

        return printedEmfPages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report to byte array.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report to byte array.
    /// NOTE: The SaveToArchive flag (_printReportSettings.parmSaveToArchive()) likewise
    /// the selected Print Destination (_printReportSettings.parmPrintDestination()) will be ignored.
    /// </param>
    /// <param name="_outputFileFormat">
    /// Output file format for the generating report.
    /// </param>
    /// <returns>
    /// The generated report as byte array.
    /// </returns>
    public static System.Byte[] printReportToByteArray(DocPrintReportSettings _printReportSettings,
                                                       DocOutputFileFormat _outputFileFormat)
    {
        System.IO.MemoryStream      templateMemoryStream;
        System.Byte[]               generatedDocument;
        System.String[]             docGenErrors;
        DocentricEngine             docentricEngine;
        boolean                     onlySaveXml;
    
    
        void closeTemplateStream()
        {
            if (templateMemoryStream != null)
            {
                templateMemoryStream.Close();
                templateMemoryStream.Dispose();
            }
        }
    
    
        void validateParameters()
        {
            _printReportSettings.setDefaultParmValues();
    
            if (!onlySaveXml)
            {
                if (!_printReportSettings.validate())
                {
                    DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintReportSettingsInvalid");
                }
            }
            else
            {
                if (!_printReportSettings.validate(true, false))
                {
                    DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintReportSettingsInvalid");
                }
            }
        }
    
    
        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }
    
            onlySaveXml = _outputFileFormat == DocOutputFileFormat::XML;
    
    
            // Validate parameters and set default values if needed.
            validateParameters();
    
            if (onlySaveXml)
            {
                using (System.IO.MemoryStream xmlMemoryStream = DocGlobalHelper::saveXmlToMemoryStream(_printReportSettings.parmXmlDataSourceStr()))
                {
                    generatedDocument = xmlMemoryStream.ToArray();
                }

                // Give a chance to subscribers to tranform the output XML.
                generatedDocument = DocReportRunDelegates::instance().onTranformReportXmlOutput(_printReportSettings, generatedDocument);
            }
            else
            {
                // Get the template content.
                try
                {
                    templateMemoryStream = DocReportingHelper::getTemplateAsStream(_printReportSettings);
                }
                catch
                {
                    DocOutputManagerMessenger::displayFailureMsgRetrieveTemplate(_printReportSettings, funcName(), DocConstantDiagnostics::ErrTemplateRetrieval);
                    throw Exception::Error;
                }
    
                try
                {
                    // Generate document.
                    docentricEngine = new DocentricEngine(
                        DocRenderingSettings::constructFromPrintReportSettings(_printReportSettings, DocFileMngHelper::convertOutputFileFormatToFileFormatEnum(_outputFileFormat)));
                    generatedDocument = docentricEngine.generateDocument(_printReportSettings.getCurrentExecutionIdStr(),
                                                                         templateMemoryStream.ToArray(),
                                                                         _printReportSettings.parmXmlDataSourceStr(),
                                                                         _outputFileFormat);
                }
                catch
                {
                    // NOTE: Error message has been already shown in the generateDocument() method.
                    throw Exception::Error;
                }
    
                // Close streams.
                closeTemplateStream();
    
                // Get document generation errors if any occurred.
                docGenErrors = docentricEngine.generateDocument_docGenErrors();
    
                // Check if there is any document generation error.
                DocOutputManagerMessenger::docGenErrorsToExceptionLogIfSetup(_printReportSettings.parmReportId(),
                                                                             _printReportSettings.parmReportCaption(), docGenErrors);
                docentricEngine = null;
            }
        }
        catch
        {
            // Close streams.
            closeTemplateStream();

            docentricEngine = null;

            DocOutputManagerMessenger::displayFailureMsgPrintToByteArray(_printReportSettings);
            throw Exception::Error;
        }
    
        // Return.
        return generatedDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report to a container.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report to a container.
    /// NOTE: The SaveToArchive flag (_printReportSettings.parmSaveToArchive()) likewise
    /// the selected Print Destination (_printReportSettings.parmPrintDestination()) will be ignored.
    /// </param>
    /// <param name="_outputFileFormat">
    /// Output file format for the generating report.
    /// </param>
    /// <returns>
    /// The generated report in a container.
    /// </returns>
    public static container printReportToContainer(DocPrintReportSettings _printReportSettings,
                                                   DocOutputFileFormat _outputFileFormat)
    {
        System.Byte[] generatedDocument = DocOutputManager::printReportToByteArray(_printReportSettings, _outputFileFormat);
        container generatedDocumentContainer = DocGlobalHelper::convertBytesToContainer(generatedDocument);
        if (generatedDocumentContainer == conNull())
        {
            throw Exception::Error;
        }
        return generatedDocumentContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report to a container.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report to a container.
    /// NOTE: The SaveToArchive flag (_printReportSettings.parmSaveToArchive()) likewise
    /// the selected Print Destination (_printReportSettings.parmPrintDestination()) will be ignored.
    /// </param>
    /// <param name="_outputFileFormat">
    /// Output file format for the generating report.
    /// </param>
    /// <returns>
    /// The generated report as a memory stream.
    /// </returns>
    public static System.IO.MemoryStream printReportToMemoryStream(DocPrintReportSettings _printReportSettings,
                                                                   DocOutputFileFormat _outputFileFormat)
    {
        System.Byte[] generatedDocument = DocOutputManager::printReportToByteArray(_printReportSettings, _outputFileFormat);
        System.IO.MemoryStream generatedDocumentStream = DocGlobalHelper::convertBytesToMemoryStream(generatedDocument);
        if (generatedDocumentStream == null)
        {
            throw Exception::Error;
        }
        return generatedDocumentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report to a memory stream.
    /// </summary>
    /// <param name = "_printReportSettings">Parameters for generating the report.</param>
    /// <param name = "_memoryPrintDestSettings">Parameters for the Memory print destination.</param>
    /// <returns>Returns execution info if the report is successfully saved to Memory</returns>
    public static DocPrintReportToMemoryExecutionInfo printReportToMemory(DocPrintReportSettings _printReportSettings,
                                                                          DocPrintDestSettingsMemory _memoryPrintDestSettings)
    {
        DocPrintReportToArchiveExecutionInfo      saveToArchiveExecutionInfo;
        DocPrintReportToMemoryExecutionInfo       printToMemoryExecutionInfo = new DocPrintReportToMemoryExecutionInfo();
        Stopwatch                                 sw;

        try
        {
            // Raise the event that printing to Memory started.
            if (DocOutputManagerPublisher::publishEvent_printToMemoryBegin(_printReportSettings, _memoryPrintDestSettings, printToMemoryExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToMemoryExecutionInfo;
            }

            // Validate the target print destination.
            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Memory)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:SelectedPrintDestDiffers", _printReportSettings.parmPrintDestination(), DocPrintDestination::Memory));
            }

            // Check the output file format.
            DocReportingHelper::validateOutputFileType_Memory(_printReportSettings, _memoryPrintDestSettings);
            

            // Generate report using Docentric template or use SSRS original design.
            if (_printReportSettings.isPrintedReportProvided())
            {
                // Throw not supported exception.
                DocGlobalHelper::handleException(funcName(), 'The printReportSettings.parmPrintedReport() property cannot be used for the Memory print destination');
            }
            else if (_printReportSettings.printSrsOriginalDesign())
            {
                sw = DocDiagnosticsManager::startMeasurement();

                // Use SSRS original design.
                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport_Memory(_printReportSettings, _memoryPrintDestSettings);
                _printReportSettings.parmPrintedReport(printedSrsReport);

                DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            }
            else
            {
                sw = DocDiagnosticsManager::startMeasurement();

                // Generate report using Docentric template to a container.
                container generatedDocumentContainer = DocOutputManager::printReportToContainer(_printReportSettings, _memoryPrintDestSettings.parmOutputFileFormat());
                _printReportSettings.addPrintedReportDocFromContainer(generatedDocumentContainer, _memoryPrintDestSettings.parmOutputFileFormat());
            
                DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            }

            // Publish the event that the report content is generated.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_generateReportContent(_printReportSettings);

            // Convert the generated report to PDF/A if needed.
            DocReportPdfAManager::convertDocument(_printReportSettings);

            // Sign the generated report if needed.
            DocReportPdfSecurityManager::signDocument(_printReportSettings);

            // Save the result to the printToMemoryExecutionInfo object.
            printToMemoryExecutionInfo.parmReportContent(_printReportSettings.parmPrintedReport().getReportContentContainer());

            // Set the flag that report is generated and delivered.
            printToMemoryExecutionInfo.parmReportDelivered(true);

            // Cancel execution if an event subscriber requested to do so.
            if (cancelExecution)
            {
                return printToMemoryExecutionInfo;
            }
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            DocOutputManagerPublisher::publishEvent_printToMemoryEnd(_printReportSettings, _memoryPrintDestSettings, printToMemoryExecutionInfo.markAsFailedExecution());
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:PrintReportToMemoryFailure", _printReportSettings.parmReportId()));
        }

        // Save to archive.
        if (_printReportSettings.parmSaveToArchive())
        {
            DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::construct(_printReportSettings);
            if (_memoryPrintDestSettings.getResolvedOutputFileType() == DocFileMngHelper::convertToFileExtensionStr(DocConstant::DocentricArchiveFileFormat))
            {
                saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(printArchiveInfo, conNull(), true);
            }
            else
            {
                saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(
                    printArchiveInfo, _printReportSettings.parmPrintedReport().getReportContentContainer(), true, _printReportSettings.getPrintedReportNumberOfPages());
            }
            
            printToMemoryExecutionInfo.parmSaveToArchiveSuccess(saveToArchiveExecutionInfo.parmSaveToArchiveSuccess());
            printToMemoryExecutionInfo.parmArchivePrintJobHeaderRecId(saveToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId());
        }

        // Raise the event that printing to Memory completed.
        DocOutputManagerPublisher::publishEvent_printToMemoryEnd(_printReportSettings, _memoryPrintDestSettings, printToMemoryExecutionInfo);

        return printToMemoryExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report and save it to Print Archive.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report.
    /// </param>
    /// <returns>Returns execution info if the report is successfully saved to Archive</returns>
    public static DocPrintReportToArchiveExecutionInfo printReportToArchive(DocPrintReportSettings _printReportSettings)
    {
        // Save report to Print Archive.
        DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::construct(_printReportSettings);
        DocPrintReportToArchiveExecutionInfo printToArchiveExecutionInfo;

        // Check if the report that is being saved to Print archive is already provided.
        if (_printReportSettings.isPrintedReportProvided())
        {
            try
            {
                // Check the output file format.
                DocReportingHelper::validateOutputFileType_Archive(_printReportSettings);
            }
            catch
            {
                DocOutputManagerMessenger::displayFailureMsgPrintToArchive(_printReportSettings, funcName(), DocConstantDiagnostics::ErrParametersValidation);
                throw Exception::Error;
            }

            // Save the provided report content to Print archive.
            printToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(printArchiveInfo,
                _printReportSettings.parmPrintedReport().getReportContentContainer(), false, _printReportSettings.getPrintedReportNumberOfPages());
        }
        else
        {
            // Generate the report and save it to Print achive.
            printToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(printArchiveInfo, conNull(), false);
        }

        // Set the document generation time.
        _printReportSettings.parmDocGenExecutionTime(printToArchiveExecutionInfo.parmDocGenExecutionTime());

        // If report was previewed and canceled for saving to Print archive, return.
        if (printToArchiveExecutionInfo.parmPreviewBeforePrintPrintingCanceled())
        {
            return printToArchiveExecutionInfo;
        }

        // Set the flag that report is generated and delivered.
        printToArchiveExecutionInfo.parmReportDelivered(true);

        // Show success message; failure message has been displayed within the printReportToArchiveInternal() method.
        if (!_printReportSettings.parmSuppressSuccessMsg())
        {
            DocOutputManagerMessenger::displaySuccessMsgPrintToArchive(_printReportSettings);
        }

        return printToArchiveExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToArchiveInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save report to print archive.
    /// </summary>
    /// <param name = "_printArchiveInfo">Report print archive info.</param>
    /// <param name = "_alreadyGeneratedDocumentContainer">Already generated document in a form of container.</param>
    /// <param name = "_notPrimaryPrintDestination">Whether this method is called when printing to another print destination.</param>
    /// <param name = "_numberOfPrintedPages">Number of printed pages.</param>
    /// <returns>Print to Archive execution info object</returns>
    public static DocPrintReportToArchiveExecutionInfo printReportToArchiveInternal(DocReportPrintArchiveInfo _printArchiveInfo,
                                                                                    container _alreadyGeneratedDocumentContainer = conNull(),
                                                                                    boolean _notPrimaryPrintDestination = true,
                                                                                    int _numberOfPrintedPages = 0)
    {
        RecId                                   printJobHeaderRecId;
        DocPrintReportToArchiveExecutionInfo    printToArchiveExecutionInfo = new DocPrintReportToArchiveExecutionInfo();
        Stopwatch                               sw;
        DocPrintReportSettings                  printReportSettings;


        void stopMeasurement()
        {
            if (sw != null)
            {
                sw.Stop();
        
                int docGenTime = int642int(sw.ElapsedMilliseconds);

                printToArchiveExecutionInfo.parmDocGenExecutionTime(docGenTime);

                sw = null;
            }
        }

        
        void showErrorMsgAndThrow(str _errorCode = '')
        {
            // *** NOTE: This method is called only if Print archive is a primary print destination.

            // Raise the event that printing to Archive hasn't completed successfully.
            DocOutputManagerPublisher::publishEvent_printToArchiveEnd(printReportSettings, printToArchiveExecutionInfo);
            // Display the error message.
            DocOutputManagerMessenger::displayFailureMsgPrintToArchive(printReportSettings, funcName(), _errorCode);
            // Throw the exception.
            throw Exception::Error;
        }


        void validateParameters()
        {
            if (!printReportSettings.parmSaveToArchive() &&
                printReportSettings.parmPrintDestination() != DocPrintDestination::Archive)
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintSettingsSavingToArchiveNotSet");
            }
    
            // Throws an exception if the document type for archiving reports is not valid.
            printReportSettings.checkSaveToArchive();
        }
        

        // Returns true, if the printing is canceled.
        boolean previewBeforePrint()
        {
            /***  Preview report  ***/
            if (printReportSettings.parmPreviewBeforePrint() && !DocGlobalHelper::isNonInteractiveSession())
            {
                try
                {
                    boolean printAfterPreview = DocOutputManager::printReportToScreenPreview(printReportSettings);
                    if (!printAfterPreview)
                    {
                        printToArchiveExecutionInfo = new DocPrintReportToArchiveExecutionInfo();
                        printToArchiveExecutionInfo.parmPreviewBeforePrintPrintingCanceled(true);
                        return true;
                    }
                }
                catch
                {
                    DocOutputManagerMessenger::displayFailureMsgPrintToArchive(printReportSettings, funcName(), DocConstantDiagnostics::ErrPreviewBeforePrint);
                    throw Exception::Error;
                }
            }

            return false;
        }


        // Gets the number of printed pages, if the input parameter _numberOfPrintedPages is not provided.
        int getNumberOfPrintedPages(container _pdfDocumentContainer)
        {
            int numOfPages = _numberOfPrintedPages;
            if (numOfPages == 0)
            {
                try
                {
                    IDocPdfInformation pdfProperties = DocPdfPropertyManager::GetProperties(DocGlobalHelper::convertContainerToMemoryStream(_pdfDocumentContainer));
                    numOfPages = pdfProperties.PageCount;
                }
                catch
                {
                    exceptionTextFallThrough();
                }
            }
            return numOfPages;
        }


        /* -------------------------   Begin of the method  -------------------------  */
        /***  Validate parameters  ***/
        try
        {
            if (!_printArchiveInfo)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printArchiveInfo is not set');
            }

            printReportSettings = _printArchiveInfo.parmPrintReportSettings();
    
            // Raise the event that printing to Archive started.
            if (DocOutputManagerPublisher::publishEvent_printToArchiveBegin(printReportSettings, printToArchiveExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToArchiveExecutionInfo;
            }
        
            // Validate parameters.
            validateParameters();
        }
        catch
        {
            if (_notPrimaryPrintDestination)
            {
                DocOutputManagerPublisher::publishEvent_printToArchiveEnd(printReportSettings, printToArchiveExecutionInfo);
                return printToArchiveExecutionInfo;
            }

            // If this is a primary print destination, then show the error and throw.
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrParametersValidation);
        }


        /***  Generate report and save it to Print Archive  ***/
        try
        {
            // Construct the archive filename and description.
            str archiveFilename = printReportSettings.parmReportCaption();
            if (archiveFilename == '')
            {
                archiveFilename = printReportSettings.parmReportId();
            }
            archiveFilename = archiveFilename + DocConstantFile::FileExtensionDelimiter + DocFileMngHelper::convertToFileExtensionStr(DocConstant::DocentricArchiveFileFormat);
            str archiveDescription = printReportSettings.parmReportCaption();
            if (archiveDescription == '')
            {
                archiveDescription = printReportSettings.parmReportId();
            }
            
            // Raise the event that the archive filename and description are resolved.
            boolean cancelExecution;
            [cancelExecution, archiveFilename, archiveDescription] =
                DocOutputManagerPublisher::publishEvent_printToArchiveChangeArchiveFilenameAndDescription(printReportSettings, archiveFilename, archiveDescription);
            
            // Cancel execution if an event subscriber requested to do so.
            if (cancelExecution)
            {
                return printToArchiveExecutionInfo;
            }

            // Save to Print Archive.
            if (_alreadyGeneratedDocumentContainer == conNull())
            {
                // The archiving PDF document is not provided. This can happen if Print archive is a primary print destination,
                // or when the report is archived via Email, File or Printer print destination with the output format different than PDF,
                // e.g. DOCX, XLSX, or EMF (EMF is used when printing to a network printer without the 'Save to PDF' option turned on).
                
                // Generate a new PDF document and sign it, if configured so for this report and company in Docentric report setup.
                container generatedDocumentContainer;

                sw = DocDiagnosticsManager::startMeasurement();

                if (printReportSettings.printSrsOriginalDesign())
                {
                    // Use SSRS original design.
                    DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport(printReportSettings, true);
                    generatedDocumentContainer = printedSrsReport.getReportContentContainer();
                    
                    // Set the printed report content if this is a primary print destination.
                    if (!_notPrimaryPrintDestination)
                    {
                        printReportSettings.parmPrintedReport(printedSrsReport);
                    }
                }
                else
                {
                    // Generate report using Docentric template to a container.
                    generatedDocumentContainer = DocOutputManager::printReportToContainer(printReportSettings, DocConstant::DocentricArchiveFileFormat);

                    // Set the printed report content if this is a primary print destination.
                    if (!_notPrimaryPrintDestination)
                    {
                        printReportSettings.addPrintedReportDocFromContainer(generatedDocumentContainer, DocConstant::DocentricArchiveFileFormat);
                    }
                }

                if (_notPrimaryPrintDestination)  
                {
                    // If this is not a primary print destination, sign the archiving PDF document if configured so.

                    //-- Convert the document to PDF/A.
                    generatedDocumentContainer = DocGlobalHelper::convertMemoryStreamToContainer(
                        DocPdfAManager::convertDocument(DocGlobalHelper::convertContainerToMemoryStream(generatedDocumentContainer), 
                                                        printReportSettings.parmPdfAConformanceLevel()));

                    //-- Check if the report needs to be signed.
                    if (printReportSettings.applyPdfSignature())
                    {
                        //-- Load the signature appearance settings if needed.
                        if (!printReportSettings.parmPdfSignatureSettings().parmSignatureAppearanceSettings())
                        {
                            printReportSettings.parmPdfSignatureSettings().loadSignatureAppearanceSettings(
                                                                                printReportSettings.parmTemplateId(),
                                                                                printReportSettings.parmCompanyId(),
                                                                                printReportSettings.parmLanguageId());
                        }

                        //-- Sign the document.
                        generatedDocumentContainer = DocGlobalHelper::convertMemoryStreamToContainer(
                            DocPdfSecurityManager::signDocument(DocGlobalHelper::convertContainerToMemoryStream(generatedDocumentContainer), 
                                                                printReportSettings.parmPdfSignatureSettings(), printReportSettings.parmLanguageId()));
                    }

                    stopMeasurement();
                }
                else // This is a primary print destination.
                {
                    // Publish the event that the report content is generated and give a chance to a subscriber to change the content.
                    cancelExecution = DocOutputManagerPublisher::publishEvent_generateReportContent(printReportSettings);

                    // Convert the generated report to PDF/A if configured so.
                    DocReportPdfAManager::convertDocument(printReportSettings);

                    // Sign the generated report if configured so.
                    DocReportPdfSecurityManager::signDocument(printReportSettings);
                    generatedDocumentContainer = printReportSettings.parmPrintedReport().getReportContentContainer();

                    stopMeasurement();

                    if (cancelExecution)
                    {
                        return printToArchiveExecutionInfo;
                    }

                    // Preview before print.
                    cancelExecution = previewBeforePrint();
                    if (cancelExecution)
                    {
                        return printToArchiveExecutionInfo;
                    }
                }

                // Get number of pages of the generated PDF document.
                int numberOfPrintedPages = getNumberOfPrintedPages(generatedDocumentContainer);

                // Save to Print archive.
                printJobHeaderRecId = DocReportingHelper::saveToArchive(generatedDocumentContainer, archiveFilename, archiveDescription, numberOfPrintedPages,
                    !printReportSettings.printSrsOriginalDesign(), true, _printArchiveInfo);
            }
            else // if (_alreadyGeneratedDocumentContainer != conNull())
            {
                // If this is a primary print destination:
                if (!_notPrimaryPrintDestination)
                {
                    // Preview before print.
                    cancelExecution = previewBeforePrint();
                    if (cancelExecution)
                    {
                        return printToArchiveExecutionInfo;
                    }
                }

                // Save to Print archive.
                int numberOfPrintedPages = getNumberOfPrintedPages(_alreadyGeneratedDocumentContainer);
                printJobHeaderRecId = DocReportingHelper::saveToArchive(_alreadyGeneratedDocumentContainer, archiveFilename, archiveDescription, numberOfPrintedPages,
                    !printReportSettings.printSrsOriginalDesign(), true, _printArchiveInfo);
            }

            if (printJobHeaderRecId == 0)
            {
                throw Exception::Error;
            }
        }
        catch
        {
            stopMeasurement();
            
            if (_notPrimaryPrintDestination)
            {
                DocOutputManagerPublisher::publishEvent_printToArchiveEnd(printReportSettings, printToArchiveExecutionInfo);
                return printToArchiveExecutionInfo;
            }

            // If this is a primary print destination, then show the error and throw.
            showErrorMsgAndThrow();
        }
    
        // Fill the printToArchiveExecutionInfo object.
        printToArchiveExecutionInfo.parmSaveToArchiveSuccess(true);
        printToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId(printJobHeaderRecId);

        // Raise the event that printing to Archive completed.
        DocOutputManagerPublisher::publishEvent_printToArchiveEnd(printReportSettings, printToArchiveExecutionInfo);

        return printToArchiveExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report and send it as an email attachment.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report.
    /// </param>
    /// <param name="_emailPrintDestSettings">
    /// Parameters for the Email print destination.
    /// </param>
    /// <param name="_smtpMailClient">
    /// Instance of SMTP mail client to be used. If not provided, it will be instanced during emailing process.
    /// </param>
    /// <returns>Returns execution info if the report is successfully sent to Email</returns>
    public static DocPrintReportToEmailExecutionInfo printReportToEmail(DocPrintReportSettings _printReportSettings,
                                                                        DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                                        DocSmtpMailClient _smtpMailClient = null)
    {
        DocPrintReportToArchiveExecutionInfo      saveToArchiveExecutionInfo;
        DocPrintReportToEmailExecutionInfo        printToEmailExecutionInfo = new DocPrintReportToEmailExecutionInfo();
        boolean                                   cancelExecution;
        Stopwatch                                 sw;
        

        void validateParameters()
        {
            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Email)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:SelectedPrintDestDiffers", _printReportSettings.parmPrintDestination(), DocPrintDestination::Email));
            }
                
            _emailPrintDestSettings.setDefaultParmValues(_printReportSettings.parmReportId(), _printReportSettings.parmReportCaption(), true);
            if (!_emailPrintDestSettings.validate(_printReportSettings.parmReportId(), true, true, true))
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:EmailPrintDestInvalid");
            }

            // Set additional default values for email print destination settings.
            if (!_emailPrintDestSettings.parmEmailSubject())
            {
                _emailPrintDestSettings.parmEmailSubject(_printReportSettings.parmReportCaption());
            }

            // Check the output file format.
            DocReportingHelper::validateOutputFileType_Email(_printReportSettings, _emailPrintDestSettings);
        }
        
        
        boolean printReport()
        {
            // Use already printed document, generate report using Docentric template or use SSRS original design.
            if (_printReportSettings.isPrintedReportProvided())
            {
                // Do nothing.
            }
            else if (_printReportSettings.printSrsOriginalDesign())
            {
                // Use SSRS original design.
                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport_Email(_printReportSettings, _emailPrintDestSettings);

                // Set the printed report content.
                _printReportSettings.parmPrintedReport(printedSrsReport);
            }
            else
            {
                // Generate report using Docentric template to a container.
                container reportContainer = DocOutputManager::printReportToContainer(_printReportSettings, _emailPrintDestSettings.parmEmailAttachmentFileFormat());
                if (reportContainer == conNull())
                {
                    throw Exception::Error;
                }

                // Set the printed report content.
                _printReportSettings.addPrintedReportDocFromContainer(reportContainer, _emailPrintDestSettings.parmEmailAttachmentFileFormat());
            }

            // Publish the event that the report content is generated.
            boolean cancelExecutionPrintReport = DocOutputManagerPublisher::publishEvent_generateReportContent(_printReportSettings);

            // Convert the generated report to PDF/A if needed.
            DocReportPdfAManager::convertDocument(_printReportSettings);

            // Sign the generated report if needed.
            DocReportPdfSecurityManager::signDocument(_printReportSettings);

            return cancelExecutionPrintReport;
        }


        void showErrorMsgAndThrow(str _errorCode = '')
        {
            // Raise the event that printing to Email hasn't completed successfully.
            DocOutputManagerPublisher::publishEvent_printToEmailEnd(_printReportSettings, _emailPrintDestSettings, printToEmailExecutionInfo.markAsFailedExecution());
            // Display the error message.
            DocOutputManagerMessenger::displayFailureMsgPrintReportToEmail(_printReportSettings, _emailPrintDestSettings, funcName(), _errorCode);
            // Throw the exception.
            throw Exception::Error;
        }


        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }
            if (!_emailPrintDestSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _emailPrintDestSettings is not set');
            }

            /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
            /*
                   In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                   is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                   the Docentric AX Free Edition product.
                   You must keep intact all parts of the source code related to the licensing of the full product version.
                   Read more: https://ax.docentric.com/free-edition-license/
                                                                                                                                */
            /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

            if (_emailPrintDestSettings.parmUseEmailTemplate())
            {
                // If the email template is used, check the license. This feature cannot be used with Free Edition!
                // This call will throw an exception if the license is not found or if the license is invalid.
                DocLicenseMng::checkLicense(DocConstant::FeatureEmailTemplates, strFmt("@DocentricAX3:FailedToEmailReportWithEmailTemplate", _emailPrintDestSettings.parmEmailTemplateId()));
            }

            // Raise the event that printing to Email started.
            if (DocOutputManagerPublisher::publishEvent_printToEmailBegin(_printReportSettings, _emailPrintDestSettings, printToEmailExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToEmailExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow();
        }


        /***  Validate parameters ***/
        try
        {
            // Validate parameters and set default values if needed.
            validateParameters();

            // Raise the event that printing to Email is started, after the email print settings are validated.
            if (DocOutputManagerPublisher::publishEvent_printingToEmail(_printReportSettings, _emailPrintDestSettings, printToEmailExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToEmailExecutionInfo;
            }

            // Validate if additional attachments are provided in the right form (throws an exception if they aren't)
            // and store their names to printToEmailExecutionInfo.
            printToEmailExecutionInfo.setAdditionalEmailAttachments(_emailPrintDestSettings);
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrParametersValidation);
        }

        
        /***  Generate report  ***/
        try
        {
            sw = DocDiagnosticsManager::startMeasurement();

            // Generate report using Docentric template or use SSRS original report to use it as email attachment.
            cancelExecution = printReport();

            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);

            // Cancel execution if an event subscriber requested to do so.
            if (cancelExecution)
            {
                return printToEmailExecutionInfo;
            }
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            showErrorMsgAndThrow();
        }


        /***  Preview report  ***/
        if (_printReportSettings.parmPreviewBeforePrint() && !DocGlobalHelper::isNonInteractiveSession())
        {
            try
            {
                boolean printAfterPreview = DocOutputManager::printReportToScreenPreview(_printReportSettings, _emailPrintDestSettings);
                if (!printAfterPreview)
                {
                    printToEmailExecutionInfo.parmPreviewBeforePrintPrintingCanceled(true);
                    return printToEmailExecutionInfo;
                }
            }
            catch
            {
                showErrorMsgAndThrow(DocConstantDiagnostics::ErrPreviewBeforePrint);
            }
        }


        /***  Email the report  ***/
        try
        {
            // Encrypt and sign the generated report if needed.
            // NOTE: If an error occurs during PDF encryption or re-signing, the exception will be thrown with the relevant error code.
            container documentContainer = DocReportPdfSecurityManager::encryptAndSignDocument(_printReportSettings, DocPdfEncryptionConditionEnum::Email, printToEmailExecutionInfo);

            // Email the report.
            boolean mailSent = DocEmailMngHelper::emailReportV2(
                                    _printReportSettings, 
                                    _emailPrintDestSettings, 
                                    documentContainer,
                                    printToEmailExecutionInfo, 
                                    _smtpMailClient);

            // Cancel execution if the mail was not sent due to a subscriber request.
            if (!mailSent)
            {
                return printToEmailExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrMailMessageCreateOrSend);
        }

    
        /***  Save report to Print archive  ***/
        if (_printReportSettings.parmSaveToArchive())
        {
            DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::constructFromPrintToEmailReportExecutionInfo(_printReportSettings, printToEmailExecutionInfo);
            if (_emailPrintDestSettings.getResolvedAttachmentFileType() == DocFileMngHelper::convertToFileExtensionStr(DocConstant::DocentricArchiveFileFormat))
            {
                saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(
                    printArchiveInfo, _printReportSettings.parmPrintedReport().getReportContentContainer(), true, _printReportSettings.getPrintedReportNumberOfPages());
            }
            else
            {
                saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(printArchiveInfo, conNull(), true);
            }

            printToEmailExecutionInfo.parmSaveToArchiveSuccess(saveToArchiveExecutionInfo.parmSaveToArchiveSuccess());
            printToEmailExecutionInfo.parmArchivePrintJobHeaderRecId(saveToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId());
        }


        /***  Final steps  ***/
        // Set the flag that report is generated and delivered.
        printToEmailExecutionInfo.parmReportDelivered(true);

        // Raise the event that printing to Email completed.
        cancelExecution = DocOutputManagerPublisher::publishEvent_printToEmailEnd(_printReportSettings, _emailPrintDestSettings, printToEmailExecutionInfo);
        
        // Cancel execution if an event subscriber requested to do so.
        if (cancelExecution)
        {
            return printToEmailExecutionInfo;
        }

        if (!_printReportSettings.parmSuppressSuccessMsg())
        {
            // Inform about success.
            DocOutputManagerMessenger::displaySuccessMsgPrintReportToEmail(_printReportSettings, _emailPrintDestSettings, printToEmailExecutionInfo);
        }

        return printToEmailExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToPrinterAsPdf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report as PDF and send it via Document routing agent to the given printer in a cloud enviroment.
    /// If DRA is running as a desktop app, Adobe will send it to the printer.
    /// If DRA is running as a service, the report will be saved to the configured local folder.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report.
    /// </param>
    /// <param name="_printerPrintDestSettings">
    /// Parameters for the Printer print destination.
    /// </param>
    /// <returns>Returns execution info if the report is successfully sent to Printer</returns>
    public static DocPrintReportToPrinterExecutionInfo printReportToPrinterAsPdf(DocPrintReportSettings _printReportSettings,
                                                                                 DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        DocPrintReportToArchiveExecutionInfo    saveToArchiveExecutionInfo;
        DocPrintReportToPrinterExecutionInfo    printToPrinterExecutionInfo = new DocPrintReportToPrinterExecutionInfo();
        DocumentRoutingJob                      documentRoutingJob;
        Stopwatch                               sw;
        boolean                                 cancelExecution;


        void validateParameters()
        {
            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Printer)
            {
                DocGlobalHelper::handleException(funcName(),
                    strFmt("@DocentricAX:SelectedPrintDestDiffers", _printReportSettings.parmPrintDestination(), DocPrintDestination::Printer));
            }

            _printerPrintDestSettings.setDefaultParmValues(_printReportSettings.parmReportId(), _printReportSettings.parmReportCaption());
            if (!_printerPrintDestSettings.validate(true, true, true, _printReportSettings.parmReportId(), _printReportSettings))
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrinterPrintDestInvalid");
            }

            // Check the output file format.
            DocReportingHelper::validateOutputFileType_Printer(_printReportSettings, _printerPrintDestSettings);
        }

                        
        boolean printReport()
        {
            sw = DocDiagnosticsManager::startMeasurement();

            // Use already printed document, generate report using Docentric template or use SSRS original design.
            if (_printReportSettings.isPrintedReportProvided())
            {
                // Do nothing.
            }
            else if (_printReportSettings.printSrsOriginalDesign())
            {
                // Generate report using SSRS original design.
                DocPrintDestSettingsMemory memoryPrintDestSettings = new DocPrintDestSettingsMemory();
                memoryPrintDestSettings.parmUseSsrsBuiltInDesign(true);
                memoryPrintDestSettings.parmOutputFileFormatSrs(SRSReportFileFormat::PDF);
                DocPrintReportSettings printReportSettings =
                    DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(_printReportSettings);
                printReportSettings.parmPrintDestination(DocPrintDestination::Memory);

                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport_Memory(printReportSettings, memoryPrintDestSettings);

                // Set the printed report content.
                _printReportSettings.parmPrintedReport(printedSrsReport);
            }
            else
            {
                // Generate report using Docentric template to a memory stream.
                DocPrintDestSettingsMemory memoryPrintDestSettings = new DocPrintDestSettingsMemory();
                memoryPrintDestSettings.parmUseSsrsBuiltInDesign(false);
                memoryPrintDestSettings.parmOutputFileFormat(DocOutputFileFormat::PDF);
                DocPrintReportSettings printReportSettings = 
                    DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(_printReportSettings);
                printReportSettings.parmPrintDestination(DocPrintDestination::Memory);

                using (System.IO.MemoryStream generatedDocumentMemoryStream = DocOutputManager::printReportToMemoryStream(printReportSettings, memoryPrintDestSettings.parmOutputFileFormat()))
                {
                    // Set the printed report content.
                    _printReportSettings.addPrintedReportDocFromMemoryStream(generatedDocumentMemoryStream, memoryPrintDestSettings.parmOutputFileFormat());
                }
            }

            // Publish the event that the report content is generated.
            boolean cancelExecutionPrintReport = DocOutputManagerPublisher::publishEvent_generateReportContent(_printReportSettings);

            // Convert the generated report to PDF/A if needed.
            DocReportPdfAManager::convertDocument(_printReportSettings);

            // Sign the generated report if needed.
            DocReportPdfSecurityManager::signDocument(_printReportSettings);

            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);

            return cancelExecutionPrintReport;
        }


        void showErrorMsgAndThrow(str _errorCode = '')
        {
            // Raise the event that printing to Printer hasn't completed successfully.
            DocOutputManagerPublisher::publishEvent_printToPrinterEnd(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo.markAsFailedExecution());
            // Display the error message.
            DocOutputManagerMessenger::displayFailureMsgPrintReportToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo, funcName(), _errorCode);
            // Throw the exception.
            throw Exception::Error;
        }

        
        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }
            if (!_printerPrintDestSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printerPrintDestSettings is not set');
            }
            if (!_printerPrintDestSettings.parmPrintAsPdf())
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printerPrintDestSettings.parmPrintAsPdf() is not true; invalid method call.');
            }
    
            // Raise the event that printing to Printer is started.
            if (DocOutputManagerPublisher::publishEvent_printToPrinterBegin(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow();
        }


        /***  Resolve printer  ***/
        try
        {
            // Resolve the printer path.
            str resolvedPrinterPath = _printerPrintDestSettings.resolvePrinterPathAndPrinterId();
           
            // Store the resolved output filename to the report execution info.
            printToPrinterExecutionInfo.parmResolvedPrinterPath(resolvedPrinterPath);
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrPrinterPathResolution);
        }


        /***  Validate parameters  ***/
        try
        {
            // Validate parameters and set default values if needed.
            validateParameters();

            // Raise the event that printing to Printer is started, after the printer name is resolved and printer settings are validated.
            if (DocOutputManagerPublisher::publishEvent_printingToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrParametersValidation);
        }


        /***  Generate report  ***/
        try
        {
            // Print report.
            cancelExecution = printReport();

            // Cancel execution if an event subscriber requested to do so.
            if (cancelExecution)
            {
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            showErrorMsgAndThrow();
        }


        /***  Preview report  ***/
        if (_printReportSettings.parmPreviewBeforePrint() && !DocGlobalHelper::isNonInteractiveSession())
        {
            try
            {
                boolean printAfterPreview =  DocOutputManager::printReportToScreenPreview(_printReportSettings, null, _printerPrintDestSettings);
                if (!printAfterPreview)
                {
                    printToPrinterExecutionInfo.parmPreviewBeforePrintPrintingCanceled(true);
                    return printToPrinterExecutionInfo;
                }
            }
            catch
            {
                showErrorMsgAndThrow(DocConstantDiagnostics::ErrPreviewBeforePrint);
            }
        }


        /***  Send to printer  ***/
        try
        {
            // Update the printer print destination settings.
            _printerPrintDestSettings.createPrintJobSettingsXml();
            printToPrinterExecutionInfo.parmPrintJobSettingsXmlStr(_printerPrintDestSettings.getPrintJobSettingsXmlStr());
    
            // Create document contract.
            PdfDocumentContract pdfDocumentContract = DocumentContractFactory::Instance.Create(DocumentContractType::Pdf);
            pdfDocumentContract.Name = _printerPrintDestSettings.parmPrintAsPdfFilename();
            pdfDocumentContract.Contents = _printReportSettings.parmPrintedReport().getReportContentByteArray();
            pdfDocumentContract.Settings = _printerPrintDestSettings.getPrintJobSettingsXmlStr();
            pdfDocumentContract.TargetType = TargetType::Printer;
            pdfDocumentContract.ActivityID = InstrumentationHelper::EnsureActivityIdIsSet();

            // Send the document contract to DRA (Document Routing Agent) and log the created document routing job.
            documentRoutingJob = DocPrinterManager::sendDocumentContractToDocumentRouter(pdfDocumentContract);

            printToPrinterExecutionInfo.parmDocumentRoutingJobId(documentRoutingJob.JobId);
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrSendingToPrinter);
        }
        

        /***  Save report to Print archive  ***/
        if (_printReportSettings.parmSaveToArchive())
        {
            DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::constructFromPrintToPrinterReportExecutionInfo(_printReportSettings, printToPrinterExecutionInfo);

            saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(
                    printArchiveInfo, _printReportSettings.parmPrintedReport().getReportContentContainer(), true, _printReportSettings.getPrintedReportNumberOfPages());

            printToPrinterExecutionInfo.parmSaveToArchiveSuccess(saveToArchiveExecutionInfo.parmSaveToArchiveSuccess());
            printToPrinterExecutionInfo.parmArchivePrintJobHeaderRecId(saveToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId());
        }


        /***  Final steps  ***/
        // Set the flag that report is generated and delivered.
        printToPrinterExecutionInfo.parmReportDelivered(true);

        // Raise the event that printing to Printer completed.
        if (DocOutputManagerPublisher::publishEvent_printToPrinterEnd(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
        {
            // Return if execution is canceled.
            return printToPrinterExecutionInfo;
        }

        // Inform about success.
        if (!_printReportSettings.parmSuppressSuccessMsg())
        {
            DocOutputManagerMessenger::displaySuccessMsgPrintReportToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo);
        }

        return printToPrinterExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report as EMF images and send them via Document routing agent to the given printer in a cloud enviroment.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report.
    /// </param>
    /// <param name="_printerPrintDestSettings">
    /// Parameters for the Printer print destination.
    /// </param>
    /// <returns>Returns execution info if the report is successfully sent to Printer</returns>
    public static DocPrintReportToPrinterExecutionInfo printReportToPrinter(DocPrintReportSettings _printReportSettings,
                                                                            DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        DocPrintReportToArchiveExecutionInfo        saveToArchiveExecutionInfo;
        System.Guid                                 activityId;
        DocPrinterPageRange                         printerPageRange;
        System.Collections.IList                    pages;
        DocPrintReportToPrinterExecutionInfo        printToPrinterExecutionInfo = new DocPrintReportToPrinterExecutionInfo();
        int                                         numberOfPrintedPages;
        str                                         blobContainerName_or_queueName, blobItemName;
        DocumentRoutingJob                          documentRoutingJob;
        Stopwatch                                   sw;        
        boolean                                     cancelExecution;


        void validateParameters()
        {
            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Printer)
            {
                DocGlobalHelper::handleException(funcName(),
                    strFmt("@DocentricAX:SelectedPrintDestDiffers", _printReportSettings.parmPrintDestination(), DocPrintDestination::Printer));
            }
    
            _printerPrintDestSettings.setDefaultParmValues(_printReportSettings.parmReportId(), _printReportSettings.parmReportCaption());
            if (!_printerPrintDestSettings.validate(true, true, true, _printReportSettings.parmReportId(), _printReportSettings))
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrinterPrintDestInvalid");
            }

            // Check the output file format.
            DocReportingHelper::validateOutputFileType_Printer(_printReportSettings, _printerPrintDestSettings);
        }


        void showErrorMsgAndThrow(str _errorCode = '')
        {
            // Raise the event that printing to Printer hasn't completed successfully.
            DocOutputManagerPublisher::publishEvent_printToPrinterEnd(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo.markAsFailedExecution());
            // Display the error message.
            DocOutputManagerMessenger::displayFailureMsgPrintReportToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo, funcName(), _errorCode);
            // Throw the exception.
            throw Exception::Error;
        }
        

        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }
            if (!_printerPrintDestSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printerPrintDestSettings is not set');
            }
    
            // Raise the event that printing to Printer is started.
            if (DocOutputManagerPublisher::publishEvent_printToPrinterBegin(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow();
        }


        /***  Resolve printer  ***/
        try
        {
            // Resolve the printer path.
            str resolvedPrinterPath = _printerPrintDestSettings.resolvePrinterPathAndPrinterId();
           
            // Store the resolved output filename to the report execution info.
            printToPrinterExecutionInfo.parmResolvedPrinterPath(resolvedPrinterPath);
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrPrinterPathResolution);
        }


        /***  Validate parameters  ***/
        try
        {
            // Validate parameters and set default values if needed.
            validateParameters();

            // Raise the event that printing to Printer is started, after the printer name is resolved and printer settings are validated.
            if (DocOutputManagerPublisher::publishEvent_printingToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrParametersValidation);
        }


        /***  Preview report  ***/
        if (_printReportSettings.parmPreviewBeforePrint() && !DocGlobalHelper::isNonInteractiveSession())
        {
            try
            {
                boolean printAfterPreview =  DocOutputManager::printReportToScreenPreview(_printReportSettings, null, _printerPrintDestSettings);
                if (!printAfterPreview)
                {
                    printToPrinterExecutionInfo.parmPreviewBeforePrintPrintingCanceled(true);
                    return printToPrinterExecutionInfo;
                }
            }
            catch
            {
                showErrorMsgAndThrow(DocConstantDiagnostics::ErrPreviewBeforePrint);
            }
        }


        /***  Generate report  ***/
        try
        {
            sw = DocDiagnosticsManager::startMeasurement();

            // Generate report from the Docentric template or use SSRS original design.
            if (_printReportSettings.isPrintedReportProvided())
            {
                // Do nothing.
            }
            else if (_printReportSettings.printSrsOriginalDesign())
            {
                // Use SSRS original design.
                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport_Printer(_printReportSettings, _printerPrintDestSettings);
                pages = printedSrsReport.getReportContentImageList();

                // Set the printed report content.
                _printReportSettings.parmPrintedReport(printedSrsReport);
            }
            else
            {
                printerPageRange = DocPrinterPageRange::create(_printerPrintDestSettings);
                pages = DocOutputManager::printReportAsEmfImages(_printReportSettings, printerPageRange);

                // Set the printed report content.
                _printReportSettings.addPrintedReportDocFromImageList(pages);
            }
            
            cancelExecution = DocOutputManagerPublisher::publishEvent_generateReportContent(_printReportSettings);

            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);

            if (cancelExecution)
            {
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            showErrorMsgAndThrow();
        }


        /***  Send to printer  ***/
        try
        {
            pages = _printReportSettings.parmPrintedReport().getReportContentImageList();
            numberOfPrintedPages = pages.get_Count();
            printToPrinterExecutionInfo.parmNumberOfPrintedPages(numberOfPrintedPages);

            // Update the printer print destination settings.
            _printerPrintDestSettings.createPrintJobSettingsXml();
            printToPrinterExecutionInfo.parmPrintJobSettingsXmlStr(_printerPrintDestSettings.getPrintJobSettingsXmlStr());
            
            // Upload the report to Azure storage.
            try
            {
                // Activity Id is the unique identifier for each print job initiated
                activityId = InstrumentationHelper::EnsureActivityIdIsSet();

                // We upload the rendered report to Azure Blob and create a queue which holds a pointer to the blob.
                // PrintService will poll the queue and as as soon as it gets a print job it will send the print job to the printer.
                                
                /***  Use this code for up to July 2017 Update app version  ***/
                //blobContainerName_or_queueName = CommonUtilities::GenerateQueueName(_printerPrintDestSettings.getPrinterPath(), curExt(), _printerPrintDestSettings.getPrinterId());

                /***  Use this code for 7.3 app version and up  ***/
                blobContainerName_or_queueName = CommonUtilities::GenerateBlobContainerName(_printerPrintDestSettings.getPrinterPath(), curExt(), _printerPrintDestSettings.getPrinterId());

                IDocumentUploader uploader = DocumentUploaderFactory::Create();
                blobItemName = uploader.UploadReport(pages, _printerPrintDestSettings.getPrintJobSettingsXmlStr(),
                                                     _printReportSettings.getReportCaptionOrId(), activityId, blobContainerName_or_QueueName);
                
                if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceDRADocument))
                {
                    // Download the EMF pages and print job settings XML sent to DRA for tracing purposes.
                    DocTrace::traceDRADocument(activityId, pages, _printerPrintDestSettings.getPrintJobSettingsXmlStr());
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:UploadingReportToAzureQueueFailed");
            }
            catch (Exception::Internal)
            {
                DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:UploadingReportToAzureQueueFailed");
            }
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrSendingToPrinter);
        }


        /***  Log the created document routing job  ***/
        try
        {
            // Ensure that document routing history cleanup batch job is up and running.
            DocPrinterManager::ensureDocumentRoutingHistoryCleanupBatchJob();

            documentRoutingJob = DocPrinterManager::createNewDocumentRoutingJobWithConnection(
                                                                    blobItemName,
                                                                    _printerPrintDestSettings.resolvePrinterName(),
                                                                    _printerPrintDestSettings.getPrinterPath(),
                                                                    _printReportSettings.parmReportCaption(),
                                                                    activityId,
                                                                    numberOfPrintedPages,
                                                                    _printerPrintDestSettings.getPrinterId());

            printToPrinterExecutionInfo.parmDocumentRoutingJobId(documentRoutingJob.JobId);
        }
        catch
        {
            DocGlobalHelper::handleWarning(
                strFmt("@DocentricAX:CreationDocumentRoutingJobFailed", _printReportSettings.parmReportId(), _printerPrintDestSettings.getPrinterPath()), true, funcName());
        }
    

        /***  Save report to Print archive  ***/
        if (_printReportSettings.parmSaveToArchive())
        {
            DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::constructFromPrintToPrinterReportExecutionInfo(_printReportSettings, printToPrinterExecutionInfo);
            saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(printArchiveInfo, conNull(), true, numberOfPrintedPages);
            printToPrinterExecutionInfo.parmSaveToArchiveSuccess(saveToArchiveExecutionInfo.parmSaveToArchiveSuccess());
            printToPrinterExecutionInfo.parmArchivePrintJobHeaderRecId(saveToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId());
        }


        /***  Final steps  ***/
        // Set the flag that report is generated and delivered.
        printToPrinterExecutionInfo.parmReportDelivered(true);

        // Raise the event that printing to Printer completed.
        if (DocOutputManagerPublisher::publishEvent_printToPrinterEnd(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
        {
            // Return if execution is canceled.
            return printToPrinterExecutionInfo;
        }

        // Inform about success.
        if (!_printReportSettings.parmSuppressSuccessMsg())
        {
            DocOutputManagerMessenger::displaySuccessMsgPrintReportToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo);
        }

        return printToPrinterExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToPrinterOnPremise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report as EMF images and print them directly to the given printer in an on-premises environment.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report.
    /// </param>
    /// <param name="_printerPrintDestSettings">
    /// Parameters for the Printer print destination.
    /// </param>
    /// <returns>Returns execution info if the report is successfully sent to Printer</returns>
    public static DocPrintReportToPrinterExecutionInfo printReportToPrinterOnPremise(DocPrintReportSettings _printReportSettings,
                                                                                     DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        DocPrintReportToArchiveExecutionInfo        saveToArchiveExecutionInfo;
        DocPrinterPageRange                         printerPageRange;
        System.IO.MemoryStream                      templateMemoryStream;
        DocPrintReportToPrinterExecutionInfo        printToPrinterExecutionInfo = new DocPrintReportToPrinterExecutionInfo();
        DocentricEngine                             docentricEngine;
        System.String[]                             docGenErrors;
        Stopwatch                                   sw;


        void validateParameters()
        {
            if (!DocConstantGlobal::isOnPremEnvironment())
            {
                DocGlobalHelper::handleException(funcName(), 'The DocOutputManager::printReportToPrinterOnPremise() method can be used only in an on-premises environment');
            }

            _printReportSettings.setDefaultParmValues();
            if (!_printReportSettings.validate())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintReportSettingsInvalid");
            }

            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Printer)
            {
                DocGlobalHelper::handleException(funcName(),
                    strFmt("@DocentricAX:SelectedPrintDestDiffers", _printReportSettings.parmPrintDestination(), DocPrintDestination::Printer));
            }
    
            _printerPrintDestSettings.setDefaultParmValues(_printReportSettings.parmReportId(), _printReportSettings.parmReportCaption());
            if (!_printerPrintDestSettings.validate(true, true, true, _printReportSettings.parmReportId(), _printReportSettings))
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrinterPrintDestInvalid");
            }
        }
        
            
        void closeTemplateStream()
        {
            if (templateMemoryStream != null)
            {
                templateMemoryStream.Close();
                templateMemoryStream.Dispose();
            }
        }


        void showErrorMsgAndThrow(str _errorCode = '')
        {
            // Raise the event that printing to Printer hasn't completed successfully.
            DocOutputManagerPublisher::publishEvent_printToPrinterEnd(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo.markAsFailedExecution());
            // Display the error message.
            DocOutputManagerMessenger::displayFailureMsgPrintReportToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo, funcName(), _errorCode);
            // Throw the exception.
            throw Exception::Error;
        }


        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }
            if (!_printerPrintDestSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printerPrintDestSettings is not set');
            }
    
            // Raise the event that printing to Printer is started.
            if (DocOutputManagerPublisher::publishEvent_printToPrinterBegin(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow();
        }


        /***  Resolve printer  ***/
        try
        {
            // Resolve the printer path.
            str resolvedPrinterPath = _printerPrintDestSettings.resolvePrinterPathAndPrinterId();
           
            // Store the resolved output filename to the report execution info.
            printToPrinterExecutionInfo.parmResolvedPrinterPath(resolvedPrinterPath);
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrPrinterPathResolution);
        }


        /***  Validate parameters  ***/
        try
        {
            // Validate parameters and set default values if needed.
            validateParameters();

            // Raise the event that printing to Printer is started, after the printer name is resolved and printer settings are validated.
            if (DocOutputManagerPublisher::publishEvent_printingToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToPrinterExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrParametersValidation);
        }      


        /***  Preview report  ***/
        if (_printReportSettings.parmPreviewBeforePrint() && !DocGlobalHelper::isNonInteractiveSession())
        {
            try
            {
                boolean printAfterPreview =  DocOutputManager::printReportToScreenPreview(_printReportSettings, null, _printerPrintDestSettings);
                if (!printAfterPreview)
                {
                    printToPrinterExecutionInfo.parmPreviewBeforePrintPrintingCanceled(true);
                    return printToPrinterExecutionInfo;
                }
            }
            catch
            {
                showErrorMsgAndThrow(DocConstantDiagnostics::ErrPreviewBeforePrint);
            }
        }


        /***  Generate and print report  ***/
        try
        {
            sw = DocDiagnosticsManager::startMeasurement();

            // Generate report from the Docentric template or use SSRS original design.
            if (_printReportSettings.isPrintedReportProvided())
            {
                // Throw not supported exception.
                DocGlobalHelper::handleException(funcName(), 'The printReportSettings.parmPrintedReport() property cannot be used with the Printer print destination');
            }
            else if (_printReportSettings.printSrsOriginalDesign())
            {
                // Use SSRS original design.
                DocSrsEngine::printSrsReport_PrinterOnPrem(_printReportSettings, _printerPrintDestSettings);
            }
            else
            {
                // Get the Docentric template.
                try
                {
                    templateMemoryStream = DocReportingHelper::getTemplateAsStream(_printReportSettings);
                }
                catch
                {
                    DocOutputManagerMessenger::displayFailureMsgRetrieveTemplate(_printReportSettings, funcName(), DocConstantDiagnostics::ErrTemplateRetrieval);
                    throw Exception::Error;
                }

                // Generate and print the report.
                printerPageRange = DocPrinterPageRange::create(_printerPrintDestSettings);
                try
                {
                    docentricEngine = new DocentricEngine(DocRenderingSettings::constructFromPrintReportSettings(_printReportSettings, DocFileFormat::Unknown));
                    docentricEngine.generateAndPrintDocumentOnPrem(_printReportSettings.getCurrentExecutionIdStr(),
                                                                   templateMemoryStream.ToArray(),
                                                                   _printReportSettings.parmXmlDataSourceStr(),
                                                                   _printerPrintDestSettings.getPrinterPath(),
                                                                   printerPageRange,
                                                                   _printerPrintDestSettings.parmNumberOfCopies(), 
                                                                   _printerPrintDestSettings.parmOrientation() == DocReportPrintOrientation::Landscape,
                                                                   _printerPrintDestSettings.parmDuplexPrinting() == DocReportDuplexPrintingSetting::FlipOnLongEdge,
                                                                   _printerPrintDestSettings.parmCollated());
                }
                catch
                {
                    // Close the template memory stream.
                    closeTemplateStream();
                    docentricEngine = null;

                    // NOTE: Error message has been already shown in the generateAndPrintDocument() method.
                    throw Exception::Error;
                }

                // Close the template memory stream.
                closeTemplateStream();
    
                // Get document generation errors if any occurred.
                docGenErrors = docentricEngine.generateDocument_docGenErrors();
    
                // Check if there is any document generation error.
                DocOutputManagerMessenger::docGenErrorsToExceptionLogIfSetup(_printReportSettings.parmReportId(),
                                                                             _printReportSettings.parmReportCaption(),
                                                                             docGenErrors);
                docentricEngine = null;
            }
            
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            showErrorMsgAndThrow();
        }
        

        /***  Save report to Print archive  ***/
        if (_printReportSettings.parmSaveToArchive())
        {
            DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::constructFromPrintToPrinterReportExecutionInfo(_printReportSettings, printToPrinterExecutionInfo);
            saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(printArchiveInfo, conNull(), true, _printReportSettings.getPrintedReportNumberOfPages());
            printToPrinterExecutionInfo.parmSaveToArchiveSuccess(saveToArchiveExecutionInfo.parmSaveToArchiveSuccess());
            printToPrinterExecutionInfo.parmArchivePrintJobHeaderRecId(saveToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId());
        }


        /***  Final steps  ***/
        // Set the flag that report is generated and delivered.
        printToPrinterExecutionInfo.parmReportDelivered(true);

        // Raise the event that printing to Printer completed.
        if (DocOutputManagerPublisher::publishEvent_printToPrinterEnd(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo))
        {
            // Return if execution is canceled.
            return printToPrinterExecutionInfo;
        }

        // Inform about success.
        if (!_printReportSettings.parmSuppressSuccessMsg())
        {
            DocOutputManagerMessenger::displaySuccessMsgPrintReportToPrinter(_printReportSettings, _printerPrintDestSettings, printToPrinterExecutionInfo);
        }

        return printToPrinterExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToScreen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report and send it to Screen, i.e. preview the given report.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Parameters for generating the report.
    /// </param>
    /// <returns>Returns execution info if the report is successfully sent to Screen</returns>
    public static DocPrintReportToScreenExecutionInfo printReportToScreen(DocPrintReportSettings _printReportSettings)
    {
        DocPrintReportToArchiveExecutionInfo        saveToArchiveExecutionInfo;
        System.IO.MemoryStream                      templateMemoryStream;
        DocentricEngine                             docentricEngine;
        System.String[]                             docGenErrors;
        DocPrintReportToScreenExecutionInfo         printToScreenExecutionInfo = new DocPrintReportToScreenExecutionInfo();
        boolean                                     cancelExecution;
        Stopwatch                                   sw;


        void validateParameters()
        {
            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Screen)
            {
                DocGlobalHelper::handleException(funcName(),
                    strFmt("@DocentricAX:SelectedPrintDestDiffers", _printReportSettings.parmPrintDestination(), DocPrintDestination::Screen));
            }
    
            _printReportSettings.setDefaultParmValues();
            if (!_printReportSettings.validate())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintReportSettingsInvalid");
            }

            // Check the output file format.
            DocReportingHelper::validateOutputFileType_Screen(_printReportSettings);
        }
    

        void closeTemplateStream()
        {
            if (templateMemoryStream != null)
            {
                templateMemoryStream.Close();
                templateMemoryStream.Dispose();
            }
        }


        void generateDocument()
        {
            // Get the template content.
            try
            {
                templateMemoryStream = DocReportingHelper::getTemplateAsStream(_printReportSettings);
            }
            catch
            {
                DocOutputManagerMessenger::displayFailureMsgRetrieveTemplate(_printReportSettings, funcName(), DocConstantDiagnostics::ErrTemplateRetrieval);
                throw Exception::Error;
            }
    
            // Generate document as PDF document.
            try
            {
                docentricEngine = new DocentricEngine(DocRenderingSettings::constructFromPrintReportSettings(_printReportSettings, DocFileFormat::PDF));
                System.Byte[] generatedDocumentByteArray = docentricEngine.generateDocument(
                    _printReportSettings.getCurrentExecutionIdStr(), templateMemoryStream.ToArray(),
                    _printReportSettings.parmXmlDataSourceStr(), DocOutputFileFormat::PDF);
                
                // Set the printed report content.
                _printReportSettings.addPrintedReportDocFromByteArray(generatedDocumentByteArray, DocOutputFileFormat::PDF);
            }
            catch
            {
                // NOTE: Error message has been already shown in the generateDocument() method.
                throw Exception::Error;
            }

            // Close the template memory stream.
            closeTemplateStream();
    
            // Get document generation errors if any occurred.
            docGenErrors = docentricEngine.generateDocument_docGenErrors();
    
            // Check if there is any document generation error.
            DocOutputManagerMessenger::docGenErrorsToExceptionLogIfSetup(_printReportSettings.parmReportId(),
                                                                         _printReportSettings.parmReportCaption(),
                                                                         docGenErrors);
            docentricEngine = null;
        }

    
        void useSsrsAsGeneratedDocument()
        {
            // Generated SSRS report as a PDF document.
            try
            {
                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport(_printReportSettings);

                // Set the printed report content.
                _printReportSettings.parmPrintedReport(printedSrsReport);
            }
            catch
            {
                // NOTE: Error message has been already shown in the printSrsReport() method.
                throw Exception::Error;
            }
        }

        
        void showErrorMsgAndCleanUp(str _errorCode = '')
        {
            // Raise the event that printing to Printer hasn't completed successfully.
            DocOutputManagerPublisher::publishEvent_printToScreenEnd(_printReportSettings, printToScreenExecutionInfo.markAsFailedExecution());

            // Display the error message.
            DocOutputManagerMessenger::displayFailureMsgPrintToScreen(_printReportSettings, funcName(), _errorCode);

            // Close the template memory stream.
            closeTemplateStream();

            docentricEngine = null;
    
            // Throw the exception.
            throw Exception::Error;
        }

            
        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }

            // Raise the event that printing to Screen started.
            if (DocOutputManagerPublisher::publishEvent_printToScreenBegin(_printReportSettings, printToScreenExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToScreenExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndCleanUp();
        }
    

        /***  Validate parameters  ***/
        try
        {
            // Validate parameters and set default values if needed.
            validateParameters();
        }
        catch
        {
            showErrorMsgAndCleanUp(DocConstantDiagnostics::ErrParametersValidation);
        }


        /***  Generate report  ***/
        try
        {
            sw = DocDiagnosticsManager::startMeasurement();

            // Use already printed document, generate report using Docentric template or use SSRS original report.
            if (_printReportSettings.isPrintedReportProvided())
            {
                // Do nothing.
            }
            else if (_printReportSettings.printSrsOriginalDesign())
            {
                // Use SSRS original report.
                useSsrsAsGeneratedDocument();
            }
            else
            {
                // Generate document using Docentric template.
                generateDocument();
            }

            // Publish the event that report content is generated.
            cancelExecution = DocOutputManagerPublisher::publishEvent_generateReportContent(_printReportSettings);

            // Convert the generated report to PDF/A if needed.
            DocReportPdfAManager::convertDocument(_printReportSettings);

            // Sign the generated report if needed.
            DocReportPdfSecurityManager::signDocument(_printReportSettings);

            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);

            // Cancel execution if an event subscriber requested to do so.
            if (cancelExecution)
            {
                return printToScreenExecutionInfo;
            }
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            showErrorMsgAndCleanUp();
        }


        /***  Open report in Docentric Viewer  ***/
        try
        {
            FormRun formRun;
            Args args = new Args();
            //args.caller(new DocOutputManager());
            args.name(formStr(DocentricReportViewer));

            // NOTE: For large reports, an error will occurr in AOS kernel. As a workaround, we will use the parmObject() method only.
            // args.parm(outputFileContentBase64String);
            
            DocPrintReportSettings viewerPrintReportSettings = DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(_printReportSettings);
            viewerPrintReportSettings.parmPrintedReport(_printReportSettings.parmPrintedReport());
            DocReportViewerParams reportViewerParams = new DocReportViewerParams();
            str outputFileContentBase64String = DocGlobalHelper::convertToBase64String(_printReportSettings.parmPrintedReport().getReportContentByteArray());
            reportViewerParams.parmOutputFileContentBase64String(outputFileContentBase64String);
            reportViewerParams.parmPrintReportSettings(viewerPrintReportSettings);
            reportViewerParams.parmIsPreviewMode(false);
            
            args.parmObject(reportViewerParams);
            
            formRun = ClassFactory.formRunClass(args);
            formRun.init();
            formRun.run();
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX:FailedToOpenReportInViewer");
            showErrorMsgAndCleanUp(DocConstantDiagnostics::ErrOpenInViewer);
        }
    

        /***  Save report to Print archive  ***/
        boolean saveToArchiveSuccess = false;
        if (_printReportSettings.parmSaveToArchive())
        {
            DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::construct(_printReportSettings);

            saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(
                printArchiveInfo, _printReportSettings.parmPrintedReport().getReportContentContainer(), true, _printReportSettings.getPrintedReportNumberOfPages());

            saveToArchiveSuccess = saveToArchiveExecutionInfo.parmSaveToArchiveSuccess();
            
            // Fill the printToScreenExecutionInfo object with the info about successfuly printed to Screen report.
            printToScreenExecutionInfo.parmSaveToArchiveSuccess(saveToArchiveSuccess);
            printToScreenExecutionInfo.parmArchivePrintJobHeaderRecId(saveToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId());
        }

        // Inform about success/failure for saving to Print archive.
        if (_printReportSettings.parmSaveToArchive() && !_printReportSettings.parmSuppressSuccessMsg())
        {
            if (saveToArchiveSuccess)
            {
                DocOutputManagerMessenger::displaySuccessMsgPrintToArchive(_printReportSettings);
            }
            else
            {
                DocOutputManagerMessenger::displayFailureMsgPrintToArchive(_printReportSettings, funcName());
            }
        }
        

        /***  Final steps  ***/
        // Set the flag that report is generated and delivered.
        printToScreenExecutionInfo.parmReportDelivered(true);

        // Raise the event that printing to Screen completed.
        DocOutputManagerPublisher::publishEvent_printToScreenEnd(_printReportSettings, printToScreenExecutionInfo);

        return printToScreenExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToScreenPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report and open it in Docentric viewer for the purpose of previewing.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <returns>Returns true if printing of the previewed report should be continued to the target print destination</returns>
    private static boolean printReportToScreenPreview(DocPrintReportSettings _printReportSettings,
                                                      DocPrintDestSettingsEmail _emailPrintDestSettings = null,
                                                      DocPrintDestSettingsPrinter _printerPrintDestSettings = null,
                                                      DocPrintDestSettingsFile _filePrintDestSettings = null)
    {
        System.IO.MemoryStream                      templateMemoryStream;
        DocentricEngine                             docentricEngine;
        System.String[]                             docGenErrors;
        str                                         outputFileContentBase64String;
        System.Byte[]                               generatedDocumentByteArray;
        boolean                                     printAfterPreview;


        void validateParameters()
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }

            if (!_printReportSettings.parmPreviewBeforePrint())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX2:PreviewBeforePrintFlagNotSetError");
            }

            if (DocGlobalHelper::isNonInteractiveSession())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX2:PreviewBeforePrintRunningInBatchError");
            }
            
            _printReportSettings.setDefaultParmValues();
            if (!_printReportSettings.validate())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintReportSettingsInvalid");
            }
        }


        void closeTemplateStream()
        {
            if (templateMemoryStream != null)
            {
                templateMemoryStream.Close();
                templateMemoryStream.Dispose();
            }
        }


        void generateDocument()
        {
            // Get the template content.
            try
            {
                templateMemoryStream = DocReportingHelper::getTemplateAsStream(_printReportSettings);
            }
            catch
            {
                DocOutputManagerMessenger::displayFailureMsgRetrieveTemplate(_printReportSettings, funcName(), DocConstantDiagnostics::ErrTemplateRetrieval);
                throw Exception::Error;
            }
    
            // Generate document as PDF file and convert it to the Base64 string.
            try
            {
                docentricEngine = new DocentricEngine(DocRenderingSettings::constructFromPrintReportSettings(_printReportSettings, DocFileFormat::PDF));
                generatedDocumentByteArray = docentricEngine.generateDocument(
                    _printReportSettings.getCurrentExecutionIdStr(), templateMemoryStream.ToArray(),
                    _printReportSettings.parmXmlDataSourceStr(), DocOutputFileFormat::PDF);
                outputFileContentBase64String = DocGlobalHelper::convertToBase64String(generatedDocumentByteArray);
            }
            catch
            {
                // NOTE: Error message has been already shown in the generateDocument() method.
                throw Exception::Error;
            }

            // Close the template memory stream.
            closeTemplateStream();
    
            // Get document generation errors if any occurred.
            docGenErrors = docentricEngine.generateDocument_docGenErrors();
    
            // Check if there is any document generation error.
            DocOutputManagerMessenger::docGenErrorsToExceptionLogIfSetup(_printReportSettings.parmReportId(),
                                                                         _printReportSettings.parmReportCaption(),
                                                                         docGenErrors);
            docentricEngine = null;
        }

    
        void useSsrsAsGeneratedDocument()
        {
            // Generated SSRS report as a PDF file and convert it to the Code64 string.
            try
            {
                DocPrintReportSettings printReportSettingsForSsrsGen = DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(_printReportSettings);
                printReportSettingsForSsrsGen.parmPreviewBeforePrint(false);
                printReportSettingsForSsrsGen.parmPrintDestination(DocPrintDestination::Screen);
                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport(printReportSettingsForSsrsGen);
                outputFileContentBase64String = DocGlobalHelper::convertToBase64String(printedSrsReport.getReportContentMemoryStream().ToArray());
            }
            catch
            {
                // NOTE: Error message has been already shown in the printSrsReport() method.
                throw Exception::Error;
            }
        }


        boolean usePrintedPdfReport()
        {
            if (_printReportSettings.isPrintedReportProvidedAsPdf())
            {
                outputFileContentBase64String = DocGlobalHelper::convertToBase64String(
                    _printReportSettings.parmPrintedReport().getReportContentMemoryStream().ToArray());
                return true;
            }

            return false;
        }


        void showErrorMsgAndCleanUp(str _errorCode = '')
        {
            DocOutputManagerMessenger::displayFailureMsgPrintToScreen(_printReportSettings, funcName(), _errorCode, true);

            // Close the template memory stream.
            closeTemplateStream();

            docentricEngine = null;
    
            // Throw error.
            throw Exception::Error;
        }
        
        
        /* -------------------------   Begin of the method  -------------------------  */
        /***  Validate parameters  ***/
        try
        {
            // Validate parameters and set default values if needed.
            validateParameters();
        }
        catch
        {
            showErrorMsgAndCleanUp(DocConstantDiagnostics::ErrParametersValidation);
        }
        
        
        /***  Generate report  ***/
        try
        {
            // Check if the report is already printed and if we can use it.
            // (we can if it is in PDF format).
            if (!usePrintedPdfReport())
            {
                // Generate report using Docentric template or use SSRS original report.
                if (_printReportSettings.printSrsOriginalDesign())
                {
                    // Use SSRS original report.
                    useSsrsAsGeneratedDocument();
                }
                else
                {
                    // Generate document using Docentric template.
                    generateDocument();
                }
            }
        }
        catch
        {
            showErrorMsgAndCleanUp();
        }


        /***  Open report in Docentric Viewer  ***/
        try
        {
            FormRun formRun;
            Args args = new Args();
            args.name(formStr(DocentricReportViewer));

            // NOTE: For large reports, an error will occurr in AOS kernel. As a workaround, we will use the parmObject() method only.
            // args.parm(outputFileContentBase64String);
            
            DocPrintReportSettings viewerPrintReportSettings = DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(_printReportSettings);
            viewerPrintReportSettings.parmPrintedReport(_printReportSettings.parmPrintedReport());
            DocReportViewerParams reportViewerParams = new DocReportViewerParams();
            reportViewerParams.parmOutputFileContentBase64String(outputFileContentBase64String);
            reportViewerParams.parmPrintReportSettings(viewerPrintReportSettings);
            reportViewerParams.parmEmailPrintDestSettings(_emailPrintDestSettings);
            reportViewerParams.parmFilePrintDestSettings(_filePrintDestSettings);
            reportViewerParams.parmPrinterPrintDestSettings(_printerPrintDestSettings);
            reportViewerParams.parmIsPreviewMode(true);

            args.parmObject(reportViewerParams);
            
            formRun = ClassFactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            printAfterPreview = formRun.continueReportPrinting();
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX:FailedToOpenReportInViewer");
            showErrorMsgAndCleanUp(DocConstantDiagnostics::ErrOpenInViewer);
        }

        return printAfterPreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReportToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the given report and print it to file that will be sent to user, save to SharePoint or Attachments.
    /// </summary>
    /// <param name = "_printReportSettings">Parameters for generating the report.</param>
    /// <param name = "_filePrintDestSettings">Parameters for the File print destination.</param>
    /// <returns>Returns execution info if the report is successfully printed to File</returns>
    public static DocPrintReportToFileExecutionInfo printReportToFile(DocPrintReportSettings _printReportSettings,
                                                                      DocPrintDestSettingsFile _filePrintDestSettings)
    {
        str                                       resolvedOutputFilename;
        DocPrintReportToArchiveExecutionInfo      saveToArchiveExecutionInfo;
        DocPrintReportToFileExecutionInfo         printToFileExecutionInfo = new DocPrintReportToFileExecutionInfo();
        boolean                                   isNonInteractiveSession;
        boolean                                   cancelExecution;
        Stopwatch                                 sw;

        
        void showErrorMsgAndThrow(str _errorCode = '')
        {
            // Raise the event that printing to File hasn't completed successfully.
            DocOutputManagerPublisher::publishEvent_printToFileEnd(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo.markAsFailedExecution());
            // Display the error message.
            DocOutputManagerMessenger::displayFailureMsgPrintReportToFile(_printReportSettings, printToFileExecutionInfo, funcName(), _errorCode);
            // Throw the exception.
            throw Exception::Error;
        }


        void validateParameters()
        {
            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::File)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:SelectedPrintDestDiffers", _printReportSettings.parmPrintDestination(), DocPrintDestination::File));
            }

            _filePrintDestSettings.setDefaultParmValues(_printReportSettings.parmReportId(), _printReportSettings.parmReportCaption());
            if (!_filePrintDestSettings.validate(true, true))
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:FilePrintDestInvalid");
            }
            
            // Report cannot be printed to File if executing in batch unless the output file
            // is not saved to SharePoint or Attachments.
            if (isNonInteractiveSession &&
                _filePrintDestSettings.parmSaveToAttachments() == false &&
                _filePrintDestSettings.parmSaveToSharePoint() == false &&
                _filePrintDestSettings.parmSaveToAzureBlobStorage() == false &&
                _filePrintDestSettings.parmSaveToAzureFiles() == false &&
                _filePrintDestSettings.parmSaveToFileSystem() == false)
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintToFileNotAllowedInBatch");
            }

            // Check the output file format.
            DocReportingHelper::validateOutputFileType_File(_printReportSettings, _filePrintDestSettings);
        }


        boolean printReport()
        {
            boolean cancelExecutionPrintReport = false;

            // Resolve the output filename.
            resolvedOutputFilename = _filePrintDestSettings.getResolvedOutputFilename(true);

            // Store the resolved output filename to the report execution info.
            printToFileExecutionInfo.parmReportOutputFilename(resolvedOutputFilename);
           
            sw = DocDiagnosticsManager::startMeasurement();

            // Use already printed document, generate report using Docentric template or use SSRS original design.
            if (_printReportSettings.isPrintedReportProvided())
            {
                // Do nothing.
            }
            else if (_printReportSettings.printSrsOriginalDesign())
            {
                // Use SSRS original design.
                DocPrintedReport printedSrsReport = DocSrsEngine::printSrsReport_File(_printReportSettings, _filePrintDestSettings);
                
                // Set the printed report content.
                _printReportSettings.parmPrintedReport(printedSrsReport);
            }
            else
            {
                // Generate report using Docentric template to a memory stream.
                using (System.IO.MemoryStream generatedReportMemoryStream = DocOutputManager::printReportToMemoryStream(_printReportSettings, _filePrintDestSettings.parmOutputFileFormat()))
                {
                    // Set the printed report content.
                    _printReportSettings.addPrintedReportDocFromMemoryStream(generatedReportMemoryStream, _filePrintDestSettings.parmOutputFileFormat());
                }
            }

            // Publish the event that the report content is generated.
            cancelExecutionPrintReport = DocOutputManagerPublisher::publishEvent_generateReportContent(_printReportSettings);

            // Convert the generated report to PDF/A if needed.
            DocReportPdfAManager::convertDocument(_printReportSettings);

            // Sign the generated report if needed.
            DocReportPdfSecurityManager::signDocument(_printReportSettings);

            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);

            return cancelExecutionPrintReport;
        }


        /* -------------------------   Begin of the method  -------------------------  */
        try
        {
            if (!_printReportSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
            }
            if (!_filePrintDestSettings)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _filePrintDestSettings is not set');
            }

            // Raise the event that printing to File started.
            if (DocOutputManagerPublisher::publishEvent_printToFileBegin(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToFileExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow();
        }


        /***  Validate paramters ***/
        try
        {
            isNonInteractiveSession = DocGlobalHelper::isNonInteractiveSession();

            // Validate parameters and set default values if needed.
            validateParameters();

            // Raise the event that printing to File is started, after the file print settings are validated.
            if (DocOutputManagerPublisher::publishEvent_printingToFile(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToFileExecutionInfo;
            }
        }
        catch
        {
            showErrorMsgAndThrow(DocConstantDiagnostics::ErrParametersValidation);
        }


        /***  Generate report ***/
        try
        {
            // Print report.
            cancelExecution = printReport();

            // Cancel execution if an event subscriber requested to do so.
            if (cancelExecution)
            {
                return printToFileExecutionInfo;
            }
        }
        catch
        {
            DocDiagnosticsManager::stopMeasurement(sw, _printReportSettings);
            showErrorMsgAndThrow();
        }


        /***  Preview report  ***/
        if (_printReportSettings.parmPreviewBeforePrint() && !isNonInteractiveSession)
        {
            try
            {
                boolean printAfterPreview =  DocOutputManager::printReportToScreenPreview(_printReportSettings, null, null, _filePrintDestSettings);
                if (!printAfterPreview)
                {
                    printToFileExecutionInfo.parmPreviewBeforePrintPrintingCanceled(true);
                    return printToFileExecutionInfo;
                }
            }
            catch
            {
                showErrorMsgAndThrow(DocConstantDiagnostics::ErrPreviewBeforePrint);
            }
        }


        /***  Distribute generated report  ***/
        //-- Send file to user if not running in batch and if it is not an on-premises environment.
        if (_filePrintDestSettings.parmSendOutputFileToUser() && !isNonInteractiveSession)
        {
            // Raise the event that report is being sent to the user (i.e. saved to a temporary SSRS Azure blob storage location for Platform 11 and up).
            if (DocOutputManagerPublisher::publishEvent_printToFileSendFileToUser(_printReportSettings, _filePrintDestSettings, resolvedOutputFilename))
            {
                // Cancel execution if an event subscriber requested to do so.
                return printToFileExecutionInfo;
            }

            // Encrypt and sign the generated report if needed.
            // NOTE: If an error occurs during PDF encryption or re-signing, the exception will be thrown with the relevant error code.
            container documentContainer = DocReportPdfSecurityManager::encryptAndSignDocument(_printReportSettings, DocPdfEncryptionConditionEnum::DownloadFile, printToFileExecutionInfo);

            // Download the report in the browser.
            // NOTE: These methods don't throw any exception.
            if (_filePrintDestSettings.parmSendSeparateFilesToUser() || DocConstantGlobal::isOnPremEnvironment() || _printReportSettings.isBeingUsedOutsideSsrsPipeline())
            {
                DocFileMngHelper::sendFileToUser(DocGlobalHelper::convertContainerToMemoryStream(documentContainer), resolvedOutputFilename, '', '', '', '', true, true);
            }
            else
            {
                DocOutputManager::saveFileToSsrsTempAzureBlobStorage(DocGlobalHelper::convertContainerToBytes(documentContainer), resolvedOutputFilename, _printReportSettings);
            }
        }

        //-- Save to SharePoint.
        DocOutputManager::saveFileToSharePoint(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo);

        //-- Save to Azure Blob storage.
        DocOutputManager::saveFileToAzureBlobStorage(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo);

        //-- Save to Attachments.
        DocOutputManager::saveFileToAttachments(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo);

        //-- Save to File system.
        DocOutputManager::saveFileToFileSystem(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo);

        //-- Save to Azure Files.
        DocOutputManager::saveFileToAzureFiles(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo);

        /***  Save report to the print archive  ***/
        if (_printReportSettings.parmSaveToArchive())
        {
            DocReportPrintArchiveInfo printArchiveInfo = DocReportPrintArchiveInfo::constructFromPrintToFileReportExecutionInfo(_printReportSettings, printToFileExecutionInfo);
            if (_filePrintDestSettings.getResolvedOutputFileType() != DocFileMngHelper::convertToFileExtensionStr(DocConstant::DocentricArchiveFileFormat))
            {
                saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(printArchiveInfo, conNull(), true);
            }
            else
            {
                saveToArchiveExecutionInfo = DocOutputManager::printReportToArchiveInternal(
                    printArchiveInfo, _printReportSettings.parmPrintedReport().getReportContentContainer(), true, _printReportSettings.getPrintedReportNumberOfPages());
            }
            
            printToFileExecutionInfo.parmSaveToArchiveSuccess(saveToArchiveExecutionInfo.parmSaveToArchiveSuccess());
            printToFileExecutionInfo.parmArchivePrintJobHeaderRecId(saveToArchiveExecutionInfo.parmArchivePrintJobHeaderRecId());
        }


        /***  Final steps  ***/
        // When executing in batch, if all saving targets failed, throw an exception, because in that case we want the batch job to be completed with Status=Error.
        // Note that the batch job would already fail (see the validateParameters() method) if all saving targets were turned off.
        if (isNonInteractiveSession && !printToFileExecutionInfo.parmSaveToSharePointSuccess() && !printToFileExecutionInfo.parmSaveToAzureBlobStorageSuccess() &&
            !printToFileExecutionInfo.parmSaveToAttachmentsSuccess() && !printToFileExecutionInfo.parmSaveToFileSystemSuccess() && !printToFileExecutionInfo.parmSaveToArchiveSuccess() &&
            !printToFileExecutionInfo.parmSaveToAzureFilesSuccess())
        {
            showErrorMsgAndThrow();
        }
        
        // Set the flag that report is generated and delivered.
        printToFileExecutionInfo.parmReportDelivered(true);

        // Raise the event that printing to File completed.
        cancelExecution = DocOutputManagerPublisher::publishEvent_printToFileEnd(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo);

        // Cancel execution if an event subscriber requested to do so.
        if (cancelExecution)
        {
            return printToFileExecutionInfo;
        }

        // Inform about print report to file result.
        if (!_printReportSettings.parmSuppressSuccessMsg())
        {
            DocOutputManagerMessenger::displaySuccessMsgPrintReportToFile(_printReportSettings, _filePrintDestSettings, printToFileExecutionInfo);
        }

        return printToFileExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToSsrsTempAzureBlobStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the report to the SSRS's temporary Azure blob storage.
    /// This will enable SrsReportRunController's  the onRenderingComplete() and downloadAndCompressFiles() methods to download
    /// multiple output files as a single ZIP package (e.g. applicable for the Customer Account Statement report for multiple customers).
    /// </summary>
    /// <param name = "_reportContentBytes">Report content as a byte array</param>
    /// <param name = "_resolvedOutputFilename">Resolved output report filename</param>
    /// <param name = "_printReportSettings">Print report settings containing the report run ID</param>
    public static void saveFileToSsrsTempAzureBlobStorage(System.Byte[] _reportContentBytes, str _resolvedOutputFilename, DocPrintReportSettings _printReportSettings)
    {
        try
        {
            if (_reportContentBytes == null || _reportContentBytes.Length == 0)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _reportContentBytes is not set or it is empty');
            }

            System.IO.MemoryStream reportContentStream = new System.IO.MemoryStream(_reportContentBytes);

            // Upload file to temp storage and direct the browser to the file URL
            SrsFileUploadNameContract fileNameContract = new SrsFileUploadNameContract();
            fileNameContract.FileName(_resolvedOutputFilename);

            // <Docentric>
            //str categoryName = SrsReportRunUtil::convertAndTrimGuidValue(reportContract.parmReportExecutionInfo().parmReportRunId());
            str categoryName = _printReportSettings.getReportRunIdStr();
            // </Docentric>

            fileNameContract.CategoryName(categoryName);
            SRSFileUploadTempStorageStrategy fileUploader = new SRSFileUploadTempStorageStrategy();
            fileUploader.uploadFile(reportContentStream, FormJsonSerializer::serializeClass(fileNameContract));

            // Set global cache that indicates there is file uploaded for current report execution.
            // Using SGC not SGOC because we want scope to be in current user session.
            // Owner - RunIdOwner constant, Key - RunId, Value - boolean value.
            SysGlobalCache globalCache = classfactory.globalCache();
            if(!globalCache.isSet(DocConstant::RunIdOwner, _printReportSettings.getReportRunId()))
            {
                globalCache.set(DocConstant::RunIdOwner, _printReportSettings.getReportRunId(), true);
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError();
            DocGlobalHelper::handleWarning("@ApplicationPlatform:FileUploadFailed");
        }
        catch
        {
            DocGlobalHelper::handleWarning("@ApplicationPlatform:FileUploadFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the provided memory stream to SharePoint.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings including all report information and metadata</param>
    /// <param name = "_filePrintDestSettings">File print destination settings including SharePoint location</param>
    /// <param name = "_printToFileExecutionInfo">Print to file report execution info</param>
    public static void saveFileToSharePoint(DocPrintReportSettings _printReportSettings,
                                            DocPrintDestSettingsFile _filePrintDestSettings,
                                            DocPrintReportToFileExecutionInfo _printToFileExecutionInfo)
    {
        if (_filePrintDestSettings.parmSaveToSharePoint())
        {
            _printToFileExecutionInfo.parmSaveToSharePointSuccess(false);

            // Raise the event before saving to SharePoint.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToSharePoint(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
            if (cancelExecution)
            {
                return;
            }

            boolean saveToSharePoint = true;
            str resolvedOutputFilename = _printToFileExecutionInfo.parmReportOutputFilename();

            // Check if the file exists on SharePoint if the Overwrite file option is turned off.
            if (!_filePrintDestSettings.parmSharePointOverrideFileIfExists())
            {
                try
                {
                    // Throws error if communication with SharePoint fails.
                    if (_filePrintDestSettings.fileExistsOnSharePoint(true, true, resolvedOutputFilename))
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:OutputFileAlreadyExistsOnSharePoint",
                            resolvedOutputFilename,
                            DocSharePointHelperV3::getSharePointHostNameFromUrl(_filePrintDestSettings.parmSharePointSiteUrl()),
                            DocSharePointHelperV3::getSharePointSiteNameFromUrl(_filePrintDestSettings.parmSharePointSiteUrl()),
                            _filePrintDestSettings.parmSharePointFolderPath())
                            );
                        saveToSharePoint = false;
                    }
                }
                catch
                {
                    // In case of error we will not try to save the file to SharePoint.
                    saveToSharePoint = false;
                }
            }

            // Check if the folder path exists on SharePoint if the Create non-existing folders option is turned off.
            if (saveToSharePoint && !_filePrintDestSettings.parmSharePointCreateNonExistingFolders())
            {
                try
                {
                    DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(_filePrintDestSettings.parmSharePointSiteUrl(), _filePrintDestSettings.parmSharePointFolderPath(), DocSharePointRole::ReportUser);

                    // Throws error if communication with SharePoint fails.
                    if (!DocSharePointHelperV3::folderPathExists(_filePrintDestSettings.parmSharePointSiteUrl(), _filePrintDestSettings.parmSharePointFolderPath(), spCredentials, true, true))
                    {
                        // The specified folder path does not exist and the Create non-existing folders flag is turned off -> inform the user.
                        DocGlobalHelper::handleError(strFmt("@DocentricAX3:SaveToSharePointFolderPathNotExistError",
                            _filePrintDestSettings.parmSharePointFolderPath(),
                            DocSharePointHelperV3::getSharePointHostNameFromUrl(_filePrintDestSettings.parmSharePointSiteUrl()),
                            DocSharePointHelperV3::getSharePointSiteNameFromUrl(_filePrintDestSettings.parmSharePointSiteUrl()))
                            );
                        saveToSharePoint = false;
                    }
                }
                catch
                {
                    // In case of error we will not try to save the file to SharePoint.
                    saveToSharePoint = false;
                }
            }

            DocReportSharePointMetadataSettings spMetadataSettings = _filePrintDestSettings.parmSharePointMetadata();
            Map spMetadataFieldMap = _filePrintDestSettings.isEnabledSaveToSharePointMetadata() ? spMetadataSettings.parmSharePointMetadataFieldMap() : null;
            boolean uploadFileAllowedWithoutMetadata = spMetadataSettings == null ? true : spMetadataSettings.parmActionOnError() != DocSharePointActionOnError::DoNotUploadFile;

            // Save to SharePoint.
            if (saveToSharePoint)
            {
                try
                {
                    // Encrypt and sign the generated report if needed.
                    container documentContainer = DocReportPdfSecurityManager::encryptAndSignDocument(_printReportSettings, DocPdfEncryptionConditionEnum::SharePoint, _printToFileExecutionInfo);

                    DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(_filePrintDestSettings.parmSharePointSiteUrl(), _filePrintDestSettings.parmSharePointFolderPath(), DocSharePointRole::ReportUser);

                    // Save the report to SharePoint.
                    str saveToSharePointFileUrl = DocSharePointHelperV3::uploadToSharePoint(DocGlobalHelper::convertContainerToMemoryStream(documentContainer), resolvedOutputFilename,
                        _filePrintDestSettings.parmSharePointSiteUrl(), _filePrintDestSettings.parmSharePointFolderPath(), spCredentials,
                        _filePrintDestSettings.parmSharePointOverrideFileIfExists(), false, _filePrintDestSettings.parmSharePointCreateNonExistingFolders(),
                        spMetadataFieldMap, uploadFileAllowedWithoutMetadata);

                    _printToFileExecutionInfo.parmSaveToSharePointFileUrl(saveToSharePointFileUrl);
                    _printToFileExecutionInfo.parmSaveToSharePointSuccess(saveToSharePointFileUrl != '');
                    _printToFileExecutionInfo.parmSaveToSharePointAuthorizationType(spCredentials.getSPAuthorizationType());
                    _printToFileExecutionInfo.parmSaveToSharePointIntegratedReportUser('');
                    if (spCredentials.getSPAuthorizationType() == DocSharePointAuthorizationType::Integrated 
                            && spCredentials.getSPRole() == DocSharePointRole::ReportUser
                            && spCredentials.getUserId() != curUserId())
                    {
                        _printToFileExecutionInfo.parmSaveToSharePointIntegratedReportUser(spCredentials.getUserId());
                    }
                }
                catch
                {
                    // NOTE: An error can occur only during PDF signing and encryption.
                    exceptionTextFallThrough();
                }
            }

            // Raise the event after saving to SharePoint.
            DocOutputManagerPublisher::publishEvent_afterSaveToSharePoint(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToAzureBlobStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the provided memory stream to Azure blob storage.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings including all report information and metadata</param>
    /// <param name = "_filePrintDestSettings">File print destination settings including Azure blob storage location</param>
    /// <param name = "_printToFileExecutionInfo">Print to file report execution info</param>
    public static void saveFileToAzureBlobStorage(DocPrintReportSettings _printReportSettings,
                                                  DocPrintDestSettingsFile _filePrintDestSettings,
                                                  DocPrintReportToFileExecutionInfo _printToFileExecutionInfo)
    {
        if (_filePrintDestSettings.parmSaveToAzureBlobStorage())
        {
            _printToFileExecutionInfo.parmSaveToAzureBlobStorageSuccess(false);

            str resolvedOutputFilename = _printToFileExecutionInfo.parmReportOutputFilename();
            str blobName = _filePrintDestSettings.getAzureBsBlobName(resolvedOutputFilename);
            _printToFileExecutionInfo.parmSaveToAzureBsBlobName(blobName);

            str azureStorageId = _filePrintDestSettings.parmAzureBsAccountId();
            str storageAccount = azureStorageId == '' ? '' : (strFmt("@DocentricAX3:AzureStorageAccountStorageAccountInfo", azureStorageId) + ', ');

            // Raise the event before saving to Azure blob storage.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToAzureStorage(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
            if (cancelExecution)
            {
                return;
            }

            boolean saveToAzureBlobStorage = true;
            if (!_filePrintDestSettings.parmAzureBsOverrideFileIfExists())
            {
                try
                {
                    // Throws an error if communication with Azure blob storage fails.
                    if (_filePrintDestSettings.fileExistsOnAzure(true, true, resolvedOutputFilename))
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:OutputFileAlreadyExistsOnAzureBlobStorage",
                                                            resolvedOutputFilename, storageAccount, _filePrintDestSettings.parmAzureBsContainerName(), blobName));
                        saveToAzureBlobStorage = false;
                    }
                }
                catch
                {
                    saveToAzureBlobStorage = false;
                }
            }

            if (saveToAzureBlobStorage)
            {
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                /*
                   In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                   is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                   the Docentric AX Free Edition product.
                   You must keep intact all parts of the source code related to the licensing of the full product version.
                   Read more: https://ax.docentric.com/free-edition-license/
                                                                                                                                */
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

                if (azureStorageId)
                {
                    // If the external Azure blob storage is used, check the license. This feature cannot be used with Free Edition!
                    // This call will throw an exception if the license is not found or if the license is invalid.
                    DocLicenseMng::checkLicense(DocConstant::FeatureSavingToExternalAzureBlobStorage, "@DocentricAX3:FailedToSaveFileToExternalAzureBlobStorage");
                }

                try
                {
                    // Encrypt and sign the generated report if needed.
                    container documentContainer = DocReportPdfSecurityManager::encryptAndSignDocument(_printReportSettings, DocPdfEncryptionConditionEnum::AzureBlobStorage, _printToFileExecutionInfo);

                    // Upload the report to Azure blob storage.
                    DocAzureBlobHelper::uploadBlob(_filePrintDestSettings.parmAzureBsContainerName(), blobName, DocGlobalHelper::convertContainerToMemoryStream(documentContainer), azureStorageId);
                    _printToFileExecutionInfo.parmSaveToAzureBlobStorageSuccess(true);
                }
                catch
                {
                    // NOTE: An error can occur only during PDF signing and encryption.
                    exceptionTextFallThrough();
                }
            }

            // Raise the event after saving to Azure storage.
            DocOutputManagerPublisher::publishEvent_afterSaveToAzureStorage(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToAzureFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the provided memory stream to Azure Files.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings including all report information and metadata</param>
    /// <param name = "_filePrintDestSettings">File print destination settings including Azure Files storage location</param>
    /// <param name = "_printToFileExecutionInfo">Print to file report execution info</param>
    public static void saveFileToAzureFiles(DocPrintReportSettings _printReportSettings,
                                            DocPrintDestSettingsFile _filePrintDestSettings,
                                            DocPrintReportToFileExecutionInfo _printToFileExecutionInfo)
    {
        if (_filePrintDestSettings.parmSaveToAzureFiles())
        {
            _printToFileExecutionInfo.parmSaveToAzureFilesSuccess(false);

            str resolvedOutputFilename = _printToFileExecutionInfo.parmReportOutputFilename();
            str azureFileFullFilename = _filePrintDestSettings.getAzureFilesFullFileName(resolvedOutputFilename);
            
            _printToFileExecutionInfo.parmSaveToAzureFilesPathFilename(azureFileFullFilename);

            str azureStorageId = _filePrintDestSettings.parmAzureFilesAccountId();
            str storageAccount = azureStorageId == '' ? '' : strFmt("@DocentricAX3:AzureStorageAccountStorageAccountInfo", azureStorageId);

            // Raise the event before saving to Azure Files.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToAzureFiles(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
            if (cancelExecution)
            {
                return;
            }

            boolean saveToAzureFiles = true;
            // Check if overwritting the file is allowed
            if (!_filePrintDestSettings.parmAzureFilesOverrideFileIfExists())
            {
                try
                {
                    // Throw an error, if the file with the same name already exists.
                    if (_filePrintDestSettings.fileExistsOnAzureFiles(true, true, resolvedOutputFilename))
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX4:OutputFileAlredyExistsOnAzureFilesStorage",
                            resolvedOutputFilename, storageAccount, _filePrintDestSettings.parmAzureFilesFileShareName(), _filePrintDestSettings.parmAzureFilesDirectoryPath(), "@DocentricAX4:OverrideAzureFiles"));
                        saveToAzureFiles = false;
                    }
                }
                catch
                {
                    saveToAzureFiles = false;
                }
            }

            boolean fileShareExists = false;
            // Check if creation of non-existing Azure file share is allowed
            if (saveToAzureFiles && !_filePrintDestSettings.parmAzureFilesCreateNonExistingFileShare())
            {
                try
                {
                    // Throw an error, if Azure file share does not exist
                    fileShareExists = DocAzureFilesHelper::fileShareExists(_filePrintDestSettings.parmAzureFilesFileShareName(), true, true, azureStorageId);
                    if (!fileShareExists)
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX4:SaveToAzureFilesAzureFileShareNotExists",
                            _filePrintDestSettings.parmAzureFilesFileShareName(), storageAccount, "@DocentricAX4:SaveToAzureFilesCreateAzureFileShare"));
                        saveToAzureFiles = false;
                    }
                }
                catch
                {
                    saveToAzureFiles = false;
                }
            }

            if (saveToAzureFiles)
            {
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                /*
                   In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                   is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                   the Docentric AX Free Edition product.
                   You must keep intact all parts of the source code related to the licensing of the full product version.
                   Read more: https://ax.docentric.com/free-edition-license/
                */
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

                if (azureStorageId)
                {
                    // If the external Azure file storage is used, check the license. This feature cannot be used with Free Edition!
                    // This call will throw an exception if the license is not found or if the license is invalid.
                    DocLicenseMng::checkLicense(DocConstant::FeatureSavingToExternalAzureFiles, "@DocentricAX4:FailedToSaveFileToExternalAzureFilesStorage");
                }

                try
                {
                    // Encrypt and sign the generated report if needed.
                    container documentContainer = DocReportPdfSecurityManager::encryptAndSignDocument(_printReportSettings, DocPdfEncryptionConditionEnum::AzureFiles, _printToFileExecutionInfo);

                    // If Azure file share does not exist, create it.
                    if (!fileShareExists)
                    {
                        DocAzureFilesHelper::createFileShare(_filePrintDestSettings.parmAzureFilesFileShareName(), true, true, azureStorageId);
                    }

                    // Upload the report to Azure Files.
                    DocAzureFilesHelper::uploadFile(_filePrintDestSettings.parmAzureFilesFileShareName(), _printToFileExecutionInfo.parmSaveToAzureFilesPathFilename(),
                        DocGlobalHelper::convertContainerToMemoryStream(documentContainer), azureStorageId, _filePrintDestSettings.parmAzureFilesCreateNonExistingFolders());
                    _printToFileExecutionInfo.parmSaveToAzureFilesSuccess(true);
                }
                catch
                {
                    // NOTE: An error can occur only during PDF signing and encryption.
                    exceptionTextFallThrough();
                }
            }

            // Publish event after saving to Azure Files.
            DocOutputManagerPublisher::publishEvent_afterSaveToAzureFiles(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the provided memory stream to Attachments of the report execution context record.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings including report execution context record</param>
    /// <param name = "_filePrintDestSettings">File print destination settings including Azure blob storage location</param>
    /// <param name = "_printToFileExecutionInfo">Print to file report execution info</param>
    public static void saveFileToAttachments(DocPrintReportSettings _printReportSettings,
                                             DocPrintDestSettingsFile _filePrintDestSettings,
                                             DocPrintReportToFileExecutionInfo _printToFileExecutionInfo)
    {
        if (_filePrintDestSettings.parmSaveToAttachments())
        {
            _printToFileExecutionInfo.parmSaveToAttachmentsSuccess(false);

            // Get Attachment Name and Filename.
            str resolvedOutputFilename = _printToFileExecutionInfo.parmReportOutputFilename();
            str attachmentName = DocFileMngHelper::getFileNameWithoutExtension(resolvedOutputFilename);

            // Resolve the Saving-to-Attachments record.
            Common resolvedSaveToAttachmentRecord = _filePrintDestSettings.getSaveToAttachmentsRecord(_printReportSettings);

            // Raise the event before saving to Attachments.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToAttachments(_printReportSettings, 
                _filePrintDestSettings, _printToFileExecutionInfo, resolvedSaveToAttachmentRecord, attachmentName);
            if (cancelExecution)
            {
                return;
            }

            // Check if the underlaying record that the output file should be attached is resolved.
            if (resolvedSaveToAttachmentRecord.RecId != 0)
            {
                System.IO.MemoryStream reportContent = new System.IO.MemoryStream(_printReportSettings.parmPrintedReport().getReportContentByteArray());
                
                // Save the provided file to Attachments of resolvedSaveToAttachmentRecord.
                DocuRef docuRef = DocDocuRefHelper::saveToAttachments(
                                    _printToFileExecutionInfo,
                                    resolvedSaveToAttachmentRecord.TableId,
                                    resolvedSaveToAttachmentRecord.RecId,
                                    resolvedSaveToAttachmentRecord.DataAreaId == '' ? 'DAT' : resolvedSaveToAttachmentRecord.DataAreaId,    // DataAreaId will never be empty, but for any case
                                    _filePrintDestSettings.parmSaveToAttachmentsDocuTypeId(),
                                    reportContent,
                                    resolvedOutputFilename, '', attachmentName,
                                    _printReportSettings.parmReportCaption(), curUserId(),
                                    _printReportSettings,
                                    _filePrintDestSettings.parmSaveToAttachmentsDocumentRestriction(),
                                    _filePrintDestSettings.parmSaveToAttachmentsOverridingMode(),
                                    _filePrintDestSettings);

                if (docuRef && _printToFileExecutionInfo.parmSaveToAttachmentsSuccess())
                {
                    // Update SharePoint file's metadata
                    docuRef = DocReportingHelper::updateSaveToAttachmentsSharePointFileMetadata(docuRef, _filePrintDestSettings);
                    if (docuRef == null)
                    {
                        _printToFileExecutionInfo.parmSaveToAttachmentsSuccess(false);
                        _printToFileExecutionInfo.parmSaveToAttachmentsDocuRef_RecId(0);
                    }
                }
            }

            // Raise the event after saving to Attachments.
            DocOutputManagerPublisher::publishEvent_afterSaveToAttachments(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo, resolvedSaveToAttachmentRecord, attachmentName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToFileSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the provided memory stream to File system.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings including all report information and metadata</param>
    /// <param name = "_filePrintDestSettings">File print destination settings including File system location</param>
    /// <param name = "_printToFileExecutionInfo">Print to file report execution info</param>
    public static void saveFileToFileSystem(DocPrintReportSettings _printReportSettings,
                                            DocPrintDestSettingsFile _filePrintDestSettings,
                                            DocPrintReportToFileExecutionInfo _printToFileExecutionInfo)
    {
        if (_filePrintDestSettings.parmSaveToFileSystem())
        {
            _printToFileExecutionInfo.parmSaveToFileSystemSuccess(false);

            str resolvedOutputFilename = _printToFileExecutionInfo.parmReportOutputFilename();
            str fullFilename = _filePrintDestSettings.getFileSystemFullFileName(resolvedOutputFilename);
            _printToFileExecutionInfo.parmSaveToFileSystemFullOutputFilename(fullFilename);
            
            // Raise the event before saving to File system.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToFileSystem(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
            if (cancelExecution)
            {
                return;
            }

            boolean saveToFileSystem = true;
            if (!_filePrintDestSettings.parmFileSystemOverrideFileIfExists())
            {
                try
                {
                    // Throws an error if communication with File System fails.
                    if (_filePrintDestSettings.fileExistsOnFileSystem(true, true, resolvedOutputFilename))
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:OutputFileAlreadyExistsOnFileSystem",
                                                            resolvedOutputFilename, _filePrintDestSettings.parmFileSystemFilePath()));
                        saveToFileSystem = false;
                    }
                }
                catch
                {
                    saveToFileSystem = false;
                }
            }

            if (saveToFileSystem)
            {
                try
                {
                    // Encrypt and sign the generated report if needed.
                    container documentContainer = DocReportPdfSecurityManager::encryptAndSignDocument(_printReportSettings, DocPdfEncryptionConditionEnum::FileSystem, _printToFileExecutionInfo);

                    // Save the report to File system.
                    DocFileSystemMngHelper::createFolderAndSaveToFileSystem(DocGlobalHelper::convertContainerToMemoryStream(documentContainer), _filePrintDestSettings.parmFileSystemFilePath(), fullFilename);
                    _printToFileExecutionInfo.parmSaveToFileSystemSuccess(true);
                }
                catch
                {
                    // NOTE: An error can occur only during PDF signing and encryption.
                    exceptionTextFallThrough();
                }
            }

            // Raise the event after saving to File system.
            DocOutputManagerPublisher::publishEvent_afterSaveToFileSystem(_printReportSettings, _filePrintDestSettings, _printToFileExecutionInfo);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>