<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocOutputManagerPublisher</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocOutputManagerPublisher
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>publishEvent_reportExecutionSuccess</Name>
				<Source><![CDATA[
    /****************** REPORT EXECUTION ******************/
    public static boolean publishEvent_reportExecutionSuccess(DocReportExecutionInfo _docReportExecutionInfo)
    {
        // Don't publish the event if the target print destination is 'Generate DS'.
        if (_docReportExecutionInfo.parmPrintReportSettings().parmPrintDestination() == DocPrintDestination::GenerateDataSource)
        {
            return false;
        }

        boolean cancelExecution = false;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onReportExecutionSuccess(_docReportExecutionInfo);
            cancelExecution = res.cancelExecution();
        }

        // Don't throw any exception.
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error occurred in the reportExecutionSuccess() delegate method', false);
        }
        catch
        {
            DocGlobalHelper::handleError('Error occurred in the reportExecutionSuccess() delegate method', true, funcName(), false);
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_reportExecutionFailure</Name>
				<Source><![CDATA[
    public static boolean publishEvent_reportExecutionFailure(DocReportExecutionInfo _docReportExecutionInfo)
    {
        // Don't publish the event if the target print destination is 'Generate DS'.
        if (_docReportExecutionInfo.parmPrintReportSettings().parmPrintDestination() == DocPrintDestination::GenerateDataSource)
        {
            return false;
        }

        boolean cancelExecution = false;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onReportExecutionFailure(_docReportExecutionInfo);
            cancelExecution = res.cancelExecution();
        }

        // Don't throw any exception.
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error occurred in the reportExecutionFailure() delegate method', false);
        }
        catch
        {
            DocGlobalHelper::handleError('Error occurred in the reportExecutionFailure() delegate method', true, funcName(), false);
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_generateReportContent</Name>
				<Source><![CDATA[
    /****************** GENERATE REPORT CONTENT ******************/
    public static boolean publishEvent_generateReportContent(DocPrintReportSettings _printReportSettings)
    {
        if (_printReportSettings == null || _printReportSettings.parmPrintedReport() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameters _printReportSettings and/or _printReportSettings.parmPrintedReport() are not set');
        }

        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onGenerateReportContent(_printReportSettings, _printReportSettings.parmPrintedReport());
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the generateReportContent() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the generateReportContent() delegate method');
        }
        finally
        {
            /****** TRACING ******/
            int infoLine;
            try
            {
                infoLine = infologLine();
                // Dump runtime DDSP, template and generated document
                DocTrace::traceReportDocument(_printReportSettings);
            }
            catch
            {
                infolog.cut(infoLine + 1, infologLine());
                exceptionTextFallThrough();
            }
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToScreenBegin</Name>
				<Source><![CDATA[
    /****************** SCREEN ******************/
    public static boolean publishEvent_printToScreenBegin(DocPrintReportSettings _printReportSettings, DocPrintReportToScreenExecutionInfo _screenExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToScreenBegin(_printReportSettings, _screenExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToScreenBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToScreenBegin() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToScreenEnd</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printToScreenEnd(DocPrintReportSettings _printReportSettings, DocPrintReportToScreenExecutionInfo _screenExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToScreenEnd(_printReportSettings, _screenExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToScreenEnd() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToScreenEnd() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToFileBegin</Name>
				<Source><![CDATA[
    /****************** FILE ******************/
    public static boolean publishEvent_printToFileBegin(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                        DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToFileBegin(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToFileBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToFileBegin() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printingToFile</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printingToFile(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                      DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintingToFile(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printingToFile() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printingToFile() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToFileSendFileToUser</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printToFileSendFileToUser(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings, str _resolvedOutputFilename)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToFileSendFileToUser(
                _printReportSettings, _filePrintDestSettings, _resolvedOutputFilename, _printReportSettings.parmPrintedReport());
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToFileSendFileToUser() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToFileSendFileToUser() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToFileEnd</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printToFileEnd(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings, 
                                                      DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToFileEnd(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printReportSettings.parmPrintedReport());
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToFileEnd() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToFileEnd() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToSharePoint</Name>
				<Source><![CDATA[
    // Before saving to SharePoint
    public static boolean publishEvent_beforeSaveToSharePoint(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                              DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToSharePoint(_printReportSettings, _filePrintDestSettings,
                _fileExecutionInfo, _printReportSettings.parmPrintedReport(), _fileExecutionInfo.parmReportOutputFilename());
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToSharePoint() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToSharePoint() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_afterSaveToSharePoint</Name>
				<Source><![CDATA[
    // After saving to SharePoint
    public static void publishEvent_afterSaveToSharePoint(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            delegates.onAfterSaveToSharePoint(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printReportSettings.parmPrintedReport(),
                                              _fileExecutionInfo.parmReportOutputFilename(), _fileExecutionInfo.parmSaveToSharePointSuccess());
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the afterSaveToSharePoint() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the afterSaveToSharePoint() delegate method');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToAttachments</Name>
				<Source><![CDATA[
    // Before saving to Attachments
    public static boolean publishEvent_beforeSaveToAttachments(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                               DocPrintReportToFileExecutionInfo _fileExecutionInfo, Common _saveToAttachmentsRecord, str _attachmentName)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToAttachments(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo,
                _printReportSettings.parmPrintedReport(), _fileExecutionInfo.parmReportOutputFilename(), _attachmentName, _saveToAttachmentsRecord);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToAttachments() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToAttachments() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_afterSaveToAttachments</Name>
				<Source><![CDATA[
    // After saving to Attachments
    public static void publishEvent_afterSaveToAttachments(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                           DocPrintReportToFileExecutionInfo _fileExecutionInfo, Common _saveToAttachmentsRecord, str _attachmentName)
    {
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            delegates.onAfterSaveToAttachments(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printReportSettings.parmPrintedReport(),
                _fileExecutionInfo.parmReportOutputFilename(), _attachmentName, _saveToAttachmentsRecord, _fileExecutionInfo.parmSaveToAttachmentsSuccess());
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the afterSaveToAttachments() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the afterSaveToAttachments() delegate method');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToAzureStorage</Name>
				<Source><![CDATA[
    // Before saving to AzureStorage
    public static boolean publishEvent_beforeSaveToAzureStorage(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                              DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToAzureStorage(_printReportSettings, _filePrintDestSettings,
                _fileExecutionInfo, _printReportSettings.parmPrintedReport(), _fileExecutionInfo.parmReportOutputFilename());
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToAzureStorage() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToAzureStorage() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_afterSaveToAzureStorage</Name>
				<Source><![CDATA[
    // After saving to AzureStorage
    public static void publishEvent_afterSaveToAzureStorage(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            delegates.onAfterSaveToAzureStorage(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printReportSettings.parmPrintedReport(),
                                                _fileExecutionInfo.parmReportOutputFilename(), _fileExecutionInfo.parmSaveToAzureBlobStorageSuccess());
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the afterSaveToAzureStorage() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the afterSaveToAzureStorage() delegate method');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToAzureFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for the event that is triggered before the file is saved to AzureFiles.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    /// <param name = "_filePrintDestSettings">An instance of the DocPrintDestSettingsFile class</param>
    /// <param name = "_fileExecutionInfo">An instance of the DocPrintReportToFileExecutionInfo class</param>
    /// <returns>True if the execution needs to be canceled; otherwise false</returns>
    public static boolean publishEvent_beforeSaveToAzureFiles(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                              DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToAzureFiles(_printReportSettings, _filePrintDestSettings,
                _fileExecutionInfo, _printReportSettings.parmPrintedReport(), _fileExecutionInfo.parmReportOutputFilename());
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocReportRunDelegates, beforeSaveToAzureFiles)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocReportRunDelegates, beforeSaveToAzureFiles)));
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_afterSaveToAzureFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for the event that fires after the file is saved to AzureFiles.
    /// </summary>
    /// <param name = "_printReportSettings">An instancew of the DocPrintReportSettings class</param>
    /// <param name = "_filePrintDestSettings">An instance of the DocPrintDestSettingsFile class</param>
    /// <param name = "_fileExecutionInfo">An instance of the DocPrintReportToFileExecutionInfo class</param>
    public static void publishEvent_afterSaveToAzureFiles(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            delegates.onAfterSaveToAzureFiles(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printReportSettings.parmPrintedReport(),
                _fileExecutionInfo.parmReportOutputFilename(), _fileExecutionInfo.parmSaveToAzureFilesSuccess());
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocReportRunDelegates, afterSaveToAzureFiles)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocReportRunDelegates, afterSaveToAzureFiles)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToFileSystem</Name>
				<Source><![CDATA[
    // Before saving to FileSystem
    public static boolean publishEvent_beforeSaveToFileSystem(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                              DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToFileSystem(_printReportSettings, _filePrintDestSettings,
                _fileExecutionInfo, _printReportSettings.parmPrintedReport(), _fileExecutionInfo.parmReportOutputFilename());
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToFileSystem() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToFileSystem() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_afterSaveToFileSystem</Name>
				<Source><![CDATA[
    // After saving to FileSystem
    public static void publishEvent_afterSaveToFileSystem(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            delegates.onAfterSaveToFileSystem(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printReportSettings.parmPrintedReport(),
                                              _fileExecutionInfo.parmReportOutputFilename(), _fileExecutionInfo.parmSaveToFileSystemSuccess());
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the afterSaveToFileSystem() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the afterSaveToFileSystem() delegate method');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToEmailBegin</Name>
				<Source><![CDATA[
    /****************** EMAIL ******************/
    public static boolean publishEvent_printToEmailBegin(DocPrintReportSettings _printReportSettings,
                                                         DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                         DocPrintReportToEmailExecutionInfo _emailExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToEmailBegin(_printReportSettings, _emailPrintDestSettings, _emailExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToEmailBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToEmailBegin() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printingToEmail</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printingToEmail(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                       DocPrintReportToEmailExecutionInfo _emailExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintingToEmail(_printReportSettings, _emailPrintDestSettings, _emailExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printingToEmail() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printingToEmail() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeEmailMessageCreated</Name>
				<Source><![CDATA[
    public static boolean publishEvent_beforeEmailMessageCreated(DocPrintReportSettings _printReportSettings,
                                                                 DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                                 DocPrintedReport _printedReport)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeEmailMessageCreated(_printReportSettings, _emailPrintDestSettings, _printedReport);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeEmailMessageCreated() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeEmailMessageCreated() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_emailMessageCreated</Name>
				<Source><![CDATA[
    public static boolean publishEvent_emailMessageCreated(System.Net.Mail.MailMessage _mailMessage,
                                                           DocPrintReportSettings _printReportSettings,
                                                           DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                           str _senderEmailAccountDisplayName,
                                                           DocPrintedReport _printedReport,
                                                           eMailPriority _mailPriority)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onEmailMessageCreated(_mailMessage, _printReportSettings, _emailPrintDestSettings,
                                                                        _senderEmailAccountDisplayName, _printedReport, _mailPriority);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the emailMessageCreated() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the emailMessageCreated() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeDownloadEmailMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to email, this is the point before the mail message is downloaded.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_printedReport">Printed report content that is the email attachment</param>
    /// <returns>The filename of the downloading email message (eml file). By default, the mail message subject is used as the filename.</returns>
    public static str publishEvent_beforeDownloadEmailMessage(System.Net.Mail.MailMessage _mailMessage,
                                                              DocPrintReportSettings _printReportSettings,
                                                              DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                              DocPrintedReport _printedReport)
    {
        str downloadingMailMessageFilename;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeDownloadEmailMessage(_mailMessage, _printReportSettings, _emailPrintDestSettings, _printedReport);
            downloadingMailMessageFilename = res.result();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the emailMessageCreated() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the emailMessageCreated() delegate method');
        }

        return downloadingMailMessageFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToEmailEnd</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printToEmailEnd(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsEmail _emailPrintDestSettings, 
                                                       DocPrintReportToEmailExecutionInfo _emailExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToEmailEnd(_printReportSettings, _emailPrintDestSettings, _emailExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToEmailEnd() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToEmailEnd() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToOutgoingEmailTable</Name>
				<Source><![CDATA[
    public static boolean publishEvent_beforeSaveToOutgoingEmailTable(SysOutgoingEmailTable _outgoingEmailTable,
                                                                      DocPrintReportSettings _printReportSettings,
                                                                      DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                                      DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                                                      DocPrintedReport _printedReport)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToOutgoingEmailTable(_outgoingEmailTable, _printReportSettings, _emailPrintDestSettings, _emailExecutionInfo, _printedReport);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToOutgoingEmailTable() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToOutgoingEmailTable() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_afterSaveToOutgoingEmailTable</Name>
				<Source><![CDATA[
    public static void publishEvent_afterSaveToOutgoingEmailTable(SysOutgoingEmailTable _outgoingEmailTable,
                                                                  DocPrintReportSettings _printReportSettings,
                                                                  DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                                  DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                                                  DocPrintedReport _printedReport)
    {
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            delegates.onAfterSaveToOutgoingEmailTable(_outgoingEmailTable, _printReportSettings, _emailPrintDestSettings, _emailExecutionInfo, _printedReport);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the afterSaveToOutgoingEmailTable() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the afterSaveToOutgoingEmailTable() delegate method');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToPrinterBegin</Name>
				<Source><![CDATA[
    /****************** PRINTER ******************/
    public static boolean publishEvent_printToPrinterBegin(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                           DocPrintReportToPrinterExecutionInfo _printerExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToPrinterBegin(_printReportSettings, _printerPrintDestSettings, _printerExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToPrinterBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToPrinterBegin() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printingToPrinter</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printingToPrinter(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                         DocPrintReportToPrinterExecutionInfo _printerExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintingToPrinter(_printReportSettings, _printerPrintDestSettings, _printerExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printingToPrinter() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printingToPrinter() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToPrinterEnd</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printToPrinterEnd(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                         DocPrintReportToPrinterExecutionInfo _printerExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToPrinterEnd(_printReportSettings, _printerPrintDestSettings, _printerExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToPrinterEnd() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToPrinterEnd() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToMemoryBegin</Name>
				<Source><![CDATA[
    /****************** MEMORY ******************/
    public static boolean publishEvent_printToMemoryBegin(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsMemory _memoryPrintDestSettings,
                                                          DocPrintReportToMemoryExecutionInfo _memoryExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToMemoryBegin(_printReportSettings, _memoryPrintDestSettings, _memoryExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToMemoryBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToMemoryBegin() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToMemoryEnd</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printToMemoryEnd(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsMemory _memoryPrintDestSettings,
                                                        DocPrintReportToMemoryExecutionInfo _memoryExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToMemoryEnd(_printReportSettings, _memoryPrintDestSettings, _memoryExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToMemoryEnd() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToMemoryEnd() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToArchiveBegin</Name>
				<Source><![CDATA[
    /****************** ARCHIVE ******************/
    public static boolean publishEvent_printToArchiveBegin(DocPrintReportSettings _printReportSettings, DocPrintReportToArchiveExecutionInfo _archiveExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToArchiveBegin(_printReportSettings, _archiveExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToArchiveBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToArchiveBegin() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToArchiveEnd</Name>
				<Source><![CDATA[
    public static boolean publishEvent_printToArchiveEnd(DocPrintReportSettings _printReportSettings, DocPrintReportToArchiveExecutionInfo _archiveExecutionInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onPrintToArchiveEnd(_printReportSettings, _archiveExecutionInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToArchiveEnd() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToArchiveEnd() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_printToArchiveChangeArchiveFilenameAndDescription</Name>
				<Source><![CDATA[
    public static container publishEvent_printToArchiveChangeArchiveFilenameAndDescription(
        DocPrintReportSettings _printReportSettings, str _archiveFilename, str _archiveDescription)
    {
        boolean cancelExecution;
        str     newArchiveFilename, newArchiveDescription;
        
        DocReportRunDelegates delegates = DocReportRunDelegates::instance();

        // Change the archive filename.
        try
        {
            DocEventHandlerResult res = delegates.onPrintToArchiveChangeArchiveFilename(_printReportSettings, _archiveFilename);
            cancelExecution = res.cancelExecution();
            newArchiveFilename = res.result();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToArchiveChangeArchiveFilename() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToArchiveChangeArchiveFilename() delegate method');
        }

        // Change the archive description.
        try
        {
            DocEventHandlerResult res = delegates.onPrintToArchiveChangeArchiveDescription(_printReportSettings, _archiveDescription);
            cancelExecution = res.cancelExecution();
            newArchiveDescription = res.result();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the printToArchiveChangeArchiveDescription() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the printToArchiveChangeArchiveDescription() delegate method');
        }

        return [cancelExecution, newArchiveFilename, newArchiveDescription];
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_saveToPrintArchive</Name>
				<Source><![CDATA[
    public static boolean publishEvent_saveToPrintArchive(DocPrintJobHeader _printJobHeader, DocReportPrintArchiveInfo _printArchiveInfo)
    {
        // Change the extended print archive fields of the provided the _printJobHeader table buffer using the _printArchiveInfo object.
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onSaveToPrintArchive(_printJobHeader, _printArchiveInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the saveToPrintArchive() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the saveToPrintArchive() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToPrintArchive</Name>
				<Source><![CDATA[
    public static boolean publishEvent_beforeSaveToPrintArchive(container _reportContent, SRSPrintArchiveContract _archiveContract, DocReportPrintArchiveInfo _printArchiveInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToPrintArchive(_reportContent, _archiveContract, _printArchiveInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToPrintArchive() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToPrintArchive() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_afterSaveToPrintArchive</Name>
				<Source><![CDATA[
    public static boolean publishEvent_afterSaveToPrintArchive(DocPrintJobHeader _printJobHeader, container _reportContent, SRSPrintArchiveContract _archiveContract, DocReportPrintArchiveInfo _printArchiveInfo)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onAfterSaveToPrintArchive(_printJobHeader, _reportContent, _archiveContract, _printArchiveInfo);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the afterSaveToPrintArchive() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the afterSaveToPrintArchive() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToPAReportInOriginalFormat</Name>
				<Source><![CDATA[
    public static boolean publishEvent_beforeSaveToPAReportInOriginalFormat(DocReportPrintArchiveInfo _printArchiveInfo, DocPrintJobHeader _docPrintJobHeader, str _printJobDescription, str _archiveFileName)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToPAReportInOriginalFormat(_printArchiveInfo, _docPrintJobHeader, _printJobDescription, _archiveFileName);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToPAReportInOriginalFormat() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToPAReportInOriginalFormat() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishEvent_beforeSaveToPAAdditionalEmailAttachments</Name>
				<Source><![CDATA[
    public static boolean publishEvent_beforeSaveToPAAdditionalEmailAttachments(DocReportPrintArchiveInfo _printArchiveInfo, DocPrintJobHeader _docPrintJobHeader, str _printJobDescription, str _archiveFileName)
    {
        boolean cancelExecution;
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            DocEventHandlerResult res = delegates.onBeforeSaveToPAAdditionalEmailAttachments(_printArchiveInfo, _docPrintJobHeader, _printJobDescription, _archiveFileName);
            cancelExecution = res.cancelExecution();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the beforeSaveToPAAdditionalEmailAttachments() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the beforeSaveToPAAdditionalEmailAttachments() delegate method');
        }

        return cancelExecution;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>