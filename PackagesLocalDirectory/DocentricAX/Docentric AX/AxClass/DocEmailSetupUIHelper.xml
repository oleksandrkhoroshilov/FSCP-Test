<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailSetupUIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocEmailSetupUIHelper
{
    Args            args;
    FormRun         callerFormRun;
    TableId         callerRecordTableId;
    FormDataSource  callerFds;
    str             callerMenuItemName;
    Set             allowedMenuItemNames, allowedTableIds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Args _args)
    {
        if (!_args)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        args = _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCallerFds</Name>
				<Source><![CDATA[
    // Retrieve the caller form data source
    private void resolveCallerFds()
    {
        callerFds = null;                
        
        // Iterate through all datasources of the caller form.
        // If we encounter the datasource that matches the caller dataset, 
        // then it is the correct datasource.
        for (int i = 1; i <= callerFormRun.dataSourceCount(); i++)
        {
            Common callerRecord = callerFormRun.dataSource(i).cursor();
            if (callerRecord.TableId == callerRecordTableId)
            {
                callerFds = callerFormRun.dataSource(i);
            }
        }

        if (callerFds == null)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidFormDatasource");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToProcess</Name>
				<Source><![CDATA[
    private List getRecordsToProcess()
    {
        // Figure out the correct form datasource
        this.resolveCallerFds();

        // Collect the RecIds of the marked datasource records
        Common settings;
        List recIds = new List(Types::Int64);
        for (settings = callerFds.getFirst(true) ? callerFds.getFirst(true) : callerFds.cursor();
             settings;
             settings = callerFds.getNext())
        {
            recIds.addEnd(settings.RecId);
        }

        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCheckArgs</Name>
				<Source><![CDATA[
    private void initAndCheckArgs()
    {
        if (!(args && args.caller() && args.menuItemName()))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        callerMenuItemName = args.menuItemName();
        
        // Actions from this class can be called from the menu items listed here.
        // New implementations should add the supported menu items below.
        allowedMenuItemNames = new Set(Types::String);
        allowedMenuItemNames.add(menuItemActionStr(DocPlaceholderSetCurrentUserEmail));
        allowedMenuItemNames.add(menuItemActionStr(DocPlaceholderSetGlobalParameterValue));
        allowedMenuItemNames.add(menuItemActionStr(DocEmailTokensRedirectTo));
        allowedMenuItemNames.add(menuItemActionStr(DocPlaceholderSetSenderEmail));

        if (!allowedMenuItemNames.in(callerMenuItemName))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCallerMenuItem");
        }
       
        if (!(args.caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        callerFormRun = args.caller() as FormRun;  
        
        // We can deal with the record types listed here.
        // New implementations should add the supported record types below.
        allowedTableIds = new Set(Types::Int64);
        allowedTableIds.add(tableNum(DocParameters));
        allowedTableIds.add(tableNum(DocEmailAccount));
        allowedTableIds.add(tableNum(DocEmailTokensPDRedirection));
        allowedTableIds.add(tableNum(DocReportTable));
        allowedTableIds.add(tableNum(DocReportCompanySetting));
        if (!args.dataset() || !allowedTableIds.in(args.dataset()))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCallerDatasource");
        }        
        callerRecordTableId = args.dataset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArgsCombination</Name>
				<Source><![CDATA[
    // Check if we have a valid combination of caller menu item, form and record. 
    // New implementations should add their combination below.
    private void checkArgsCombination()
    {
        boolean isValidCombination = false;

        // Form 'Email sending settings', menu item 'Change Redirect to'
        if (callerMenuItemName == menuItemActionStr(DocEmailTokensRedirectTo)
                && callerFormRun.name() == formStr(DocReportEmailingSettings)
                && callerRecordTableId == tableNum(DocEmailTokensPDRedirection))
        {
            isValidCombination = true;
        }
        // Form 'Docentric AX parameters', menu item 'Placeholders > Current user email'
        else if (callerMenuItemName == menuItemActionStr(DocPlaceholderSetCurrentUserEmail)
                && callerFormRun.name() == formStr(DocParameters)
                && (callerRecordTableId == tableNum(DocParameters) || callerRecordTableId == tableNum(DocEmailAccount)))
        {
            isValidCombination = true;
        }
        // Form 'Sender display name settings',
        // menu item 'Placeholders > Current user email' or 'Placeholders > Global parameter value'
        else if (callerFormRun.name() == formStr(DocEmailFromDisplayNameSettings)
                && ((callerMenuItemName == menuItemActionStr(DocPlaceholderSetCurrentUserEmail))
                    || (callerMenuItemName == menuItemActionStr(DocPlaceholderSetGlobalParameterValue)))
                && (callerRecordTableId == tableNum(DocReportTable) || (callerRecordTableId == tableNum(DocReportCompanySetting))))
        {
            isValidCombination = true;
        }
        // Form 'Read receipt address settings',
        // menu item 'Placeholders > Sender email'
        else if (callerMenuItemName == menuItemActionStr(DocPlaceholderSetSenderEmail) &&
                 callerFormRun.name() == formStr(DocEmailReadReceiptAddressSettings) &&
                 (callerRecordTableId == tableNum(DocReportTable) || callerRecordTableId == tableNum(DocReportCompanySetting)))
        {
            isValidCombination = true;
        }

        if (!isValidCombination)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleActions</Name>
				<Source><![CDATA[
    public void handleActions()
    {
        List recIds;

        // Init and make sure that class is invoked from the correct menu item and with 
        // the correct dataset
        this.initAndCheckArgs();

        // Make sure that the class is invoked with the valid combination of menu item,
        // caller form and caller record
        this.checkArgsCombination();

        // Retrieve the caller form records which were marked for processing
        recIds = this.getRecordsToProcess();
        if (recIds.elements() == 0)
        {
            DocGlobalHelper::handleWarning("@DocentricAX2:NoRecordSelected");
            return;
        }
        
        // Execute the action depending on the menu item which invoked this class
        try
        {
            switch (callerMenuItemName)
            {
                /* Email tokens */
                case menuItemActionStr(DocEmailTokensRedirectTo):
                    this.emailTokensSetRedirectTo(recIds);
                    break;
                
                /* Email settings in DocParameters and DocReportTable forms */
                case menuItemActionStr(DocPlaceholderSetCurrentUserEmail):
                case menuItemActionStr(DocPlaceholderSetGlobalParameterValue):
                    this.emailPlaceholdersSetFieldValueToPlaceholder(recIds);
                    break;

                /* Email settings in the DocEmailReadReceiptAddressSettings form */
                case menuItemActionStr(DocPlaceholderSetSenderEmail):
                    this.emailPlaceholdersSetFieldValueToPlaceholder(recIds);
                    break;

                default:
                    return;
            }
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX2:UIActionErrorUpdatingRecords");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailPlaceholdersSetFieldValueToPlaceholder</Name>
				<Source><![CDATA[
    /* Methods related to Email placeholder settings in DocParameters and DocReportTable forms */
    private void emailPlaceholdersSetFieldValueToPlaceholder(List _recIds)
    {
        int cnt;
        ListEnumerator le = _recIds.getEnumerator();
        str placeholderString, fieldLabelToUpdate, fieldNameToUpdate_DocReportTable;
        
        if (callerMenuItemName == menuItemActionStr(DocPlaceholderSetCurrentUserEmail))
        {
            placeholderString = DocConstant::EmailSenderDisplayNameCurrentUserPlaceholder;
            fieldLabelToUpdate = "@DocentricAX2:EmailSenderDisplayName";
            fieldNameToUpdate_DocReportTable = fieldStr(DocReportTable, EmailAccountDisplayName);
        }
        else if (callerMenuItemName == menuItemActionStr(DocPlaceholderSetGlobalParameterValue))
        {
            placeholderString = DocConstant::EmailSenderDisplayNameGlobalParamValuePlaceholder;
            fieldLabelToUpdate = "@DocentricAX2:EmailSenderDisplayName";
            fieldNameToUpdate_DocReportTable = fieldStr(DocReportTable, EmailAccountDisplayName);
        }
        else if (callerMenuItemName == menuItemActionStr(DocPlaceholderSetSenderEmail))
        {
            placeholderString = DocConstant::EmailFromAddressPlaceholder;
            fieldLabelToUpdate = "@DocentricAX2:EmailReadReceiptAddress";
            fieldNameToUpdate_DocReportTable = fieldStr(DocReportTable, EmailReadReceiptAddress);
        }

        if (_recIds.elements() > 1 && (callerRecordTableId == tableNum(DocEmailAccount) || callerRecordTableId == tableNum(DocReportCompanySetting)))
        {
            // User selected more than 1 record in the grid, prompt for confirmation
            if (!Box::confirm(strFmt("@DocentricAX2:UIActionConfirmUpdate", fieldLabelToUpdate, placeholderString)))
            {
                return;
            }
        }

        ttsbegin;
        while (le.moveNext())
        {
            switch (callerRecordTableId)
            {
                case tableNum(DocParameters):
                    // There will be just 1 record here
                    DocParameters docParameters = DocParameters::find(true);
                    docParameters.EmailAccountDisplayName = placeholderString;
                    docParameters.update();
                    break;

                case tableNum(DocEmailAccount):
                    // There will be just 1 record here
                    DocEmailAccount emailAccount = DocEmailAccount::find(le.current(), true);
                    emailAccount.EmailSenderDisplayName = placeholderString;
                    emailAccount.update();
                    break;
                
                case tableNum(DocReportCompanySetting):
                    DocReportCompanySetting companySetting = DocReportCompanySetting::find(le.current(), true);
                    companySetting.SettingValue = placeholderString;
                    companySetting.update();
                    break;
                
                case tableNum(DocReportTable):
                    DocReportTable reportTable = DocReportTable::find(le.current(), true);
                    reportTable.setFieldValue(fieldNameToUpdate_DocReportTable, placeholderString);
                    reportTable.update();
                    break;
            }

            cnt++;
        }
        ttscommit;
        
        if (callerRecordTableId == tableNum(DocEmailAccount) || callerRecordTableId == tableNum(DocReportCompanySetting))
        {
            // User can multi-select more than 1 record in the grid, inform him about the result
            DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:UIActionSuccessUpdating", fieldLabelToUpdate, placeholderString, cnt));
        }

        callerFds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailTokensSetRedirectTo</Name>
				<Source><![CDATA[
    /* Methods related to Email tokens */
    private void emailTokensSetRedirectTo(List _recIds)
    {        
        #PrintMgmtSetup

        if (callerRecordTableId != tableNum(DocEmailTokensPDRedirection))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:NoPDRedirectionSelected");
        }

        // PD redirection works only if 1 record is selected, due to the per-company logic below.
        // So we just grab the first item from the _recIds list.
        ListEnumerator le = _recIds.getEnumerator();
        le.moveNext();          
        RefRecId redirectionRecId = le.current();        
        if (!redirectionRecId)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:NoPDRedirectionSelected");
        }
        
        DocEmailTokensPDRedirection pdRedirection = DocEmailTokensPDRedirection::find(le.current(), true);
        SelectableDataArea companyId = pdRedirection.CompanyId;
        if (!companyId)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:ValueMustBeSelected", 
                fieldId2PName(tableNum(DocEmailTokensPDRedirection), fieldNum(DocEmailTokensPDRedirection, CompanyId))));
        }

        changecompany(companyId)
        {
            DocReportTable reportTable = DocReportTable::find(pdRedirection.ReportTable);
            SRSPrintDestinationSettings pds = new SRSPrintDestinationSettings();
            pds.unpack(pdRedirection.PrintJobSettings);
            if (pds == null)
            {
                pds.printMediumType(SRSPrintMediumType::Printer_DC);
                pds.parmTmpPrintDestSettings_DC().parmReportId(reportTable.ReportId);
                pds.parmTmpPrintDestSettings_DC().parmReportCaption(reportTable.ReportDefaultCaption);
            }

            // Open the print destination settings form.
            //boolean ok = SrsReportRunUtil::showSettingsDialog(
            //                    pds,
            //                    DocPrintMgmtHelper::isPrintMgmtReport(reportTable.ReportId) ? #SRSPrintDestinationTokenPrintMgmt : SrsPrintDestinationTokens::defaultTokenType(),
            //                    enum2Symbol(enumNum(PrintMgmtDocumentType), DocPrintMgmtHelper::getPrintMgmtDocumentType(reportTable.ReportId)));

            boolean ok = DocPrintMgmtHelper::showSettingsDialog(pds, reportTable.ReportId, DocPrintMgmtHelper::getFirstPrintMgmtDocumentType(reportTable.ReportId));

            if (ok)
            {
                // Validate the selected redirection print destination
                if (!DocSrsReportRunUtil::isDocentricPrintDestination(pds.printMediumType()))
                {
                    DocGlobalHelper::handleWarning("@DocentricAX2:OnlyDocPDsSuppported");
                    return;
                }
                else if (pds.printMediumType() == SRSPrintMediumType::GenerateDataSource_DC)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:RedirectionToNotAllowed", DocSrsReportRunUtil::getDocentricPrintDestDescription(pds)));
                    return;
                }

                pdRedirection.PrintJobSettings = pds.pack();
                pdRedirection.PrintDestinationDescription = DocSrsReportRunUtil::getDocentricPrintDestDescription(pds);
                            
                ttsbegin;
                pdRedirection.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DocEmailSetupUIHelper helper = new DocEmailSetupUIHelper(_args);
        helper.handleActions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>