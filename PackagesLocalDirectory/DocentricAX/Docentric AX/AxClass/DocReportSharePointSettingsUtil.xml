<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportSharePointSettingsUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Storage.SharePoint.Model;
using Docentric.AX.Framework.Extensions;

/// <summary>
/// Utility methods for report SharePoint settings.
/// </summary>
public class DocReportSharePointSettingsUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateSharePointSettingsSandboxHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the SharePoint settings data.
    /// </summary>
    /// <param name = "_inputParameters">Container with DocReportSharePointSettings records</param>
    /// <returns>Empty container</returns>
    public static container validateSharePointSettingsSandboxHelper(container _inputParameters)
    {
        if (!_inputParameters)
        {
            return conNull();
        }

        Set selectedRecordSet = Set::create(_inputParameters);
        SetEnumerator selectedRecordSetEnum = selectedRecordSet.getEnumerator();

        while (selectedRecordSetEnum.moveNext())
        {
            DocReportSharePointSettings spSettings = selectedRecordSetEnum.current();
            DocReportSharePointSettingsUtil::validateSharePointSettings(spSettings.RecId);
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpSharePointSettingsSandboxHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up and updates the SharePoint metadata fields.
    /// </summary>
    /// <param name = "_inputParameters">Container with DocReportSharePointSettings records</param>
    /// <returns>Empty container</returns>
    public static container cleanUpSharePointSettingsSandboxHelper(container _inputParameters)
    {
        if (!_inputParameters)
        {
            return conNull();
        }

        Set selectedRecordSet = Set::create(_inputParameters);
        SetEnumerator selectedRecordSetEnum = selectedRecordSet.getEnumerator();

        while (selectedRecordSetEnum.moveNext())
        {
            DocReportSharePointSettings spSettings = selectedRecordSetEnum.current();
            DocReportSharePointSettingsUtil::cleanUpSharePointSettings(spSettings.RecId);
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSharePointSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the SharePoint settings data for the provided DocReportSharePointSettings
    /// record Id and updates the validation status and message. 
    /// </summary>
    /// <param name = "_spSettingsRecId">A DocReportSharePointSettings record Id</param>
    public static void validateSharePointSettings(DocReportSharePointSettingsRecId _spSettingsRecId)
    {
        if (!_spSettingsRecId)
        {
            return;
        }

        DocReportSharePointSettings spSettings;
        DocReportSharePointMetadata spMetadataSettings;
        str statusMsg;
        str statusFieldMsg;
        int infologLine;
        DocSPField spField;

        while select spSettings
            where spSettings.RecId == _spSettingsRecId
        {
            statusMsg = '';
            infologLine = infologLine();

            try
            {
                DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
                    spSettings.SharePointSiteUrl, spSettings.SharePointDocumentLibraryUrl, DocSharePointRole::BrowserUser);

                // Get SharePoint document library
                DocSPDocumentLibrary spDocumentLibrary = DocSharePointHelperV3::getDocumentLibraryByUrl(
                                                                                    spSettings.SharePointDocumentLibraryUrl, 
                                                                                    spSettings.SharePointSiteUrl, 
                                                                                    spCredentials,
                                                                                    true,
                                                                                    true);

                if (spDocumentLibrary != null)
                {
                    if (!spDocumentLibrary.ResourceAbsolutePath.TrimStart(DocConstantFile::UrlDelimiter).Equals(spSettings.SharePointDocumentLibraryUrl))
                    {
                        statusMsg = strFmt("@DocentricAX4:SharePointSettingsValidateInvalidDocumentLibraryUrlError", spDocumentLibrary.ResourceAbsolutePath.TrimStart(DocConstantFile::UrlDelimiter), spSettings.SharePointDocumentLibraryUrl);
                        throw Exception::Error;
                    }

                    // Check if the document library has no updatable fields
                    if (spDocumentLibrary.UpdatableFields == null || spDocumentLibrary.UpdatableFields.Count == 0)
                    {
                        statusMsg = strFmt("@DocentricAX4:SharePointSettingsValidateNoUpdatableFieldsFoundError", spSettings.SharePointDocumentLibraryUrl);
                        throw Exception::Error;
                    }

                    DocSPFieldCollection spFieldCollection = spDocumentLibrary.UpdatableFields;

                    // Validate metadata fields
                    while select spMetadataSettings
                        where spMetadataSettings.SharePointSettingsRecId == spSettings.RecId
                    {
                        statusFieldMsg = '';

                        spField = spFieldCollection.GetByInternalName(spMetadataSettings.FieldInternalName);
                        if (spField == null)
                        {
                            statusFieldMsg += statusFieldMsg ? '\r\n' : '';
                            statusFieldMsg += strFmt("@DocentricAX4:SharePointSettingsValidateFieldDoesNotExistsError", spMetadataSettings.FieldName, spSettings.SharePointDocumentLibraryUrl);
                        }
                        else
                        {
                            DocSharePointMetadataFieldDataType fieldDataType = symbol2Enum(enumNum(DocSharePointMetadataFieldDataType), EnumExtensions::GetName(System.Enum::ToObject(spField.FieldType.GetType(), spField.FieldType)));
                            if (fieldDataType != spMetadataSettings.FieldDataType)
                            {
                                statusFieldMsg += statusFieldMsg ? '\r\n' : '';
                                statusFieldMsg += strFmt("@DocentricAX4:SharePointSettingsValidateFieldTypeDiffersError", spMetadataSettings.FieldDataType, spMetadataSettings.FieldName, fieldDataType, spSettings.SharePointDocumentLibraryUrl);
                            }

                            boolean isRequired = spField.Required;
                            if (isRequired != spMetadataSettings.IsRequired)
                            {
                                statusFieldMsg += statusFieldMsg ? '\r\n' : '';
                                statusFieldMsg += strFmt("@DocentricAX4:SharePointSettingsValidateIsRequiredDiffersError", spMetadataSettings.IsRequired, spMetadataSettings.FieldName, isRequired, spSettings.SharePointDocumentLibraryUrl);
                            }
                            if (spMetadataSettings.IsRequired && !spMetadataSettings.PlaceholderName)
                            {
                                statusFieldMsg += statusFieldMsg ? '\r\n' : '';
                                statusFieldMsg += strFmt("@DocentricAX4:SharePointSettingsValidateFieldIsRequiredError", spMetadataSettings.FieldName);
                            }
                        }

                        if (statusFieldMsg)
                        {
                            statusMsg += (statusMsg ? '\r\n' : '') + statusFieldMsg;
                        }

                        try
                        {
                            // Update validation status and message for current DocSharePointMetadata record
                            ttsbegin;
                            spMetadataSettings.selectForUpdate(true);
                            spMetadataSettings.ValidationError = statusFieldMsg;
                            spMetadataSettings.IsValid = !statusFieldMsg;
                            spMetadataSettings.update();
                            ttscommit;
                        }
                        catch
                        {
                            Global::exceptionTextFallThrough();
                        }
                    }

                    // Check if all required metadata fields exist in the SharePoint metatada settings
                    for (int i = 0; i < spFieldCollection.Count; i++)
                    {
                        spField = spFieldCollection.GetByIndex(i);
                        if (spField != null && spField.Required)
                        {
                            if (!DocReportSharePointMetadata::exist(spSettings.RecId, spField.InternalName))
                            {
                                statusMsg += statusMsg ? '\r\n' : '';
                                statusMsg += strFmt("@DocentricAX4:SharePointSettingsValidateFieldIsRequiredNotSelectedError", spField.Title, spSettings.SharePointDocumentLibraryUrl);
                            }
                        }
                    }
                }
            }
            catch
            {
                // Get error messages from infolog
                statusMsg += (statusMsg ? '\r\n' : '') + DocGlobalHelper::getInfoLogMessages(infologLine + 1, '', true);
            }
            finally
            {
                try
                {
                    // Update validation status and message for current DocSharePointSettings report
                    ttsbegin;
                    spSettings.selectForUpdate(true);
                    spSettings.ValidationError = statusMsg;
                    spSettings.IsValid = statusMsg ? DocIsReportValid::Invalid : DocIsReportValid::Valid;
                    spSettings.update();
                    ttscommit;
                }
                catch
                {
                    Global::exceptionTextFallThrough();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpSharePointSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up and updates the SharePoint metadata fields for the provided
    /// DocReportSharePointSettings record Id.
    /// </summary>
    /// <param name = "_spSettingsRecId">A DocReportSharePointSettings record Id</param>
    public static void cleanUpSharePointSettings(DocReportSharePointSettingsRecId _spSettingsRecId)
    {
        if (!_spSettingsRecId)
        {
            return;
        }

        DocReportSharePointSettings spSettings;
        DocReportSharePointMetadata spMetadataSettings;
        DocSPField spField;

        while select spSettings
            where spSettings.RecId == _spSettingsRecId
        {
            try
            {
                DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
                    spSettings.SharePointSiteUrl, spSettings.SharePointDocumentLibraryUrl, DocSharePointRole::BrowserUser);

                // Get SharePoint document library
                DocSPDocumentLibrary spDocumentLibrary = DocSharePointHelperV3::getDocumentLibraryByUrl(
                                                                                    spSettings.SharePointDocumentLibraryUrl,
                                                                                    spSettings.SharePointSiteUrl,
                                                                                    spCredentials,
                                                                                    true,
                                                                                    true);

                if (spDocumentLibrary != null)
                {
                    // Check if document library url contains folders
                    if (!spDocumentLibrary.ResourceAbsolutePath.TrimStart(DocConstantFile::UrlDelimiter).Equals(spSettings.SharePointDocumentLibraryUrl))
                    {
                        ttsbegin;

                        // Update document library url (folder part is ignored)
                        spSettings.selectForUpdate(true);
                        spSettings.SharePointDocumentLibraryUrl = spDocumentLibrary.ResourceAbsolutePath.TrimStart(DocConstantFile::UrlDelimiter);
                        spSettings.update();

                        ttscommit;
                    }

                    // Check if the document library has no updatable fields
                    if (spDocumentLibrary.UpdatableFields == null || spDocumentLibrary.UpdatableFields.Count == 0)
                    {
                        // Delete all fields
                        delete_from spMetadataSettings
                            where spMetadataSettings.SharePointSettingsRecId == spSettings.RecId;
                    }
                    else
                    {
                        DocSPFieldCollection spFieldCollection = spDocumentLibrary.UpdatableFields;

                        ttsbegin;

                        while select forupdate spMetadataSettings
                            where spMetadataSettings.SharePointSettingsRecId == spSettings.RecId
                        {
                            spField = spFieldCollection.GetByInternalName(spMetadataSettings.FieldInternalName);
                            // Check if the field exists
                            if (spField == null)
                            {
                                // Delete the field
                                spMetadataSettings.delete();
                            }
                            else
                            {
                                // Update the field properties
                                spMetadataSettings.FieldName = spField.Title;
                                spMetadataSettings.FieldDescription = spField.Description;
                                spMetadataSettings.FieldDataType = symbol2Enum(enumNum(DocSharePointMetadataFieldDataType), EnumExtensions::GetName(System.Enum::ToObject(spField.FieldType.GetType(), spField.FieldType)));
                                spMetadataSettings.IsRequired = spField.Required;
                                spMetadataSettings.update();
                            }
                        }

                        // Insert missing required fields
                        for (int i = 0; i < spFieldCollection.Count; i++)
                        {
                            spField = spFieldCollection.GetByIndex(i);
                            // Check if the field in the document library is required
                            if (spField != null && spField.Required && !DocReportSharePointMetadata::exist(spSettings.RecId, spField.InternalName))
                            {
                                // Insert the required field
                                spMetadataSettings.clear();
                                spMetadataSettings.SharePointSettingsRecId = spSettings.RecId;
                                spMetadataSettings.FieldName = spField.Title;
                                spMetadataSettings.FieldInternalName = spField.InternalName;
                                spMetadataSettings.FieldDescription = spField.Description;
                                spMetadataSettings.FieldDataType = symbol2Enum(enumNum(DocSharePointMetadataFieldDataType), EnumExtensions::GetName(System.Enum::ToObject(spField.FieldType.GetType(), spField.FieldType)));
                                spMetadataSettings.IsRequired = spField.Required;
                                spMetadataSettings.insert();
                            }
                        }

                        ttscommit;
                    }
                }
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:SharePointSettingsCleanUpError", spSettings.SharePointDocumentLibraryUrl), false, '', false);
            }
            finally
            {
                // Validate the SharePoint settings
                DocReportSharePointSettingsUtil::validateSharePointSettings(spSettings.RecId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>