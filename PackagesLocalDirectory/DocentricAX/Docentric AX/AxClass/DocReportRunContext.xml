<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportRunContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocReportRunContext class contains a report run context.
/// </summary>
public class DocReportRunContext implements SysPackable
{
    DocReportId                         reportId;
    DocReportCaption                    reportCaption;
    MenuItemName                        reportMenuItemName;
    MenuItemType                        reportMenuItemType;
    DocReportTemplateId                 templateId;
    CompanyId                           templateCompanyId;
    LanguageId                          templateLanguageId;
    UserId                              userId;
    HcmWorkerRecId                      hcmWorkerRecId;
    DocPrintDestination                 printDestination;
    DocPrintDestSettingsGenerateDS      generateDSPrintDestSettings;
    DocPrintDestSettingsPrinter         printerPrintDestSettings;
    DocPrintDestSettingsFile            filePrintDestSettings;
    DocPrintDestSettingsEmail           emailPrintDestSettings;
    boolean                             isExecutingInBatch;
    RecId                               batchId, batchJobId;
    boolean                             saveToArchive;
    DocuTypeId                          saveToArchiveDocuTypeId;
    DocPrintArchiveNote                 saveToArchiveNote;
    boolean                             saveProformaToArchive;
    boolean                             suppressSuccessMsg;
    boolean                             executeOnlyData;
    DataAreaId                          reportExecutionContextDataAreaId;
    TableId                             reportExecutionContextTableId;
    RefRecId                            reportExecutionContextTableRecId;
    DocPrintMgmtOriginalCopyType        originalCopyType;
    str                                 printMgmtSettingName;
    DocArchiveContract                  archiveContract;
    container                           customSettings;
    boolean                             previewBeforePrint;
    boolean                             isTargetTemplateERBased;
    DocReportUsageType                  reportUsageType;
    List                                attachmentRuleList;    // List<DocReportAttachmentRule (class)>
    DocPdfEcryptionPassword             pdfPassword;
    DocEncryptionAlgorithm              pdfEncryptionAlgorithm;
    Set                                 pdfEncryptionConditionSet;
    DocPdfDocumentTitle                 documentTitle;
    DocPdfDocumentAuthor                documentAuthor;
    DocPdfDocumentSubject               documentSubject;
    DocPdfDocumentKeywords              documentKeywords;
    guid                                reportRunId;
    guid                                printDestinationRunId;
    DocPdfAConformanceLevel             pdfAConformanceLevel;

    // Not packed:
    System.Globalization.CultureInfo    templateCultureInfo;
    Map                                 placeholderMap;        // Map (placeholderName, DocPlaceholder object)
    DocPdfSignatureSettings             pdfSignatureSettings;
    DocReportSharePointMetadataSettings saveToArchiveSharePointMetadata;

    #define.currentPackVersion(1)

    #localmacro.currentList
        version,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        templateId,
        templateCompanyId,
        templateLanguageId,
        userId,
        hcmWorkerRecId,
        printDestination,
        isExecutingInBatch,
        batchId,
        batchJobId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        originalCopyType,
        printMgmtSettingName,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        isTargetTemplateERBased,
        reportUsageType,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords,
        reportRunId,
        printDestinationRunId,
        pdfEncryptionAlgorithm,
        pdfAConformanceLevel,
        saveProformaToArchive
    #endMacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current Batch table buffer for specified batch Id.
    /// </summary>
    /// <returns>The current Batch table buffer.</returns>
    public Batch currentBatch()
    {
        Batch currentBatch;
        if (batchId != 0)
        {
            select firstonly currentBatch where currentBatch.RecId == batchId;
        }
        return currentBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current BatchJob table buffer for specified batch job Id.
    /// </summary>
    /// <returns>The current BatchJob table buffer</returns>
    public BatchJob currentBatchJob()
    {
        BatchJob currentBatchJob;
        if (batchJobId != 0)
        {
            select firstonly currentBatchJob where currentBatchJob.RecId == batchJobId;
        }
        return currentBatchJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the DocPrintDestSettingsEmail class.
    /// </summary>
    /// <returns>An instance of the DocPrintDestSettingsEmail class.</returns>
    public DocPrintDestSettingsEmail emailPrintDestSettings()
    {
        return emailPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filePrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the DocPrintDestSettingsFile class.
    /// </summary>
    /// <returns>An instance of the DocPrintDestSettingsFile class</returns>
    public DocPrintDestSettingsFile filePrintDestSettings()
    {
        return filePrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDSPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocPrintDestSettingsGenerateDS class member
    /// </summary>
    /// <returns>DocPrintDestSettingsGenerateDS object</returns>
    public DocPrintDestSettingsGenerateDS generateDSPrintDestSettings()
    {
        return generateDSPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets archive contract which contains Document ID, Vend/Cust account and other information
    /// which are used for Print archive and Docentric Log.
    /// </summary>
    /// <returns>Report archive contract</returns>
    public DocArchiveContract archiveContract()
    {
        return archiveContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachmentRuleList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list which contains report attachment rules used when emailing or printing the report.
    /// </summary>
    /// <returns>List[DocReportAttachmentRule (class)]</returns>
    public List attachmentRuleList()
    {
        return attachmentRuleList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExecutingInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the report is run in batch.
    /// </summary>
    /// <returns>True if the report is run in batch; otherwise false</returns>
    public boolean isExecutingInBatch()
    {
        return isExecutingInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTargetTemplateERBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the used report template is ER based.
    /// </summary>
    /// <returns>True if the used report template is ER based; otherwise false</returns>
    public boolean isTargetTemplateERBased()
    {
        return isTargetTemplateERBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCbdDataSourceGenMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the report uses CBD datasource generation mode.
    /// </summary>
    /// <returns>True if the report uses CBD datasource generation mode; otherwise false</returns>
    public boolean isCbdDataSourceGenMode()
    {
        return isTargetTemplateERBased && reportUsageType == DocReportUsageType::ClassicSSRS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an instance of the DocReportRunContext class to container.
    /// </summary>
    /// <returns>A container with packed instance of the DocReportRunContext class</returns>
    public container pack()
    {
        int version = #currentPackVersion;
        container printerPrintDestSettingsContainer = conNull();
        container emailPrintDestSettingsContainer = conNull();
        container filePrintDestSettingsContainer = conNull();
        container generateDSPrintDestSettingsContainer = conNull();
        container archiveContractContainer = conNull();
        container attachmentRuleListContainer = conNull();
        container pdfEncryptionConditionSetContainer = conNull();
        container ret;

        if (filePrintDestSettings != null)
        {
            filePrintDestSettingsContainer = filePrintDestSettings.pack();
        }
        if (generateDSPrintDestSettings != null)
        {
            generateDSPrintDestSettingsContainer = generateDSPrintDestSettings.pack();
        }
        if (emailPrintDestSettings != null)
        {
            emailPrintDestSettingsContainer = emailPrintDestSettings.pack();
        }
        if (printerPrintDestSettings != null)
        {
            printerPrintDestSettingsContainer = printerPrintDestSettings.pack();
        }
        if (archiveContract != null)
        {
            archiveContractContainer = archiveContract.pack();
        }
        if (attachmentRuleList != null)
        {
            attachmentRuleListContainer = attachmentRuleList.pack();
        }
        if (pdfEncryptionConditionSet != null)
        {
            pdfEncryptionConditionSetContainer = pdfEncryptionConditionSet.pack();
        }

        ret = [#currentList,
               generateDSPrintDestSettingsContainer,
               printerPrintDestSettingsContainer,
               filePrintDestSettingsContainer,
               emailPrintDestSettingsContainer,
               archiveContractContainer,
               customSettings,
               attachmentRuleListContainer,
               pdfEncryptionConditionSetContainer];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the password used to encrypt generated PDF document.
    /// </summary>
    /// <param name = "_pdfPassword">Password</param>
    /// <returns>Password</returns>
    public DocPdfEcryptionPassword parmPdfPassword(DocPdfEcryptionPassword _pdfPassword = pdfPassword)
    {
        pdfPassword = _pdfPassword;
        return pdfPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the encryption algorithm used to encrypt generated PDF document.
    /// </summary>
    /// <param name = "_pdfEncryptionAlgorithm">Encryption algorithm</param>
    /// <returns>PDF encryption algorithm</returns>
    public DocEncryptionAlgorithm parmPdfEncryptionAlgorithm(DocEncryptionAlgorithm _pdfEncryptionAlgorithm = pdfEncryptionAlgorithm)
    {
        pdfEncryptionAlgorithm = _pdfEncryptionAlgorithm;
        return pdfEncryptionAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionConditionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the condition set used to determine when to encrypt the generated PDF document.
    /// </summary>
    /// <param name = "_pdfEncryptionConditionSet">When to encrypt condition set</param>
    /// <returns>When to encrypt condition set</returns>
    public Set parmPdfEncryptionConditionSet(Set _pdfEncryptionConditionSet = pdfEncryptionConditionSet)
    {
        pdfEncryptionConditionSet = _pdfEncryptionConditionSet;
        return pdfEncryptionConditionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfSignatureSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF signature settings.
    /// </summary>
    /// <param name = "_pdfSignatureSettings">PDF signature settings</param>
    /// <returns>PDF signature settings</returns>
    public DocPdfSignatureSettings parmPdfSignatureSettings(DocPdfSignatureSettings _pdfSignatureSettings = pdfSignatureSettings)
    {
        pdfSignatureSettings = _pdfSignatureSettings;
        return pdfSignatureSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPdfSignature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the report should be electronically signed.
    /// </summary>
    /// <returns>True if the report should be electronically signed; otherwise false.</returns>
    public boolean applyPdfSignature()
    {
        DocPdfSignatureSettings signatureSettings = this.parmPdfSignatureSettings();
        return signatureSettings != null && signatureSettings.parmIsEnabled() && signatureSettings.parmSignatureCertificateSettings() != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfAConformanceLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF/A conformance level.
    /// </summary>
    /// <param name = "_pdfAConformanceLevel">PDF/A conformance level</param>
    /// <returns>PDF/A conformance level</returns>
    /// <remarks>
    /// If this value is set, the output PDF document is converted to PDF/A format using the selected
    /// PDF/A conformance level. Conversion is not performed if this value is set to None.
    /// </remarks>
    public DocPdfAConformanceLevel parmPdfAConformanceLevel(DocPdfAConformanceLevel _pdfAConformanceLevel = pdfAConformanceLevel)
    {
        pdfAConformanceLevel = _pdfAConformanceLevel;
        return pdfAConformanceLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the title property for the generated PDF.
    /// </summary>
    /// <param name = "_documentTitle">Title</param>
    /// <returns>Title</returns>
    public DocPdfDocumentTitle parmDocumentTitle(DocPdfDocumentTitle _documentTitle = documentTitle)
    {
        documentTitle = _documentTitle;
        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentAuthor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the author property for the generated PDF.
    /// </summary>
    /// <param name = "_documentAuthor">Author</param>
    /// <returns>Author</returns>
    public DocPdfDocumentAuthor parmDocumentAuthor(DocPdfDocumentAuthor _documentAuthor = documentAuthor)
    {
        documentAuthor = _documentAuthor;
        return documentAuthor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the subject property for the generated PDF.
    /// </summary>
    /// <param name = "_documentSubject">Subject</param>
    /// <returns>Subject</returns>
    public DocPdfDocumentSubject parmDocumentSubject(DocPdfDocumentSubject _documentSubject = documentSubject)
    {
        documentSubject = _documentSubject;
        return documentSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentKeywords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the keywords property for the generated PDF.
    /// </summary>
    /// <param name = "_documentKeywords">Keywords</param>
    /// <returns>Keywords</returns>
    public DocPdfDocumentKeywords parmDocumentKeywords(DocPdfDocumentKeywords _documentKeywords = documentKeywords)
    {
        documentKeywords = _documentKeywords;
        return documentKeywords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveDocuTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the document type used for saving to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveDocuTypeId">Print archive's document type</param>
    /// <returns>Print archive's document type</returns>
    public DocuTypeId parmSaveToArchiveDocuTypeId(DocuTypeId _saveToArchiveDocuTypeId = saveToArchiveDocuTypeId)
    {
        saveToArchiveDocuTypeId = _saveToArchiveDocuTypeId;
        return saveToArchiveDocuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print archive note used when saving report to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveNote">Print archive note</param>
    /// <returns>Print archive note</returns>
    public DocPrintArchiveNote parmSaveToArchiveNote(DocPrintArchiveNote _saveToArchiveNote = saveToArchiveNote)
    {
        saveToArchiveNote = _saveToArchiveNote;
        return saveToArchiveNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveProformaToArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a value indicating whether the report is allowed to be saved in the print archive when executed as a proforma.
    /// </summary>
    /// <param name = "_saveProformaToArchive">True to allow archiving of the report when run as a proforma; otherwise, false.</param>
    /// <returns>The current setting of whether the report is allowed to be archived when run as a proforma.</returns>
    /// <remarks>
    /// This flag is used for reports that support the proforma scenario (SalesInvoice, PurchPurchaseOrder, SalesConfirm etc.).
    /// List of supported reports can be found in the DocPrintMgmtHelper::isProformaSupported() method.
    /// </remarks>
    public boolean parmSaveProformaToArchive(boolean _saveProformaToArchive = saveProformaToArchive)
    {
        saveProformaToArchive = _saveProformaToArchive;
        return saveProformaToArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveSharePointMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the SharePoint metadata settings used when saving report to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveSharePointMetadata">SharePoint metadata settings</param>
    /// <returns>SharePoint metadata settings</returns>
    public DocReportSharePointMetadataSettings parmSaveToArchiveSharePointMetadata(DocReportSharePointMetadataSettings _saveToArchiveSharePointMetadata = saveToArchiveSharePointMetadata)
    {
        saveToArchiveSharePointMetadata = _saveToArchiveSharePointMetadata;
        return saveToArchiveSharePointMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewBeforePrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag which specifies should the report be previewed before printing.
    /// </summary>
    /// <param name = "_previewBeforePrint">Preview before printing</param>
    /// <returns>Preview before printing</returns>
    public boolean parmPreviewBeforePrint(boolean _previewBeforePrint = previewBeforePrint)
    {
        previewBeforePrint = _previewBeforePrint;
        return previewBeforePrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets custom settings. This container field can contain anything, e.g. packed custom class,
    /// that can store some report specific value which can be used along report execution pipeline.
    /// </summary>
    /// <param name = "_customSettings">Custom report settings</param>
    /// <returns>Custom report settings</returns>
    public container parmCustomSettings(container _customSettings = customSettings)
    {
        customSettings = _customSettings;
        return customSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecuteOnlyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets if only the report data and settings should be executed, without printing
    /// the report to any print destination. All report execution settings will be completed/handled
    /// (e.g. the report data source will be created, placeholders will be replaced, etc.).
    /// </summary>
    /// <param name="_executeOnlyData">Should only the report data and settings be executed.</param>
    /// <returns>True if the report data and settings only should be executed, without printing the report.</returns>
    /// <remarks>
    /// Set this flag to true if you don't want to print the report to any print destination
    /// but only to retrieve the report data and execution settings. Afterwards you can use
    /// the same completed printReportSettings() and file/email/printerPrintDestSettings()
    /// to print the report to multiple print destinations from the code,
    /// using the DocGeneratorClient or DocGeneratorServer class.
    /// </remarks>
    public boolean parmExecuteOnlyData(boolean _executeOnlyData = executeOnlyData)
    {
        executeOnlyData = _executeOnlyData;
        return executeOnlyData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the currently selected print destination.
    /// </summary>
    /// <param name="_printDestination">The current print destination.</param>
    /// <returns>The current print destination.</returns>
    public DocPrintDestination parmPrintDestination(DocPrintDestination _printDestination = printDestination)
    {
        printDestination = _printDestination;
        return printDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the current report caption.
    /// </summary>
    /// <param name="_reportCaption">Current report caption.</param>
    /// <returns>Current report caption.</returns>
    public DocReportCaption parmReportCaption(DocReportCaption _reportCaption = reportCaption)
    {
        reportCaption = _reportCaption;
        return reportCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether to save the report to Print Archive.
    /// </summary>
    /// <param name = "_saveToArchive">Specifies whether to save the report to Print Archive</param>
    /// <returns>True if the report is to be saved to Print Archive; otherwise false</returns>
    public boolean parmSaveToArchive(boolean _saveToArchive = saveToArchive)
    {
        saveToArchive = _saveToArchive;
        return saveToArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuppressSuccessMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets if the success message about report execution should be suppressed.
    /// </summary>
    /// <param name="_suppressSuccessMsg">Should be the success message about printing the report suppressed.</param>
    /// <returns>True if the success message about printing the report is suppressed.</returns>
    /// <remarks>
    /// Set this flag to true if the report needs to run silently i.e. from the code
    /// without message about successful report execution.
    /// </remarks>
    public boolean parmSuppressSuccessMsg(boolean _suppressSuccessMsg = suppressSuccessMsg)
    {
        suppressSuccessMsg = _suppressSuccessMsg;
        return suppressSuccessMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current template company ID, which is inferred from the report runtime company.
    /// Do not use this method as a setter, please see the remarks below.
    /// </summary>
    /// <param name="_templateCompanyId">Current template company ID.</param>
    /// <returns>Current template company ID.</returns>
    /// <remarks>
    /// This is a read-only setting. From 3.3.9, changing this setting doesn't affect report execution pipeline in any way.
    /// </remarks>
    public CompanyId parmTemplateCompanyId(CompanyId _templateCompanyId = templateCompanyId)
    {
        templateCompanyId = _templateCompanyId;
        return templateCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets current template ID.
    /// </summary>
    /// <param name="_templateId">Current template ID.</param>
    /// <returns>Current template ID.</returns>
    public DocReportTemplateId parmTemplateId(DocReportTemplateId _templateId = templateId)
    {
        templateId = _templateId;
        return templateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the template language ID, which is inferred from the report runtime language.
    /// </summary>
    /// <param name="_templateLanguageId">Current template language ID.</param>
    /// <returns>Current template language ID.</returns>
    /// <remarks>
    /// From 3.3.9, changing this setting doesn't affect report execution pipeline in other way except
    /// the template selection. However, since this can lead to wrong template selection, the recommended approach
    /// to change the runtime language, which will affect all aspects including template selection and label translations, 
    /// is to use dspClass.parmParams().parmDsLanguageId() in the dspClass.preRunGenerateDS() method.
    /// </remarks>
    public LanguageId parmTemplateLanguageId(LanguageId _templateLanguageId = templateLanguageId)
    {
        templateLanguageId = _templateLanguageId;
        return templateLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current user who executes the report.
    /// </summary>
    /// <returns>Current user who executes the report.</returns>
    public UserId userId()
    {
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hcmWorkerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current worker who executes the report.
    /// </summary>
    /// <returns>Current worker who executes the report.</returns>
    public HcmWorkerRecId hcmWorkerRecId()
    {
        return hcmWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTemplateIdToSsrsBuiltInDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Template ID to the @SSRS_BUILTIN_DESIGN@ token.
    /// If you are switching between SSRS design and a Docentric template,
    /// Email and File print destination settings should be handled additionally.
    /// Invoke parmEmailAttachmentUseSsrsBuiltInDesign() / parmUseSsrsBuiltInDesign() methods as well as
    /// change the report output format using parmEmailAttachmentFileFormatSrs() / parmOutputFileFormatSrs().
    /// </summary>
    public void setTemplateIdToSsrsBuiltInDesign()
    {
        templateId = DocConstant::BuiltInSsrsDesignPlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintingSrsOriginalDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the original built-in SSRS design be printed instead of Docentric template.
    /// </summary>
    /// <returns>True if the built-in SSRS design should be used</returns>
    public boolean isPrintingSrsOriginalDesign()
    {
        return templateId == DocConstant::BuiltInSsrsDesignPlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTemplateIdToDocentricDefaultTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Template ID to the @DOCENTRIC_DEFAULT_TEMPLATE@ token.
    /// Use the parmTemplateCompanyId() and parmTemplateLanguageId() methods
    /// to change the language and company which also affect template selection.
    /// If you are switching between SSRS design and a Docentric template,
    /// Email and File print destination settings should be handled additionally.
    /// Invoke parmEmailAttachmentUseSsrsBuiltInDesign() / parmUseSsrsBuiltInDesign() methods as well as
    /// change the report output format using parmEmailAttachmentFileFormatSrs() / parmOutputFileFormatSrs().
    /// </summary>
    public void setTemplateIdToDocentricDefaultTemplate()
    {
        templateId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the DocPrintDestSettingsPrinter class.
    /// </summary>
    /// <returns>An instance of the DocPrintDestSettingsPrinter class</returns>
    public DocPrintDestSettingsPrinter printerPrintDestSettings()
    {
        return printerPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report ID.
    /// </summary>
    /// <returns>Report ID</returns>
    public DocReportId reportId()
    {
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report menu item name.
    /// </summary>
    /// <returns>Report menu item name</returns>
    public MenuItemName reportMenuItemName()
    {
        return reportMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportMenuItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report menu item type.
    /// </summary>
    /// <returns>Report menu item type</returns>
    public MenuItemType reportMenuItemType()
    {
        return reportMenuItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalCopyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Original/Copy type. Applicable only for Print management reports.
    /// Do not use this method as a setter, please see the remarks below.
    /// </summary>
    /// <param name = "_originalCopyType">Original/Copy type</param>
    /// <returns>Original/Copy type</returns>
    /// <remarks>
    /// This is a read-only setting. Changing this setting doesn't affect the resulting report in any way.
    /// </remarks>
    public DocPrintMgmtOriginalCopyType parmOriginalCopyType(DocPrintMgmtOriginalCopyType _originalCopyType = originalCopyType)
    {
        originalCopyType = _originalCopyType;
        return originalCopyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtSettingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Print management setting name. Applicable only for Print management reports.
    /// </summary>
    /// <returns>Print management setting name</returns>
    public str getPrintMgmtSettingName()
    {
        return printMgmtSettingName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>reportRunId</c> parameter.
    /// </summary>
    /// <returns>The value of <c>reportRunId</c> parameter.</returns>
    /// <remarks>
    /// Report Run Id is a unique identifier given to each report run instance, generated by <c>SrsReportRunController</c>.
    /// - When a Print management report is printed, Report Run Id contains the same guid for each executed print management setting.
    /// - When a multi-document report is printed such as Customer account statement, Report Run Id contains the same guid for
    /// all printed reports (one report is printed for each of the selected customers).
    /// </remarks>
    public guid getReportRunId()
    {
        return reportRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportRunIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ReportRunId (guid) as a string without braces.
    /// </summary>
    /// <returns>ReportRunId as a string</returns>
    public str getReportRunIdStr()
    {
        return DocGlobalHelper::guid2strWithoutBraces(reportRunId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>printDestinationRunId</c> parameter.
    /// </summary>
    /// <returns>The value of <c>printDestinationRunId</c> parameter.</returns>
    /// <remarks>
    /// Print Destination Run Id is a unique identifier given to each print destination run,
    /// generated by <c>SRSPrintDestinationSettingsDelegates_printReport</c>, a subscriber method
    /// for the SRSPrintDestinationSettingsDelegates.printReport delegate.
    /// This becomes a meaningful information when a report is printed to a Preconfigured Docentric
    /// print destination, which usually contains multiple print destinations.
    /// </remarks>
    public guid getPrintDestinationRunId()
    {
        return printDestinationRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationRunIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets PrintDestinationRunId (guid) as a string without braces.
    /// </summary>
    /// <returns>PrintDestinationRunId as a string</returns>
    public str getPrintDestinationRunIdStr()
    {
        return DocGlobalHelper::guid2strWithoutBraces(printDestinationRunId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets report execution context data area ID. Should be used
    /// in combination with the parmReportExecutionContextTableId() and
    /// the parmReportExecutionContextTableRecId() methods.
    /// Report execution context table is a table that report can be attached to
    /// if the SaveToAttachments flag with the File print destination is set.
    /// </summary>
    /// <param name="_reportExecutionContextDataAreaId">Report execution context data area ID.</param>
    /// <returns>Report execution context data area ID.</returns>
    public DataAreaId parmReportExecutionContextDataAreaId(DataAreaId _reportExecutionContextDataAreaId = reportExecutionContextDataAreaId)
    {
        reportExecutionContextDataAreaId = _reportExecutionContextDataAreaId;
        return reportExecutionContextDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets report execution context data area ID. Should be used
    /// in combination with the parmReportExecutionContextDataAreaId() and
    /// the parmReportExecutionContextTableRecId() methods.
    /// Report execution context table is a table that report can be attached to
    /// if the SaveToAttachments flag with the File print destination is set.
    /// </summary>
    /// <param name="_reportExecutionContextTableId">Report execution context table ID.</param>
    /// <returns>Report execution context table ID.</returns>
    public TableId parmReportExecutionContextTableId(TableId _reportExecutionContextTableId = reportExecutionContextTableId)
    {
        reportExecutionContextTableId = _reportExecutionContextTableId;
        return reportExecutionContextTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets report execution context data area ID. Should be used
    /// in combination with the parmReportExecutionContextTableId() and
    /// the parmReportExecutionContextDataAreaId() methods.
    /// Report execution context table is a table that report can be attached to
    /// if the SaveToAttachments flag with the File print destination is set.
    /// </summary>
    /// <param name="_reportExecutionContextTableRecId">Report execution context table RecId.</param>
    /// <returns>Report execution context table RecId.</returns>
    public RefRecId parmReportExecutionContextTableRecId(RefRecId _reportExecutionContextTableRecId = reportExecutionContextTableRecId)
    {
        reportExecutionContextTableRecId = _reportExecutionContextTableRecId;
        return reportExecutionContextTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportExecutionContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report execution context record that is going to be used for printing report
    /// to File, if the option 'Save to attachments' is turned on.
    /// </summary>
    /// <param name="_common">Report execution context record.</param>
    /// <remarks>
    /// Use this method in order to change/set the report execution context record.
    /// Default report execution context record is infer from _args.record().
    /// </remarks>
    public void setReportExecutionContextRecord(Common _common)
    {
        this.parmReportExecutionContextDataAreaId(_common.dataAreaId);
        this.parmReportExecutionContextTableId(_common.TableId);
        this.parmReportExecutionContextTableRecId(_common.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportExecutionContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report execution context record that is going to be used for printing report
    /// to File, if the option 'Save to attachments' is turned on.
    /// </summary>
    /// <returns>Returns report execution context record.</returns>
    public Common getReportExecutionContextRecord()
    {
        Common reportExecutionContextRecord = null;
        
        if (this.parmReportExecutionContextTableId() && this.parmReportExecutionContextTableRecId())
        {
            reportExecutionContextRecord = DocGlobalHelper::getTableRecord(
                                                this.parmReportExecutionContextTableId(),
                                                this.parmReportExecutionContextTableRecId(),
                                                this.parmReportExecutionContextDataAreaId());
        }

        return reportExecutionContextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSaveToAttachmentsRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call this method in the overrideReportRunSettings() method of your custom DSP class
    /// to set the record that the report will be attached to. If you don't set the Saving
    /// to Attachments record, it will be resolved automatically later in the pipeline if possible.
    /// Note that Saving to Attachment Record type will automatically be changed to Custom record.
    /// </summary>
    /// <param name = "_saveToAttachmentsRecord">Saving to Attachments record</param>
    public void setSaveToAttachmentsRecord(Common _saveToAttachmentsRecord)
    {
        this.filePrintDestSettings().parmSaveToAttachmentsRecordType(DocSaveToAttachmentsRecordType::CustomRecord);
        this.filePrintDestSettings().setSaveToAttachmentsRecord(_saveToAttachmentsRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSaveToAttachmentsCustomRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call this method in the overrideReportRunSettings() method of your custom DSP class
    /// to set the record that the report will be attached to, but only in the case that
    /// the selected Save to Attachments Record type is Custom record.
    /// </summary>
    /// <param name = "_saveToAttachmentsCustomRecord">Saving to Attachments Custom record</param>
    /// <returns>True if the provided record is set, i.e. if Save to Attachments Record type is Custom record</returns>
    public boolean setSaveToAttachmentsCustomRecord(Common _saveToAttachmentsCustomRecord)
    {
        return this.filePrintDestSettings().setSaveToAttachmentsRecord(_saveToAttachmentsCustomRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSaveToAttachmentsRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Saving to Attachments record if set. If not, the Saving to Attachments record is being calculated.
    /// </summary>
    /// <returns>Saving to Attachments record</returns>
    public Common getSaveToAttachmentsRecord()
    {
        Common saveToAttachmentsRecord = this.filePrintDestSettings().getSaveToAttachmentsRecord();
        if (saveToAttachmentsRecord)
        {
            return saveToAttachmentsRecord;
        }

        // Try to resolve the record that the report is going to be attached to
        // using _printReportSettings and/or _printReportSettings.parmArchiveContract().
        switch (this.filePrintDestSettings().parmSaveToAttachmentsRecordType())
        {
            case DocSaveToAttachmentsRecordType::ContextRecord:
                saveToAttachmentsRecord = this.getReportExecutionContextRecord();
                break;

            case DocSaveToAttachmentsRecordType::Journal:
                saveToAttachmentsRecord = this.archiveContract().getJournalTableRecord();
                break;

            case DocSaveToAttachmentsRecordType::AccountTable:
                saveToAttachmentsRecord = this.archiveContract().getAccountTableRecord();
                break;

            case DocSaveToAttachmentsRecordType::SourceTable:
                saveToAttachmentsRecord = this.archiveContract().getSourceTableRecord();
                break;

            case DocSaveToAttachmentsRecordType::CustomRecord:
                // To be handled in the custom DSP class.
                break;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported Save to Attachments record type: %1', this.filePrintDestSettings().parmSaveToAttachmentsRecordType()));
        }

        return saveToAttachmentsRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintMgmtReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the report is a Print management report.
    /// </summary>
    /// <returns>True, if the report is a Print management report</returns>
    public boolean isPrintMgmtReport()
    {
        return DocPrintMgmtHelper::isPrintMgmtReport(reportId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets (the first) Print management type of the report, if this is a Print management report.
    /// </summary>
    /// <returns>The first Print management document type</returns>
    /// <remarks>
    /// PurchPurchaseOrder.Report and RFQSend.Report are such reports with multiple Print management document types.
    /// Usually, there is a single Print management document type for a SSRS report design name.
    /// To get all Print management document types for a SSRS report design name, use DocPrintMgmtHelper::getPrintMgmtDocumentTypes().
    /// </remarks>
    public PrintMgmtDocumentType getFirstPrintMgmtDocumentType()
    {
        return DocPrintMgmtHelper::getFirstPrintMgmtDocumentType(reportId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintingDefaultDocentricTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the printing template is a default Docentric report template.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isPrintingDefaultDocentricTemplate()
    {
        if (this.isPrintingSrsOriginalDesign())
        {
            return false;
        }

        if (templateId == '')  // This means @DOCENTRIC_DEFAULT_TEMPLATE@
        {
            return true;
        }

        str defaultTemplateId = DocReportTable::findDefaultTemplateReportId(reportId, templateCompanyId, templateLanguageId).TemplateId;
        if (defaultTemplateId == '')
        {
            // No templates found for the report.
            return false;
        }

        return templateId == defaultTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveDefaultDocentricTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the default Docentric template.
    /// </summary>
    public void resolveDefaultDocentricTemplate()
    {
        if (templateId == '')  // This means @DOCENTRIC_DEFAULT_TEMPLATE@
        {
            templateId = DocReportTable::findDefaultTemplateReportId(reportId, templateCompanyId, templateLanguageId, false).TemplateId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateCultureInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the culture info of the report template.
    /// </summary>
    /// <param name = "_templateCultureInfo">The culture info of the report template</param>
    /// <returns>The culture info of the report template</returns>
    public System.Globalization.CultureInfo parmTemplateCultureInfo(System.Globalization.CultureInfo _templateCultureInfo = templateCultureInfo)
    {
        if (prmIsDefault(_templateCultureInfo)) // The Getter is called.
        {
            if (templateCultureInfo == null && templateLanguageId != '')
            {
                templateCultureInfo = DocGlobalHelper::getCultureInfo(templateLanguageId);
            }
        }
        else // The Setter is called.
        {
            templateCultureInfo = _templateCultureInfo;
        }

        return templateCultureInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>placeholderMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains all placeholders for the report:
    /// - All Custom placeholders.
    /// - Those Standard placeholders which are used in the current print destination settings.
    /// - No User-defined placeholders.
    /// </summary>
    /// <returns>Placeholder map</returns>
    public Map placeholderMap()
    {
        return placeholderMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPlaceholderToMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a placeholder to the placeholder map.
    /// </summary>
    /// <param name = "_placeholderName">A placeholder name</param>
    /// <param name = "_placeholderValue">A placeholder value</param>
    /// <param name = "_placeholderKind">A placeholder type</param>
    /// <param name = "_formatLanguage">A format language</param>
    /// <param name = "_formatString">A format string</param>
    /// <returns>True, if a placeholder was added to the map; False, if a placeholder already exists in the map</returns>
    public boolean addPlaceholderToMap(
        str _placeholderName,
        anytype _placeholderValue,
        DocPlaceholderKind _placeholderKind,
        LanguageId _formatLanguage = '',
        DocFormatString _formatString = '')
    {
        if (placeholderMap.exists(_placeholderName))
        {
            return false;
        }

        str placeholderValueStr;
        if (typeOf(_placeholderValue) == Types::String)
        {
            placeholderValueStr = _placeholderValue;
        }
        else
        {
            System.Globalization.CultureInfo cultureInfo = _formatLanguage ? DocGlobalHelper::getCultureInfo(_formatLanguage) : this.parmTemplateCultureInfo();
            placeholderValueStr = DocGlobalHelper::formatData(_placeholderValue, cultureInfo, DocApplyTimeZone::UserPreferredTimeZone);
        }

        DocPlaceholder placeholder = DocPlaceholder::constructTextPlaceholder(
                                                        _placeholderName, 
                                                        placeholderValueStr, 
                                                        _placeholderKind, 
                                                        _formatLanguage ? _formatLanguage : this.parmTemplateLanguageId(),
                                                        _formatString);

        placeholderMap.insert(_placeholderName, placeholder);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocPlaceholder object for the given placeholder name.
    /// </summary>
    /// <param name = "_placeholderName">Placeholder name</param>
    /// <returns>The corresponding DocPlaceholder object if exists, otherwise null.</returns>
    public DocPlaceholder getPlaceholder(str _placeholderName)
    {
        if (!placeholderMap.exists(_placeholderName))
        {
            return null;
        }

        DocPlaceholder placeholder = placeholderMap.lookup(_placeholderName);
        return placeholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceInvalidCharactersInOutputFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces invalid characters in the specified output filename.
    /// </summary>
    public void replaceInvalidCharactersInOutputFilename()
    {
        switch (printDestination)
        {
            case DocPrintDestination::File:
                filePrintDestSettings.escapeOutputFilename();
                break;
            case DocPrintDestination::Email:
                emailPrintDestSettings.escapeAttachmentFilename();
                break;
            case DocPrintDestination::Printer:
                printerPrintDestSettings.escapePdfFilename();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the members of the DocReportRunContext class.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    /// <param name = "_generateDSPrintDestSettings">An instance of the DocPrintDestSettingsGenerateDS class</param>
    /// <param name = "_printerPrintDestSettings">An instance of the DocPrintDestSettingsPrinter class</param>
    /// <param name = "_filePrintDestSettings">An instance of the DocPrintDestSettingsFile class</param>
    /// <param name = "_emailPrintDestSettings">An instance of the DocPrintDestSettingsEmail class</param>
    /// <param name = "_isExecutingInBatch">Specifies whether the report is run in batch</param>
    /// <param name = "_batchId">Batch Id</param>
    /// <param name = "_batchJobId">Batch job Id</param>
    /// <param name = "_isTargetTemplateERBased">Specifies whether the report template is ER based</param>
    /// <param name = "_reportUsageType">Report usage type</param>
    private void setParams(
        DocPrintReportSettings          _printReportSettings,
        DocPrintDestSettingsGenerateDS  _generateDSPrintDestSettings,
        DocPrintDestSettingsPrinter     _printerPrintDestSettings,
        DocPrintDestSettingsFile        _filePrintDestSettings,
        DocPrintDestSettingsEmail       _emailPrintDestSettings,
        boolean                         _isExecutingInBatch,
        RecId                           _batchId,
        RecId                           _batchJobId,
        boolean                         _isTargetTemplateERBased,
        DocReportUsageType              _reportUsageType)
    {
        reportId                = _printReportSettings.parmReportId();
        reportCaption           = _printReportSettings.parmReportCaption();
        templateId              = _printReportSettings.parmTemplateId();
        templateLanguageId      = _printReportSettings.parmLanguageId();
        templateCompanyId       = _printReportSettings.parmCompanyId();
        userId                  = _printReportSettings.parmUserId();
        hcmWorkerRecId          = _printReportSettings.parmHcmWorkerRecId();
        
        printDestination        = _printReportSettings.parmPrintDestination();
        previewBeforePrint      = _printReportSettings.parmPreviewBeforePrint();

        reportMenuItemName      = _printReportSettings.parmReportMenuItemName();
        reportMenuItemType      = _printReportSettings.parmReportMenuItemType();
        originalCopyType        = _printReportSettings.parmOriginalCopyType();
        printMgmtSettingName    = _printReportSettings.parmPrintMgmtSettingName();
               
        saveToArchive                    = _printReportSettings.parmSaveToArchive();
        saveToArchiveDocuTypeId          = _printReportSettings.parmSaveToArchiveDocuTypeId();
        saveToArchiveNote                = _printReportSettings.parmSaveToArchiveNote();
        saveProformaToArchive            = _printReportSettings.parmSaveProformaToArchive();
        saveToArchiveSharePointMetadata  = _printReportSettings.parmSaveToArchiveSharePointMetadata();
        
        suppressSuccessMsg      = _printReportSettings.parmSuppressSuccessMsg();
        executeOnlyData         = _printReportSettings.parmExecuteOnlyData();
        reportRunId             = _printReportSettings.getReportRunId();
        printDestinationRunId   = _printReportSettings.getPrintDestinationRunId();
        
        customSettings          = _printReportSettings.parmCustomSettings();

        reportExecutionContextDataAreaId = _printReportSettings.parmReportExecutionContextDataAreaId();
        reportExecutionContextTableId    = _printReportSettings.parmReportExecutionContextTableId();
        reportExecutionContextTableRecId = _printReportSettings.parmReportExecutionContextTableRecId();
        
        documentTitle           = _printReportSettings.parmDocumentTitle();
        documentAuthor          = _printReportSettings.parmDocumentAuthor();
        documentSubject         = _printReportSettings.parmDocumentSubject();
        documentKeywords        = _printReportSettings.parmDocumentKeywords();

        pdfPassword             = _printReportSettings.parmPdfPassword();
        pdfEncryptionAlgorithm  = _printReportSettings.parmPdfEncryptionAlgorithm();
        pdfAConformanceLevel    = _printReportSettings.parmPdfAConformanceLevel();

        isTargetTemplateERBased = _isTargetTemplateERBased;
        reportUsageType         = _reportUsageType;
        isExecutingInBatch      = _isExecutingInBatch;
        batchId                 = _batchId;
        batchJobId              = _batchJobId;

        // Printer print destination settings.
        printerPrintDestSettings = _printerPrintDestSettings;
        if (printerPrintDestSettings == null)
        {
            printerPrintDestSettings = new DocPrintDestSettingsPrinter();
            printerPrintDestSettings.setDefaultParmValues(reportId, reportCaption);
        }

        // Email print destination settings.
        emailPrintDestSettings = _emailPrintDestSettings;
        if (emailPrintDestSettings == null)
        {
            emailPrintDestSettings = new DocPrintDestSettingsEmail();
            emailPrintDestSettings.setDefaultParmValues(reportId, reportCaption, true);
        }
        
        // File print destination settings.
        filePrintDestSettings = _filePrintDestSettings;
        if (filePrintDestSettings == null)
        {
            filePrintDestSettings = new DocPrintDestSettingsFile();
            filePrintDestSettings.setDefaultParmValues(reportId, reportCaption);
        }

        generateDSPrintDestSettings = _generateDSPrintDestSettings;
        if (generateDSPrintDestSettings == null)
        {
            generateDSPrintDestSettings = new DocPrintDestSettingsGenerateDS();
            generateDSPrintDestSettings.setDefaultParmValues(reportId);
        }
        
        // Archive contract.
        archiveContract = _printReportSettings.parmArchiveContract();
        if (archiveContract == null)
        {
            archiveContract = new DocArchiveContract();
        }
        // Report attachment rule list.
        attachmentRuleList = _printReportSettings.parmAttachmentRuleList();
        if (attachmentRuleList == null)
        {
            attachmentRuleList = new List(Types::Class);
        }

        // When to encrypt conditions.
        pdfEncryptionConditionSet = _printReportSettings.parmPdfEncryptionConditionSet();
       
        // PDF signature settings.
        pdfSignatureSettings = _printReportSettings.parmPdfSignatureSettings();

        // Placeholder map.
        placeholderMap = _printReportSettings.parmPlaceholderMap();
        if (placeholderMap == null)
        {
            placeholderMap = new Map(Types::String, Types::Class);  // Map (placeholderName, DocPlaceholder object)
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the container with an instance of the DocReportRunContext class.
    /// </summary>
    /// <param name = "packedClass">Packed container</param>
    /// <returns>True if the unpacking was successful; otherwise false</returns>
    public boolean unpack(container packedClass)
    {
        container       printerPrintDestSettingsContainer;
        container       emailPrintDestSettingsContainer;
        container       filePrintDestSettingsContainer;
        container       archiveContractContainer;
        container       attachmentRuleListContainer;
        container       pdfEncryptionConditionSetContainer;
        int             version;
        boolean         ret = false;

        if (typeOf(conPeek(packedClass, 1)) == Types::Integer)
        {
            version = conPeek(packedClass, 1);

            if (version == #currentPackVersion)
            {
                [#currentList, printerPrintDestSettingsContainer,
                 emailPrintDestSettingsContainer, filePrintDestSettingsContainer, 
                 archiveContractContainer, customSettings, attachmentRuleListContainer] = packedClass;

                ret = true;
            }

            
            filePrintDestSettings = new DocPrintDestSettingsFile();
            if (filePrintDestSettingsContainer != conNull())
            {
                ret = filePrintDestSettings.unpack(filePrintDestSettingsContainer) && ret;
            }

            emailPrintDestSettings = new DocPrintDestSettingsEmail();
            if (emailPrintDestSettingsContainer != conNull())
            {
                ret = emailPrintDestSettings.unpack(emailPrintDestSettingsContainer) && ret;
            }

            printerPrintDestSettings = new DocPrintDestSettingsPrinter();
            if (printerPrintDestSettingsContainer != conNull())
            {
                ret = printerPrintDestSettings.unpack(printerPrintDestSettingsContainer) && ret;
            }

            archiveContract = new DocArchiveContract();
            if (archiveContractContainer != conNull())
            {
                ret = archiveContract.unpack(archiveContractContainer) && ret;
            }
            
            if (attachmentRuleListContainer != conNull())
            {
                attachmentRuleList = List::create(attachmentRuleListContainer);
            }
            else
            {
                attachmentRuleList = new List(Types::Class);
            }

            if (pdfEncryptionConditionSetContainer != conNull())
            {
                pdfEncryptionConditionSet = Set::create(pdfEncryptionConditionSetContainer);
            }
            else
            {
                pdfEncryptionConditionSet = null;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocReportRunContext class.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    /// <param name = "_printerPrintDestSettings">An instance of the DocPrintDestSettingsPrinter class</param>
    /// <param name = "_emailPrintDestSettings">An instance of the DocPrintDestSettingsEmail class</param>
    /// <param name = "_filePrintDestSettings">An instance of the DocPrintDestSettingsFile class</param>
    /// <param name = "_batchId">Batch Id</param>
    /// <param name = "_batchJobId">Batch job Id</param>
    /// <param name = "_isTargetTemplateERBased">Specifies whether the report template is ER based</param>
    /// <param name = "_reportTable">The DocReportTable table buffer </param>
    /// <param name = "_generateDSPrintDestSettings">An instance of the DocPrintDestSettingsGenerateDS class</param>
    /// <returns>An instance of the DocReportRunContext class</returns>
    public static DocReportRunContext construct(
        DocPrintReportSettings          _printReportSettings,
        DocPrintDestSettingsPrinter     _printerPrintDestSettings,
        DocPrintDestSettingsEmail       _emailPrintDestSettings,
        DocPrintDestSettingsFile        _filePrintDestSettings,
        RecId                           _batchId,
        RecId                           _batchJobId,
        boolean                         _isTargetTemplateERBased,
        DocReportTable                  _reportTable,
        DocPrintDestSettingsGenerateDS  _generateDSPrintDestSettings)
    {
        DocReportRunContext reportRunContext;
        DocPrintDestination printDestination = _printReportSettings.parmPrintDestination();

        if (printDestination == DocPrintDestination::Printer && _printerPrintDestSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printerPrintDestSettings is not set');
        }
        if (printDestination == DocPrintDestination::Email && _emailPrintDestSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _emailPrintDestSettings is not set');
        }
        if (printDestination == DocPrintDestination::File && _filePrintDestSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _filePrintDestSettings is not set');
        }

        reportRunContext = new DocReportRunContext();

        // Set reportUsageType.
        DocReportUsageType reportUsageType;
        if (_reportTable.RecId == 0)
        {
            // If report is not registered in Docentric report setup, it means that
            // an SSRS is executing using a Docentric print destination.
            reportUsageType = DocReportUsageType::ClassicSSRS;
        }
        else
        {
            reportUsageType = _reportTable.ReportUsageType;
        }

        // Set all fields.
        reportRunContext.setParams(_printReportSettings,
                                   _generateDSPrintDestSettings, _printerPrintDestSettings, _filePrintDestSettings, _emailPrintDestSettings,
                                   _batchId != 0 || _batchJobId != 0, _batchId, _batchJobId,
                                   _isTargetTemplateERBased,
                                   reportUsageType);

        return reportRunContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>