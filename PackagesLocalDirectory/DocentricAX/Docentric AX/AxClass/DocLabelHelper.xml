<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLabelHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The classs DocLabelHelper is a helper class for labels.
/// </summary>
public class DocLabelHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHelpTextForEdt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the help text for the specified extended data type Id.
    /// </summary>
    /// <param name = "_edtId">Extended data type Id</param>
    /// <returns>Help text for the specified extended data type Id</returns>
    public static str getHelpTextForEdt(int _edtId)
    {
        SysDictType  dictType = new SysDictType(_edtId);
    
        if (dictType)
        {
            return dictType.helpLabelId();
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpTextForEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the help text for the specified enum Id.
    /// </summary>
    /// <param name = "_enumId">Enum Id</param>
    /// <returns>Help text for the specified enum Id</returns>
    public static str getHelpTextForEnum(EnumId _enumId)
    {
        SysDictEnum  dictEnum = new SysDictEnum(_enumId);
    
        if (dictEnum)
        {
            return dictEnum.helpDefined();
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpTextForField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the help text for the specified field Id.
    /// </summary>
    /// <param name = "_tableId">Table Id</param>
    /// <param name = "_fieldId">Field Id</param>
    /// <returns>Help text for the specified field Id</returns>
    public static str getHelpTextForField(TableId _tableId, FieldId _fieldId)
    {
        SysDictField  dictField = new SysDictField(_tableId, _fieldId);
        if (dictField)
        {
            return dictField.helpLabelId();
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForEdt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for the specified extended data type Id.
    /// </summary>
    /// <param name = "_edtId">Extended data type Id</param>
    /// <returns>Label for the specified extended data type Id</returns>
    public static str getLabelForEdt(int _edtId)
    {
        SysDictType  dictType = new SysDictType(_edtId);
    
        if (dictType)
        {
            return dictType.labelLabel();
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for the specified enum Id.
    /// </summary>
    /// <param name = "_enumId">Enum Id</param>
    /// <returns>Label for the specified enum Id</returns>
    public static str getLabelForEnum(EnumId _enumId)
    {
        SysDictEnum dictEnum = new SysDictEnum(_enumId);
    
        if (dictEnum)
        {
            return dictEnum.labelDefined();
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for the specified enum value.
    /// </summary>
    /// <param name = "_enumId">Enum Id</param>
    /// <param name = "_enumValue">Enum value</param>
    /// <param name = "_languageId">Language Id</param>
    /// <returns>Label for the specified enum value</returns>
    public static LabelType getLabelForEnumValue(EnumId _enumId, anytype _enumValue, LanguageId _languageId = currentUserLanguage())
    {
        int enumValueInt = DocGlobalHelper::getEnumValueAsInteger(_enumValue);
    
        SysDictEnum sysDictEnum = new SysDictEnum(_enumId);
        int enumValueIndex = DocGlobalHelper::sysDictEnum_value2Index(_enumId, enumValueInt); //sysDictEnum.value2Index(enumValueInt);
    
        str enumValueLabelId = sysDictEnum.index2LabelId(enumValueIndex);
        str enumValueLabel = SysLabel::labelId2String(enumValueLabelId, _languageId);
        if (!enumValueLabel)
        {
            enumValueLabel = sysDictEnum.value2Label(enumValueInt);
            if (!enumValueLabel)
            {
                enumValueLabel = sysDictEnum.value2Name(enumValueInt);
            }
        }
    
        return enumValueLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for the specified field Id.
    /// </summary>
    /// <param name = "_tableId">Table Id</param>
    /// <param name = "_fieldId">Field Id</param>
    /// <returns>Label for the specified field Id</returns>
    public static str getLabelForField(TableId _tableId, FieldId _fieldId)
    {
        SysDictField dictField = new SysDictField(_tableId, _fieldId);
        if (dictField)
        {
            return dictField.labelLabel();
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for the specified menu item.
    /// </summary>
    /// <param name = "_menuItemName">Menu item name</param>
    /// <param name = "_menuItemType">Menu item type</param>
    /// <returns>Label for the specified menu item</returns>
    public static str getLabelForMenuItem(str _menuItemName, MenuItemType _menuItemType)
    {
        #Properties

        str menuItemLabel = '';
       
        if (_menuItemName)
        {
            SysDictMenu dictMenuItem = SysDictMenu::newMenuItem(_menuItemName, _menuItemType);
            if (dictMenuItem)
            {
                TreeNode treeNode = dictMenuItem.parmTreeNode();
                if (treeNode)
                {
                    LabelType menuItemLabelIdOrText = treeNode.AOTgetProperty(#PropertyLabel);
                    menuItemLabel = SysLabel::labelId2String2(menuItemLabelIdOrText);
                }
            }
        }

        return menuItemLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for the specified table Id.
    /// </summary>
    /// <param name = "_tableId">Table Id</param>
    /// <returns>Label for the specified table Id</returns>
    public static str getLabelForTable(TableId _tableId)
    {
        str entityTableLabel = '';

        SysDictTable entitySysDictTable = new SysDictTable(_tableId);
        if (entitySysDictTable)
        {
            entityTableLabel = entitySysDictTable.label();
        }
    
        return entityTableLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelIdForEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label Id for the specified enum value.
    /// </summary>
    /// <param name = "_enumId">Enum Id</param>
    /// <param name = "_enumValue">Enum value</param>
    /// <returns>Label Id for the specified enum value</returns>
    public static str getLabelIdForEnumValue(EnumId _enumId, anytype _enumValue)
    {
        int enumValueInt = DocGlobalHelper::getEnumValueAsInteger(_enumValue);
    
        SysDictEnum sysDictEnum = new SysDictEnum(_enumId);
        int enumValueIndex = DocGlobalHelper::sysDictEnum_value2Index(_enumId, enumValueInt); //sysDictEnum.value2Index(enumValueInt);
    
        str enumValueLabelId = sysDictEnum.index2LabelId(enumValueIndex);
    
        return enumValueLabelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the potential label Id matches the RegEx pattern for a valid label Id.
    /// If the give label Id is not a valid system label Id, returns false.
    /// Otherwise checks the given label Id using SysLabel::isLabelId().
    /// </summary>
    /// <param name="_potentialLabelId">Label ID candidate.</param>
    /// <returns>True if the given parameter is a valid label ID.</returns>
    public static boolean isLabelId(str _potentialLabelId)
    {
        // workaround for SysLabel::isLabelId() bug
        if (!Docentric.AX.Framework.Utilities.DocLabelHelper::IsValidLabelId(_potentialLabelId))
        {
            return false;
        }        
        
        return SysLabel::isLabelId(_potentialLabelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLabelIdForDsProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the given parameter is a valid label ID.
    /// </summary>
    /// <param name="_potentialLabelId">Label ID candidate.</param>
    /// <returns>True if the given parameter is a valid label ID.</returns>
    public static boolean isLabelIdForDsProvider(str _potentialLabelId)
    {
        if (_potentialLabelId && strScan(_potentialLabelId, '@', 1, 1))
        {
            return true;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSysLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves label ID to label value for the given language.
    /// </summary>
    /// <param name="_labelId">Label ID (code).</param>
    /// <param name="_languageId">Language ID.</param>
    /// <returns>Label value for the given language, if the given _labelId is a valid label ID. Otherwise returns _labelId.</returns>
    public static LabelType resolveSysLabel(LabelType _labelId, LanguageId _languageId = currentUserLanguage())
    {
        // workaround for SysLabel::labelId2String2() bug
        if (!DocLabelHelper::isLabelId(_labelId))
        {
            return _labelId;
        }        
        
        return SysLabel::labelId2String2(_labelId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSystemLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the potential label Id exists within the system labels.
    /// The potential label Id exists if there is a translation of the label in at least one language.
    /// </summary>
    /// <param name = "_potentialLabelId">Potential label Id</param>
    /// <param name = "_searchAllLanguages">Specifies whether the search should be performed in all languages or only in 'en-us'</param>
    /// <returns>True if a translation of a potential label Id is found in at least one language</returns>
    public static boolean existsSystemLabel(str _potentialLabelId, boolean _searchAllLanguages = false)
    {
        DocDataSourceProviderLabelRepository docDSPLabelRepository = DocDataSourceProviderLabelRepository::construct(DocLabelResolutionStrategy::Default);
        
        // First, we will try to resolve the potential label translation in 'en-us' language,
        // since we assume that every label contains a translation in 'en-us' language.
        if (docDSPLabelRepository.tryResolveD365FOLabel(_potentialLabelId, 'en-us') != '')
        {
            return true;
        }
    
        // If a potential label does not have an 'en-us' translation,
        // we look for a translation in any other language,
        // as this is evidence that the potential label Id is a system label.
        if (_searchAllLanguages)
        {
            container languages = Global::languageList();

            for (int i = 1; i <= conLen(languages); i++)
            {
                if (docDSPLabelRepository.tryResolveD365FOLabel(_potentialLabelId, conPeek(languages, i)) != '')
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSysLabelDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves label ID to label description (comment) for the given language.
    /// </summary>
    /// <param name="_labelId">Label ID (code).</param>
    /// <param name="_languageId">Language ID.</param>
    /// <returns>Label description (comment) for the given language, if the given _labelId is a valid label ID. Otherwise returs _labelId.</returns>
    public static LabelType resolveSysLabelDescription(LabelType _labelId, LanguageId _languageId = currentUserLanguage())
    {
        Label label;
    
        if (SysLabel::isLabelId(_labelId))
        {
            label = SysLabel::getLabelInstance(_languageId);
            return label.extractComment(_labelId);
        }
    
        return _labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelIdWithoutPrefix_GER_DGL_CFL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Label ID without prefix for GER, Custom Fields and Docentric Global Labels.
    /// </summary>
    /// <param name = "_labelId">GER, CF or DG label ID</param>
    /// <returns>Label ID without prefix</returns>
    public static str getLabelIdWithoutPrefix_GER_DGL_CFL(str _labelId)
    {
        // _labelId is expected to be in the form of '@GER_LABEL:PostalAddress', '@DGL_LABEL:CityName' or '@CFL_LABEL:RFNumber'
        if (_labelId)
        {
            System.String labelId = _labelId;
            return labelId.Substring(11);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelIdPrefix_GER_DGL_CFL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns prefix for GER, Custom Fields and Docentric Global Labels.
    /// </summary>
    /// <param name = "_labelId">GER, CF or DG label ID</param>
    /// <returns>Label ID prefix</returns>
    public static str getLabelIdPrefix_GER_DGL_CFL(str _labelId)
    {
        // _labelId is expected to be in the form of '@GER_LABEL:PostalAddress', '@DGL_LABEL:CityName' or '@CFL_LABEL:RFNumber'
        return subStr(_labelId, 1, 11);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>