<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPdfSignatureSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPdfSignatureSettings
{
    private DocElectronicSignatureCertificateSettings signatureCertificateSettings;
    private DocElectronicSignatureAppearanceSettings signatureAppearanceSettings;
    private DocPdfSignatureEnabled isEnabled;
    private DocPdfSignatureLongTermValidation longTermValidation;
    private DocPdfSignatureReason reason;
    private DocPdfSignatureLocation location;
    private DocPdfSignatureContact contact;
    private DocCertificateId signatureCertificateId;
    private DocElectronicSignatureAppearanceId signatureAppearanceId;
    private CompanyId companyId;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSignatureCertificateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the electronic signature certificate settings.
    /// </summary>
    /// <param name = "_signatureCertificateSettings">Electronic signature certificate settings</param>
    /// <returns>Electronic signature certificate settings</returns>
    public DocElectronicSignatureCertificateSettings parmSignatureCertificateSettings(DocElectronicSignatureCertificateSettings _signatureCertificateSettings = signatureCertificateSettings)
    {
        signatureCertificateSettings = _signatureCertificateSettings;
        return signatureCertificateSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureAppearanceSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the electronic signature appearance settings.
    /// </summary>
    /// <param name = "_signatureAppearanceSettings">Electronic signature appearance settings</param>
    /// <returns>Electronic signature certificate settings</returns>
    public DocElectronicSignatureAppearanceSettings parmSignatureAppearanceSettings(DocElectronicSignatureAppearanceSettings _signatureAppearanceSettings = signatureAppearanceSettings)
    {
        signatureAppearanceSettings = _signatureAppearanceSettings;
        return signatureAppearanceSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the electronic signature is enabled.
    /// </summary>
    /// <param name = "_isEnabled">Is electronic signature enabled</param>
    /// <returns>Is electronic signature enabled</returns>
    public DocPdfSignatureEnabled parmIsEnabled(DocPdfSignatureEnabled _isEnabled = isEnabled)
    {
        isEnabled = _isEnabled;
        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLongTermValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if long-term validation of the signature is turned on.
    /// </summary>
    /// <param name = "_longTermValidation">Is long-term validation turned on</param>
    /// <returns>Is long-term validation turned on</returns>
    public DocPdfSignatureLongTermValidation parmLongTermValidation(DocPdfSignatureLongTermValidation _longTermValidation = longTermValidation)
    {
        longTermValidation = _longTermValidation;
        return longTermValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the signature reason.
    /// </summary>
    /// <param name = "_reason">Signature reason</param>
    /// <returns>Signature reason</returns>
    public DocPdfSignatureReason parmReason(DocPdfSignatureReason _reason = reason)
    {
        reason = _reason;
        return reason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the signature location.
    /// </summary>
    /// <param name = "_location">Signature location</param>
    /// <returns>Signature location</returns>
    public DocPdfSignatureLocation parmLocation(DocPdfSignatureLocation _location = location)
    {
        location = _location;
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the contact person.
    /// </summary>
    /// <param name = "_contact">Contact person</param>
    /// <returns>Contact person</returns>
    public DocPdfSignatureContact parmContact(DocPdfSignatureContact _contact = contact)
    {
        contact = _contact;
        return contact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignatureCeritificateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the signature certificate Id.
    /// </summary>
    /// <returns>Signature certificate Id</returns>
    public DocCertificateId getSignatureCeritificateId()
    {
        return signatureCertificateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignatureAppearanceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the signature appearance Id.
    /// </summary>
    /// <returns>Signature appearance Id</returns>
    public DocElectronicSignatureAppearanceId getSignatureAppearanceId()
    {
        return signatureAppearanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company Id of current PDF signature settings.
    /// </summary>
    /// <returns>Company Id</returns>
    public CompanyId getCompanyId()
    {
        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the new instance of DocPdfSignatureSettings class.
    /// </summary>
    /// <param name = "_companyId">Company Id</param>
    /// <param name = "_signatureCertificateId">Signature certificate Id</param>
    /// <param name = "_signatureAppearanceId">Signature appearance Id</param>
    protected void new (
        CompanyId _companyId = curext(),
        DocCertificateId _signatureCertificateId = '',
        DocElectronicSignatureAppearanceId _signatureAppearanceId = '')
    {
        companyId = _companyId;
        signatureCertificateId = _signatureCertificateId;
        signatureAppearanceId = _signatureAppearanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocPdfSignatureSettings class.
    /// </summary>
    /// <returns>An instance of DocPdfSignatureSettings class</returns>
    public static DocPdfSignatureSettings construct()
    {
        return new DocPdfSignatureSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocPdfSignatureSettings class with the default signature appearance settings
    /// if the below condition is met:
    /// - the parameter _loadSignatureAppearance is true
    /// </summary>
    /// <param name = "_report">Report Id</param>
    /// <param name = "_companyId">Company Id</param>
    /// <param name = "_loadSignatureAppearance">Should load signature appearance settings</param>
    /// <returns>An instance of DocPdfSignatureSettings class</returns>
    public static DocPdfSignatureSettings constructWithDefault(
        DocReportTableRecId _report,
        CompanyId _companyId = curext(), 
        boolean _loadSignatureAppearance = false)
    {
        DocPdfSignatureSettings docPdfSignatureSettings;

        DocReportPdfSignatureSettings docReportPdfSignatureSettings = DocReportPdfSignatureSettings::findByReportAndCompany(_report, _companyId);
        if (docReportPdfSignatureSettings)
        {
            docPdfSignatureSettings = new DocPdfSignatureSettings(
                docReportPdfSignatureSettings.CompanyId,
                docReportPdfSignatureSettings.CertificateId,
                docReportPdfSignatureSettings.SignatureAppearanceId);

            docPdfSignatureSettings.parmSignatureCertificateSettings(
                DocElectronicSignatureCertificateSettings::construct(docReportPdfSignatureSettings.CertificateId, docReportPdfSignatureSettings.CompanyId));

            if (_loadSignatureAppearance)
            {
                docPdfSignatureSettings.parmSignatureAppearanceSettings(
                    DocElectronicSignatureAppearanceSettings::construct(docReportPdfSignatureSettings.SignatureAppearanceId));
            }

            docPdfSignatureSettings.parmIsEnabled(docReportPdfSignatureSettings.IsEnabled);
            docPdfSignatureSettings.parmLongTermValidation(docReportPdfSignatureSettings.LongTermValidation);
            docPdfSignatureSettings.parmReason(docReportPdfSignatureSettings.Reason);
            docPdfSignatureSettings.parmLocation(docReportPdfSignatureSettings.Location);
            docPdfSignatureSettings.parmContact(docReportPdfSignatureSettings.Contact);
        }

        return docPdfSignatureSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocPdfSignatureSettings class with the overridden signature appearance settings
    /// if the below conditions are met:
    /// - the parameter _loadSignatureAppearance is true
    /// - the flag SignatureAppearanceOverride on the provided report template is true
    /// If the flag SignatureAppearanceOverride on the provided report template is false the default signature 
    /// appearance settings are loaded.
    /// </summary>
    /// <param name = "_report">Report Id</param>
    /// <param name = "_templateId">Template Id</param>
    /// <param name = "_companyId">Company Id</param>
    /// <param name = "_languageId">Language Id</param>
    /// <param name = "_loadSignatureAppearance">Should load signature appearance settings</param>
    /// <returns>An instance of DocPdfSignatureSettings class</returns>
    public static DocPdfSignatureSettings constructWithOverride(
        DocReportTableRecId _report,
        DocReportTemplateId _templateId, 
        CompanyId _companyId = curext(), 
        LanguageId _languageId = CompanyInfo::languageId(),
        boolean _loadSignatureAppearance = false)
    {
        DocPdfSignatureSettings docPdfSignatureSettings;

        DocReportPdfSignatureSettings docReportPdfSignatureSettings = DocReportPdfSignatureSettings::findByReportAndCompany(_report, _companyId);
        if (docReportPdfSignatureSettings)
        {
            docPdfSignatureSettings = new DocPdfSignatureSettings(
                docReportPdfSignatureSettings.CompanyId,
                docReportPdfSignatureSettings.CertificateId,
                docReportPdfSignatureSettings.SignatureAppearanceId);

            docPdfSignatureSettings.parmSignatureCertificateSettings(
                DocElectronicSignatureCertificateSettings::construct(docReportPdfSignatureSettings.CertificateId, docReportPdfSignatureSettings.CompanyId));

            if (_loadSignatureAppearance)
            {
                docPdfSignatureSettings.loadSignatureAppearanceSettings(_templateId, _companyId, _languageId);
            }

            docPdfSignatureSettings.parmIsEnabled(docReportPdfSignatureSettings.IsEnabled);
            docPdfSignatureSettings.parmLongTermValidation(docReportPdfSignatureSettings.LongTermValidation);
            docPdfSignatureSettings.parmReason(docReportPdfSignatureSettings.Reason);
            docPdfSignatureSettings.parmLocation(docReportPdfSignatureSettings.Location);
            docPdfSignatureSettings.parmContact(docReportPdfSignatureSettings.Contact);
        }

        return docPdfSignatureSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSignatureAppearanceSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the signature appearance settings.
    /// </summary>
    /// <param name = "_templateId">Template Id</param>
    /// <param name = "_companyId">Company Id</param>
    /// <param name = "_languageId">Language Id</param>
    public void loadSignatureAppearanceSettings(
        DocReportTemplateId _templateId,
        CompanyId _companyId = curext(), 
        LanguageId _languageId = CompanyInfo::languageId())
    {
        // Check if the signature appearance is overriden on report template
        DocReportTemplate docReportTemplate = DocReportTemplate::findTemplateIdUsingRules(_templateId, _companyId, _languageId, false);
        if (docReportTemplate && docReportTemplate.SignatureAppearanceOverride)
        {
            // Set the signature appearance settings depending on the signature appearance set on the report template
            signatureAppearanceSettings = DocElectronicSignatureAppearanceSettings::construct(docReportTemplate.SignatureAppearanceId);
        }
        else
        {
            // Set the signature appearance settings depending on the signature appearance set in the PDF signature settings
            signatureAppearanceSettings = DocElectronicSignatureAppearanceSettings::construct(signatureAppearanceId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>