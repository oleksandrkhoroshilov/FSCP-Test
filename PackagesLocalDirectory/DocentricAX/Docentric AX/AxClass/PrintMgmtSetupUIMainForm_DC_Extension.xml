<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtSetupUIMainForm_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class PrintMgmtSetupUIMainForm_DC_Extension is an extension of the form PrintMgmtSetupUIMain.
/// </summary>
[ExtensionOf(formStr(PrintMgmtSetupUIMain))]
final class PrintMgmtSetupUIMainForm_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form is closed.
    /// If we go from some of our forms (i.e. DocReportTable) to PrintMgmtSetupUIMain form, 
    /// modify some settings there, close the PrintMgmtSetupUIMain form and come back 
    /// to the caller form, we want to refresh the caller datasource.
    /// </summary>
    public void close()
    {
        #Task

        next close();

        Args args = this.args();
        if (args && args.caller() && (args.caller() is FormRun))
        {
            FormRun callerFormRun = args.caller();
            if (callerFormRun.name() == formStr(DocReportTable))
            {
                // If caller was DocReportTable, re-read cached data on it
                callerFormRun.task(#taskRefresh);
            }
            else if (callerFormRun.name() == formStr(DocPrintMgmtUtils))
            {
                // If caller was DocPrintMgmtUtils, re-populate the datasource
                callerFormRun.printMgmtSetupUIClosed();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form is initialized.
    /// We add the company ID as a suffix to the form caption, so that it is more noticeable.
    /// </summary>
    public void init()
    {
        next init();
        
        // Add the company ID after the caption.
        this.design().caption(strFmt('%1 (%2)', this.design().caption(), strUpr(curExt())));

        // Set system buttons
        this.setSystemButtons_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when form is displayed.
    /// When we call it from some of Docentric forms, we want to position the cursor to the exact
    /// document instance or print management setting node that is related to the caller record.
    /// </summary>
    public void run()
    {
        next run();     

        // Select the related node in the tree on the left side of Print management setup form
        DocPrintMgmtSetupHelper::selectRelatedTreeNode(this.args(), Tree);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSystemButtons_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the system buttons.
    /// </summary>
    private void setSystemButtons_DC()
    {
        #SysSystemDefinedButtons

        this.design().viewEditMode(ViewEditMode::Edit);

        // Subscribe to the Saving delegate. The delegate is called when the standard Save button is clicked.
        // Since the event handler method cannot be created in the form extension class because it is not visible by compiler,
        // the event handler method is created in the PrintMgmtSetupUIMainForm_DC_EventHandler class, from which the method
        // SystemDefinedSaveButton_OnSaving_DC is called in this form extension when the standard Save button is clicked.
        PrintMgmtSetupUIMainForm_DC_EventHandler printMgmtSetupUIMainFormEventHandler = PrintMgmtSetupUIMainForm_DC_EventHandler::construct(this);
        this.dataHelper().Saving += eventhandler(printMgmtSetupUIMainFormEventHandler.SystemDefinedSaveButton_OnSaving_DC);

        FormCommandButtonControl newButton = this.control(this.controlId(#SystemDefinedNewButton)) as FormCommandButtonControl;
        newButton.visible(false);
        FormCommandButtonControl deleteButton = this.control(this.controlId(#SystemDefinedDeleteButton)) as FormCommandButtonControl;
        deleteButton.visible(false);
        FormActionPaneTabControl optionsActionPaneTab = this.control(this.controlId(#SystemDefinedOptionsActionPaneTab)) as FormActionPaneTabControl;
        optionsActionPaneTab.visible(false);
        FormMenuButtonControl powerAppsButton = this.control(this.controlId(#SystemDefinedPowerAppsMenuButton)) as FormMenuButtonControl;
        powerAppsButton.visible(false);
        FormCommandButtonControl attachButton = this.control(this.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;
        attachButton.visible(false);
        FormMenuButtonControl officeButton = this.control(this.controlId(#SystemDefinedOfficeButton)) as FormMenuButtonControl;
        officeButton.visible(false);
        FormCommandButtonControl refreshButton = this.control(this.controlId(identifierStr(SystemDefinedRefreshButton))) as FormCommandButtonControl;
        refreshButton.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SystemDefinedSaveButton_OnSaving_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SystemDefinedSaveButton button is clicked.
    /// </summary>
    public void SystemDefinedSaveButton_OnSaving_DC()
    {
        // Save all changes on the form
        ctrl.eventDataSourceSave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintMgmtSettingsHelpButton_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the PrintMgmtSettingsHelpButton_DC button is clicked.
    /// </summary>
    public void PrintMgmtSettingsHelpButton_DC_OnClicked_DC()
    {
        DocGlobalHelper::navigateToUrl(DocConstant::PrintMgmtSettingsManualURL, true, false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>