<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrinterPageRange</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPrinterPageRange  implements SysPackable
{
    boolean                            printAllPages;
    int                                printFromPage;
    int                                printToPage;


    #define.currentPackVersion(1)
    #localmacro.currentList
        version,
        printAllPages,
        printFromPage,
        printToPage
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        printAllPages = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int version = #currentPackVersion;
    
        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAllPages</Name>
				<Source><![CDATA[
    public boolean parmPrintAllPages(boolean _printAllPages = printAllPages)
    {
        printAllPages = _printAllPages;
        return printAllPages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFromPage</Name>
				<Source><![CDATA[
    public int parmPrintFromPage(int _printFromPage = printFromPage)
    {
        printFromPage = _printFromPage;
        return printFromPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToPage</Name>
				<Source><![CDATA[
    public int parmPrintToPage(int _printToPage = printToPage)
    {
        printToPage = _printToPage;
        return printToPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultParmValues</Name>
				<Source><![CDATA[
    public void setDefaultParmValues()
    {
        if (!printAllPages)
        {
            if (printFromPage <= 0)
            {
                printFromPage = 1;
            }
    
            if (printToPage <= 0)
            {
                printToPage = 1;
            }
    
            if (printFromPage > printToPage)
            {
                printToPage = printFromPage;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean    ret = false;
        int        version;
    
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #currentPackVersion)
            {
                [#currentList] = _pack;
    
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(boolean _printValidationErrors = true)
    {
        boolean isValid = true;

        if (!printAllPages)
        {
            if (printFromPage < 1)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:FromPageLessThanOne", printFromPage));
                }
            }
    
            if (printToPage < 1)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ToPageLessThanOne", printToPage));
                }
            }
    
            if (printFromPage > printToPage)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:FromPageGreaterThanToPage", printFromPage, printToPage));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static DocPrinterPageRange create(DocPrintDestSettingsPrinter _printDestSettingsPrinter)
    {
        DocPrinterPageRange printerPageRange = new DocPrinterPageRange();

        printerPageRange.parmPrintAllPages(_printDestSettingsPrinter.parmPrintAllPages());
        printerPageRange.parmPrintFromPage(_printDestSettingsPrinter.parmPrintFromPage());
        printerPageRange.parmPrintToPage(_printDestSettingsPrinter.parmPrintToPage());

        return printerPageRange;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>