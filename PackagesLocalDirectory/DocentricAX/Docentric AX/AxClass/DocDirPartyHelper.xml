<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDirPartyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocDirPartyHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Account type and Account number for common tables.
    /// </summary>
    /// <param name = "_common">A table buffer</param>
    /// <returns>A container containing [DocAccountRole (enum), AccountNum (str)]</returns>
    public static container getAccountData(Common _common)
    {
        if (!_common)
        {
            return [DocAccountRole::NA, ''];
        }

        switch (_common.TableId)
        {
            // Purchase order header
            case tableNum(PurchTable):
                PurchTable purchTable = _common as PurchTable;
                return [DocAccountRole::Vendor, purchTable.OrderAccount];

            // Purchase order line
            case tableNum(PurchLine):
                PurchLine purchLine = _common as PurchLine;
                return [DocAccountRole::Vendor, purchLine.purchTable().OrderAccount];

            // Purchase order confirmation header
            case tableNum(VendPurchOrderJour):
                VendPurchOrderJour vendPurchOrderJour = _common as VendPurchOrderJour;
                return [DocAccountRole::Vendor, vendPurchOrderJour.OrderAccount];

            // Vendor invoice header
            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoTable vendInvoiceInfoTable = _common as VendInvoiceInfoTable;
                return [DocAccountRole::Vendor, vendInvoiceInfoTable.InvoiceAccount];

            // Vendor invoice journal
            case tableNum(VendInvoiceJour):
                VendInvoiceJour vendInvoiceJour = _common as VendInvoiceJour;
                return [DocAccountRole::Vendor, vendInvoiceJour.InvoiceAccount];
            
            // Vendor invoice journal line
            case tableNum(VendInvoiceTrans):
                VendInvoiceTrans vendInvoiceTrans = _common as VendInvoiceTrans;
                return [DocAccountRole::Vendor, vendInvoiceTrans.vendInvoiceJour().InvoiceAccount];

            // Vendor product receipt
            case tableNum(VendPackingSlipJour):
                VendPackingSlipJour vendPackingSlipJour = _common as VendPackingSlipJour;
                return [DocAccountRole::Vendor, vendPackingSlipJour.OrderAccount];
                
            // Vendor product receipt line
            case tableNum(VendPackingSlipTrans):
                VendPackingSlipTrans vendPackingSlipTrans = _common as VendPackingSlipTrans;
                return [DocAccountRole::Vendor, vendPackingSlipTrans.vendPackingSlipJour().OrderAccount];

            // Purchase order receipts list journal
            case tableNum(VendReceiptsListJour):
                VendReceiptsListJour vendReceiptsListJour = _common as VendReceiptsListJour;
                return [DocAccountRole::Vendor, vendReceiptsListJour.VendAccount];

            // Purchase order receipts list journal lines
            case tableNum(VendReceiptsListTrans):
                VendReceiptsListTrans vendReceiptsListTrans = _common as VendReceiptsListTrans;
                VendReceiptsListJour vendReceiptsListJourParent;
                select firstonly VendAccount from vendReceiptsListJour
                    where vendReceiptsListJourParent.PurchId == vendReceiptsListTrans.PurchId
                    && vendReceiptsListJourParent.ReceiptsListId == vendReceiptsListTrans.ReceiptsListId
                    && vendReceiptsListJourParent.ReceiptsListDate == vendReceiptsListTrans.ReceiptsListDate;
                return [DocAccountRole::Vendor, vendReceiptsListJourParent.VendAccount];

            // Purchase inquiry journal
            case tableNum(PurchConfirmationRequestJour):
                PurchConfirmationRequestJour purchConfirmationRequestJour = _common as PurchConfirmationRequestJour;
                return [DocAccountRole::Vendor, purchConfirmationRequestJour.OrderAccount];
            
            // RFQ journal
            case tableNum(VendRFQJour):
                VendRFQJour vendRFQJour = _common as VendRFQJour;
                return [DocAccountRole::Vendor, vendRFQJour.VendAccount];
            
            // RFQ journal lines
            case tableNum(VendRFQTrans):
                VendRFQTrans vendRFQTrans = _common as VendRFQTrans;
                VendRFQJour vendRFQJourParent = vendRFQTrans.vendRFQJour();
                return [DocAccountRole::Vendor, vendRFQJourParent.VendAccount];
                                    
            // WMS picking route
            case tableNum(WMSPickingRoute):
                WMSPickingRoute wmsPickingRoute = _common as WMSPickingRoute;
                return [DocAccountRole::Customer, wmsPickingRoute.customer];
                                    
            // WMS Inventory order transaction
            case tableNum(WMSOrderTrans):
                WMSOrderTrans wmsOrderTrans = _common as WMSOrderTrans;
                return [DocAccountRole::Customer, wmsOrderTrans.customer];

            // Sales order
            case tableNum(SalesTable):
                SalesTable salesTable = _common as SalesTable;
                return [DocAccountRole::Customer, salesTable.CustAccount];

            // Sales order line
            case tableNum(SalesLine):
                SalesLine salesLine = _common as SalesLine;
                return [DocAccountRole::Customer, salesLine.CustAccount];

            // Sales order confirmation
            case tableNum(CustConfirmJour):
                CustConfirmJour custConfirmJour = _common as CustConfirmJour;
                return [DocAccountRole::Customer, custConfirmJour.InvoiceAccount];

            // Sales order confirmation line
            case tableNum(CustConfirmTrans):
                CustConfirmTrans custConfirmTrans = _common as CustConfirmTrans;
                return [DocAccountRole::Customer, custConfirmTrans.custConfirmJour().InvoiceAccount];

            // Customer free text invoice
            case tableNum(CustInvoiceTable):
                CustInvoiceTable custInvoiceTable = _common as CustInvoiceTable;
                return [DocAccountRole::Customer, custInvoiceTable.InvoiceAccount];

            // Customer free text invoice line
            case tableNum(CustInvoiceLine):
                CustInvoiceLine custInvoiceLine = _common as CustInvoiceLine;
                return [DocAccountRole::Customer, custInvoiceLine.custInvoiceTable().InvoiceAccount];

            // Customer invoice journal
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _common as CustInvoiceJour;
                return [DocAccountRole::Customer, custInvoiceJour.InvoiceAccount];

            // Customer invoice journal line
            case tableNum(CustInvoiceTrans):
                CustInvoiceTrans custInvoiceTrans = _common as CustInvoiceTrans;
                return [DocAccountRole::Customer, custInvoiceTrans.custInvoiceJour().InvoiceAccount];
                                    
            // Customer Packing Slip
            case tableNum(CustPackingSlipJour):
                CustPackingSlipJour custPackingSlipJour = _common as CustPackingSlipJour;
                return [DocAccountRole::Customer, custPackingSlipJour.InvoiceAccount];
                                    
            // Customer Packing Slip line
            case tableNum(CustPackingSlipTrans):
                CustPackingSlipTrans custPackingSlipTrans = _common as CustPackingSlipTrans;
                return [DocAccountRole::Customer, custPackingSlipTrans.custPackingslipJour().InvoiceAccount];
                                    
            // Sales quotation journal, Project quotation journal
            case tableNum(CustQuotationJour):
                CustQuotationJour custQuotationJour = _common as CustQuotationJour;
                return [DocAccountRole::Customer, custQuotationJour.InvoiceAccount];
                                    
            // Sales/Project quotation line
            case tableNum(CustQuotationTrans):
                CustQuotationTrans custQuotationTrans = _common as CustQuotationTrans;
                return [DocAccountRole::Customer, custQuotationTrans.custQuotationJour().InvoiceAccount];            
                                    
            // Sales quotation confirmation
            case tableNum(CustQuotationConfirmJour):
                CustQuotationConfirmJour custQuotationConfirmJour = _common as CustQuotationConfirmJour;
                return [DocAccountRole::Customer, custQuotationConfirmJour.InvoiceAccount];
                                    
            // Sales quotation confirmation line
            case tableNum(CustQuotationConfirmTrans):
                CustQuotationConfirmTrans custQuotationConfirmTrans = _common as CustQuotationConfirmTrans;
                return [DocAccountRole::Customer, custQuotationConfirmTrans.custQuotationConfirmJour().InvoiceAccount];

            // Project
            case tableNum(ProjTable):
                ProjTable projTable = _common as ProjTable;
                return [DocAccountRole::Customer, projTable.CustAccount];

            // Project invoice
            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = _common as ProjInvoiceJour;
                return [DocAccountRole::Customer, projInvoiceJour.InvoiceAccount];            
            
            // Project invoice lines
            case tableNum(ProjInvoiceCost):
                ProjInvoiceCost projInvoiceCost = _common as ProjInvoiceCost;
                return [DocAccountRole::Customer, projInvoiceCost.projInvoiceJour().InvoiceAccount];
            case tableNum(ProjInvoiceEmpl):
                ProjInvoiceEmpl projInvoiceEmpl = _common as ProjInvoiceEmpl;
                return [DocAccountRole::Customer, projInvoiceEmpl.projInvoiceJour().InvoiceAccount];
            case tableNum(ProjInvoiceItem):
                ProjInvoiceItem projInvoiceItem = _common as ProjInvoiceItem;
                return [DocAccountRole::Customer, projInvoiceItem.projInvoiceJour().InvoiceAccount];
            case tableNum(ProjInvoiceOnAcc):
                ProjInvoiceOnAcc projInvoiceOnAcc = _common as ProjInvoiceOnAcc;
                return [DocAccountRole::Customer, projInvoiceOnAcc.projInvoiceJour().InvoiceAccount];
            case tableNum(ProjInvoiceRevenue):
                ProjInvoiceRevenue projInvoiceRevenue = _common as ProjInvoiceRevenue;
                return [DocAccountRole::Customer, projInvoiceRevenue.projInvoiceJour().InvoiceAccount];

            // Project invoice proposal
            case tableNum(ProjProposalJour):
                ProjProposalJour projProposalJour = _common as ProjProposalJour;
                return [DocAccountRole::Customer, projProposalJour.InvoiceAccount];

            // Project invoice proposal lines
            case tableNum(ProjProposalCost):
                ProjProposalCost projProposalCost = _common as ProjProposalCost;
                return [DocAccountRole::Customer, projProposalCost.projProposalJour().InvoiceAccount];
            case tableNum(ProjProposalEmpl):
                ProjProposalEmpl projProposalEmpl = _common as ProjProposalEmpl;
                return [DocAccountRole::Customer, projProposalEmpl.projProposalJour().InvoiceAccount];
            case tableNum(ProjProposalItem):
                ProjProposalItem projProposalItem = _common as ProjProposalItem;
                return [DocAccountRole::Customer, projProposalItem.projProposalJour().InvoiceAccount];
            case tableNum(ProjProposalOnAcc):
                ProjProposalOnAcc projProposalOnAcc = _common as ProjProposalOnAcc;
                return [DocAccountRole::Customer, projProposalOnAcc.projProposalJour().InvoiceAccount];
            case tableNum(ProjProposalRevenue):
                ProjProposalRevenue projProposalRevenue = _common as ProjProposalRevenue;
                return [DocAccountRole::Customer, projProposalRevenue.projProposalJour().InvoiceAccount];            
                                    
            // Interest journal
            case tableNum(CustInterestJour):
                CustInterestJour custInterestJour = _common as CustInterestJour;
                return [DocAccountRole::Customer, custInterestJour.AccountNum];
                                    
            // Interest journal line
            case tableNum(CustInterestTrans):
                CustInterestTrans custInterestTrans = _common as CustInterestTrans;
                return [DocAccountRole::Customer, custInterestTrans.custInterestJour().AccountNum];
                                    
            // Collection letter journal
            case tableNum(CustCollectionLetterJour):
                CustCollectionLetterJour custCollectionLetterJour = _common as CustCollectionLetterJour;
                return [DocAccountRole::Customer, custCollectionLetterJour.AccountNum];
                                    
            // Collection letter journal line
            case tableNum(CustCollectionLetterTrans):
                CustCollectionLetterTrans custCollectionLetterTrans = _common as CustCollectionLetterTrans;
                CustCollectionLetterJour custCollectionLetterJourParent;
                select firstonly custCollectionLetterJourParent
                    where custCollectionLetterJourParent.AccountNum == custCollectionLetterTrans.AccountNum
                        && custCollectionLetterJourParent.CollectionLetterNum == custCollectionLetterTrans.CollectionLetterNum;
                return [DocAccountRole::Customer, custCollectionLetterJourParent.AccountNum];

            // Bank check
            case tableNum(BankChequeTable):
                BankChequeTable bankChequeTable = _common as BankChequeTable;
                return [DocAccountRole::Vendor, bankChequeTable.RecipientAccountNum];
                                    
            // Sales advance invoice
            case tableNum(CzCustAdvanceInvoiceTable):
                CzCustAdvanceInvoiceTable czCustAdvanceInvoiceTable = _common as CzCustAdvanceInvoiceTable;
                return [DocAccountRole::Customer, czCustAdvanceInvoiceTable.InvoiceAccount];
                                    
            // Purchase advance invoice
            case tableNum(CzVendAdvanceInvoiceTable):
                CzVendAdvanceInvoiceTable czVendAdvanceInvoiceTable = _common as CzVendAdvanceInvoiceTable;
                return [DocAccountRole::Customer, czVendAdvanceInvoiceTable.InvoiceAccount];
                                    
            // WHS Load
            case tableNum(WHSLoadTable):
                WHSLoadTable whsLoadTable = _common as WHSLoadTable;
                return [DocAccountRole::Customer, whsLoadTable.AccountNum];
                                    
            // WHS Load line
            case tableNum(WHSLoadLine):
                WHSLoadLine whsLoadLine = _common as WHSLoadLine;
                WHSLoadTable whsLoadTableParent;
                select firstonly whsLoadTableParent where whsLoadTableParent.LoadId == whsLoadLine.LoadId;
                return [DocAccountRole::Customer, whsLoadTableParent.AccountNum];

            // WHS Shipment
            case tableNum(WHSShipmentTable):
                WHSShipmentTable whsShipmentTable = _common as WHSShipmentTable;
                return [DocAccountRole::Customer, whsShipmentTable.AccountNum];
                                    
            // WHS BOL
            case tableNum(WHSBillOfLading):
                WHSBillOfLading whsBillOfLading = _common as WHSBillOfLading;
                return [DocAccountRole::Customer, whsBillOfLading.CustAccount];                              

            // Customer
            case tableNum(CustTable):
                CustTable custTable = _common as CustTable;
                return [DocAccountRole::Customer, custTable.AccountNum];

            // Vendor
            case tableNum(VendTable):
                VendTable vendTable = _common as VendTable;
                return [DocAccountRole::Vendor, vendTable.AccountNum];
        }

        return [DocAccountRole::NA, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerPrimaryEmailAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customer primary email address.
    /// </summary>
    /// <param name = "_custTable">CustTable table buffer</param>
    /// <returns>Customer primary email address</returns>
    public static str getCustomerPrimaryEmailAddress(CustTable _custTable)
    {
        return _custTable.email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorPrimaryEmailAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets vendor primary email address.
    /// </summary>
    /// <param name = "_vendTable">VendTable table buffer</param>
    /// <returns>Vendor primary email address</returns>
    public static str getVendorPrimaryEmailAddress(VendTable _vendTable)
    {
        return _vendTable.email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorEmailAddressesFromPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets email addresses for the provided vendor purpose.
    /// </summary>
    /// <param name = "_vendTable">VendTable table buffer</param>
    /// <param name = "_purpose">Purpose</param>
    /// <returns>Vendor email address list</returns>
    public static str getVendorEmailAddressesFromPurpose(VendTable _vendTable, str _purpose)
    {
        return DocDirPartyHelper::getContactEmailAddressesFromPurpose(_vendTable.Party, _purpose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustEmailAddressesFromPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets email addresses for the provided customer purpose.
    /// </summary>
    /// <param name = "_custTable">CustTable table buffer</param>
    /// <param name = "_purpose">Purpose</param>
    /// <returns>Customer email address list</returns>
    public static str getCustEmailAddressesFromPurpose(CustTable _custTable, str _purpose)
    {
        return DocDirPartyHelper::getContactEmailAddressesFromPurpose(_custTable.Party, _purpose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactEmailAddressesFromPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get email addresses for the provided purpose.
    /// </summary>
    /// <param name = "_dirPartyTableRecId">DirPartyTable RecId</param>
    /// <param name = "_purpose">Purpose</param>
    /// <returns>Email address list</returns>
    public static str getContactEmailAddressesFromPurpose(RefRecId _dirPartyTableRecId, str _purpose)
    {
        container contactInfoPurposeEmailsCon =
            DirParty::electronicAddressLocatorsByRole(_dirPartyTableRecId, LogisticsElectronicAddressMethodType::Email, _purpose);
 
        str contactInfoPurposeEmailsStr = '';
        if (contactInfoPurposeEmailsCon != conNull())
        {
            contactInfoPurposeEmailsStr = conPeek(contactInfoPurposeEmailsCon, 1);
            for (int i = 2; i <= conLen(contactInfoPurposeEmailsCon); i++)
            {
                contactInfoPurposeEmailsStr = contactInfoPurposeEmailsStr + ',' + conPeek(contactInfoPurposeEmailsCon, i);
            }
        }
 
        return contactInfoPurposeEmailsStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonNameForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Person name for the given User ID.
    /// </summary>
    /// <param name = "_userId">User ID for which the person name is requested.</param>
    /// <returns>Person name of the given user, can be empty.</returns>
    public static str getPersonNameForUser(UserId _userId)
    {
        str personName;

        PartyIProvider partyProvider = PartyProviderFactory::getPartyProvider();

        if (partyProvider)
        {
            personName = partyProvider.dirPersonUserId2Name(_userId);
        }

        return personName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>