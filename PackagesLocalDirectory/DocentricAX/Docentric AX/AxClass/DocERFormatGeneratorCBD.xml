<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocERFormatGeneratorCBD</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Runs a CBD ER format configuration and returns a generated document as memory stream. 
/// </summary>
public class DocERFormatGeneratorCBD extends DocERFormatGenerator
{
    private const static str DataContractName = 'ReportDataContract';
    private const static str DataProviderName = 'ReportDataProvider';
    private const static str DataRDLContractName = 'ReportRDLDataContract';
    private const static str PrintMgmtSettingDetailName = 'PrintMgmtPrintSettingDetail';

    private SrsReportDataContract reportDataContract;
    private SRSReportDataProviderBase reportDataProvider;
    private Query reportFirstDynamicQuery;
    private Map reportParameters;
    private str reportId;
    private DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType;

    #PrintMgmtSetup

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new isntance of DocERFormatGeneratorCBD class.
    /// </summary>
    /// <param name = "_formatMappingGUID">ER format mapping GUID</param>
    /// <param name = "_reportDataContract">A report data contact</param>
    /// <param name = "_reportDataProvider">A report data provider</param>
    /// <param name = "_reportFirstDynamicQuery">A report first dynamic query</param>
    /// <param name = "_reportParameters">A report parameters</param>
    /// <param name = "_reportId">Report Id</param>
    /// <param name = "_printMgmtOriginalCopyType">A print management original copy type</param>
    protected void new (
        ERGUID _formatMappingGUID,
        SrsReportDataContract _reportDataContract,
        SRSReportDataProviderBase _reportDataProvider,
        Query _reportFirstDynamicQuery,
        Map _reportParameters,
        str _reportId,
        DocPrintMgmtOriginalCopyType _printMgmtOriginalCopyType)
    {
        super();

        this.parmFormatMappingGUID(_formatMappingGUID);
        reportDataContract = _reportDataContract;
        reportDataProvider = _reportDataProvider;
        reportFirstDynamicQuery = _reportFirstDynamicQuery;
        reportParameters = _reportParameters;
        reportId = _reportId;
        printMgmtOriginalCopyType = _printMgmtOriginalCopyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constuct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocERFormatGeneratorCBD class.
    /// </summary>
    /// <param name = "_formatMappingGUID">ER format mapping GUID</param>
    /// <param name = "_reportDataContract">An instance of SrsReportDataContract class</param>
    /// <param name = "_reportFirstDynamicQuery">A report first dynamic query</param>
    /// <param name = "_reportParameters">A report parameters map</param>
    /// <param name = "_reportId">Report Id</param>
    /// <param name = "_printMgmtOriginalCopyType">A print management original copy type</param>
    /// <returns>A new instance of DocERFormatGeneratorCBD class</returns>
    public static DocERFormatGeneratorCBD constuct(
        ERGUID _formatMappingGUID,
        SrsReportDataContract _reportDataContract,
        Query _reportFirstDynamicQuery,
        Map _reportParameters,
        str _reportId,
        DocPrintMgmtOriginalCopyType _printMgmtOriginalCopyType)
    {
        if (!_formatMappingGUID)
        {
            DocGlobalHelper::handleException(funcName(), 'The DocERFormatGeneratorCBD cannot be instantiated due to invalid parameters: _formatMappingGUID is not defined');
        }
        if (_reportDataContract == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The DocERFormatGeneratorCBD cannot be instantiated due to invalid parameters: _reportDataContract is null');
        }

        DocERFormatGeneratorCBD erFormatGeneratorCBD = new DocERFormatGeneratorCBD(
            _formatMappingGUID,
            _reportDataContract,
            DocERFormatGeneratorCBD::getDataProvider(_reportDataContract),
            _reportFirstDynamicQuery,
            _reportParameters,
            _reportId,
            _printMgmtOriginalCopyType);

        return erFormatGeneratorCBD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithDsp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance pf DocERFormatGeneratorCBD class.
    /// </summary>
    /// <param name = "_formatMappingGUID">ER format mapping GUID</param>
    /// <param name = "_docDataSourceProviderSrsReporting">An instance of DocDataSourceProviderSrsReporting class</param>
    /// <returns>A new instance of DocERFormatGeneratorCBD class</returns>
    public static DocERFormatGeneratorCBD constructWithDsp(ERGUID _formatMappingGUID, DocDataSourceProviderSrsReporting _docDataSourceProviderSrsReporting)
    {
        if (!_formatMappingGUID)
        {
            DocGlobalHelper::handleException(funcName(), 'The DocERFormatGeneratorCBD cannot be instantiated due to invalid parameters: _formatMappingGUID is not defined');
        }
        if (_docDataSourceProviderSrsReporting == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The DocERFormatGeneratorCBD cannot be instantiated due to invalid parameters: _docDataSourceProviderSrsReporting is null');
        }

        DocERFormatGeneratorCBD erFormatGeneratorCBD = new DocERFormatGeneratorCBD(
            _formatMappingGUID,
            _docDataSourceProviderSrsReporting.getSrsReportDataContract(),
            _docDataSourceProviderSrsReporting.getSrsRdpClassRunningInstance(),
            _docDataSourceProviderSrsReporting.getSrsReportFirstDynamicQuery(),
            _docDataSourceProviderSrsReporting.getParameters(),
            _docDataSourceProviderSrsReporting.parmParamsReporting().parmReportId(),
            _docDataSourceProviderSrsReporting.parmParamsReporting().parmOriginalCopyType());

        return erFormatGeneratorCBD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithPrintReportSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance pf DocERFormatGeneratorCBD class.
    /// </summary>
    /// <param name = "_formatMappingGUID">ER format mapping GUID</param>
    /// <param name = "_docPrintReportSettings">An instance of DocPrintReportSettings class</param>
    /// <returns>A new instance of DocERFormatGeneratorCBD class</returns>
    public static DocERFormatGeneratorCBD constructWithPrintReportSettings(ERGUID _formatMappingGUID, DocPrintReportSettings _docPrintReportSettings)
    {
        if (!_formatMappingGUID)
        {
            DocGlobalHelper::handleException(funcName(), 'The DocERFormatGeneratorCBD cannot be instantiated due to invalid parameters: _formatMappingGUID is not defined');
        }
        if (_docPrintReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The DocERFormatGeneratorCBD cannot be instantiated due to invalid parameters: _docPrintReportSettings is null');
        }

        DocERFormatGeneratorCBD erFormatGeneratorCBD = new DocERFormatGeneratorCBD(
            _formatMappingGUID,
            _docPrintReportSettings.parmSrsReportContract(),
            DocERFormatGeneratorCBD::getDataProvider(_docPrintReportSettings.parmSrsReportContract()),
            _docPrintReportSettings.getDynamicQueryParameter(),
            _docPrintReportSettings.getReportParameters(),
            _docPrintReportSettings.parmReportId(),
            _docPrintReportSettings.parmOriginalCopyType());

        return erFormatGeneratorCBD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ER format.
    /// </summary>
    public void run()
    {
        this.generateERReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatMappingGUID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ER format mapping GUID.
    /// </summary>
    public void setFormatMappingGUID()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameters for ER format.
    /// </summary>
    /// <param name = "_formatMappingRun">An instance of ERFormatMappingRun class</param>
    public void setParameters(ERIFormatMappingRun _formatMappingRun)
    {
        ERSingleModelBinding modelBinding;

        select firstonly SpecificModel
            from modelBinding
                where modelBinding.FormatBinding == _formatMappingRun.getFormatMappingTableRecId();

        Name modelName = ERDataModelTable::find(modelBinding.SpecificModel).Name;

        if (reportDataContract)
        {
            // Set ReportDataProvider parameter
            if (reportDataContract.parmRdpName())
            {
                if (reportDataProvider)
                {
                    this.initDataProvider();
                    _formatMappingRun.withCreatingObjectParameter(modelName, DataProviderName, reportDataProvider);
                }
            }

            // Set ReportDataContract parameter
            if (reportDataContract.parmRdpContract())
            {
                _formatMappingRun.withCreatingObjectParameter(modelName, DataContractName, reportDataContract.parmRdpContract());
            }

            // Set ReportRDLDataContract parameter
            if (reportDataContract.parmRdlContract())
            {
                _formatMappingRun.withCreatingObjectParameter(modelName, DataRDLContractName, reportDataContract.parmRdlContract());
            }
        }

        // Set PrintMgmtPrintSettingDetail parameter
        PrintMgmtPrintSettingDetail printMgmtPrintSettingDetail = this.constructPrintMgmtPrintSettingDetail();
        if (printMgmtPrintSettingDetail)
        {
            _formatMappingRun.withCreatingObjectParameter(modelName, PrintMgmtSettingDetailName, printMgmtPrintSettingDetail);
        }

        // Set query based parameter
        if (reportFirstDynamicQuery)
        {
            QueryBuildDataSource qbds = reportFirstDynamicQuery.dataSourceNo(1);
            if (qbds)
            {
                _formatMappingRun.withParameter(new ERModelDefinitionDatabaseContext().addQuery(qbds.file(), reportFirstDynamicQuery));
            }
        }

        // Set parameters depending on print management document type
        if (DocPrintMgmtHelper::isPrintMgmtReport(reportId))
        {
            switch (DocPrintMgmtHelper::getFirstPrintMgmtDocumentType(reportId))
            {
                case PrintMgmtDocumentType::SalesFreeTextInvoice:
                    RecId custInvoiceJourRecId = reportDataContract.parmRdpContract().parmCustInvoiceJourRecId();
                    ERModelDefinitionDatabaseContext erModelDefinitionDatabaseContext = new ERModelDefinitionDatabaseContext()
                        .addRange(tableNum(CustInvoiceJour), fieldNum(CustInvoiceJour, RecId), queryValue(custInvoiceJourRecId));
                    _formatMappingRun.withParameter(erModelDefinitionDatabaseContext);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a report data provider.
    /// </summary>
    /// <returns>A SRSReportDataProviderBase object</returns>
    private SRSReportDataProviderBase initDataProvider()
    {
        if (reportDataProvider is SrsReportDataProviderPreProcess)
        {
            SrsReportDataProviderPreProcess dpPreProcess = reportDataProvider;

            dpPreProcess.parmCreatedTransactionId(SrsReportPreProcessedDetails::findByRecId(
                reportDataContract.parmReportExecutionInfo().parmRdpPreProcessedId(),
                reportDataContract.parmRdpName()).
                    CreatedTransactionId);
        }

        return reportDataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of SRSReportProviderMetadata class.
    /// </summary>
    /// <param name = "_reportDataContract">An instance of SrsReportDataContract class</param>
    /// <returns>A new instance of SRSReportProviderMetadata class</returns>
    private static SRSReportDataProviderBase getDataProvider(SrsReportDataContract _reportDataContract)
    {
        if (!_reportDataContract.parmRdpName())
        {
            return null;
        }

        // Get report metadata.
        SRSReportProviderMetadata reportProviderMetadata = SRSReportProviderMetadata::constructWithName(_reportDataContract.parmRdpName());
    
        // Instance report RDP class.
        DictClass rdpDictClass = reportProviderMetadata.getRdpDictClass();
        SRSReportDataProviderBase rdpClassInstance = rdpDictClass.makeObject() as SRSReportDataProviderBase;
    
        if (!rdpClassInstance)
        {
            DocGlobalHelper::handleException(funcName(), 'RDP class cannot be instanced');
        }
    
        // Set RDP contract.
        rdpClassInstance.parmDataContract(_reportDataContract.parmRdpContract());
    
        // Set Dynamic query.
        QueryName dynamicQueryName = reportProviderMetadata.getQueryName();
        if (dynamicQueryName && _reportDataContract.parmQueryContracts())
        {
            MapEnumerator queryContractsEnum = _reportDataContract.parmQueryContracts().getEnumerator();
            while (queryContractsEnum.moveNext())
            {
                Query dynamicQuery = queryContractsEnum.currentValue();
                if (dynamicQuery.name() == dynamicQueryName)
                {
                    rdpClassInstance.parmQuery(dynamicQuery);
                    break;
                }
            }
        }

        return rdpClassInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtPrintSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the PrintMgmtPrintSettingDetail class.
    /// </summary>
    /// <returns>A PrintMgmtPrintSettingDetail object</returns>
    private PrintMgmtPrintSettingDetail constructPrintMgmtPrintSettingDetail()
    {
        PrintMgmtPrintSettingDetail printMgmtPrintSettingDetail = new PrintMgmtPrintSettingDetail();

        PrintMgmtDocInstanceType printMgmtDocInstanceType = PrintMgmtDocInstanceType::Original;
        switch (printMgmtOriginalCopyType)
        {
            case DocPrintMgmtOriginalCopyType::Original:
                printMgmtDocInstanceType = PrintMgmtDocInstanceType::Original;
                break;
            case DocPrintMgmtOriginalCopyType::Copy:
                printMgmtDocInstanceType = PrintMgmtDocInstanceType::Copy;
                break;
        }
        printMgmtPrintSettingDetail.parmType(printMgmtDocInstanceType);

        if (reportDataContract)
        {
            printMgmtPrintSettingDetail.parmReportFormatName(reportDataContract.parmReportName());
            printMgmtPrintSettingDetail.parmPrintJobSettings(reportDataContract.parmPrintSettings());
        }

        if (reportParameters)
        {
            printMgmtPrintSettingDetail.parmIdentificationText(reportParameters.exists(#IdentificationTextReportParamName) ? reportParameters.lookup(#IdentificationTextReportParamName).getValueTyped(): '');
        }

        printMgmtPrintSettingDetail.parmInstanceName(enum2Str(printMgmtPrintSettingDetail.parmType()));
        printMgmtPrintSettingDetail.parmNumberOfCopies(1);

        return printMgmtPrintSettingDetail;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>