<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDefaultPrinterUIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocDefaultPrinterUIHelper
{
    TableId callerRecordTableId;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultPrinterValidationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a validation error message for the provided printer. If the printer is valid, returns an empty string.
    /// </summary>
    /// <param name = "_printerName">Printer name</param>
    /// <param name = "_userId">User ID. If empty, if User-allowed printers will be ignored.</param>
    /// <param name = "_allowBlank">True, if the printer name can be empty</param>
    /// <param name = "_verbose">Should validation message be printed to infolog</param>
    /// <returns>Validation error, if the given printer is invalid. Returns an empty string, if the provided printer is valid for the given user.</returns>
    public static str getDefaultPrinterValidationError(Name _printerName, UserId _userId = '', boolean _allowBlank = true, boolean _verbose = false)
    {
        if (_allowBlank && !_printerName)
        {
            return '';
        }

        str errorMessage = DocPrinterManager::getPrinterValidationErrorForUser(_userId, _printerName);
        if (!errorMessage)
        {
            return '';
        }

        if (_verbose)
        {
            DocGlobalHelper::handleWarning(errorMessage);
        }

        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPrinter</Name>
				<Source><![CDATA[
    public static server void initDefaultPrinter(DocDefaultPrinterScope _scope)
    {      
        str errorMessage;
        
        switch (_scope)
        {
            case DocDefaultPrinterScope::User:
                
                UserInfo userInfo;                
                DocUserPrinterSettings userPrinterSettings, userPrinterSettingsInsert;

                ttsbegin;

                // Delete user settings records which
                // point to non-existent users.
                delete_from userPrinterSettings
                    notexists join userInfo
                        where userInfo.id == userPrinterSettings.UserId
                            && userInfo.enable == NoYes::Yes
                            && userInfo.accountType != UserAccountType::ClaimsGroup
                            && userInfo.isMicrosoftAccount == NoYes::No;

                // Add missing user settings records.
                // Just fill UserId, to enable join.
                insert_recordset userPrinterSettingsInsert (UserId)
                    select id from userInfo
                        where userInfo.enable == NoYes::Yes
                            && userInfo.accountType != UserAccountType::ClaimsGroup
                            && userInfo.isMicrosoftAccount == NoYes::No
                    notexists join userPrinterSettings
                        where userPrinterSettings.UserId == userInfo.id;

                // Update Valid flag on user settings based on the effective user default printer
                DocDefaultPrintersView view;
                while select forupdate userPrinterSettings
                {
                    select firstonly DefaultPrinterEffective, UserId from view
                        where view.UserId == userPrinterSettings.UserId
                            && view.UserSettingsDataArea == curExt();

                    errorMessage = DocDefaultPrinterUIHelper::getDefaultPrinterValidationError(view.DefaultPrinterEffective, view.UserId, true, false);
                    userPrinterSettings.IsDefaultPrinterValid = errorMessage == '';
                    userPrinterSettings.ValidationStatus = errorMessage;
                    userPrinterSettings.update();
                }

                ttscommit;

                break;

            case DocDefaultPrinterScope::UserGroup:
                
                UserGroupInfo userGroupInfo;
                DocUserGroupPrinterSettings userGroupPrinterSettings, userGroupPrinterSettingsInsert;
                
                ttsbegin;

                // Delete user group settings records which
                // point to non-existent user groups.
                delete_from userGroupPrinterSettings
                    notexists join userGroupInfo
                        where userGroupInfo.id == userGroupPrinterSettings.UserGroupId;

                // Add missing user group settings records.
                // Just fill UserGroupId, to enable join.
                insert_recordset userGroupPrinterSettingsInsert (UserGroupId)
                    select id from userGroupInfo
                        notexists join userGroupPrinterSettings
                            where userGroupPrinterSettings.UserGroupId == userGroupInfo.id;

                // Update Valid flag on user group settings
                while select forupdate userGroupPrinterSettings
                {
                    errorMessage = DocDefaultPrinterUIHelper::getDefaultPrinterValidationError(userGroupPrinterSettings.DefaultPrinterName, '', true, false);
                    userGroupPrinterSettings.IsDefaultPrinterValid = errorMessage == '';
                    userGroupPrinterSettings.ValidationStatus = errorMessage;
                    userGroupPrinterSettings.update();
                }

                ttscommit;

                break;
            

            case DocDefaultPrinterScope::Global:
                
                DocGlobalPrinterSettings globalPrinterSettings;
                
                ttsbegin;

                // Add missing global settings record.
                select count(RecId) from globalPrinterSettings;
                if (globalPrinterSettings.RecId == 0)
                {
                    globalPrinterSettings.insert();
                }

                // Update Valid flag on global settings
                while select forupdate globalPrinterSettings
                {
                    errorMessage = DocDefaultPrinterUIHelper::getDefaultPrinterValidationError(globalPrinterSettings.DefaultPrinterName, '', true, false);
                    globalPrinterSettings.IsDefaultPrinterValid = errorMessage == '';
                    globalPrinterSettings.ValidationStatus = errorMessage;
                    globalPrinterSettings.update();
                }

                ttscommit;

                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>bulkUpdateDefaultPrinter</Name>
				<Source><![CDATA[
    private int bulkUpdateDefaultPrinter(List _recIds, Name _printerName, boolean _updateName = true)
    {
        int cnt;
        ListEnumerator le = _recIds.getEnumerator();

        ttsbegin;
        while (le.moveNext())
        {
            switch (callerRecordTableId)
            {
                case tableNum(DocGlobalPrinterSettings):
                    DocGlobalPrinterSettings printerSettingsGlobal = DocGlobalPrinterSettings::find(le.current(), true);
                    if (_updateName)
                    {
                        printerSettingsGlobal.DefaultPrinterName = _printerName;
                    }
                    printerSettingsGlobal.modifiedField(fieldNum(DocUserGroupPrinterSettings, DefaultPrinterName));
                    printerSettingsGlobal.update();
                    break;

                case tableNum(DocUserGroupPrinterSettings):
                    DocUserGroupPrinterSettings printerSettingsUserGroup = DocUserGroupPrinterSettings::find(le.current(), true);
                    if (_updateName)
                    {
                        printerSettingsUserGroup.DefaultPrinterName = _printerName;
                    }
                    printerSettingsUserGroup.modifiedField(fieldNum(DocUserGroupPrinterSettings, DefaultPrinterName));
                    printerSettingsUserGroup.update();
                    break;
                    
                case tableNum(DocUserPrinterSettings):
                    DocUserPrinterSettings printerSettingsUser = DocUserPrinterSettings::find(le.current(), true);
                    if (_updateName)
                    {
                        printerSettingsUser.DefaultPrinterName = _printerName;
                    }
                    printerSettingsUser.modifiedField(fieldNum(DocUserPrinterSettings, DefaultPrinterName));
                    printerSettingsUser.update();
                    break;
            }

            cnt++;
        }
        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArgs</Name>
				<Source><![CDATA[
    private void checkArgs(Args _args)
    {
        if (!(_args && _args.caller() && _args.menuItemName()))
        {
            DocGlobalHelper::handleException(funcName(),
                'Function can be called only from DocUserGroupPrinterSettings and DocUserPrinterSettings forms');
        }

        if ((_args.menuItemName() == menuItemActionStr(DocResetDefaultPrinter) 
                || _args.menuItemName() == menuItemActionStr(DocValidateDefaultPrinter))
                &&  _args.dataset() != tableNum(DocGlobalPrinterSettings)
                &&  _args.dataset() != tableNum(DocUserGroupPrinterSettings)
                &&  _args.dataset() != tableNum(DocUserPrinterSettings)
                )
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid combination of menu item and form dataset');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToProcess</Name>
				<Source><![CDATA[
    private List getRecordsToProcess(Args _args)
    {
        FormRun callerFormRun = _args.caller() as FormRun;
        FormDataSource callerFds = null;
        List recIds = new List(Types::Int64);

        // Retrieve the caller form data source
        if (callerFormRun != null)
        {
            for (int i = 1; i <= callerFormRun.dataSourceCount(); i++)
            {
                if (_args.menuItemName() == menuItemActionStr(DocResetDefaultPrinter)
                    || _args.menuItemName() == menuItemActionStr(DocValidateDefaultPrinter)
                    || _args.menuItemName() == menuItemActionStr(DocSetDefaultPrinter))
                {
                    if ((callerFormRun.dataSource(i).cursor() is DocGlobalPrinterSettings)
                        || (callerFormRun.dataSource(i).cursor() is DocUserGroupPrinterSettings)
                        || (callerFormRun.dataSource(i).cursor() is DocUserPrinterSettings))
                    {
                        callerFds = callerFormRun.dataSource(i);

                        if (callerFormRun.dataSource(i).cursor() is DocGlobalPrinterSettings)
                        {
                            callerRecordTableId = tableNum(DocGlobalPrinterSettings);
                        }
                        else if (callerFormRun.dataSource(i).cursor() is DocUserGroupPrinterSettings)
                        {
                            callerRecordTableId = tableNum(DocUserGroupPrinterSettings);
                        }
                        else
                        {
                            callerRecordTableId = tableNum(DocUserPrinterSettings);
                        }

                        break;
                    }
                }
            }
        }

        if (callerFds == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid form data source');
        }

        // get the RecIds of the marked datasource records
        if (_args.menuItemName() == menuItemActionStr(DocResetDefaultPrinter)
            || _args.menuItemName() == menuItemActionStr(DocValidateDefaultPrinter)
            || _args.menuItemName() == menuItemActionStr(DocSetDefaultPrinter))
        {
            Common printerSettings;
            for (printerSettings = callerFds.getFirst(true) ? callerFds.getFirst(true) : callerFds.cursor();
                 printerSettings;
                 printerSettings = callerFds.getNext())
            {
                recIds.addEnd(printerSettings.RecId);
            }
        }

        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleDefaultPrinterActions</Name>
				<Source><![CDATA[
    public void handleDefaultPrinterActions(Args _args)
    {
        List recIds;
        int cnt;
        
        this.checkArgs(_args);
        recIds = this.getRecordsToProcess(_args);
        if (recIds.elements() == 0)
        {
            DocGlobalHelper::handleWarning("@DocentricAX2:NoRecordSelected");
            return;
        }
        
        try
        {
            switch (_args.menuItemName())
            {
                case menuItemActionStr(DocResetDefaultPrinter):
                    if (Box::confirm("@DocentricAX2:ResetDefaultPrinterConfirmation"))
                    {
                        cnt = this.bulkUpdateDefaultPrinter(recIds, '', true);                               
                        DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:ResetDefaultPrinterSuccess", cnt));
                    }
                    break;

                case menuItemActionStr(DocValidateDefaultPrinter):
                    cnt = this.bulkUpdateDefaultPrinter(recIds, '', false);  
                    switch (callerRecordTableId)
                    {
                        case tableNum(DocGlobalPrinterSettings):
                            DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:ValidateDPGlobalSuccess", curExt()));
                            break;

                        case tableNum(DocUserGroupPrinterSettings):
                            DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:ValidateDPUserGroupSuccess", cnt));
                            break;

                        case tableNum(DocUserPrinterSettings):                            
                            DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:ValidateDPUserSuccess", cnt));
                            break;
                    }
                    break;

                case menuItemActionStr(DocSetDefaultPrinter):
                    Name newName = _args.parm();
                    if (Box::confirm(strFmt("@DocentricAX2:SetDefaultPrinterConfirmation", newName)))
                    {
                        cnt = this.bulkUpdateDefaultPrinter(recIds, newName, true);
                        DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:ResetDefaultPrinterSuccess", cnt));
                    }
                    break;

                default:
                    return;
            }
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX2:DefaultPrinterActionsError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DocDefaultPrinterUIHelper helper = new DocDefaultPrinterUIHelper();
        helper.handleDefaultPrinterActions(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>