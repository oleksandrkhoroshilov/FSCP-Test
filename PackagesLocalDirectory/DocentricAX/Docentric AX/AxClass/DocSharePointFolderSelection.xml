<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSharePointFolderSelection</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Storage.SharePoint;
using Docentric.AX.Storage.SharePoint.Model;


/// <summary>
/// Data used when interacting with the DocSharePointFolderSelection dialog.
/// </summary>
public class DocSharePointFolderSelection
{
    private DocSPSite selectedSite;
    private DocSPFolder selectedFolder;
    private DocSPDocumentLibrary selectedLibrary;
    private str hostname;
    private str address;
    private boolean rebuildAddress;
    private boolean includePersonalSite;
    private DocSPSiteSearchOptions searchOptions;
    private str userId;
    private boolean showSites;
    private boolean showLibraries;
    private boolean showFolders;

    protected str spSiteUrl;
    protected str spDocumentLibraryUrl;
    protected str spFolderUrl;
         

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the DocSharePointFolderSelection class.
    /// </summary>
    protected void new()
    {
        rebuildAddress = true;
        includePersonalSite = false;
        showSites = true;
        showLibraries = true;
        showFolders = true;

        // Initialize the SharePoint site search options
        searchOptions = new DocSPSiteSearchOptions();
        searchOptions.IncludeWebs = true;
        searchOptions.OneDriveRetrieval = DocSPSiteRetrievalOptions::NoOneDriveSites;
        searchOptions.PageSize = 200;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the DocSharePointFolderSelection class.
    /// </summary>
    /// <param name = "_spHostname">The hostname of the SharePoint server</param>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderUrl">SharePoint document library or folder</param>
    /// <returns>A new instance of the DocSharePointFolderSelection class</returns>
    public static DocSharePointFolderSelection construct(str _spHostname, str _spSiteUrl = '', str _spFolderUrl = '')
    {
        DocSharePointFolderSelection spFolderSelection = null;
        
        if (_spHostname)
        {
            spFolderSelection = new DocSharePointFolderSelection();
            spFolderSelection.hostname = _spHostname;
            spFolderSelection.spSiteUrl = _spSiteUrl;
            spFolderSelection.spFolderUrl = _spFolderUrl;
            spFolderSelection.spDocumentLibraryUrl = DocSharePointHelperV3::getDocumentLibraryUrl(_spFolderUrl, _spSiteUrl);
        }

        return spFolderSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the DocSharePointFolderSelection form to the user.
    /// </summary>
    /// <returns>The dialog's result</returns>
    public boolean promptUser()
    {
        Args args = new Args();
        args.name(formstr(DocSharePointFolderSelection));
        args.parmObject(this);

        FormRun selectionDlg = ClassFactory.formRunClass(args);
        selectionDlg.init();
        selectionDlg.run();
        selectionDlg.wait();

        return selectionDlg.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint site search options.
    /// </summary>
    /// <returns>An instance of DocSPSiteSearchOptions class</returns>
    public DocSPSiteSearchOptions getSearchOptions()
    {
        return searchOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the user Id.
    /// </summary>
    /// <param name = "_userId">The user Id.</param>
    /// <returns>The user Id. Defaults to the current user.</returns>
    public str parmUserId(str _userId = '')
    {
        if (!prmIsDefault(_userId))
        {
            userId = _userId;
        }
        else if (!userId)
        {
            userId = curUserId();
        }
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowSites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if SharePoint sites should be shown.
    /// </summary>
    /// <param name = "_showSites">Flag indicating if SharePoint sites should be shown</param>
    /// <returns>True/False</returns>
    public boolean parmShowSites(boolean _showSites = showSites)
    {
        showSites = _showSites;
        return showSites;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLibraries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if SharePoint document libraries should be shown.
    /// </summary>
    /// <param name = "_showLibraries">Flag indicating if SharePoint document libraries should be shown</param>
    /// <returns>True/False</returns>
    public boolean parmShowLibraries(boolean _showLibraries = showLibraries)
    {
        showLibraries = _showLibraries;
        return showLibraries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFolders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if SharePoint folders should be shown.
    /// </summary>
    /// <param name = "_showFolders">Flag indicating if SharePoint folders should be shown</param>
    /// <returns>True/False</returns>
    public boolean parmShowFolders(boolean _showFolders = showFolders)
    {
        showFolders = _showFolders;
        if (showFolders)
        {
            showLibraries = true;
        }
        return showFolders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the selected SharePoint folder.
    /// </summary>
    /// <param name = "_selectedFolder">The selected folder</param>
    /// <returns>The selected SharePoint folder</returns>
    public DocSPFolder parmSelectedFolder(DocSPFolder _selectedFolder = selectedFolder)
    {
        if (!prmisdefault(_selectedFolder))
        {
            selectedFolder = _selectedFolder;
            rebuildAddress = true;
        }
        return selectedFolder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedLibrary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the selected SharePoint document library.
    /// </summary>
    /// <param name = "_selectedLibrary">The selected document library</param>
    /// <returns>The selected SharePoint document library</returns>
    public DocSPDocumentLibrary parmSelectedLibrary(DocSPDocumentLibrary _selectedLibrary = selectedLibrary)
    {
        if (!prmisdefault(_selectedLibrary))
        {
            selectedLibrary = _selectedLibrary;
            rebuildAddress = true;
        }
        return selectedLibrary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the selected SharePoint site.
    /// </summary>
    /// <param name = "_selectedSite">The selected SharePoint site</param>
    /// <returns>The selected SharePoint site</returns>
    public DocSPSite parmSelectedSite(DocSPSite _selectedSite = selectedSite)
    {
        if (!prmisdefault(_selectedSite))
        {
            selectedSite = _selectedSite;
            rebuildAddress = true;
        }
        return selectedSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePersonalSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets whether OneDrive sites should be retrieved.
    /// </summary>
    /// <param name = "_includePersonalSite">If true, OneDrive sites are retrieved.</param>
    /// <returns>True if OneDrive sites are retrieved.</returns>
    public boolean parmIncludePersonalSite(boolean _includePersonalSite = includePersonalSite)
    {
        if (!prmisdefault(_includePersonalSite))
        {
            includePersonalSite = _includePersonalSite;
            if (includePersonalSite)
            {
                searchOptions.OneDriveRetrieval = DocSPSiteRetrievalOptions::IncludeOneDriveSites;
            }
            else
            {
                searchOptions.OneDriveRetrieval = DocSPSiteRetrievalOptions::NoOneDriveSites;
            }
        }

        return includePersonalSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the address indicated by the selected site, library and folder.
    /// </summary>
    /// <returns>An url to the selected folder</returns>
    public str getAddress()
    {
        if (rebuildAddress)
        {
            this.buildAddress();
            rebuildAddress = false;
        }
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHostName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the host name.
    /// </summary>
    /// <returns>The host name</returns>
    public str getHostName()
    {
        return hostname;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectionTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title of the currently selected item - folder, library or site.
    /// </summary>
    /// <returns>The name or title of the selected element.</returns>
    public str getSelectionTitle()
    {
        str title;

        if (this.parmSelectedFolder() != null)
        {
            title = this.parmSelectedFolder().Name;
        }
        else if (this.parmSelectedLibrary() != null)
        {
            title = this.parmSelectedLibrary().Title;
        }
        else if (this.parmSelectedSite() != null)
        {
            title = this.parmSelectedSite().Title;
        }

        return title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSiteHost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected site's host.
    /// </summary>
    /// <returns>The selected site's host or an empty string</returns>
    public str getSiteHost()
    {
        str siteHost = '';
        System.Uri siteUri;

        if (selectedSite != null && System.Uri::TryCreate(selectedSite.Url, System.UriKind::Absolute, byref siteUri))
        {
            siteHost = siteUri.Host;
        }

        return siteHost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSitePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected site's path
    /// </summary>
    /// <returns>The selected site's path or an empty string</returns>
    public str getSitePath()
    {
        str path = '';
        System.Uri siteUri;

        if (selectedSite != null && System.Uri::TryCreate(selectedSite.Url, System.UriKind::Absolute, byref siteUri))
        {
            path = siteUri.get_AbsolutePath();
        }

        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelativeFolderPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected folder's path relativate to the site.
    /// </summary>
    /// <returns>The selected folder's path relativate to the site or an empty string</returns>
    public str getRelativeFolderPath()
    {
        str path = '';
        str folderPath;
        System.Uri siteUri;

        if ((selectedFolder != null || selectedLibrary != null) && selectedSite != null &&
            System.Uri::TryCreate(selectedSite.Url, System.UriKind::Absolute, byref siteUri))
        {
            if (selectedFolder != null)
            {
                folderPath = selectedFolder.ServerRelativeUrl;
            }
            else
            {
                folderPath = selectedLibrary.ServerRelativePath;
            }

            str sitePath = siteUri.get_AbsolutePath();
            if (strStartsWith(folderPath, sitePath))
            {
                int sitePathLength = strLen(sitePath);
                int startIndex = sitePathLength + 1;
                if (sitePathLength > 1)
                {
                    // Tthe site is more than just a '/' so two '/'s need to be removed
                    startIndex++;
                }

                path = subStr(folderPath, startIndex, strLen(folderPath) - startIndex + 1);
            }
            else
            {
                path = folderPath;
            }
        }

        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the selected folder, libary and site to null.
    /// </summary>
    public void resetSelection()
    {
        this.parmSelectedFolder(null);
        this.parmSelectedLibrary(null);
        this.parmSelectedSite(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the address indicated by the selected site, library and folder.
    /// </summary>
    private void buildAddress()
    {
        str relativeFolderPath = this.getRelativeFolderPath();
        str siteAddress = this.getSite();
        address = '';

        if (strLen(siteAddress) > 0)
        {
            if (strLen(relativeFolderPath) > 0)
            {
                address = siteAddress + DocConstantFile::UrlDelimiter + relativeFolderPath;
            }
            else
            {
                address = siteAddress;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected SharePoint site url.
    /// </summary>
    /// <returns>Selectrd SharePoint site url</returns>
    private str getSite()
    {
        str sitePath = '';

        if (selectedSite != null)
        {
            sitePath = selectedSite.Url;
        }

        return sitePath;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>