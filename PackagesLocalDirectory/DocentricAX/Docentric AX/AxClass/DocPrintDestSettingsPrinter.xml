<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintDestSettingsPrinter</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPrintDestSettingsPrinter implements SysPackable
{
    str                                selectedPrinterName;
    boolean                            printAllPages;
    int                                printFromPage;
    int                                printToPage;
    DocReportPrintOrientation          orientation;
    DocReportDuplexPrintingSetting     duplexPrinting;
    boolean                            collated;
    int                                numberOfCopies;
    boolean                            printAsPdf;
    str                                printAsPdfFilename;

    // Fields not to be packed:
    str         printerPath;
    str         printJobSettingsXmlStr;
    guid        printerId;
    

    #define.packVersion1(1)
    #localmacro.listVersion1
        version,
        selectedPrinterName,
        printAllPages,
        printFromPage,
        printToPage,
        orientation,
        duplexPrinting,
        collated,
        numberOfCopies
    #endMacro

    #define.currentPackVersion(2)
    #localmacro.currentList
        version,
        selectedPrinterName,
        printAllPages,
        printFromPage,
        printToPage,
        orientation,
        duplexPrinting,
        collated,
        numberOfCopies,
        printAsPdf,
        printAsPdfFilename
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        printAllPages = true;
        numberOfCopies = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int version = #currentPackVersion;
    
        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAsPdf</Name>
				<Source><![CDATA[
    public boolean parmPrintAsPdf(boolean _printAsPdf = printAsPdf)
    {
        printAsPdf = _printAsPdf;
        return printAsPdf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAsPdfFilename</Name>
				<Source><![CDATA[
    public str parmPrintAsPdfFilename(str _printAsPdfFilename = printAsPdfFilename)
    {
        printAsPdfFilename = _printAsPdfFilename;
        return printAsPdfFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAllPages</Name>
				<Source><![CDATA[
    public boolean parmPrintAllPages(boolean _printAllPages = printAllPages)
    {
        printAllPages = _printAllPages;
        return printAllPages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFromPage</Name>
				<Source><![CDATA[
    public int parmPrintFromPage(int _printFromPage = printFromPage)
    {
        printFromPage = _printFromPage;
        return printFromPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToPage</Name>
				<Source><![CDATA[
    public int parmPrintToPage(int _printToPage = printToPage)
    {
        printToPage = _printToPage;
        return printToPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrientation</Name>
				<Source><![CDATA[
    public DocReportPrintOrientation parmOrientation(DocReportPrintOrientation _orientation = orientation)
    {
        orientation = _orientation;
        return orientation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDuplexPrinting</Name>
				<Source><![CDATA[
    public DocReportDuplexPrintingSetting parmDuplexPrinting(DocReportDuplexPrintingSetting _duplexPrinting = duplexPrinting)
    {
        duplexPrinting = _duplexPrinting;
        return duplexPrinting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollated</Name>
				<Source><![CDATA[
    public boolean parmCollated(boolean _collated = collated)
    {
        collated = _collated;
        return collated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfCopies</Name>
				<Source><![CDATA[
    public int parmNumberOfCopies(int _numberOfCopies = numberOfCopies)
    {
        numberOfCopies = _numberOfCopies;
        return numberOfCopies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedPrinterName</Name>
				<Source><![CDATA[
    public str parmSelectedPrinterName(str _selectedPrinterName = selectedPrinterName)
    {
        selectedPrinterName = _selectedPrinterName;
        return selectedPrinterName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultParmValues</Name>
				<Source><![CDATA[
    public void setDefaultParmValues(DocReportId _reportId, DocReportCaption _reportCaption)
    {
        if (!printAllPages)
        {
            if (printFromPage <= 0)
            {
                printFromPage = 1;
            }
    
            if (printToPage <= 0)
            {
                printToPage = 1;
            }
    
            if (printFromPage > printToPage)
            {
                printToPage = printFromPage;
            }
        }

        if (numberOfCopies <= 0)
        {
            numberOfCopies = 1;
        }

        if (!this.parmPrintAsPdfFilename())
        {
            str filenameWithType = DocReportingHelper::getDefaultOutputFilename(
                _reportId, false, _reportCaption, 0, DocConstantFile::FileExtPdf, DocConstantFile::ReportFixedFilename, false);
            if (filenameWithType)
            {
                this.parmPrintAsPdfFilename(filenameWithType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean    ret = false;
        int        version;
    
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #packVersion1)
            {
                [#listVersion1] = _pack;
        
                printAsPdf = false;
                printAsPdfFilename = '';

                ret = true;
            }
            else if (version == #currentPackVersion)
            {
                [#currentList] = _pack;
    
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates printer print settings.
    /// </summary>
    /// <param name = "_printValidationErrors">Should validation errors be printed to infolog.</param>
    /// <param name = "_checkTokens">Should validation skip the fields with tokens.</param>
    /// <param name = "_checkPlaceholders">Should validation skip the fields with placeholders.</param>
    /// <param name = "_reportId">Report ID. Needed to validate if the selected printer is allowed.</param>
    /// <param name = "_reportContextInfo">
    /// Contains the report context information - DocPrintReportSettings or SrsReportDataContract object.
    /// Used in the DocReportRunDelegates.onValidatingRestrictedPrinter() delegate that enables applying custom printer restriction rules.
    /// </param>
    /// <returns>True, if the printer print settings are valid.</returns>
    public boolean validate(boolean _printValidationErrors = true, boolean _checkTokens = true, boolean _checkPlaceholders = true, DocReportId _reportId = '', Object _reportContextInfo = null)
    {
        boolean isValid = true;

        if (!selectedPrinterName)
        {
            isValid = false;
            if (_printValidationErrors)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:PrinterNotSelected");
            }
        }

        str resolvedPrinterName = selectedPrinterName;

        // Resolve the selected printer name if it's requested so.
        if (_checkTokens && DocPrintDestSettingsPrinter::containsToken(selectedPrinterName))
        {
            resolvedPrinterName = this.resolvePrinterName();
            if (resolvedPrinterName == '')
            {
                // No default printer is set for the current user, or it is set but it's not valid.
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:NoDefaultPrinterSet", curUserId()));
                }
            }
        }

        // In case that the selected printer name doesn't contain any token and it is set, check here if
        // the selected printer's name and path are valid. If the selected printer name contains a token,
        // and we resolved it successfully, then check if the resolved printer path is valid.
        if (resolvedPrinterName != '' && !DocPrintDestSettingsPrinter::containsToken(resolvedPrinterName))
        {
            // The resolved printer name doesn't contain any token; now check if it contains any placeholder.
            if (!DocPlaceholderManager::findAnyPlaceholderCandidate(resolvedPrinterName))
            {
                // There is no placeholder found either. Now check if the printer is active and allowed.
                if (!DocPrinterManager::isPrinterActiveAndAllowed(selectedPrinterName, resolvedPrinterName, _printValidationErrors, _reportId, _reportContextInfo, curUserId()))
                {
                    isValid = false;
                    // Validation errors are printed to Infolog in the DocPrinterManager::isPrinterActiveAndAllowed() method.
                }
            }
            // The resolved printer name contains placeholders. Write out validation error if needed.
            else if (_checkPlaceholders)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:SelectedPrinterNameContainsPlaceholders", resolvedPrinterName));
                }
            }
        }
    
        if (!printAllPages)
        {
            if (printFromPage < 1)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:FromPageLessThanOne", printFromPage));
                }
            }
    
            if (printToPage < 1)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ToPageLessThanOne", printToPage));
                }
            }
    
            if (printFromPage > printToPage)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:FromPageGreaterThanToPage", printFromPage, printToPage));
                }
            }
        }

        if (numberOfCopies <= 0)
        {
            isValid = false;
            if (_printValidationErrors)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:NumberOfCopiesLessThanZero", numberOfCopies));
            }
        }


        /* PRINTING AS PDF (USING ADOBE VIA DRA) */
        if (printAsPdf)
        {
            /* First check if this is an on-premises enviroment. If so, throw the error */
            if (DocConstantGlobal::isOnPremEnvironment())
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX2:PrintAsPdfNotEnabledError");
                }
            }

            /* It's a cloud environment */
            else
            {
                if (!printAsPdfFilename)
                {
                    isValid = false;
                    if (_printValidationErrors)
                    {
                        DocGlobalHelper::handleWarning("@DocentricAX:ReportOutputFilenameNotSet");
                    }
                }
    
                if (printAsPdfFilename)
                {
                    str fileNameOnly, fileType, filePath;
                    [fileNameOnly, fileType, filePath] = Docu::splitFilename(printAsPdfFilename);

                    if (_checkPlaceholders)
                    {
                        if (DocPlaceholderManager::findAnyPlaceholderCandidate(printAsPdfFilename))
                        {
                            isValid = false;
                            if (_printValidationErrors)
                            {
                                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReportOutputFilenameContainsPlaceholders", printAsPdfFilename));
                            }
                        }
                    }
    
                    // Check if the report output file name is set.
                    if (!fileNameOnly)
                    {
                        isValid = false;
                        if (_printValidationErrors)
                        {
                            DocGlobalHelper::handleWarning("@DocentricAX:ReportOutputFilenameNotSet");
                        }
                    }
    
                    // Check if the report output file name is a valid file name.
                    if (fileNameOnly && !DocFileMngHelper::isValidOnlyFileName(fileNameOnly))
                    {
                        isValid = false;
                        if (_printValidationErrors)
                        {
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReportOutputFilenameInvalid", printAsPdfFilename));
                        }
                    }

                    // Check if the report output file type is set.
                    if (!fileType)
                    {
                        isValid = false;
                        if (_printValidationErrors)
                        {
                            DocGlobalHelper::handleWarning("@DocentricAX:ReportOutputFileTypeIsNotSet");
                        }
                    }
    
                    // Check if the report output file type is PDF.
                    if (fileType && fileType != DocConstantFile::FileExtPdf)
                    {
                        isValid = false;
                        if (_printValidationErrors)
                        {
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:PrintAsPdfFiletypeError", printAsPdfFilename));
                        }
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintJobSettingsXmlStr</Name>
				<Source><![CDATA[
    public str getPrintJobSettingsXmlStr()
    {
        return printJobSettingsXmlStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintJobSettingsXml</Name>
				<Source><![CDATA[
    public void createPrintJobSettingsXml()
    {
        XmlDocument printJobSettingsXmlDoc;

        void setPrintJobSettingsProperty(str _xPath, str _value)
        {
            XmlElement xmlElement = printJobSettingsXmlDoc.selectSingleNode(_xPath);
            if (xmlElement != null)
            {
                xmlElement.innerText(_value);
            }
        }

        void loadPrinterPageSettingsFromBaseXml()
        {
            // Load the base page settings resource
            ResourceName resName = resourceStr(PrinterPageSettingsDefaultXml);
            if (resName)
            {
                ResourceNode resNode = SysResource::getResourceNode(resName);
                if (resNode)
                {
                    container dataContainer = SysResource::getResourceNodeData(resNode);
                    if (conNull() != dataContainer && conLen(dataContainer) == 1)
                    {
                        printJobSettingsXmlStr = conPeek(dataContainer, 1);
                    }
                }
            }

            if (printJobSettingsXmlStr == '')
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Resource (%1) does not exist or it failed to load', resName));
            }
            printJobSettingsXmlStr = DocGlobalHelper::scrubXmlFragment(printJobSettingsXmlStr);
            try
            {
                printJobSettingsXmlDoc = XmlDocument::newXml(printJobSettingsXmlStr);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Error while loading XML document from string (%1)', printJobSettingsXmlDoc));
            }
            if (printJobSettingsXmlDoc == null)
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Error while loading XML document from string (%1)', printJobSettingsXmlDoc));
            }
        }


        try
        {
            // Set printer path if not set.
            if (this.getPrinterPath() == '')
            {
                DocGlobalHelper::handleException('Printer path is not set');
            }

            // Load the base print job settings.
            loadPrinterPageSettingsFromBaseXml();
        
            // Replace all relevant properties to their set values.
            // 1. Orientation
            if (orientation == DocReportPrintOrientation::Landscape)
            {
                setPrintJobSettingsProperty(@"PageSettings/Landscape", 'true');
            }
            else if (orientation == DocReportPrintOrientation::Portrait)
            {
                setPrintJobSettingsProperty(@"PageSettings/Landscape", 'false');
            }
            //else if (orientation == DocReportPrintOrientation::Default)
            //{
            //    // Set nothing.
            //}

            // 2. Collated
            if (collated)
            {
                setPrintJobSettingsProperty(@"PageSettings/PrinterSettings/Collate", 'true');
            }
            else
            {
                setPrintJobSettingsProperty(@"PageSettings/PrinterSettings/Collate", 'false');
            }

            // 3. Duplex printing
            str valueToBeSet = '';
            switch(duplexPrinting)
            {
                case DocReportDuplexPrintingSetting::FlipOnLongEdge:
                    valueToBeSet = 'Vertical';
                    break;
                case DocReportDuplexPrintingSetting::FlipOnShortEdge:
                    valueToBeSet = 'Horizontal';
                    break;
                case DocReportDuplexPrintingSetting::None:
                    valueToBeSet = 'Simplex';
                    break;
            }

            // Don't set empty value - in that case whatever is printer's default setting will be used.
            if (valueToBeSet)
            {
                setPrintJobSettingsProperty(@"PageSettings/PrinterSettings/Duplex", valueToBeSet);
            }

            // 4. Number of copies
            setPrintJobSettingsProperty(@"PageSettings/PrinterSettings/Copies", int2Str(numberOfCopies));

            // 5. Printer path.
            setPrintJobSettingsProperty(@"PageSettings/PrinterSettings/PrinterName", printerPath);

            /*******************************************************************************************************/
            // Note that we didn't support custom margins properties, which are used only for the Cheque SSRS report.
            // We are not sure yet if this means that the printing of SSRS Cheques with Docentric print destination and Save as PDF will work properly.
            // However, if SSRS report design doesn't depend on custom margins, which are set in:
            // Cash and bank management > Bank accounts > Bank accounts form > SET UP action tab > LAYOUT button group > Check button > Check layout form > Layout tab
            // then this potential limitation is not important. Moreover, such SSRS Cheque can also be printed in EMF format,
            // which means avoiding the 'Print as PDF' printing mode and Adobe Acrobat Reader.
            // Read more at: https://ax.docentric.com/why-dra-uses-adobe-reader-to-print-checks-in-d365fo-and-how-to-avoid-it/
            /*******************************************************************************************************/

            printJobSettingsXmlStr = printJobSettingsXmlDoc.toString();
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error while creating Print Job Settings XML');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePrinterPathAndPrinterId</Name>
				<Source><![CDATA[
    public str resolvePrinterPathAndPrinterId()
    {
        str resolvedPrinterName = this.resolvePrinterName();

        // Resolve printer path and printer ID using the resolved printer name.
        if (DocConstantGlobal::isOnPremEnvironment())
        {
            this.setPrinterIdAndPathOnPremise(resolvedPrinterName);
        }
        else
        {
            this.updatePrinterAndSetPrinterIdAndPath(resolvedPrinterName);
        }

        // Return resolved printer path (no matter if it is resolved or not).
        return printerPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePrinterName</Name>
				<Source><![CDATA[
    public str resolvePrinterName()
    {
        str resolvedPrinterName = selectedPrinterName;

        // Check if we need to resolve tha selected printer name.
        if (DocPrintDestSettingsPrinter::containsToken(resolvedPrinterName))
        {
            // Default printer token is selected as the target printer name.
            if (resolvedPrinterName == DocConstant::DefaultPrinterPlaceholder)
            {
                // Resolve the default printer name.
                resolvedPrinterName = DocPrinterManager::getDefaultPrinterName();
            }
            
            // Add here support for resolving other printer tokens when introduced.

            else
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported printer token: %1', resolvedPrinterName));
            }
        }

        return resolvedPrinterName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterPath</Name>
				<Source><![CDATA[
    public str getPrinterPath()
    {
        if (printerPath == '')
        {
            this.resolvePrinterPathAndPrinterId();
        }
        return printerPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterId</Name>
				<Source><![CDATA[
    public guid getPrinterId()
    {
        if (printerId == emptyGuid())
        {
            this.resolvePrinterPathAndPrinterId();
        }
        return printerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrinterIdAndPathOnPremise</Name>
				<Source><![CDATA[
    public void setPrinterIdAndPathOnPremise(str _printerName)
    {
        if (!_printerName)
        {
            return;
        }

        // Resolve printer path only if the printer is active.
        SysCorpNetPrinters xActivePrintersOnPremise;
        select firstonly xActivePrintersOnPremise
        where xActivePrintersOnPremise.PrinterName == _printerName &&
              xActivePrintersOnPremise.Active == NoYesCombo::Yes;

        // Set the printer path and ID.
        printerPath = xActivePrintersOnPremise.PrinterPath;
        printerId = xActivePrintersOnPremise.PrinterId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterAndSetPrinterIdAndPath</Name>
				<Source><![CDATA[
    public void updatePrinterAndSetPrinterIdAndPath(str _printerName)
    {
        if (!_printerName)
        {
            return;
        }

        // Resolve printer path only if the printer is active.
        SysCorpNetActivePrinters xActivePrinters;
        select firstonly xActivePrinters where xActivePrinters.PrinterName == _printerName;

        printerPath = xActivePrinters.PrinterPath;
        printerId = xActivePrinters.PrinterId;

        // Since the PrinterId is a new added column in SysCorpnetPrinters table.
        // The value could be empty guid for upgraded existing value.
        if (xActivePrinters.RecId != 0 && xActivePrinters.PrinterId == emptyGuid())
        {
            try
            {
                ttsbegin;
                xActivePrinters.selectForUpdate(true);
                xActivePrinters.PrinterId = System.Guid::NewGuid();
                xActivePrinters.update();
                ttscommit;

                // Update the printer ID.
                printerId = xActivePrinters.PrinterId;
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Failed to update the printer (%1) with the new ID', _printerName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>escapePdfFilename</Name>
				<Source><![CDATA[
    public void escapePdfFilename()
    {
        if (printAsPdfFilename)
        {
            printAsPdfFilename = DocFileMngHelper::replaceInvalidCharsForFileName(printAsPdfFilename);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DocPrintDestSettingsPrinter construct(str _printerName)
    {
        DocPrintDestSettingsPrinter printDestSettingsPrinter;
    
        printDestSettingsPrinter = new DocPrintDestSettingsPrinter();
        printDestSettingsPrinter.parmSelectedPrinterName(_printerName);
        
        return printDestSettingsPrinter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForDefaultPrinter</Name>
				<Source><![CDATA[
    public static DocPrintDestSettingsPrinter constructForDefaultPrinter()
    {
        DocPrintDestSettingsPrinter printDestSettingsPrinter;
    
        printDestSettingsPrinter = new DocPrintDestSettingsPrinter();
        printDestSettingsPrinter.parmSelectedPrinterName(DocConstant::DefaultPrinterPlaceholder);
        
        return printDestSettingsPrinter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static DocPrintDestSettingsPrinter create(container _packedFromPrintDestSettingsPrinter)
    {
        DocPrintDestSettingsPrinter printDestSettingsPrinter;
    
        printDestSettingsPrinter = new DocPrintDestSettingsPrinter();
        printDestSettingsPrinter.unpack(_packedFromPrintDestSettingsPrinter);
    
        return printDestSettingsPrinter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsToken</Name>
				<Source><![CDATA[
    public static boolean containsToken(str _printerName)
    {
        if (_printerName == DocConstant::DefaultPrinterPlaceholder)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPrinterName</Name>
				<Source><![CDATA[
    public static str formatPrinterName(str _printerName, str _resolvedPrinterName)
    {
        if (_printerName && DocPrintDestSettingsPrinter::containsToken(_printerName) && _resolvedPrinterName)
        {
            return strFmt('%1 >> %2', _printerName, _resolvedPrinterName);
        }

        return _printerName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>