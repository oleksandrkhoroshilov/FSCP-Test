<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDocuActionFileWithMetadata</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Storage.SharePoint.Common;
using Docentric.AX.Storage.SharePoint.Model;
using Docentric.AX.Framework.Extensions;
using UL = Docentric.AX.Framework.Utilities;

/// <summary>
/// The DocDocuActionFileWithMetadata class is used to attach files with metadata.
/// Since the DocuActionArchive class is marked as final, this class inherits from its parent
/// class instead - DocuActionFile, while some methods from DocuActionArchive are copied.
/// </summary>
public class DocDocuActionFileWithMetadata extends DocuActionFile
{
    Filename curFileType;
    ClassDescription description;
    boolean uploadFileAllowedWithoutMetadata = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches the file. Copied from the DocuActionArchive class with a change by Docentric.
    /// </summary>
    /// <param name = "_docuRef">A DocuRef table buffer</param>
    /// <param name = "_filename">A file name</param>
    public void add(DocuRef _docuRef, Filename _filename = '')
    {
        // Get the DocuView form data source
        FormDataSource docuViewDataSource = FormDataUtil::getFormDataSource(_docuRef);

        DocuRef updatedRecord = DocumentFileHelper::getDocumentFromUserForDocuRef(_docuRef);

        if (updatedRecord)
        {
            DocuValue docuValue = updatedRecord.docuValue();

            // if (!Docu::scanDocument(updatedRecord))
            if (!(new DictClass(classNum(Docu)).callStatic(identifierStr(scanDocument), updatedRecord)))
            {
                this.deleteDocuRefAndDocuValueRecords(updatedRecord, docuValue);
                throw warning ("@ApplicationFoundation:DocuFileScanAddNewFile_ThreatDetectedWarning");
            }
            
            // If the extension isn't valid, remove the record and error out;
            // otherwise if the extension is valid, then refresh the data source and select the newly added record
            if (!Docu::validateExtension(docuValue.FileType))
            {
                this.deleteDocuRefAndDocuValueRecords(updatedRecord, docuValue);
                error("@SYS99219");
            }
            else
            {
                docuViewDataSource.executeQuery();
                docuViewDataSource.refresh();
                docuViewDataSource.positionToRecord(updatedRecord);

                DocuAction::RecordCreated(docuViewDataSource.formRun());

                // <Docentric>
                // If the metadata was not successfully updated when the file was attached and the uploadFileAllowedWithoutMetadata flag
                // is set to true, the error message was stored in the global cache, as this is the only way to get the correct error message
                // and display it to the user. 
                if (docuType.FilePlace == DocuFilePlace::SharePoint)
                {
                    SysGlobalObjectCache globalCache = new SysGlobalObjectCache();
                    container cntErrorMsg = globalCache.find(identifierStr(DocDocuActionFileWithMetadata), [_docuRef.RecId]);
                    globalCache.remove(identifierStr(DocDocuActionFileWithMetadata), [_docuRef.RecId]);
                    if (cntErrorMsg != conNull())
                    {
                        DocGlobalHelper::handleWarning(conPeek(cntErrorMsg, 1), false, funcName(), false);
                    }
                }
                // </Docentric>
            }
        }
        else
        {
            this.cleanupDocuRef(_docuRef);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not this class can be selected as a valid document action class.
    /// </summary>
    /// <returns>True if the class is a valid document action class; otherwise false.</returns>
    public boolean canSetup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the class description.
    /// </summary>
    /// <param name = "_description">Class description</param>
    /// <returns>Class description</returns>
    public ClassDescription description(ClassDescription _description = "@DocentricAX4:DocDocuActionFileWithMetadataDescription")
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current file type.
    /// </summary>
    /// <returns>Current file type</returns>
    public Filename fileType()
    {
        return curFileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value to disable the obsolete options button in the DocuType form.
    /// </summary>
    /// <returns>Always false</returns>
    public boolean hasOption()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the referenced DocuRef record. Copied from the DocuActionArchive class.
    /// </summary>
    /// <param name="_docuRef">The DocuRef record to remove</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void cleanupDocuRef(DocuRef _docuRef)
    {
        DocuRef docuReference;

        ttsbegin;
        docuReference = DocuRef::findRecId(_docuRef.RecId, true);
        docuReference.doDelete();
        ttscommit;

        if (FormDataUtil::getFormDataSource(_docuRef))
        {
            FormDataUtil::getFormDataSource(_docuRef).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDocuRefAndDocuValueRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the DocuRef and DocuValue records. Copied from the DocuActionArchive class.
    /// </summary>
    /// <param name = "_docuRef">A DocuRef table buffer</param>
    /// <param name = "_docuValue">A DocuValue table buffer</param>
    private final void deleteDocuRefAndDocuValueRecords(DocuRef _docuRef, DocuValue _docuValue)
    {
        ttsbegin;
        _docuValue.delete();
        this.cleanupDocuRef(_docuRef);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlesRecordCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if a DocuAction class handles its own record creation. Copied from the DocuActionArchive class.
    /// </summary>
    /// <returns>A value indicating whether or not a docu action class handles its own record creation.</returns>
    public boolean handlesRecordCreation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches a file document value to the specified document reference.
    /// This method only updates metadata after the super() implementation saves the provided document 
    /// using the target storage provider. Currently, metadata are supported only for SharePoint.
    /// </summary>
    /// <param name="_ref">The <c>DocuRef</c> record that the file should be tied to.</param>
    /// <param name="_fileName">The name of the file to attach.</param>
    /// <param name="_fileContentType">The MIME type of the file to attach.</param>
    /// <param name="_fileContents">The contents of the file to attach.</param>
    /// <returns><c>true</c> if the document reference was successfully updated; otherwise, <c>false</c>.</returns>
    /// <remarks>The DocuRef value is updated and saved/committed by this function if the return value is <c>true</c>.</remarks>
    public boolean attachFile(DocuRef _ref, str _fileName, str _fileContentType, System.IO.Stream _fileContents)
    {
        #OCCRetryCount

        // Attach a file document value to the provided document reference
        boolean result = super(_ref, _fileName, _fileContentType, _fileContents);

        // Update the metadata of the attached file
        if (result && docuType.FilePlace == DocuFilePlace::SharePoint)
        {
            int ttsLevel = appl.ttsLevel();

            int infologLine = infologLine();
            str errorMsg = '';
            try
            {
                // When this method is called within the transaction, the transaction must be committed before updating the metadata.
                // The method to update the metadata has its own error handling and will not be triggered on error if the
                // transaction is still active. In x++, error handling is not possible within the transaction.
                if (ttsLevel > 0)
                {
                    ttscommit;
                }

                // Update the metadata
                this.updateSharePointMetadataInternal(_ref, _fileName, _fileContentType, _fileContents);
            }
            catch
            {
                DocuValue docuValue = _ref.docuValue();
                str spRelativeFilePath = DocSPUrlHelper::GetServerRelativePath(docuValue.Path, '');
                str spSiteUrl = DocSPUrlHelper::GetSiteUrl(docuType.Host, docuType.Site);
                str spFolder = docuType.FolderPath;
                str fileName = docuValue.fileName();
                DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(spSiteUrl, spRelativeFilePath, DocSharePointRole::GeneralPurposeUser);

                str errorMsgAdd = strFmt("@DocentricAX4:SharePointUpdateMetadataError", fileName, spSiteUrl, spFolder, spCredentials.toString());

                result = uploadFileAllowedWithoutMetadata;

                // If the flag uploadFileAllowedWithoutMetadata is set to false, the attached file must be deleted
                if (!uploadFileAllowedWithoutMetadata)
                {
                    DocSharePointHelperV3::deleteFile(spRelativeFilePath, spSiteUrl, spCredentials, false, false);
                }

                errorMsg = DocGlobalHelper::getInfoLogMessages(infologLine + 1, '', true);
                if (!strScan(errorMsg, errorMsgAdd, 1, strLen(errorMsg)))
                {
                    errorMsg += '\r\n' + errorMsgAdd;
                }
                if (!uploadFileAllowedWithoutMetadata)
                {
                    errorMsg += "@DocentricAX4:SharePointUpdateMetadataFileDeleteError";
                }

                // If the metadata is not updated successfully and the uploadFileAllowedWithoutMetadata is set to true,
                // the error message must be stored in the global cache, as this is the only way to display the correct 
                // error message to the user.
                if (result && errorMsg)
                {
                    SysGlobalObjectCache globalCache = new SysGlobalObjectCache();
                    globalCache.insert(identifierStr(DocDocuActionFileWithMetadata), [_ref.RecId], [errorMsg]);
                }
            }
            finally
            {
                // Start the new transaction if the transaction was active before the metadata update
                if (ttsLevel > 0)
                {
                    ttsbegin;
                }
                if (!result)
                {
                    DocGlobalHelper::handleWarning(errorMsg, false, funcName(), true);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUploadFileAllowedWithoutMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag indicating whether file upload without metadata is allowed.
    /// </summary>
    /// <param name = "_uploadFileAllowedWithoutMetadata">Specifies whether the file upload without metadata is allowed</param>
    public void setUploadFileAllowedWithoutMetadata(boolean _uploadFileAllowedWithoutMetadata = uploadFileAllowedWithoutMetadata)
    {
        uploadFileAllowedWithoutMetadata = _uploadFileAllowedWithoutMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the metadata for already attached file.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record that the file is tied to</param>
    /// <returns>The updated file URL</returns>
    public str updateMetadata(DocuRef _docuRef)
    {
        str filePathUrl = '';

        if (_docuRef && _docuRef.docuType().FilePlace == DocuFilePlace::SharePoint)
        {
            DocuValue docuValue = _docuRef.docuValue();
            str fileName = docuValue.fileName();
            str fileContentType = System.Web.MimeMapping::GetMimeMapping(fileName);

            filePathUrl = this.updateSharePointMetadataInternal(_docuRef, fileName, fileContentType, null);
        }

        return filePathUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSharePointMetadataInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the SharePoint metadata for attached file.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record that the file has been tied to</param>
    /// <param name = "_fileName">The name of the file being attached</param>
    /// <param name = "_fileContentType">The MIME type of the file being attached</param>
    /// <param name = "_fileContents">The contents of the file being attached</param>
    /// <returns>The updated file URL</returns>
    private str updateSharePointMetadataInternal(DocuRef _docuRef, str _fileName, str _fileContentType, System.IO.Stream _fileContents)
    {
        DocuValue docuValue = _docuRef.docuValue();

        str spRelativeFilePath = DocSPUrlHelper::GetServerRelativePath(docuValue.Path, '');
        str spSiteUrl = DocSPUrlHelper::GetSiteUrl(docuType.Host, docuType.Site);
        str spDocumentLibraryUrl = DocSharePointHelperV3::getDocumentLibraryUrl(docuType.FolderPath, spSiteUrl);

        // Get the SharePoint metadata fields map for SharePoint document library
        Map spMetadataFieldMap = this.getSharePointMetadataFieldMap(spDocumentLibraryUrl, spSiteUrl);

        DocSharePointMetadataSettings spMetadataSettings = new DocSharePointMetadataSettings();
        spMetadataSettings.parmSharePointSiteUrl(spSiteUrl);
        spMetadataSettings.parmSharePointDocumentLibraryUrl(spDocumentLibraryUrl);
        spMetadataSettings.parmSharePointMetadataFieldMap(spMetadataFieldMap);

        this.changeSharePointMetadataFields(_docuRef, docuType, _fileName, _fileContentType, _fileContents, spMetadataSettings);

        DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(spSiteUrl, spDocumentLibraryUrl, DocSharePointRole::GeneralPurposeUser);

        return DocSharePointHelperV3::updateSharePointFileMetadata(
                                        spRelativeFilePath,
                                        spMetadataSettings.parmSharePointMetadataFieldMap(),
                                        spSiteUrl,
                                        spCredentials,
                                        true,
                                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointMetadataFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint metadata field map for the specified document library:
    /// - Map[FieldInternalName, DocSharePointMetadataField object]
    /// </summary>
    /// <param name = "_spDocumentLibraryUrl">SharePoint document library url</param>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <returns>SharePoint metadata fields map</returns>
    private Map getSharePointMetadataFieldMap(str _spDocumentLibraryUrl, str _spSiteUrl)
    {
        Map spMetadataFieldMap = new Map(Types::String, Types::Class);
        DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(_spSiteUrl, _spDocumentLibraryUrl, DocSharePointRole::GeneralPurposeUser);

        // Get SharePoint document library
        DocSPDocumentLibrary spDocumentLibrary = DocSharePointHelperV3::getDocumentLibraryByUrl(_spDocumentLibraryUrl, _spSiteUrl, spCredentials);
        if (spDocumentLibrary != null)
        {
            // Only updatable metadata fields can be set
            if (spDocumentLibrary.UpdatableFields != null && spDocumentLibrary.UpdatableFields.Count > 0)
            {
                DocSPFieldCollection spFieldCollection = spDocumentLibrary.UpdatableFields;
                for (int i = 0; i < spFieldCollection.Count; i++)
                {
                    DocSPField spField = spFieldCollection.GetByIndex(i);
                            
                    DocSharePointMetadataField spMetadataField = new DocSharePointMetadataField();
                    spMetadataField.parmFieldName(spField.Title);
                    spMetadataField.parmFieldInternalName(spField.InternalName);
                    spMetadataField.parmFieldDataType(symbol2Enum(enumNum(DocSharePointMetadataFieldDataType), EnumExtensions::GetName(System.Enum::ToObject(spField.FieldType.GetType(), spField.FieldType))));
                    spMetadataField.parmIsRequired(spField.Required);

                    // Add SharePoint metadata field inforamtion to the map
                    spMetadataFieldMap.insert(spField.InternalName, spMetadataField);
                }
            }
        }
        return spMetadataFieldMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAttachmentSharePointMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for updating the provided SharePoint metadata fields with custom values for the attached file.
    /// The SharePoint metadata fields that are not updated, must be deleted from 
    /// the SharePoint metadata field map that is part of the DocSharePointMetadaSettings object.
    /// </summary>
    /// <param name = "_docuActionFileWithMetadata">An instance of the DocDocuActionFileWithMetadata class</param>
    /// <param name = "_docuRef">The DocuRef record that the file has been tied to</param>
    /// <param name = "_docuType">The document type of the DocuRef record</param>
    /// <param name = "_fileName">The name of the file being attached</param>
    /// <param name = "_fileContentType">The MIME type of the file being attached</param>
    /// <param name = "_fileContents">The contents of the file being attached</param>
    /// <param name = "_spMetadataSettings">An instance of the DocSharePointMetadataSettings class</param>
    delegate void changeAttachmentSharePointMetadata(DocDocuActionFileWithMetadata _docuActionFileWithMetadata, DocuRef _docuRef, DocuType _docuType, str _fileName, str _fileContentType, System.IO.Stream _fileContents, DocSharePointMetadataSettings _spMetadataSettings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSharePointMetadataFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for updating the provided SharePoint metadata fields for the attached file.
    /// The SharePoint metadata fields that should not be updated, must be deleted from
    /// the SharePoint metadata field map that is part of the DocSharePointMetadaSettings object.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record that the file has been tied to</param>
    /// <param name = "_docuType">The document type of the DocuRef record</param>
    /// <param name = "_fileName">The name of the file being attached</param>
    /// <param name = "_fileContentType">The MIME type of the file being attached</param>
    /// <param name = "_fileContents">The contents of the file being attached</param>
    /// <param name = "_spMetadataSettings">An instance of the DocSharePointMetadataSettings class</param>
    public void changeSharePointMetadataFields(
        DocuRef _docuRef,
        DocuType _docuType,
        str _fileName,
        str _fileContentType,
        System.IO.Stream _fileContents,
        DocSharePointMetadataSettings _spMetadataSettings)
    {
        try
        {
            this.changeAttachmentSharePointMetadata(this, _docuRef, _docuType, _fileName, _fileContentType, _fileContents, _spMetadataSettings);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocDocuActionFileWithMetadata, changeAttachmentSharePointMetadata)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocDocuActionFileWithMetadata, changeAttachmentSharePointMetadata)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>