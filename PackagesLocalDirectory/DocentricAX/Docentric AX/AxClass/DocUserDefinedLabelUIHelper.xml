<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocUserDefinedLabelUIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class DocUserDefinedLabelUIHelper is a helper class for user-defined labels user interface.
/// </summary>
public class DocUserDefinedLabelUIHelper
{
    private Args args;
    private FormDataSource labelDs, translationDs;
    private LanguageIdAll languageId;
    private DocReportId reportId;
    private DocLabelDescription description;
    private FormRun callerForm;
    private Set languagesSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Args class.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    /// <returns>An instance of the Args class</returns>
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the language Id.
    /// </summary>
    /// <param name = "_languageId">Language Id</param>
    /// <returns>Language Id</returns>
    public LanguageIdAll parmLanguageId(LanguageIdAll _languageId = languageId)
    {
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguagesSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the set of available languages.
    /// </summary>
    /// <param name = "_languagesSet">Set of available languages</param>
    /// <returns>Set of available languages</returns>
    public Set parmLanguagesSet(Set _languagesSet = languagesSet)
    {
        languagesSet = _languagesSet;
        return languagesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the report Id.
    /// </summary>
    /// <param name = "_reportId">Report Id</param>
    /// <returns>Report Id</returns>
    public DocReportId parmReportId(DocReportId _reportId = reportId)
    {
        reportId = _reportId;
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the description.
    /// </summary>
    /// <param name = "_description">Description</param>
    /// <returns>Description</returns>
    public DocLabelDescription parmDescription(DocLabelDescription _description = description)
    {
        description = _description;
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the caller.
    /// </summary>
    private void checkCaller()
    {
        // We expect to be called from the Translation (by label or by language) form.
        // It contains DocGlobalLabelTable and DocGlobalLabelTranslation datasources
        // and we want to obtain them here.
        //  - DocGlobalLabelTable: can be multi-selected, for each of the selected records
        //    we will perform the requested operation.
        //  - DocGlobalLabelTranslation: if the caller form was in a detail view,
        //    then we want to refresh this datasource, to show the newly added records.
        if (!(args.caller() && (args.caller() is FormRun)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: caller must be form');
        }

        callerForm = args.caller();
        for (int i = 1; i <= callerForm.dataSourceCount(); i++)
        {
            if (callerForm.dataSource(i).cursor() is DocLabelTable)
            {
                labelDs = callerForm.dataSource(i);
            }
            else if (callerForm.dataSource(i).cursor() is DocLabelTranslation)
            {
                translationDs = callerForm.dataSource(i);
            }
        }

        if (!labelDs || !translationDs)
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid caller form datasources');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTranslationsForMissingLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is helper method which is called from one of the forms having
    /// DocLabelTable as one of the datasources. Its (multi-selected) records
    /// are passed via args. 
    /// For all the selected labels this method will create the translation records
    /// for all the missing languages (if languageId parameter is empty string) 
    /// or only for the provided language. 
    /// If the currently processed User-defined label is based on the system label, 
    /// then the added translation records will also be populated with the system label 
    /// translations. 
    /// Otherwise, the added translation records will remain empty. 
    /// </summary>
    /// <param name = "_languages">If provided, translations for that language
    /// will be created. If null, all the missing translations will be created.</param>
    private void addTranslationsForMissingLanguages(Set _languages = null)
    {
        this.checkCaller();
        
        if (!(args.record() && (args.record() is DocLabelTable)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Iterate through the selected labels and add the missing translation records
        // for each of them.
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(labelDs);

        Set processedLabels = new Set(Types::String);
        
        int labelsProcessed = 0;
        int newTranslationsForLabel, totalTranslations = 0;
        boolean isBasedOnSystemLabel = false;
        RecId firstRecId;
        DocReportLabelId lastProcessedLabelId;
        DocLabelTable docLabelTable = helper.getFirst();
        try
        {
            while (docLabelTable.RecId != 0)
            {
                lastProcessedLabelId = docLabelTable.LabelId;
                
                isBasedOnSystemLabel = (docLabelTable.BasedOnSysLabelId != '') ? true : false;

                // If we came from the translations form (where all the datasources
                // are flat), user might have selected the same label multiple times. 
                // Avoid processing the same label more than once.
                if (!processedLabels.in(lastProcessedLabelId))
                {
                    processedLabels.add(lastProcessedLabelId);
                    labelsProcessed++;

                    if (_languages == null)
                    {
                        // Add all missing translations
                        if (isBasedOnSystemLabel)
                        {
                            // Create and populate the translations records
                            [newTranslationsForLabel, firstRecId] = DocLabelTranslation::addForSysLabel(docLabelTable.BasedOnSysLabelId, docLabelTable.LabelId);
                        }
                        else
                        {
                            // Only create the translation records
                            [newTranslationsForLabel, firstRecId] = DocLabelTranslation::addForMissingLanguages(docLabelTable.LabelId, docLabelTable.Description);
                        }

                        totalTranslations += newTranslationsForLabel;
                    }
                    else
                    {
                        // loop through the set of languages, for each of them add one translation record
                        SetEnumerator se = _languages.getEnumerator();
                        se.reset();
                        while (se.moveNext())
                        {
                            firstRecId = DocLabelTranslation::addForLabelAndLanguage(docLabelTable.LabelId, se.current(), docLabelTable.Description, docLabelTable.BasedOnSysLabelId);
                            newTranslationsForLabel = firstRecId ? 1 : 0;
                            totalTranslations += newTranslationsForLabel;
                        }
                    }
                }
            
                docLabelTable = helper.getNext();
            }
            
            // Show info, refresh datasources
            if (labelsProcessed == 1)
            {
                // Single-select: show details about the number of added translations 
                // for the selected label. Refresh the translations datasource.
                if (newTranslationsForLabel > 0)
                {
                    if (_languages == null)
                    {
                        if (isBasedOnSystemLabel)
                        {
                            DocGlobalHelper::handleInfo(strFmt("@DocentricAX4:SuccessAddingSysLabelTranslations", newTranslationsForLabel, lastProcessedLabelId));
                        }
                        else
                        {
                            DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessAddingTranslations", newTranslationsForLabel, lastProcessedLabelId));
                        }
                    }
                    else
                    {
                        if (isBasedOnSystemLabel)
                        {
                            DocGlobalHelper::handleInfo(strFmt("@DocentricAX4:SuccessAddingSysLabelTranslationsForLabelAndLanguage", lastProcessedLabelId, _languages.toString()));
                        }
                        else
                        {
                            DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessAddingTranslationForLabelAndLanguage", lastProcessedLabelId, _languages.toString()));
                        }
                    }
                    translationDs.research(true);
                }
                else
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:NoTranslationAdded", lastProcessedLabelId));
                }
            }
            else
            {
                // Multi-select: show how many total translations for how many selected labels
                // were added. 
                if (totalTranslations > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessAddingTranslationsMultiSelect", totalTranslations, labelsProcessed));
                    translationDs.research(true);
                }
                else
                {
                    DocGlobalHelper::handleInfo("@DocentricAX3:NoTranslationRecordAdded");
                }
            }

            // Refresh the labels datasource (to update the display method with number of translations)
            labelDs.research(true);
        }
        catch
        {
            if (_languages == null)
            {
                DocGlobalHelper::handleError("@DocentricAX3:ErrorAddingTranslationsForMissingLanguages");
            }
            else
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX3:ErrorAddingTranslationsForLabelsAndLanguage", _languages.toString()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTranslationsForLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is helper method which is called from one of the forms having
    /// DocLabelTable as one of the datasources. Its (multi-selected) records
    /// are passed via args.
    /// For each of the selected labels this method will delete the translation record
    /// for that label and the specified language.
    /// </summary>
    /// <param name = "_languages">Language for which the translations should be deleted</param>
    private void deleteTranslationsForLanguage(Set _languages = null)
    {
        this.checkCaller();
        
        if (!(args.record() && (args.record() is DocLabelTable)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Iterate through the selected labels and delete translation records
        // for the specified language.
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(labelDs);

        Set processedLabels = new Set(Types::String);
        
        int labelsProcessed = 0;
        int deletedTranslationsForLabel, totalDeletedTranslations = 0;
        DocReportLabelId lastProcessedLabelId;
        DocLabelTable docLabelTable = helper.getFirst();
        try
        {
            while (docLabelTable.RecId != 0)
            {
                lastProcessedLabelId = docLabelTable.LabelId;

                // If we came from the flat translations form, user might have selected
                // the same label multiple times. Avoid processing the same label
                // more than once.
                if (!processedLabels.in(lastProcessedLabelId))
                {
                    processedLabels.add(lastProcessedLabelId);

                    labelsProcessed++;
                
                    // loop through the set of languages, for each of them add one translation record
                    SetEnumerator se = _languages.getEnumerator();
                    se.reset();
                    while (se.moveNext())
                    {
                        deletedTranslationsForLabel = DocLabelTranslation::deleteForLabelAndLanguage(docLabelTable.GlobalLabelId, se.current());
                        totalDeletedTranslations += deletedTranslationsForLabel;
                    }

                }
            
                docLabelTable = helper.getNext();
            }
            
            // Show info, refresh datasources
            if (labelsProcessed == 1)
            {
                // Single-select: show details about the number of added translations
                // for the selected label. Refresh the translations datasource.
                if (deletedTranslationsForLabel > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessDeletingTranslationForLabelAndLanguage", lastProcessedLabelId, _languages.toString()));
                    translationDs.research(true);
                }
                else
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:NoTranslationRecordForLabelDeleted", lastProcessedLabelId, _languages.toString()));
                }
            }
            else
            {
                // Multi-select: show how many total translations for how many selected labels
                // were added.
                if (totalDeletedTranslations > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessDeletingTranslationsMultiSelect", totalDeletedTranslations, labelsProcessed));
                    translationDs.research(true);
                }
                else
                {
                    DocGlobalHelper::handleInfo("@DocentricAX3:NoTranslationRecordDeleted");
                }
            }

            // Refresh the labels datasource (to update the display method with number of translations)
            labelDs.research(true);
        }
        catch
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:ErrorDeletingTranslationsForLabelsAndLanguage", _languages.toString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLabelsToReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is helper method which is called from one of the forms having
    /// DocLabelTable as one of the datasources. Its (multi-selected) records
    /// are passed via args.
    /// This method will add each selected label to the specified report.
    /// </summary>
    /// <param name = "_reportId">Report to which the selected labels should be added</param>
    private void addLabelsToReport(DocReportId _reportId)
    {
        this.checkCaller();
        
        if (!(args.record() && (args.record() is DocLabelTable)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Iterate through the selected labels and add them to the provided report
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(labelDs);
        
        int labelsProcessed = 0;
        int addedReportLabels = 0;
        RecId newDocReportLabelRecId;
        DocReportLabelId lastProcessedLabelId;
        DocLabelTable labelTable = helper.getFirst();
        RecId reportRecId = DocReportTable::findReportId(_reportId).RecId;
        try
        {
            while (labelTable.RecId != 0)
            {
                lastProcessedLabelId = labelTable.LabelId;
                labelsProcessed++;
                
                try
                {
                    // Skip labels which are already linked to this report.
                    // This shouldn't happen when method is called from UI, 
                    // because in the multi-select drop-down we list only
                    // the labels which aren't already linked to the specified
                    // report.
                    if (DocReportLabel::findReportLabel(reportRecId, labelTable.GlobalLabelId))
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:LabelAlreadyAssignedToReport", lastProcessedLabelId, _reportId));
                    }
                    else
                    {
                        newDocReportLabelRecId = DocReportLabel::insertLabel(reportRecId, labelTable.GlobalLabelId, labelTable.LabelId);
                    
                        addedReportLabels += (newDocReportLabelRecId ? 1 : 0);
                    }
                }
                catch
                {                    
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:ErrorAddingLabelForReport", lastProcessedLabelId, _reportId));
                }
            
                labelTable = helper.getNext();
            }
            
            // Show info, refresh datasources
            if (labelsProcessed == 1)
            {
                // Single-select: show details about the number of added labels
                // to the selected report. 
                if (addedReportLabels > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessAddingLabelForReport", lastProcessedLabelId, _reportId));

                    translationDs.research();
                }
            }
            else
            {
                // Multi-select: show how many total report labels for how many selected labels
                // were added.
                if (addedReportLabels > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessAddingReportLabelsMultiSelect", addedReportLabels, labelsProcessed, _reportId));
                }
                else
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:NoReportLabelAddedMultiSelect", _reportId));
                }
            }
        }
        catch
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:ErrorAddingReportLabels", _reportId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTranslationsForMissingLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is helper method which is called from one of the forms having
    /// DocLabelLanguage as one of the datasources. Its (single-selected) record
    /// is passed via args.
    /// For the selected language this method will create the translation records
    /// for all the missing labels.
    /// </summary>
    private void addTranslationsForMissingLabels()
    {      
        this.checkCaller();

        if (!(args.record() && (args.record() is DocLabelLanguage)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }

        // Get the caller record (this action isn't multi-select, so we perform it only
        // on the caller record)
        DocLabelLanguage docLabelLanguage = args.record() as DocLabelLanguage;
        if (!docLabelLanguage || !translationDs)
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid caller form datasources');
        }
        
        // Now perform the action of adding the missing translations.  
        int newTranslations;
        RecId firstRecId;
        [newTranslations, firstRecId] = DocLabelTranslation::addForMissingLabels(docLabelLanguage.LanguageId, '');
                        
        // Show info, refresh datasources, try to position to the first newly added translation
        if (newTranslations > 0)
        {
            DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessAddingTranslationsForLanguage", newTranslations, docLabelLanguage.LanguageId));

            DocLabelTranslation firstNewRecord = DocLabelTranslation::find(firstRecId);
            translationDs.research();
            translationDs.positionToRecord(firstNewRecord);
        }
        else
        {
            DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:NoTranslationAddedForLanguage", docLabelLanguage.LanguageId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableFallbackTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is helper method which is called from one of the forms having
    /// DocLabelTable as one of the datasources. Its (multi-selected) records
    /// are passed via args. Also through args we get parameter which
    /// specifies the enable/disable action.
    /// This method will in bulk enable or disable using of fallback translation
    /// on the selected label records.
    /// </summary>
    private void enableDisableFallbackTranslation()
    {
        str parm = args.parm();
        if (!(parm == 'Enable' || parm == 'Disable'))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong menu item parameter');
        }
        
        if (parm == 'Enable' && !Box::confirm("@DocentricAX3:ConfirmEnableFallbackTranslation"))
        {
            return;
        }
        if (parm == 'Disable' && !Box::confirm("@DocentricAX3:ConfirmDisableFallbackTranslation"))
        {
            return;
        }               

        this.checkCaller();

        if (!(args.record() && (args.record() is DocLabelTable)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Iterate through the selected labels and enable or disable the Use fallback translation field
        // for each of them.
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(labelDs);
        
        int labelsProcessed = 0;
        DocLabelTable docGlobalLabelTable = helper.getFirst();
        try
        {
            ttsbegin;

            while (docGlobalLabelTable.RecId != 0)
            {
                labelsProcessed++;

                DocLabelTable labelLocal = DocLabelTable::find(docGlobalLabelTable.RecId, true);
                labelLocal.UseFallbackTranslation = (parm == 'Enable') ? NoYes::Yes : NoYes::No;
                labelLocal.update();
            
                docGlobalLabelTable = helper.getNext();
            }

            ttscommit;
            
            // Show info
            if (parm == 'Enable')
            {
                DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessEnablingFallbackTranslation", labelsProcessed));
            }
            else
            {
                DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessDisablingFallbackTranslation", labelsProcessed));
            }

            // Refresh the labels datasource 
            labelDs.research();
        }
        catch
        {
            if (parm == 'Enable')
            {
                DocGlobalHelper::handleError("@DocentricAX3:ErrorEnablingFallbackTranslation");
            }
            else
            {
                DocGlobalHelper::handleError("@DocentricAX3:ErrorDisablingFallbackTranslation");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTranslationDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the translation description.
    /// </summary>
    /// <param name = "_description">Translation desciption</param>
    private void setTranslationDescription(DocLabelDescription _description)
    {
        #Task

        this.checkCaller();

        if (!(args.record() && (args.record() is DocLabelTranslation)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Iterate through the selected translations and set their description to the provided value
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(translationDs);
        
        int translationsProcessed = 0;
        DocLabelTranslation translation = helper.getFirst();
        try
        {
            ttsbegin;

            while (translation.RecId != 0)
            {
                translationsProcessed++;

                DocLabelTranslation translationLocal = DocLabelTranslation::find(translation.RecId, true);
                translationLocal.Description = _description;
                translationLocal.update();
            
                translation = helper.getNext();
            }

            ttscommit;
            
            // Show info
            DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SuccessSettingDescription", 
                                (_description ? _description : 'empty'), translationsProcessed));

            // Refresh the translations datasource to show the newly set descriptions
            translationDs.research(true);

            // In some situations, refreshing the translations datasource isn't enough
            // (for example, Add for missing languages, then immediately Set translation - 
            // some of the translation records are hidden). This forces refreshing
            // or the form and we get correct result.
            callerForm.task(#taskRefresh);
        }
        catch
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:ErrorSettingDescription", _description));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUIActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// We are using the helper methods in this class from different forms, which are
    /// using same menu items, so we base the logic on the menu item used.
    /// </summary>
    public void handleUIActions()
    {
        switch (args.menuItemName())
        {
            case menuItemActionStr(DocLabelAddForMissingLanguages):
                // "Add for missing languages" menu item on:
                //      - Labels form, grid view (multi-selected labels),
                //      - Labels form, detail view, translations grid (single label),
                //      - Translations form (multi-selected labels)
                this.addTranslationsForMissingLanguages(null);
                break;
            
            case menuItemActionStr(DocLabelAddForMissingLabels):
                // "Add for missing labels" menu item on:
                //      - Translation by language form (single language)
                this.addTranslationsForMissingLabels();
                break;
            
            case menuItemActionStr(DocLabelEnableDisableFallbackTranslation):
                // "Fallback translation > Enable/Disable" menu item on:
                //      - Labels form, grid view (multi-selected labels)
                this.enableDisableFallbackTranslation();
                break;
            
            case menuItemDisplayStr(DocLabelAddTranslations):
                // "Add for language" menu item on:
                //      - Labels form, grid view (multi-selected labels)
                //      - Labels form, detail view, translations grid (single label),
                this.addTranslationsForMissingLanguages(languagesSet);
                break;
            
            case menuItemDisplayStr(DocLabelDeleteTranslations):
                // "Delete for language" menu item on:
                //      - Labels form, grid view (multi-selected labels)
                this.deleteTranslationsForLanguage(languagesSet);
                break;
            
            case menuItemDisplayStr(DocLabelAddToReport):
                // "Add to report" menu item on:
                //      - Labels form, grid view (multi-selected labels)
                //      - Labels form, detail view (single label)
                this.addLabelsToReport(reportId);
                break;
            
            case menuItemDisplayStr(DocLabelSetTranslationDescription):
                // "Set description" menu item on:
                //      - Labels form, detail view, translation grid (multi-selected translations)
                //      - Translation by language form, translation grid (multi-selected translations)
                //      - Translations form (multi-selected translations)
                this.setTranslationDescription(description);
                break;
            
            default:
                return;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// A main method of the DocUserDefinedLabelUIHelper class.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        DocUserDefinedLabelUIHelper uiHelper = new DocUserDefinedLabelUIHelper();
        uiHelper.parmArgs(_args);
        uiHelper.handleUIActions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>