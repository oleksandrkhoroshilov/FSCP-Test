<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportExecutionInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocReportExecutionInfo implements SysPackable
{
    DocPrintReportSettings                      printReportSettings, printReportSettingsOrig;
    DocPrintDestSettingsPrinter                 printerPrintDestSettings, printerPrintDestSettingsOrig;
    DocPrintDestSettingsEmail                   emailPrintDestSettings, emailPrintDestSettingsOrig;
    DocPrintDestSettingsFile                    filePrintDestSettings, filePrintDestSettingsOrig;
    DocPrintDestSettingsMemory                  memoryPrintDestSettings, memoryPrintDestSettingsOrig;
    DocPrintReportToFileExecutionInfo           printToFileExecutionInfo;
    DocPrintReportToEmailExecutionInfo          printToEmailExecutionInfo;
    DocPrintReportToPrinterExecutionInfo        printToPrinterExecutionInfo;
    DocPrintReportToScreenExecutionInfo         printToScreenExecutionInfo;
    DocPrintReportToMemoryExecutionInfo         printToMemoryExecutionInfo;
    DocPrintReportToArchiveExecutionInfo        printToArchiveExecutionInfo;
    RecId                                       batchId, batchJobId;
    int                                         totalExecutionTime, dspExecutionTime;
    boolean                                     isSuccess;
    str                                         errorMessage, errorCode;
    guid                                        executionId;

    // Not packed:
    int                                         infologLineBeforeReportStarts;


    #define.currentPackVersion(4)  // Added executionId (guid)
    #localmacro.currentList
        version,
        batchId,
        batchJobId,
        totalExecutionTime,
        dspExecutionTime,
        isSuccess,
        errorMessage,
        errorCode,
        executionId
    #endMacro

    #define.packVersion3(3)
    #localmacro.listVersion3
        version,
        batchId,
        batchJobId,
        totalExecutionTime,
        dspExecutionTime,
        isSuccess,
        errorMessage,
        errorCode
    #endMacro
    
    #define.packVersion2(2)
    #localmacro.listVersion2
        version,
        batchId,
        batchJobId,
        totalExecutionTime,
        dspExecutionTime,
        isSuccess,
        errorMessage
    #endMacro

    #define.packVersion1(1)
    #localmacro.listVersion1
        version,
        batchId,
        batchJobId,
        totalExecutionTime,
        dspExecutionTime
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int version = #currentPackVersion;
        container ret;
    
        ret = [#currentList] +
              [printReportSettings != null ? printReportSettings.packWithoutSrsReportContract() : conNull()] +
              [printReportSettingsOrig != null ? printReportSettingsOrig.packWithoutSrsReportContract() : conNull()] +
              [printerPrintDestSettings != null ? printerPrintDestSettings.pack() : conNull()] +
              [printerPrintDestSettingsOrig != null ? printerPrintDestSettingsOrig.pack() : conNull()] +
              [emailPrintDestSettings != null ? emailPrintDestSettings.pack() : conNull()] +
              [emailPrintDestSettingsOrig != null ? emailPrintDestSettingsOrig.pack() : conNull()] +
              [filePrintDestSettings != null ? filePrintDestSettings.pack() : conNull()] +
              [filePrintDestSettingsOrig != null ? filePrintDestSettingsOrig.pack() : conNull()] +
              [memoryPrintDestSettings != null ? memoryPrintDestSettings.pack() : conNull()] +
              [memoryPrintDestSettingsOrig != null ? memoryPrintDestSettingsOrig.pack() : conNull()] +
              [printToFileExecutionInfo != null ? printToFileExecutionInfo.pack() : conNull()] +
              [printToEmailExecutionInfo != null ? printToEmailExecutionInfo.pack() : conNull()] +
              [printToPrinterExecutionInfo != null ? printToPrinterExecutionInfo.pack() : conNull()] +
              [printToScreenExecutionInfo != null ? printToScreenExecutionInfo.pack() : conNull()] +
              [printToMemoryExecutionInfo != null ? printToMemoryExecutionInfo.pack() : conNull()] +
              [printToArchiveExecutionInfo != null ? printToArchiveExecutionInfo.pack() : conNull()];
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>executionId</c> parameter.
    /// </summary>
    /// <returns>
    /// The value of <c>executionId</c> parameter.
    /// </returns>
    /// <remarks>
    /// Execution Id is a unique identifier given to each execution of Docentric pipeline,
    /// i.e. generating and printing a single report to a Docentric print destination,
    /// no matter if the report is generated by SSRS or Docentric Generator.
    /// </remarks>
    public guid getExecutionId()
    {
        return executionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutionIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ExecutionId (guid) as string without braces.
    /// </summary>
    /// <returns>ExecutionId as string</returns>
    public str getExecutionIdStr()
    {
        return DocGlobalHelper::guid2strWithoutBraces(executionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecutionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>executionId</c> parameter.
    /// </summary>
    /// <param name = "_executionId">Sets the value of <c>executionId</c> parameter.</param>
    /// <remarks>
    /// Execution Id is a unique identifier given to each execution of Docentric pipeline,
    /// i.e. generating and printing a single report to a Docentric print destination,
    /// no matter if the report is generated by SSRS or Docentric Generator.
    /// </remarks>
    public void setExecutionId(guid _executionId = newGuid())
    {
        executionId = _executionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInfologLineBeforeReportStarts</Name>
				<Source><![CDATA[
    public int parmInfologLineBeforeReportStarts(int _infologLineBeforeReportStarts = infologLineBeforeReportStarts)
    {
        infologLineBeforeReportStarts = _infologLineBeforeReportStarts;
        return infologLineBeforeReportStarts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSuccess</Name>
				<Source><![CDATA[
    public boolean parmIsSuccess(boolean _isSuccess = isSuccess)
    {
        isSuccess = _isSuccess;
        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorMessage</Name>
				<Source><![CDATA[
    public str parmErrorMessage(str _errorMessage = errorMessage)
    {
        errorMessage = _errorMessage;
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorCode</Name>
				<Source><![CDATA[
    public str parmErrorCode(str _errorCode = errorCode)
    {
        errorCode = _errorCode;
        return errorCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchId</Name>
				<Source><![CDATA[
    public RecId parmBatchId(RecId _batchId = batchId)
    {
        batchId = _batchId;
        return batchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchJobId</Name>
				<Source><![CDATA[
    public RecId parmBatchJobId(RecId _batchJobId = batchJobId)
    {
        batchJobId = _batchJobId;
        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalExecutionTime</Name>
				<Source><![CDATA[
    public int parmTotalExecutionTime(int _totalExecutionTime = totalExecutionTime)
    {
        totalExecutionTime = _totalExecutionTime;
        return totalExecutionTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDspExecutionTime</Name>
				<Source><![CDATA[
    public int parmDspExecutionTime(int _dspExecutionTime = dspExecutionTime)
    {
        dspExecutionTime = _dspExecutionTime;
        return dspExecutionTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailPrintDestSettings</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsEmail parmEmailPrintDestSettings(DocPrintDestSettingsEmail _emailPrintDestSettings = emailPrintDestSettings)
    {
        emailPrintDestSettings = _emailPrintDestSettings;
    
        if (emailPrintDestSettings == null)
        {
            emailPrintDestSettings = new DocPrintDestSettingsEmail();
        }
    
        return emailPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailPrintDestSettingsOrig</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsEmail parmEmailPrintDestSettingsOrig(DocPrintDestSettingsEmail _emailPrintDestSettingsOrig = emailPrintDestSettingsOrig)
    {
        emailPrintDestSettingsOrig = _emailPrintDestSettingsOrig;

        if (emailPrintDestSettingsOrig == null)
        {
            emailPrintDestSettingsOrig = new DocPrintDestSettingsEmail();
        }

        return emailPrintDestSettingsOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilePrintDestSettings</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsFile parmFilePrintDestSettings(DocPrintDestSettingsFile _filePrintDestSettings = filePrintDestSettings)
    {
        filePrintDestSettings = _filePrintDestSettings;
    
        if (filePrintDestSettings == null)
        {
            filePrintDestSettings = new DocPrintDestSettingsFile();
        }
    
        return filePrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilePrintDestSettingsOrig</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsFile parmFilePrintDestSettingsOrig(DocPrintDestSettingsFile _filePrintDestSettingsOrig = filePrintDestSettingsOrig)
    {
        filePrintDestSettingsOrig = _filePrintDestSettingsOrig;

        if (filePrintDestSettingsOrig == null)
        {
            filePrintDestSettingsOrig = new DocPrintDestSettingsFile();
        }
    
        return filePrintDestSettingsOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterPrintDestSettings</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsPrinter parmPrinterPrintDestSettings(DocPrintDestSettingsPrinter _printerPrintDestSettings = printerPrintDestSettings)
    {
        printerPrintDestSettings = _printerPrintDestSettings;
    
        if (printerPrintDestSettings == null)
        {
            printerPrintDestSettings = new DocPrintDestSettingsPrinter();
        }
    
        return printerPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterPrintDestSettingsOrig</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsPrinter parmPrinterPrintDestSettingsOrig(DocPrintDestSettingsPrinter _printerPrintDestSettingsOrig = printerPrintDestSettingsOrig)
    {
        printerPrintDestSettingsOrig = _printerPrintDestSettingsOrig;

        if (printerPrintDestSettingsOrig == null)
        {
            printerPrintDestSettingsOrig = new DocPrintDestSettingsPrinter();
        }
    
        return printerPrintDestSettingsOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemoryPrintDestSettings</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsMemory parmMemoryPrintDestSettings(DocPrintDestSettingsMemory _memoryPrintDestSettings = memoryPrintDestSettings)
    {
        memoryPrintDestSettings = _memoryPrintDestSettings;
    
        if (memoryPrintDestSettings == null)
        {
            memoryPrintDestSettings = new DocPrintDestSettingsMemory();
        }
    
        return memoryPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemoryPrintDestSettingsOrig</Name>
				<Source><![CDATA[
    public DocPrintDestSettingsMemory parmMemoryPrintDestSettingsOrig(DocPrintDestSettingsMemory _memoryPrintDestSettingsOrig = memoryPrintDestSettingsOrig)
    {
        memoryPrintDestSettingsOrig = _memoryPrintDestSettingsOrig;

        if (memoryPrintDestSettingsOrig == null)
        {
            memoryPrintDestSettingsOrig = new DocPrintDestSettingsMemory();
        }
    
        return memoryPrintDestSettingsOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintReportSettings</Name>
				<Source><![CDATA[
    public DocPrintReportSettings parmPrintReportSettings(DocPrintReportSettings _printReportSettings = printReportSettings)
    {
        printReportSettings = _printReportSettings;
    
        if (printReportSettings == null)
        {
            printReportSettings = new DocPrintReportSettings();
        }
    
        return printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintReportSettingsOrig</Name>
				<Source><![CDATA[
    public DocPrintReportSettings parmPrintReportSettingsOrig(DocPrintReportSettings _printReportSettingsOrig = printReportSettingsOrig)
    {
        printReportSettingsOrig = _printReportSettingsOrig;

        if (printReportSettingsOrig == null)
        {
            printReportSettingsOrig = new DocPrintReportSettings();
        }

        return printReportSettingsOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>reportRunId</c> parameter.
    /// </summary>
    /// <returns>
    /// The value of <c>reportRunId</c> parameter.
    /// </returns>
    /// <remarks>
    /// Report Run Id is a unique identifier given to each report run instance, generated by <c>SrsReportRunController</c>.
    /// - When a Print management report is printed, Report Run Id contains the same guid for each executed print management setting.
    /// - When a multi-document report is printed such as Customer account statement, Report Run Id contains the same guid for
    /// all printed reports (one report is printed for each of the selected customers).
    /// </remarks>
    public guid getReportRunId()
    {
        return this.parmPrintReportSettings().getReportRunId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportRunIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>reportRunId</c> parameter.
    /// </summary>
    /// <returns>
    /// The value of <c>reportRunId</c> parameter as a string.
    /// </returns>
    /// <remarks>
    /// Report Run Id is a unique identifier given to each report run instance, generated by <c>SrsReportRunController</c>.
    /// - When a Print management report is printed, Report Run Id contains the same guid for each executed print management setting.
    /// - When a multi-document report is printed such as Customer account statement, Report Run Id contains the same guid for
    /// all printed reports (one report is printed for each of the selected customers).
    /// </remarks>
    public str getReportRunIdStr()
    {
        return this.parmPrintReportSettings().getReportRunIdStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportDocGenExecutionTime</Name>
				<Source><![CDATA[
    public int getReportDocGenExecutionTime()
    {
        return this.parmPrintReportSettings().parmDocGenExecutionTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSaveToArchiveSuccess</Name>
				<Source><![CDATA[
    public boolean getSaveToArchiveSuccess()
    {
        boolean saveToArchiveSuccess = false;

        switch (this.parmPrintReportSettings().parmPrintDestination())
        {
            case DocPrintDestination::Memory:
                saveToArchiveSuccess = this.parmPrintToMemoryExecutionInfo().parmSaveToArchiveSuccess();
                break;
            case DocPrintDestination::Screen:
                saveToArchiveSuccess = this.parmPrintToScreenExecutionInfo().parmSaveToArchiveSuccess();
                break;
            case DocPrintDestination::Archive:
                saveToArchiveSuccess = this.parmPrintToArchiveExecutionInfo().parmSaveToArchiveSuccess();
                break;
            case DocPrintDestination::Email:
                saveToArchiveSuccess = this.parmPrintToEmailExecutionInfo().parmSaveToArchiveSuccess();
                break;
            case DocPrintDestination::File:
                saveToArchiveSuccess = this.parmPrintToFileExecutionInfo().parmSaveToArchiveSuccess();
                break;
            case DocPrintDestination::Printer:
                saveToArchiveSuccess = this.parmPrintToPrinterExecutionInfo().parmSaveToArchiveSuccess();
                break;
            case DocPrintDestination::GenerateDataSource:
                saveToArchiveSuccess = false;
                break;
        }

        return saveToArchiveSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArchiveContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the report metadata.
    /// </summary>
    /// <returns>An instance of the DocArchiveContract class</returns>
    public DocArchiveContract getArchiveContract()
    {
        return this.parmPrintReportSettings().parmArchiveContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintedReport</Name>
				<Source><![CDATA[
    public DocPrintedReport getPrintedReport()
    {
        return this.parmPrintReportSettings().parmPrintedReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfPages</Name>
				<Source><![CDATA[
    public int getNumberOfPages()
    {
        return this.parmPrintReportSettings().getPrintedReportNumberOfPages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfReportSigned</Name>
				<Source><![CDATA[
    public boolean isPdfReportSigned()
    {
        // Returns true, if the report is configured to be printed as a signed PDF document
        // and it is printed in PDF output format, including saving to Print archive.
        // More precisely, when:
        // 1) Primary print destination is Screen, Print archive, Email or File with the selected PDF output format, or
        // 2) Primary print destination is Printer, Email or File with the output format different than PDF
        //    and the Save to Print archive option is turned on.
        return this.parmPrintReportSettings().applyPdfSignature() &&
              (this.parmPrintReportSettings().isPrintedReportProvidedAsPdf() || this.parmPrintReportSettings().parmSaveToArchive());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsReportMetadata</Name>
				<Source><![CDATA[
    public boolean existsReportMetadata()
    {
        DocArchiveContract reportMetadata = this.getArchiveContract();
        if (reportMetadata)
        {
            if (reportMetadata.toDocumentInfo())
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportMetadata</Name>
				<Source><![CDATA[
    public str getReportMetadata()
    {
        DocArchiveContract reportMetadata = this.getArchiveContract();
        if (reportMetadata)
        {
            str reportMetaDataStr = reportMetadata.toDocumentInfo();
            if (reportMetaDataStr)
            {
                return reportMetaDataStr;
            }
        }
        return "@DocentricAX3:ReportMetadataUnknownErrorMsg";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToFileExecutionInfo</Name>
				<Source><![CDATA[
    public DocPrintReportToFileExecutionInfo parmPrintToFileExecutionInfo(DocPrintReportToFileExecutionInfo _printToFileExecutionInfo = printToFileExecutionInfo)
    {
        printToFileExecutionInfo = _printToFileExecutionInfo;
    
        if (printToFileExecutionInfo == null)
        {
            printToFileExecutionInfo = new DocPrintReportToFileExecutionInfo();
        }

        if (!prmIsDefault(_printToFileExecutionInfo))
        {
            // The setter has been invoked -> Set the archive information.
            this.parmPrintToArchiveExecutionInfo().parmSaveToArchiveSuccess(printToFileExecutionInfo.parmSaveToArchiveSuccess());
            this.parmPrintToArchiveExecutionInfo().parmArchivePrintJobHeaderRecId(printToFileExecutionInfo.parmArchivePrintJobHeaderRecId());
        }
    
        return printToFileExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToEmailExecutionInfo</Name>
				<Source><![CDATA[
    public DocPrintReportToEmailExecutionInfo parmPrintToEmailExecutionInfo(DocPrintReportToEmailExecutionInfo _printToEmailExecutionInfo = printToEmailExecutionInfo)
    {
        printToEmailExecutionInfo = _printToEmailExecutionInfo;
    
        if (printToEmailExecutionInfo == null)
        {
            printToEmailExecutionInfo = new DocPrintReportToEmailExecutionInfo();
        }

        if (!prmIsDefault(_printToEmailExecutionInfo))
        {
            // The setter has been invoked -> Set the archive information.
            this.parmPrintToArchiveExecutionInfo().parmSaveToArchiveSuccess(printToEmailExecutionInfo.parmSaveToArchiveSuccess());
            this.parmPrintToArchiveExecutionInfo().parmArchivePrintJobHeaderRecId(printToEmailExecutionInfo.parmArchivePrintJobHeaderRecId());
        }
    
        return printToEmailExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToPrinterExecutionInfo</Name>
				<Source><![CDATA[
    public DocPrintReportToPrinterExecutionInfo parmPrintToPrinterExecutionInfo(DocPrintReportToPrinterExecutionInfo _printToPrinterExecutionInfo = printToPrinterExecutionInfo)
    {
        printToPrinterExecutionInfo = _printToPrinterExecutionInfo;
    
        if (printToPrinterExecutionInfo == null)
        {
            printToPrinterExecutionInfo = new DocPrintReportToPrinterExecutionInfo();
        }

        if (!prmIsDefault(_printToPrinterExecutionInfo))
        {
            // The setter has been invoked -> Set the archive information.
            this.parmPrintToArchiveExecutionInfo().parmSaveToArchiveSuccess(printToPrinterExecutionInfo.parmSaveToArchiveSuccess());
            this.parmPrintToArchiveExecutionInfo().parmArchivePrintJobHeaderRecId(printToPrinterExecutionInfo.parmArchivePrintJobHeaderRecId());
        }
    
        return printToPrinterExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToMemoryExecutionInfo</Name>
				<Source><![CDATA[
    public DocPrintReportToMemoryExecutionInfo parmPrintToMemoryExecutionInfo(DocPrintReportToMemoryExecutionInfo _printToMemoryExecutionInfo = printToMemoryExecutionInfo)
    {
        printToMemoryExecutionInfo = _printToMemoryExecutionInfo;
    
        if (printToMemoryExecutionInfo == null)
        {
            printToMemoryExecutionInfo = new DocPrintReportToMemoryExecutionInfo();
        }

        if (!prmIsDefault(_printToMemoryExecutionInfo))
        {
            // The setter has been invoked -> Set the archive information.
            this.parmPrintToArchiveExecutionInfo().parmSaveToArchiveSuccess(printToMemoryExecutionInfo.parmSaveToArchiveSuccess());
            this.parmPrintToArchiveExecutionInfo().parmArchivePrintJobHeaderRecId(printToMemoryExecutionInfo.parmArchivePrintJobHeaderRecId());
        }
    
        return printToMemoryExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToScreenExecutionInfo</Name>
				<Source><![CDATA[
    public DocPrintReportToScreenExecutionInfo parmPrintToScreenExecutionInfo(DocPrintReportToScreenExecutionInfo _printToScreenExecutionInfo = printToScreenExecutionInfo)
    {
        printToScreenExecutionInfo = _printToScreenExecutionInfo;
    
        if (printToScreenExecutionInfo == null)
        {
            printToScreenExecutionInfo = new DocPrintReportToScreenExecutionInfo();
        }

        if (!prmIsDefault(_printToScreenExecutionInfo))
        {
            // The setter has been invoked -> Set the archive information.
            this.parmPrintToArchiveExecutionInfo().parmSaveToArchiveSuccess(printToScreenExecutionInfo.parmSaveToArchiveSuccess());
            this.parmPrintToArchiveExecutionInfo().parmArchivePrintJobHeaderRecId(printToScreenExecutionInfo.parmArchivePrintJobHeaderRecId());
        }
    
        return printToScreenExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToArchiveExecutionInfo</Name>
				<Source><![CDATA[
    public DocPrintReportToArchiveExecutionInfo parmPrintToArchiveExecutionInfo(DocPrintReportToArchiveExecutionInfo _printToArchiveExecutionInfo = printToArchiveExecutionInfo)
    {
        printToArchiveExecutionInfo = _printToArchiveExecutionInfo;
    
        if (printToArchiveExecutionInfo == null)
        {
            printToArchiveExecutionInfo = new DocPrintReportToArchiveExecutionInfo();
        }
    
        return printToArchiveExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   printReportSettingsContainer, printReportSettingsContainerOrig;
        container   printerPrintDestSettingsContainer, printerPrintDestSettingsContainerOrig;
        container   emailPrintDestSettingsContainer, emailPrintDestSettingsContainerOrig;
        container   filePrintDestSettingsContainer, filePrintDestSettingsContainerOrig;
        container   memoryPrintDestSettingsContainer, memoryPrintDestSettingsContainerOrig;
        container   printToFileExecutionInfoContainer, printToEmailExecutionInfoContainer, printToPrinterExecutionInfoContainer;
        container   printToScreenExecutionInfoContainer, printToMemoryExecutionInfoContainer, printToArchiveExecutionInfoContainer;
        int         version;
        boolean     ret = false;
    
        if (typeOf(conPeek(packedClass, 1)) == Types::Integer)
        {
            version = conPeek(packedClass, 1);
    
            if (version == #currentPackVersion)
            {
                [#currentList,
                 printReportSettingsContainer, printReportSettingsContainerOrig,
                 printerPrintDestSettingsContainer, printerPrintDestSettingsContainerOrig,
                 emailPrintDestSettingsContainer, emailPrintDestSettingsContainerOrig,
                 filePrintDestSettingsContainer, filePrintDestSettingsContainerOrig,
                 memoryPrintDestSettingsContainer, memoryPrintDestSettingsContainerOrig,
                 printToFileExecutionInfoContainer, printToEmailExecutionInfoContainer, printToPrinterExecutionInfoContainer,
                 printToScreenExecutionInfoContainer, printToMemoryExecutionInfoContainer, printToArchiveExecutionInfoContainer] = packedClass;
            }
            else if (version == #packVersion3)
            {
                [#listVersion3,
                 printReportSettingsContainer, printReportSettingsContainerOrig,
                 printerPrintDestSettingsContainer, printerPrintDestSettingsContainerOrig,
                 emailPrintDestSettingsContainer, emailPrintDestSettingsContainerOrig,
                 filePrintDestSettingsContainer, filePrintDestSettingsContainerOrig,
                 memoryPrintDestSettingsContainer, memoryPrintDestSettingsContainerOrig,
                 printToFileExecutionInfoContainer, printToEmailExecutionInfoContainer, printToPrinterExecutionInfoContainer,
                 printToScreenExecutionInfoContainer, printToMemoryExecutionInfoContainer, printToArchiveExecutionInfoContainer] = packedClass;
            }
            else if (version == #packVersion2)
            {
                [#listVersion2,
                 printReportSettingsContainer, printReportSettingsContainerOrig,
                 printerPrintDestSettingsContainer, printerPrintDestSettingsContainerOrig,
                 emailPrintDestSettingsContainer, emailPrintDestSettingsContainerOrig,
                 filePrintDestSettingsContainer, filePrintDestSettingsContainerOrig,
                 memoryPrintDestSettingsContainer, memoryPrintDestSettingsContainerOrig,
                 printToFileExecutionInfoContainer, printToEmailExecutionInfoContainer, printToPrinterExecutionInfoContainer,
                 printToScreenExecutionInfoContainer, printToMemoryExecutionInfoContainer, printToArchiveExecutionInfoContainer] = packedClass;

                errorCode = '';
            }
            else if (version == #packVersion1)
            {
                [#listVersion1,
                 printReportSettingsContainer, printReportSettingsContainerOrig,
                 printerPrintDestSettingsContainer, printerPrintDestSettingsContainerOrig,
                 emailPrintDestSettingsContainer, emailPrintDestSettingsContainerOrig,
                 filePrintDestSettingsContainer, filePrintDestSettingsContainerOrig,
                 memoryPrintDestSettingsContainer, memoryPrintDestSettingsContainerOrig,
                 printToFileExecutionInfoContainer, printToEmailExecutionInfoContainer, printToPrinterExecutionInfoContainer,
                 printToScreenExecutionInfoContainer, printToMemoryExecutionInfoContainer, printToArchiveExecutionInfoContainer] = packedClass;
    
                isSuccess = true;
                errorMessage = '';
                errorCode = '';
            }

            ret = true;
            
            if (printReportSettingsContainer != conNull())
            {
                printReportSettings = new DocPrintReportSettings();
                ret = printReportSettings.unpack(printReportSettingsContainer) && ret;
            }
            else
            {
                printReportSettings = null;
            }
            
            if (printReportSettingsContainerOrig != conNull())
            {
                printReportSettingsOrig = new DocPrintReportSettings();
                ret = printReportSettingsOrig.unpack(printReportSettingsContainerOrig) && ret;
            }
            else
            {
                printReportSettingsOrig = null;
            }
            
            if (printerPrintDestSettingsContainer != conNull())
            {
                printerPrintDestSettings = new DocPrintDestSettingsPrinter();
                ret = printerPrintDestSettings.unpack(printerPrintDestSettingsContainer) && ret;
            }
            else
            {
                printerPrintDestSettings = null;
            }
            
            if (printerPrintDestSettingsContainerOrig != conNull())
            {
                printerPrintDestSettingsOrig = new DocPrintDestSettingsPrinter();
                ret = printerPrintDestSettingsOrig.unpack(printerPrintDestSettingsContainerOrig) && ret;
            }
            else
            {
                printerPrintDestSettingsOrig = null;
            }

            if (emailPrintDestSettingsContainer != conNull())
            {
                emailPrintDestSettings = new DocPrintDestSettingsEmail();
                ret = emailPrintDestSettings.unpack(emailPrintDestSettingsContainer) && ret;
            }
            else
            {
                emailPrintDestSettings = null;
            }

            if (emailPrintDestSettingsContainerOrig != conNull())
            {
                emailPrintDestSettingsOrig = new DocPrintDestSettingsEmail();
                ret = emailPrintDestSettingsOrig.unpack(emailPrintDestSettingsContainerOrig) && ret;
            }
            else
            {
                emailPrintDestSettingsOrig = null;
            }

            if (filePrintDestSettingsContainer != conNull())
            {
                filePrintDestSettings = new DocPrintDestSettingsFile();
                ret = filePrintDestSettings.unpack(filePrintDestSettingsContainer) && ret;
            }
            else
            {
                filePrintDestSettings = null;
            }

            if (filePrintDestSettingsContainerOrig)
            {
                filePrintDestSettingsOrig = new DocPrintDestSettingsFile();
                ret = filePrintDestSettingsOrig.unpack(filePrintDestSettingsContainerOrig) && ret;
            }
            else
            {
                filePrintDestSettingsOrig = null;
            }

            if (memoryPrintDestSettingsContainer != conNull())
            {
                memoryPrintDestSettings = new DocPrintDestSettingsMemory();
                ret = memoryPrintDestSettings.unpack(memoryPrintDestSettingsContainer) && ret;
            }
            else
            {
                memoryPrintDestSettings = null;
            }

            if (memoryPrintDestSettingsContainerOrig != conNull())
            {
                memoryPrintDestSettingsOrig = new DocPrintDestSettingsMemory();
                ret = memoryPrintDestSettingsOrig.unpack(memoryPrintDestSettingsContainerOrig) && ret;
            }
            else
            {
                memoryPrintDestSettingsOrig = null;
            }

            if (printToFileExecutionInfoContainer != conNull())
            {
                printToFileExecutionInfo = new DocPrintReportToFileExecutionInfo();
                ret = printToFileExecutionInfo.unpack(printToFileExecutionInfoContainer) && ret;
            }
            else
            {
                printToFileExecutionInfo = null;
            }

            if (printToEmailExecutionInfoContainer != conNull())
            {
                printToEmailExecutionInfo = new DocPrintReportToEmailExecutionInfo();
                ret = printToEmailExecutionInfo.unpack(printToEmailExecutionInfoContainer) && ret;
            }
            else
            {
                printToEmailExecutionInfo = null;
            }

            if (printToPrinterExecutionInfoContainer != conNull())
            {
                printToPrinterExecutionInfo = new DocPrintReportToPrinterExecutionInfo();
                ret = printToPrinterExecutionInfo.unpack(printToPrinterExecutionInfoContainer) && ret;
            }
            else
            {
                printToPrinterExecutionInfo = null;
            }

            if (printToScreenExecutionInfoContainer != conNull())
            {
                printToScreenExecutionInfo = new DocPrintReportToScreenExecutionInfo();
                ret = printToScreenExecutionInfo.unpack(printToScreenExecutionInfoContainer) && ret;
            }
            else
            {
                printToScreenExecutionInfo = null;
            }

            if (printToMemoryExecutionInfoContainer != conNull())
            {
                printToMemoryExecutionInfo = new DocPrintReportToMemoryExecutionInfo();
                ret = printToMemoryExecutionInfo.unpack(printToMemoryExecutionInfoContainer) && ret;
            }
            else
            {
                printToMemoryExecutionInfo = null;
            }

            if (printToArchiveExecutionInfoContainer != conNull())
            {
                printToArchiveExecutionInfo = new DocPrintReportToArchiveExecutionInfo();
                ret = printToArchiveExecutionInfo.unpack(printToArchiveExecutionInfoContainer) && ret;
            }
            else
            {
                printToArchiveExecutionInfo = null;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOnReportExecutionBegin</Name>
				<Source><![CDATA[
    public static DocReportExecutionInfo constructOnReportExecutionBegin(
                                                   DocPrintReportSettings _printReportSettings,
                                                   DocPrintDestSettingsFile _filePrintDestSettings,
                                                   DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                   DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                   DocPrintDestSettingsMemory _memoryPrintDestSettings,
                                                   RecId _batchId, RecId _batchJobId)
    {
        DocReportExecutionInfo reportSettingsExecutionInfo = new DocReportExecutionInfo();
    
        reportSettingsExecutionInfo.parmFilePrintDestSettings(_filePrintDestSettings);
        if (_filePrintDestSettings != null)
        {
            reportSettingsExecutionInfo.parmFilePrintDestSettingsOrig().unpack(_filePrintDestSettings.pack());
        }

        reportSettingsExecutionInfo.parmEmailPrintDestSettings(_emailPrintDestSettings);
        if (_emailPrintDestSettings != null)
        {
            reportSettingsExecutionInfo.parmEmailPrintDestSettingsOrig().unpack(_emailPrintDestSettings.pack());
        }

        reportSettingsExecutionInfo.parmPrinterPrintDestSettings(_printerPrintDestSettings);
        if (_printerPrintDestSettings != null)
        {
            reportSettingsExecutionInfo.parmPrinterPrintDestSettingsOrig().unpack(_printerPrintDestSettings.pack());
        }

        reportSettingsExecutionInfo.parmMemoryPrintDestSettings(_memoryPrintDestSettings);
        if (_memoryPrintDestSettings != null)
        {
            reportSettingsExecutionInfo.parmMemoryPrintDestSettingsOrig().unpack(_memoryPrintDestSettings.pack());
        }

        reportSettingsExecutionInfo.parmPrintReportSettings(_printReportSettings);
        DocPrintReportSettings printReportSettingsWithSameArchiveAndSrsContract = 
            DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(_printReportSettings);
        reportSettingsExecutionInfo.parmPrintReportSettingsOrig(printReportSettingsWithSameArchiveAndSrsContract);

        reportSettingsExecutionInfo.parmBatchId(_batchId);
        reportSettingsExecutionInfo.parmBatchJobId(_batchJobId);

        // Sets the current Execution ID.
        reportSettingsExecutionInfo.setExecutionId(_printReportSettings.parmCurrentExecutionId());
        
        return reportSettingsExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintingResult</Name>
				<Source><![CDATA[
    public DocPrintingResult getPrintingResult()
    {
        DocPrintingResult printingResult;

        if (!this.parmIsSuccess())
        {
            printingResult = DocPrintingResult::ExecutionFailed;
        }
        else // if (this.parmIsSuccess() == true)
        {
            // Execution can be canceled by some subscriber, or an end-user can cancel it during "Preview before print" mode. 
            // If the ReportDelireved flag is set to Yes, then we are sure that the execution was successful meaning
            // that the report was generated and delivered to the target print destination.
            boolean reportDelivered = false;
            switch (this.parmPrintReportSettings().parmPrintDestination())
            {
                case DocPrintDestination::Memory:
                    reportDelivered = this.parmPrintToMemoryExecutionInfo().parmReportDelivered();
                    break;
                case DocPrintDestination::Screen:
                    reportDelivered = this.parmPrintToScreenExecutionInfo().parmReportDelivered();
                    break;
                case DocPrintDestination::Archive:
                    reportDelivered = this.parmPrintToArchiveExecutionInfo().parmReportDelivered();
                    break;
                case DocPrintDestination::Email:
                    reportDelivered = this.parmPrintToEmailExecutionInfo().parmReportDelivered();
                    break;
                case DocPrintDestination::File:
                    reportDelivered = this.parmPrintToFileExecutionInfo().parmReportDelivered();
                    break;
                case DocPrintDestination::Printer:
                    reportDelivered = this.parmPrintToPrinterExecutionInfo().parmReportDelivered();
                    break;
                case DocPrintDestination::GenerateDataSource:
                    reportDelivered = true;
                    break;
            }

            if (reportDelivered)
            {
                printingResult = DocPrintingResult::DocumentPrintedAndDelivered;
            }
            else
            {
                printingResult = DocPrintingResult::ExecutionCanceled;
            }
        }

        return printingResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreviewBeforePrint</Name>
				<Source><![CDATA[
    public boolean isPreviewBeforePrint()
    {
        return this.parmPrintReportSettings().parmPreviewBeforePrint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreviewBeforePrintPrintingCanceled</Name>
				<Source><![CDATA[
    public boolean isPreviewBeforePrintPrintingCanceled()
    {
        boolean previewBeforePrintPrintingCanceled = false;

        switch (this.parmPrintReportSettings().parmPrintDestination())
        {
            case DocPrintDestination::Memory:
                previewBeforePrintPrintingCanceled = false;
                break;
            case DocPrintDestination::Screen:
                previewBeforePrintPrintingCanceled = false;
                break;
            case DocPrintDestination::Archive:
                previewBeforePrintPrintingCanceled = this.parmPrintToArchiveExecutionInfo().parmPreviewBeforePrintPrintingCanceled();
                break;
            case DocPrintDestination::Email:
                previewBeforePrintPrintingCanceled = this.parmPrintToEmailExecutionInfo().parmPreviewBeforePrintPrintingCanceled();
                break;
            case DocPrintDestination::File:
                previewBeforePrintPrintingCanceled = this.parmPrintToFileExecutionInfo().parmPreviewBeforePrintPrintingCanceled();
                break;
            case DocPrintDestination::Printer:
                previewBeforePrintPrintingCanceled = this.parmPrintToPrinterExecutionInfo().parmPreviewBeforePrintPrintingCanceled();
                break;
            case DocPrintDestination::GenerateDataSource:
                previewBeforePrintPrintingCanceled = false;
                break;
        }

        return previewBeforePrintPrintingCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disposePrintReportSettingsReferencedObjects</Name>
				<Source><![CDATA[
    public void disposePrintReportSettingsReferencedObjects()
    {
        this.parmPrintReportSettings().parmSrsReportContract(null);
        this.parmPrintReportSettingsOrig().parmSrsReportContract(null);

        this.parmPrintReportSettings().parmDataSourceObject(null);
        this.parmPrintReportSettingsOrig().parmDataSourceObject(null);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>