<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSrsEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Framework.Reporting.Shared;
using Docentric.AX.Documents.Pdf.Properties;

public class DocSrsEngine
{
    SrsReportRunRdlParser               rdlParser;
    SrsReportRunPrinter                 srsReportRunPrinter;
    DocPrintReportSettings              printReportSettings;
    DocPrintDestSettingsPrinter         printerPrintDestSettings;
    DocPrintDestSettingsEmail           emailPrintDestSettings;
    DocPrintDestSettingsFile            filePrintDestSettings;
    DocPrintDestSettingsMemory          memoryPrintDestSettings;
    DocPrintedReport                    printedSrsReport;
    boolean                             printForArchive;

    Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[]  srsReportParameterValueArray;

    #SRSFramework


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printSrsReport_ByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print the report to byte array.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_srsOutputFileFormat">SSRS output file format</param>
    /// <returns>SSRS report generated as a byte array</returns>
    public static System.Byte[] printSrsReport_ByteArray(DocPrintReportSettings _printReportSettings, SRSReportFileFormat _srsOutputFileFormat)
    {
        DocPrintedReport printedSrsReport;

        try
        {
            DocPrintReportSettings printReportSettingsNew = DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(_printReportSettings);
            printReportSettingsNew.parmPrintDestination(DocPrintDestination::Memory);
            printReportSettingsNew.setProperty_PrintSrsOriginalDesign(true);  // not necessary to be set.
            printReportSettingsNew.parmSaveToArchive(false);                  // not necessary to be set.

            DocPrintDestSettingsMemory memoryPrintDestSettings = new DocPrintDestSettingsMemory();
            memoryPrintDestSettings.parmOutputFileFormatSrs(_srsOutputFileFormat);
            memoryPrintDestSettings.parmUseSsrsBuiltInDesign(true);           // not necessary to be set.

            printedSrsReport = DocSrsEngine::printSrsReport_Memory(printReportSettingsNew, memoryPrintDestSettings);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", Exception::Error, DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        
        return printedSrsReport.getReportContentByteArray();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report as PDF.
    /// This method is used to print SSRS reports to Screen or Archive.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printForArchive">Print the report to archive</param>
    /// <returns>Printed SSRS report object</returns>
    public static DocPrintedReport printSrsReport(DocPrintReportSettings _printReportSettings, boolean _printForArchive = false)
    {
        DocPrintedReport printedSrsReport;

        try
        {
            if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Screen &&
                !_printForArchive && _printReportSettings.parmPrintDestination() != DocPrintDestination::Archive)
            {
                DocGlobalHelper::handleException(funcName(), 'The method can be used only to preview or archive SSRS reports');
            }

            DocSrsEngine docSrsEngine = new DocSrsEngine(_printReportSettings, _printForArchive);
            docSrsEngine.printSrsOriginalReport();
            printedSrsReport = docSrsEngine.getPrintedSrsReport();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", Exception::Error, DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        
        return printedSrsReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsReport_File</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report to the file print destination.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <returns>Printed SSRS report object</returns>
    public static DocPrintedReport printSrsReport_File(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings)
    {
        DocPrintedReport printedSrsReport;

        try
        {
            DocSrsEngine docSrsEngine = new DocSrsEngine(_printReportSettings);
            DocSrsEngine.set_filePrintDestSettings(_filePrintDestSettings);
            
            docSrsEngine.printSrsOriginalReport();

            printedSrsReport = docSrsEngine.getPrintedSrsReport();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", Exception::Error, DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        
        return printedSrsReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsReport_Memory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print the report to the memory print destination.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_memoryPrintDestSettings">Memory print destination settings</param>
    /// <returns>Printed SSRS report object</returns>
    public static DocPrintedReport printSrsReport_Memory(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsMemory _memoryPrintDestSettings)
    {
        DocPrintedReport printedSrsReport;

        try
        {
            DocSrsEngine docSrsEngine = new DocSrsEngine(_printReportSettings);
            DocSrsEngine.set_memoryPrintDestSettings(_memoryPrintDestSettings);
            
            docSrsEngine.printSrsOriginalReport();

            printedSrsReport = docSrsEngine.getPrintedSrsReport();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", Exception::Error, DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        
        return printedSrsReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsReport_Email</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report to the email print destination.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <returns>Printed SSRS report object</returns>
    public static DocPrintedReport printSrsReport_Email(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsEmail _emailPrintDestSettings)
    {
        DocPrintedReport printedSrsReport;

        try
        {
            DocSrsEngine docSrsEngine = new DocSrsEngine(_printReportSettings);
            DocSrsEngine.set_emailPrintDestSettings(_emailPrintDestSettings);
            
            docSrsEngine.printSrsOriginalReport();

            printedSrsReport = docSrsEngine.getPrintedSrsReport();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", Exception::Error, DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateSsrsDoc", DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        
        return printedSrsReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsReport_Printer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report to the printer print destination.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <returns>Printed SSRS report object</returns>
    public static DocPrintedReport printSrsReport_Printer(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        DocPrintedReport printedSrsReport;

        try
        {
            DocSrsEngine docSrsEngine = new DocSrsEngine(_printReportSettings);
            docSrsEngine.set_printerPrintDestSettings(_printerPrintDestSettings);
            
            docSrsEngine.printSrsOriginalReport();

            printedSrsReport = docSrsEngine.getPrintedSrsReport();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGenerateSSRSReportAsImageList", Exception::Error, DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToGenerateSSRSReportAsImageList", DocConstantDiagnostics::ErrSrsDocumentGeneration);
        }
        
        return printedSrsReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsReport_PrinterOnPrem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report to the printer on premise print destination.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    public static void printSrsReport_PrinterOnPrem(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        try
        {
            DocSrsEngine docSrsEngine = new DocSrsEngine(_printReportSettings);
            docSrsEngine.set_printerPrintDestSettings(_printerPrintDestSettings);
            docSrsEngine.printSrsOriginalReport();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 
                strFmt("@DocentricAX:FailedToGenerateSSRSReportAndPrintOnPrem", _printerPrintDestSettings.parmSelectedPrinterName()), 
                Exception::Error, DocConstantDiagnostics::ErrSrsDocGenAndPrintOnPrem);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 
                strFmt("@DocentricAX:FailedToGenerateSSRSReportAndPrintOnPrem", _printerPrintDestSettings.parmSelectedPrinterName()), 
                DocConstantDiagnostics::ErrSrsDocGenAndPrintOnPrem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the DocSrsEngine object.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printForArchive">Print the report to archive</param>
    public void new (DocPrintReportSettings _printReportSettings, boolean _printForArchive = false)
    {
        if (_printReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
        }

        if (_printReportSettings.parmSrsReportContract() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract() is not set');
        }

        printReportSettings = _printReportSettings;
        printForArchive = _printForArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsOriginalReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the SSRS original report.
    /// </summary>
    public void printSrsOriginalReport()
    {
        void validateParameters()
        {
            if (printForArchive)
            {
                return;
            }

            // Validate if the needed properties are set.    
            switch (printReportSettings.parmPrintDestination())
            {
                case DocPrintDestination::Email:
                    if (emailPrintDestSettings == null)
                    {
                        DocGlobalHelper::handleException(funcName(), 'Property emailPrintDestSettings is not set');
                    }
                    break;
                case DocPrintDestination::File:
                    if (filePrintDestSettings == null)
                    {
                        DocGlobalHelper::handleException(funcName(), 'Property filePrintDestSettings is not set');
                    }
                    break;
                case DocPrintDestination::Printer:
                    if (printerPrintDestSettings == null)
                    {
                        DocGlobalHelper::handleException(funcName(), 'Property printerPrintDestSettings is not set');
                    }
                    break;
                case DocPrintDestination::Memory:
                    if (memoryPrintDestSettings == null)
                    {
                        DocGlobalHelper::handleException(funcName(), 'Property memoryPrintDestSettings is not set');
                    }
                    break;
            }
        }


        // Validate parameters.
        validateParameters();


        /*----- Generate SSRS report -----*/
        // Get the SSRS report parameters.
        this.setSrsReportParameterValueArray();
        
        // Instance the SrsReportRunPrinter object.
        srsReportRunPrinter = new SrsReportRunPrinter(this.getSrsReportDataContract(), srsReportParameterValueArray);

        // Get SSRS output file format.
        SRSReportFileFormat srsOutputFileFormat = this.getOutputFileFormat();

        // Render report as an image collection or as a byte collection.
        if (printReportSettings.parmPrintDestination() == DocPrintDestination::Printer && 
            printForArchive == false)
        {
            // We are rendering the SSRS report for document routing or for an on-premises printer.
            if (DocConstantGlobal::isOnPremEnvironment())
            {
                this.renderReportToPrinterOnPremise();
            }
            else
            {
                // Generate SSRS report document as an image list.
                System.Collections.IList srsReportContentImageList = this.renderReportAsImageCollection();

                // Set the report content.
                printedSrsReport = DocPrintedReport::createImageList(srsReportContentImageList);
                printedSrsReport.parmSrsOutputFileFormat(srsOutputFileFormat);
                printedSrsReport.parmIsDocentricReport(false);
            }
        }
        else
        {
            // Generate SSRS report document as a byte array.
            System.Byte[] srsReportContent = this.renderReportAsByteArray(srsOutputFileFormat);

            // Set document properties for generated PDF document
            if (srsOutputFileFormat == SRSReportFileFormat::PDF
                     && (printReportSettings.parmDocumentAuthor()
                     || printReportSettings.parmDocumentTitle()
                     || printReportSettings.parmDocumentSubject()
                     || printReportSettings.parmDocumentKeywords()))
            {
                srsReportContent = this.setPdfDocumentProperties(srsReportContent);
            }

            // Set the report content.
            printedSrsReport = DocPrintedReport::createByteArray(srsReportContent);
            printedSrsReport.parmSrsOutputFileFormat(srsOutputFileFormat);
            printedSrsReport.parmIsDocentricReport(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintedSrsReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the printed SSRS report object.
    /// </summary>
    /// <returns>Printed SSRS report object</returns>
    public DocPrintedReport getPrintedSrsReport()
    {
        return printedSrsReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set_printerPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the printer print destination settings.
    /// </summary>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    public void set_printerPrintDestSettings(DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        printerPrintDestSettings = _printerPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set_emailPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the email print destination settings.
    /// </summary>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    public void set_emailPrintDestSettings(DocPrintDestSettingsEmail _emailPrintDestSettings)
    {
        emailPrintDestSettings = _emailPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set_memoryPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the memory print destination settings.
    /// </summary>
    /// <param name = "_memoryPrintDestSettings">Memory print destination settings</param>
    public void set_memoryPrintDestSettings(DocPrintDestSettingsMemory _memoryPrintDestSettings)
    {
        memoryPrintDestSettings = _memoryPrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set_filePrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the file print destination settings.
    /// </summary>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    public void set_filePrintDestSettings(DocPrintDestSettingsFile _filePrintDestSettings)
    {
        filePrintDestSettings = _filePrintDestSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report data contract object.
    /// </summary>
    /// <returns>Report data contract object</returns>
    private SrsReportDataContract getSrsReportDataContract()
    {
        return printReportSettings.parmSrsReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print destination settings object.
    /// </summary>
    /// <returns>Print destination settings object</returns>
    private SRSPrintDestinationSettings getSrsPrintDestinationSettings()
    {
        return this.getSrsReportDataContract().parmPrintSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsProxy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proxy object.
    /// </summary>
    /// <returns>Proxy object</returns>
    private SRSProxy getSrsProxy()
    {
        SRSProxy proxy = srsReportRunPrinter.parmSrsProxy();
        if (this.getSrsReportDataContract().parmReportExecutionInfo() == null)
        {
            // If the ReporExecutionObject doesn't exist yet, create one.
            this.getSrsReportDataContract().parmReportExecutionInfo(proxy.parmReportExecutionInfo());
        }
        else
        {
            proxy.parmReportExecutionInfo(this.getSrsReportDataContract().parmReportExecutionInfo());
        }
        return proxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderReportAsByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renders the report as byte array.
    /// </summary>
    /// <param name = "_fileFormat">File format</param>
    /// <returns>Rendered report as byte array</returns>
    private System.Byte[] renderReportAsByteArray(SRSReportFileFormat _fileFormat)
    {
        System.Byte[] reportBytes;
        str errorMsg = strFmt('Error while printing report (%1) using SQL Server Reporting Services', this.getSrsReportDataContract().parmReportName());
        setPrefix(DocConstant::Docentric);

        try
        {
            SRSProxy proxy = this.getSrsProxy();
            reportBytes = proxy.renderReportToByteArray(this.getSrsReportDataContract().parmReportPath(),
                                                        srsReportParameterValueArray,
                                                        _fileFormat,
                                                        this.deviceInfoForByteArray());
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch
        {
            throw error(errorMsg);
        }

        return reportBytes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderReportAsImageCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renders the report as image collection.
    /// </summary>
    /// <returns>Rendered report as imgae collection</returns>
    private System.Collections.IList renderReportAsImageCollection()
    {
        System.Collections.IList    pages;
        str                         executionId;

        str errorMsg = strFmt('Error while printing report (%1) using SQL Server Reporting Services', this.getSrsReportDataContract().parmReportName());

        try
        {
            // Instance SSRS proxy.
            SRSProxy proxy = this.getSrsProxy();

            // Get the reporting services proxy object which will initiate the rendering.
            Proxy reportingServicesProxy = proxy.getReportingServicesProxy();
            ReportExecutionInfo reportingServicesExecutionInfo = reportingServicesProxy.get_ReportExecutionInfo();
            if (reportingServicesExecutionInfo != null)
            {
                executionId = reportingServicesExecutionInfo.get_ExecutionId();
            }

            //Render Report as a collection of images.
            pages = reportingServicesProxy.RenderReport(
                    this.getSrsReportDataContract().parmReportPath(), srsReportParameterValueArray, ReportFileFormat::Image,
                    this.deviceInfoForPrinter(), executionId);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errorMsg);
        }

        return pages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderReportToPrinterOnPremise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renders the report to the printer on premise.
    /// </summary>
    private void renderReportToPrinterOnPremise()
    {
        str errorMsg = strFmt('Error while printing report (%1) using SQL Server Reporting Services', this.getSrsReportDataContract().parmReportName());
        setPrefix(DocConstant::Docentric);

        try
        {
            // Instance SSRS proxy.
            SRSProxy proxy = this.getSrsProxy();

            //Render Report as a collection of images.
            SRSPrintDestinationSettings srsPds = this.constructSrsPrintDestSettingsForPrintingOnPrem();
            boolean success = proxy.renderReportToPrinter(
                                            this.getSrsReportDataContract().parmReportPath(),
                                            srsReportParameterValueArray,
                                            srsPds.printerWhere(),
                                            srsPds.overridePrintContractSettings(), // always false
                                            srsPds.deviceInfo(),
                                            srsPds.numberOfCopies(),
                                            srsPds.overridePageSettings(), // always false
                                            srsPds.printerPageSettings());

            if (!success)
            {
                throw Exception::Error;
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch
        {
            throw error(errorMsg);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSrsPrintDestSettingsForPrintingOnPrem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the print destinationsettings object for printing on premise.
    /// </summary>
    /// <returns>Print destination settings object</returns>
    private SRSPrintDestinationSettings constructSrsPrintDestSettingsForPrintingOnPrem()
    {
        SRSPrintDestinationSettings srsPds = new SRSPrintDestinationSettings();
        srsPds.printMediumType(SRSPrintMediumType::Printer);
        
        srsPds.printerName(printerPrintDestSettings.parmSelectedPrinterName());
        srsPds.printerWhere(printerPrintDestSettings.getPrinterPath());

        srsPds.collate(printerPrintDestSettings.parmCollated());
        
        srsPds.numberOfCopies(printerPrintDestSettings.parmNumberOfCopies());
        if (srsPds.numberOfCopies() <= 0)
        {
            srsPds.numberOfCopies(1);
        }

        srsPds.printAllPages(printerPrintDestSettings.parmPrintAllPages());
        if (srsPds.printAllPages())
        {
            srsPds.fromPage(0);
            srsPds.toPage(0);
        }
        else
        {
            srsPds.fromPage(printerPrintDestSettings.parmPrintFromPage());
            srsPds.toPage(printerPrintDestSettings.parmPrintToPage());
        }

        switch (printerPrintDestSettings.parmOrientation())
        {
            case DocReportPrintOrientation::Default:
                srsPds.orientation(SRSReportPrintOrientation::Default);
                break;
            case DocReportPrintOrientation::Landscape:
                srsPds.orientation(SRSReportPrintOrientation::Landscape);
                break;
            case DocReportPrintOrientation::Portrait:
                srsPds.orientation(SRSReportPrintOrientation::Portrait);
                break;
        }

        switch (printerPrintDestSettings.parmDuplexPrinting())
        {
            case DocReportDuplexPrintingSetting::None:
                srsPds.printOnBothSides(SRSReportDuplexPrintingSetting::None);
                break;
            case DocReportDuplexPrintingSetting::FlipOnShortEdge:
                srsPds.printOnBothSides(SRSReportDuplexPrintingSetting::FlipOnShortEdge);
                break;
            case DocReportDuplexPrintingSetting::FlipOnLongEdge:
                srsPds.printOnBothSides(SRSReportDuplexPrintingSetting::FlipOnLongEdge);
                break;
        }

        return srsPds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deviceInfoForPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a device info for printer.
    /// </summary>
    /// <returns>Device info for printer</returns>
    private str deviceInfoForPrinter()
    {
        SRSReportFileFormat currentFileFormat;
        SRSImageFileFormat  imageFormat;

        str value = '<DeviceInfo>';

        currentFileFormat = SRSReportFileFormat::Image;
        imageFormat = SRSImageFileFormat::EMF;

        switch (currentFileFormat)
        {
            case SRSReportFileFormat::Image:
                value += '<OutputFormat>';
                switch (imageFormat)
                {
                    case SRSImageFileFormat::BMP:
                        value += 'BMP';
                        break;
                    case SRSImageFileFormat::EMF:
                        value += 'EMF';
                        break;
                    case SRSImageFileFormat::GIF:
                        value += 'GIF';
                        break;
                    case SRSImageFileFormat::JPEG:
                        value += 'JPEG';
                        break;
                    case SRSImageFileFormat::PNG:
                        value += 'PNG';
                        break;
                    case SRSImageFileFormat::TIFF:
                        value += 'TIFF';
                        break;
                }
                value += '</OutputFormat>';
                value = this.buildPageRange(value);
                break;
        }

        value += '</DeviceInfo>';

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deviceInfoForByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a device info for byte array.
    /// </summary>
    /// <returns>Device info for byte array</returns>
    private str deviceInfoForByteArray()
    {
        return '<DeviceInfo></DeviceInfo>';
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPageRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a page range info to provided device info. 
    /// </summary>
    /// <param name = "deviceInfo">Device info</param>
    /// <returns>Updated device info with page range info</returns>
    private str buildPageRange(str deviceInfo)
    {
        if (!printerPrintDestSettings.parmPrintAllPages())
        {
            deviceInfo += '<StartPage>' + int2str(printerPrintDestSettings.parmPrintFromPage()) + '</StartPage>';
            deviceInfo += '<EndPage>' + int2str(printerPrintDestSettings.parmPrintToPage()) + '</EndPage>';
        }

        return deviceInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the output file format.
    /// </summary>
    /// <returns>Output file format</returns>
    private SRSReportFileFormat getOutputFileFormat()
    {
        SRSReportFileFormat srsOutputFileFormat;

        if (printForArchive)
        {
            srsOutputFileFormat = this.convertDocentricToSrsOutputFileFormat(DocConstant::DocentricArchiveFileFormat);
            return srsOutputFileFormat;
        }

        switch (printReportSettings.parmPrintDestination())
        {
            case DocPrintDestination::Archive:
                srsOutputFileFormat = this.convertDocentricToSrsOutputFileFormat(DocConstant::DocentricArchiveFileFormat);
                break;

            case DocPrintDestination::Email:
                srsOutputFileFormat = emailPrintDestSettings.parmEmailAttachmentFileFormatSrs();
                break;

            case DocPrintDestination::File:
                srsOutputFileFormat = filePrintDestSettings.parmOutputFileFormatSrs();
                break;

            case DocPrintDestination::Screen:
                srsOutputFileFormat = SRSReportFileFormat::PDF;
                break;

            case DocPrintDestination::Printer:
                srsOutputFileFormat = SRSReportFileFormat::Image;
                break;

            case DocPrintDestination::Memory:
                srsOutputFileFormat = memoryPrintDestSettings.parmOutputFileFormatSrs();
                break;

            case DocPrintDestination::GenerateDataSource:
            default:
                DocGlobalHelper::handleException(funcName(),
                    strFmt('Unsupported Docentric print destination (%1) for printing built-in SSRS designs', printReportSettings.parmPrintDestination()));
        }

        return srsOutputFileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDocentricToSrsOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the Docentric output file format to SSRS output file format.
    /// </summary>
    /// <param name = "_docentricOutputFileFormat">Docentric output file format</param>
    /// <returns>SSRS output file format</returns>
    private SRSReportFileFormat convertDocentricToSrsOutputFileFormat(DocOutputFileFormat _docentricOutputFileFormat)
    {
        SRSReportFileFormat srsReportFileFormat;

        switch (_docentricOutputFileFormat)
        {
            case DocOutputFileFormat::PDF:
                srsReportFileFormat = SRSReportFileFormat::PDF;
                break;

            //case DocOutputFileFormat::MHTML:
            //    srsReportFileFormat = SRSReportFileFormat::MHTML;
            //    break;

            case DocOutputFileFormat::XML:
                srsReportFileFormat = SRSReportFileFormat::XML;
                break;

            case DocOutputFileFormat::TIFF:
                srsReportFileFormat = SRSReportFileFormat::Image;
                break;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported file format %1', _docentricOutputFileFormat));
        }

        return srsReportFileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSrsReportParameterValueArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report parameter value array.
    /// </summary>
    private void setSrsReportParameterValueArray()
    {
        SrsReportDataContract reportDataContract = this.getSrsReportDataContract();
        
        SrsReportRunService reportRunService = new SrsReportRunService();
        reportRunService.parmLocalMode(ReportsConfiguration::get_IsLocalMode());
        
        Map srsReportParameterMap = reportRunService.createParamMapFromContract(reportDataContract);  // Map(str _parameterName, SrsReportParameter class instance)

        srsReportParameterValueArray = SrsReportRunUtil::getParameterValueArray(srsReportParameterMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdfDocumentProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets document properties for generated PDF document.
    /// </summary>
    /// <param name = "_srsReportContent">Report content</param>
    /// <returns>Updated report content</returns>
    private System.Byte[] setPdfDocumentProperties(System.Byte[] _srsReportContent)
    {
        System.IO.MemoryStream srsReportContentStream = DocGlobalHelper::convertBytesToMemoryStream(_srsReportContent);

        // Create PDF properties
        DocPdfProperties pdfProperties = new DocPdfProperties();

        // Set the standard PDF properties
        pdfProperties.Author = printReportSettings.parmDocumentAuthor() ? printReportSettings.parmDocumentAuthor() : printReportSettings.parmCompanyId();
        pdfProperties.Title = printReportSettings.parmDocumentTitle() ? printReportSettings.parmDocumentTitle() : printReportSettings.getReportCaptionOrId();
        pdfProperties.Subject = printReportSettings.parmDocumentSubject();
        pdfProperties.Keywords = printReportSettings.parmDocumentKeywords();
        
        System.IO.MemoryStream srsReportContentStreamUpdated = new System.IO.MemoryStream();

        // Set PDF properties
        DocPdfPropertyManager::SetProperties(srsReportContentStream, srsReportContentStreamUpdated, pdfProperties);

        return srsReportContentStreamUpdated.ToArray();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>