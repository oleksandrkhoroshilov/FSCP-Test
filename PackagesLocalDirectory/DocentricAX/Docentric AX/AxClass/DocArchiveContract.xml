<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocArchiveContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class DocArchiveContract is used as data contract for archive. 
/// </summary>
public class DocArchiveContract
{
    str                     documentId;
    date                    documentDate;
    str                     accountNum;
    DocAccountRole          accountRole;
    str                     sourceTableId;
    DocSourceTableType      sourceTableType;
    RecId                   journalRecId;
    DocJournalType          journalType;
    str                     customInfo;
    int                     executionTime;
    container               documentContentPdf;
    DocIsProforma           isProforma;

    #define.currentPackVersion(1)

    #localmacro.currentList
        version,
        documentId,
        documentDate,
        accountNum,
        accountRole,
        sourceTableId,
        sourceTableType,
        journalRecId,
        journalType,
        customInfo,
        executionTime,
        isProforma
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container pack()
    {
        int version = #currentPackVersion;
        return [#currentList, documentContentPdf];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True if unpack was successful; otherwise false</returns>
    public boolean unpack(container _pack)
    {
        boolean   ret = false;
        int       version;
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #currentPackVersion)
            {
                [#currentList, documentContentPdf] = _pack;
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the document Id, e.g. Invoice ID, Purchase order number, etc.
    /// </summary>
    /// <param name = "_documentId">Document Id</param>
    /// <returns>Document Id</returns>
    public str parmDocumentId(str _documentId = documentId)
    {
        documentId = _documentId;
        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the document date, e.g. Invoice date.
    /// </summary>
    /// <param name = "_documentDate">Document date</param>
    /// <returns>Document date</returns>
    public date parmDocumentDate(date _documentDate = documentDate)
    {
        documentDate = _documentDate;
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the account number, e.g. Customer/Vendor account number.
    /// </summary>
    /// <param name = "_accountNum">Account number</param>
    /// <returns>Account number</returns>
    public str parmAccountNum(str _accountNum = accountNum)
    {
        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// /Gets/Sets the account role: N/A, Vendor or Customer.
    /// </summary>
    /// <param name = "_accountRole">Account role</param>
    /// <returns>Account role</returns>
    public DocAccountRole parmAccountRole(DocAccountRole _accountRole = accountRole)
    {
        accountRole = _accountRole;
        return accountRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the source table ID, e.g. PurchId or SalesId.
    /// </summary>
    /// <param name = "_sourceTableId">Source table ID</param>
    /// <returns>Source table ID</returns>
    public str parmSourceTableId(str _sourceTableId = sourceTableId)
    {
        sourceTableId = _sourceTableId;
        return sourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the source table type, e.g. PurchTable or SalesTable.
    /// </summary>
    /// <param name = "_sourceTableType">Source table type</param>
    /// <returns>Source table type</returns>
    public DocSourceTableType parmSourceTableType(DocSourceTableType _sourceTableType = sourceTableType)
    {
        sourceTableType = _sourceTableType;
        return sourceTableType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the journal RecId.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <returns>Journal record Id</returns>
    public RecId parmJournalRecId(RecId _journalRecId = journalRecId)
    {
        journalRecId = _journalRecId;
        return journalRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the journal type, e.g. CustInvoiceJour
    /// </summary>
    /// <param name = "_journalType">Journal type</param>
    /// <returns>Journal type</returns>
    public DocJournalType parmJournalType(DocJournalType _journalType = journalType)
    {
        journalType = _journalType;
        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets additional report information.
    /// </summary>
    /// <param name = "_customInfo">Additional report information</param>
    /// <returns>Additional report information</returns>
    public str parmCustomInfo(str _customInfo = customInfo)
    {
        customInfo = _customInfo;
        return customInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecutionTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the document execution time.
    /// </summary>
    /// <param name = "_executionTime">Document execution time</param>
    /// <returns>Document execution time</returns>
    public int parmExecutionTime(int _executionTime = executionTime)
    {
        executionTime = _executionTime;
        return executionTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentContentPdf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the document content in a form of PDF byte array packed in a container.
    /// </summary>
    /// <param name = "_documentContentPdf">Document content in a form of PDF byte array packed in a container</param>
    /// <returns>Document content in a form of PDF byte array packed in a container</returns>
    public container parmDocumentContentPdf(container _documentContentPdf = documentContentPdf)
    {
        documentContentPdf = _documentContentPdf;
        return documentContentPdf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag which specifies if the report is run as a proforma.
    /// </summary>
    /// <param name = "_isProforma">Is report a proforma</param>
    /// <returns>True/False</returns>
    public DocIsProforma parmIsProforma(DocIsProforma _isProforma = isProforma)
    {
        isProforma = _isProforma;
        return isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the fields of the archive data contract are set.
    /// </summary>
    /// <returns>True, if the fields are set; otherwise false</returns>
    public boolean isSet()
    {
        if (documentId != '' || documentDate != dateNull() || 
            accountNum != '' || accountRole != DocAccountRole::NA ||
            journalRecId != 0 || journalType != DocJournalType::NA ||
            sourceTableId != '' || sourceTableType != DocSourceTableType::NA ||
            customInfo != '' || executionTime != 0 ||
            documentContentPdf != conNull())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account table record.
    /// </summary>
    /// <returns>Account table record</returns>
    public Common getAccountTableRecord()
    {
        return DocRecordTypeHelper::getAccountTableRecord(this.parmAccountNum(), this.parmAccountRole());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account table name.
    /// </summary>
    /// <returns>Account table name</returns>
    public str getAccountTableName()
    {
        return DocRecordTypeHelper::getAccountTableName(this.parmAccountNum(), this.parmAccountRole());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table name.
    /// </summary>
    /// <returns>Source table name</returns>
    public str getSourceTableName()
    {
        return DocRecordTypeHelper::getSourceTableName(this.parmSourceTableId(), this.parmSourceTableType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table record.
    /// </summary>
    /// <returns>Source table record</returns>
    public Common getSourceTableRecord()
    {
        return DocRecordTypeHelper::getSourceTableRecord(this.parmSourceTableId(), this.parmSourceTableType(), this.parmJournalRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line table name.
    /// </summary>
    /// <returns>Source line table name</returns>
    public str getSourceLineTableName()
    {
        return DocRecordTypeHelper::getSourceLineTableName(this.parmSourceTableId(), this.parmSourceTableType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line records.
    /// </summary>
    /// <returns>Source line records</returns>
    public Common getSourceLineRecords()
    {
        return DocRecordTypeHelper::getSourceLineRecords(this.parmSourceTableId(), this.parmSourceTableType(), this.parmJournalRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal table name.
    /// </summary>
    /// <returns>Journal table name</returns>
    public str getJournalTableName()
    {
        return DocRecordTypeHelper::getJournalTableName(this.parmJournalRecId(), this.parmJournalType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal table record.
    /// </summary>
    /// <returns>Journal table record</returns>
    public Common getJournalTableRecord()
    {
        return DocRecordTypeHelper::getJournalTableRecord(this.parmJournalRecId(), this.parmJournalType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalLineTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal line table name.
    /// </summary>
    /// <returns>Journal line table name</returns>
    public str getJournalLineTableName()
    {
        return DocRecordTypeHelper::getJournalLineTableName(this.parmJournalRecId(), this.parmJournalType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalLineRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal line records.
    /// </summary>
    /// <returns>Journal line records</returns>
    public Common getJournalLineRecords()
    {
        return DocRecordTypeHelper::getJournalLineRecords(this.parmJournalRecId(), this.parmJournalType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineItemRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line records with items.
    /// </summary>
    /// <returns>Line records with items</returns>
    public Common getLineItemRecords()
    {
        return DocRecordTypeHelper::getLineItemRecords(this.parmJournalRecId(), this.parmJournalType(), this.parmSourceTableId(), this.parmSourceTableType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineItemVariantRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line records with item variants.
    /// </summary>
    /// <returns>Line records with item variants</returns>
    public Common getLineItemVariantRecords()
    {
        return DocRecordTypeHelper::getLineItemVariantRecords(this.parmJournalRecId(), this.parmJournalType(), this.parmSourceTableId(), this.parmSourceTableType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocument</Name>
				<Source><![CDATA[
    /********************************************************/
    /***           APIs to use from DSP classes           ***/
    /********************************************************/
   
    /// <summary>
    /// Sets the document fields.
    /// </summary>
    /// <param name = "_documentId">Document Id</param>
    /// <param name = "_documentDate">Document date</param>
    public void setDocument(str _documentId, date _documentDate = dateNull())
    {
        documentId = _documentId;
        documentDate = _documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the customer account field.
    /// </summary>
    /// <param name = "_accountNum">Customer account</param>
    public void setCustAccount(str _accountNum)
    {
        accountNum = _accountNum;
        accountRole = DocAccountRole::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vendor account field.
    /// </summary>
    /// <param name = "_accountNum">Vendor account</param>
    public void setVendAccount(str _accountNum)
    {
        accountNum = _accountNum;
        accountRole = DocAccountRole::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journal fields.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <param name = "_journalType">Journal type</param>
    public void setJournal(RecId _journalRecId, DocJournalType _journalType)
    {
        journalRecId = _journalRecId;
        journalType = _journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journal table record.
    /// </summary>
    /// <param name = "_journalTableRecord">Journal table record</param>
    public void setJournalTableRecord(Common _journalTableRecord)
    {
        switch (_journalTableRecord.TableId)
        {
            case tableNum(CustCollectionLetterJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::CustCollectionLetterJour);
                break;

            case tableNum(CustConfirmJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::CustConfirmJour);
                break;

            case tableNum(CustInterestJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::CustInterestJour);
                break;

            case tableNum(CustInvoiceJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::CustInvoiceJour);
                break;

            case tableNum(CustPackingSlipJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::CustPackingSlipJour);
                break;

            case tableNum(CustQuotationConfirmJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::CustQuotationConfirmJour);
                break;

            case tableNum(CustQuotationJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::CustQuotationJour);
                break;

            case tableNum(ProjInvoiceJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::ProjInvoiceJour);
                break;

            case tableNum(PurchConfirmationRequestJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::PurchConfirmationRequestJour);
                break;

            case tableNum(VendInvoiceJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::VendInvoiceJour);
                break;

            case tableNum(VendPackingSlipJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::VendPackingSlipJour);
                break;

            case tableNum(VendPurchOrderJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::VendPurchOrderJour);
                break;

            case tableNum(VendReceiptsListJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::VendReceiptsListJour);
                break;

            case tableNum(VendRFQJour):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::VendRFQJour);
                break;

            case tableNum(WMSPickingRoute):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::WMSPickingRoute);
                break;

            case tableNum(SalesAgreementHeaderHistory):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::SalesAgreementHeaderHistory);
                break;

            case tableNum(PurchAgreementHeaderHistory):
                this.setJournal(_journalTableRecord.RecId, DocJournalType::PurchAgreementHeaderHistory);
                break;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported Journal type: %1', tableId2PName(_journalTableRecord.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the source table fields.
    /// </summary>
    /// <param name = "_sourceTableId">Source table Id</param>
    /// <param name = "_sourceTableType">Source table type</param>
    public void setSourceTableId(str _sourceTableId, DocSourceTableType _sourceTableType)
    {
        sourceTableId = _sourceTableId;
        sourceTableType = _sourceTableType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesId</Name>
				<Source><![CDATA[
    /* Helper methods for setting Source table - BEGIN */

    /// <summary>
    /// Sets the sales Id.
    /// </summary>
    /// <param name = "_salesId">Sales Id</param>
    public void setSalesId(str _salesId)
    {
        sourceTableId = _salesId;
        sourceTableType = DocSourceTableType::SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the purchase Id.
    /// </summary>
    /// <param name = "_purchId">Purch Id</param>
    public void setPurchId(str _purchId)
    {
        sourceTableId = _purchId;
        sourceTableType = DocSourceTableType::PurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjInvoiceProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project invoice project Id.
    /// </summary>
    /// <param name = "_projInvoiceProjId">Project invoice project Id</param>
    public void setProjInvoiceProjId(str _projInvoiceProjId)
    {
        sourceTableId = _projInvoiceProjId;
        sourceTableType = DocSourceTableType::ProjInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the WHS shipment Id.
    /// </summary>
    /// <param name = "_shipmentId">WHS Shipment Id</param>
    public void setWHSShipmentId(str _shipmentId)
    {
        sourceTableId = _shipmentId;
        sourceTableType = DocSourceTableType::WHSShipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the load Id.
    /// </summary>
    /// <param name = "_loadId">Load Id</param>
    public void setWHSLoadId(str _loadId)
    {
        sourceTableId = _loadId;
        sourceTableType = DocSourceTableType::WHSLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWMSShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the WMS shipment Id.
    /// </summary>
    /// <param name = "_shipmentId">WMS Shipment Id</param>
    public void setWMSShipmentId(str _shipmentId)
    {
        sourceTableId = _shipmentId;
        sourceTableType = DocSourceTableType::WMSShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRFQCaseId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the RFQ case Id.
    /// </summary>
    /// <param name = "_rfqCaseId">RFQ Case Id</param>
    public void setRFQCaseId(str _rfqCaseId)
    {
        sourceTableId = _rfqCaseId;
        sourceTableType = DocSourceTableType::PurchRFQCaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuotationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quotation Id.
    /// </summary>
    /// <param name = "_quotationId">Quotation Id</param>
    public void setQuotationId(str _quotationId)
    {
        sourceTableId = _quotationId;
        sourceTableType = DocSourceTableType::SalesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the prod Id.
    /// </summary>
    /// <param name = "_prodId">Prod Id</param>
    public void setProdId(str _prodId)
    {
        sourceTableId = _prodId;
        sourceTableType = DocSourceTableType::ProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustInvoiceInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the customer invoice Id.
    /// </summary>
    /// <param name = "_custInvoiceInvoiceId">Customer invoice Id</param>
    public void setCustInvoiceInvoiceId(str _custInvoiceInvoiceId)
    {
        sourceTableId = _custInvoiceInvoiceId;
        sourceTableType = DocSourceTableType::CustInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /* Helper methods for setting Source table - END */

    /// <summary>
    /// Gets the archive data contract field values as string.
    /// </summary>
    /// <returns>Archive data contract field values as string</returns>
    public str toString()
    {
        str displayStr = '';

        // Document ID
        if (documentId != '')
        {
            displayStr = strFmt("@DocentricAX2:Document" + ': %1', documentId);
        }

        // Document date
        if (documentDate != dateNull())
        {
            if (displayStr != '')
            {
                displayStr = displayStr + ', ' + strFmt("@DocentricAX2:DocumentDate" + ': %1', documentDate);
            }
            else
            {
                displayStr = strFmt("@DocentricAX2:DocumentDate" + ': %1', documentDate);
            }
        }

        // Account number
        if (accountNum != '')
        {
            str accountRoleStr = '';
            if (accountRole != DocAccountRole::NA)
            {
                accountRoleStr = strFmt(' (%1)', accountRole);
            }

            if (displayStr != '')
            {
                displayStr = displayStr + ', ' + strFmt("@DocentricAX2:Account" + ': %1', accountNum) + accountRoleStr;
            }
            else
            {
                displayStr = strFmt("@DocentricAX2:Account" + ': %1', accountNum) + accountRoleStr;
            }
        }

        // Source table ID
        if (sourceTableId != '')
        {
            str sourceTableTypeStr = '';
            if (sourceTableType != DocSourceTableType::NA)
            {
                sourceTableTypeStr = strFmt(' (%1)', sourceTableType);
            }

            if (displayStr != '')
            {
                displayStr = displayStr + ', ' + strFmt("@DocentricAX2:SourceTable" + ': %1', sourceTableId) + sourceTableTypeStr;
            }
            else
            {
                displayStr = strFmt("@DocentricAX2:SourceTable" + ': %1', sourceTableId) + sourceTableTypeStr;
            }
        }

        // Report additional information
        if (customInfo != '')
        {
            if (displayStr != '')
            {
                displayStr = displayStr + ', ' + customInfo;
            }
            else
            {
                displayStr = customInfo;
            }
        }

        /*
        // Journal ID
        if (journalRecId != 0)
        {
            str journalTypeStr = '';
            if (journalType != DocJournalType::NA)
            {
                journalTypeStr = strFmt(' (%1)', journalType);
            }

            if (displayStr != '')
            {
                displayStr = displayStr + ', ' + strFmt("Journal" + ': ', journalRecId) + journalTypeStr;
            }
            else
            {
                displayStr = strFmt("Journal" + ': ', journalRecId) + journalTypeStr;
            }
        }
        */

        return displayStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDocumentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document info as string.
    /// </summary>
    /// <returns>Document info as string.</returns>
    public str toDocumentInfo()
    {
        str displayStr = '';

        // Document ID
        if (documentId != '')
        {
            displayStr = strFmt("@DocentricAX2:Document" + ': %1', documentId);
        }

        // Account number
        if (accountNum != '')
        {
            if (displayStr != '')
            {
                displayStr += ', ';
            }
            
            displayStr += strFmt('%1: %2', accountRole, accountNum);
        }

        // Source table ID
        if (sourceTableId != '')
        {
            if (displayStr != '')
            {
                displayStr += ', ';
            }

            displayStr += strFmt('%1: %2', sourceTableType, sourceTableId);
        }

        return displayStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>