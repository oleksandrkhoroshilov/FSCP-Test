<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportPrintArchiveInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportPrintArchiveInfo
{
    DocPrintReportSettings                      printReportSettings;
    SRSPrintDestinationSettings                 srsPrintDestinationSettings;
    DocPrintReportToFileExecutionInfo           printToFileExecutionInfo;
    DocPrintReportToEmailExecutionInfo          printToEmailExecutionInfo;
    DocPrintReportToPrinterExecutionInfo        printToPrinterExecutionInfo;
    Map                                         reportParameterMap;  // Map(str parameterName, SrsReportParameter class instance)
    Query                                       dynamicQueryParameter;


    #define.currentPackVersion(1)
    #localmacro.currentList
        version
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>packForStoringToDb</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container packForStoringToDb()
    {
        int         version = #currentPackVersion;
        container   printReportSettingsContainer = conNull();
        container   printToFileExecutionInfoContainer = conNull();
        container   printToEmailExecutionInfoContainer = conNull();
        container   printToPrinterExecutionInfoContainer = conNull();

        if (printReportSettings != null)
        {
            // We need to pack printReportSettings without: srsReportDataContract, achiveContract and xmlDataSourceStr.
            DocPrintReportSettings printReportSettingsToPack = DocPrintReportSettings::constructWithoutArchiveAndSrsReportContracts(printReportSettings);
            printReportSettingsToPack.parmXmlDataSourceStr('');
            printReportSettingsContainer = printReportSettingsToPack.pack();
        }
        if (printToFileExecutionInfo != null)
        {
            printToFileExecutionInfoContainer = printToFileExecutionInfo.pack();
        }
        if (printToEmailExecutionInfo != null)
        {
            printToEmailExecutionInfoContainer = printToEmailExecutionInfo.pack();
        }
        if (printToPrinterExecutionInfo != null)
        {
            printToPrinterExecutionInfoContainer = printToPrinterExecutionInfo.pack();
        }
                
        // Note: We will skip srsPrintDestinationSettings since they are saved in the separate field of the DocPrintJobHeader table.

        return [#currentList, printReportSettingsContainer, printToFileExecutionInfoContainer,
                printToEmailExecutionInfoContainer, printToPrinterExecutionInfoContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFromDb</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True/False</returns>
    public boolean unpackFromDb(container _pack)
    {
        boolean       ret = false;
        int           version;
        container     printReportSettingsContainer;
        container     printToFileExecutionInfoContainer;
        container     printToEmailExecutionInfoContainer;
        container     printToPrinterExecutionInfoContainer;
        
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);

            if (version == #currentPackVersion)
            {
                [#currentList, printReportSettingsContainer, printToFileExecutionInfoContainer,
                 printToEmailExecutionInfoContainer, printToPrinterExecutionInfoContainer] = _pack;

                ret = true;
            }

            printReportSettings = null;
            if (printReportSettingsContainer != conNull())
            {
                ret = this.parmPrintReportSettings().unpack(printReportSettingsContainer) && ret;
            }

            printToFileExecutionInfo = null;
            if (printToFileExecutionInfoContainer != conNull())
            {
                ret = this.parmPrintToFileExecutionInfo().unpack(printToFileExecutionInfoContainer) && ret;
            }

            printToEmailExecutionInfo = null;
            if (printToEmailExecutionInfoContainer != conNull())
            {
                ret = this.parmPrintToEmailExecutionInfo().unpack(printToEmailExecutionInfoContainer) && ret;
            }

            printToPrinterExecutionInfo = null;
            if (printToPrinterExecutionInfoContainer != conNull())
            {
                ret = this.parmPrintToPrinterExecutionInfo().unpack(printToPrinterExecutionInfoContainer) && ret;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportPrintedAsSignedPdf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the archived report is electronically signed.
    /// Note that this method will always be returning false if the object is unpacked from the database.
    /// </summary>
    /// <returns>True if the archived report is electronically signed; otherwise false</returns>
    public boolean isReportPrintedAsSignedPdf()
    {
        // If the report is archived via Print archive selected as a primary print destination,
        // it is stored in printReportSettings.parmPrintedReport(), and if the report content is signed,
        // we can use the printReportSettings.isPrintedReportProvidedAsSignedPdf() method.
        // On the other hand, when the report is archived via Email, File or Printer print destination with the output format
        // different than PDF, e.g. DOCX, XLSX, or EMF (printing to a network printer), an additional PDF document is generated
        // and electronically signed, if the signing is enabled for this report and company in Docentric report setup.
        // This document is not stored in printReportSettings.parmPrintedReport(), so we cannot use the above method.
        // However, we can always determine if the PDF report has been signed from the printReportSettings.parmPdfSignatureSettings() object.
        return this.parmPrintReportSettings().applyPdfSignature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportPrintedAsEncryptedPdf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating if the report was printed as encrypted PDF.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isReportPrintedAsEncryptedPdf()
    {
        switch (this.parmPrintReportSettings().parmPrintDestination())
        {
            case DocPrintDestination::Email:
                return printToEmailExecutionInfo.parmIsPdfReportEncrypted();

            case DocPrintDestination::File:
                return printToFileExecutionInfo.parmIsPdfReportEncrypted();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdfEncryptionPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PDF encryption password.
    /// </summary>
    /// <returns>PDF encryption password</returns>
    public str getPdfEncryptionPassword()
    {
        switch (this.parmPrintReportSettings().parmPrintDestination())
        {
            case DocPrintDestination::Email:
                return printToEmailExecutionInfo.parmPdfEncryptionPassword();

            case DocPrintDestination::File:
                return printToFileExecutionInfo.parmPdfEncryptionPassword();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdfEncryptionConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PDF encryption conditions.
    /// </summary>
    /// <returns>PDF encryption conditions</returns>
    public str getPdfEncryptionConditions()
    {
        if (!this.isReportPrintedAsEncryptedPdf())
        {
            return '';
        }

        switch (this.parmPrintReportSettings().parmPrintDestination())
        {
            case DocPrintDestination::Email:
                return printToEmailExecutionInfo.pdfEncryptionConditionSetToString();

            case DocPrintDestination::File:
                return printToFileExecutionInfo.pdfEncryptionConditionSetToString();
        }       

        // Should never happen.
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print destination.
    /// </summary>
    /// <returns>Print destination</returns>
    public DocPrintDestinationArchive getPrintDestination()
    {
        DocPrintDestinationArchive targetPd;
        switch(this.parmPrintReportSettings().parmPrintDestination())
        {
            case DocPrintDestination::Archive:
                targetPd = DocPrintDestinationArchive::Archive;
                break;

            case DocPrintDestination::Email:
                targetPd = DocPrintDestinationArchive::Email;
                break;

            case DocPrintDestination::File:
                targetPd = DocPrintDestinationArchive::File;
                break;

            case DocPrintDestination::Printer:
                targetPd = DocPrintDestinationArchive::Printer;
                break;

            case DocPrintDestination::Screen:
                targetPd = DocPrintDestinationArchive::Screen;
                break;

            case DocPrintDestination::Memory:
                targetPd = DocPrintDestinationArchive::Memory;
                break;
        }

        return targetPd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print destination information.
    /// </summary>
    /// <returns>Print destination information</returns>
    public str getPrintDestinationInfo()
    {
        str targetPdInfo = '';
        switch(this.parmPrintReportSettings().parmPrintDestination())
        {
            case DocPrintDestination::Email:
                str emailTo = this.parmSrsPrintDestinationSettings().parmEmailPrintDestSettings_DC().parmEmailTo();
                str emailSubject = this.parmSrsPrintDestinationSettings().parmEmailPrintDestSettings_DC().parmEmailSubject();
                str emailAttachmentName = this.parmSrsPrintDestinationSettings().parmEmailPrintDestSettings_DC().parmEmailAttachmentName();
                targetPdInfo = strFmt("@DocentricAX2:EmailInfoPA", emailSubject, emailAttachmentName, emailTo);

                break;

            case DocPrintDestination::File:
                str outputFilename = this.parmPrintToFileExecutionInfo().parmReportOutputFilename();
                
                targetPdInfo = strFmt("@DocentricAX2:OutputFilenamePA", outputFilename);

                boolean saveToAzure = this.parmSrsPrintDestinationSettings().parmFilePrintDestSettings_DC().parmSaveToAzureBlobStorage();
                boolean saveToAzureFiles = this.parmSrsPrintDestinationSettings().parmFilePrintDestSettings_DC().parmSaveToAzureFiles();
                boolean saveToFileSystem = this.parmSrsPrintDestinationSettings().parmFilePrintDestSettings_DC().parmSaveToFileSystem();
                boolean saveToSharePoint = this.parmSrsPrintDestinationSettings().parmFilePrintDestSettings_DC().parmSaveToSharePoint();
                boolean saveToAttachment = this.parmSrsPrintDestinationSettings().parmFilePrintDestSettings_DC().parmSaveToAttachments();

                if (saveToAzure)
                {
                    boolean saveToAzureSuccess = this.parmPrintToFileExecutionInfo().parmSaveToAzureBlobStorageSuccess();
                    targetPdInfo = targetPdInfo + strFmt(', ' + "@DocentricAX2:SaveToAzurePA", saveToAzureSuccess ? "@DocentricAX2:SuccessPA" : "@DocentricAX2:FailurePA");
                }
                if (saveToAzureFiles)
                {
                    boolean saveToAzureFilesSuccess = this.parmPrintToFileExecutionInfo().parmSaveToAzureFilesSuccess();
                    targetPdInfo = targetPdInfo + strFmt(', ' + "@DocentricAX4:SaveToAzureFilesPA", saveToAzureFilesSuccess ? "@DocentricAX2:SuccessPA" : "@DocentricAX2:FailurePA");
                }
                if (saveToFileSystem)
                {
                    boolean saveToFileSystemSuccess = this.parmPrintToFileExecutionInfo().parmSaveToFileSystemSuccess();
                    targetPdInfo = targetPdInfo + strFmt(', ' + "@DocentricAX2:SaveToFileSystemPA", saveToFileSystemSuccess ? "@DocentricAX2:SuccessPA" : "@DocentricAX2:FailurePA");
                }
                if (saveToSharePoint)
                {
                    boolean saveToSharePointSuccess = this.parmPrintToFileExecutionInfo().parmSaveToSharePointSuccess();
                    targetPdInfo = targetPdInfo + strFmt(', ' + "@DocentricAX2:SaveToSharePointPA", saveToSharePointSuccess ? "@DocentricAX2:SuccessPA" : "@DocentricAX2:FailurePA");
                }
                if (saveToAttachment)
                {
                    boolean saveToAttachmentsSuccess = this.parmPrintToFileExecutionInfo().parmSaveToAttachmentsSuccess();
                    targetPdInfo = targetPdInfo + strFmt(', ' + "@DocentricAX2:SaveToAttachmentsPA", saveToAttachmentsSuccess ? "@DocentricAX2:SuccessPA" : "@DocentricAX2:FailurePA");
                }
                break;

            case DocPrintDestination::Printer:
                str printerName = this.parmSrsPrintDestinationSettings().parmPrinterPrintDestSettings_DC().parmSelectedPrinterName();
                str printerPath = this.parmPrintToPrinterExecutionInfo().parmResolvedPrinterPath();
                targetPdInfo = strFmt("@DocentricAX2:PrinterInfoPA", printerName, printerPath);
                break;

            case DocPrintDestination::Archive:
            case DocPrintDestination::Screen:
            case DocPrintDestination::Memory:
                break;
        }

        return targetPdInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email print destination settings.
    /// </summary>
    /// <returns>Email print destination settings object</returns>
    public DocPrintDestSettingsEmail getEmailPrintDestSettings()
    {
        return this.parmSrsPrintDestinationSettings().parmEmailPrintDestSettings_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilePrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file print destination settings.
    /// </summary>
    /// <returns>File print destination settings object</returns>
    public DocPrintDestSettingsFile getFilePrintDestSettings()
    {
        return this.parmSrsPrintDestinationSettings().parmFilePrintDestSettings_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the printer print destination settings.
    /// </summary>
    /// <returns>Printer print destination settings object</returns>
    public DocPrintDestSettingsPrinter getPrinterPrintDestSettings()
    {
        return this.parmSrsPrintDestinationSettings().parmPrinterPrintDestSettings_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArchiveContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the archive contract.
    /// </summary>
    /// <returns>Archive contract object</returns>
    public DocArchiveContract getArchiveContract()
    {
        return this.parmPrintReportSettings().parmArchiveContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintArchiveDocuTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print archive document type ID.
    /// </summary>
    /// <returns>Print archive document type ID</returns>
    public DocuTypeId getPrintArchiveDocuTypeId()
    {
        DocuTypeId docuTypeId = this.parmPrintReportSettings().parmSaveToArchiveDocuTypeId();
        
        if (docuTypeId == '')
        {
            docuTypeId = DocReportingHelper::getDefaultPrintArchiveDocuTypeId();
        }

        return docuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSrsPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print destination settings.
    /// </summary>
    /// <param name = "_srsPrintDestinationSettings">Print destination settings</param>
    /// <returns>Print destination settings object</returns>
    public SRSPrintDestinationSettings parmSrsPrintDestinationSettings(SRSPrintDestinationSettings _srsPrintDestinationSettings = srsPrintDestinationSettings)
    {
        srsPrintDestinationSettings = _srsPrintDestinationSettings;
    
        if (srsPrintDestinationSettings == null)
        {
            srsPrintDestinationSettings = new SRSPrintDestinationSettings();
        }
    
        return srsPrintDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintReportSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print report settings.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <returns>Print report settings object</returns>
    public DocPrintReportSettings parmPrintReportSettings(DocPrintReportSettings _printReportSettings = printReportSettings)
    {
        printReportSettings = _printReportSettings;
    
        if (printReportSettings == null)
        {
            printReportSettings = new DocPrintReportSettings();
        }
    
        return printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report parameters.
    /// </summary>
    /// <returns>Report parameters</returns>
    public Map getReportParameters()
    {
        if (reportParameterMap == null || reportParameterMap.empty())
        {
            reportParameterMap = this.parmPrintReportSettings().getReportParameters();  // Map(str _parameterName, SrsReportParameter class instance)
        }

        return reportParameterMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDynamicQueryParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dynamic query report parameter.
    /// </summary>
    /// <returns>Dynamic query report parameter</returns>
    public Query getDynamicQueryParameter()
    {
        if (dynamicQueryParameter == null)
        {
            dynamicQueryParameter = this.parmPrintReportSettings().getDynamicQueryParameter();
        }

        return dynamicQueryParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDynamicQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameters defined as ranges on the dynamic query parameter.
    /// </summary>
    /// <returns>List of QueryBuildRange objects</returns>
    public List getDynamicQueryRanges()
    {
        QueryBuildRange         qbr;
        QueryBuildDatasource    qbds;
        int                     rangeNumber, rangeCount, dsCount, dsNumber;
    
        List qbrList = null;
        if (this.getDynamicQueryParameter() != null)
        {
            qbrList = new List(Types::Class);
            dsCount = this.getDynamicQueryParameter().dataSourceCount();
            for (dsNumber = 1; dsNumber <= dsCount; dsNumber++)
            {
                qbds = this.getDynamicQueryParameter().dataSourceNo(dsNumber);
                if (qbds.enabled())
                {
                    rangeCount = qbds.rangeCount();
                    for (rangeNumber = 1; rangeNumber <= rangeCount; rangeNumber++)
                    {
                        qbr = qbds.range(rangeNumber);
                        qbrList.addEnd(qbr);
                    }
                }
            }
        }
    
        return qbrList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToFileExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print to file execution info.
    /// </summary>
    /// <param name = "_printToFileExecutionInfo">Print to file execution info</param>
    /// <returns>Print to file execution info object</returns>
    public DocPrintReportToFileExecutionInfo parmPrintToFileExecutionInfo(DocPrintReportToFileExecutionInfo _printToFileExecutionInfo = printToFileExecutionInfo)
    {
        printToFileExecutionInfo = _printToFileExecutionInfo;
    
        if (printToFileExecutionInfo == null)
        {
            printToFileExecutionInfo = new DocPrintReportToFileExecutionInfo();
        }
    
        return printToFileExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToEmailExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print to email execution info.
    /// </summary>
    /// <param name = "_printToEmailExecutionInfo">Print to email execution info</param>
    /// <returns>Print to email execution info object</returns>
    public DocPrintReportToEmailExecutionInfo parmPrintToEmailExecutionInfo(DocPrintReportToEmailExecutionInfo _printToEmailExecutionInfo = printToEmailExecutionInfo)
    {
        printToEmailExecutionInfo = _printToEmailExecutionInfo;
    
        if (printToEmailExecutionInfo == null)
        {
            printToEmailExecutionInfo = new DocPrintReportToEmailExecutionInfo();
        }

        return printToEmailExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAdditionalEmailAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    ///Gets the flag indicating if an email has additional attachments.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean hasAdditionalEmailAttachments()
    {
        return this.parmPrintToEmailExecutionInfo().hasAdditionalEmailAttachments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintToPrinterExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print to printer execution info.
    /// </summary>
    /// <param name = "_printToPrinterExecutionInfo">Print to printer execution info</param>
    /// <returns>Print to printer execution info object</returns>
    public DocPrintReportToPrinterExecutionInfo parmPrintToPrinterExecutionInfo(DocPrintReportToPrinterExecutionInfo _printToPrinterExecutionInfo = printToPrinterExecutionInfo)
    {
        printToPrinterExecutionInfo = _printToPrinterExecutionInfo;
    
        if (printToPrinterExecutionInfo == null)
        {
            printToPrinterExecutionInfo = new DocPrintReportToPrinterExecutionInfo();
        }

        return printToPrinterExecutionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPrintToFileReportExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the print archive info object from provided print to file execution info.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_fileReportExecutionInfo">Print to file execution info</param>
    /// <returns>Print archive info object</returns>
    public static DocReportPrintArchiveInfo constructFromPrintToFileReportExecutionInfo(DocPrintReportSettings _printReportSettings,
                                                                                        DocPrintReportToFileExecutionInfo _fileReportExecutionInfo)
    {
        if (_printReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
        }
        if (_printReportSettings.parmSrsReportContract() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract() is not set');
        }
        if (_fileReportExecutionInfo == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _fileReportExecutionInfo is not set');
        }
        SRSPrintDestinationSettings srsPds = _printReportSettings.parmSrsReportContract().parmPrintSettings();
        if (srsPds == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract().parmPrintSettings() is not set');
        }

        DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
        printArchiveInfo.parmSrsPrintDestinationSettings(srsPds);
        printArchiveInfo.parmPrintReportSettings(_printReportSettings);
        printArchiveInfo.parmPrintToFileExecutionInfo(_fileReportExecutionInfo);

        return printArchiveInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPrintToEmailReportExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the print archive info object from provided print to email execution info.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailReportExecutionInfo">Print to email execution info</param>
    /// <returns>Print archive info object</returns>
    public static DocReportPrintArchiveInfo constructFromPrintToEmailReportExecutionInfo(DocPrintReportSettings _printReportSettings,
                                                                                         DocPrintReportToEmailExecutionInfo _emailReportExecutionInfo)
    {
        if (_printReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
        }
        if (_printReportSettings.parmSrsReportContract() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract() is not set');
        }
        if (_emailReportExecutionInfo == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _emailReportExecutionInfo is not set');
        }
        SRSPrintDestinationSettings srsPds = _printReportSettings.parmSrsReportContract().parmPrintSettings();
        if (srsPds == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract().parmPrintSettings() is not set');
        }

        DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
        printArchiveInfo.parmSrsPrintDestinationSettings(srsPds);
        printArchiveInfo.parmPrintReportSettings(_printReportSettings);
        printArchiveInfo.parmPrintToEmailExecutionInfo(_emailReportExecutionInfo);

        return printArchiveInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPrintToPrinterReportExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the print archive info object from provided print to printer execution info.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerReportExecutionInfo">Print to printer execution info</param>
    /// <returns>Print archive info object</returns>
    public static DocReportPrintArchiveInfo constructFromPrintToPrinterReportExecutionInfo(DocPrintReportSettings _printReportSettings,
                                                                                           DocPrintReportToPrinterExecutionInfo _printerReportExecutionInfo)
    {
        if (_printReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
        }
        if (_printReportSettings.parmSrsReportContract() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract() is not set');
        }
        if (_printerReportExecutionInfo == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printerReportExecutionInfo is not set');
        }
        SRSPrintDestinationSettings srsPds = _printReportSettings.parmSrsReportContract().parmPrintSettings();
        if (srsPds == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract().parmPrintSettings() is not set');
        }

        DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
        printArchiveInfo.parmSrsPrintDestinationSettings(srsPds);
        printArchiveInfo.parmPrintReportSettings(_printReportSettings);
        printArchiveInfo.parmPrintToPrinterExecutionInfo(_printerReportExecutionInfo);

        return printArchiveInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the print arhive info object.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <returns>Print archive info object</returns>
    public static DocReportPrintArchiveInfo construct(DocPrintReportSettings _printReportSettings)
    {
        if (_printReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings is not set');
        }
        if (_printReportSettings.parmSrsReportContract() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract() is not set');
        }
        SRSPrintDestinationSettings srsPds = _printReportSettings.parmSrsReportContract().parmPrintSettings();
        if (srsPds == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _printReportSettings.parmSrsReportContract().parmPrintSettings() is not set');
        }

        DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
        printArchiveInfo.parmSrsPrintDestinationSettings(srsPds);
        printArchiveInfo.parmPrintReportSettings(_printReportSettings);

        return printArchiveInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>