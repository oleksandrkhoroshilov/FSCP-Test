<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocAzureBlobHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework.Utilities;
using Docentric.AX.Storage.Azure.BlobStorage;
using Microsoft.Dynamics.Clx.ServicesWrapper;

/// <summary>
/// Helper class for dealing with Azure blob storage.
/// </summary>
public class DocAzureBlobHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isContainerNameValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given container name is valid.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <returns>True if the given name is a valid container name.</returns>
    public static boolean isContainerNameValid(str _containerName)
    {
        str pattern = '^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]$';

        boolean isMatch = System.Text.RegularExpressions.Regex::IsMatch(_containerName, pattern);
     
        return isMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBlobNameList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns all blob names for the given container.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Blob name list; null in case of an error or if the container does not exist.</returns>
    public static List getBlobNameList(
        str _containerName,
        boolean _showErrorMsg = true,
        str _azureStorageId = '')
    {
        List blobNameList = null;

        if (_containerName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_containerName)), true, funcName(), false);
            }
            return null;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, false);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // An error occurred while getting the connection string to the provided external Azure storage account.
            // In that case, the error message is already printed to infolog if _showErrorMsg == true.
            return null;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountGetBlobNameListError", _containerName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));

        try
        {
            System.Collections.IList blobNameIList = BlobStorageHelper::GetBlobNameList(_containerName, storageConnectionString);
            if (blobNameIList)
            {
                blobNameList = new List(Types::String);
                int blobCount = ListHelper::Count(blobNameIList);
                for (int i = 0; i < blobCount; i++)
                {
                    str blobName = ListHelper::GetItem(blobNameIList, i);
                    blobNameList.addEnd(blobName);
                }
            }
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg);
            }
        }

        return blobNameList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containerExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given container exists.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>True if the given container exists</returns>
    public static boolean containerExists(
        str _containerName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean containerExists = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_containerName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_containerName)), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // An error occurred while getting the connection string to the provided external Azure storage account.
            // In that case, the error is already printed to infolog if _showErrorMsg == true and thrown if _throwError == true.
            return false;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountContainerExistsError", _containerName, DocAzureHelper::getStorageAccountInfoExt(_azureStorageId));

        try
        {
            containerExists = BlobStorageHelper::ContainerExists(_containerName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return containerExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blobExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given blob exists.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_blobName">Blob name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>True if the given blob exists</returns>
    public static boolean blobExists(
        str _containerName,
        str _blobName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean blobExists = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_containerName == '' || _blobName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_containerName), identifierStr(_blobName))), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // An error occurred while getting the connection string to the provided external Azure storage account.
            // In that case, the error is already printed to infolog if _showErrorMsg == true and thrown if _throwError == true.
            return false;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountBlobExistsError", _blobName, _containerName, DocAzureHelper::getStorageAccountInfoExt(_azureStorageId));

        try
        {
            blobExists = BlobStorageHelper::BlobExists(_containerName, _blobName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return blobExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create container with the given name.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>
    /// True if the container is successfully created, otherwise false.
    /// This is the case when container name is invalid or when container with a such name already exists
    /// </returns>
    public static boolean createContainer(
        str _containerName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean containerCreated = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_containerName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_containerName)), true, funcName(), _throwError);
            }
            return false;
        }

        if (!DocAzureBlobHelper::isContainerNameValid(_containerName))
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:InvalidContainerName", _containerName), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // An error occurred while getting the connection string to the provided external Azure storage account.
            // In that case, the error is already printed to infolog if _showErrorMsg == true and thrown if _throwError == true.
            return false;
        }
        
        // Create container with the given name.
        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountCreateContainerError", _containerName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));
        
        try
        {
            containerCreated = BlobStorageHelper::CreateContainer(_containerName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return containerCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadBlob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upload the blob to the given Azure storage container.
    /// If container does not exist, it will be created.
    /// If the blob already exists, it will be overwritten.
    /// If an error occur, an exception is thrown.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_blobName">Blob name which consists of the blob path and blob name, e.g. reports/invoices/CIV-0003.pdf</param>
    /// <param name = "_blobContent">Blob content</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    public static void uploadBlob(
        str _containerName,
        str _blobName, 
        System.IO.Stream _blobContent,
        str _azureStorageId = '')
    {
        if (_containerName == '' || _blobName == '' || _blobContent == null)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2, %3', identifierStr(_containerName), identifierStr(_blobName), identifierStr(_blobContent))));
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // Should not happen. If an error occurred while getting the connection string to the provided external
            // Azure storage account, the error is already thrown and the error message is printed to infolog.
            return;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountUploadBlobError", _blobName, _containerName, DocAzureHelper::getStorageAccountInfoExt(_azureStorageId));
        
        try
        {
            BlobStorageHelper::UploadBlob(_containerName, _blobName, _blobContent, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBlob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the given blob.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_blobName">Blob name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns true if deletion of the blob succeeded</returns>
    public static boolean deleteBlob(
        str _containerName,
        str _blobName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean blobDeleted = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_containerName == '' || _blobName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_containerName), identifierStr(_blobName))), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // An error occurred while getting the connection string to the provided external Azure storage account.
            // In that case, the error is already printed to infolog if _showErrorMsg == true and thrown if _throwError == true.
            return false;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountDeleteBlobError", _blobName, _containerName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));

        try
        {
            blobDeleted = BlobStorageHelper::DeleteBlob(_containerName, _blobName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return blobDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the given blob container.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns true if deletion of the container succeeded</returns>
    public static boolean deleteContainer(
        str _containerName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean containerDeleted = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_containerName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_containerName)), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // An error occurred while getting the connection string to the provided external Azure storage account.
            // In that case, the error is already printed to infolog if _showErrorMsg == true and thrown if _throwError == true.
            return false;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountDeleteContainerError", _containerName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));

        try
        {
            BlobStorageHelper::DeleteContainer(_containerName, storageConnectionString);
            containerDeleted = true;
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return containerDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBlobContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the blob content for the given container and blob names.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_blobName">Blob name</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns blob content if the blob exists, otherwise returns null</returns>
    public static System.IO.Stream getBlobContent(
        str _containerName,
        str _blobName,
        str _azureStorageId = '')
    {
        System.IO.Stream blobContent = null;

        if (_containerName == '' || _blobName == '')
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_containerName), identifierStr(_blobName))));
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // Should not happen. If an error occurred while getting the connection string to the provided external
            // Azure storage account, the error is already thrown and the error message is printed to infolog.
            return null;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountGetBlobContentError", _blobName, _containerName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));
        
        try
        {
            blobContent = BlobStorageHelper::DownloadBlobContent(_containerName, _blobName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }

        return blobContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBlobTemporaryDownloadLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary blob link for download.
    /// </summary>
    /// <param name = "_containerName">Container name</param>
    /// <param name = "_blobName">Blob name</param>
    /// <param name = "_expirationTimeInMinutes">Expiration time of the link in minutes</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns temporary URL of the blob if the blob exists, otherwise returns null</returns>
    public static System.String getBlobTemporaryDownloadLink(
        str _containerName,
        str _blobName,
        System.Double _expirationTimeInMinutes,
        str _azureStorageId = '')
    {
        System.String blobDownloadLink = null;

        if (_containerName == '' || _blobName == '' || _expirationTimeInMinutes == 0)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2, %3', identifierStr(_containerName), identifierStr(_blobName), identifierStr(_expirationTimeInMinutes))));
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // Should not happen. If an error occurred while getting the connection string to the provided external
            // Azure storage account, the error is already thrown and the error message is printed to infolog.
            return null;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountGetBlobTemporaryDownloadLinkError", _blobName, _containerName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));
        
        try
        {
            blobDownloadLink = BlobStorageHelper::GetBlobDownloadUrl(_containerName, _blobName, System.TimeSpan::FromMinutes(_expirationTimeInMinutes), storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }

        return blobDownloadLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAzureBlobPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Azure blob path with removed trailing '/' character.
    /// </summary>
    /// <param name = "_azureBlobPath">Azure blob path</param>
    /// <returns>Azure blob path</returns>
    public static str getAzureBlobPath(str _azureBlobPath)
    {
        if (_azureBlobPath != '')
        {
            if (strStartsWith(_azureBlobPath, DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter) &&
                    !strStartsWith(_azureBlobPath, DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter + DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter))
            {
                _azureBlobPath = subStr(_azureBlobPath, 2, strLen(_azureBlobPath) - 1);
            }
        }
        return _azureBlobPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the connection parameters that can be used in Azure Storage Explorer to connect to the storage account
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        info('CsuClientCertificateThumbprint = ' + CloudInfrastructure::GetCsuClientCertificateThumbprint());
        info('CsuStorageConnectionString = ' + CloudInfrastructure::GetCsuStorageConnectionString());        
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStorageAccountConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the connection to the given Azure account storage.
    /// If Azure account storage is not provided, connection to the internal Azure account storage is checked.
    /// </summary>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <returns>Returns true if connection to the Azure storage account succeeded</returns>
    public static boolean testStorageAccountConnection(
        str _azureStorageId = '',
        boolean _showErrorMsg = true,
        boolean _throwError = true)
    {
        boolean validConnection = false;

        // Reset the global cache - Test should always check the latest state
        DocGlobalCache::upsert(DocGlobalCacheKey::AzureKeyVaultSecret);

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            // An error occurred while getting the connection string to the provided external Azure storage account.
            // In that case, the error is already printed to infolog if _showErrorMsg == true and thrown if _throwError == true.
            return false;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountTestConnectionError", _azureStorageId);
        try
        {
            validConnection = BlobStorageHelper::TestConnection(storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return validConnection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>