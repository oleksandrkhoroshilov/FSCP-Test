<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocuView_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class DocuView_DC_Extension is an extension of the form DocuView.
/// </summary>
[ExtensionOf(formStr(DocuView))]
final class DocuView_DC_Extension
{
    private boolean blockClear_DC = false;
    private boolean origDocumentHashNumberVisible_DC;
    private boolean showGlobalAttachmentSetting_DC = false;
    private DocuRef lookupRecordDocuRef_DC;
    private FormRun formRunRef_DC;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        next init();

        // If the lookup record is a DocuRef table buffer, we need to determine the security context and 
        // set the required members to display the attachments correctly. The lookup record is set when 
        // the DocuView form is open in code by calling the DocuView menu item.
        lookupRecordDocuRef_DC = this.args().lookupRecord();
        if (lookupRecordDocuRef_DC)
        {
            // The security context is not set if the current user is Attachment administrator
            if (!(DocDocuRefHelper::isAttachmentAdmin()))
            {
                try
                {
                    // Set the security context of the DocuView form
                    this.setSecurityContext_DC();
                }
                catch
                {
                    throw Exception::Info;
                }
            }
            
            // Set the members required to display the attachments correctly
            actualCompanyId = actualCompanyId ? actualCompanyId : lookupRecordDocuRef_DC.RefCompanyId;
            actualTableId = actualTableId ? actualTableId : lookupRecordDocuRef_DC.RefTableId;
            actualRecId = actualRecId ? actualRecId : lookupRecordDocuRef_DC.RefRecId;
        }

        // Allow setting Global flag only if the caller form is legal entity or our form with global attachments.
        showGlobalAttachmentSetting_DC = (this.localFormRun && (this.localFormRun.name() == formStr(OMLegalEntity) || this.localFormRun.name() == formStr(DocReportGlobalAttachment))) ||
                                            (this.args().parmEnumType() == enumNum(DocShowGlobalAttachmentSetting) && this.args().parmEnum());
        IsGlobalAttachment_DC.visible(showGlobalAttachmentSetting_DC);
        DocuRef_ds.object(fieldNum(DocuRef, IsGlobalAttachment_DC)).visible(showGlobalAttachmentSetting_DC);

        DocuRef_ds.object(fieldNum(DocuRef, TypeId )).registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(DocuView, onJumpRef_DC), this);
        DocuRef_ds.object(fieldNum(DocuRef, LanguageId_DC )).registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(DocuView, onJumpRef_DC), this);
        DocuRef_ds.object(fieldNum(DocuRef, CategoryId_DC )).registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(DocuView, onJumpRef_DC), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSecurityContext_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the security context of the DocuView form to display the attachmnets correctly.
    /// </summary>
    private void setSecurityContext_DC()
    {
        // Handle an exception if the security context cannot be determined
        void handleException()
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:AttachmentsFormCannotBeOpenError");
        }

        // Get the security context from the referenced table before the DocuView form can be opened
        DictTable dt = new DictTable(lookupRecordDocuRef_DC.RefTableId);
        if (!dt)
        {
            handleException();
        }

        // Get the referenced record
        Common common = lookupRecordDocuRef_DC.refCommon();
        if (common.RecId)
        {
            actualRecord = common;
        }

        // Get the referenced form from the referenced table
        str formRef = dt.formRef();
        if (!formRef)
        {
            handleException();
        }

        // Create an instance of the referenced form to get the security context
        MenuFunction menuFunction = new MenuFunction(formRef, MenuItemType::Display);
        Args args = new Args();
        args.lookupRecord(actualRecord);
        args.record(actualRecord);

        formRunRef_DC = menuFunction.create(args);
        if (!formRunRef_DC)
        {
            handleException();
        }

        formRunRef_DC.doResearch();

        // Set the security context of the DocuView form depending on the instance of the referenced form
        this.doReSearch(formRunRef_DC);

        // The actualRecord is empty if there is no active record in the referenced form. This can happen
        // if the form's data source contains a filter for the current user. 
        if (!actualRecord)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:AttachmentsFormCannotBeOpenDuePermissionError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocuRefAllowEdit_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the DocuRef data source is updatable or not.
    /// </summary>
    /// <returns>True if the DocuRef data source is updatable: otherwise false</returns>
    public boolean getDocuRefAllowEdit_DC()
    {
        return (!actualEffectiveFormRun || actualEffectiveFormRun.docCursor()) && DocuRef_ds.allowEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlockClear_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the clearing of the data in the DocuView form must be prevented.
    /// </summary>
    /// <param name = "_blockClear_DC">Should the clearing of the data in the DocuView form be prevented</param>
    /// <returns>True if the clearing of the data is prevented; otherwise false</returns>
    public boolean parmBlockClear_DC(boolean _blockClear_DC = blockClear_DC)
    {
        blockClear_DC = _blockClear_DC;
        return blockClear_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the form.
    /// </summary>
    public void run()
    {
        // DocuViewForm_ApplicationSuite_Extension.init() was sometimes executed after (outer) DocuView_DC_Extension.init(), so we moved that code before run()
        origDocumentHashNumberVisible_DC = DocuValue_ds.object(fieldnum(DocuValue, DocumentHashNumber)).visible();

        next run();

        // Change the form caption if the lookup record is the DocuRef table buffer passed in args
        if (lookupRecordDocuRef_DC)
        {
            var captionGenerator = WorkflowRecordCaptionGenerator::construct(lookupRecordDocuRef_DC.refCommon());
            this.setCaption(captionGenerator.caption());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form is closed.
    /// </summary>
    public void close()
    {
        #Task
        
        next close();

        // Dispose the referenced form
        if (formRunRef_DC)
        {
            formRunRef_DC.close();
            formRunRef_DC = null;
        }

        if (this.localFormRun && this.localFormRun.name() == formStr(DocReportGlobalAttachment))
        {
            FormRun fr = this.localFormRun;
            fr.task(#taskRefresh);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onJumpRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified field.
    /// </summary>
    /// <param name = "_field">Form data object</param>
    public void onJumpRef_DC(FormDataObject _field)
    {
        blockClear_DC = true;
        _field.jumpRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRef_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocuRef table buffer becomes active.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void DocuRef_OnActivated_DC(FormDataSource _dataSource)
    {
        if (_dataSource && lookupRecordDocuRef_DC)
        {
            if (DocDocuRefHelper::isAttachmentAdmin())
            {
                _dataSource.allowEdit(true);
            }
            if (!actualRecord && !_dataSource.allowEdit())
            {
                _dataSource.allowCreate(false);
                _dataSource.allowDelete(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRef_OnQueryExecuted_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocuRef data source query has been executed.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void DocuRef_OnQueryExecuted_DC(FormDataSource _dataSource)
    {
        if (_dataSource && lookupRecordDocuRef_DC)
        {
            _dataSource.positionToRecord(lookupRecordDocuRef_DC);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuValue_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocuValue table buffer becomes active.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void DocuValue_OnActivated_DC(FormDataSource _dataSource)
    {
        // Standard shows document hash number just for CustInvoiceJour and ProjInvoiceJour table attachments while we show it also for others where this field is filled.
        if (_dataSource && !origDocumentHashNumberVisible_DC)
        {
            _dataSource.object(fieldnum(DocuValue, DocumentHashNumber)).visible(DocuValue.DocumentHashNumber != '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CategoryId_DC_OnLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the CategoryId is fired.
    /// </summary>
    public void CategoryId_DC_OnLookup_DC()
    {
        blockClear_DC = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LanguageId_DC_OnLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the LanguageId is fired. 
    /// </summary>
    public void LanguageId_DC_OnLookup_DC()
    {
        blockClear_DC = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the controls / instance members need by the related attachments feature as appropriate.
    /// </summary>
    public void clear()
    {
        boolean originalCreating = creating;

        // Skip execution at beginning of next method if blockClear=true
        if (blockClear_DC)
        {
            creating = true;
        }

        next clear();

        if (blockClear_DC)
        {
            creating = originalCreating;
            blockClear_DC = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do a research on the form when necessary, set caption of the form,
    /// disable or enable controls on the form.
    /// </summary>
    /// <param name = "actualFormRun">The form that needs research.</param>
    public void doReSearch(FormRun actualFormRun)
    {
        boolean originalLocked = locked;

        // Skip execution at beginning of next method if blockClear_DC=true
        if (blockClear_DC)
        {
            locked = true;
        }
        
        next doReSearch(actualFormRun);

        if (blockClear_DC)
        {
            locked = originalLocked;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocReportAttachmentDetail_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocReportAttachmentDetail menu button is clicked.
    /// </summary>
    public void DocReportAttachmentDetail_OnClicked_DC()
    {
        CompanyId actualCompanyId_DC = this.actualCompanyId;
        TableId actualTableId_DC = this.actualTableId();
        RecId actualRecId_DC = this.actualRecId();
        
        DictTable dictTable = new DictTable(actualTableId_DC);
        if (dictTable == null)
        {
            return;
        }

        Common testCursor = dictTable.makeRecord();

        changeCompany(actualCompanyId_DC)
        {
            select firstOnly testCursor where testCursor.RecId == actualRecId_DC;
        }
        
        if (!testCursor)
        {
            return;
        }

        Args args = new Args(formStr(DocReportAttachmentDetail));
        args.record(testCursor);
        args.lookupRecord(DocuRef);
        args.caller(this);
        args.parmEnum(showGlobalAttachmentSetting_DC);
        args.parmEnumType(enumNum(DocShowGlobalAttachmentSetting));

        // Open form instead of menu item to avoid security check. This button can always be clicked from DocuView form.
        FormRun formRun = classFactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
        formRun.detach();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>