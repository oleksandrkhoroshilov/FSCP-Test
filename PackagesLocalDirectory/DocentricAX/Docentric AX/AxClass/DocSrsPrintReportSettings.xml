<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSrsPrintReportSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocSrsPrintReportSettings
{
    DocReportTemplateId                 templateId;
    boolean                             saveToArchive;
    DocuTypeId                          saveToArchiveDocuTypeId;
    DocPrintArchiveNote                 saveToArchiveNote;
    boolean                             saveProformaToArchive;
    boolean                             suppressSuccessMsg;
    boolean                             executeOnlyData;
    RecId                               batchId, batchJobId;
    DataAreaId                          reportExecutionContextDataAreaId;
    TableId                             reportExecutionContextTableId;
    RefRecId                            reportExecutionContextTableRecId;
    MenuItemName                        reportMenuItemName;
    MenuItemType                        reportMenuItemType;
    DocPrintMgmtOriginalCopyType        originalCopyType;
    str                                 printMgmtSettingName;
    boolean                             previewBeforePrint;
    List                                attachmentRuleList;    // List<DocReportAttachmentRule (class)>
    container                           customSettings;
    guid                                printDestinationRunId;
    str                                 documentTitleOriginal;
    DocPdfAConformanceLevel             pdfAConformanceLevel;

    #define.packVersion1(1)
    #define.packVersion2(2)         // Added saveToArchiveDocuTypeId (str), previewBeforePrint (boolean) and reportAttachmentList (list).
    #define.packVersion3(3)         // Added saveToArchiveNote (str), customSettings (container).
    #define.packVersion4(4)         // Added printMgmtSettingName (str), printDestinationRunId (guid).
    #define.packVersion5(5)         // Added documentTitleOriginal (str).
    #define.packVersion6(6)         // Added pdfAConformanceLevel (enum).
    #define.currentPackVersion(7)   // Added saveProformaToArchive (boolean)
    
    #localmacro.listVersion1
        version,
        templateId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        batchId,
        batchJobId,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportMenuItemName,
        reportMenuItemType,
        originalCopyType
    #endMacro

    #localmacro.listVersion2
        version,
        templateId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        batchId,
        batchJobId,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportMenuItemName,
        reportMenuItemType,
        originalCopyType,
        previewBeforePrint,
        saveToArchiveDocuTypeId
    #endMacro

    #localmacro.listVersion3
        version,
        templateId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        batchId,
        batchJobId,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportMenuItemName,
        reportMenuItemType,
        originalCopyType,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote
    #endMacro

    #localmacro.listVersion4
        version,
        templateId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        batchId,
        batchJobId,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportMenuItemName,
        reportMenuItemType,
        originalCopyType,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printMgmtSettingName,
        printDestinationRunId
    #endMacro

    #localmacro.listVersion5
        version,
        templateId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        batchId,
        batchJobId,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportMenuItemName,
        reportMenuItemType,
        originalCopyType,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printMgmtSettingName,
        printDestinationRunId,
        documentTitleOriginal
    #endMacro

    #localmacro.listVersion6
        version,
        templateId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        batchId,
        batchJobId,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportMenuItemName,
        reportMenuItemType,
        originalCopyType,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printMgmtSettingName,
        printDestinationRunId,
        documentTitleOriginal,
        pdfAConformanceLevel
    #endMacro

    #localmacro.currentList
        version,
        templateId,
        saveToArchive,
        suppressSuccessMsg,
        executeOnlyData,
        batchId,
        batchJobId,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportMenuItemName,
        reportMenuItemType,
        originalCopyType,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printMgmtSettingName,
        printDestinationRunId,
        documentTitleOriginal,
        pdfAConformanceLevel,
        saveProformaToArchive
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container pack()
    {
        int version = #currentPackVersion;
        container attachmentRuleListContainer = conNull();
        
        if (attachmentRuleList != null)
        {
            attachmentRuleListContainer = attachmentRuleList.pack();
        }

        return [#currentList, attachmentRuleListContainer, customSettings];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean   ret = false;
        container attachmentRuleListContainer = conNull();
        int       version;
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
            
            if (version == #currentPackVersion)
            {
                [#currentList, attachmentRuleListContainer, customSettings] = _pack;
                ret = true;
            }
            else if (version == #packVersion6)
            {
                [#listVersion6, attachmentRuleListContainer, customSettings] = _pack;
                ret = true;
            }
            else if (version == #packVersion5)
            {
                [#listVersion5, attachmentRuleListContainer, customSettings] = _pack;
                ret = true;
            }
            else if (version == #packVersion4)
            {
                [#listVersion4, attachmentRuleListContainer, customSettings] = _pack;
                ret = true;
            }
            else if (version == #packVersion3)
            {
                [#listVersion3, attachmentRuleListContainer, customSettings] = _pack;
                ret = true;
            }
            else if (version == #packVersion2)
            {
                [#listVersion2, attachmentRuleListContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion1)
            {
                [#listVersion1] = _pack;
                ret = true;
            }

            if (attachmentRuleListContainer != conNull())
            {
                attachmentRuleList = List::create(attachmentRuleListContainer);
            }
            else
            {
                attachmentRuleList = null;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveDocuTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the document type used for saving to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveDocuTypeId">Print archive's document type</param>
    /// <returns>Print archive's document type</returns>
    public DocuTypeId parmSaveToArchiveDocuTypeId(DocuTypeId _saveToArchiveDocuTypeId = saveToArchiveDocuTypeId)
    {
        saveToArchiveDocuTypeId = _saveToArchiveDocuTypeId;
        return saveToArchiveDocuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the print archive note used when saving report to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveNote">Print archive note</param>
    /// <returns>Print archive note</returns>
    public DocPrintArchiveNote parmSaveToArchiveNote(DocPrintArchiveNote _saveToArchiveNote = saveToArchiveNote)
    {
        saveToArchiveNote = _saveToArchiveNote;
        return saveToArchiveNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets custom settings. This container field can contain anything, e.g. packed custom class,
    /// that can store some report specific value which can be used along report execution pipeline.
    /// </summary>
    /// <param name = "_customSettings">Custom report settings</param>
    /// <returns>Custom report settings</returns>
    public container parmCustomSettings(container _customSettings = customSettings)
    {
        customSettings = _customSettings;
        return customSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewBeforePrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the flag which specifies should the report be previewed before printing.
    /// </summary>
    /// <param name = "_previewBeforePrint">Preview before printing</param>
    /// <returns>Preview before printing</returns>
    public boolean parmPreviewBeforePrint(boolean _previewBeforePrint = previewBeforePrint)
    {
        previewBeforePrint = _previewBeforePrint;
        return previewBeforePrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAttachmentRuleList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the list which contains report attachment rules used when emailing or printing the report.
    /// </summary>
    /// <param name = "_attachmentRuleList">List[DocReportAttachmentRule (class)]</param>
    /// <returns>List[DocReportAttachmentRule (class)]</returns>
    public List parmAttachmentRuleList(List _attachmentRuleList = attachmentRuleList)
    {
        attachmentRuleList = _attachmentRuleList;
        return attachmentRuleList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalCopyType</Name>
				<Source><![CDATA[
    public DocPrintMgmtOriginalCopyType parmOriginalCopyType(DocPrintMgmtOriginalCopyType _originalCopyType = originalCopyType)
    {
        originalCopyType = _originalCopyType;
        return originalCopyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentTitleOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the report Original document title.
    /// Contains either Label ID or Label translation in the runtime report language,
    /// which is translated before Docentric pipeline starts.
    /// Label translation is presented for SalesInvoice, FreeTextInvoie and PSAQuotations.
    /// </summary>
    /// <param name = "_documentTitleOriginal">Original document title</param>
    /// <returns>Original document title</returns>
    public str parmDocumentTitleOriginal(str _documentTitleOriginal = documentTitleOriginal)
    {
        documentTitleOriginal = _documentTitleOriginal;
        return documentTitleOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMgmtSettingName</Name>
				<Source><![CDATA[
    public str parmPrintMgmtSettingName(str _printMgmtSettingName = printMgmtSettingName)
    {
        printMgmtSettingName = _printMgmtSettingName;
        return printMgmtSettingName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmReportExecutionContextDataAreaId(DataAreaId _reportExecutionContextDataAreaId = reportExecutionContextDataAreaId)
    {
        reportExecutionContextDataAreaId = _reportExecutionContextDataAreaId;
        return reportExecutionContextDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableId</Name>
				<Source><![CDATA[
    public TableId parmReportExecutionContextTableId(TableId _reportExecutionContextTableId = reportExecutionContextTableId)
    {
        reportExecutionContextTableId = _reportExecutionContextTableId;
        return reportExecutionContextTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableRecId</Name>
				<Source><![CDATA[
    public RefRecId parmReportExecutionContextTableRecId(RefRecId _reportExecutionContextTableRecId = reportExecutionContextTableRecId)
    {
        reportExecutionContextTableRecId = _reportExecutionContextTableRecId;
        return reportExecutionContextTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsOriginalDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the original built-in SSRS design be printed instead of Docentric template.
    /// </summary>
    /// <returns>True if the built-in SSRS design should be used</returns>
    public boolean printSrsOriginalDesign()
    {
        return templateId == DocConstant::BuiltInSsrsDesignPlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProperty_PrintSrsOriginalDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Resets the printSrsOriginalDesign flag.
    /// </summary>
    /// <param name = "_value">Value of this property</param>
    public void setProperty_PrintSrsOriginalDesign(boolean _value)
    {
        if (_value)
        {
            templateId = DocConstant::BuiltInSsrsDesignPlaceholder;
        }
        else
        {
            templateId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportExecutionContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report execution context record.
    /// </summary>
    /// <param name="_common">
    /// Report execution context record.
    /// </param>
    public void setReportExecutionContextRecord(Common _common)
    {
        this.parmReportExecutionContextDataAreaId(_common.DataAreaId);
        this.parmReportExecutionContextTableId(_common.TableId);
        this.parmReportExecutionContextTableRecId(_common.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportExecutionContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report execution context record.
    /// </summary>
    /// <returns>
    /// Returns report execution context record.
    /// </returns>
    public Common getReportExecutionContextRecord()
    {
        Common reportExecutionContextRecord = null;
        
        if (this.parmReportExecutionContextTableId() && this.parmReportExecutionContextTableRecId())
        {
            reportExecutionContextRecord = DocGlobalHelper::getTableRecord(
                                                this.parmReportExecutionContextTableId(),
                                                this.parmReportExecutionContextTableRecId(),
                                                this.parmReportExecutionContextDataAreaId());
        }

        return reportExecutionContextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportMenuItemName</Name>
				<Source><![CDATA[
    public MenuItemName parmReportMenuItemName(MenuItemName _reportMenuItemName = reportMenuItemName)
    {
        reportMenuItemName = _reportMenuItemName;
        return reportMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportMenuItemType</Name>
				<Source><![CDATA[
    public MenuItemType parmReportMenuItemType(MenuItemType _reportMenuItemType = reportMenuItemType)
    {
        reportMenuItemType = _reportMenuItemType;
        return reportMenuItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchId</Name>
				<Source><![CDATA[
    public RecId parmBatchId(RecId _batchId = batchId)
    {
        batchId = _batchId;
        return batchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchJobId</Name>
				<Source><![CDATA[
    public RecId parmBatchJobId(RecId _batchJobId = batchJobId)
    {
        batchJobId = _batchJobId;
        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateId</Name>
				<Source><![CDATA[
    public DocReportTemplateId parmTemplateId(DocReportTemplateId _templateId = templateId)
    {
        templateId = _templateId;
        return templateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecuteOnlyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set/Gets if only the report data and settings should be executed, without printing
    /// the report to any print destination. All report execution settings will be completed/handled
    /// (e.g. the report data source will be created, placeholders will be replaced, etc.).
    /// </summary>
    /// <param name="_executeOnlyData">
    /// Should only the report data and settings be executed.
    /// </param>
    /// <returns>
    /// True if the report data and settings only should be executed, without printing the report.
    /// </returns>
    /// <remarks>
    /// Set this flag to true if you don't want to print the report to any print destination
    /// but only to retrieve the report data and execution settings. Afterwards you can use
    /// the same completed printReportSettings() and file/email/printerPrintDestSettings()
    /// to print the report to multiple print destinations from the code,
    /// using the DocGeneratorClient or DocGeneratorServer class.
    /// </remarks>
    public boolean parmExecuteOnlyData(boolean _executeOnlyData = executeOnlyData)
    {
        executeOnlyData = _executeOnlyData;
        return executeOnlyData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuppressSuccessMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets if the success message about report execution should be suppressed.
    /// </summary>
    /// <param name="_suppressSuccessMsg">
    /// Should be the success message about printing the report suppressed.
    /// </param>
    /// <returns>
    /// True if the success message about printing the report is suppressed.
    /// </returns>
    /// <remarks>
    /// Set this flag to true if the report needs to run silently i.e. from the code
    /// without message about successful report execution.
    /// </remarks>
    public boolean parmSuppressSuccessMsg(boolean _suppressSuccessMsg = suppressSuccessMsg)
    {
        suppressSuccessMsg = _suppressSuccessMsg;
        return suppressSuccessMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchive</Name>
				<Source><![CDATA[
    public boolean parmSaveToArchive(boolean _saveToArchive = saveToArchive)
    {
        saveToArchive = _saveToArchive;
        return saveToArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>printDestinationRunId</c> parameter.
    /// </summary>
    /// <returns>
    /// The value of <c>printDestinationRunId</c> parameter.
    /// </returns>
    /// <remarks>
    /// Print Destination Run Id is a unique identifier given to each print destination run,
    /// generated by <c>SRSPrintDestinationSettingsDelegates_printReport</c>, a subscriber method
    /// for the SRSPrintDestinationSettingsDelegates.printReport delegate.
    /// This becomes a meaningful information when a report is printed to a Preconfigured Docentric
    /// print destination, which usually contains multiple print destinations.
    /// </remarks>
    public guid getPrintDestinationRunId()
    {
        return printDestinationRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationRunIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets PrintDestinationRunId (guid) as a string without braces.
    /// </summary>
    /// <returns>PrintDestinationRunId as a string</returns>
    public str getPrintDestinationRunIdStr()
    {
        return DocGlobalHelper::guid2strWithoutBraces(printDestinationRunId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintDestinationRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>printDestinationRunId</c> parameter.
    /// </summary>
    /// <param name = "_printDestinationRunId">Sets the value of <c>printDestinationRunId</c> parameter.</param>
    /// <remarks>
    /// Print Destination Run Id is a unique identifier given to each print destination run,
    /// generated by <c>SRSPrintDestinationSettingsDelegates_printReport</c>, a subscriber method
    /// for the SRSPrintDestinationSettingsDelegates.printReport delegate.
    /// This becomes a meaningful information when a report is printed to a Preconfigured Docentric
    /// print destination, which usually contains multiple print destinations.
    /// </remarks>
    public void setPrintDestinationRunId(guid _printDestinationRunId = newGuid())
    {
        printDestinationRunId = _printDestinationRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfAConformanceLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the PDF/A conformance level. 
    /// </summary>
    /// <param name = "_pdfAConformanceLevel">PDF/A conformance level</param>
    /// <returns>PDF/A conformance level</returns>
    /// <remarks>
    /// If this value is set, the output PDF document is converted to PDF/A format using the selected
    /// PDF/A conformance level. Conversion is not performed if this value is set to None.
    /// </remarks>
    public DocPdfAConformanceLevel parmPdfAConformanceLevel(DocPdfAConformanceLevel _pdfAConformanceLevel = pdfAConformanceLevel)
    {
        pdfAConformanceLevel = _pdfAConformanceLevel;
        return pdfAConformanceLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveProformaToArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a value indicating whether the report is allowed to be saved in the print archive when executed as a proforma.
    /// </summary>
    /// <param name = "_saveProformaToArchive">True to allow archiving of the report when run as a proforma; otherwise, false.</param>
    /// <returns>The current setting of whether the report is allowed to be archived when run as a proforma.</returns>
    /// <remarks>
    /// This flag is used for reports that support the proforma scenario (SalesInvoice, PurchPurchaseOrder, SalesConfirm etc.).
    /// List of supported reports can be found in the DocPrintMgmtHelper::isProformaSupported() method.
    /// </remarks>
    public boolean parmSaveProformaToArchive(boolean _saveProformaToArchive = saveProformaToArchive)
    {
        saveProformaToArchive = _saveProformaToArchive;
        return saveProformaToArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the SRS print settings
    /// </summary>
    /// <param name = "_selectedPrintDest">Currently selected print destination</param>
    /// <param name = "_printValidationErrors">Should print the validation errors</param>
    /// <returns>True/False</returns>
    public boolean validate(SRSPrintMediumType _selectedPrintDest, boolean _printValidationErrors = true)
    {
        boolean isValid = true;

        if (saveToArchiveDocuTypeId != '' 
                    && DocSrsReportRunUtil::isDocentricPrintDestination(_selectedPrintDest)
                    && (saveToArchive || _selectedPrintDest == SRSPrintMediumType::Archive_DC))
        {
            // Check if the DocuType exists.
            DocuType saveToArchiveDocuType = DocuType::find(saveToArchiveDocuTypeId);
            if (saveToArchiveDocuType.RecId == 0)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:SaveToArchiveDocuTypeNotExist", saveToArchiveDocuTypeId));
                }
            }

            // Check if the action class is set.
            else if(!saveToArchiveDocuType.ActionClassId)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:PrintArchiveDocuTypeAttachingActionClassNotSet", saveToArchiveDocuTypeId));
                }
            }

            // Check if the action class is valid.
            else if (!SysDictClass::isEqualOrSuperclass(saveToArchiveDocuType.ActionClassId, classNum(DocuActionFile)))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:PrintArchiveDocuTypeAttachingInvalidActionClass",
                                                   saveToArchiveDocuTypeId, saveToArchiveDocuType.getActionClassDescription_DC()));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>