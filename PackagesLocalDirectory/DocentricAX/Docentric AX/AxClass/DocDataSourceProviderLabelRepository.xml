<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderLabelRepository</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The class DocDataSourceProviderLabelRepository is a label repository for the DSP.
/// </summary>
public class DocDataSourceProviderLabelRepository
{
    private ERISolutionLabelRepository gerlabelRepository;
    private DocLabelResolutionStrategy labelResolutionStrategy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmGerLabelRepository</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the GER label repository.
    /// </summary>
    /// <param name = "_gerlabelRepository">An instance of the ERISolutionLabelRepository class</param>
    /// <returns>An instance of the ERISolutionLabelRepository class</returns>
    public ERISolutionLabelRepository parmGerLabelRepository(ERISolutionLabelRepository _gerlabelRepository = gerlabelRepository)
    {
        gerlabelRepository = _gerlabelRepository;
        return gerlabelRepository;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelResolutionStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the label resolution strategy.
    /// </summary>
    /// <param name = "_labelResolutionStrategy">Label resolution strategy</param>
    /// <returns>Label resolution strategy</returns>
    public DocLabelResolutionStrategy parmLabelResolutionStrategy(DocLabelResolutionStrategy _labelResolutionStrategy = labelResolutionStrategy)
    {
        labelResolutionStrategy = _labelResolutionStrategy;
        return labelResolutionStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the DocDataSourceProviderLabelRepository class.
    /// </summary>
    /// <param name = "_labelResolutionStrategy">Label resolution strategy</param>
    /// <returns>An instance of the DocDataSourceProviderLabelRepository class</returns>
    public static DocDataSourceProviderLabelRepository construct(DocLabelResolutionStrategy _labelResolutionStrategy = DocLabelResolutionStrategy::Default)
    {
        DocDataSourceProviderLabelRepository labelRepository = new DocDataSourceProviderLabelRepository();
        labelRepository.parmLabelResolutionStrategy(_labelResolutionStrategy);

        return labelRepository;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveD365FOLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the D365FO label translation for the provided Label ID in the given language, if such found.
    /// Otherwise, returns an empty string.
    /// </summary>
    /// <param name = "_labelId">Label ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label translation in the given language if found, otherwise an empty string</returns>
    public LabelType tryResolveD365FOLabel(LabelType _labelId, LanguageId _languageId)
    {
        str labelTranslation = DocLabelHelper::resolveSysLabel(_labelId, _languageId);
        if (labelTranslation == _labelId)
        {
            return '';
        }
        return labelTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveDocentricGlobalLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Docentric Global label translation for the provided Label ID in the given language, if such found.
    /// Otherwise, returns an empty string.
    /// </summary>
    /// <param name = "_labelId">Label ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label translation in the given language if found, otherwise an empty string</returns>
    public LabelType tryResolveDocentricGlobalLabel(LabelType _labelId, LanguageId _languageId)
    {
        return DocUserDefinedLabelHelper::resolveUserDefinedLabel(_labelId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveCustomFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Custom Fields label translation for the provided Label ID in the given language, if such found.
    /// Otherwise, returns an empty string.
    /// </summary>
    /// <param name = "_labelId">Label ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label translation in the given language if found, otherwise an empty string</returns>
    public LabelType tryResolveCustomFieldLabel(LabelType _labelId, LanguageId _languageId)
    {
        str labelTranslation = ''; 

        // Check if _labelId is CFL label Id (e.g. '@CFL_LABEL:ProjectValue')
        if (DocLabelHelper::getLabelIdPrefix_GER_DGL_CFL(_labelId) != DocConstantDSP::CF_LABEL_PREFIX)
        {
            return labelTranslation;
        }

        // The _labelId is in the form '@CFL_LABEL:ProductDescription'.
        LabelId labelId = DocLabelHelper::getLabelIdWithoutPrefix_GER_DGL_CFL(_labelId);

        // Get label translation.
        labelTranslation = SysCustomFieldLabelResolver::onResolveCustomFieldLabel(SysCustomFieldConstants::UserLabelFileName, labelId, DocGlobalHelper::getCultureInfo(_languageId));

        return labelTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveElectronicReportingLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the GER label translation for the provided Label ID in the given language, if such found.
    /// Otherwise, returns an empty string.
    /// Throws an exception if GER Label Repository is not set.
    /// </summary>
    /// <param name = "_labelId">Label ID without the GER prefix '@GER_LABEL:'</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label translation in the given language if found, otherwise an empty string</returns>
    public LabelType tryResolveElectronicReportingLabel(LabelType _labelId, LanguageId _languageId)
    {
        str labelTranslation = '';

        // Check if _labelId is GER label Id (e.g. '@GER_LABEL:ProjectValue')
        if (DocLabelHelper::getLabelIdPrefix_GER_DGL_CFL(_labelId) != DocConstantDSP::GER_LABEL_PREFIX)
        {
            return labelTranslation;
        }

        if (gerlabelRepository == null)
        {
            DocGlobalHelper::handleException(funcName(), 'DocDataSourceProviderLabelRepository.tryResolveElectronicReportingLabel(): GER Label Repository is not set');
        }

        try
        {
            // _labelId = @GER_LABEL:PostalAddress'
            labelTranslation = gerlabelRepository.getLabelValueInLanguage(DocLabelHelper::getLabelIdWithoutPrefix_GER_DGL_CFL(_labelId), _languageId);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), strFmt("@DocentricAX3:ErrorTranslatingGerLabel", _labelId, _languageId));
        }
        catch
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:ErrorTranslatingGerLabel", _labelId, _languageId));
        }

        return labelTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveDdspLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the label translation for the provided Label ID in the given language, if such found.
    /// Otherwise, returns an empty string.
    /// </summary>
    /// <param name = "_labelId">Label ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label translation in the given language if found, otherwise an empty string</returns>
    public LabelType resolveDdspLabel(LabelType _labelId, LanguageId _languageId)
    {
        if (labelResolutionStrategy == DocLabelResolutionStrategy::Default)
        {
            return this.resolveDdspLabel_Default(_labelId, _languageId);
        }
        else // if (labelResolutionStrategy == DocLabelResolutionStrategy::GER)
        {
            return this.resolveDdspLabel_GER(_labelId, _languageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveDdspLabel_GER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should be executed for Configurable Business Documents or ER Data Model data source generation mode.
    /// Returns the label translation for the provided Label ID in the given language, if such found.
    /// Otherwise, returns an empty string.
    /// </summary>
    /// <param name = "_labelId">Label ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label translation in the given language if found, otherwise an empty string</returns>
    public LabelType resolveDdspLabel_GER(LabelType _labelId, LanguageId _languageId)
    {
        // For ER Data Model based DDSP, only GER labels (for the MainData data section), 
        // D365FO labels (for the GeneralData data section) and Docentric Global user-defined labels can be expected.
        str labelTranslation = this.tryResolveElectronicReportingLabel(_labelId, _languageId);
        if (labelTranslation)
        {
            return labelTranslation;
        }

        labelTranslation = this.tryResolveD365FOLabel(_labelId, _languageId);
        if (labelTranslation)
        {
            return labelTranslation;
        }

        return this.tryResolveDocentricGlobalLabel(_labelId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveDdspLabel_Default</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should be executed for SSRS data source generation mode.
    /// Returns the label translation for the provided Label ID in the given language, if such found.
    /// Otherwise, returns an empty string.
    /// </summary>
    /// <param name = "_labelId">Label ID</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label translation in the given language if found, otherwise an empty string</returns>
    public LabelType resolveDdspLabel_Default(LabelType _labelId, LanguageId _languageId)
    {
        // For SSRS based DDSP, only D365FO labels, Docentric Global user-defined labels and Custom fields labels can be expected.
        str labelTranslation = this.tryResolveD365FOLabel(_labelId, _languageId);
        if (labelTranslation)
        {
            return labelTranslation;
        }

        labelTranslation = this.tryResolveDocentricGlobalLabel(_labelId, _languageId);
        if (labelTranslation)
        {
            return labelTranslation;
        }

        return this.tryResolveCustomFieldLabel(_labelId, _languageId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>