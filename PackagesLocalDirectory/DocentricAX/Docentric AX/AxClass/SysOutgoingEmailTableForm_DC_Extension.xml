<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysOutgoingEmailTableForm_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.Net.Mail;
using Docentric.AX.Email;
using Docentric.AX.Framework.Utilities;

/// <summary>
/// The class SysOutgoingEmailTableForm_DC_Extension is an extension of the form SysOutgoingEmailTable.
/// </summary>
[ExtensionOf(formStr(SysOutgoingEmailTable))]
final class SysOutgoingEmailTableForm_DC_Extension
{
    private DataAreaId companyId = curExt();  // When company is changed from GUI form is reloaded.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form receives focus.
    /// </summary>
    /// <param name = "_active">Flag indicating wheather a form has focus</param>
    public void activate(boolean _active)
    {
        next activate(_active);

        if (_active)
        {
            appl.setDefaultCompany(companyId, false);  // changes only if different then current company
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OutgoingEmail_OnInitialized_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is initialized.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void OutgoingEmail_OnInitialized_DC(FormDataSource _dataSource)
    {
        // Fix the sorting to properly show emails from newest to oldest.
        _dataSource.query().dataSourceNo(1).clearSortIndex();
        _dataSource.query().dataSourceNo(1).addSortField(fieldnum(SysOutgoingEmailTable, CreatedDateTime), SortOrder::Descending);

        _dataSource.object(fieldNum(SysOutgoingEmailTable, AccountNum_DC)).
            registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(SysOutgoingEmailTable, AccountNum_DC_OnJumpRef_DC), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AccountNum_DC_OnJumpRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified field.
    /// </summary>
    /// <param name = "_field">Form data object</param>
    public void AccountNum_DC_OnJumpRef_DC(FormDataObject _field)
    {
        if (OutgoingEmail.CompanyId_DC)
        {
            CompanyId curCompanyId = curExt();
            appl.setDefaultCompany(OutgoingEmail.CompanyId_DC, false);  // skip company change warning on child form
            
            try
            {
                _field.jumpRef();
            }
            finally
            {
                appl.setDefaultCompany(curCompanyId, false);
            }
        }
        else
        {
            _field.jumpRef();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Download_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the e-mail message.
    /// </summary>
    public void Download_DC_OnClicked_DC()
    {
        try
        {
            SysOutgoingEmailTable outgoingEmail = this.dataSource(1).cursor();
            Filename fileName = (outgoingEmail.Subject ? DocFileMngHelper::replaceInvalidCharsForFileName(outgoingEmail.Subject) : 'email') + '.eml';

            using (MailMessage mailMsg = outgoingEmail.toMailMessage())
            {
                using (MemoryStream emlStream = MailHelper::ConvertMailMessageToEml(mailMsg))
                {
                    DocFileMngHelper::sendFileToUser(emlStream, fileName);
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX2:ErrorDownloadingEML");
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:ErrorDownloadingEML");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        next init();

        FormButtonControl button = this.design().controlName(formControlStr(SysOutgoingEmailTable, ResetEmailButton)) as FormButtonControl;

        if (button)
        {
            button.registerOverrideMethod(methodStr(FormButtonControl, Clicked), formMethodStr(SysOutgoingEmailTable, ResetEmailButton_OnClicked_DC), this);
        }

        // Hide the Sender email column if exists.
        int senderCtrlId = this.controlId('OutgoingEmail_Sender');
        if (senderCtrlId)
        {
            FormStringControl senderCtrl = this.control(senderCtrlId);
            if (senderCtrl)
            {
                senderCtrl.visible(false);
            }
        }

        // Allow editing of the data source but only for certain fields.
        FormDataSource fds = this.dataSource(1);
        fds.allowEdit(true);
        QueryBuildFieldList fieldList = fds.queryBuildDataSource().fields();
        
        Set fieldIdsToEditSet = new Set(Types::Integer);
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, EmailBcc_DC));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, EmailBounceTo_DC));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, EmailCc_DC));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, EmailDeliveryReceiptCondition_DC));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, EmailReadReceiptAddress_DC));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, EmailReplyTo_DC));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, Priority));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, Recipient));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, Sender));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, SenderName));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, Subject));
        fieldIdsToEditSet.add(fieldNum(SysOutgoingEmailTable, Origin));

        for (int i = 1; i <= fieldList.fieldCount(); i++)
        {
            FieldId currentFieldId = fieldList.field(i);
            FormDataObject fdsField = fds.object(currentFieldId);
            if (fieldIdsToEditSet.in(currentFieldId))
            {
                fdsField.allowEdit(true);
            }
            else
            {
                fdsField.allowEdit(false);
            }
        }

        // The SysOutgoingEmailTable form is by default a read-only form, but we have enabled some fields in the root 
        // form data source SysOutgoingTable as editable. All other form data sources of the form must remain read-only. 
        // Therefore, we need to prevent these form data sources from being updated when the root form data source is updated.
        // We do this by overriding the ValidateWrite and Write methods for these form data sources.
        for (int i = 1; i <= this.dataSourceCount(); i++)
        {
            fds = this.dataSource(i);
            if (fds.table() == tableNum(SysOutgoingEmailTable))
            {
                continue;
            }
            
            // Override the validateWrite event on the form data source
            fds.registerOverrideMethod(methodStr(FormDataSource, validateWrite), formMethodStr(SysOutgoingEmailTable, FormDataSource_OnValidateWrite_DC), this);

            // Override the write event on the form data source
            fds.registerOverrideMethod(methodStr(FormDataSource, write), formMethodStr(SysOutgoingEmailTable, FormDataSource_OnWrite_DC), this);
        }

        // Set ViewEditMode to View.
        this.design().viewEditMode(ViewEditMode::Auto);
        this.viewEditModeHelper().setViewEditMode(ViewEditMode::View);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ResetEmailButton_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fix that grid is properly refreshed after "Restart send" multiple lines
    /// </summary>
    /// <param name = "_sender">Form button control</param>
    public void ResetEmailButton_OnClicked_DC(FormButtonControl _sender)
    {
        // Put any pre-super code here.
        _sender.clicked();  // This serves as the call to super()

        _sender.formRun().dataSource(1).research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailStatusFilter_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies a filter when the value in combobox changes.
    /// </summary>
    public void EmailStatusFilter_OnModified_DC()
    {
        FormDataSource fds = this.OutgoingEmail_ds;
        QueryBuildDataSource qbds = fds.queryBuildDataSource();

        qbds.clearRange(fieldNum(SysOutgoingEmailTable, Status));
        
        str queryRangeValue = SysOutgoingEmailTable::getEmailStatusQueryRangeValue_DC(EmailStatusFilter.selection());
        if (queryRangeValue)
        {
            qbds.addRange(fieldNum(SysOutgoingEmailTable, Status)).value(queryRangeValue);
        }

        fds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>OutgoingEmail_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is activated.
    /// </summary>
    /// <param name="_dataSource">Form data source</param>
    public void OutgoingEmail_OnActivated_DC(FormDataSource _dataSource)
    {
        SysOutgoingEmailTable sysOutgoingEmailTable = _dataSource.cursor();
        FormControl updateMsgButton = this.design(0).controlName(formControlStr(SysOutgoingEmailTable, UpdateMessageButton_DC));

        if (sysOutgoingEmailTable.Status != SysEmailStatus::Unsent &&
            sysOutgoingEmailTable.Status != SysEmailStatus::SendAttempted &&
            sysOutgoingEmailTable.Status != SysEmailStatus::Failed &&
            sysOutgoingEmailTable.Status != SysEmailStatus::Expired)
        {
            updateMsgButton.enabled(false);
        }  
        else
        {
            updateMsgButton.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormDataSource_OnValidateWrite_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current record of the specified data source before write.
    /// </summary>
    /// <param name = "_dataSource">A form data soucre</param>
    /// <returns>True</returns>
    public boolean FormDataSource_OnValidateWrite_DC(FormDataSource _dataSource)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormDataSource_OnWrite_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the current record of the specified data source to the table.
    /// </summary>
    /// <param name = "_dataSource">A form data source</param>
    public void FormDataSource_OnWrite_DC(FormDataSource _dataSource)
    {
        // Avoid writing because the specified data source should not be changed.
        // The data source is only used to display some fields.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>