<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPlaceholderProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to process the placeholders.
/// </summary>
public class DocPlaceholderProcessor
{
    protected DocReportRunContext reportRunContext;
    protected DocUserDefinedPlaceholderManager docUserDefinedPlaceholderManager;
    protected DocPlaceholderManager docPlaceholderManager;
    protected str errorMsg;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setReportRunContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report run context.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    private void setReportRunContext(DocReportRunContext _reportRunContext)
    {
        reportRunContext = _reportRunContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocUserDefinedPlaceholderManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets User defined placeholder manager.
    /// </summary>
    /// <param name = "_docUserDefinedPlaceholderManager">DocUserDefinedPlaceholderManager object</param>
    private void setDocUserDefinedPlaceholderManager(DocUserDefinedPlaceholderManager _docUserDefinedPlaceholderManager)
    {
        docUserDefinedPlaceholderManager = _docUserDefinedPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocPlaceholderManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Standard and Custom placeholder manager.
    /// </summary>
    /// <param name = "_docPlaceholderManager">DocPlaceholderManager object</param>
    private void setDocPlaceholderManager(DocPlaceholderManager _docPlaceholderManager)
    {
        docPlaceholderManager = _docPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a concatenated error message string, if placeholders in input string were not resolved successfully.
    /// </summary>
    /// <returns>An error message string if placeholders were not resolved successfully; otherwise an empty string</returns>
    public str getErrorMsg()
    {
        return errorMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creatse an instance of the DocPlaceholderProcessor class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocPlaceholderProcessor class.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_docUserDefinedPlaceholderManager">An instance of the DocUserDefinedPlaceholderManager class</param>
    /// <param name = "_docPlaceholderManager">An instance of the DocPlaceholderManager class</param>
    /// <returns>An instance of the DocPlaceholderProcessor class</returns>
    public static DocPlaceholderProcessor construct(
        DocReportRunContext _reportRunContext, 
        DocUserDefinedPlaceholderManager _docUserDefinedPlaceholderManager,
        DocPlaceholderManager _docPlaceholderManager)
    {
        if (!_reportRunContext)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", varStr(_reportRunContext)));
        }
        if (!_docUserDefinedPlaceholderManager)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", varStr(_docUserDefinedPlaceholderManager)));
        }
        if (!_docPlaceholderManager)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", varStr(_docPlaceholderManager)));
        }

        DocPlaceholderProcessor placeholderProcessor = new DocPlaceholderProcessor();

        placeholderProcessor.setReportRunContext(_reportRunContext);
        placeholderProcessor.setDocUserDefinedPlaceholderManager(_docUserDefinedPlaceholderManager);
        placeholderProcessor.setDocPlaceholderManager(_docPlaceholderManager);
               
        return placeholderProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForPrinterPrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocPlaceholderProcessor class for the resolution of placeholders 
    /// defined on the Docentric Printer print destination.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    /// <param name = "_printerPrintDestinationSettings">An instance of the DocPrintDestSettingsPrinter class</param>
    /// <returns>An instance of the DocPlaceholderProcessor class</returns>
    public static DocPlaceholderProcessor constructForPrinterPrintDestSettings(
        DocPrintReportSettings _printReportSettings, 
        DocPrintDestSettingsPrinter _printerPrintDestinationSettings)
    {
        if (!_printReportSettings)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", varStr(_printReportSettings)));
        }
        if (!_printerPrintDestinationSettings)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSetOrInvalid", varStr(_printerPrintDestinationSettings)));
        }

        // Get the active DocReportTable buffer for the current report Id
        DocReportTable docReportTable = DocReportTable::findActiveReport(_printReportSettings.parmReportId());

        // Get the flag that specifies whether the current template Id is ER-based or not
        boolean isTemplateERBased = docReportTable.isTemplateERBased(
            _printReportSettings.parmTemplateId(), _printReportSettings.parmCompanyId(), _printReportSettings.parmLanguageId());

        // Create an instance of the DocReportContext class
        DocReportRunContext reportRunContext = DocReportRunContext::construct(
            _printReportSettings, _printerPrintDestinationSettings, null, null, 0, 0, isTemplateERBased, docReportTable, null);

        // Create an instance of the DocUserDefinedPlaceholderManager class
        DocUserDefinedPlaceholderManager userDefinedPlaceholderManager = DocUserDefinedPlaceholderManager::construct(reportRunContext, _printReportSettings.parmXmlDataSourceStr());

        // Create an instance of the DocPlaceholderManager class
        DocPlaceholderManager placeholderManager = DocPlaceholderManager::construct(reportRunContext, _printReportSettings.getReportParameters());

        // Create an instance of the DocPlaceholderProcessor class
        return DocPlaceholderProcessor::construct(reportRunContext, userDefinedPlaceholderManager, placeholderManager);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the placeholders in the provided input string. Possible resolving errors 
    /// are written to errorMsg property.
    /// </summary>
    /// <param name = "_inputStr">The string in which to search for placeholders.</param>
    /// <param name = "_resolveLabels">Should labels be also resolved. D365FO and User-defined labels are supported.</param>
    /// <returns>An input string with replaced placeholders and labels.</returns>
    public str resolvePlaceholders(str _inputStr, boolean _resolveLabels = true)
    {
        errorMsg = '';  // store resolving errors

        str outputStr = _inputStr;
        int len = strLen(outputStr);
        int position = strScan(outputStr, DocConstantPlaceholder::PlaceholderStartSymbol, 1, len);
        while (position)
        {
            int infologLine = infologLine();

            DocPlaceholder docPlaceholder = null;

            int positionEnd = strScan(outputStr, DocConstantPlaceholder::PlaceholderEndSymbol, position + 1, len);

            try
            {
                if (positionEnd)
                {
                    str placeholder = subStr(outputStr, position + 1, positionEnd - position - 1);
                    str placeholderStr = DocConstantPlaceholder::PlaceholderStartSymbol + placeholder + DocConstantPlaceholder::PlaceholderEndSymbol;

                    // Resolve the placeholder no matter which kind it might be: User-defined, Custom or Standard.
                    docPlaceholder = this.resolvePlaceholderInternal(placeholder);
                    if (docPlaceholder != null)
                    {
                        // Replace the placeholder with its value.
                        outputStr = strReplace(outputStr, placeholderStr, docPlaceholder.parmValueStr());
                        position += strLen(docPlaceholder.parmValueStr());

                        continue;
                    }
                    else if (_resolveLabels)
                    {
                        // The placeholder hasn't been resolved. Try to resolve it as a Label placeholder.
                        str lblPlacedholderValue = docUserDefinedPlaceholderManager.replacePlaceholders(placeholderStr);
                        // Check if the placeholder is resolved.
                        if (strScan(lblPlacedholderValue, placeholderStr, 0, strLen(lblPlacedholderValue)) == 0)
                        {
                            // Replace the placeholder in the input string
                            outputStr = strReplace(outputStr, placeholderStr, lblPlacedholderValue);
                            position += strLen(lblPlacedholderValue);

                            continue;
                        }
                    }

                    // Placeholder hasn't been resolved, but first check if placeholder represents a valid placeholder at all.
                    // For example: 'abc@abc.com ... abc@abc.com' -> this alghoritm will recognize '@abc.com ... abc@' as a placeholder, which is not true.
                    // In this case, we should just keep scanning the input string further.
                    if (DocReportUserDefinedPlaceholder::validatePlaceholderName(placeholder))
                    {
                        // Throw exception since this was a valid placeholder but it hasn't been resolved.
                        DocGlobalHelper::handleError(strFmt("@DocentricAX4:SharePointProcessingMetadataPlaceholderNotFoundError", placeholderStr), false, '', true);
                    }

                    position = positionEnd;  // Skip replacement, but consider the last end @ as the potential start @ of the next placeholder or label.
                }
                else
                {
                    position++;
                }
            }
            catch
            {
                errorMsg += (errorMsg ? '\r\n' : '') + DocGlobalHelper::getInfoLogMessages(infologLine + 1, '', true);

                position = positionEnd;  // Skip replacement, but consider the last end @ as the potential start @ of the next placeholder or label.
            }
            finally
            {
                len = strLen(outputStr);
                position = strScan(outputStr, DocConstantPlaceholder::PlaceholderStartSymbol, position, len);
            }
        }

        return outputStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the provided placeholder. Possible resolving errors are 
    /// written to errorMsg property.
    /// </summary>
    /// <param name = "_placeholderStr">The placeholder to resolve</param>
    /// <returns>An instance of DocPlaceholder class</returns>
    public DocPlaceholder resolvePlaceholder(str _placeholderStr)
    {
        DocPlaceholder docPlaceholder = null;

        if (!_placeholderStr)
        {
            return docPlaceholder;
        }

        str placeholder = DocPlaceholderManager::removePlaceholderStartEndSymbols(_placeholderStr);
        errorMsg = '';

        int infologLine = infologLine();

        try
        {
            // Resolve the placeholder no matter which kind it might be: User-defined, Custom or Standard.
            docPlaceholder = this.resolvePlaceholderInternal(placeholder);

            // Check if the placeholder has been resolved.
            if (docPlaceholder == null)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:SharePointProcessingMetadataPlaceholderNotFoundError", _placeholderStr), false, '', true);
            }
        }
        catch
        {
            errorMsg += (errorMsg ? '\r\n' : '') + DocGlobalHelper::getInfoLogMessages(infologLine + 1, '', true);
        }

        return docPlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePlaceholderInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the provided placeholder without start and end placeholder symbol.
    /// </summary>
    /// <param name = "_placeholder">The placeholder to resolve</param>
    /// <returns>An instance of DocPlaceholder class</returns>
    private DocPlaceholder resolvePlaceholderInternal(str _placeholder)
    {
        DocPlaceholder docPlaceholder = null;

        str placeholder = _placeholder;
        str placeholderStr = DocConstantPlaceholder::PlaceholderStartSymbol + placeholder + DocConstantPlaceholder::PlaceholderEndSymbol;


        // (1) First check if the placeholder exists in the map used for caching already resolved placeholders.
        if (reportRunContext.placeholderMap().exists(placeholder))
        {
            docPlaceholder = reportRunContext.placeholderMap().lookup(placeholder);
            return docPlaceholder;
        }

        // (2) If not, try to resolve the placeholder as a User-defined placeholder.
        if (docUserDefinedPlaceholderManager.findPlaceholders(placeholderStr))
        {
            docPlaceholder = reportRunContext.getPlaceholder(placeholder);
            if (docPlaceholder == null)
            {
                // Resolve the user-defined placeholder
                str udfPlacedholderValue = docUserDefinedPlaceholderManager.replacePlaceholders(placeholderStr);
                // Check if the placeholder is resolved
                if (strScan(udfPlacedholderValue, placeholderStr, 0, strLen(udfPlacedholderValue)) > 0)
                {
                    throw Exception::Error;
                }
                docPlaceholder = reportRunContext.getPlaceholder(placeholder);
            }
            if (docPlaceholder != null)
            {
                docPlaceholder.parmPlaceholderKind(DocPlaceholderKind::UserDefinedPlaceholder);
                return docPlaceholder;
            }
        }

        // (3) If not, try to resolve the placeholder as a Custom or a Standard placeholder.
        docPlaceholder = reportRunContext.getPlaceholder(placeholder);
        if (docPlaceholder == null)
        {
            // Check if the placeholder is a Standard placeholder.
            if (DocPlaceholderManager::isStandardPlaceholder(placeholder))
            {
                // This is a Standard placeholder -> try to resolve it.
                str stdPlaceholderValue = docPlaceholderManager.replaceStdPlaceholder(placeholderStr, placeholder, false);

                // Check if the Standard placeholder is resolved.
                if (stdPlaceholderValue == placeholderStr)
                {
                    throw Exception::Error;
                }
                docPlaceholder = reportRunContext.getPlaceholder(placeholder);
            }
            if (docPlaceholder != null)
            {
                docPlaceholder.parmPlaceholderKind(DocPlaceholderKind::StandardPlaceholder);
                return docPlaceholder;
            }

            // Note that Custom placeholders cannot currently be resolved, because their values are provided only once
            // in report execution pipeline - in a custom DSP class and saved to placeholderMap that stored on the reportRunContext object.
        }

        return docPlaceholder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>