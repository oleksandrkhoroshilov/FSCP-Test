<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDBUpgrade_3_4_8</Name>
	<SourceCode>
		<Declaration><![CDATA[
using UL = Docentric.AX.Framework.Utilities;

/// <summary>
/// The DocDBUpgrade_3_4_8 class contains the upgrade script for the database.
/// </summary>
[DocDBUpgrade]
public class DocDBUpgrade_3_4_8
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>upgradeTo3_4_8_0</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrade database to version 3.4.8.0 procedure
    /// </summary>
    /// <param name = "_fromVersion">Upgrading from version</param>
    /// <param name = "_toVersion">Upgrade to version</param>
    /// <returns>True if upgrade was completed</returns>
    [DocDBUpgrade('3.4.8.0')]
    public static boolean upgradeTo3_4_8_0(DocDBVersion _fromVersion, DocDBVersion _toVersion)
    {
        str msg = '';

        DocAzureStorageAccount docAzureStorageAccount;
        KeyVaultCertificateTable keyVaultCertificateTable;
        ttsBegin;

        // Update the CompanyId field in the DocAzureStorageAccount table
        while select forupdate docAzureStorageAccount
            where docAzureStorageAccount.CompanyId == ''
        {
            switch (docAzureStorageAccount.ConnectionStringStorageType)
            {
                case DocSecretStorageType::Database:
                    docAzureStorageAccount.CompanyId = 'DAT';
                    break;

                case DocSecretStorageType::AzureKeyVault:
                    select firstonly crosscompany DataAreaId 
                        from keyVaultCertificateTable
                            where keyVaultCertificateTable.RecId == docAzureStorageAccount.KeyVaultCertificateRef;

                    docAzureStorageAccount.CompanyId = strUpr(keyVaultCertificateTable.DataAreaId);
                    break;
            }
            docAzureStorageAccount.doUpdate();
        }

        DocSecretStorageType docSecretStorageType = DocSecretStorageType::Database;
        msg += strFmt('The field %1 was set for all %2 records. If the field %3 is set to %4, the %1 field has been set to DAT, otherwise to the %1 defined in the %5 table.',
                fieldStr(DocAzureStorageAccount, CompanyId), tableStr(DocAzureStorageAccount), 
                fieldStr(DocAzureStorageAccount, ConnectionStringStorageType), enum2Str(docSecretStorageType), tableStr(KeyVaultParameters));

        if (System.String::IsNullOrEmpty(msg))
        {
            msg = 'No change in the database.';
        }

        DocUpgradeLog::log(_fromVersion, _toVersion, Exception::Info, msg);

        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>