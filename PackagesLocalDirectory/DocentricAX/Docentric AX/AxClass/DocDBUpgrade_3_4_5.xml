<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDBUpgrade_3_4_5</Name>
	<SourceCode>
		<Declaration><![CDATA[
using UL = Docentric.AX.Framework.Utilities;

/// <summary>
/// The DocDBUpgrade_3_4_5 class contains the upgrade script for the database.
/// </summary>
[DocDBUpgrade]
public class DocDBUpgrade_3_4_5
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>upgradeTo3_4_5_0</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrade database to version 3.4.5.0 procedure
    /// </summary>
    /// <param name = "_fromVersion">Upgrading from version</param>
    /// <param name = "_toVersion">Upgrade to versoin</param>
    /// <returns>True if upgrade was completed</returns>
    [DocDBUpgrade('3.4.5.0')]
    public static boolean upgradeTo3_4_5_0(DocDBVersion _fromVersion, DocDBVersion _toVersion)
    {
        str msg = '';

        ttsBegin;

        // Delete the old license subscription expiration notifier batch job.
        // It is replaced by the new automation process Docentric license subscription expiration notifier service.
        BatchJob batchJob;
        Batch batch;

        while select forupdate batchJob
            order by CreatedDateTime asc
            exists join batch 
                where batchJob.RecId == batch.BatchJobId
                   && batch.ClassNumber == classNum(DocLicenseExpirationNotifier)
        {
            SysRecurrenceData recurrenceData = batchJob.recurrenceData;
            // Check if the recurrence is set to 'No end date' and to 'Day'
            if (!(conPeek(recurrenceData, 4) == 1 && conPeek(recurrenceData, 7) == SysRecurrenceUnit::Day))
            {
                continue;
            }

            System.Object[] params = new System.Object[1]();
            params.SetValue(batchJob, 0);

            int infologLine = infologLine();
            System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
            stopWatch.Start();
            try
            {
                do
                {
                    // Reread the values of the current record
                    batchJob.reread();

                    // Check whether the batch job can be deleted
                    if (batchJob.aosValidateDelete() && batchJob.validateDelete())
                    {
                        batchJob.delete();
                        msg += strFmt('The old batch job (%1) was successfully deleted.', batchJob.Caption);
                        break;
                    }

                    // Delay the processing by 2 seconds
                    System.Threading.Thread::Sleep(2000);
                }
                // Retry to delete the batch job within the 2 minutes
                while (stopWatch.ElapsedMilliseconds < 120000);
            }
            finally
            {
                stopWatch.Stop();
                infolog.clear(infologLine);
            }
            break;
        }

        if (System.String::IsNullOrEmpty(msg))
        {
            msg = 'No change in the database.';
        }

        DocUpgradeLog::log(_fromVersion, _toVersion, Exception::Info, msg);

        ttsCommit;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>