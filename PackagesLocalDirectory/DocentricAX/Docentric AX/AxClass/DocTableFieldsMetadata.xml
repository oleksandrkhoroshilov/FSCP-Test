<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTableFieldsMetadata</Name>
	<SourceCode>
		<Declaration><![CDATA[
using MM = Microsoft.Dynamics.AX.Metadata.MetaModel;
using MS = Microsoft.Dynamics.Ax.Xpp.MetadataSupport;
using MX = Microsoft.Dynamics.Ax.Xpp.MetadataExtensions;
using System.Collections;

/// <summary>
/// A helper class for retrieving Extension and Custom table fields metadata.
/// </summary>
class DocTableFieldsMetadata
{
    protected TableName      tableName;
    
    protected Set            customFieldNameSet;           // Set(fieldName (str)) - contains Custom field names.
    protected Map            customFieldTypeMap;           // Map(fieldName (str), SysCustomFieldFieldType (enum)) - contains pairs: Customr field name and field data type.
    protected Map            customFieldLabelIdMap;        // Map(fieldName (str), fieldLabelId (str)) - contains pairs: Custom field name and field label ID.
    protected Map            customFieldHelpTextIdMap;     // Map(fieldName (str), fieldHelpTextId (str)) - contains pairs: Custom field name and field help text ID.

    protected Set            extensionFieldNameSet;        // Set(fieldName (str)) - contains Extension field names.


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name = "_tableName">The name of the table that Custom or Extension fields metadata is being collected from.</param>
    protected void new(TableName _tableName)
    {
        tableName = _tableName;
        customFieldNameSet = null;
        customFieldTypeMap = null;
        customFieldLabelIdMap = null;
        customFieldHelpTextIdMap = null;
        extensionFieldNameSet = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the table that Custom or Extension fields metadata is being collected from.
    /// </summary>
    /// <returns>Table name</returns>
    public TableName tableName()
    {
        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the TableId of the table that Custom or Extension fields metadata is being collected from.
    /// </summary>
    /// <returns>TableId</returns>
    public TableId tableId()
    {
        return tableName2Id(tableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>customFieldNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Custom fields name.
    /// </summary>
    /// <returns>Set with Custom field names: Set(fieldName (str))</returns>
    public Set customFieldNames()
    {
        if (customFieldNameSet == null)
        {
            this.retrieveCustomFieldsMetadata();
        }

        return customFieldNameSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customFieldDataTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Custom field data types.
    /// </summary>
    /// <returns>Map with Custom field names and data types: Map(fieldName (str), SysCustomFieldFieldType (enum))</returns>
    public Map customFieldDataTypes()
    {
        if (customFieldTypeMap == null)
        {
            this.retrieveCustomFieldsMetadata();
        }

        return customFieldTypeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customFieldLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Custom field labels.
    /// </summary>
    /// <returns>Map with Custom field names and labels: Map(fieldName (str), fieldLabelId (str))</returns>
    public Map customFieldLabels()
    {
        if (customFieldLabelIdMap == null)
        {
            this.retrieveCustomFieldsMetadata();
        }

        return customFieldLabelIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customFieldHelpTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Custom field help texts.
    /// </summary>
    /// <returns>Map with Custom field names and help texts: Map(fieldName (str), fieldHelpTextId (str))</returns>
    public Map customFieldHelpTexts()
    {
        if (customFieldHelpTextIdMap == null)
        {
            this.retrieveCustomFieldsMetadata();
        }

        return customFieldHelpTextIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extensionFieldNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Extension fields name.
    /// </summary>
    /// <returns>Set with Extension field names: Set(fieldName (str))</returns>
    public Set extensionFieldNames()
    {
        if (extensionFieldNameSet == null)
        {
            this.retrieveExtensionFieldsMetadata();
        }

        return extensionFieldNameSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCustomFieldsMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Custom fields metadata.
    /// </summary>
    protected void retrieveCustomFieldsMetadata()
    {
        customFieldNameSet = new Set(Types::String);
        customFieldTypeMap = new Map(Types::String, Types::Enum);
        customFieldLabelIdMap = new Map(Types::String, Types::String);
        customFieldHelpTextIdMap = new Map(Types::String, Types::String);

        try
        {
            MX.ITableExtensionManager tableExtensionManager = MX.TableExtensionManagerFactory::CreateExtensionManager();
            MX.TableExtensionBuild tableExtension = tableExtensionManager == null ? null :
                                                    tableExtensionManager.GetRuntimeExtension(tableName, SysCustomFieldConstants::ExtensionName);
        
            if (tableExtension != null)
            {
                var fields = tableExtension.Fields ? tableExtension.Fields.GetEnumerator() : null;
            
                while (fields != null && fields.MoveNext())
                {
                    MM.AxTableField field = fields.get_Current().Definition;
                    str fieldName = field.Name;

                    // -- Add the custom field name to customFieldNameSet.
                    customFieldNameSet.add(fieldName);
                    
                    // -- Add the custom field type to customFieldTypeMap.
                    SysCustomFieldFieldType fieldType = DocTableFieldsMetadata::getCustomFieldType(field);
                    customFieldTypeMap.insert(fieldName, fieldType);

                    // -- Add the custom field label ID to customFieldLabelIdMap.
                    str fieldLabelId = SysCustomFieldLabels::removeLabelFileFromLabelId(field.Label);
                    customFieldLabelIdMap.insert(fieldName, fieldLabelId);

                    // -- Add custom field help text ID to customFieldHelpTextIdMap.
                    str fieldHelpTextId = SysCustomFieldLabels::removeLabelFileFromLabelId(field.HelpText);
                    customFieldHelpTextIdMap.insert(fieldName, fieldHelpTextId);
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt('Error while retrieving Custom fields metadata for the %1 table', tableName));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Error while retrieving Custom fields metadata for the %1 table', tableName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveExtensionFieldsMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Extension fields metadata.
    /// </summary>
    protected void retrieveExtensionFieldsMetadata()
    {
        extensionFieldNameSet = new Set(Types::String);

        try
        {
            // First get the list of all Custom fields on this table.
            // We need this because the tableExtension.Fields collection below will contain both the Extension and Custom fields,
            // so we need to be able to skip the Custom fields when preparing the list of Extension fields.
            this.retrieveCustomFieldsMetadata();
            
            // Get all table extensions
            IEnumerable tableExtensions = MS::GetTableExtensionsForTable(tableName);
            IEnumerator extensionsEnumerator = tableExtensions.GetEnumerator();
            while (extensionsEnumerator.MoveNext())
            {
                // Iterate through all table Extensions in the collection,
                // but skip Docentric extensions (name ends with '_DR')
                MM.AxTableExtension tableExtension = extensionsEnumerator.Current;
                if (strEndsWith(tableExtension.Name, '_DR'))
                {
                    continue;
                }
                
                // For the given table Extension in the collection, get all the fields.
                var fields = tableExtension.Fields ? tableExtension.Fields.GetEnumerator() : null;
            
                while (fields != null && fields.MoveNext())
                {
                    MM.AxTableField field = fields.get_Current();
                    str fieldName = field.Name;

                    // Skip the fields that exist among the Custom fields
                    if (customFieldNameSet.in(fieldName))
                    {
                        continue;
                    }
                        
                    // Add the extension field name to extensionFieldNameSet.
                    extensionFieldNameSet.add(fieldName);
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt('Error while retrieving Extension fields metadata for the %1 table', tableName));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Error while retrieving Extension fields metadata for the %1 table', tableName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomFieldType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the given custom field object.
    /// </summary>
    /// <param name = "_tableField">The custom field object</param>
    /// <returns>The <c>SysCustomFieldFieldType</c> type of the given field object</returns>
    public static SysCustomFieldFieldType getCustomFieldType(MM.AxTableField _tableField)
    {
        if (_tableField is MM.AxTableFieldString)
        {
            MM.AxTableFieldString strField = _tableField as MM.AxTableFieldString;

            if (strField.ExtendedDataType == extendedTypeStr(SysCustomFieldPicklistValue))
            {
                return SysCustomFieldFieldType::Picklist;
            }

            return SysCustomFieldFieldType::String;
        }

        if (_tableField is MM.AxTableFieldInt64)
        {
            return SysCustomFieldFieldType::Integer;
        }

        if (_tableField is MM.AxTableFieldUtcDateTime)
        {
            return SysCustomFieldFieldType::DateTime;
        }

        if (_tableField is MM.AxTableFieldReal)
        {
            return SysCustomFieldFieldType::Real;
        }

        if (_tableField is MM.AxTableFieldEnum)
        {
            MM.AxTableFieldEnum enumField = _tableField;

            if (enumField.EnumType == enumStr(NoYes))
            {
                return SysCustomFieldFieldType::Boolean;
            }
        }

        if (_tableField is MM.AxTableFieldDate)
        {
            return SysCustomFieldFieldType::Date;
        }

        return SysCustomFieldFieldType::Undefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an DocTableFieldsMetadata object instance.
    /// </summary>
    /// <param name = "_tableName">The name of the table that Custom or Extension fields metadata is being collected from.</param>
    /// <returns>Instanced DocTableFieldsMetadata object</returns>
    public static DocTableFieldsMetadata construct(TableName _tableName)
    {
        DocTableFieldsMetadata tableFieldsMetadata = new DocTableFieldsMetadata(_tableName);
        return tableFieldsMetadata;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>