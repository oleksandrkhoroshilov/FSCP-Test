<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLicenseInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Licensing;

/// <summary>
/// The DocLicenseInfo class contains the license information.
/// </summary>
public class DocLicenseInfo implements SysPackable
{
    str                         serialNumber;
    str                         name;
    str                         code;
    str                         details;
    int                         designersCount;
    int                         serversCount;
    str                         holderName;
    str                         holderAddress;
    date                        issuedDate;
    date                        validStartDate;
    date                        validEndDate;
    date                        subscriptionStartDate;
    date                        subscriptionEndDate;
    DocReportParamLicenseType   licenseType;
    str                         licenseErrorMessage;
    DocAxLicenseStatus          licenseStatus;


    #define.packVersion(1)
    #localmacro.currentList
        version,
        serialNumber,
        name,
        code,
        details,
        designersCount,
        serversCount,
        holderName,
        holderAddress,
        issuedDate,
        validStartDate,
        validEndDate,
        subscriptionStartDate,
        subscriptionEndDate,
        licenseType,
        licenseErrorMessage,
        licenseStatus
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container pack()
    {
        int version = #packVersion;
    
        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license code.
    /// </summary>
    /// <param name = "_code">The license code</param>
    /// <returns>The license code</returns>
    public str parmCode(str _code = code)
    {
        code = _code;
        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDesignersCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the designer count.
    /// </summary>
    /// <param name = "_designersCount">The designer count</param>
    /// <returns>The designer count</returns>
    public int parmDesignersCount(int _designersCount = designersCount)
    {
        designersCount = _designersCount;
        return designersCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServersCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the server count.
    /// </summary>
    /// <param name = "_serversCount">The server count</param>
    /// <returns>The server count</returns>
    public int parmServersCount(int _serversCount = serversCount)
    {
        serversCount = _serversCount;
        return serversCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets a license details.
    /// </summary>
    /// <param name = "_details">A license details</param>
    /// <returns>A license details</returns>
    public str parmDetails(str _details = details)
    {
        details = _details;
        return details;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHolderAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license holder address.
    /// </summary>
    /// <param name = "_holderAddress">The license holder address</param>
    /// <returns>A license holder address</returns>
    public str parmHolderAddress(str _holderAddress = holderAddress)
    {
        holderAddress = _holderAddress;
        return holderAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHolderName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license holder.
    /// </summary>
    /// <param name = "_holderName">The license holder</param>
    /// <returns>The license holder</returns>
    public str parmHolderName(str _holderName = holderName)
    {
        holderName = _holderName;
        return holderName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIssuedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license issue date.
    /// </summary>
    /// <param name = "_issuedDate">The license issue date</param>
    /// <returns>The license issue date</returns>
    public date parmIssuedDate(date _issuedDate = issuedDate)
    {
        issuedDate = _issuedDate;
        return issuedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicenseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license type.
    /// </summary>
    /// <param name = "_licenseType">The license type</param>
    /// <returns>The license type</returns>
    public DocReportParamLicenseType parmLicenseType(DocReportParamLicenseType _licenseType = licenseType)
    {
        licenseType = _licenseType;
        return licenseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license name.
    /// </summary>
    /// <param name = "_name">The license name</param>
    /// <returns>The license name</returns>
    public str parmName(str _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license serial number.
    /// </summary>
    /// <param name = "_serialNumber">The license serial number</param>
    /// <returns>The license serial number</returns>
    public str parmSerialNumber(str _serialNumber = serialNumber)
    {
        serialNumber = _serialNumber;
        return serialNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscriptionStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the subscription start date.
    /// </summary>
    /// <param name = "_subscriptionStartDate">The subscription start date</param>
    /// <returns>The subscription start date</returns>
    public date parmSubscriptionStartDate(date _subscriptionStartDate = subscriptionStartDate)
    {
        subscriptionStartDate = _subscriptionStartDate;
        return subscriptionStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscriptionEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the subscription end date.
    /// </summary>
    /// <param name = "_subscriptionEndDate">The subscription end date</param>
    /// <returns>The subscription end date</returns>
    public date parmSubscriptionEndDate(date _subscriptionEndDate = subscriptionEndDate)
    {
        subscriptionEndDate = _subscriptionEndDate;
        return subscriptionEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license start date.
    /// </summary>
    /// <param name = "_validStartDate">The license start date</param>
    /// <returns>The license start date</returns>
    public date parmValidStartDate(date _validStartDate = validStartDate)
    {
        validStartDate = _validStartDate;
        return validStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license expiration date.
    /// </summary>
    /// <param name = "_validEndDate">The license expiration date</param>
    /// <returns>The license expiration date</returns>
    public date parmValidEndDate(date _validEndDate = validEndDate)
    {
        validEndDate = _validEndDate;
        return validEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicenseErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license error message.
    /// </summary>
    /// <param name = "_licenseErrorMessage">The license error message</param>
    /// <returns>The license error message</returns>
    public str parmLicenseErrorMessage(str _licenseErrorMessage = licenseErrorMessage)
    {
        licenseErrorMessage = _licenseErrorMessage;
        return licenseErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicenseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license status.
    /// </summary>
    /// <param name = "_licenseStatus">The license status</param>
    /// <returns>The license status</returns>
    public DocAxLicenseStatus parmLicenseStatus(DocAxLicenseStatus _licenseStatus = licenseStatus)
    {
        licenseStatus = _licenseStatus;
        return licenseStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean ret = false;
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            int version = conPeek(_pack, 1);
    
            if (version == #packVersion)
            {
                [#currentList] = _pack;
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFreeEditionLicenseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the DocLicenseInfo object with the Free Edition license type.
    /// </summary>
    /// <returns>An instance of the DocLicenseInfo class with the Free Edition license type</returns>
    public static DocLicenseInfo constructFreeEditionLicenseType()
    {
        DocLicenseInfo docLicenseInfo = new DocLicenseInfo();

        // LicenseType.
        docLicenseInfo.parmLicenseType(DocReportParamLicenseType::FreeEdition);
        // IssuedDate.
        docLicenseInfo.parmIssuedDate(dateNull());
        // SubscriptionEndDate.
        docLicenseInfo.parmSubscriptionEndDate(dateNull());
        // SubscriptionStartDate.
        docLicenseInfo.parmSubscriptionStartDate(dateNull());
        // ValidEndDate.
        docLicenseInfo.parmValidEndDate(dateNull());
        // ValidStartDate.
        docLicenseInfo.parmValidStartDate(dateNull());

        return docLicenseInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the DocLicenseInfo object.
    /// </summary>
    /// <returns>An instance of the DocLicenseInfo class</returns>
    public static DocLicenseInfo construct()
    {
        DocLicenseInfo docLicenseInfo = DocLicenseInfo::constructFreeEditionLicenseType();

        DocAxLicenseInfo licenseInfo = null;
        try
        {
            // License object in .NET is constructed by invoking DocInstallation::getLicense().
            licenseInfo = DocAxLicenseManager::LicenseInfo;
            // Note that all 3 properties DocAxLicenseManager::LicenseInfo, DocAxLicenseManager::LicenseStatus and DocAxLicenseManager::LicenseErrorMessage
            // are set at the same time, and it's possible to happen that licenseInfo is null while LicenseStatus == LicenseInvalid.
            docLicenseInfo.parmLicenseStatus(DocAxLicenseManager::LicenseStatus);
            docLicenseInfo.parmLicenseErrorMessage(DocAxLicenseManager::LicenseErrorMessage);
        }
        catch (Exception::CLRError)
        {
            // It should never happen. But if happens, don't throw exception and act as we deal with no license (Free Edition).
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:FailedToGetLicenseInfo");
        }

        if (licenseInfo == null)
        {
            // License is not found or unexpected error occurs.
            return docLicenseInfo;
        }
        
        // License is found.
        docLicenseInfo.parmCode(licenseInfo.Code);
        docLicenseInfo.parmDetails(licenseInfo.Details);
        docLicenseInfo.parmHolderAddress(licenseInfo.HolderAddress);
        docLicenseInfo.parmHolderName(licenseInfo.HolderName);
        docLicenseInfo.parmName(licenseInfo.Name);
        docLicenseInfo.parmSerialNumber(licenseInfo.Id);

        // LicenseType.
        DocReportParamLicenseType docLicenseType;
        switch (licenseInfo.Type)
        {
            case DocAxLicenseType::Evaluation:
                docLicenseType = DocReportParamLicenseType::Trial;
                break;

            case DocAxLicenseType::Production:
                docLicenseType = DocReportParamLicenseType::Production;
                break;
                
            case DocAxLicenseType::Partner:
                docLicenseType = DocReportParamLicenseType::Partner;
                break;

            case DocAxLicenseType::FreeEditionWithPaidSupport:
                docLicenseType = DocReportParamLicenseType::FreeEditionWithPaidSupport;
                break;

            /* OBSOLETE: Test, Development */
            case DocAxLicenseType::Test:  // Mapped to Production
                docLicenseType = DocReportParamLicenseType::Test;
                break;

            case DocAxLicenseType::Development:  // Mapped to Partner
                docLicenseType = DocReportParamLicenseType::Development;
                break;

            default:
                DocGlobalHelper::handleException(funcName(), 'Unsupported license type');
        }

        docLicenseInfo.parmLicenseType(docLicenseType);

        // IssuedDate.
        docLicenseInfo.parmIssuedDate(licenseInfo.IssuedDate);
            
        // SubscriptionEndDate.
        docLicenseInfo.parmSubscriptionEndDate(licenseInfo.SubscriptionEndDate);
            
        // SubscriptionStartDate.
        docLicenseInfo.parmSubscriptionStartDate(licenseInfo.SubscriptionStartDate);
            
        // ValidEndDate.
        if (CLRInterop::isNull(licenseInfo.ValidEndDate))
        {
            docLicenseInfo.parmValidEndDate(dateMax());
        }
        else
        {
            docLicenseInfo.parmValidEndDate(licenseInfo.ValidEndDate.get_Value());
        }

        // ValidStartDate.
        if (CLRInterop::isNull(licenseInfo.ValidStartDate))
        {
            docLicenseInfo.parmValidStartDate(dateNull());
        }
        else
        {
            docLicenseInfo.parmValidStartDate(licenseInfo.ValidStartDate.get_Value());
        }
       
        licenseInfo = null;
    
        return docLicenseInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>