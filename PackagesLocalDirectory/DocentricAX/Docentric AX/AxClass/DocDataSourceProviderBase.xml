<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class DocDataSourceProviderBase is a base class used for generating the DDSP file.
/// </summary>
abstract class DocDataSourceProviderBase implements SysPackable
{
    XmlElement   xmlDsPackageRootElement;
    XmlElement   xmlDesignInfoRootElement;
    XmlElement   xmlSystemInfoRootElement;
    XmlElement   xmlLabelsInfoRootElement;
    XmlElement   xmlDsPackageDataSectionsElement;
    XmlElement   xmlGeneralDataDataElement, xmlGeneralDataSchemaElement;
    XmlElement   xmlMainDataDataElement, xmlMainDataSchemaElement;
    XmlElement   xmlParametersDataElement, xmlParametersSchemaElement;

    DocXmlRecordBuilder                        recordBuilderMainData;
    DocXmlRecordBuilder                        recordBuilderGeneralData;
    DocXmlRecordBuilder                        recordBuilderParameters;

    DocXmlRecordBuildingContext                commonRecordBuildingContext;

    DocDataSourceProviderParams                params;
    DocDataSourceProviderParamsMailMerge       paramsMailMerge;
    DocDataSourceProviderParamsReporting       paramsReporting;

    DocFlavour                                 flavour;
    DocReportType                              reportType;

    XmlDocument                                xmlDataSource;
    str                                        xmlDataSourceStr;
    DocDataSourceProviderLabelRepository       labelRepository;


    #ISOCountryRegionCodes


    #define.packVersion(1)
    #localmacro.currentList
        version,
        flavour,
        reportType,
        xmlDataSourceStr
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to add additional data such as data fields,
    /// display methods or even additional data records to the adding record.
    /// </summary>
    /// <param name="_addingRecord">
    /// Adding data record based on the currently selected record. Use this object to
    /// add additional data.
    /// </param>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common,
                                                         QueryBuildDataSource _qbds)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAddingQbdsField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to handle a particular table buffer's (_common) field of
    /// the currently processed query data source (_qbds) in your own way, e.g. to add some additional
    /// related info. Return true if you want to skip adding of this field in the standard way.
    /// </summary>
    /// <param name = "_fieldName">Adding table buffer field from the currently selected record (_common)</param>
    /// <param name="_addingRecord">
    /// Adding data record based on the currently selected record (_common). Use this object to add
    /// the provided field, e.g. _addingRecord.addField(fieldName), or to add additional data.
    /// </param>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    /// <returns>True if you want to skip adding the given field in the standard way</returns>
    protected boolean handleAddingQbdsField(FieldName _fieldName, DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAllFieldsFromQbds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all the fields from the specified query data source to the specified data record.
    /// </summary>
    /// <param name = "_record">The current data record</param>
    /// <param name = "_qbds">The query data source</param>
    /// <param name = "_dataSetIncludedFieldsMap">Map with included fields</param>
    /// <param name = "_dataSetIncludedMethodsMap">Map with included display methods</param>
    protected void addAllFieldsFromQbds(DocXmlRecord _record, QueryBuildDataSource _qbds,
                                        Map _dataSetIncludedFieldsMap = null, Map _dataSetIncludedMethodsMap = null)
    {
        QueryBuildFieldList     qbdsFields;
        FieldId                 fieldId;
        int                     qbdsFieldCount;
        Counter                 j;
        SysDictTable            sysDictTable;
        Set                     methodSet;
        SetEnumerator           enumerator;
        SysDictMethod           sysDictMethod;
        str                     aggFieldName, aggFieldLabel;
        SysDictField            sysDictField;
        Common                  commonDs;
    
    
        str resolveLabel(str _labelId)
        {
            str label;
    
            label = DocLabelHelper::resolveSysLabel(_labelId, this.parmParams().parmDsLanguageId());
    
            return label;
        }
    
    
        commonDs = _record.getCommon();
        if (!commonDs)
        {
            // This is a table from the query data source with outer join and it's empty.
            // In case that this is a run-time data source generation, don't add any field or display method.
            if (this.isRuntime())
            {
                return;
            }
        }
    
        sysDictTable = this.commonRecordBuildingContext().getSysDictTable(_qbds.table());
    
        // Give a chance to the inherited class to store some values from the currently selected query record.
        this.onSelectedQueryRecord(commonDs, _qbds);
    
    
        //-- Add fields.
        qbdsFields = _qbds.fields();
        qbdsFieldCount = qbdsFields.fieldCount();
        for (j = 1; j <= qbdsFieldCount; j++)
        {
            fieldId = qbdsFields.field(j);
            sysDictField = this.commonRecordBuildingContext().getSysDictField(_qbds.table(), fieldId);

            if (this.handleAddingQbdsField(sysDictField.name(), _record, commonDs, _qbds))
            {
                // Continue if the current field is handled in the custom way.
                continue;
            }

            if (!DocReportingHelper::isIncludedInDataSet(_dataSetIncludedFieldsMap, sysDictTable.name(), sysDictField.name()))
            {
                // Continue if the current field is not included in the report data set.
                continue;
            }

            switch (qbdsFields.fieldKind(j))
            {
                case SelectionField::Avg:
                    aggFieldLabel = resolveLabel(sysDictField.labelLabel());
                    aggFieldLabel = resolveLabel(literalStr("@DocentricAX:AvgOf")) + ' ' + aggFieldLabel;
                    aggFieldName = 'AvgOf' + sysDictField.name();
                    _record.addCalculatedField(aggFieldName, commonDs.(fieldId), aggFieldLabel);
                    break;
    
                case SelectionField::Count:
                    aggFieldLabel = resolveLabel(sysDictField.labelLabel());
                    aggFieldLabel = resolveLabel(literalStr("@DocentricAX:CountOf")) + ' ' + aggFieldLabel;
                    aggFieldName = 'CountOf' + sysDictField.name();
                    _record.addCalculatedField(aggFieldName, commonDs.(fieldId), aggFieldLabel);
                    break;
    
                case SelectionField::Max:
                    aggFieldLabel = resolveLabel(sysDictField.labelLabel());
                    aggFieldLabel = resolveLabel(literalStr("@DocentricAX:MaxOf")) + ' ' + aggFieldLabel;
                    aggFieldName = 'MaxOf' + sysDictField.name();
                    _record.addCalculatedField(aggFieldName, commonDs.(fieldId), aggFieldLabel);
                    break;
    
                case SelectionField::Min:
                    aggFieldLabel = resolveLabel(sysDictField.labelLabel());
                    aggFieldLabel = resolveLabel(literalStr("@DocentricAX:MinOf")) + ' ' + aggFieldLabel;
                    aggFieldName = 'MinOf' + sysDictField.name();
                    _record.addCalculatedField(aggFieldName, commonDs.(fieldId), aggFieldLabel);
                    break;
    
                case SelectionField::Sum:
                    aggFieldLabel = resolveLabel(sysDictField.labelLabel());
                    aggFieldLabel = resolveLabel(literalStr("@DocentricAX:SumOf")) + ' ' + aggFieldLabel;
                    aggFieldName = 'SumOf' + sysDictField.name();
                    _record.addCalculatedField(aggFieldName, commonDs.(fieldId), aggFieldLabel);
                    break;
    
                case SelectionField::ComputedColumn:
                    try
                    {
                        _record.addField(sysDictField.name());
                    }
                    catch
                    {
                        exceptionTextFallThrough();
                    }
                    break;
    
                default: // SelectionField::Database
                    _record.addField(sysDictField.name());
                    break;
            }
        }
    

        //-- Add all display methods or only provided.
        // Note that all the fields from commonDs have been already reread.
        // This is important if display methods need fields that are not included in the query definition.
        
        // Include all display methods in the DDSP.
        if (this.parmParams().parmIncludeDisplayMethodsInDs())
        {
            methodSet = sysDictTable.methods(true, false, true);
            enumerator = methodSet.getEnumerator();
            while (enumerator.moveNext())
            {
                sysDictMethod = enumerator.current();
    
                // Consider only display methods.
                if (sysDictMethod.displayType() != DisplayFunctionType::Get)
                {
                    continue;
                }

                // Skip all display methods we are not sure that we know how to handle.
                // This kind of methods should be added individually, in a custom DSP class.
                Types methodReturnType = sysDictMethod.returnType();
                if (methodReturnType == Types::Container || methodReturnType == Types::Class ||
                    methodReturnType == Types::Record || methodReturnType == Types::BLOB)
                {
                    continue;
                }
                
                // Add display method but swallow exception if occurred.
                // Exception might occur if an adding display method is not parameterless.
                try
                {
                    _record.addDisplayMethod(sysDictMethod.name());
                }
                catch
                {
                    infolog.cut(infologLine(), infologLine());
                }
            }
        }

        // Include only report defined display methods in the DDSP.
        else if (_dataSetIncludedMethodsMap != null && _dataSetIncludedMethodsMap.exists(sysDictTable.name()))
        {
            Map displayMethods = _dataSetIncludedMethodsMap.lookup(sysDictTable.name());
            MapEnumerator displayMethodsMapEnum = displayMethods.getEnumerator();
            while (displayMethodsMapEnum.moveNext())
            {
                str displayMethodName = displayMethodsMapEnum.currentKey();

                // Add display method but swallow exception if occurred.
                // For example, the CustBaseData report uses the non-display method with parameters: editContactPersonName().
                // We cannot automate adding such methods.
                try
                {
                    _record.addDisplayMethod(displayMethodName);
                }
                catch
                {
                    infolog.cut(infologLine(), infologLine());
                }
            }
        }
        

        // Give a chance to the inherited class to add additional data for the adding query record.
        this.addAdditionalDataFieldsForQueryRecord(_record, commonDs, _qbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional labels to the report/document data source.
    /// </summary>
    /// <param name="_labelMap">
    /// Label map: Map(labelCode, labelName).
    /// When adding labels to label map, use literalStr(labelCode), for example:
    /// _labelMap.insert(literalStr("@TRX2666"), 'Booking request form');
    /// </param>
    protected void addCustomLabels(Map _labelMap)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDesignInfoSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the DesignInfo section.
    /// </summary>
    private void addDesignInfoSection()
    {
        XmlElement          xmlElemLanguages, xmlElem;
        XmlAttribute        xmlAtt;
        SetEnumerator       previewLanguageSetEnum;
        LanguageId          previewLanguage;
    
    
        // Skip creating DesignInfo section if this is the run-time.
        if (this.isRuntime())
        {
            return;
        }
    
        /*
        <dsp:design>
          <dsp:languages>
            <dsp:language dsp:value="en-us"/>
            <dsp:language dsp:value="sl-si"/>
          </dsp:languages>
        </dsp:design>
        */
    
        // Create XML Languages element (dsp:languages)
        xmlElemLanguages = DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, 'languages');
        xmlDesignInfoRootElement.appendChild(xmlElemLanguages);
    
        previewLanguageSetEnum = this.parmParams().getPreviewLanguageSet().getEnumerator();
        while (previewLanguageSetEnum.moveNext())
        {
            previewLanguage = previewLanguageSetEnum.current();
    
            // Create XML Language element (dsp:language)
            xmlElem = DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, 'language');
            xmlElemLanguages.appendChild(xmlElem);
    
            // Create XML value attribute (dsp:value)
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'value');
            xmlAtt.value(previewLanguage);
            xmlElem.setAttributeNode(xmlAtt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the GeneralData data section.
    /// </summary>
    private void addGeneralDataSection()
    {
        str errorMsg = strFmt('Error during execution of the addGeneralDataSectionXXX() method of the DSP class: %1', classId2Name(classIdGet(this)));

        this.addGeneralDataSectionPre();
    
        try
        {
            // Let derived class to fill record builder
            // with specific General Data for design/populating document/report.
            this.addGeneralDataSectionBase(recordBuilderGeneralData);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errorMsg);
        }
    
        this.addGeneralDataSectionPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data to GeneralData data section of the report/document data source.
    /// </summary>
    /// <param name="_recordBuilderGeneralData">Record builder of the GeneralData data section.</param>
    /// <remarks>
    /// Extend this method in order to add additional data (nodes) to the GeneralData section
    /// by calling the super(_recordBuilderGeneralData) first. Adding node will be on the same
    /// level as the CurrentCompany, CurrentWorker or Misc node.
    /// Override this method if you want to completely change the default data in the GeneralData section
    /// of the report/document data source. Use _recordBuilderGeneralData provided as a parameter
    /// to add records and fields in your own way.
    /// </remarks>
    protected void addGeneralDataSectionBase(DocXmlRecordBuilder _recordBuilderGeneralData)
    {
        CompanyInfo     currentCompanyInfo;
        HcmWorker       currentWorker;
        DocXmlRecord    currentCompanyDataRecord, currentWorkerDataRecord, miscDataRecord;
    
        // Gets the current company and worker records.
        currentCompanyInfo = CompanyInfo::findDataArea(this.parmParams().parmCompanyId());
        currentWorker      = HcmWorker::find(this.parmParams().parmHcmWorkerRecId());
    
        // 1) Build CurrentCompany node of the GeneralData data section.
        // Add CompanyInfo record.
        currentCompanyDataRecord = _recordBuilderGeneralData.addRecord(currentCompanyInfo, literalStr("@DocentricAX:CurrentCompanyInfo")).setSingleRecord(true);
        currentCompanyDataRecord.setRecordName('CurrentCompany');
        this.addGeneralDataSectionBaseCompanyInfo(currentCompanyDataRecord, currentCompanyInfo);
        _recordBuilderGeneralData.goToTopRecord();
    
        // 2) Build CurrentWorker node of the GeneralData data section.
        currentWorkerDataRecord = _recordBuilderGeneralData.addRecord(currentWorker, literalStr("@DocentricAX:CurrentWorkerInfo")).setSingleRecord(true);
        currentWorkerDataRecord.setRecordName('CurrentWorker');
        this.addGeneralDataSectionBaseWorkerInfo(currentWorkerDataRecord, currentWorker);
        _recordBuilderGeneralData.goToTopRecord();
    
        // 3) Build Misc node of the GeneralData data section.
        miscDataRecord = _recordBuilderGeneralData.addCalculatedRecord('Misc', literalStr("@DocentricAX:Miscellaneous")).setSingleRecord(true);
        this.addGeneralDataSectionBaseMiscInfo(miscDataRecord);
        _recordBuilderGeneralData.goToTopRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional data to the CurrentCompany node
    /// of the GeneralData data section of the report/document data source.
    /// </summary>
    /// <param name="_currentCompanyDataRecord">The CurrentCompany data record of the GeneralData data section.</param>
    /// <param name="_currentCompanyInfo">The CompanyInfo table buffer containing the current company record.</param>
    protected void addGeneralDataSectionBaseCompanyInfo(DocXmlRecord _currentCompanyDataRecord,
                                                        CompanyInfo _currentCompanyInfo)
    {
        /*  Add data fields and child data records to the CurrentCompany node of the GeneralData data section */

        // Add Company basic data.
        this.addGeneralDataSectionBaseCompanyInfo_addBasicInfo(_currentCompanyDataRecord, _currentCompanyInfo);
    
        // Add primary Postal Address.
        this.addGeneralDataSectionBaseCompanyInfo_addPrimaryPostalAddress(_currentCompanyDataRecord, _currentCompanyInfo);
    
        // Add Bank Account.
        this.addGeneralDataSectionBaseCompanyInfo_addBankAccount(_currentCompanyDataRecord, _currentCompanyInfo);

        // Add Sales Tax numbers.
        this.addGeneralDataSectionBaseCompanyInfo_addTaxNumbers(_currentCompanyDataRecord, _currentCompanyInfo);

        // Add Registration numbers.
        this.addGeneralDataSectionBaseCompanyInfo_addRegistrationNumbers(_currentCompanyDataRecord, _currentCompanyInfo);
    
        // Add Company Logo.
        if (this.parmParams().parmIncludeCompanyLogoInDs())
        {
            this.addGeneralDataSectionBaseCompanyInfo_addCompanyLogo(_currentCompanyDataRecord, _currentCompanyInfo);
        }
        else
        {
            _currentCompanyDataRecord.addCalculatedField('Logo', conNull(), literalStr("@DocentricAX:CompanyLogo"));
            _currentCompanyDataRecord.addCalculatedField('LogoIncluded', false, literalStr("@DocentricAX:CompanyLogoIncluded"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseCompanyInfo_addBasicInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to provide your own implementation for adding the basic company data.
    /// Extend this method to add additional fields.
    /// </summary>
    /// <param name = "_currentCompanyDataRecord">The current company data record</param>
    /// <param name = "_currentCompanyInfo">The current CompanyInfo table buffer</param>
    protected void addGeneralDataSectionBaseCompanyInfo_addBasicInfo(DocXmlRecord _currentCompanyDataRecord, CompanyInfo _currentCompanyInfo)
    {
        _currentCompanyDataRecord.addField(fieldStr(CompanyInfo, Name));
        _currentCompanyDataRecord.addCalculatedField('CompanyId', this.parmParams().parmCompanyId(), literalStr("@DocentricAX:CompanyId"));
        _currentCompanyDataRecord.addDisplayMethod(tableMethodStr(CompanyInfo, phone));
        _currentCompanyDataRecord.addDisplayMethod('telefax'); // Use instead of tableMethodStr(CompanyInfo, teleFax) because of the backward compatibility.
        _currentCompanyDataRecord.addDisplayMethod(tableMethodStr(CompanyInfo, email));
        _currentCompanyDataRecord.addDisplayMethod(tableMethodStr(CompanyInfo, url));
        _currentCompanyDataRecord.addField(fieldStr(CompanyInfo, LanguageId), literalStr("@DocentricAX:CompanyLanguage"));
    
        // Add Head of the company.
        DocXmlField dataField = _currentCompanyDataRecord.addField(fieldStr(CompanyInfo, Head_LT));
        dataField.setFieldName('CompanyHead');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseCompanyInfo_addPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to provide your own implementation for adding the primary postal address info.
    /// </summary>
    /// <param name = "_currentCompanyDataRecord">The current company data record</param>
    /// <param name = "_currentCompanyInfo">The current CompanyInfo table buffer</param>
    /// <returns>The added PrimaryPostalAddress data record (from 3.4.3, before returned void)</returns>
    protected DocXmlRecord addGeneralDataSectionBaseCompanyInfo_addPrimaryPostalAddress(DocXmlRecord _currentCompanyDataRecord, CompanyInfo _currentCompanyInfo)
    {
        DirPartyPostalAddressView postalAddress = DirPartyPostalAddressView::find(_currentCompanyInfo.RecId,
            DirParty::primaryPostalAddressLocationRecId(_currentCompanyInfo.RecId));

        DocXmlRecord primaryPostalAddressDataRecord = _currentCompanyDataRecord.addChildRecord(postalAddress, literalStr("@DocentricAX:PrimaryPostalAddress")).setSingleRecord(true);
        primaryPostalAddressDataRecord.setRecordName('PrimaryPostalAddress');
    
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, LocationName));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, Address));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, Street));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, StreetNumber));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, City));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, ZipCode));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, State));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, County));
        primaryPostalAddressDataRecord.addField(fieldStr(DirPartyPostalAddressView, CountryRegionId));

        return primaryPostalAddressDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseCompanyInfo_addBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to provide your own implementation for adding the bank account info.
    /// </summary>
    /// <param name = "_currentCompanyDataRecord">The current company data record</param>
    /// <param name = "_currentCompanyInfo">The current CompanyInfo table buffer</param>
    /// <returns>The added BankAccount data record (from 3.4.3, before returned void)</returns>
    protected DocXmlRecord addGeneralDataSectionBaseCompanyInfo_addBankAccount(DocXmlRecord _currentCompanyDataRecord, CompanyInfo _currentCompanyInfo)
    {
        // Add the Bank and Giro fields that the BankAccount table field group consists of.
        DocXmlRecord bankAccountDataRecord = _currentCompanyDataRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(CompanyInfo, BankAccount)).setSingleRecord(true);
    
        // Add additional fields to the BankAccount data record.
        BankAccountTable bankAccount;
        select firstOnly Name, IBAN, SWIFTNo, CurrencyCode from bankAccount
        where bankAccount.dataAreaId == _currentCompanyInfo.DataArea &&
              bankAccount.AccountID == _currentCompanyInfo.Bank;
        
        bankAccountDataRecord.addCalculatedField('IBAN', bankAccount.IBAN, literalStr("@SYS71686"));
        bankAccountDataRecord.addCalculatedField('SWIFT', bankAccount.SWIFTNo, literalStr("@SYS23725"));
        bankAccountDataRecord.addCalculatedField('Name', bankAccount.Name, literalStr("@SYS22737"));
        bankAccountDataRecord.addCalculatedField('CurrencyCode', bankAccount.CurrencyCode, literalStr("@SYS7572"));

        return bankAccountDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseCompanyInfo_addTaxNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to provide your own implementation for adding the tax numbers.
    /// Extend this method to add additional fields.
    /// </summary>
    /// <param name = "_currentCompanyDataRecord">The current company data record</param>
    /// <param name = "_currentCompanyInfo">The current CompanyInfo table buffer</param>
    /// <returns>The added SalesTax data record</returns>
    protected DocXmlRecord addGeneralDataSectionBaseCompanyInfo_addTaxNumbers(DocXmlRecord _currentCompanyDataRecord, CompanyInfo _currentCompanyInfo)
    {
        // D365 MS Docs: https://docs.microsoft.com/en-us/dynamics365/unified-operations/financials/localizations/emea-registration-ids

        // Add all fields from the SalesTax field group -> Sales Tax numbers.
        DocXmlRecord taxNumbersDataRecord = _currentCompanyDataRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(CompanyInfo, SalesTax)).setSingleRecord(true);

        // Fix the VAT number if needed.
        if (taxNumbersDataRecord.fields().exists(fieldStr(CompanyInfo, VATNum)))
        {
            DocXmlField vatNumDataField = taxNumbersDataRecord.fields().lookup(fieldStr(CompanyInfo, VATNum));
            if (!vatNumDataField.getFieldValue())
            {
                str vatNum = TaxRegistration::getCompanyTaxRegNum_W();
                if (!vatNum)
                {
                    vatNum = _currentCompanyInfo.getVatNumPrimaryRegistrationNumber();
                }
                if (vatNum)
                {
                    vatNumDataField.setFieldValue(vatNum);
                }
            }
        }

        // NOTE: For Intrastat Reporting Import VAT number is also get by using:
        // TaxRegistration::getCompanyTaxRegNum_W(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), fieldNum(CompanyInfo, ImportVATNum));

        return taxNumbersDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseCompanyInfo_addRegistrationNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to provide your own implementation for adding the registration numbers.
    /// Extend this method to add additional fields.
    /// </summary>
    /// <param name = "_currentCompanyDataRecord">The current company data record</param>
    /// <param name = "_currentCompanyInfo">The current CompanyInfo table buffer</param>
    /// <returns>The added RegistrationNumbers data record</returns>
    protected DocXmlRecord addGeneralDataSectionBaseCompanyInfo_addRegistrationNumbers(DocXmlRecord _currentCompanyDataRecord, CompanyInfo _currentCompanyInfo)
    {
        // D365 MS Docs: https://docs.microsoft.com/en-us/dynamics365/unified-operations/financials/localizations/emea-registration-ids

        // Add all fields from the RegistrationNumbers field group -> Registration numbers.
        DocXmlRecord regNumbersDataRecord = _currentCompanyDataRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(CompanyInfo, RegistrationNumbers)).setSingleRecord(true);
    
        // NOTE: For Intrastat Reporting CoRegNum number is also get using:
        // TaxRegistration::getCompanyTaxRegNum_W(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), fieldNum(CompanyInfo, CoRegNum));


        // Add the EnterpriseNumber field.
        str enterpriseNumber = _currentCompanyInfo.getEnterpriseNumberPrimaryRegistrationNumber();
        regNumbersDataRecord.addCalculatedField('EnterpriseNumber', enterpriseNumber, literalStr("@RegistrationNumbers:EnterpriseIdCompanyId"));


        // Add the BranchNumber field if needed.
        if (SysCountryRegionCodeCache::countryInfo(_currentCompanyInfo.DataArea) == #isoBE)
        {
            str branchNumber = _currentCompanyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::BranchId);
            regNumbersDataRecord.addCalculatedField('BranchNumber', branchNumber, literalStr("@RegistrationNumbers:BranchIdCompanyId"));
        }


        // Add the CustomsCustomerNumber field if needed.
        if (SysCountryRegionCodeCache::countryInfo(_currentCompanyInfo.DataArea) == #isoFI)
        {
            str customsCustomerNumber = _currentCompanyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::CustomsCustomerId);
            regNumbersDataRecord.addCalculatedField('CustomsCustomerNumber', customsCustomerNumber, literalStr("@RegistrationNumbers:CustomsCustomerId"));
        }


        // Add Commercial Register data.
        if (SysCountryRegionCodeCache::countryInfo(_currentCompanyInfo.DataArea) == #isoCZ)
        {   
            DocXmlRecord commmercialNumbersDataRecord = regNumbersDataRecord.addChildCalculatedRecord('CommercialRegister', literalStr("@RegistrationNumbers:SpisovaZnacka"));
            TaxRegistration taxRegistration = TaxRegistration::getPrimaryAddressTaxRegistration(_currentCompanyInfo, TaxRegistrationTypesList::CommercialRegisterCZ);
            commmercialNumbersDataRecord.addCalculatedField('CommercialRegisterInsetNumber', taxRegistration.RegistrationNumber);
            commmercialNumbersDataRecord.addCalculatedField('CommercialRegister', taxRegistration.Issuer);
            commmercialNumbersDataRecord.addCalculatedField('CommercialRegisterSection', taxRegistration.Section);
        }

        return regNumbersDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseCompanyInfo_addCompanyLogo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the company logo to the CompnayInfo node in the GeneralData data section.
    /// </summary>
    /// <param name = "_currentCompanyDataRecord">The current company data record</param>
    /// <param name = "_currentCompanyInfo">The current CompanyInfo table buffer</param>
    protected void addGeneralDataSectionBaseCompanyInfo_addCompanyLogo(DocXmlRecord _currentCompanyDataRecord, CompanyInfo _currentCompanyInfo)
    {
        CompanyImage companyImage = CompanyImage::findByRecord(_currentCompanyInfo);
        if (companyImage && companyImage.Image)
        {
            _currentCompanyDataRecord.addCalculatedField('Logo', companyImage.Image, literalStr("@DocentricAX:CompanyLogo"));
            _currentCompanyDataRecord.addCalculatedField('LogoIncluded', true, literalStr("@DocentricAX:CompanyLogoIncluded"));
        }
        else
        {
            _currentCompanyDataRecord.addCalculatedField('Logo', conNull(), literalStr("@DocentricAX:CompanyLogo"));
            _currentCompanyDataRecord.addCalculatedField('LogoIncluded', false, literalStr("@DocentricAX:CompanyLogoIncluded"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseMiscInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional data to the Miscellaneous node
    /// of the GeneralData data section of the report/document data source.
    /// </summary>
    /// <param name="_miscDataRecord">
    /// The Misc data record of the GeneralData data section.
    /// </param>
    protected void addGeneralDataSectionBaseMiscInfo(DocXmlRecord _miscDataRecord)
    {
        utcDateTime sessionDateTime;
        date        sessionDate;
    
        /*  Add data fields to the Misc node of the GeneralData data section */
    
        // NOTE: We don't have to apply user preferred time zone offset to the system date time,
        // because Docentric AX framework will do this when any utcDateTime field is being serialized to XML.
        sessionDateTime = DateTimeUtil::getSystemDateTime();
        sessionDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(sessionDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        _miscDataRecord.addCalculatedField('SessionDate', sessionDate, literalStr("@SYS11795"));
        _miscDataRecord.addCalculatedField('SessionDateTime', sessionDateTime, literalStr("@SYS112686"));
        _miscDataRecord.addCalculatedField(
            'LanguageId', this.parmParams().parmDsLanguageId(), literalStr("@DocentricAX:CurrentLanguageId"));
        // Add the IsCBDDs data field if the Enable CBD data sources feature is enabled.
        if (DocParameters::find().EnableCbdDs)
        {
            _miscDataRecord.addCalculatedField(
                'IsCbdDs', this.parmParams().parmDataSourceGenerationMode() == DocDataSourceGenerationMode::ConfigurableBusinessDocuments, literalStr("@DocentricAX4:IsCbdDataSource"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseWorkerInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional data to the CurrentWorker node
    /// of the GeneralData data section of the report/document data source.
    /// </summary>
    /// <param name="_currentWorkerDataRecord">
    /// The CurrentWorker data record of the GeneralData data section.
    /// </param>
    /// <param name="_currentWorker">
    /// The HcmWorker table buffer containing the current worker record.
    /// </param>
    protected void addGeneralDataSectionBaseWorkerInfo(DocXmlRecord _currentWorkerDataRecord,
                                                       HcmWorker _currentWorker)
    {
        /*  Add data fields to the CurrentWorker node of the GeneralData data section */
        _currentWorkerDataRecord.addDisplayMethod(tableMethodStr(HcmWorker, name));
        _currentWorkerDataRecord.addField(fieldStr(HcmWorker, PersonnelNumber));
        _currentWorkerDataRecord.addDisplayMethod(tableMethodStr(HcmWorker, title));
        _currentWorkerDataRecord.addDisplayMethod(tableMethodStr(HcmWorker, isContractor));
        _currentWorkerDataRecord.addDisplayMethod(tableMethodStr(HcmWorker, email));
    
        OMOperatingUnit omOperatingUnit = HcmWorkerHelper::getPrimaryDepartment(_currentWorker.RecId);
        _currentWorkerDataRecord.addCalculatedField('OMOperatingUnitName', omOperatingUnit.Name, literalStr("@DocentricAX:PrimaryDepartment"));
        _currentWorkerDataRecord.addCalculatedField('OMOperatingUnitNumber', omOperatingUnit.OMOperatingUnitNumber, literalStr("@DocentricAX:PrimaryDepartmentNumber"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the GeneralData section.
    /// </summary>
    private void addGeneralDataSectionPost()
    {
        XmlElement                    dataXmlElement;
        XmlElement                    dataSchemaXmlElement;
    
        // Serialize to XML.
        dataXmlElement = recordBuilderGeneralData.serializeToXml(xmlDataSource);
        xmlGeneralDataDataElement.appendChild(dataXmlElement);
    
        // Make XML schema for Data node.
        if (!this.parmParams().parmIsRuntime())
        {
            dataSchemaXmlElement = recordBuilderGeneralData.makeXmlSchema(xmlDataSource);
            xmlGeneralDataSchemaElement.appendChild(dataSchemaXmlElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the GeneralData section.
    /// </summary>
    private void addGeneralDataSectionPre()
    {
        DocXmlRecord  topRecord;
    
        // Construct Top record in Parameters data element.
        topRecord = DocXmlRecord::constructCalculatedRecord(DocConstantDSP::XmlGeneralDataElementName, literalStr("@DocentricAX:GeneralData"),
                                                            this.parmParams().parmDsLanguageId(), commonRecordBuildingContext);
    
        // Construct RecordBuilderMainData.
        recordBuilderGeneralData = DocXmlRecordBuilder::construct(topRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLabelsSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the Labels section.
    /// </summary>
    private void addLabelsSection()
    {
        XmlElement          xmlElemLabel, xmlElemText;
        XmlAttribute        xmlAtt;
        Map                 commonLabelMap, customLabelMapDesignTime;
        Set                 specificLabelSet;
        SetEnumerator       specificLabelSetEnum;
    
    
        /*
        <dsp:labels>
            <dsp:label dsp:code="@DOC123" dsp:name="Report Data" dsp:section="Custom">
                <dsp:text dsp:languageId="EN-US" dsp:value="Report data" />
                <dsp:text dsp:languageId="sl-SI" dsp:value="Podatki poročila" />
            </dsp:label>
            <dsp:label dsp:code="@DocentricAX:DefaultFileSystemStorage" dsp:name="Purch Table">
                <dsp:text dsp:languageId="EN-US" dsp:value="Purchase orders" />
                <dsp:text dsp:languageId="sl-SI" dsp:value="Naročila" />
            </dsp:label>
        </dsp:labels>
        */
    
        void addLabelsForRuntime(Map _labelMap)
        {
            MapEnumerator       labelMapEnum;
            LabelId             labelId;
            str                 labelValue;
    
    
            labelMapEnum = _labelMap.getEnumerator();
            while (labelMapEnum.moveNext())
            {
                labelId = labelMapEnum.currentKey();
    
                // Create XML 'label' element (dsp:label)
                xmlElemLabel = DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, 'label');
                xmlLabelsInfoRootElement.appendChild(xmlElemLabel);
    
                // Create XML 'code' attribute (dsp:code)
                xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'code');
                xmlAtt.value(labelId);
                xmlElemLabel.setAttributeNode(xmlAtt);
    
                labelValue = labelRepository.resolveDdspLabel(labelId, this.parmParams().parmDsLanguageId());
                if (labelValue)
                {
                    // Create XML 'text' attribute (dsp:text)
                    xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'text');
                    xmlAtt.value(labelValue);
                    xmlElemLabel.setAttributeNode(xmlAtt);
                }
            }
        }
    
    
        void addLabelsForDesignTime(Map _labelMap, boolean _areCustomLabels)
        {
            SetEnumerator       previewLanguageSetEnum;
            MapEnumerator       labelMapEnum;
            LabelId             labelId;
            str                 previewLanguage, labelValue, labelName;
    
            labelMapEnum = _labelMap.getEnumerator();
            while (labelMapEnum.moveNext())
            {
                labelId = labelMapEnum.currentKey();
                labelName = labelMapEnum.currentValue();
    
                // Create XML 'label' element (dsp:label)
                xmlElemLabel = DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, 'label');
                xmlLabelsInfoRootElement.appendChild(xmlElemLabel);
    
                // Create XML 'value' attribute (dsp:code)
                xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'code');
                xmlAtt.value(labelId);
                xmlElemLabel.setAttributeNode(xmlAtt);
    
                // Create XML 'name' attribute (dsp:name)
                xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'name');
                xmlAtt.value(labelName);
                xmlElemLabel.setAttributeNode(xmlAtt);
    
                // Create XML 'section' attribute (dsp:section)
                if (_areCustomLabels)
                {
                    xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'section');
                    xmlAtt.value(DocConstantDSP::XmlLabelsCustomLabelsAttrSection);
                    xmlElemLabel.setAttributeNode(xmlAtt);
                }
    
                previewLanguageSetEnum = this.parmParams().getPreviewLanguageSet().getEnumerator();
                while (previewLanguageSetEnum.moveNext())
                {
                    previewLanguage = previewLanguageSetEnum.current();
    
                    labelValue = labelRepository.resolveDdspLabel(labelId, previewLanguage);
                    if (labelValue)
                    {
                        // Create XML 'text' element (dsp:text)
                        xmlElemText = DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, 'text');
                        xmlElemLabel.appendChild(xmlElemText);
    
                        // Create XML 'language' attribute (dsp:language)
                        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'language');
                        xmlAtt.value(previewLanguage);
                        xmlElemText.setAttributeNode(xmlAtt);
    
                        // Create XML 'value' attribute (dsp:value)
                        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'value');
                        xmlAtt.value(labelValue);
                        xmlElemText.setAttributeNode(xmlAtt);
                    }
                }
            }
        }
    
    
        // Add dimension field labels to the label set.
        specificLabelSet = DocDataSourceProviderHelper::getDimensionFieldLabelSet();
        specificLabelSetEnum = specificLabelSet.getEnumerator();
        while (specificLabelSetEnum.moveNext())
        {
            this.commonRecordBuildingContext().ensureLabel(specificLabelSetEnum.current());
        }
    
        // Add enum field labels to the label set.
        specificLabelSet = DocDataSourceProviderHelper::getEnumFieldLabelSet();
        specificLabelSetEnum = specificLabelSet.getEnumerator();
        while (specificLabelSetEnum.moveNext())
        {
            this.commonRecordBuildingContext().ensureLabel(specificLabelSetEnum.current());
        }
    
        // Get the common label map containing all labels from all data sections.
        commonLabelMap = this.commonRecordBuildingContext().getCommonLabelMap();
    
        // Serialize labels to XML.
        if (this.isRuntime())
        {
            // Add custom labels to the common label map.
            this.addCustomLabels(commonLabelMap);
    
            // Serialize all labels to XML.
            addLabelsForRuntime(commonLabelMap);
        }
        else
        {
            // Add custom labels to the custom label map.
            customLabelMapDesignTime = new Map(Types::String, Types::String);
            this.addCustomLabels(customLabelMapDesignTime);
    
            // Serialize labels from the custom label map to XML.
            addLabelsForDesignTime(customLabelMapDesignTime, true);
    
            // Serialize labels from the common label map to XML.
            addLabelsForDesignTime(commonLabelMap, false);
    
            // Add custom labels to the common label map.
            this.addCustomLabels(commonLabelMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainDataSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the MainData section.
    /// </summary>
    protected void addMainDataSection()
    {
        str errorMsg = strFmt('Error during execution of the generateXmlDataSource() method of the DSP class: %1', classId2Name(classIdGet(this)));
        
        // Prepare recordBuilderMainData.
        this.addMainDataSectionPre();
    
        try
        {
            // Let derived class to fill the record builder with specific Main Data for design/populating report/document.
            this.generateXmlDataSource(recordBuilderMainData);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errorMsg);
        }
    
        // Serialize the MainData data section to XML and XSD.
        this.addMainDataSectionPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainDataSectionPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the MainData section.
    /// </summary>
    final protected void addMainDataSectionPost()
    {
        XmlElement dataXmlElement;
        XmlElement dataSchemaXmlElement;
    
        // Serialize to XML.
        dataXmlElement = recordBuilderMainData.serializeToXml(xmlDataSource);
        xmlMainDataDataElement.appendChild(dataXmlElement);
    
        // Make XML schema for Data node.
        if (!this.parmParams().parmIsRuntime())
        {
            dataSchemaXmlElement = recordBuilderMainData.makeXmlSchema(xmlDataSource);
            xmlMainDataSchemaElement.appendChild(dataSchemaXmlElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainDataSectionPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the MainData section.
    /// </summary>
    protected abstract void addMainDataSectionPre()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParametersSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the Parameters section.
    /// </summary>
    protected abstract void addParametersSection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSystemInfoSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the SystemInfo section.
    /// </summary>
    protected void addSystemInfoSection()
    {
        XmlAttribute  xmlAtt;
    
        // Flavour: MailMerge/Reporting
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'flavour');
        xmlAtt.value(int2str(enum2int(flavour)));
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // FlavourLabel
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'flavourLabel');
        xmlAtt.value(enum2Value(flavour));
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // Language
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'language');
        xmlAtt.value(this.parmParams().parmDsLanguageId());
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // DataSourceProviderClassName
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'dsProviderClassName');
        xmlAtt.value(this.parmParams().parmDsProviderDerivedClassName());
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

        // ScriptEngine
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, DocConstantDSP::XmlSystemInfoScriptEngineAttrName);
        xmlAtt.value(this.parmParams().parmDocentricScriptEngine());
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

        // DspSchemaVersion
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, DocConstantDSP::XmlSystemInfoDspSchemaVersionAttrName);
        xmlAtt.value(DocConstantDSP::XmlSystemInfoDspSchemaVersionAttrValue);
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

        // ER components.
        // Note that once in the future we might have ER-based reports which are not CBD. To support them, we will need to introduce
        // a new type of DocDataSourceGenerationMode and to include it in the next if statement.
        if (this.parmParams().parmDataSourceGenerationMode() == DocDataSourceGenerationMode::ConfigurableBusinessDocuments &&
            this.parmParams().parmERModelMappingTable())
        {
            // ERModelMappingGuid
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erModelMappingGuid');
            xmlAtt.value(guid2Str(this.parmParams().parmERModelMappingTable().GUID));
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERModelMappingName
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erModelMappingName');
            xmlAtt.value(this.parmParams().parmERModelMappingTable().Name);
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERDataModelGuid
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erDataModelGuid');
            xmlAtt.value(guid2Str(this.parmParams().parmERDataModelTable().GUID));
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERDataModelName
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erDataModelName');
            xmlAtt.value(this.parmParams().parmERDataModelTable().Name);
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERSolutionGuid
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erSolutionGuid');
            xmlAtt.value(guid2Str(this.parmParams().parmERSolutionTable().GUID));
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERSolutionName
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erSolutionName');
            xmlAtt.value(this.parmParams().parmERSolutionTable().Name);
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERModelDataToIncludeInDS
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erModelDataToIncludeInDS');
            xmlAtt.value(enum2Symbol(enumNum(DocERModelDataToIncludeInDS), this.parmParams().parmERModelDataToIncludeInDS()));
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
        }
        else
        {
            // ERModelMappingGuid
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erModelMappingGuid');
            xmlAtt.value('{00000000-0000-0000-0000-000000000000}');
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERModelMappingName
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erModelMappingName');
            xmlAtt.value('');
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERDataModelGuid
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erDataModelGuid');
            xmlAtt.value('{00000000-0000-0000-0000-000000000000}');
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERDataModelName
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erDataModelName');
            xmlAtt.value('');
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERSolutionGuid
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erSolutionGuid');
            xmlAtt.value('{00000000-0000-0000-0000-000000000000}');
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERSolutionName
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erSolutionName');
            xmlAtt.value('');
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);

            // ERModelDataToIncludeInDS
            xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'erModelDataToIncludeInDS');
            xmlAtt.value(DocConstantDSP::ConstStringNA);
            xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
        }
    
        // UserId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'userId');
        xmlAtt.value(this.parmParams().parmUserId());
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // HcmWorkerRecId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'hcmWorkerRecId');
        xmlAtt.value(int642str(this.parmParams().parmHcmWorkerRecId()));
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // CompanyId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'companyId');
        xmlAtt.value(this.parmParams().parmCompanyId());
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // Partition
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'partition');
        xmlAtt.value(int642str(getcurrentpartitionrecid()));
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // ProductVersion
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'productVersion');
        xmlAtt.value(DocConstantLicVer::DocentricAxVersion());
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    
        // CreationDate
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'creationDateTime');
        xmlAtt.value(DateTimeUtil::toStr(DateTimeUtil::getSystemDateTime()));
        xmlSystemInfoRootElement.setAttributeNode(xmlAtt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonRecordBuildingContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the common record building context.
    /// </summary>
    /// <returns>The common record building context</returns>
    final public DocXmlRecordBuildingContext commonRecordBuildingContext()
    {
        return commonRecordBuildingContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description</returns>
    public abstract ClassDescription description()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data to MainData data section of the report/document data source.
    /// </summary>
    /// <param name="_recordBuilder">
    /// Record builder of the MainData data section. Enables quick building of XML Data Source tree.
    /// </param>
    /// <remarks>
    /// Override this method in order to add data to MainData data section of the
    /// report/document data source. Use _recordBuilder to easily add records and fields.
    /// </remarks>
    protected abstract void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSourceBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML Data Source document.
    /// </summary>
    private void generateXmlDataSourceBase()
    {
        try
        {
            // Init XML Data Source and other members.
            this.initDS();
    
            // The running inherited DSP class instance can override parameters through this method.
            this.preRunGenerateDS();
    
            // Add design info section.
            this.addDesignInfoSection();
    
            // Add system info section.
            this.addSystemInfoSection();
    
            // Add general data section.
            this.addGeneralDataSection();
    
            // Add main data section.
            this.addMainDataSection();
    
            // Add parameters section if the flavor is Reporting.
            this.addParametersSection();
    
            // Add labels section.
            this.addLabelsSection();
    
            // The running inherited DSP class instance can perform some post run actions through this method.
            this.postRunGenerateDS();

            // Store generated Xml Data Source document to parmXmlDataSource.
            this.parmXmlDataSource(xmlDataSource);
        }
        catch (Exception::CLRError)
        {
            this.cleanUpBase();

            if (!this.isMailMergeQueryBased())
            {
                DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX:ErrorDuringDdspGenerationWithClass", classId2Name(classIdGet(this))),
                                                    Exception::Error, DocConstantDiagnostics::ErrDataSourceGeneration);
            }
            else
            {
                DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:ErrorDuringDdspGenerationWithQuery", Exception::Error, DocConstantDiagnostics::ErrDataSourceGeneration);
            }
        }
        catch
        {
            this.cleanUpBase();

            if (!this.isMailMergeQueryBased())
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:ErrorDuringDdspGenerationWithClass", classId2Name(classIdGet(this))),
                                                 DocConstantDiagnostics::ErrDataSourceGeneration);
            }
            else
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:ErrorDuringDdspGenerationWithQuery", DocConstantDiagnostics::ErrDataSourceGeneration);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlDataSourceStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DDSP serialized to XML.
    /// </summary>
    /// <param name = "_forceConvertXmltoStr">Should force DDSP serialization</param>
    /// <returns>A serialized DDSP as XML string</returns>
    final public str getXmlDataSourceStr(boolean _forceConvertXmltoStr = false)
    {
        // Use the cached non-empty value if not required otherwise.
        if (xmlDataSourceStr == '' || _forceConvertXmltoStr)
        {
            if (xmlDataSource)
            {
                xmlDataSourceStr = xmlDataSource.toString();
            }
        }
    
        return xmlDataSourceStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataSourceObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document data source object, containing the top records of all three data sections:
    /// MainData, GeneralData, Parameters and the label map with label codes which are either part
    /// of the data source or added in the document/report setup.
    /// </summary>
    /// <returns>DocDataSourceObject object</returns>
    final public DocDataSourceObject getDataSourceObject()
    {
        return new DocDataSourceObject(recordBuilderMainData ? recordBuilderMainData.topRecord() : null,
                                       recordBuilderGeneralData ? recordBuilderGeneralData.topRecord() : null,
                                       recordBuilderParameters ? recordBuilderParameters.topRecord() : null,
                                       this.commonRecordBuildingContext() ? this.commonRecordBuildingContext().getCommonLabelMap() : null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the XML Data Source and other members.
    /// </summary>
    protected void initDS()
    {
        XmlElement xmlElementDataSection;
    
        // Create XML Data Source document.
        xmlDataSource = XmlDocument::newBlank();
    
        // Create XML DS root element (dsp:dataSourcePackage)
        xmlDsPackageRootElement =
            DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlDsPackageRootElementName);
        xmlDataSource.appendChild(xmlDsPackageRootElement);
    
        // Add namespace for annotations related to labels for design time.
        if (!this.parmParams().parmIsRuntime())
        {
            xmlDsPackageRootElement.setAttribute('xmlns:' + DocConstantDSP::XmlDsPackageDocentricExtNamespacePrefix, DocConstantDSP::XmlDsPackageDocentricExtNamespaceUrl);
        }
    
        // Design Info (dsp:design)
        if (!this.parmParams().parmIsRuntime())
        {
            xmlDesignInfoRootElement =
                DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlDesignInfoRootElementName);
            xmlDsPackageRootElement.appendChild(xmlDesignInfoRootElement);
        }
    
        // System Info (dsp:systemInfo).
        xmlSystemInfoRootElement =
            DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlSystemInfoRootElementName);
        xmlDsPackageRootElement.appendChild(xmlSystemInfoRootElement);
    
        // Labels (dsp:labels)
        xmlLabelsInfoRootElement =
            DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlLabelsRootElementName);
        xmlDsPackageRootElement.appendChild(xmlLabelsInfoRootElement);
    
        // Data Sections element (dsp:dataSections)
        xmlDsPackageDataSectionsElement =
            DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlDsPackageDataSections);
        xmlDsPackageRootElement.appendChild(xmlDsPackageDataSectionsElement);
    
    
        // Report General Data.
        xmlElementDataSection =
            DocDataSourceProviderHelper::createDsPackageDataSection(xmlDataSource, DocConstantDSP::XmlGeneralDataType);
        xmlDsPackageDataSectionsElement.appendChild(xmlElementDataSection);
        xmlGeneralDataDataElement =
            DocDataSourceProviderHelper::createDsPackageDataSectionDataSchema(xmlDataSource, xmlElementDataSection, false);
        xmlElementDataSection.appendChild(xmlGeneralDataDataElement);
        xmlGeneralDataSchemaElement =
            DocDataSourceProviderHelper::createDsPackageDataSectionDataSchema(xmlDataSource, xmlElementDataSection, true);
        xmlElementDataSection.appendChild(xmlGeneralDataSchemaElement);
    
    
        // Report Main Data.
        xmlElementDataSection =
            DocDataSourceProviderHelper::createDsPackageDataSection(xmlDataSource, DocConstantDSP::XmlMainDataType);
        xmlDsPackageDataSectionsElement.appendChild(xmlElementDataSection);
        xmlMainDataDataElement =
            DocDataSourceProviderHelper::createDsPackageDataSectionDataSchema(xmlDataSource, xmlElementDataSection, false);
        xmlElementDataSection.appendChild(xmlMainDataDataElement);
        xmlMainDataSchemaElement =
            DocDataSourceProviderHelper::createDsPackageDataSectionDataSchema(xmlDataSource, xmlElementDataSection, true);
        xmlElementDataSection.appendChild(xmlMainDataSchemaElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up used resources, if any.
    /// </summary>
    private void cleanUpBase()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes some class variables.
    /// </summary>
    private void initBase()
    {
        // Create label repository.
        labelRepository = DocDataSourceProviderLabelRepository::construct();
        if (this.parmParams().parmDataSourceGenerationMode() == DocDataSourceGenerationMode::ConfigurableBusinessDocuments)
        {
            labelRepository.parmLabelResolutionStrategy(DocLabelResolutionStrategy::GER);
        }

        // Create a new record building context common for all data sections (GeneralData, MainData, Parameters).
        commonRecordBuildingContext = new DocXmlRecordBuildingContext(!this.parmParams().parmIsRuntime(), labelRepository);

        // Set the ASCII control characters handling mode from the related report
        commonRecordBuildingContext.asciiControlCharactersHandlingMode(DocReportTable::findReportId(this.paramsReporting.parmReportId()).AsciiControlCharactersHandling);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMailMergeQueryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the mail merge is query-based.
    /// </summary>
    /// <returns>True if the mail merge is query based; otherwise false</returns>
    private boolean isMailMergeQueryBased()
    {
        if (this.parmParamsMailMerge() && this.parmParamsMailMerge().parmIsDataSourceQueryBased())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRuntime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the data source provider is a runtime mode.
    /// </summary>
    /// <returns>
    /// True if the data source provider is in a runtime mode.
    /// Otherwise, the data source provider is in a design time mode and false is returned.
    /// </returns>
    /// <remarks>
    /// Runtime mode means that document/report is actually being executed and
    /// design time mode means that document/report data source is being generated.
    /// Design time data source contains XML schema as well.
    /// </remarks>
    final public boolean isRuntime()
    {
        return this.parmParams().parmIsRuntime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the DocDataSourceProviderBase class.
    /// </summary>
    protected void new()
    {
        params = new DocDataSourceProviderParams();
        paramsMailMerge = new DocDataSourceProviderParamsMailMerge();
        paramsReporting = new DocDataSourceProviderParamsReporting();
        xmlDataSourceStr = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to store some values from the currently selected
    /// record from a query data source into global class variables.
    /// </summary>
    /// <param name="_common">
    /// Currently selected record from one of the query data sources.
    /// </param>
    /// <param name="_qbds">
    /// Query data source (QueryBuildDataSource) of the currently selected record.
    /// </param>
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the class variables into the container.
    /// </summary>
    /// <returns>Packed container with class variables</returns>
    public container pack()
    {
        int        version = #packVersion;
        container  packedParams = this.parmParams().pack();
        container  packedParamsMailMerge = this.parmParamsMailMerge().pack();
        container  packedParamsReporting = this.parmParamsReporting().pack();
    
        return [#currentList, packedParams, packedParamsMailMerge, packedParamsReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets an instance of the DocDataSourceProviderParams class.
    /// </summary>
    /// <param name = "_params">An instance of the DocDataSourceProviderParams class</param>
    /// <returns>An instance of the DocDataSourceProviderParams class</returns>
    final public DocDataSourceProviderParams parmParams(DocDataSourceProviderParams _params = params)
    {
        params = _params;
    
        if (params == null)
        {
            params = new DocDataSourceProviderParams();
        }
    
        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParamsMailMerge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets an instance of the DocDataSourceProviderParamsMailMerge class.
    /// </summary>
    /// <param name = "_paramsMailMerge">An instance of the DocDataSourceProviderParamsMailMerge class</param>
    /// <returns>An instance of the DocDataSourceProviderParamsMailMerge class</returns>
    final public DocDataSourceProviderParamsMailMerge parmParamsMailMerge(DocDataSourceProviderParamsMailMerge _paramsMailMerge = paramsMailMerge)
    {
        paramsMailMerge = _paramsMailMerge;
    
        if (paramsMailMerge == null)
        {
            paramsMailMerge = new DocDataSourceProviderParamsMailMerge();
        }
    
        return paramsMailMerge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParamsReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets an instance of the DocDataSourceProviderParamsReporting class.
    /// </summary>
    /// <param name = "_paramsReporting">An instance of the DocDataSourceProviderParamsReporting class</param>
    /// <returns>An instance of the DocDataSourceProviderParamsReporting class</returns>
    final public DocDataSourceProviderParamsReporting parmParamsReporting(DocDataSourceProviderParamsReporting _paramsReporting = paramsReporting)
    {
        paramsReporting = _paramsReporting;
    
        if (paramsReporting == null)
        {
            paramsReporting = new DocDataSourceProviderParamsReporting();
        }
    
        return paramsReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the XML Data Source document.
    /// </summary>
    /// <param name = "_xmlDataSource">XML Data Source document</param>
    /// <returns>XML Data Source document</returns>
    final public XmlDocument parmXmlDataSource(XmlDocument _xmlDataSource = xmlDataSource)
    {
        xmlDataSource = _xmlDataSource;
        xmlDataSourceStr = xmlDataSource.toString();
        return xmlDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelRepository</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the label repository.
    /// </summary>
    /// <param name = "_labelRepository">The label repository</param>
    /// <returns>The label repository</returns>
    public DocDataSourceProviderLabelRepository parmLabelRepository(DocDataSourceProviderLabelRepository _labelRepository = labelRepository)
    {
        labelRepository = _labelRepository;
        return labelRepository;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRunGenerateDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to perform some post run actions after the document/report
    /// data source is generated, i.e. the this.generateXmlDataSource() method is executed.
    /// The this.overrideReportRunSettings() method will be executed next in report execution pipeline.
    /// </summary>
    protected void postRunGenerateDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to initialize global class variables, to calculate some data that will be then used
    /// in the this.generateXmlDataSource(), this.overrideReportRunSettings() and other methods, or to modify parameters for
    /// data source generation that are stored in the this.parmParams(), this.parmParamsMailMerge(), and this.parmParamsReporting()
    /// methods. This way you can change, e.g. the run-time language (this.parmParams().parmDsLanguageId()) that affects label
    /// translations and data formats, or to include display methods in the query based reports: this.parmParams().parmIncludeDisplayMethodsInDs(true).
    /// </summary>
    protected void preRunGenerateDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the data source provider.
    /// </summary>
    final public void run()
    {
        this.parmParams().setDefaultParmValues();
        if (!this.validateParams())
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:DSPClassInvalidParams", classId2Name(classIdGet(this))));
        }
    
        // Init some class members.
        this.initBase();

        // The class instance running on server -> Generate XML data source.
        this.generateXmlDataSourceBase();

        // Update report run context with settings (e.g. Language ID, Company ID) that might
        // have been changed in the preRunGenerateDS() or postRunGenerateDS() methods.
        // Also, load the selected email template into the email body.
        this.updateReportRunContext();

        // Replace all user-defined placeholders in print settings for the executing report.
        this.replaceUserDefinedPlaceholdersBase();
            
        // Override report run settings to replace standard placeholders.
        // Custom DSP classes usually extend this method to define and replace custom placeholders
        // and fill the report archive contract (i.e. report metadata).
        this.overrideReportRunSettingsBase();

        // Load the metadata for the target library if needed, and process the used placeholders.
        this.processSharePointMetadataBase();

        // Load report attachments to be used for print destinations, PDF attachments or as subdocuments.
        this.loadReportAttachmentsBase();

        // Load external files to be used as additional report attachments.
        this.loadExternalFilesBase();

        // Clean up used resources, if any.
        this.cleanUpBase();
            
        // Send DDSP file for downloading in the browser.
        if (this.parmParams().parmSaveXmlDataSourceToFile())
        {
            this.sendDdspToUser();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendDdspToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the DDSP file for downloading in the browser.
    /// </summary>
    private void sendDdspToUser()
    {
        str ddspXmlStr;
        System.IO.MemoryStream ddspMemoryStream;
    
        if (!this.parmParams().parmXmlDataSourceFilename())
        {
            DocGlobalHelper::handleException(funcName(), 'DDSP filename has not been set');
        }
    
        ddspXmlStr = this.getXmlDataSourceStr();
        if (!ddspXmlStr)
        {
            DocGlobalHelper::handleException(funcName(), 'DDSP has not been generated');
        }
    
        // Resolve possible placeholders in the DDSP filename.
        // The DDSP filename is a member of the DocPrintDestSettingsGenerateDS and DocDataSourceProviderParams classes. At the beginning of the
        // pipeline execution, the DDSP filename is copied from the DocPrintDestSettingsGenerateDS class to the DocDataSourceProviderParams class.
        // The DocPrintDestSettingsGenerateDS class is a member of the DocReportRunContext class where the resolution of the placeholders takes
        // place during pipeline execution. The problem is that the DocDataSourceProviderParams class is never the subject of placeholder
        // resolution, so we have to do that here.
        DocDataSourceProviderReportingBase dsProviderReporting = this as DocDataSourceProviderReportingBase;
        if (dsProviderReporting != null)
        {
            DocPlaceholderProcessor docPlaceholderProcessor =
                DocPlaceholderProcessor::construct(paramsReporting.parmReportRunContext(), dsProviderReporting.userDefinedPlaceholderManager(), dsProviderReporting.placeholderManager());
            this.parmParams().parmXmlDataSourceFilename(
                DocFileMngHelper::replaceInvalidCharsForFileName(docPlaceholderProcessor.resolvePlaceholders(this.parmParams().parmXmlDataSourceFilename())));
        }

        try
        {
            // Save DDSP to memory stream.
            ddspMemoryStream = DocGlobalHelper::saveXmlToMemoryStream(ddspXmlStr);
            if (ddspMemoryStream == null)
            {
                throw Exception::Error;
            }
            // Send DDSP to user.
            DocFileMngHelper::sendFileToUser(ddspMemoryStream, this.parmParams().parmXmlDataSourceFilename(), DocConstantFile::MimeTypeDdsp, '', '', '', true, true);
        }
        catch
        {
            if (ddspMemoryStream != null)
            {
                ddspMemoryStream.Dispose();
            }
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:ErrorWhileSavingDdspFile", this.parmParams().parmXmlDataSourceFilename()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the class variables and re-instantiates them.
    /// </summary>
    /// <param name = "_pack">Packed container with class variables</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean    ret = false;
        int        version;
        container  packedParams, packedParamsMailMerge, packedParamsReporting;
    
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #packVersion)
            {
                [#currentList, packedParams, packedParamsMailMerge, packedParamsReporting] = _pack;
    
                ret = true;
                ret = ret && this.parmParams().unpack(packedParams);
                ret = ret && this.parmParamsMailMerge().unpack(packedParamsMailMerge);
                ret = ret && this.parmParamsReporting().unpack(packedParamsReporting);
    
                // Unpack XML document.
                if (xmlDataSourceStr)
                {
                    xmlDataSource = XmlDocument::newXml(xmlDataSourceStr);
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDsPackageXmlAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the DSP XML attributes.
    /// </summary>
    /// <param name = "_updateDsActionToken">The DS action token to be updated</param>
    /// <param name = "_newAttrValue">The new attribute value</param>
    /// <returns>True if the update was successful; otherwise false</returns>
    final public boolean updateDsPackageXmlAttribute(str _updateDsActionToken, str _newAttrValue)
    {
        XmlAttribute      xmlAttr;
        str               xpath;
    
    
        if (xmlDataSource == null)
        {
            return false;
        }
    
        if (_updateDsActionToken == DocConstantDSP::UpdateDsActionTokenLanguage)
        {
            // Language ID.
            xpath = DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageRootElementName + @'/' +
                    DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlSystemInfoRootElementName + @'/' +
                    '@' + DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + 'languageId';
            xmlAttr = DocDataSourceProviderHelper::selectDsPackageXmlNode(xmlDataSource, xpath);
            if (xmlAttr == null)
            {
                return false;
            }
            xmlAttr.value(_newAttrValue);
    
            // Culture name.
            xpath = DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageRootElementName + @'/' +
                    DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlSystemInfoRootElementName + @'/' +
                    '@' + DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + 'cultureName';
            xmlAttr = DocDataSourceProviderHelper::selectDsPackageXmlNode(xmlDataSource, xpath);
            if (xmlAttr == null)
            {
                return false;
            }
            xmlAttr.value(DocGlobalHelper::getCultureInfoStr(_newAttrValue));
    
            return true;
        }
    
        if (_updateDsActionToken == DocConstantDSP::UpdateDsActionTokenReportCaption)
        {
            xpath = DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageRootElementName + @'/' +
                    DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSections + @'/' +
                    DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSection +
                    @'[@' + DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSectionAttrType + '="' + DocConstantDSP::XmlMainDataType + '"]' +
                    @'/' +
                    DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSectionData + @'/' +
                    DocConstantDSP::XmlMainDataElementName + @'/@ReportCaption';
            xmlAttr = DocDataSourceProviderHelper::selectDsPackageXmlNode(xmlDataSource, xpath);
            if (xmlAttr == null)
            {
                return false;
            }
            xmlAttr.value(_newAttrValue);
            return true;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the parameters.
    /// </summary>
    /// <returns>True if the parameters are valid; otherwise false</returns>
    protected boolean validateParams()
    {
        boolean          paramsAreValid;
        Filename         filename;
        str              previewLanguageCandidate;
        container        previewLanguagesContainer;
        int              i;
    
    
        paramsAreValid = true;
    
        if (!this.parmParams().parmDocentricScriptEngine())
        {
            DocGlobalHelper::handleError('Parameter this.parmParams().parmDocentricScriptEngine() is not set', true, funcName());
            paramsAreValid = false;
        }

        if (!this.parmParams().parmCompanyId())
        {
            DocGlobalHelper::handleError('Parameter this.parmParams().parmCompanyId() is not set', true, funcName());
            paramsAreValid = false;
        }
    
        if (this.parmParams().parmDsLanguageId() == '')
        {
            DocGlobalHelper::handleError('Parameter this.parmParams().parmDsLanguageId() is not set', true, funcName());
            paramsAreValid = false;
        }

        // DS Language is set, check if it is valid.
        else if (!LanguageTable::exist(this.parmParams().parmDsLanguageId()))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX:LanguageNotExist", this.parmParams().parmDsLanguageId()), true, funcName());
            paramsAreValid = false;
        }
    
        if (this.parmParams().parmPreviewLanguages())
        {
            previewLanguagesContainer = str2con(this.parmParams().parmPreviewLanguages(), ',');
            for (i = 1; i <= conLen(previewLanguagesContainer); i++)
            {
                previewLanguageCandidate = conPeek(previewLanguagesContainer, i);
                if (!previewLanguageCandidate)
                {
                    continue;
                }
    
                previewLanguageCandidate = strLTrim(strRTrim(previewLanguageCandidate));
    
                if (!LanguageTable::exist(previewLanguageCandidate))
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:PreviewLanguagueNotExist", previewLanguageCandidate, this.parmParams().parmPreviewLanguages()),
                                                 true, funcName());
                    paramsAreValid = false;
                }
            }
        }
    
        if (this.parmParams().parmSaveXmlDataSourceToFile())
        {
            if (!this.parmParams().parmXmlDataSourceFilename())
            {
                DocGlobalHelper::handleError('Parameter this.parmParams().parmXmlDataSourceFilename() is not set', true, funcName());
                paramsAreValid = false;
            }
            else
            {
                filename = this.parmParams().parmXmlDataSourceFilename();
                if (!DocFileMngHelper::isValidOnlyFilename(filename))
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:DsInvalidFileName", filename), true, funcName());
                    paramsAreValid = false;
                }
            }
        }
    
        if (!this.isMailMergeQueryBased() &&
            !this.parmParams().parmDsProviderDerivedClassName())
        {
            DocGlobalHelper::handleError('Parameter this.parmParams().parmDsProviderDerivedClassName() is not set', true, funcName());
            paramsAreValid = false;
        }

        return paramsAreValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOnClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the DocDataSourceProviderBase class.
    /// </summary>
    /// <param name = "_dsProviderDerivedClassName">The name of the DSP class</param>
    /// <returns>An instance of the DocDataSourceProviderBase class</returns>
    public client static DocDataSourceProviderBase constructOnClient(ClassName _dsProviderDerivedClassName)
    {
        if (!_dsProviderDerivedClassName)
        {
            DocGlobalHelper::handleException(funcName(), 'The data source provider class name must be specified.');
        }

        SysDictClass dataSourceProviderSysDictClass = new SysDictClass(className2Id(_dsProviderDerivedClassName));
        if (!dataSourceProviderSysDictClass)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('The data source provider class (%1) does not exist in the AOT.', _dsProviderDerivedClassName));
        }
        DocDataSourceProviderBase dataSourceProviderClassInstance = dataSourceProviderSysDictClass.makeObject();
    
        return dataSourceProviderClassInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the DocDataSourceProviderBase class.
    /// </summary>
    /// <param name = "_dsProviderDerivedClassName">The name of the DSP class</param>
    /// <returns>An instance of the DocDataSourceProviderBase class</returns>
    public server static DocDataSourceProviderBase constructOnServer(ClassName _dsProviderDerivedClassName)
    {
        if (!_dsProviderDerivedClassName)
        {
            DocGlobalHelper::handleException(funcName(), 'The data source provider class name must be specified.');
        }
    
        SysDictClass dataSourceProviderSysDictClass = new SysDictClass(className2Id(_dsProviderDerivedClassName));
        if (!dataSourceProviderSysDictClass)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('The data source provider class (%1) does not exist in the AOT.', _dsProviderDerivedClassName));
        }
        DocDataSourceProviderBase dataSourceProviderClassInstance = dataSourceProviderSysDictClass.makeObject();
    
        return dataSourceProviderClassInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportRunContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the report run context.
    /// </summary>
    private void updateReportRunContext()
    {
        if (flavour == DocFlavour::Reporting)
        {
            if (this.parmParamsReporting().parmReportRunContext() != null &&
                this.parmParamsReporting().parmReportRunContext().parmPrintDestination() != DocPrintDestination::GenerateDataSource)
            {
                // (1) Update report run context with Language ID, in case that it has been changed in the preRunGenerateDS() or postRunGenerateDS() methods.
                DocReportRunContext reportRunContext = this.parmParamsReporting().parmReportRunContext();
                reportRunContext.parmTemplateLanguageId(this.parmParams().parmDsLanguageId());
                // If default Docentric template hasn't been resolved before, try to resolve it now.
                reportRunContext.resolveDefaultDocentricTemplate();

                // (2) Check the license for Email templates.
                if (this.parmParamsReporting().parmReportRunContext().parmPrintDestination() == DocPrintDestination::Email)
                {
                    /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                    /*
                        In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                        is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                        the Docentric AX Free Edition product.
                        You must keep intact all parts of the source code related to the licensing of the full product version.
                        Read more: https://ax.docentric.com/free-edition-license/
                    */
                    /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                    
                    if (reportRunContext.emailPrintDestSettings().parmUseEmailTemplate())
                    {
                        // If the email template is used, check the license. This feature cannot be used with Free Edition!
                        // This call will throw an exception if the license is not found or if the license is invalid.
                        DocLicenseMng::checkLicense(DocConstant::FeatureEmailTemplates, strFmt("@DocentricAX3:FailedToEmailReportWithEmailTemplate", reportRunContext.emailPrintDestSettings().parmEmailTemplateId()));
                    }
                }

                // (3) Resolve Email template ID (if it is set to @EMAIL_DEFAULT_TEMPLATE@) and load the email body.
                // Note that, regardless of the target print destination, we always load the email body from the email template if 'Use email template' is turned on.
                reportRunContext.emailPrintDestSettings().loadEmailTemplate(reportRunContext.reportId(), reportRunContext.parmTemplateCompanyId(), reportRunContext.parmTemplateLanguageId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceUserDefinedPlaceholdersBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces user-defined placeholders.
    /// </summary>
    private void replaceUserDefinedPlaceholdersBase()
    {
        DocDataSourceProviderReporting dsProviderReporting;
        str errorMsg = strFmt('Error during replacing user-defined placeholders. DSP class: %1, method: %2()', classId2Name(classIdGet(this)), methodStr(DocDataSourceProviderReporting, replaceUserDefinedPlaceholders));
    
        // Execute this method if this is a report data provider (flavour is DocFlavour::Reporting)
        if (flavour == DocFlavour::Reporting)
        {
            if (this.parmParamsReporting().parmReportRunContext() != null)
            {
                try
                {
                    dsProviderReporting = this as DocDataSourceProviderReporting;
                    dsProviderReporting.replaceUserDefinedPlaceholders(this.parmParamsReporting().parmReportRunContext());
                }
                catch (Exception::CLRError)
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleClrException(funcName(), errorMsg, Exception::Error, DocConstantDiagnostics::ErrReplaceUserDefinedPlaceholders);
                }
                catch
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleException(funcName(), errorMsg, DocConstantDiagnostics::ErrReplaceUserDefinedPlaceholders);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettingsBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the report run settings.
    /// </summary>
    private void overrideReportRunSettingsBase()
    {
        DocDataSourceProviderReporting dsProviderReporting;
        str errorMsg = strFmt('Error during execution of the overrideReportRunSettings() method of the DSP class: %1', classId2Name(classIdGet(this)));
    
        // Execute this method if this is a report data provider (flavour is DocFlavour::Reporting)
        if (flavour == DocFlavour::Reporting)
        {
            if (this.parmParamsReporting().parmReportRunContext() != null)
            {
                try
                {
                    dsProviderReporting = this as DocDataSourceProviderReporting;
                    dsProviderReporting.overrideReportRunSettings(this.parmParamsReporting().parmReportRunContext(), true);
                    dsProviderReporting.overrideReportRunSettingsPostActions(this.parmParamsReporting().parmReportRunContext());
                }
                catch (Exception::CLRError)
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleClrException(funcName(), errorMsg, Exception::Error, DocConstantDiagnostics::ErrOverrideReportRunSettings);
                }
                catch
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleException(funcName(), errorMsg, DocConstantDiagnostics::ErrOverrideReportRunSettings);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSharePointMetadataBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SharePoint metadata.
    /// </summary>
    private void processSharePointMetadataBase()
    {
        DocDataSourceProviderReporting dsProviderReporting;
        str errorMsg = strFmt('Error during processing SharePoint metadata. DSP class: %1, method: %2()', classId2Name(classIdGet(this)), methodStr(DocDataSourceProviderReporting, processSharePointMetadata));
    
        // Execute this method if this is a report data provider (flavour is DocFlavour::Reporting).
        if (flavour == DocFlavour::Reporting)
        {
            if (this.parmParamsReporting().parmReportRunContext() != null &&
                this.parmParamsReporting().parmReportRunContext().parmPrintDestination() != DocPrintDestination::GenerateDataSource)
            {
                try
                {
                    dsProviderReporting = this as DocDataSourceProviderReporting;
                    dsProviderReporting.processSharePointMetadata(this.parmParamsReporting().parmReportRunContext());
                }
                catch (Exception::CLRError)
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleClrException(funcName(), errorMsg, Exception::Error, DocConstantDiagnostics::ErrSharePointMetadata);
                }
                catch
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleException(funcName(), errorMsg, DocConstantDiagnostics::ErrSharePointMetadata);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReportAttachmentsBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the report attachments.
    /// </summary>
    private void loadReportAttachmentsBase()
    {
        DocDataSourceProviderReporting dsProviderReporting;
        str errorMsg = strFmt('Error during loading report attachments. DSP class: %1, method: %2()', classId2Name(classIdGet(this)), methodStr(DocDataSourceProviderReporting, loadReportAttachments));
    
        // Execute this method if this is a report data provider (flavour is DocFlavour::Reporting).
        if (flavour == DocFlavour::Reporting)
        {
            /* So far, we support report attachments only for Email print destination */
            if (this.parmParamsReporting().parmReportRunContext() != null &&
                this.parmParamsReporting().parmReportRunContext().parmPrintDestination() == DocPrintDestination::Email &&
                !this.parmParamsReporting().parmReportRunContext().generateDSPrintDestSettings().parmIsGeneratedAlongsideReport())
            {

                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                /*
                   In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                   is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                   the Docentric AX Free Edition product.
                   You must keep intact all parts of the source code related to the licensing of the full product version.
                   Read more: https://ax.docentric.com/free-edition-license/
                */
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                
                if (this.parmParamsReporting().parmReportRunContext().attachmentRuleList() != null &&
                    this.parmParamsReporting().parmReportRunContext().attachmentRuleList().elements() > 0)
                {
                    // If the report attachments are provided, check the license. This feature cannot be used with Free Edition!
                    // This call will throw an exception if the license is not found or if the license is invalid.
                    DocLicenseMng::checkLicense(DocConstant::FeatureEmailAttachments, "@DocentricAX3:FailedToEmailReportWithAttachments");
                }

                try
                {
                    dsProviderReporting = this as DocDataSourceProviderReporting;
                    dsProviderReporting.loadReportAttachments(this.parmParamsReporting().parmReportRunContext());
                }
                catch (Exception::CLRError)
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleClrException(funcName(), errorMsg, Exception::Error, DocConstantDiagnostics::ErrLoadReportAttachments);
                }
                catch
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleException(funcName(), errorMsg, DocConstantDiagnostics::ErrLoadReportAttachments);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadExternalFilesBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the external files.
    /// </summary>
    private void loadExternalFilesBase()
    {
        // Execute this method if this is a report data provider (flavour is DocFlavour::Reporting).
        if (flavour == DocFlavour::Reporting)
        {
            /* So far, we support external files only for Email print destination */
            if (this.parmParamsReporting().parmReportRunContext() != null &&
                this.parmParamsReporting().parmReportRunContext().parmPrintDestination() == DocPrintDestination::Email)
            {

                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                /*
                   In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                   is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                   the Docentric AX Free Edition product.
                   You must keep intact all parts of the source code related to the licensing of the full product version.
                   Read more: https://ax.docentric.com/free-edition-license/
                */
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

                /* The following part will be updated in one of the next versions to fit the new functionality:

                if (this.parmParamsReporting().parmReportRunContext().attachmentRuleList() != null &&
                    this.parmParamsReporting().parmReportRunContext().attachmentRuleList().elements() > 0)
                {
                    // If the report attachments are provided, check the license. This feature cannot be used with Free Edition!
                    // This call will throw an exception if the license is not found or if the license is invalid.
                    DocLicenseMng::checkLicense(DocConstant::FeatureExternalFilesAsEmailAttachments, "@DocentricAX3:FailedToEmailReportWithExternalFiles");
                }

                str errorMsg = strFmt('Error during loading report attachments from external files. DSP class: %1, method: %2()', classId2Name(classIdGet(this)), methodStr(DocDataSourceProviderReporting, loadExternalFiles));

                try
                {
                    DocDataSourceProviderReporting dsProviderReporting = this as DocDataSourceProviderReporting;
                    dsProviderReporting.loadExternalFiles(this.parmParamsReporting().parmReportRunContext());
                }
                catch (Exception::CLRError)
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleClrException(funcName(), errorMsg, Exception::Error, DocConstantDiagnostics::ErrLoadExternalFiles);
                }
                catch
                {
                    this.cleanUpBase();
                    DocGlobalHelper::handleException(funcName(), errorMsg, DocConstantDiagnostics::ErrLoadExternalFiles);
                }

                */
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>