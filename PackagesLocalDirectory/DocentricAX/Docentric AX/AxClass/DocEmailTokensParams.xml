<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTokensParams</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocEmailTokensParams
{
    SRSPrintMediumType                  printMediumType;
    Common                              jour;
    AccountNum                          accountNum;
    PrintMgmtPrintDestinationPartyType  partyType;
    Num                                 documentId;
    str                                 documentType;
    boolean                             isAccountFilled;    // Set after we fill accountNum, documentId, etc.

    DocEmailTokensReplacementInfo       replacementInfoTo;
    DocEmailTokensReplacementInfo       replacementInfoCc;
    DocEmailTokensReplacementInfo       replacementInfoBcc;

    Map                                 commonTokensMap;    // Map[token (str), token resolved/unresolved value (str)]
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SRSPrintMediumType _printMediumType)
    {
        printMediumType = _printMediumType;

        replacementInfoTo = new DocEmailTokensReplacementInfo(DocEmailAddressField::To);
        replacementInfoCc = new DocEmailTokensReplacementInfo(DocEmailAddressField::Cc);
        replacementInfoBcc = new DocEmailTokensReplacementInfo(DocEmailAddressField::Bcc);

        commonTokensMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMediumType</Name>
				<Source><![CDATA[
    public SRSPrintMediumType parmPrintMediumType(SRSPrintMediumType _printMediumType = printMediumType)
    {
        printMediumType = _printMediumType;
        return printMediumType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonTokensMap</Name>
				<Source><![CDATA[
    public Map parmCommonTokensMap(Map _commonTokensMap = commonTokensMap)
    {
        commonTokensMap = _commonTokensMap;
        return commonTokensMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJour</Name>
				<Source><![CDATA[
    public Common parmJour(Common _jour = jour)
    {
        jour = _jour;
        return jour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    public AccountNum parmAccountNum(AccountNum _accountNum = accountNum)
    {
        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartyType</Name>
				<Source><![CDATA[
    public PrintMgmtPrintDestinationPartyType parmPartyType(PrintMgmtPrintDestinationPartyType _partyType = partyType)
    {
        partyType = _partyType;
        return partyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentId</Name>
				<Source><![CDATA[
    public Num parmDocumentId(Num _documentId = documentId)
    {
        documentId = _documentId;
        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentType</Name>
				<Source><![CDATA[
    public str parmDocumentType(str _documentType = documentType)
    {
        documentType = _documentType;
        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAccountFilled</Name>
				<Source><![CDATA[
    public boolean parmIsAccountFilled(boolean _isAccountFilled = isAccountFilled)
    {
        isAccountFilled = _isAccountFilled;
        return isAccountFilled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacementInfoTo</Name>
				<Source><![CDATA[
    public DocEmailTokensReplacementInfo parmReplacementInfoTo(DocEmailTokensReplacementInfo _replacementInfoTo = replacementInfoTo)
    {
        replacementInfoTo = _replacementInfoTo;
        return replacementInfoTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacementInfoCc</Name>
				<Source><![CDATA[
    public DocEmailTokensReplacementInfo parmReplacementInfoCc(DocEmailTokensReplacementInfo _replacementInfoCc = replacementInfoCc)
    {
        replacementInfoCc = _replacementInfoCc;
        return replacementInfoCc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplacementInfoBcc</Name>
				<Source><![CDATA[
    public DocEmailTokensReplacementInfo parmReplacementInfoBcc(DocEmailTokensReplacementInfo _replacementInfoBcc = replacementInfoBcc)
    {
        replacementInfoBcc = _replacementInfoBcc;
        return replacementInfoBcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurposeToken</Name>
				<Source><![CDATA[
    public boolean isPurposeToken(str _token, Set _purposeTokenSet)
    {
        if (_purposeTokenSet != null)
        {
            // Remove the prefix for delivery address token if it exists
            str token = strReplace(_token, DocConstant::EmailTokenDeliveryAddressPurposePrefix, '');
            return _purposeTokenSet.in(token);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimaryBusinessToken</Name>
				<Source><![CDATA[
    public boolean isPrimaryBusinessToken(str _token)
    {
        return (_token == '' || _token == DocConstant::EmailTokenDeliveryAddressPrimaryContact);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>