<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderParamsReporting</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocDataSourceProviderParamsReporting implements SysPackable
{
    str                             reportId;
    str                             reportCaption;
    MenuItemName                    reportMenuItemName;
    MenuItemType                    reportMenuItemType;
    DocPrintMgmtOriginalCopyType    originalCopyType;
    DataAreaId                      reportExecutionContextDataAreaId;
    TableId                         reportExecutionContextTableId;
    TableName                       reportExecutionContextTableName;
    RefRecId                        reportExecutionContextTableRecId;
    Map                             basicReportParameterMap; // (ParameterName, DocReportParameter)
    SrsReportDataContract           srsReportContract;
    DocReportRunContext             reportRunContext;
    boolean                         isPrintingSsrsBuiltInDesign;
    DocPrintDestination             targetPrintDestination;
    boolean                         isTargetTemplateERBased;
    str                             documentTitleOriginal;


    #define.packVersion1(1)
    #define.currentPackVersion(2) // Added documentTitleOriginal (str).

    #localmacro.listVersion1
        version,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableName,
        reportExecutionContextTableRecId,
        originalCopyType,
        isPrintingSsrsBuiltInDesign,
        targetPrintDestination,
        isTargetTemplateERBased
    #endMacro

    #localmacro.currentList
        version,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableName,
        reportExecutionContextTableRecId,
        originalCopyType,
        isPrintingSsrsBuiltInDesign,
        targetPrintDestination,
        isTargetTemplateERBased,
        documentTitleOriginal
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int       version = #currentPackVersion;
        container basicReportParameters = conNull();
        container srsReportContractContainer = conNull();
        container reportRunContextContainer = conNull();
    
        if (basicReportParameterMap != null)
        {
            basicReportParameters = basicReportParameterMap.pack();
        }
        if (srsReportContract != null)
        {
            srsReportContractContainer = srsReportContract.pack();
        }
        if (reportRunContext != null)
        {
            reportRunContextContainer = reportRunContext.pack();
        }
    
        reportExecutionContextTableName = tableId2name(reportExecutionContextTableId);
    
        return [#currentList, basicReportParameters, srsReportContractContainer, reportRunContextContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBasicReportParameterMap</Name>
				<Source><![CDATA[
    // Map(ParameterName str, DocReportParameter class instance)
    public Map parmBasicReportParameterMap(Map _basicReportParameterMap = basicReportParameterMap)
    {
        basicReportParameterMap = _basicReportParameterMap;
    
        if (basicReportParameterMap == null)
        {
            basicReportParameterMap = new Map(Types::String, Types::Class);
        }
    
        return basicReportParameterMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportMenuItemName</Name>
				<Source><![CDATA[
    public MenuItemName parmReportMenuItemName(MenuItemName _reportMenuItemName = reportMenuItemName)
    {
        reportMenuItemName = _reportMenuItemName;
        return reportMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportMenuItemType</Name>
				<Source><![CDATA[
    public MenuItemType parmReportMenuItemType(MenuItemType _reportMenuItemType = reportMenuItemType)
    {
        reportMenuItemType = _reportMenuItemType;
        return reportMenuItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalCopyType</Name>
				<Source><![CDATA[
    public DocPrintMgmtOriginalCopyType parmOriginalCopyType(DocPrintMgmtOriginalCopyType _originalCopyType = originalCopyType)
    {
        originalCopyType = _originalCopyType;
        return originalCopyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentTitleOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the report Original document title.
    /// Contains either Label ID or Label translation in the runtime report language,
    /// which is translated before Docentric pipeline starts.
    /// Label translation is presented for SalesInvoice, FreeTextInvoie and PSAQuotations.
    /// </summary>
    /// <param name = "_documentTitleOriginal">Original document title</param>
    /// <returns>Original document title</returns>
    public str parmDocumentTitleOriginal(str _documentTitleOriginal = documentTitleOriginal)
    {
        documentTitleOriginal = _documentTitleOriginal;
        return documentTitleOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportCaption</Name>
				<Source><![CDATA[
    public str parmReportCaption(str _reportCaption = reportCaption)
    {
        reportCaption = _reportCaption;
        return reportCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmReportExecutionContextDataAreaId(DataAreaId _reportExecutionContextDataAreaId = reportExecutionContextDataAreaId)
    {
        reportExecutionContextDataAreaId = _reportExecutionContextDataAreaId;
        return reportExecutionContextDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableId</Name>
				<Source><![CDATA[
    public TableId parmReportExecutionContextTableId(TableId _reportExecutionContextTableId = reportExecutionContextTableId)
    {
        reportExecutionContextTableId = _reportExecutionContextTableId;
        reportExecutionContextTableName = tableId2name(reportExecutionContextTableId);
        return reportExecutionContextTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableRecId</Name>
				<Source><![CDATA[
    public RefRecId parmReportExecutionContextTableRecId(RefRecId _reportExecutionContextTableRecId = reportExecutionContextTableRecId)
    {
        reportExecutionContextTableRecId = _reportExecutionContextTableRecId;
        return reportExecutionContextTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    public str parmReportId(str _reportId = reportId)
    {
        reportId = _reportId;
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetPrintDestination</Name>
				<Source><![CDATA[
    public DocPrintDestination parmTargetPrintDestination(DocPrintDestination _targetPrintDestination = targetPrintDestination)
    {
        targetPrintDestination = _targetPrintDestination;
        return targetPrintDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTargetTemplateERBased</Name>
				<Source><![CDATA[
    public boolean parmIsTargetTemplateERBased(boolean _isTargetTemplateERBased = isTargetTemplateERBased)
    {
        isTargetTemplateERBased = _isTargetTemplateERBased;
        return isTargetTemplateERBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintingSsrsBuiltInDesign</Name>
				<Source><![CDATA[
    public boolean isPrintingSsrsBuiltInDesign(boolean _isPrintingSsrsBuiltInDesign = isPrintingSsrsBuiltInDesign)
    {
        isPrintingSsrsBuiltInDesign = _isPrintingSsrsBuiltInDesign;
        return isPrintingSsrsBuiltInDesign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportRunContext</Name>
				<Source><![CDATA[
    public DocReportRunContext parmReportRunContext(DocReportRunContext _reportRunContext = reportRunContext)
    {
        reportRunContext = _reportRunContext;
        return reportRunContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSrsReportContract</Name>
				<Source><![CDATA[
    public SrsReportDataContract parmSrsReportContract(SrsReportDataContract _srsReportContract = srsReportContract)
    {
        srsReportContract = _srsReportContract;
        return srsReportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean   ret = false;
        int       version;
        container basicReportParametersContainer;
        container srsReportContractContainer;
        container reportRunContextContainer;
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #currentPackVersion)
            {
                [#currentList, basicReportParametersContainer, srsReportContractContainer, reportRunContextContainer] = _pack;
                ret = true;
            }

            else if (version == #packVersion1)
            {
                [#listVersion1, basicReportParametersContainer, srsReportContractContainer, reportRunContextContainer] = _pack;
                ret = true;
            }

            if (ret)
            {
                reportExecutionContextTableId = tableName2id(reportExecutionContextTableName);
    
                if (basicReportParametersContainer != conNull())
                {
                    basicReportParameterMap = Map::create(basicReportParametersContainer);
                }
                else
                {
                    basicReportParameterMap = null;
                }
            
                if (srsReportContractContainer != conNull())
                {
                    srsReportContract = new SrsReportDataContract();
                    ret = srsReportContract.unpack(srsReportContractContainer) && ret;
                }
                else
                {
                    srsReportContract = null;
                }
            
                if (reportRunContextContainer != conNull())
                {
                    reportRunContext = new DocReportRunContext();
                    ret = reportRunContext.unpack(reportRunContextContainer) && ret;
                }
                else
                {
                    reportRunContext = null;
                }
            }
            
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>