<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPdfSecurityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;
using Docentric.AX.Documents.Pdf.Encryption;
using Docentric.AX.Documents.Pdf.DigitalSignature;
using Docentric.AX.Certificates;
using DSA = Docentric.AX.Documents.Pdf.DigitalSignature.SignatureAppearance;
using Docentric.AX.Security.Azure.KeyVault;
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The DocPdfSecurityManager class is a manager for PDF security.
/// </summary>
public class DocPdfSecurityManager
{
    private DocPdfSignatureSettings signatureSettings;
    private System.IO.MemoryStream sourceDocument = null;
    private LanguageId languageId = Global::currentUserLanguage();
    private DocPdfEcryptionPassword pdfPassword;
    private DocEncryptionAlgorithm pdfEncryptionAlgorithm;
    protected UnknownNoYes isPdfOutputFormat = UnknownNoYes::Unknown;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPdfSignatureSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the PDF signature settings object.
    /// </summary>
    /// <param name = "_signatureSettings">PDF signature settings</param>
    public void setPdfSignatureSettings(DocPdfSignatureSettings _signatureSettings)
    {
        signatureSettings = _signatureSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the language Id.
    /// </summary>
    /// <param name = "_languageId">Language Id</param>
    public void setLanguageId(LanguageId _languageId = Global::currentUserLanguage())
    {
        languageId = _languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdfPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the password used to encrypt the source document.
    /// </summary>
    /// <param name = "_pdfPassword">Password</param>
    public void setPdfPassword(DocPdfEcryptionPassword _pdfPassword)
    {
        pdfPassword = _pdfPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdfEncryptionAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the encryption algorithm used to encrypt the source document.
    /// </summary>
    /// <param name = "_pdfEncryptionAlgorithm">Encryption algorithm</param>
    public void setPdfEncryptionAlgorithm(DocEncryptionAlgorithm _pdfEncryptionAlgorithm)
    {
        pdfEncryptionAlgorithm = _pdfEncryptionAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdfSignatureOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PDF signature options object.
    /// </summary>
    /// <param name = "_signatureSettings">An instance of the DocPdfSignatureSettings class</param>
    /// <returns>PDF signature options</returns>
    public static DocPdfSignatureOptions getPdfSignatureOptions(DocPdfSignatureSettings _signatureSettings)
    {
        DocPdfSecurityManager pdfSecurityManager = new DocPdfSecurityManager();
        pdfSecurityManager.setPdfSignatureSettings(_signatureSettings);
        return pdfSecurityManager.getSignatureOptionsInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdfSignatureProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PDF signature provider object.
    /// </summary>
    /// <param name = "_signatureSettings">An instance of the DocPdfSignatureSettings class</param>
    /// <returns>PDF signature provider</returns>
    public static IDocExternalSignatureProvider getPdfSignatureProvider(DocPdfSignatureSettings _signatureSettings)
    {
        DocPdfSecurityManager pdfSecurityManager = new DocPdfSecurityManager();
        pdfSecurityManager.setPdfSignatureSettings(_signatureSettings);
        return pdfSecurityManager.getSignatureProviderInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the source document.
    /// </summary>
    /// <param name = "_sourceDocument">Source document</param>
    public void setSourceDocument(System.IO.MemoryStream _sourceDocument)
    {
        sourceDocument = _sourceDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target document as memory stream.
    /// The returned target document can be:
    /// - signed, if canSign is true
    /// - encrypted, if canEncrypted is true
    /// - encrypted and signed, if canEncrypted and canSign are true
    /// - unchanged, if canEncrypted and canSign are false
    /// </summary>
    /// <returns>Target document as memory stream</returns>
    public System.IO.MemoryStream getTargetDocument()
    {
        System.IO.MemoryStream targetDocument = sourceDocument;

        if (this.canEncrypt() && this.canSign())
        {
            targetDocument = this.signDocumentInternal(this.encryptDocumentInternal());
        }
        else if (this.canEncrypt())
        {
            targetDocument = this.encryptDocumentInternal();
        }
        else if (this.canSign())
        {
            targetDocument = this.signDocumentInternal();
        }

        // Reset the cached variables.
        isPdfOutputFormat = UnknownNoYes::Unknown;

        return targetDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the source document file format is PDF.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isPdfOutputFileFormat()
    {
        if (isPdfOutputFormat == UnknownNoYes::Unknown)
        {
            sourceDocument.Position = 0;
            DocFileType docFileType = DocFileDetection::GetKnownFileType(sourceDocument);
            sourceDocument.Position = 0;
            isPdfOutputFormat = docFileType == DocFileType::Pdf ? UnknownNoYes::Yes : UnknownNoYes::No;
        }
        return isPdfOutputFormat == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEncrypt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the encryption of the document can be done.
    /// The encryption can be done when:
    /// - the source document is PDF
    /// - the encryption password is not empty
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canEncrypt()
    {
        return (this.isPdfOutputFileFormat() 
                    && pdfPassword);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the signature of the source document can be done.
    /// The signature can be done when:
    /// - the source document is PDF
    /// - the PDF signature settings are set
    /// - the PDF signature settings are enabled
    /// - the PDF signature certificate is set
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canSign()
    {
        return (this.isPdfOutputFileFormat() 
                    && signatureSettings != null 
                    && signatureSettings.parmIsEnabled()
                    && signatureSettings.parmSignatureCertificateSettings() != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptDocumentInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts the source document content with the provided password and returns the encrypted source document content.
    /// </summary>
    /// <returns>Encrypted source document content</returns>
    private System.IO.MemoryStream encryptDocumentInternal()
    {
        System.IO.MemoryStream sourceContentEncrypted = new System.IO.MemoryStream();

        str errMsg = "@DocentricAX3:PDFEncryptionEncryptDocumentError";
        try
        {
            // Check the password policy
            DocPdfEncryptionSettings::validatePassword(pdfPassword, false, false);

            using (System.IO.MemoryStream sourceContent = sourceDocument)
            {
                // Create the encryption options
                DocPdfEncryptionProperties encryptionProperties = new DocPdfEncryptionProperties(pdfPassword, null);

                DocPdfEncryptionAlgorithm docPdfEncryptionAlgorithm;
                encryptionProperties.EncryptionAlgorithm = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(docPdfEncryptionAlgorithm.GetType(), enumNum(DocEncryptionAlgorithm), pdfEncryptionAlgorithm);

                // Protect and encrypt the PDF document
                DocPdfEncryptor::EncryptPdf(sourceContent, sourceContentEncrypted, encryptionProperties);
            }

            // Reset the position of the returned stream to the beggining
            sourceContentEncrypted.Position = 0;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrPdfEncryption);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrPdfEncryption);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg, DocConstantDiagnostics::ErrPdfEncryption);
        }
        return sourceContentEncrypted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDocumentInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signs the source document content.
    /// </summary>
    /// <param name = "_sourceContentEncrypted">An encrypted source document content</param>
    /// <returns>Signed source document content</returns>
    private System.IO.MemoryStream signDocumentInternal(System.IO.MemoryStream _sourceContentEncrypted = null)
    {
        System.IO.MemoryStream sourceContentSigned;
        str errMsg = "@DocentricAX3:PDFSignatureSignDocumentError";

        try
        {
            using (IDocExternalSignatureProvider externalSignatureProvider = this.getSignatureProviderInternal())
            {
                System.IO.MemoryStream sourceContent = null;
                if (this.canEncrypt())
                {
                    // Because the PDF was encrypted and protected before we need to specify again the passwords (minimum is user password)
                    externalSignatureProvider.OpenPdfPassword = pdfPassword;

                    sourceContent = _sourceContentEncrypted;
                }
                else
                {
                    sourceContent = sourceDocument;

                    // Check if the PDF document was already signed. If so, we do not sign it again becasue we support only one signature per document.
                    if (DocPdfSigner::IsSigned(sourceContent))
                    {
                        // Reset the position of the returned stream to the beggining
                        sourceContent.Position = 0;
                        return sourceContent;
                    }
                }

                // Digitally sign the PDF with the requested provider and settings.
                sourceContentSigned = new System.IO.MemoryStream();
                DocPdfSigner::SignPdf(sourceContent, sourceContentSigned, externalSignatureProvider);
            
                // Reset the position of the returned stream to the beggining
                sourceContentSigned.Position = 0;
                sourceContent.Dispose();
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrPdfSigning);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrPdfSigning);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg, DocConstantDiagnostics::ErrPdfSigning);
        }
        return sourceContentSigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignatureProviderInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the signature implementation.
    /// </summary>
    /// <returns>The requested signature implementation.</returns>
    private IDocExternalSignatureProvider getSignatureProviderInternal()
    {
        IDocExternalSignatureProvider externalSignatureProvider;

        DocElectronicSignatureCertificateSettings signatureCertificateSettings = signatureSettings.parmSignatureCertificateSettings();

        // Create detached - external digital signature class with the implementation for applying the digital signature
        switch (signatureCertificateSettings.parmCertificateStorage())
        {
            case DocCertificateStorage::Database:
                // Construct DocLocalCertificateExternalSignature with Stream to PFX file and private key password
                externalSignatureProvider = new DocLocalCertificateExternalSignatureProvider(
                    signatureCertificateSettings.parmCertificate(),
                    signatureCertificateSettings.parmCertificateThumbprint());
                break;

            case DocCertificateStorage::KeyVault:
                str keyVaultSecretUrl = KeyVaultProtocolUtils::GetIdentifierUrlFromKeyVaultProtocol(
                                            signatureCertificateSettings.parmAzureKeyVaultSecretIdentifier(),
                                            KeyVaultObjectType::Secret,
                                            signatureCertificateSettings.parmAzureKeyVaultUrl());

                str keyVaultKeyUrl = KeyVaultProtocolUtils::GetIdentifierUrlFromKeyVaultProtocol(
                                            signatureCertificateSettings.parmAzureKeyVaultKeyIdentifier(),
                                            KeyVaultObjectType::Key,
                                            signatureCertificateSettings.parmAzureKeyVaultUrl());

                externalSignatureProvider = new DocAzureKeyVaultExternalSignatureProvider(
                    signatureCertificateSettings.parmAzureKeyVaultApplicationId(),
                    signatureCertificateSettings.parmAzureKeyVaultSecret(),
                    keyVaultSecretUrl,
                    keyVaultKeyUrl);
                break;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported certificate storage (%1)', signatureCertificateSettings.parmCertificateStorage()));
        }

        // Define PDF digital signature properties
        externalSignatureProvider.SignatureOptions = this.getSignatureOptionsInternal();

        // Return the signature provider
        return externalSignatureProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignatureOptionsInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PDF signature options for provided PDF signature settings.
    /// </summary>
    /// <returns>PDF signature options</returns>
    private DocPdfSignatureOptions getSignatureOptionsInternal()
    {
        DocPdfSignatureOptions signatureOptions = new DocPdfSignatureOptions();
        if (signatureSettings == null)
        {
            return signatureOptions;
        }

        // Define PDF digital signature properties
        signatureOptions.EnsureLTVSignature = signatureSettings.parmLongTermValidation();
        signatureOptions.Reason = signatureSettings.parmReason();
        signatureOptions.Location = signatureSettings.parmLocation();
        signatureOptions.ContactInformation = signatureSettings.parmContact();

        // Setup the digital signature appearance
        DocElectronicSignatureAppearanceSettings signatureAppearanceSettings = signatureSettings.parmSignatureAppearanceSettings();
        if (signatureAppearanceSettings == null)
        {
            return signatureOptions;
        }

        DSA.DocSignatureAppearance signatureAppearance = signatureOptions.SignatureAppearance;
        signatureAppearance.Visible = true; // Is it visible or not

        // Define on which pages the signature appearance will be shown
        signatureAppearance.AppearOnPage = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                   signatureAppearance.AppearOnPage.GetType(),
                                                   enumNum(DocSignatureAppearOnPage),
                                                   signatureAppearanceSettings.parmSignatureAppearOnPage());

        
        // Define the starting point of X and Y coordinate for signature appearance
        signatureAppearance.SignaturePosition = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                    signatureAppearance.SignaturePosition.GetType(),
                                                    enumNum(DocSignaturePosition),
                                                    signatureAppearanceSettings.parmSignaturePosition());

        // Setup the rectangle size
        DocDocumentLengthUnit signatureUnitOfMeasure;
        signatureUnitOfMeasure = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                     signatureUnitOfMeasure.GetType(),
                                     enumNum(DocDocumentUnitOfMeasure),
                                     signatureAppearanceSettings.parmUnitOfMeasure());
        signatureAppearance.SetSignaturePosition(
                                     signatureUnitOfMeasure,
                                     signatureAppearanceSettings.parmHorizontalOffset(),
                                     signatureAppearanceSettings.parmVerticalOffset(),
                                     signatureAppearanceSettings.parmWidth(),
                                     signatureAppearanceSettings.parmHeight());

        // Setup the signature font and maximum size. If the font size is to big to fit in the signature box, it is automatically decreased based on the content.
        signatureAppearance.SignatureFont = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                signatureAppearance.SignatureFont.GetType(),
                                                enumNum(DocSignatureFont),
                                                signatureAppearanceSettings.parmSignatureFont());
        signatureAppearance.SignatureFontSize = signatureAppearanceSettings.parmSignatureFontSize();

        // Show or hide the seal icon
        signatureAppearance.ShowSignatureAppearanceIcon = signatureAppearanceSettings.parmSignatureSealIconShow();

        // Resolve language for labels in the signature depending on the value of DocSignatureLanguageToUse enum
        LanguageId resolvedLanguageId;
        str languageSourceMsg;
        switch (signatureAppearanceSettings.parmSignatureLanguageToUse())
        {
            case DocSignatureLanguageToUse::ReportLanguage:
                resolvedLanguageId = languageId;
                languageSourceMsg = "@DocentricAX3:ElectronicSignatureAppearanceErrorLanguangeNotResolvedForReport";
                break;

            case DocSignatureLanguageToUse::UserLanguage:
                resolvedLanguageId = Global::currentUserLanguage();
                languageSourceMsg = strFmt("@DocentricAX3:ElectronicSignatureAppearanceErrorLanguangeNotResolvedForUser", curUserId());
                break;

            case DocSignatureLanguageToUse::CompanyLanguage:
                resolvedLanguageId = CompanyInfo::languageId();
                languageSourceMsg = strFmt("@DocentricAX3:ElectronicSignatureAppearanceErrorLanguangeNotResolvedForCompany", curExt());
                break;

            case DocSignatureLanguageToUse::ExplicitlyDefined:
                resolvedLanguageId = signatureAppearanceSettings.parmSignatureLanguageId();
                languageSourceMsg = strFmt("@DocentricAX3:ElectronicSignatureAppearanceErrorLanguangeNotResolvedForAppearanceId", signatureAppearanceSettings.parmSignatureAppearanceId());
                break;
        }
        if (!resolvedLanguageId)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:ElectronicSignatureAppearanceErrorLanguangeNotResolved", enum2Str(signatureAppearanceSettings.parmSignatureLanguageToUse()), languageSourceMsg));
        }

        // What to show in the signature box
        signatureAppearance.ShowLabels = true;

        signatureAppearance.ShowSigner = true;
        signatureAppearance.SignedByLabel = DocLabelHelper::resolveSysLabel(literalStr("@SYS138179"), resolvedLanguageId);

        signatureAppearance.ShowReason = signatureOptions.Reason != '';
        signatureAppearance.ReasonLabel = DocLabelHelper::resolveSysLabel(literalStr("@SYS86426"), resolvedLanguageId);

        signatureAppearance.ShowLocation = signatureOptions.Location != '';
        signatureAppearance.LocationLabel = DocLabelHelper::resolveSysLabel(literalStr("@SYS3794"), resolvedLanguageId);

        signatureAppearance.ShowContactInformation = signatureOptions.ContactInformation != '';
        signatureAppearance.ContactInformationLabel = DocLabelHelper::resolveSysLabel(literalStr("@SYS60248"), resolvedLanguageId);

        signatureAppearance.ShowSignatureDate = true;
        signatureAppearance.SignatureDateLabel = DocLabelHelper::resolveSysLabel(literalStr("@SYS339127"), resolvedLanguageId);

        // How to show signature date (use here .Net DateTime formatting)
        // More details: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tostring?view=netframework-4.6
        signatureAppearance.SignatureCultureInfo = DocGlobalHelper::getCultureInfo(resolvedLanguageId);
        signatureAppearance.SignatureDateFormat = signatureAppearanceSettings.parmSignatureDateTimeFormat();

        // Show signature text with background signature image
        signatureAppearance.SignatureAppearanceType = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                          signatureAppearance.SignatureAppearanceType.GetType(),
                                                          enumNum(DocSignatureAppearanceType),
                                                          signatureAppearanceSettings.parmSignatureAppearanceType());

        // Get the byte array of handwritten signature image
        signatureAppearance.SignatureImage = DocGlobalHelper::convertContainerToBytes(signatureAppearanceSettings.parmSignatureImage());

        return signatureOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signs the provided PDF source document.
    /// </summary>
    /// <param name = "_sourceDocument">PDF source document</param>
    /// <param name = "_signatureSettings">PDF signature settings</param>
    /// <param name = "_languageId">Language Id</param>
    /// <returns>Signed PDF document</returns>
    public static System.IO.MemoryStream signDocument(
        System.IO.MemoryStream _sourceDocument, 
        DocPdfSignatureSettings _signatureSettings, 
        LanguageId _languageId = Global::currentUserLanguage())
    {
        if (_sourceDocument == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The source document cannot be signed due to invalid parameters: _sourceDocument is null');
        }

        DocPdfSecurityManager docPdfSecurityManager = new DocPdfSecurityManager();
        docPdfSecurityManager.setSourceDocument(_sourceDocument);
        docPdfSecurityManager.setPdfSignatureSettings(_signatureSettings);
        docPdfSecurityManager.setLanguageId(_languageId);

        return docPdfSecurityManager.getTargetDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// /// Encrypts the provided PDF source document.
    /// </summary>
    /// <param name = "_sourceDocument">PDF source document</param>
    /// <param name = "_pdfPassword">PDF encryption password</param>
    /// <returns>Encrypted PDF document</returns>
    public static System.IO.MemoryStream encryptDocument(
        System.IO.MemoryStream _sourceDocument, 
        DocPdfEcryptionPassword _pdfPassword)
    {
        if (_sourceDocument == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The source document cannot be encrypted due to invalid parameters: _sourceDocument is null');
        }

        DocPdfSecurityManager docPdfSecurityManager = new DocPdfSecurityManager();
        docPdfSecurityManager.setSourceDocument(_sourceDocument);
        docPdfSecurityManager.setPdfPassword(_pdfPassword);

        return docPdfSecurityManager.getTargetDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptAndSignDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts and signs the provided PDF source document.
    /// </summary>
    /// <param name = "_sourceDocument">PDF source document</param>
    /// <param name = "_pdfPassword">PDF encryption password</param>
    /// <param name = "_signatureSettings">PDF signature settings</param>
    /// <param name = "_languageId">Language Id</param>
    /// <returns>Encrypted and signed PDF document</returns>
    public static System.IO.MemoryStream encryptAndSignDocument(
        System.IO.MemoryStream _sourceDocument, 
        DocPdfEcryptionPassword _pdfPassword, 
        DocPdfSignatureSettings _signatureSettings, 
        LanguageId _languageId = Global::currentUserLanguage())
    {
        if (_sourceDocument == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The source document cannot be encrypted/signed due to invalid parameters: _sourceDocument is null');
        }

        DocPdfSecurityManager docPdfSecurityManager = new DocPdfSecurityManager();
        docPdfSecurityManager.setSourceDocument(_sourceDocument);
        docPdfSecurityManager.setPdfPassword(_pdfPassword);
        docPdfSecurityManager.setPdfSignatureSettings(_signatureSettings);
        docPdfSecurityManager.setLanguageId(_languageId);

        return docPdfSecurityManager.getTargetDocument();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>