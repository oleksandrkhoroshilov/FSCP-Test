<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPlaceholderExpressionDesignerFunctionTreeManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using DOCFU = Docentric.AX.Framework.Utilities;
using DOCRX = Docentric.AX.Reporting.XPath;
using System.Collections;

/// <summary>
/// Manages a function tree view in the DocReportUserDefinedPlaceholderExpressionDesigner form.
/// </summary>
public class DocPlaceholderExpressionDesignerFunctionTreeManager
{
    private FormTreeControl formTreeControl;
    private List searchNextTreeItems;  // A tree item index list in ascending order
    private List searchPrevTreeItems;  // A tree item index list in descending order

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an expression designer tree manager.
    /// </summary>
    /// <param name = "_formTreeControl">An instance of a <c>FormTreeControl</c> object</param>
    /// <returns>An instance of a <c>DocPlaceholderExpressionDesignerFunctionTreeManager</c> object</returns>
    public static DocPlaceholderExpressionDesignerFunctionTreeManager construct(FormTreeControl _formTreeControl)
    {
        return new DocPlaceholderExpressionDesignerFunctionTreeManager(_formTreeControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// A constructor.
    /// </summary>
    /// <param name = "_formTreeControl">An instance of a <c>FormTreeControl</c> object</param>
    protected void new(FormTreeControl _formTreeControl)
    {
        formTreeControl = _formTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the form tree control from function and operator list.
    /// </summary>
    public void buildTree()
    {
        TreeItemIdx treeItemIdx;

        // Initialize the search lists
        searchPrevTreeItems = new List(Types::Integer);
        searchNextTreeItems = new List(Types::Integer);

        var functionGroupsList = DOCRX.XPathHelp::FunctionGroups;
        treeItemIdx = this.createNode(FormTreeAdd::Root, 'Functions/Variables', null, true);
        this.parseGroups(functionGroupsList, treeItemIdx);

        DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(formTreeControl, treeItemIdx, 1);

        var operatorGroupsList = DOCRX.XPathHelp::OperatorGroups;
        treeItemIdx = this.createNode(FormTreeAdd::Root, 'Operators', null, true);
        this.parseGroups(operatorGroupsList, treeItemIdx);

        DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(formTreeControl, treeItemIdx, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a group list.
    /// </summary>
    /// <param name = "_groupList">A group list</param>
    /// <param name = "_parentTreeItemIdx">A parent tree item index</param>
    private void parseGroups(anytype _groupList, TreeItemIdx _parentTreeItemIdx)
    {
        for (int i; i < DOCFU.ListHelper::Count(_groupList); i++)
        {
            var groupItem = DOCFU.ListHelper::GetItem(_groupList, i) as DOCRX.XPathHelpGroup;

            TreeItemIdx treeItemIdx = this.createNode(_parentTreeItemIdx, groupItem.Name, null, true);

            this.parseGroupItems(groupItem.Items, treeItemIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseGroupItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a group item list.
    /// </summary>
    /// <param name = "_groupItemList">A group item list</param>
    /// <param name = "_parentTreeItemIdx">A parent tree item index</param>
    private void parseGroupItems(anytype _groupItemList, TreeItemIdx _parentTreeItemIdx)
    {
        for (int i; i < DOCFU.ListHelper::Count(_groupItemList); i++)
        {
            var item = DOCFU.ListHelper::GetItem(_groupItemList, i) as DOCRX.XPathHelpItem;

            this.createNode(_parentTreeItemIdx, item.Name, item);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tree item node and adds it to the form tree control.
    /// </summary>
    /// <param name = "_parentTreeItemIdx">A parent tree item index</param>
    /// <param name = "_nodeName">A node name</param>
    /// <param name = "_data">A tree item data</param>
    /// <param name = "_hasChildren">Has an item node children</param>
    /// <returns>An index of the created tree item node</returns>
    private TreeItemIdx createNode(
        TreeItemIdx _parentTreeItemIdx,
        str _nodeName,
        anytype _data = null,
        boolean _hasChildren = false)
    {
        // Add a tree item to the form tree control
        TreeItemIdx treeItemIdx = SysFormTreeControl::addTreeItem(
            formTreeControl,
            _nodeName,
            _parentTreeItemIdx,
            _data,
            0,
            _hasChildren);

        // Add a tree item index to the search lists
        searchPrevTreeItems.addStart(treeItemIdx);
        searchNextTreeItems.addEnd(treeItemIdx);

        // Set a tree item text to Bold if tree item node has children
        if (_hasChildren)
        {
            FormTreeItem formTreeItem = formTreeControl.getItem(treeItemIdx);
            formTreeItem.stateBold(true);
            formTreeControl.setItem(formTreeItem);
        }

        return treeItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a description from a tree item data field for the selected tree item node.
    /// </summary>
    /// <param name = "_formTreeItem">A form tree item node</param>
    /// <returns>A description</returns>
    public str getDescription(FormTreeItem _formTreeItem)
    {
        str description = '';

        anytype data = _formTreeItem.data();
        if (data != null && data is DOCRX.XPathHelpItem)
        {
            DOCRX.XPathHelpItem item = data as DOCRX.XPathHelpItem;

            description = (item.Syntax ? strFmt('Syntax:\n%1\n\n', item.Syntax) : '') + strFmt('Description:\n\%1', item.Description);
        }
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSnippet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a snipet from a tree item data field for the selected tree item node.
    /// </summary>
    /// <param name = "_formTreeItem">A form tree item node</param>
    /// <returns>A snipet</returns>
    public str getSnippet(FormTreeItem _formTreeItem)
    {
        str snippet = '';
        anytype data = _formTreeItem.data();
        if (data != null && data is DOCRX.XPathHelpItem)
        {
            DOCRX.XPathHelpItem item = data as DOCRX.XPathHelpItem;

            snippet = item.Snippet;
        }
        return snippet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchTreeItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proper item index list depending on search direction.
    /// </summary>
    /// <param name = "_findPrev">Find the previous search direction</param>
    /// <returns>The item index list</returns>
    public List getSearchTreeItems(boolean _findPrev = false)
    {
        return _findPrev ? searchPrevTreeItems : searchNextTreeItems;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>