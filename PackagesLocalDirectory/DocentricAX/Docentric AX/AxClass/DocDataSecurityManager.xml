<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSecurityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocDataSecurityManager
{
    UserId userId;
    HcmWorkerRecId workerRecId;
    Set legalEntitySet;
    boolean isSystemAdmin, isDocentricAdmin, isDocentricPowerUser, isDocentricTemplateEditor;
    boolean noneDataSecurity, applyCustomDataConstraints, applyLegalEntityConstraint;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDataSecurity</Name>
				<Source><![CDATA[
    public static boolean checkDataSecurity(DocDataSecurityTemplateAction _action, str _reportId = '',
                                            str _templateId = '', str _companyId = curExt(), str _languageId = '',
                                            boolean _showForbiddingMsg = true)
    {
        DocDataSecurityManager dataSecurityMng = new DocDataSecurityManager();
        return dataSecurityMng.checkDataSecurityConstraints(_action, _reportId, _templateId, _companyId, _languageId, _showForbiddingMsg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInRoleDocentricPowerUser</Name>
				<Source><![CDATA[
    public boolean isInRoleDocentricPowerUser()
    {
        return isDocentricPowerUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInRoleDocentricTemplateEditor</Name>
				<Source><![CDATA[
    public boolean isInRoleDocentricTemplateEditor()
    {
        return isDocentricTemplateEditor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInRoleDocentricAdministrator</Name>
				<Source><![CDATA[
    public boolean isInRoleDocentricAdministrator()
    {
        return isDocentricAdmin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInRoleSystemAdministrator</Name>
				<Source><![CDATA[
    public boolean isInRoleSystemAdministrator()
    {
        return isSystemAdmin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerLegalEntities</Name>
				<Source><![CDATA[
    public Set getWorkerLegalEntities()
    {
        if (legalEntitySet == null || legalEntitySet.empty())
        {
            this.fillLegalEntityIds();
        }

        return legalEntitySet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentWorkerRecId</Name>
				<Source><![CDATA[
    public HcmWorkerRecId getCurrentWorkerRecId()
    {
        return workerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataSecurityConstraints</Name>
				<Source><![CDATA[
    public boolean checkDataSecurityConstraints(DocDataSecurityTemplateAction _action, str _reportId = '',
                                                str _templateId = '', str _companyId = curExt(), str _languageId = '',
                                                boolean _showForbiddingMsg = true)
    {
        // If there is no Data Security flag set, exit the method.
        if (noneDataSecurity)
        {
            return true;
        }

        // If the user is system administrator or Docentric administrator, he can do anything.
        // Exit the method.
        if (isSystemAdmin || isDocentricAdmin)
        {
            return true;
        }


        /***  Apply Custom Data Security Constraints  ***/
        if (applyCustomDataConstraints)
        {
            // If the result of a custom delegate is false, then return false.
            // Otherwise, check the Legal Entity data security constraint (if needed).
            boolean cancelExecution, forbid;
            try
            {
                DocDataSecurityDelegates delegates = DocDataSecurityDelegates::instance();
                DocEventHandlerResult res = delegates.onApplyCustomDataSecurity(_action, _reportId,
                    _companyId, _templateId, _languageId, this, _showForbiddingMsg);
                cancelExecution = res.cancelExecution();
                forbid = res.booleanResult();
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), 'Error occurred in the applyCustomDataSecurity() delegate method');
            }

            // If the action is forbidden, return false.
            if (forbid)
            {
                return false;
            }

            // Check if the execution of applying data security should be stopped.
            if (cancelExecution)
            {
                return true;
            }
        }

        /***  Apply Legal Entity Data Security Constraint  ***/
        if (applyLegalEntityConstraint)
        {
            return this.checkLegalEntityDataSecurityConstraint(_action, _reportId, _companyId, _templateId, _languageId, _showForbiddingMsg);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntityDataSecurityConstraint</Name>
				<Source><![CDATA[
    public boolean checkLegalEntityDataSecurityConstraint(DocDataSecurityTemplateAction _action, str _reportId, str _companyId,
                                                          str _templateId, str _languageId, boolean _showForbiddingMsg)
    {
        // Invoke event publisher for applying Legal Entity data security constraint.
        boolean cancelExecution, forbid;
        try
        {
            DocDataSecurityDelegates delegates = DocDataSecurityDelegates::instance();
            DocEventHandlerResult res = delegates.onApplyLegalEntityDataSecurity(_action, _reportId,
                    _companyId, _templateId, _languageId, this, _showForbiddingMsg);
            cancelExecution = res.cancelExecution();
            forbid = res.booleanResult();
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the applyLegalEntityDataSecurity() delegate method');
        }

        // If the action is forbidden, return false.
        if (forbid)
        {
            return false;
        }

        // Check if the execution of applying data security should be stopped.
        if (cancelExecution)
        {
            return true;
        }

        if (isDocentricPowerUser)
        {
            return this.checkLegalEntityDataSecurityConstraint_PowerUser(_action, _reportId, _companyId, _templateId, _languageId, _showForbiddingMsg);
        }
        else if (isDocentricTemplateEditor)
        {
            return this.checkLegalEntityDataSecurityConstraint_TemplateEditor(_action, _reportId, _companyId, _templateId, _languageId, _showForbiddingMsg);
        }
        else
        {
            try
            {
                DocDataSecurityDelegates delegates = DocDataSecurityDelegates::instance();
                DocEventHandlerResult res = delegates.onApplyLegalEntityDataSecurity_CustomRole(
                    _action, _reportId, _companyId, _templateId, _languageId, this, _showForbiddingMsg);
                cancelExecution = res.cancelExecution();
                forbid = res.booleanResult();
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), 'Error occurred in the applyLegalEntityDataSecurity_CustomRole() delegate method');
            }

            return forbid;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntityDataSecurityConstraint_PowerUser</Name>
				<Source><![CDATA[
    public boolean checkLegalEntityDataSecurityConstraint_PowerUser(DocDataSecurityTemplateAction _action, str _reportId, str _companyId,
                                                                    str _templateId, str _languageId, boolean _showForbiddingMsg)
    {
        void showForbiddingMsg(boolean _short, boolean _includingTemplateNeutral)
        {
            if (_showForbiddingMsg)
            {
                if (_short)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:InsufficientPrivilegesForActionShort", _action, roleStr(DocentricAXPowerUser)));
                }
                else
                {
                    str companyId = _companyId;
                    if (!companyId)
                    {
                        companyId = "@DocentricAX:CompanyNeutralTemplates";
                    }
                    str languageId = _languageId;
                    if (!languageId)
                    {
                        languageId = "@DocentricAX:LanguageNeutralTemplates";
                    }
                    if (_includingTemplateNeutral)
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:InsufficientPrivilegesForActionCompanyNeutral",
                                                             _action, roleStr(DocentricAXPowerUser), _reportId, _templateId, companyId, languageId));
                    }
                    else
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:InsufficientPrivilegesForAction",
                                                             _action, roleStr(DocentricAXPowerUser), _reportId, _templateId, companyId, languageId));
                    }
                }
            }
        }


        if (!isDocentricPowerUser)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_action)
        {
            case DocDataSecurityTemplateAction::Add:
            case DocDataSecurityTemplateAction::Edit:
            case DocDataSecurityTemplateAction::Delete:
            case DocDataSecurityTemplateAction::Attach:
            case DocDataSecurityTemplateAction::Detach:
            case DocDataSecurityTemplateAction::Download:
            case DocDataSecurityTemplateAction::EnableDisable:
            case DocDataSecurityTemplateAction::SetDataSourceType:
            case DocDataSecurityTemplateAction::Preview:
                // Allow action for the company neutral templates as well.
                if (_companyId == '' || legalEntitySet.in(_companyId))
                {
                    return true;
                }
                else
                {
                    showForbiddingMsg(false, true);
                    return false;
                }
                    
            case DocDataSecurityTemplateAction::TemplateTools:
            case DocDataSecurityTemplateAction::SetDefault:
            case DocDataSecurityTemplateAction::ReloadSystem:
                return true;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported action type: %1', _action));
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntityDataSecurityConstraint_TemplateEditor</Name>
				<Source><![CDATA[
    public boolean checkLegalEntityDataSecurityConstraint_TemplateEditor(DocDataSecurityTemplateAction _action, str _reportId, str _companyId,
                                                                         str _templateId, str _languageId, boolean _showForbiddingMsg)
    {
        void showForbiddingMsg(boolean _short, boolean _includingTemplateNeutral)
        {
            if (_showForbiddingMsg)
            {
                if (_short)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:InsufficientPrivilegesForActionShort", _action, roleStr(DocentricAXTemplateEditor)));
                }
                else
                {
                    str companyId = _companyId;
                    if (!companyId)
                    {
                        companyId = "@DocentricAX:CompanyNeutralTemplates";
                    }
                    str languageId = _languageId;
                    if (!languageId)
                    {
                        languageId = "@DocentricAX:LanguageNeutralTemplates";
                    }
                    if (_includingTemplateNeutral)
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:InsufficientPrivilegesForActionCompanyNeutral",
                                                             _action, roleStr(DocentricAXTemplateEditor), _reportId, _templateId, companyId, languageId));
                    }
                    else
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:InsufficientPrivilegesForAction",
                                                             _action, roleStr(DocentricAXTemplateEditor), _reportId, _templateId, companyId, languageId));
                    }
                }
            }
        }

        if (!isDocentricTemplateEditor)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_action)
        {
            case DocDataSecurityTemplateAction::Add:
            case DocDataSecurityTemplateAction::Edit:
            case DocDataSecurityTemplateAction::Delete:
            case DocDataSecurityTemplateAction::Attach:
            case DocDataSecurityTemplateAction::Detach:
            case DocDataSecurityTemplateAction::SetDataSourceType:
                if (legalEntitySet.in(_companyId))
                {
                    return true;
                }
                else
                {
                    showForbiddingMsg(false, false);
                    return false;
                }

            case DocDataSecurityTemplateAction::Download:
            case DocDataSecurityTemplateAction::Preview:
                // Allow downloading the company neutral templates as well.
                if (_companyId == '' || legalEntitySet.in(_companyId))
                {
                    return true;
                }
                else
                {
                    showForbiddingMsg(false, true);
                    return false;
                }
                    
            case DocDataSecurityTemplateAction::SetDefault:
            case DocDataSecurityTemplateAction::EnableDisable:
            case DocDataSecurityTemplateAction::ReloadSystem:
                showForbiddingMsg(true, false);
                return false;

            case DocDataSecurityTemplateAction::TemplateTools:
                return false;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported action type: %1', _action));
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        userId = curUserId();
        workerRecId = HcmWorkerLookup::currentWorker();

        DocParameters docParameters = DocParameters::find();
        applyCustomDataConstraints = docParameters.ApplyCustomDataConstraints;
        applyLegalEntityConstraint = docParameters.ApplyLegalEntityConstraint;
        noneDataSecurity = applyCustomDataConstraints == false && applyLegalEntityConstraint == false;

        isSystemAdmin = Global::isSystemAdministrator();
        if (isSystemAdmin)
        {
            // Set all other flags to true.
            isDocentricAdmin = true;
            isDocentricPowerUser = true;
            isDocentricTemplateEditor = true;
        }
        else
        {
            // If not system admin check the other roles.
            this.setDocentricRoleFlags();
            if (applyLegalEntityConstraint)
            {
                this.fillLegalEntityIds();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserRoles</Name>
				<Source><![CDATA[
    public Set getUserRoles()
    {
        xAxaptaUserManager   userManager;
        container           roles;
        SecurityRole        securityRole;
        Set                 roleSet;

        userManager = new xAxaptaUserManager();
        roles = userManager.getRolesForUser(userId, '');
        roleSet = new Set(Types::String);
        
        if (roles)
        {
            int roleCount = conLen(roles);
            for (int i = 0; i < roleCount; i++)
            {
                RecId thisRole = conPeek(roles, i + 1);
                select firstonly securityRole where securityRole.RecId == thisRole;
                if (securityRole)
                {
                    roleSet.add(securityRole.AotName);
                }
            }
        }
        
        return roleSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLegalEntityIds</Name>
				<Source><![CDATA[
    private void fillLegalEntityIds(utcdatetime _asOfDate = DateTimeUtil::utcNow())
    {
        CompanyInfo      legalEntity;
        HcmEmployment    hcmEmployment;

        legalEntitySet = new Set(Types::String);

        // Retrieve all legal entities for a worker based on their current employments
        while select ValidTimeState(_asOfDate) RecId, DataArea from legalEntity
            join RecId from hcmEmployment
            where hcmEmployment.LegalEntity == legalEntity.RecId
            &&    hcmEmployment.Worker == workerRecId
        {
            legalEntitySet.add(legalEntity.DataArea);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocentricRoleFlags</Name>
				<Source><![CDATA[
    private void setDocentricRoleFlags()
    {
        xAxaptaUserManager   userManager;
        container           roles;
        int                 roleCount;
        int                 i;
        int64               thisRole;
        SecurityRole        securityRole;


        userManager = new xAxaptaUserManager();
        roles = userManager.getRolesForUser(userId, '');
        if (roles)
        {
            roleCount = conLen(roles);
            for (i = 0; i < roleCount; i++)
            {
                thisRole = conPeek(roles, i + 1);
                select firstonly securityRole where securityRole.RecId == thisRole;
                if (securityRole)
                {
                    // DocentricAXAdmin
                    if (securityRole.AotName == roleStr(DocentricAXAdmin))
                    {
                        isDocentricAdmin = true;
                        break;
                    }

                    // DocentricAXPowerUser
                    if (securityRole.AotName == roleStr(DocentricAXPowerUser))
                    {
                        isDocentricPowerUser = true;
                    }

                    // DocentricAXTemplateEditor
                    if (securityRole.AotName == roleStr(DocentricAXTemplateEditor))
                    {
                        isDocentricTemplateEditor = true;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>