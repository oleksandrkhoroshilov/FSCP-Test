<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocXmlRecordBuildingContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Docentric.AX.Framework.Utilities;

/// <summary>
/// Provides caching mechanism for SysDictXXX objects and labels.
/// </summary>
public class DocXmlRecordBuildingContext
{
    // SysDictXXX related maps.
    Map sysDictTableMap;
    Map sysDictFieldMap;
    Map sysDictEnumMap;
    Map sysDictTypeMap;
    Map sysDictFieldGroupMap;
    Map sysDictMethodMap;

    // SysDictTable field list.
    Map sysDictTableFieldList;

    // EDT related maps.
    Map isEdtDefaultDimensionMap;
    Map isEdtLedgerDimensionMap;
    Map isEdtEnumDimensionMap;
    Map arrayEdtDefinitionMap;

    // Methods related maps.
    Map isMethodDefinedOnTableMap;
    Map isMethodParameterlessMap;

    // Labels related maps.
    Map tableLabelMap;
    Map fieldLabelMap;
    Map edtLabelMap;
    Map enumLabelMap;
    Map fieldGroupLabelMap;
    Map methodLabelMap;
    Map enumValueLabelMap;

    Map commonLabelMap;

    // Flags.
    boolean  isDesignTime;
    boolean  skipFieldIfErrorOccurs;

    // Calculated field and record names.
    Map calculatedXmlNames;

    // Label repository.
    DocDataSourceProviderLabelRepository labelRepository;

    // ASCII control characters handling mode.
    DocAsciiControlCharactersHandling asciiControlCharactersHandlingMode;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getlabelRepository</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label repository capable to resolve D365FO labels (i.e. system labels), GER labels, User-defined and Custom Fields labels.
    /// </summary>
    /// <returns>Label repository</returns>
    public DocDataSourceProviderLabelRepository getlabelRepository()
    {
        if (labelRepository == null)
        {
            // If the label repository is not set, this means that is used outside regular DSP classes pipeline.
            // In this case we will assume that the default label resolution strategy will be used.
            labelRepository = DocDataSourceProviderLabelRepository::construct();
        }
        return labelRepository;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds provided label ID to the commonLabelMap.
    /// </summary>
    /// <param name="_labelId">Label ID. Use the literalStr() method to provide it.</param>
    /// <returns>True if the label is added to the commonLabelMap, otherwise false.</returns>
    public boolean ensureLabel(str _labelId)
    {
        if (!_labelId)
        {
            return false;
        }
    
        if (commonLabelMap.exists(_labelId))
        {
            return false;
        }
    
        if (!strScan(_labelId, '@', 1, 1))
        {
            return false;
        }
    
        commonLabelMap.insert(_labelId, '');
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabelForEdt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds label ID of the provided EDT to the commonLabelMap.
    /// </summary>
    /// <param name="_edtId">Extended data type ID.</param>
    public void ensureLabelForEdt(ExtendedTypeId _edtId)
    {
        this.getLabelForEdt(_edtId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabelForEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds label ID of the provided enum to the commonLabelMap.
    /// </summary>
    /// <param name="_enumId">Enum ID.</param>
    public void ensureLabelForEnum(EnumId _enumId)
    {
        this.getLabelForEnum(_enumId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabelForField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds label ID of the provided table field to the commonLabelMap.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_fieldId">Field ID.</param>
    public void ensureLabelForField(TableId _tableId, FieldId _fieldId)
    {
        this.getLabelForField(_tableId, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabelForFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds label ID of the provided table field group to the commonLabelMap.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_fieldGroupName">Field group name.</param>
    public void ensureLabelForFieldGroup(TableId _tableId, FieldGroupName _fieldGroupName)
    {
        this.getLabelForFieldGroup(_tableId, _fieldGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabelForMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds label ID of the provided table instance method to the commonLabelMap.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_methodName">Method name.</param>
    public void ensureLabelForMethod(TableId _tableId, MethodName _methodName)
    {
        this.getLabelForMethod(_tableId, _methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabelForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds label ID of the provided table to the commonLabelMap.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    public void ensureLabelForTable(TableId _tableId)
    {
        this.getLabelForTable(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLabelsForTableWithFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds label IDs of the provided table with all fields to the commonLabelMap.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    public void ensureLabelsForTableWithFields(TableId _tableId)
    {
        SysDictTable sysDictTable;
        int i;
        FieldId fieldId;
        SysDictField sysDictField;
    
        sysDictTable = this.getSysDictTable(_tableId);
        this.ensureLabelForTable(_tableId);
    
        if (sysDictTable)
        {
            for (i = 1; i <= sysDictTable.fieldCnt(TableScope::IncludeBaseTables); i++)
            {
                // Note: The fieldCntWithoutSys() method is not used because it has bad performance.
    
                fieldId = sysDictTable.fieldCnt2Id(i, TableScope::IncludeBaseTables);
                sysDictField = this.getSysDictField(_tableId, fieldId);
    
                if (sysDictField.isSystem() || strStartsWith(sysDictField.name(), 'DEL_'))
                {
                    continue;
                }
    
                this.ensureLabelForField(_tableId, fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommonLabelMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets commonLabelMap that contains all cached labels.
    /// </summary>
    /// <returns>Common label map.</returns>
    public Map getCommonLabelMap()
    {
        return commonLabelMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldArrayForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the array of all table field names excluding system fields
    /// for provided table ID from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <returns>The array of all table field names excluding system fields.</returns>
    public Array getFieldArrayForTable(TableId _tableId)
    {
        Array               fieldArray;
        FieldId             fieldId;
        SysDictField        sysDictField;
        SysDictTable        sysDictTable;
        int                 i, j;
    
    
        if (!_tableId)
        {
            return null;
        }
    
        if (sysDictTableFieldList.exists(_tableId))
        {
            fieldArray = sysDictTableFieldList.lookup(_tableId);
        }
        else
        {
            sysDictTable = this.getSysDictTable(_tableId);
            if (!sysDictTable)
            {
                return null;
            }
    
            fieldArray = new Array(Types::String);
            j = 0;
            for (i = 1; i <= sysDictTable.fieldCnt(TableScope::IncludeBaseTables); i++)
            {
                // Note: The fieldCntWithoutSys() method is not used because it has a performance issue.
    
                fieldId = sysDictTable.fieldCnt2Id(i, TableScope::IncludeBaseTables);
                sysDictField = this.getSysDictField(_tableId, fieldId);
    
                if (sysDictField.isSystem() || strStartsWith(sysDictField.name(), 'DEL_'))
                {
                    continue;
                }
    
                // Add the field to the field array.
                j++;
                fieldArray.value(j, sysDictField.name());
            }
    
            sysDictTableFieldList.insert(_tableId, fieldArray);
        }
    
        return fieldArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForEdt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the provided EDT from the cache.
    /// </summary>
    /// <param name="_edtId">EDT ID.</param>
    /// <returns>Label ID.</returns>
    public str getLabelForEdt(ExtendedTypeId _edtId)
    {
        SysDictType     sysDictType;
        str             labelId;
    
        if (!_edtId)
        {
            return '';
        }
    
        if (edtLabelMap.exists(_edtId))
        {
            labelId = edtLabelMap.lookup(_edtId);
        }
        else
        {
            sysDictType = this.getSysDictType(_edtId);
            if (sysDictType)
            {
                labelId = sysDictType.labelLabel();
                edtLabelMap.insert(_edtId, labelId);
            }
            else
            {
                labelId = '';
            }
        }
    
        if (labelId && !commonLabelMap.exists(labelId))
        {
            commonLabelMap.insert(labelId, '');
        }
    
        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the provided enum from the cache.
    /// </summary>
    /// <param name="_enumId">Enum ID.</param>
    /// <returns>Label ID.</returns>
    public str getLabelForEnum(EnumId _enumId)
    {
        SysDictEnum     sysDictEnum;
        str             labelId;
    
        if (!_enumId)
        {
            return '';
        }
    
        if (edtLabelMap.exists(_enumId))
        {
            labelId = edtLabelMap.lookup(_enumId);
        }
        else
        {
            sysDictEnum = this.getSysDictEnum(_enumId);
            if (sysDictEnum)
            {
                labelId = sysDictEnum.labelDefined();
                edtLabelMap.insert(_enumId, labelId);
            }
            else
            {
                labelId = '';
            }
        }
    
        if (labelId && !commonLabelMap.exists(labelId))
        {
            commonLabelMap.insert(labelId, '');
        }
    
        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the provided table field from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_fieldId">Field ID.</param>
    /// <returns>Label ID.</returns>
    public str getLabelForField(TableId _tableId, FieldId _fieldId)
    {
        SysDictField    sysDictField;
        Map             tableToFieldLabelMap;
        str             labelId;
    
    
        if (!_fieldId || !_tableId)
        {
            return '';
        }
    
        if (fieldLabelMap.exists(_tableId))
        {
            tableToFieldLabelMap = fieldLabelMap.lookup(_tableId);
            if (tableToFieldLabelMap.exists(_fieldId))
            {
                labelId = tableToFieldLabelMap.lookup(_fieldId);
            }
            else
            {
                sysDictField = this.getSysDictField(_tableId, _fieldId);
                if (sysDictField)
                {
                    labelId = sysDictField.labelLabel();
                    tableToFieldLabelMap.insert(_fieldId, labelId);
                }
                else
                {
                    labelId = '';
                }
            }
        }
        else
        {
            sysDictField = this.getSysDictField(_tableId, _fieldId);
            if (sysDictField)
            {
                tableToFieldLabelMap = new Map(Types::Integer, Types::String);
                labelId = sysDictField.labelLabel();
                tableToFieldLabelMap.insert(_fieldId, labelId);
    
                fieldLabelMap.insert(_tableId, tableToFieldLabelMap);
            }
            else
            {
                labelId = '';
            }
        }
    
        if (labelId && !commonLabelMap.exists(labelId))
        {
            commonLabelMap.insert(labelId, '');
        }
    
        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the provided table field group from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_fieldGroupName">Field group name.</param>
    /// <returns>Label ID.</returns>
    public str getLabelForFieldGroup(TableId _tableId, FieldGroupName _fieldGroupName)
    {
        SysDictFieldGroup   sysDictFieldGroup;
        Map                 tableToFieldGroupLabelMap;
        str                 labelId;
    
    
        if (!_fieldGroupName || !_tableId)
        {
            return '';
        }
    
        if (fieldGroupLabelMap.exists(_tableId))
        {
            tableToFieldGroupLabelMap = fieldGroupLabelMap.lookup(_tableId);
            if (tableToFieldGroupLabelMap.exists(_fieldGroupName))
            {
                labelId = tableToFieldGroupLabelMap.lookup(_fieldGroupName);
            }
            else
            {
                sysDictFieldGroup = this.getSysDictFieldGroup(_tableId, _fieldGroupName);
                if (sysDictFieldGroup)
                {
                    labelId = sysDictFieldGroup.labelId();
                    tableToFieldGroupLabelMap.insert(_fieldGroupName, labelId);
                }
                else
                {
                    labelId = '';
                }
            }
        }
        else
        {
            sysDictFieldGroup = this.getSysDictFieldGroup(_tableId, _fieldGroupName);
            if (sysDictFieldGroup)
            {
                tableToFieldGroupLabelMap = new Map(Types::String, Types::String);
                labelId = sysDictFieldGroup.labelId();

                tableToFieldGroupLabelMap.insert(_fieldGroupName, labelId);
    
                fieldGroupLabelMap.insert(_tableId, tableToFieldGroupLabelMap);
            }
            else
            {
                labelId = '';
            }
        }
    
        if (labelId && !commonLabelMap.exists(labelId))
        {
            commonLabelMap.insert(labelId, '');
        }
    
        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the provided table instance method from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_methodName">Method name.</param>
    /// <returns>Label ID.</returns>
    public str getLabelForMethod(TableId _tableId, MethodName _methodName)
    {
        SysDictMethod   sysDictMethod;
        Map             tableToMethodLabelMap;
        str             labelId;
    
    
        str getMethodReturnTypeLabel()
        {
            int             enumId, edtId;
            str             methodLabelId;
            SysDictEnum     sysDictEnum;
            SysDictType     sysDictType;
    
    
            enumId = 0;
            edtId  = 0;
            methodLabelId = '';
    
            if (sysDictMethod.returnType() == Types::Enum)
            {
                sysDictEnum = this.getSysDictEnum(sysDictMethod.returnId());
                if (sysDictEnum)
                {
                    enumId = sysDictMethod.returnId();
                    methodLabelId = this.getLabelForEnum(sysDictEnum.id());
                }
            }
            else if (sysDictMethod.returnType() == Types::UserType)
            {
                sysDictType = this.getSysDictType(sysDictMethod.returnId());
                if (sysDictType)
                {
                    edtId = sysDictMethod.returnId();
                    methodLabelId = this.getLabelForEdt(sysDictType.id());
                }
            }
    
            return methodLabelId;
        }
    
    
    
    
        if (!_methodName || !_tableId)
        {
            return '';
        }
    
        if (methodLabelMap.exists(_tableId))
        {
            tableToMethodLabelMap = methodLabelMap.lookup(_tableId);
            if (tableToMethodLabelMap.exists(_methodName))
            {
                labelId = tableToMethodLabelMap.lookup(_methodName);
            }
            else
            {
                sysDictMethod = this.getSysDictMethod(_tableId, _methodName);
                if (sysDictMethod)
                {
                    labelId = getMethodReturnTypeLabel();
                    tableToMethodLabelMap.insert(_methodName, labelId);
                }
                else
                {
                    labelId = '';
                }
            }
        }
        else
        {
            sysDictMethod = this.getSysDictMethod(_tableId, _methodName);
            if (sysDictMethod)
            {
                tableToMethodLabelMap = new Map(Types::String, Types::String);
    
                labelId = getMethodReturnTypeLabel();
                tableToMethodLabelMap.insert(_methodName, labelId);
    
                methodLabelMap.insert(_tableId, tableToMethodLabelMap);
            }
            else
            {
                labelId = '';
            }
        }
    
        if (labelId && !commonLabelMap.exists(labelId))
        {
            commonLabelMap.insert(labelId, '');
        }
    
        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the provided table from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <returns>Label ID.</returns>
    public str getLabelForTable(TableId _tableId)
    {
        SysDictTable    sysDictTable;
        str             labelId;
    
    
        if (!_tableId)
        {
            return '';
        }
    
        if (tableLabelMap.exists(_tableId))
        {
            labelId = tableLabelMap.lookup(_tableId);
        }
        else
        {
            sysDictTable = this.getSysDictTable(_tableId);
            if (sysDictTable)
            {
                labelId = sysDictTable.labelDefined();
                tableLabelMap.insert(_tableId, labelId);
            }
            else
            {
                labelId = '';
            }
        }
    
        if (labelId && !commonLabelMap.exists(labelId))
        {
            commonLabelMap.insert(labelId, '');
        }
    
        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelValueForEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label value for the provided enum value and language from the cache.
    /// </summary>
    /// <param name="_enumId">Enum ID.</param>
    /// <param name="_enumValue">Enum value.</param>
    /// <param name="_languageId">Language ID.</param>
    /// <returns>Label value for the provided enum value.</returns>
    public str getLabelValueForEnumValue(EnumId _enumId, int _enumValue, LanguageId _languageId)
    {
        SysDictEnum     sysDictEnum;
        Map             enumToValueLabelMap;
        str             labelValueForEnumValue;
    
    
        int sysDictEnum_value2Index()
        {
            Counter     enumChoices = sysDictEnum.values();
            Counter     idx;
    
            for (idx = 0; idx < enumChoices; idx++)
            {
                if (sysDictEnum.index2Symbol(idx) == sysDictEnum.value2Symbol(_enumValue))
                {
                    return idx;
                }
            }
    
            return _enumValue;
        }
    
        str getEnumValueLabel()
        {
            str     enumValueLabelId, enumValueLabel;
            int     enumValueIndex;
    
            enumValueIndex = sysDictEnum_value2Index();
            enumValueLabelId = sysDictEnum.index2LabelId(enumValueIndex);
            enumValueLabel = SysLabel::labelId2String(enumValueLabelId, _languageId);
            if (!enumValueLabel)
            {
                enumValueLabel = sysDictEnum.value2Label(_enumValue);
                if (!enumValueLabel)
                {
                    enumValueLabel = sysDictEnum.value2Name(_enumValue);
                }
            }
    
            return enumValueLabel;
        }
    
    
        if (!_enumId || !_languageId)
        {
            return '';
        }
    
        if (enumValueLabelMap.exists(_enumId))
        {
            enumToValueLabelMap = enumValueLabelMap.lookup(_enumId);
            if (enumToValueLabelMap.exists(_enumValue))
            {
                labelValueForEnumValue = enumToValueLabelMap.lookup(_enumValue);
            }
            else
            {
                sysDictEnum = this.getSysDictEnum(_enumId);
                if (sysDictEnum)
                {
                    labelValueForEnumValue = getEnumValueLabel();
                    enumToValueLabelMap.insert(_enumValue, labelValueForEnumValue);
                }
                else
                {
                    labelValueForEnumValue = '';
                }
            }
        }
        else
        {
            sysDictEnum = this.getSysDictEnum(_enumId);
            if (sysDictEnum)
            {
                enumToValueLabelMap = new Map(Types::Integer, Types::String);
    
                labelValueForEnumValue = getEnumValueLabel();
                enumToValueLabelMap.insert(_enumValue, labelValueForEnumValue);
    
                enumValueLabelMap.insert(_enumId, enumToValueLabelMap);
            }
            else
            {
                labelValueForEnumValue = '';
            }
        }
    
        return labelValueForEnumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDictEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the SysDictEnum object for the provided enum ID from the cache.
    /// </summary>
    /// <param name="_enumId">Enum ID.</param>
    /// <returns>The SysDictEnum object.</returns>
    public SysDictEnum getSysDictEnum(EnumId _enumId)
    {
        SysDictEnum sysDictEnum;
    
        if (!_enumId)
        {
            return null;
        }
    
        if (sysDictEnumMap.exists(_enumId))
        {
            sysDictEnum = sysDictEnumMap.lookup(_enumId);
        }
        else
        {
            sysDictEnum = new SysDictEnum(_enumId);
            if (sysDictEnum)
            {
                sysDictEnumMap.insert(_enumId, sysDictEnum);
            }
        }
    
        return sysDictEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDictField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the SysDictField object for the provided table and field ID from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_fieldId">Field ID.</param>
    /// <returns>The SysDictField object.</returns>
    public SysDictField getSysDictField(TableId _tableId, FieldId _fieldId)
    {
        Map             tableToFieldMap;
        SysDictField    sysDictField;
    
    
        if (!_fieldId || !_tableId)
        {
            return null;
        }
    
        if (sysDictFieldMap.exists(_tableId))
        {
            tableToFieldMap = sysDictFieldMap.lookup(_tableId);
            if (tableToFieldMap.exists(_fieldId))
            {
                sysDictField = tableToFieldMap.lookup(_fieldId);
            }
            else
            {
                sysDictField = new SysDictField(_tableId, _fieldId);
                if (sysDictField)
                {
                    tableToFieldMap.insert(_fieldId, sysDictField);
                }
            }
        }
        else
        {
            sysDictField = new SysDictField(_tableId, _fieldId);
            if (sysDictField)
            {
                tableToFieldMap = new Map(Types::Integer, Types::Class);
                tableToFieldMap.insert(_fieldId, sysDictField);
                sysDictFieldMap.insert(_tableId, tableToFieldMap);
            }
        }
    
        return sysDictField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDictFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the SysDictFieldGroup object for the provided table and field group name from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_fieldGroupName">Field group name.</param>
    /// <returns>The SysDictFieldGroup object.</returns>
    public SysDictFieldGroup getSysDictFieldGroup(TableId _tableId, FieldGroupName _fieldGroupName)
    {
        Map                 tableToFieldGroupMap;
        SysDictFieldGroup   sysDictFieldGroup;
    
    
        if (!_fieldGroupName || !_tableId)
        {
            return null;
        }
    
        if (sysDictFieldGroupMap.exists(_tableId))
        {
            tableToFieldGroupMap = sysDictFieldGroupMap.lookup(_tableId);
            if (tableToFieldGroupMap.exists(_fieldGroupName))
            {
                sysDictFieldGroup = tableToFieldGroupMap.lookup(_fieldGroupName);
            }
            else
            {
                sysDictFieldGroup = new SysDictFieldGroup(_tableId, _fieldGroupName, true);
                if (sysDictFieldGroup)
                {
                    tableToFieldGroupMap.insert(_fieldGroupName, sysDictFieldGroup);
                }
            }
        }
        else
        {
            sysDictFieldGroup = new SysDictFieldGroup(_tableId, _fieldGroupName, true);
            if (sysDictFieldGroup)
            {
                tableToFieldGroupMap = new Map(Types::String, Types::Class);
                tableToFieldGroupMap.insert(_fieldGroupName, sysDictFieldGroup);
                sysDictFieldGroupMap.insert(_tableId, tableToFieldGroupMap);
            }
        }
    
        return sysDictFieldGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDictMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the SysDictMethod object for the provided table and instance method name from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_methodName">Method name.</param>
    /// <returns>The SysDictMethod object.</returns>
    public SysDictMethod getSysDictMethod(TableId _tableId, MethodName _methodName)
    {
        Map             tableToMethodMap;
        SysDictMethod   sysDictMethod;
    
    
        if (!_methodName || !_tableId)
        {
            return null;
        }
    
        if (sysDictMethodMap.exists(_tableId))
        {
            tableToMethodMap = sysDictMethodMap.lookup(_tableId);
            if (tableToMethodMap.exists(_methodName))
            {
                sysDictMethod = tableToMethodMap.lookup(_methodName);
            }
            else
            {
                sysDictMethod = new SysDictMethod(UtilElementType::TableInstanceMethod, _tableId, _methodName);
                if (sysDictMethod)
                {
                    tableToMethodMap.insert(_methodName, sysDictMethod);
                }
            }
        }
        else
        {
            sysDictMethod = new SysDictMethod(UtilElementType::TableInstanceMethod, _tableId, _methodName);
            if (sysDictMethod)
            {
                tableToMethodMap = new Map(Types::String, Types::Class);
                tableToMethodMap.insert(_methodName, sysDictMethod);
                sysDictMethodMap.insert(_tableId, tableToMethodMap);
            }
        }
    
        return sysDictMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDictTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the SysDictTable object for the provided table ID from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <returns>The SysDictTable object.</returns>
    public SysDictTable getSysDictTable(TableId _tableId)
    {
        SysDictTable sysDictTable;
    
    
        if (!_tableId)
        {
            return null;
        }
    
        if (sysDictTableMap.exists(_tableId))
        {
            sysDictTable = sysDictTableMap.lookup(_tableId);
        }
        else
        {
            sysDictTable = new SysDictTable(_tableId);
            if (sysDictTable)
            {
                sysDictTableMap.insert(_tableId, sysDictTable);
            }
        }
    
        return sysDictTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDictType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the SysDictType object for the provided edt ID from the cache.
    /// </summary>
    /// <param name="_edtId">EDT ID.</param>
    /// <returns>The SysDictType object.</returns>
    public SysDictType getSysDictType(ExtendedTypeId _edtId)
    {
        SysDictType sysDictType;
    
    
        if (!_edtId)
        {
            return null;
        }
    
        if (sysDictTypeMap.exists(_edtId))
        {
            sysDictType = sysDictTypeMap.lookup(_edtId);
        }
        else
        {
            sysDictType = new SysDictType(_edtId);
            if (sysDictType)
            {
                sysDictTypeMap.insert(_edtId, sysDictType);
            }
        }
    
        return sysDictType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArrayEdtDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the SysDictType object for the provided edt ID from the cache.
    /// </summary>
    /// <param name="_edtId">EDT ID.</param>
    /// <returns>The SysDictType object.</returns>
    public Array getArrayEdtDefinition(ExtendedTypeId _edtId)
    {
        Array arrayEdtDef;  // Array([ArrayElementName (str), ArrayElementLabel (str)])
    
        if (!_edtId)
        {
            return null;
        }
    
        if (arrayEdtDefinitionMap.exists(_edtId))
        {
            arrayEdtDef = arrayEdtDefinitionMap.lookup(_edtId);
        }
        else
        {
            SysDictType sysDictType = this.getSysDictType(_edtId);

            arrayEdtDef = new Array(Types::Container);

            AxEdt axEdt = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetEdt(sysDictType.name());
            System.Collections.IList edtArray = axEdt.ArrayElements;
            int edtArrayCount = ListHelper::Count(edtArray);
            for (int i = 1; i <= edtArrayCount; i++)
            {
                AxEdtArrayElement axEdtArrayElem = ListHelper::GetItem(edtArray, i-1);

                str elementName = axEdtArrayElem.Name;
                elementName = System.Text.RegularExpressions.Regex::Replace(elementName, @'\s+', '_');

                str elementLabel = axEdtArrayElem.Label;

                // Set the ith element of the array to [elementName, elementLabel] container.
                arrayEdtDef.value(i, [elementName, elementLabel]);

                // Ensure label for the current array element.
                this.ensureLabel(elementLabel);
            }

            arrayEdtDefinitionMap.insert(_edtId, arrayEdtDef);
        }
    
        return arrayEdtDef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDesignTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the execution occurs in design time.
    /// </summary>
    /// <returns>True if the execution occurs in design time;otherwise false</returns>
    public boolean isDesignTime()
    {
        return isDesignTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEdtExtendingDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided EDT extends default dimension.
    /// </summary>
    /// <param name="_edtId">EDT ID.</param>
    /// <returns>Returns true if the provided EDT extends default dimension.</returns>
    public boolean isEdtExtendingDefaultDimension(ExtendedTypeId _edtId)
    {
        SysDictType     sysDictType;
        boolean         isExtending;
    
    
        if (!_edtId)
        {
            return false;
        }
    
        if (isEdtDefaultDimensionMap.exists(_edtId))
        {
            isExtending = isEdtDefaultDimensionMap.lookup(_edtId);
        }
        else
        {
            sysDictType = this.getSysDictType(_edtId);
    
            isExtending = false;
            if (_edtId == extendedTypeNum(DimensionDefault) ||
                sysDictType.isExtending(extendedTypeNum(DimensionDefault)))
            {
                isExtending = true;
            }
    
            isEdtDefaultDimensionMap.insert(_edtId, isExtending);
        }
    
    
        return isExtending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEdtExtendingDimensionEnumeration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided EDT extends dimension enumeration.
    /// </summary>
    /// <param name="_edtId">EDT ID.</param>
    /// <returns>True if the provided EDT extends dimension enumeration.</returns>
    public boolean isEdtExtendingDimensionEnumeration(ExtendedTypeId _edtId)
    {
        SysDictType     sysDictType;
        boolean         isExtending;
    
    
        if (!_edtId)
        {
            return false;
        }
    
        if (isEdtEnumDimensionMap.exists(_edtId))
        {
            isExtending = isEdtEnumDimensionMap.lookup(_edtId);
        }
        else
        {
            sysDictType = this.getSysDictType(_edtId);
    
            isExtending = false;
            if (_edtId == extendedTypeNum(DimensionEnumeration) ||
                sysDictType.isExtending(extendedTypeNum(DimensionEnumeration)))
            {
                isExtending = true;
            }
    
            isEdtEnumDimensionMap.insert(_edtId, isExtending);
        }
    
    
        return isExtending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEdtExtendingLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided EDT extends ledger dimension.
    /// </summary>
    /// <param name="_edtId">EDT ID.</param>
    /// <returns>Returns true if the provided EDT extends ledger dimension.</returns>
    public boolean isEdtExtendingLedgerDimension(ExtendedTypeId _edtId)
    {
        SysDictType     sysDictType;
        boolean         isExtending;
    
    
        if (!_edtId)
        {
            return false;
        }
    
        if (isEdtLedgerDimensionMap.exists(_edtId))
        {
            isExtending = isEdtLedgerDimensionMap.lookup(_edtId);
        }
        else
        {
            sysDictType = this.getSysDictType(_edtId);
    
            isExtending = false;
            if (_edtId == extendedTypeNum(LedgerDimensionBase) ||
                sysDictType.isExtending(extendedTypeNum(LedgerDimensionBase)))
            {
                isExtending = true;
            }
    
            isEdtLedgerDimensionMap.insert(_edtId, isExtending);
        }
    
    
        return isExtending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMethodDefinedOnTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided table instance method exists from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_methodName">Method name.</param>
    /// <returns>True if the provided instance method is defined on the provided table.</returns>
    public boolean isMethodDefinedOnTable(TableId _tableId, MethodName _methodName)
    {
        Map              tableToMethodMap;
        boolean          isMethodDefinedOnTable;
    
    
        boolean isMethodDefined()
        {
            SysDictTable sysDictTable;
    
            sysDictTable = this.getSysDictTable(_tableId);
            if (sysDictTable == null)
            {
                return false;
            }
    
            // Check only tables which don't support Inheritance
            // since the SysDictTable's methods don't work properly.
            if (!SysDictTable::tableInheritance(_tableId))
            {
                if (sysDictTable.isView())
                {
                    if (TreeNode::findNode('\\data dictionary\\views\\' + sysDictTable.name() + '\\methods\\' + _methodName))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else if (!SysDictTable::hasMethod(sysDictTable, _methodName))
                {
                    return false;
                }
            }
    
            return true;
        }
    
    
        if (!_methodName || !_tableId)
        {
            return false;
        }
    
        if (isMethodDefinedOnTableMap.exists(_tableId))
        {
            tableToMethodMap = isMethodDefinedOnTableMap.lookup(_tableId);
            if (tableToMethodMap.exists(_methodName))
            {
                isMethodDefinedOnTable = tableToMethodMap.lookup(_methodName);
            }
            else
            {
                isMethodDefinedOnTable = isMethodDefined();
                tableToMethodMap.insert(_methodName, isMethodDefinedOnTable);
            }
        }
        else
        {
            isMethodDefinedOnTable = isMethodDefined();
    
            tableToMethodMap = new Map(Types::String, Types::Integer);
            tableToMethodMap.insert(_methodName, isMethodDefinedOnTable);
    
            isMethodDefinedOnTableMap.insert(_tableId, tableToMethodMap);
        }
    
        return isMethodDefinedOnTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMethodParameterless</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided table instance method is parameterless from the cache.
    /// </summary>
    /// <param name="_tableId">Table ID.</param>
    /// <param name="_methodName">Method name.</param>
    /// <returns>True if the provided table instance method is parameterless.</returns>
    public boolean isMethodParameterless(TableId _tableId, MethodName _methodName)
    {
        Map              tableToMethodMap;
        boolean          isMethodParameterless;
    
    
        boolean isMethodParameterlessHelpMethod()
        {
            SysDictMethod   sysDictMethod;
            int             parameterCounter;
    
    
            // Check only tables which don't support Inheritance
            // since the SysDictTable's methods don't work properly.
            if (!SysDictTable::tableInheritance(_tableId))
            {
                sysDictMethod = this.getSysDictMethod(_tableId, _methodName);
                if (sysDictMethod == null)
                {
                    return false;
                }
    
                if (sysDictMethod.parameterCnt() > 0)
                {
                    // Check if all parameters are optional.
                    for (parameterCounter = 1; parameterCounter <= sysDictMethod.parameterCnt(); parameterCounter++)
                    {
                        if (!sysDictMethod.parameterOptional(parameterCounter))
                        {
                            return false;
                        }
                    }
                }
            }
    
            return true;
        }
    
    
        if (!_methodName || !_tableId)
        {
            return false;
        }
    
        if (isMethodParameterlessMap.exists(_tableId))
        {
            tableToMethodMap = isMethodParameterlessMap.lookup(_tableId);
            if (tableToMethodMap.exists(_methodName))
            {
                isMethodParameterless = tableToMethodMap.lookup(_methodName);
            }
            else
            {
                isMethodParameterless = isMethodParameterlessHelpMethod();
                tableToMethodMap.insert(_methodName, isMethodParameterless);
            }
        }
        else
        {
            isMethodParameterless = isMethodParameterlessHelpMethod();
    
            tableToMethodMap = new Map(Types::String, Types::Integer);
            tableToMethodMap.insert(_methodName, isMethodParameterless);
    
            isMethodParameterlessMap.insert(_tableId, tableToMethodMap);
        }
    
        return isMethodParameterless;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCalculatedFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided calculated field name is a valid XML attribute name
    /// by using cashing mechanism.
    /// </summary>
    /// <param name="_calculatedFieldName">Calculated field name.</param>
    /// <returns>True if if the provided calculated field name is a valid XML attribute name.</returns>
    public boolean isValidCalculatedFieldName(str _calculatedFieldName)
    {
        XmlDocument         testXmlDoc;
        XmlAttribute        testNameXmlAttr;
    
    
        if (!_calculatedFieldName)
        {
            return false;
        }
    
        if (calculatedXmlNames.exists(_calculatedFieldName))
        {
            return true;
        }
    
        testXmlDoc = XmlDocument::newBlank();
        try
        {
            //BP Deviation Documented
            testNameXmlAttr = testXmlDoc.createAttribute(_calculatedFieldName);
        }
        catch
        {
            return false;
        }
    
        calculatedXmlNames.insert(_calculatedFieldName, '');
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCalculatedRecordName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided calculated record name is a valid XML element name
    /// by using cashing mechanism.
    /// </summary>
    /// <param name="_calculatedRecordName">Calculated record name.</param>
    /// <returns>True if if the provided calculated record name is a valid XML element name.</returns>
    public boolean isValidCalculatedRecordName(str _calculatedRecordName)
    {
        XmlDocument         testXmlDoc;
        XmlElement          testNameXmlElement;
    
    
        if (!_calculatedRecordName)
        {
            return false;
        }
    
        if (calculatedXmlNames.exists(_calculatedRecordName))
        {
            return true;
        }
    
        testXmlDoc = XmlDocument::newBlank();
        try
        {
            //BP Deviation Documented
            testNameXmlElement = testXmlDoc.createElement(_calculatedRecordName);
        }
        catch
        {
            return false;
        }
    
        calculatedXmlNames.insert(_calculatedRecordName, '');
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocXmlRecordBuildingContext class.
    /// </summary>
    /// <param name = "_isDesignTime">Indicates whether execution occurs in design time</param>
    /// <param name = "_labelRepository">An instance of the DocDataSourceProviderLabelRepository class</param>
    public void new(boolean _isDesignTime = false, DocDataSourceProviderLabelRepository _labelRepository = null)
    {
        // SysDictXXX related maps.
        sysDictTableMap      = new Map(Types::Integer, Types::Class);
        sysDictFieldMap      = new Map(Types::Integer, Types::Class);
        sysDictEnumMap       = new Map(Types::Integer, Types::Class);
        sysDictTypeMap       = new Map(Types::Integer, Types::Class);
        sysDictFieldGroupMap = new Map(Types::Integer, Types::Class);
        sysDictMethodMap     = new Map(Types::Integer, Types::Class);
    
        // SysDictTable field list.
        sysDictTableFieldList = new Map(Types::Integer, Types::Class);
    
        // EDT related maps.
        isEdtDefaultDimensionMap = new Map(Types::Integer, Types::Integer);
        isEdtLedgerDimensionMap  = new Map(Types::Integer, Types::Integer);
        isEdtEnumDimensionMap    = new Map(Types::Integer, Types::Integer);
        arrayEdtDefinitionMap    = new Map(Types::Integer, Types::Class);
    
        // Method related maps.
        isMethodDefinedOnTableMap = new Map(Types::Integer, Types::Class);
        isMethodParameterlessMap  = new Map(Types::Integer, Types::Class);
    
        // Label related maps.
        tableLabelMap      = new Map(Types::Integer, Types::String);
        fieldLabelMap      = new Map(Types::Integer, Types::Class);
        edtLabelMap        = new Map(Types::Integer, Types::String);
        enumLabelMap       = new Map(Types::Integer, Types::String);
        fieldGroupLabelMap = new Map(Types::Integer, Types::Class);
        methodLabelMap     = new Map(Types::Integer, Types::Class);
    
        enumValueLabelMap = new Map(Types::Integer, Types::Class);
    
        commonLabelMap = new Map(Types::String, Types::String);
    
        // Flags.
        isDesignTime = _isDesignTime;

        // Label repository.
        labelRepository = _labelRepository;
    
        // Calculated field and record names.
        calculatedXmlNames = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipFieldIfErrorOccurs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether to skip field errors when they occur.
    /// </summary>
    /// <param name = "_skipFieldIfErrorOccurs">Specifies whehter to skip field errors when they occur</param>
    /// <returns>True if the field errors should be skipped; otherwise false</returns>
    public boolean skipFieldIfErrorOccurs(boolean _skipFieldIfErrorOccurs = skipFieldIfErrorOccurs)
    {
        skipFieldIfErrorOccurs = _skipFieldIfErrorOccurs;
        return skipFieldIfErrorOccurs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>asciiControlCharactersHandlingMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the ASCII control characters handling mode.
    /// </summary>
    /// <param name = "_asciiControlCharactersHandlingMode">Specifies what mode of ASCII control characters handling to use.</param>
    /// <returns>The currently set mode for ASCII control characters handling.</returns>
    public DocAsciiControlCharactersHandling asciiControlCharactersHandlingMode(DocAsciiControlCharactersHandling _asciiControlCharactersHandlingMode = asciiControlCharactersHandlingMode)
    {
        asciiControlCharactersHandlingMode = _asciiControlCharactersHandlingMode;
        return asciiControlCharactersHandlingMode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>