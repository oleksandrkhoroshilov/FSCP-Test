<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSmtpMailClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Mail;
using Docentric.AX.Email;

/// <summary>
/// The DocSmtpMailClient class provides an SMTP mail client.
/// </summary>
public class DocSmtpMailClient
{
    private SmtpClient dotNetSmtpClient;
    private DocSmtpClient mailKitSmtpClient;
    private DocSmtpMailClientLibrary useSmtpMailClientLibrary;
    private SMTPRelayServerName mailServerName;
    private SMTPPortNumber mailServerPort;
    private SysEmailNTLM useNTLM;
    private boolean authenticationRequired;
    private SMTPUserName userName;
    private boolean requireSSL;
    private DocSmtpClientTimeout clientTimeout;
    private DocSmtpDeliveryFormat deliveryFormat;
    private boolean suppressThrottling;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class DocSmtpMailClient.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMailServerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the outgoing SMTP mail server.
    /// </summary>
    /// <returns>Outgoing SMTP mail server</returns>
    public SMTPRelayServerName getMailServerName()
    {
        return mailServerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMailServerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the outgoing SMTP mail server.
    /// </summary>
    /// <param name = "_mailServerName">Outgoing SMTP mail server</param>
    private void setMailServerName(SMTPRelayServerName _mailServerName)
    {
        mailServerName = _mailServerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMailServerPort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SMTP port number.
    /// </summary>
    /// <returns>SMTP port number</returns>
    public SMTPPortNumber getMailServerPort()
    {
        return mailServerPort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMailServerPort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SMTP port number.
    /// </summary>
    /// <param name = "_mailServerPort">SMTP port number</param>
    private void setMailServerPort(SMTPPortNumber _mailServerPort)
    {
        mailServerPort = _mailServerPort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUseNTLM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether to use default credentials.
    /// </summary>
    /// <returns>True if default credentials are used; otherwise false</returns>
    public SysEmailNTLM getUseNTLM()
    {
        return useNTLM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUseNTLM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag indicating whether to use default credentials.
    /// </summary>
    /// <param name = "_useNTLM">Use default credentials</param>
    private void setUseNTLM(SysEmailNTLM _useNTLM)
    {
        useNTLM = _useNTLM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthenticationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether authentication is required.
    /// </summary>
    /// <returns>True if authentication is required; otherwise false</returns>
    public boolean getAuthenticationRequired()
    {
        return authenticationRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAuthenticationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag indicating whether authentication is required.
    /// </summary>
    /// <param name = "_authenticationRequired">Is authentication required</param>
    private void setAuthenticationRequired(boolean _authenticationRequired)
    {
        authenticationRequired = _authenticationRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user name.
    /// </summary>
    /// <returns>User name</returns>
    public SMTPUserName getUserName()
    {
        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user name.
    /// </summary>
    /// <param name = "_userName">User name</param>
    private void setUserName(SMTPUserName _userName)
    {
        userName = _userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequireSSL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the SSL is required.
    /// </summary>
    /// <returns>True if the SSL is required; otherwise false</returns>
    public boolean getRequireSSL()
    {
        return requireSSL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequireSSL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag indicating whether the SSL is required.
    /// </summary>
    /// <param name = "_requireSSL">Is SSL required</param>
    private void setRequireSSL(boolean _requireSSL)
    {
        requireSSL = _requireSSL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientTimeout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the client timeout in ms.
    /// </summary>
    /// <returns>Client timeout in ms</returns>
    public DocSmtpClientTimeout getClientTimeout()
    {
        return clientTimeout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClientTimeout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the client timeout in ms.
    /// </summary>
    /// <param name = "_clientTimeout">Client timeout in ms</param>
    private void setClientTimeout(DocSmtpClientTimeout _clientTimeout)
    {
        clientTimeout = _clientTimeout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery format.
    /// </summary>
    /// <returns>Delivery format</returns>
    public DocSmtpDeliveryFormat getDeliveryFormat()
    {
        return deliveryFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery format.
    /// </summary>
    /// <param name = "_deliveryFormat">Delivery format</param>
    private void setDeliveryFormat(DocSmtpDeliveryFormat _deliveryFormat)
    {
        deliveryFormat = _deliveryFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuppressThrottling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether throttling should be suppressed.
    /// </summary>
    /// <param name = "_suppressThrottling">Indicates whether throttling should be suppressed</param>
    /// <returns>True if throttling should be suppressed; otherwise false</returns>
    public boolean parmSuppressThrottling(boolean _suppressThrottling = suppressThrottling)
    {
        suppressThrottling = _suppressThrottling;
        return suppressThrottling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseSmtpMailClientLibrary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the SMTP mail client library to use.
    /// </summary>
    /// <param name = "_useSmtpMailClientLibrary">The SMTP mail client library to use</param>
    /// <returns>The SMTP mail client library to use</returns>
    public DocSmtpMailClientLibrary parmUseSmtpMailClientLibrary(DocSmtpMailClientLibrary _useSmtpMailClientLibrary = useSmtpMailClientLibrary)
    {
        useSmtpMailClientLibrary = _useSmtpMailClientLibrary;
        return useSmtpMailClientLibrary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDotNetSmtpClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an instance of the .NET SMTP mail client.
    /// </summary>
    /// <param name = "_smtpClient">An instance of the .NET SMTP client</param>
    private void setDotNetSmtpClient(System.Net.Mail.SmtpClient _smtpClient)
    {
        dotNetSmtpClient = _smtpClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMailKitSmtpClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an instance of the MailKit SMTP mail client.
    /// </summary>
    /// <param name = "_smtpClient">An instance of the MailKit SMTP client</param>
    private void setMailKitSmtpClient(DocSmtpClient _smtpClient)
    {
        mailKitSmtpClient = _smtpClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isO365</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a flag indicating whether a mail provider is a standard O365 mail provider.
    /// </summary>
    /// <returns>True if the mail provider is an O365 mail provider; otherwise false</returns>
    public boolean isO365()
    {
        SysEmailParameters emailParameters;

        switch (useSmtpMailClientLibrary)
        {
            case DocSmtpMailClientLibrary::DotNet:
                emailParameters.SMTPRelayServerName = dotNetSmtpClient.Host;
                break;

            case DocSmtpMailClientLibrary::MailKit:
                emailParameters.SMTPRelayServerName = mailKitSmtpClient.Settings.Host;
                break;
        }
        
        // Call SysEmailParameters.isSMTPRelayServerO365() supported since 10.0.21
        const MethodName SysEmailParameters_isSMTPRelayServerO365Method = 'isSMTPRelayServerO365';

        try
        {
            SysDictTable dictTable = new SysDictTable(tableNum(SysEmailParameters));
            if (dictTable && tableHasStaticMethod(dictTable, SysEmailParameters_isSMTPRelayServerO365Method))
            {
                return dictTable.callObject(SysEmailParameters_isSMTPRelayServerO365Method, emailParameters);
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the specified email message.
    /// </summary>
    /// <param name = "_mailMessage">An email message to send</param>
    public void send(System.Net.Mail.MailMessage _mailMessage)
    {
        switch (useSmtpMailClientLibrary)
        {
            case DocSmtpMailClientLibrary::DotNet:
                dotNetSmtpClient.Send(_mailMessage);
                break;

            case DocSmtpMailClientLibrary::MailKit:
                mailKitSmtpClient.SendMessage(_mailMessage, null);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests the SMTP mail client connection.
    /// </summary>
    public void testConnection()
    {
        switch (useSmtpMailClientLibrary)
        {
            case DocSmtpMailClientLibrary::DotNet:
                throw warning("@DocentricAX4:DocParametersEmailingTestConnectionNotSupportedWarning");

            case DocSmtpMailClientLibrary::MailKit:
                mailKitSmtpClient.Open();
                mailKitSmtpClient.Authenticate();
                DocGlobalHelper::handleInfo(mailKitSmtpClient.GetServerCapabilities());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes an instance of the SMTP mail client.
    /// </summary>
    public void dispose()
    {
        // Dispose smtp mail client object.
        switch (useSmtpMailClientLibrary)
        {
            case DocSmtpMailClientLibrary::DotNet:
                dotNetSmtpClient.Dispose();
                break;

            case DocSmtpMailClientLibrary::MailKit:
                mailKitSmtpClient.Dispose();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the DocSmtpMailClient class.
    /// </summary>
    /// <param name = "_mailServerName">Outgoing SMTP mail server</param>
    /// <param name = "_mailServerPort">SMTP port number</param>
    /// <param name = "_useNTLM">Use default credentials</param>
    /// <param name = "_authenticationRequired">Is authentication required</param>
    /// <param name = "_userName">User name</param>
    /// <param name = "_password">Password</param>
    /// <param name = "_requireSSL">Is SSL required</param>
    /// <param name = "_clientTimeout">SMTP client timeout in ms</param>
    /// <param name = "_deliveryFormat">SMTP delivery format</param>
    /// <returns>An instance of the DocSmtpMailClient class</returns>
    public static DocSmtpMailClient construct(
        SMTPRelayServerName _mailServerName,
        SMTPPortNumber _mailServerPort,
        SysEmailNTLM _useNTLM,
        boolean _authenticationRequired,
        SMTPUserName _userName,
        SMTPPassword _password,
        boolean _requireSSL,
        DocSmtpClientTimeout _clientTimeout,
        DocSmtpDeliveryFormat _deliveryFormat)
    {
        // Set the username and password depending on the _useNTLM and _authenticationRequired flag
        SMTPUserName userName = _useNTLM || !_authenticationRequired ? null : _userName;
        SMTPPassword password = _useNTLM || !_authenticationRequired ? null : _password;

        DocSmtpMailClient smtpMailClient = new DocSmtpMailClient();
        smtpMailClient.parmUseSmtpMailClientLibrary(DocConstantGlobal::defaultSmtpMailClientLibrary());
        smtpMailClient.setMailServerName(_mailServerName);
        smtpMailClient.setMailServerPort(_mailServerPort);
        smtpMailClient.setUseNTLM(_useNTLM);
        smtpMailClient.setAuthenticationRequired(_authenticationRequired);
        smtpMailClient.setUserName(userName);
        smtpMailClient.setRequireSSL(_requireSSL);
        smtpMailClient.setClientTimeout(_clientTimeout);
        smtpMailClient.setDeliveryFormat(_deliveryFormat);

        switch (smtpMailClient.parmUseSmtpMailClientLibrary())
        {
            case DocSmtpMailClientLibrary::DotNet:
                // Instance SMTP client
                SmtpClient smtpClient = new SmtpClient(_mailServerName, _mailServerPort);
                
                // Set timeout in ms
                smtpClient.set_Timeout(_clientTimeout);
    
                // Set credentials
                if (_useNTLM)
                {
                    smtpClient.set_UseDefaultCredentials(true);
                }
                else
                {
                    smtpClient.set_UseDefaultCredentials(false);
                    smtpClient.set_Credentials(new System.Net.NetworkCredential(userName, password));
                }

                // Enable SSL
                smtpClient.set_EnableSsl(_requireSSL);
    
                // Delivery Method
                smtpClient.set_DeliveryMethod(SmtpDeliveryMethod::Network);
    
                // Delivery Format
                switch (_deliveryFormat)
                {
                    case DocSmtpDeliveryFormat::International:
                        smtpClient.set_DeliveryFormat(SmtpDeliveryFormat::International);
                        break;
                    case DocSmtpDeliveryFormat::SevenBit:
                        smtpClient.set_DeliveryFormat(SmtpDeliveryFormat::SevenBit);
                        break;
                }

                smtpMailClient.setDotNetSmtpClient(smtpClient);
                break;

            case DocSmtpMailClientLibrary::MailKit:
                // Instance SMTP client settings
                DocSmtpClientSettings clientSettings = new DocSmtpClientSettings(
                                                                _mailServerName, 
                                                                _mailServerPort, 
                                                                _requireSSL,
                                                                _useNTLM ? DocSmtpAuthentication::Ntlm : (_authenticationRequired ? DocSmtpAuthentication::UsernameAndPassword : DocSmtpAuthentication::None),
                                                                userName,
                                                                password);
                // Set timeout in ms
                clientSettings.ConnectionTimeout = _clientTimeout;

                // Instance SMTP client
                DocSmtpClient docSmtpClient = DocSmtpClient::CreateOrGetCachedSmtpClient(clientSettings);
                
                // Delivery Format
                DocSmtpMessageFormatOptions formatOptions = docSmtpClient.DefaultMessageFormatOptions;
                switch (_deliveryFormat)
                {
                    case DocSmtpDeliveryFormat::International:
                        formatOptions.International = true;
                        break;
                    case DocSmtpDeliveryFormat::SevenBit:
                        formatOptions.International = false;
                        break;
                }

                smtpMailClient.setMailKitSmtpClient(docSmtpClient);
        }

        return smtpMailClient;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>