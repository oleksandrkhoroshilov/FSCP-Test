<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderSrsProforma</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

/// <summary>
/// An abstract base class for providing data sources for proforma reports in the Docentric reporting framework.
/// It extends <see cref="DocDataSourceProviderSrsReporting"/> to add specifics of proforma reports,
/// which often require specialized handling of journal records, proforma-specific data objects, and additional
/// parameters for reporting. This class integrates closely with various Dynamics 365 entities to fetch and prepare
/// report data accordingly.
/// </summary>
/// <remarks>
/// Use this class as a base class for all report data source providers which support proforma functionality.
/// </remarks>
abstract class DocDataSourceProviderSrsProforma extends DocDataSourceProviderSrsReporting
{
    DocReportProformaDataSource             proformaDsObject;
    Common                                  proformaJournal, proformaJournalVersion, journal;
    PurchTableAllVersions                   proformaPurchTableAllVersions;
    RecId                                   journalRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// When overridden in a derived class, gets the storage prefix used to identify proforma report data in temporary storage.
    /// </summary>
    /// <returns>A string representing the storage prefix for the proforma report data.</returns>
    abstract protected str proformaReportStoragePrefix()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the data source provider for generating the data source by performing pre-run initialization tasks.
    /// This includes fetching the relevant proforma report data object from temporary storage and identifying the
    /// journal record associated with the proforma report.
    /// </summary>
    protected void preRunGenerateDS()
    {
        super();
        
        // Determine the Journal RecId (or the Journal Version RecId in case of the PurchPackingSlip/SalesPackingSlip report).
        Object reportContract = this.getSrsRdpContract();
        str errorMsg = strFmt('%1 is not a proforma report. Its DSP class must not extend the DocDataSourceProviderSrsProforma class', this.parmParamsReporting().parmReportId());
        try
        {
            if (reportContract is PSAProjInvoiceContract)
            {
                journalRecId = reportContract.parmProjInvoiceJourRecId();
            }
            else if (reportContract is FreeTextInvoiceContract || this.proformaReportStoragePrefix() == DocConstantDSP::Prefix_FreeTextInvoice)
            {
                // Get the journal RecId from the FreeTextInvoiceContract
                FreeTextInvoiceContract freeTextInvoiceContract = reportContract as FreeTextInvoiceContract;
                journalRecId = freeTextInvoiceContract.parmCustInvoiceJourRecId();

                // Get the CustInvoiceJour record to check if the report is a proforma.
                CustInvoiceJour custInvoiceJournal = CustInvoiceJour::findRecId(journalRecId);

                // If the report is a proforma, create the proforma data source object.
                if (custInvoiceJournal.isProforma())
                {
                    DocReportProformaDataSource freeTextProformaDsObject = new DocReportProformaDataSource();
                    freeTextProformaDsObject.parmJournal(custInvoiceJournal);
                    proformaDsObject = freeTextProformaDsObject;
                }
            }
            else if (reportContract is AgreementConfirmationRDPContract || this.proformaReportStoragePrefix() == DocConstantDSP::Prefix_AgreementConfirmation)
            {
                journalRecId = reportContract.parmRecordId();
                if (reportContract.parmProforma())
                {
                    // we only create the proformaDsObject if the report is a proforma
                    // journal is not needed further in the pipeline
                    proformaDsObject = new DocReportProformaDataSource();
                }
            }
            else
            {
                journalRecId = reportContract.parmRecordId();
            }
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errorMsg);
        }
        if (!journalRecId)
        {
            DocGlobalHelper::handleException(funcName(), errorMsg);
        }

        // Try to get the proformaDsObject from the Docentric report temporary storage.
        try
        {
            if (!proformaDsObject)
            {
                if (this.parmParams().parmSaveXmlDataSourceToFile()
                && reportTableActiveReport.GenerateXmlDsWithReportRun)
                {
                    // The GenerateXmlDsWithReportRun flag turned on and the consequence is that the Generate DS print destination is the selected one.
                    // This means that we will have one more pass in which we'll remove the proforma object from the temporary storage.
                    proformaDsObject = TemporaryReportDataStorage::GetDataObject(this.proformaReportStoragePrefix(), journalRecId);

                    // Note that we will not have another pass and proformaDsObject will not be removed if the Generate DS print destination
                    // has been initially selected and at the same time the GenerateXmlDsWithReportRun flag is turned on.
                    // Since this can be the case only for proforma and can appear only in development phase, we'll leave it like this.
                    // Also, it's a small chance that one can use these two options together.
                }
                else
                {
                    proformaDsObject = TemporaryReportDataStorage::GetAndRemoveDataObject(this.proformaReportStoragePrefix(), journalRecId);
                }
            }

            //// special cases
            //if (!proformaDsObject)
            //{
            //    // FreeTextInvoice
            //    if (this.proformaReportStoragePrefix() == DocConstantDSP::Prefix_FreeTextInvoice)
            //    {

            //        proformaDsObject = TemporaryReportDataStorage::GetAndRemoveDataObject(DocConstantDiagnostics::ProformaFreeTextInvoice, journalRecId);
            //    }

            //    // CofirmationAgreement
            //}
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(),
                strFmt('Error retrieving proforma journal from Docentric temporary storage for the report (%1)', this.parmParamsReporting().parmReportId()),
                Exception::Error, DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(),
                strFmt('Error retrieving proforma journal from Docentric temporary storage for the report (%1)', this.parmParamsReporting().parmReportId()),
                Exception::Error, DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current report run is for a proforma report based on the presence of a proforma data source object.
    /// </summary>
    /// <returns>True if the report is a proforma report; otherwise, false.</returns>
    final public boolean isProforma()
    {
        return proformaDsObject != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the journal record from Docentric report temporary storage in proforma scenario.
    /// </summary>
    /// <returns>The journal record.</returns>
    protected Common getProformaJournal()
    {
        if (this.isProforma())
        {
            if (!proformaJournal)
            {
                proformaJournal = proformaDsObject.parmJournal();
            }
        }

        return proformaJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main trans line (e.g. CustInvoiceTrans) by provided trans line RecId.
    /// </summary>
    /// <param name = "_proformaTransLineRecId">Main trans line RecId</param>
    /// <returns>Main trans line, e.g. CustInvoiceTrans line</returns>
    protected Common getProformaTransLine(RecId _proformaTransLineRecId)
    {
        Common proformaTransLine;

        if (this.isProforma())
        {
            Map proformaTransMap = proformaDsObject.parmJournalLines();
            if (proformaTransMap.exists(_proformaTransLineRecId))
            {
                proformaTransLine = proformaTransMap.lookup(_proformaTransLineRecId);
            }
        }

        return proformaTransLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaPackingSlipVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the latest PackingSlipVersion record related to the current journal (PackingSlipJour) record.
    /// NOTE: Applicable only for the SalesPackingSlip and PurchPackingSlip reports.
    /// </summary>
    /// <returns>The VendPackingSlipVersion or CustPackingSlipVersion record.</returns>
    protected Common getProformaPackingSlipVersion()
    {
        if (!(proformaDsObject is DocReportProformaPackingSlipDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaPackingSlipVersion() method can be invoked only for the Sales or Purch Packing Slip report');
        }

        if (this.isProforma())
        {
            if (!proformaJournalVersion)
            {
                DocReportProformaPackingSlipDataSource proformaDsObjectPackingSlip = proformaDsObject as DocReportProformaPackingSlipDataSource;
                proformaJournalVersion = proformaDsObjectPackingSlip.parmPackingSlipVersion();
            }
        }

        return proformaJournalVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaPackingSlipTransHistoryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the latest PackingSlipTransHistory line by provided PackingSlipTrans RecId.
    /// NOTE: Applicable only for the SalesPackingSlip and PurchPackingSlip reports.
    /// </summary>
    /// <param name = "_packingSlipTransRecId">SalesPackingSlipTrans.RecId or VendPackingSlipTrans.RecId</param>
    /// <returns>The latest PackingSlipTransHistory line related to the given PackingSlipTrans.</returns>
    protected Common getProformaPackingSlipTransHistoryLine(RecId _packingSlipTransRecId)
    {
        Common packingSlipTransHistoryLine;  // VendPackingSlipTransHistory or CustPackingSlipTransHistory

        if (!(proformaDsObject is DocReportProformaPackingSlipDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaPackingSlipTransHistoryLine() method can be invoked only for the Sales or Purch Packing Slip report');
        }

        if (this.isProforma())
        {
            DocReportProformaPackingSlipDataSource proformaDsObjectPackingSlip = proformaDsObject as DocReportProformaPackingSlipDataSource;
                
            Map packingSlipTransHistoryMap = proformaDsObjectPackingSlip.parmPackingSlipTransHistoryLines();
            if (packingSlipTransHistoryMap.exists(_packingSlipTransRecId))
            {
                packingSlipTransHistoryLine = packingSlipTransHistoryMap.lookup(_packingSlipTransRecId);
            }
        }

        return packingSlipTransHistoryLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaPurchTableAllVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related PurchTableAllVersions record related to the current journal (VendPurchOrderJour) record.
    /// NOTE: Applicable only for the PurchPurchaseOrder report.
    /// </summary>
    /// <returns>The PurchTableAllVersions record.</returns>
    protected PurchTableAllVersions getProformaPurchTableAllVersions()
    {
        if (!(proformaDsObject is DocReportProformaPurchOrderDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaPurchTableAllVersions() method can be invoked only for the Purchase Order report');
        }

        if (this.isProforma())
        {
            if (!proformaPurchTableAllVersions)
            {
                DocReportProformaPurchOrderDataSource proformaDsObjectPO = proformaDsObject as DocReportProformaPurchOrderDataSource;
                proformaPurchTableAllVersions = proformaDsObjectPO.parmPurchTableAllVersions();
            }
        }

        return proformaPurchTableAllVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLineAllVersionsByLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related PurchLineAllVersions line by the provided PurchLine line number.
    /// NOTE: Applicable only for the PurchPurchaseOrder report.
    /// </summary>
    /// <param name = "_lineNumber">PurchLine LineNumber</param>
    /// <returns>The PurchLineAllVersions record</returns>
    protected PurchLineAllVersions getPurchLineAllVersionsByLineNum(int64 _lineNumber)
    {
        PurchLineAllVersions purchLineAllVersions;

        if (!(proformaDsObject is DocReportProformaPurchOrderDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getPurchLineAllVersionsByLineNum() method can be invoked only for the Purchase Order report');
        }

        if (this.isProforma())
        {
            DocReportProformaPurchOrderDataSource proformaDsObjectPO = proformaDsObject as DocReportProformaPurchOrderDataSource;
                
            Map purchLineAllVersionsMap = proformaDsObjectPO.parmPurchLineAllVersionsMap();
            if (purchLineAllVersionsMap.exists(_lineNumber))
            {
                purchLineAllVersions = purchLineAllVersionsMap.lookup(_lineNumber);
            }
        }

        return purchLineAllVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaProjInvoiceEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related ProjInvoiceEmpl record (line) by the provided RecId.
    /// NOTE: Applicable only for project invoice reports.
    /// </summary>
    /// <param name = "_recId">ProjInvoiceEmpl's RecId</param>
    /// <returns>The ProjInvoiceEmpl record</returns>
    protected ProjInvoiceEmpl getProformaProjInvoiceEmpl(RecId _recId)
    {
        ProjInvoiceEmpl projInvoiceEmpl;

        if (!(proformaDsObject is DocReportProformaProjInvoiceDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaProjInvoiceEmpl() method can be invoked only for project invoice reports');
        }

        if (this.isProforma())
        {
            DocReportProformaProjInvoiceDataSource proformaDsObjectPI = proformaDsObject as DocReportProformaProjInvoiceDataSource;
                
            Map projInvoiceEmplMap = proformaDsObjectPI.parmProjInvoiceEmplLines();
            if (projInvoiceEmplMap.exists(_recId))
            {
                projInvoiceEmpl = projInvoiceEmplMap.lookup(_recId);
            }
        }

        return projInvoiceEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaProjInvoiceRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related ProjInvoiceRevenue record (line) by the provided RecId.
    /// NOTE: Applicable only for project invoice reports.
    /// </summary>
    /// <param name = "_recId">ProjInvoiceRevenue's RecId</param>
    /// <returns>The ProjInvoiceRevenue record</returns>
    protected ProjInvoiceRevenue getProformaProjInvoiceRevenue(RecId _recId)
    {
        ProjInvoiceRevenue projInvoiceRevenue;

        if (!(proformaDsObject is DocReportProformaProjInvoiceDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaProjInvoiceRevenue() method can be invoked only for project invoice reports');
        }

        if (this.isProforma())
        {
            DocReportProformaProjInvoiceDataSource proformaDsObjectPI = proformaDsObject as DocReportProformaProjInvoiceDataSource;
                
            Map projInvoiceRevenueMap = proformaDsObjectPI.parmProjInvoiceRevenueLines();
            if (projInvoiceRevenueMap.exists(_recId))
            {
                projInvoiceRevenue = projInvoiceRevenueMap.lookup(_recId);
            }
        }

        return projInvoiceRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaProjInvoiceOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related ProjInvoiceOnAcc record (line) by the provided RecId.
    /// NOTE: Applicable only for project invoice reports.
    /// </summary>
    /// <param name = "_recId">ProjInvoiceOnAcc's RecId</param>
    /// <returns>The ProjInvoiceOnAcc record</returns>
    protected ProjInvoiceOnAcc getProformaProjInvoiceOnAcc(RecId _recId)
    {
        ProjInvoiceOnAcc projInvoiceOnAcc;

        if (!(proformaDsObject is DocReportProformaProjInvoiceDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaProjInvoiceOnAcc() method can be invoked only for project invoice reports');
        }

        if (this.isProforma())
        {
            DocReportProformaProjInvoiceDataSource proformaDsObjectPI = proformaDsObject as DocReportProformaProjInvoiceDataSource;
                
            Map projInvoiceOnAccMap = proformaDsObjectPI.parmProjInvoiceOnAccLines();
            if (projInvoiceOnAccMap.exists(_recId))
            {
                projInvoiceOnAcc = projInvoiceOnAccMap.lookup(_recId);
            }
        }

        return projInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaProjInvoiceItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related ProjInvoiceItem record (line) by the provided RecId.
    /// NOTE: Applicable only for project invoice reports.
    /// </summary>
    /// <param name = "_recId">ProjInvoiceItem's RecId</param>
    /// <returns>The ProjInvoiceItem record</returns>
    protected ProjInvoiceItem getProformaProjInvoiceItem(RecId _recId)
    {
        ProjInvoiceItem projInvoiceItem;

        if (!(proformaDsObject is DocReportProformaProjInvoiceDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaProjInvoiceItem() method can be invoked only for project invoice reports');
        }

        if (this.isProforma())
        {
            DocReportProformaProjInvoiceDataSource proformaDsObjectPI = proformaDsObject as DocReportProformaProjInvoiceDataSource;
                
            Map projInvoiceItemMap = proformaDsObjectPI.parmProjInvoiceItemLines();
            if (projInvoiceItemMap.exists(_recId))
            {
                projInvoiceItem = projInvoiceItemMap.lookup(_recId);
            }
        }

        return projInvoiceItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaProjInvoiceCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related ProjInvoiceCost record (line) by the provided RecId.
    /// NOTE: Applicable only for project invoice reports.
    /// </summary>
    /// <param name = "_recId">ProjInvoiceCost's RecId</param>
    /// <returns>The ProjInvoiceCost record</returns>
    protected ProjInvoiceCost getProformaProjInvoiceCost(RecId _recId)
    {
        ProjInvoiceCost projInvoiceCost;

        if (!(proformaDsObject is DocReportProformaProjInvoiceDataSource))
        {
            DocGlobalHelper::handleException(funcName(), 'The getProformaProjInvoiceCost() method can be invoked only for project invoice reports');
        }

        if (this.isProforma())
        {
            DocReportProformaProjInvoiceDataSource proformaDsObjectPI = proformaDsObject as DocReportProformaProjInvoiceDataSource;
                
            Map projInvoiceCostMap = proformaDsObjectPI.parmProjInvoiceCostLines();
            if (projInvoiceCostMap.exists(_recId))
            {
                projInvoiceCost = projInvoiceCostMap.lookup(_recId);
            }
        }

        return projInvoiceCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>materializeProformaMainTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and fills temporary tables for the main trans lines (e.g. CustInvoiceTrans).
    /// </summary>
    /// <returns>The table buffer of the temporary table that can be used in select statements</returns>
    protected Common materializeProformaMainTransLines()
    {
        Common proformaLineTmp;

        if (!this.isProforma())
        {
            return proformaLineTmp;
        }

        Map proformaTransMap = proformaDsObject.parmJournalLines();
        
        proformaLineTmp = this.materializeProformaTransLines(proformaTransMap);

        return proformaLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>materializeProformaTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and fills temporary tables for the provided trans lines (e.g. CustTrans).
    /// </summary>
    /// <param name = "_proformaTransLineMap">Map of the trans lines</param>
    /// <returns>The table buffer of the temporary table that can be used in select statements</returns>
    protected Common materializeProformaTransLines(Map _proformaTransLineMap)
    {
        Common proformaLineTmp;

        if (!this.isProforma())
        {
            return proformaLineTmp;
        }

        MapEnumerator proformaTransMapEnum = _proformaTransLineMap.getEnumerator();

        proformaLineTmp.setTmp();

        ttsbegin;
        while (proformaTransMapEnum.moveNext())
        {
            Common currentProformaTransLine = proformaTransMapEnum.currentValue();
            proformaLineTmp.data(currentProformaTransLine);
            proformaLineTmp.doInsert();
        }
        ttscommit;

        return proformaLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend report run settings, if necessary, to ensure correct placeholder handling and other report configurations (e.g., overriding print destinations, print archive contract, etc.).
    /// </summary>
    /// <param name="_reportRunContext">Context of the report run.</param>
    /// <param name="_replaceStandardPlaceholders">Indicates whether standard placeholders should be replaced.</param>
    /// <returns>A DocPlaceholderManager instance for managing report placeholders.</returns>
    /// <remarks>
    /// This method sets the IsProforma parameter in the print archive contract if a proforma was printed out. 
    /// It also prevents saving non supported proforma reports to print archive.
    /// </remarks>
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        DocPlaceholderManager placeholderManager = super(_reportRunContext, _replaceStandardPlaceholders);

        // Specific handling only is we save to Print archive.
        if (_reportRunContext.parmSaveToArchive() || _reportRunContext.parmPrintDestination() == DocPrintDestination::Archive)
        {
            if (this.isProforma())
            {
                // Set the IsProforma parameter in the print archive contract if a proforma was printed out.
                _reportRunContext.archiveContract().parmIsProforma(true);

                // Proforma is not allowed to be save to Print archive if the SaveProformaToArchive flag is turned off.
                if (!_reportRunContext.parmSaveProformaToArchive())
                {
                    // If the selected print destination is Print archive, stop the execution.
                    if (_reportRunContext.parmPrintDestination() == DocPrintDestination::Archive)
                    {
                        DocGlobalHelper::handleException('', strFmt("@DocentricAX2:ProformaCannotBeSavedToPA", _reportRunContext.reportId()));
                    }
                    else // Otherwise continue, just prevent saving to Print archive.
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:ProformaCannotBeSavedToPA", _reportRunContext.reportId()));
                        _reportRunContext.parmSaveToArchive(false);
                    }
                } 
            }
        }

        return placeholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name="_recordBuilderParameters">
    /// Record builder for the Parameters data section.
    /// </param>
    /// <remarks>
    /// This method adds a new parameter to the report data source indicating whether the report is a proforma.
    /// </remarks>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add a new data field containing the info if this is proforma.
        _recordBuilderParameters.goToTopRecord();
        _recordBuilderParameters.addCalculatedFieldEnum('IsProforma', enumStr(boolean), this.isProforma(), "@DocentricAX:IsProforma");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>