<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportAttachmentRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report attachment definition, which is configured in the print destination form
/// and stored in the database.
/// </summary>
class DocReportAttachmentRule implements SysPackable
{
    DocReportAttachmentLoadFrom             loadFrom;
    DocAttachmentCategoryId                 categoryId;
    DocAttachmentDescription                name;
    DataAreaId                              selectedAttachmentCompanyId;
    DocEmailAttachmentName                  displayName;
    DocReportAttachmentRestriction          restriction;
    DocreportAttachmentLanguageFilter       languageFilter;
    DocReportAttachmentIfNotFoundAction     ifNotFoundAction;
    DocReportAttachmentPrintAs              printAs;
    FilenameType                            fileExtension;
    DocReportAttachmentRuleNumber           setupRuleNumber;
    DocReportAttachmentDocuTypeId           docuTypeId;
    DocAttachmentTags                       tags;

    #define.packVersion1(1)
    #define.currentPackVersion(2) // Added DocAttachmentTags

    #localmacro.packListVersion1
        version,
        loadFrom,
        categoryId,
        name,
        selectedAttachmentCompanyId,
        displayName,
        restriction,
        languageFilter,
        ifNotFoundAction,
        printAs,
        fileExtension,
        setupRuleNumber,
        docuTypeId
    #endMacro

    #localmacro.currentList
        version,
        loadFrom,
        categoryId,
        name,
        selectedAttachmentCompanyId,
        displayName,
        restriction,
        languageFilter,
        ifNotFoundAction,
        printAs,
        fileExtension,
        setupRuleNumber,
        docuTypeId,
        tags
    #endMacro        


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int version = #currentPackVersion;
    
        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean    ret = false;
        int        version;    
   
        if (typeOf(conPeek(_packedClass, 1)) == Types::Integer)
        {
            version = conPeek(_packedClass, 1);

            if (version == #currentPackVersion)
            {
                [#currentList] = _packedClass;
                ret = true;
            }
            else if (version == #packVersion1)
            {
                [#packListVersion1] = _packedClass;
                ret = true;
            }
        }
                   
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static DocReportAttachmentRule create(container _con)
    {
        DocReportAttachmentRule parameter = new DocReportAttachmentRule();
        parameter.unpack(_con);
        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDescriptionValid</Name>
				<Source><![CDATA[
    public static boolean isDescriptionValid(DocReportAttachmentLoadFrom _loadFrom, DocReportAttachmentSelect _description, FilenameType _fileExtension)
    {
        // We check description only on Global attachment
        if (_loadFrom != DocReportAttachmentLoadFrom::GlobalAttachments)
        {
            return true;
        }

        // Empty Description is allowed (it means that the user has deleted
        // the previously entered Description).
        if (_description == '')
        {
            return true;
        }

        DocuRef     docuRef;
        CompanyInfo companyInfo;
        DocuType    docuType;
        DocuValue   docuValue;
        
        boolean ret = false;
        while select RecId from docuRef
                where docuRef.IsGlobalAttachment_DC == NoYes::Yes
                    && docuRef.RefTableId == DocuRef::GetRootTableID(companyInfo.TableId)
                    && docuRef.Name == _description
            join DataArea from companyInfo
                where companyInfo.RecId == docuRef.RefRecId
                    && (companyInfo.DataArea == curExt() || companyInfo.DataArea == 'DAT')
            join ActionClassId from docuType
                where docuType.DataAreaId == docuRef.ActualCompanyId
                    && docuType.TypeId == docuRef.TypeId
            outer join RecId, FileName, FileType from docuValue
                where docuValue.RecId == docuRef.ValueRecId
        {
            if (_fileExtension && _fileExtension != docuValue.FileType)
            {
                // Extension is specified on the attachment definition,
                // and it is not equal to the currently selected docuRef extension, just skip it.
                continue;
            }

            // take only records where action class is valid
            if (!SysDictClass::isEqualOrSuperclass(docuType.ActionClassId, classNum(DocuActionFile)))
            {
                continue;
            }

            ret = true;
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public DocValidationResult validate(boolean _isRuntime = false)
    {
        DocValidationResult validationResult = new DocValidationResult();

        boolean isValid = true;
        str validationMessage = '';
        
        
        // If CategoryId is set, check if it exists
        if (this.parmCategoryId() != '')
        {
            if (!DocAttachmentCategory::findByCategory(this.parmCategoryId()))
            {
                isValid = false;

                validationMessage += (validationMessage == '' ? '' : '; ') + 
                                    strFmt("@DocentricAX2:ParameterNotFound",
                                        "@DocentricAX2:AttachmentCategoryIdHelp",
                                        this.parmCategoryId());
            }
        }        
            
        // Don't allow Global attachments with empty both Category and Description.
        if (this.parmLoadFrom() == DocReportAttachmentLoadFrom::GlobalAttachments 
                && this.parmCategoryId() == '' && this.parmName() == '')
        {
            isValid = false;            

            validationMessage += (validationMessage == '' ? '' : '; ') +
                                    strFmt("@DocentricAX2:CategoryOrDescriptionMissing",
                                        fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, CategoryId)),
                                        fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, Description)));
        }
        
        // Don't allow empty DisplayName
        if (this.parmDisplayName() == '')
        {
            isValid = false;            

            validationMessage += (validationMessage == '' ? '' : '; ') +
                                    strFmt("@DocentricAX2:FieldCannotBeEmpty",
                                        fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, DisplayName)));
        }

        if (_isRuntime)
        {
            // At this moment in runtime all placeholder in Description should be resolved
            if (DocPlaceholderManager::containPlaceholders(this.parmName()))
            {
                isValid = false;

                validationMessage += (validationMessage == '' ? '' : '; ') +
                                    strFmt("@DocentricAX2:FieldContainsPlaceholders",
                                        fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, Description)),
                                        this.parmName());
            }
        }

        validationResult.parmIsValid(isValid);
        validationResult.parmMessage(validationMessage);
        
        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    public str toString()
    {
        str msg = '';

        // Rule number
        msg += strFmt('%1 %2 - ', "@DocentricAX2:SetupRuleNumber", this.parmSetupRuleNumber());
           
        // LoadFrom
        msg += strFmt('%1: %2; ', "@DocentricAX2:LoadFrom", this.parmLoadFrom());
            
        // CategoryId
        msg += strFmt('%1: %2; ', "@DocentricAX2:AttachmentCategoryId", (this.parmCategoryId() != '') ? this.parmCategoryId() : 'ANY');
            
        // Description
        msg += strFmt('%1: %2; ', "@SYS7576", (this.parmName() != '') ? this.parmName() : 'ANY');
            
        // DisplayName
        msg += strFmt('%1: %2; ', "@SYS89193", this.parmDisplayName());

        // FileExtension
        msg += strFmt('%1: %2; ', "@SYS10194", (this.parmFileExtension() != '') ? this.parmFileExtension() : 'ANY');

        // DocuTypeId
        msg += strFmt('%1: %2; ', "@DocentricAX2:DocuTypeId", (this.parmDocuTypeId() != '') ? this.parmDocuTypeId() : 'ANY');

        // Restriction
        msg += strFmt('%1: %2; ', "@SYS56075", this.parmRestriction());

        // Languagefilter
        msg += strFmt('%1: %2; ', "@DocentricAX2:FilterByLanguage", this.parmLanguageFilter());

        // Tags
        msg += strFmt('%1: %2; ', "@DocentricAX2:AttachmentTags", this.parmTags());


        return msg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public DocAttachmentDescription parmName(DocAttachmentDescription _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedAttachmentCompanyId</Name>
				<Source><![CDATA[
    public DataAreaId parmSelectedAttachmentCompanyId(DataAreaId _selectedAttachmentCompanyId = selectedAttachmentCompanyId)
    {
        selectedAttachmentCompanyId = _selectedAttachmentCompanyId;
        return selectedAttachmentCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
    public DocAttachmentCategoryId parmCategoryId(DocAttachmentCategoryId _categoryId = categoryId)
    {
        categoryId = _categoryId;
        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadFrom</Name>
				<Source><![CDATA[
    public DocReportAttachmentLoadFrom parmLoadFrom(DocReportAttachmentLoadFrom _loadFrom = loadFrom)
    {
        loadFrom = _loadFrom;
        return loadFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIfNotFoundAction</Name>
				<Source><![CDATA[
    public DocReportAttachmentIfNotFoundAction parmIfNotFoundAction(DocReportAttachmentIfNotFoundAction _ifNotFoundAction = ifNotFoundAction)
    {
        ifNotFoundAction = _ifNotFoundAction;
        return ifNotFoundAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayName</Name>
				<Source><![CDATA[
    public DocEmailAttachmentName parmDisplayName(DocEmailAttachmentName _displayName = displayName)
    {
        displayName = _displayName;
        return displayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRestriction</Name>
				<Source><![CDATA[
    public DocReportAttachmentRestriction parmRestriction(DocReportAttachmentRestriction _restriction = restriction)
    {
        restriction = _restriction;
        return restriction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageFilter</Name>
				<Source><![CDATA[
    public DocreportAttachmentLanguageFilter parmLanguageFilter(DocreportAttachmentLanguageFilter _languageFilter = languageFilter)
    {
        languageFilter = _languageFilter;
        return languageFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAs</Name>
				<Source><![CDATA[
    public DocReportAttachmentPrintAs parmPrintAs(DocReportAttachmentPrintAs _printAs = printAs)
    {
        printAs = _printAs;
        return printAs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileExtension</Name>
				<Source><![CDATA[
    public FilenameType parmFileExtension(FilenameType _fileExtension = fileExtension)
    {
        fileExtension = _fileExtension;
        return fileExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupRuleNumber</Name>
				<Source><![CDATA[
    public DocReportAttachmentRuleNumber parmSetupRuleNumber(DocReportAttachmentRuleNumber _setupRuleNumber = setupRuleNumber)
    {
        setupRuleNumber = _setupRuleNumber;
        return setupRuleNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuTypeId</Name>
				<Source><![CDATA[
    public DocReportAttachmentDocuTypeId parmDocuTypeId(DocReportAttachmentDocuTypeId _docuTypeId = docuTypeId)
    {
        docuTypeId = _docuTypeId;
        return docuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTags</Name>
				<Source><![CDATA[
    public DocAttachmentTags parmTags(DocAttachmentTags _tags = tags)
    {
        tags = _tags;
        return tags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilename</Name>
				<Source><![CDATA[
    public str getFilename()
    {
        return strFmt('%1.%2', this.parmDisplayName(), this.parmFileExtension());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>