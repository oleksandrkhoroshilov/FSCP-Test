<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintMgmtUtilsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class used for Print management utilities.
/// </summary>
public class DocPrintMgmtUtilsHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the node-specific information (transaction record, node-specific ID, menu item
    /// that opens the related transaction record, etc.) based on the given reference TableId and RecId.
    /// </summary>
    /// <param name = "_refTableId">RefTableId reference TableId. It matches the values from the PrintMgmtNodeType enum.</param>
    /// <param name = "_refRecId">RefRecId reference RecId in the referenced TableId.</param>
    /// <param name = "_dataAreaId">Data area Id</param>
    /// <returns>DocPrintMgmtNodeInfo object that contains the node-specific information.</returns>
    public static DocPrintMgmtNodeInfo getNodeInfo(RefTableId _refTableId, RefRecId _refRecId, DataAreaId _dataAreaId)
    {
        DocPrintMgmtNodeInfo nodeInfo = new DocPrintMgmtNodeInfo();
        nodeInfo.parmIsValid(true);  

        if (!_refTableId || !_refRecId)
        {
            nodeInfo.parmIsValid(false);
            return nodeInfo;
        }
              
        str nodeSpecificId;
        Common referencedRecord;
        str menuItemName;
        PrintMgmtReportFormatCountryRegionId countryRegionId;
           
        changecompany(_dataAreaId)
        {
            switch (_refTableId)
            {
                /*
                * ---------------------------------------------------------------------
                * Account nodes
                * ---------------------------------------------------------------------
                */
                case tableNum(CustTable):
                    CustTable custTable = CustTable::findRecId(_refRecId);
                    referencedRecord = custTable;
                    nodeSpecificId = custTable.AccountNum;
                    menuItemName = menuItemDisplayStr(CustTable);
                    countryRegionId = custTable.postalAddress().CountryRegionId;
                    break;
                    
                case tableNum(VendTable):
                    VendTable vendTable = VendTable::findRecId(_refRecId);
                    referencedRecord = vendTable;
                    nodeSpecificId = vendTable.AccountNum;
                    menuItemName = menuItemDisplayStr(VendTable);
                    countryRegionId = vendTable.postalAddress().CountryRegionId;
                    break;
                
                /*
                * ---------------------------------------------------------------------
                * Transaction nodes
                * ---------------------------------------------------------------------
                */
                case tableNum(SalesTable):
                    SalesTable salesTable = SalesTable::findRecId(_refRecId);
                    referencedRecord = salesTable;
                    nodeSpecificId = salesTable.SalesId;
                    menuItemName = menuItemDisplayStr(SalesTable);
                    countryRegionId = salesTable.getCountryRegionIdByDocumentStatus();
                    break;

                case tableNum(SalesQuotationTable):
                    SalesQuotationTable salesQuotationTable = SalesQuotationTable::findRec(_refRecId);
                    referencedRecord = salesQuotationTable;
                    nodeSpecificId = salesQuotationTable.QuotationId;
                    menuItemName = menuItemDisplayStr(SalesQuotationTable);
                    countryRegionId = LogisticsPostalAddress::findRecId(salesQuotationTable.DeliveryPostalAddress).CountryRegionId;                    
                    break;

                case tableNum(CustInvoiceTable):
                    CustInvoiceTable custInvoiceTable = CustInvoiceTable::findRecId(_refRecId);
                    referencedRecord = custInvoiceTable;
                    nodeSpecificId = custInvoiceTable.InvoiceId != '' ? custInvoiceTable.InvoiceId : custInvoiceTable.InvoiceAccount;
                    menuItemName = menuItemDisplayStr(CustFreeInvoice);
                    countryRegionId = LogisticsPostalAddress::findRecId(custInvoiceTable.PostalAddress).CountryRegionId;
                    break;
                    
                case tableNum(SalesAgreementHeader):
                    SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(_refRecId);
                    referencedRecord = salesAgreementHeader;
                    nodeSpecificId = salesAgreementHeader.CustAccount;
                    menuItemName = menuItemDisplayStr(SalesAgreement);
                    break;
                    
                case tableNum(PurchTable):
                    PurchTable purchTable = PurchTable::findRecId(_refRecId);
                    referencedRecord = purchTable;
                    nodeSpecificId = purchTable.PurchId;
                    menuItemName = menuItemDisplayStr(PurchTable);
                    countryRegionId = LogisticsPostalAddress::findRecId(purchTable.DeliveryPostalAddress).CountryRegionId;
                    break;
                    
                case tableNum(PurchRFQTable):
                    PurchRFQTable purchRFQTable = PurchRFQTable::findRecId(_refRecId);
                    referencedRecord = purchRFQTable;
                    nodeSpecificId = purchRFQTable.RFQId;
                    menuItemName = menuItemDisplayStr(PurchRFQCaseTable);
                    countryRegionId = LogisticsPostalAddress::findRecId(purchRFQTable.DeliveryPostalAddress).CountryRegionId;
                    break;
                    
                case tableNum(PurchRFQVendLink):
                    PurchRFQVendLink purchRFQVendLink;
                    select firstonly purchRFQVendLink where purchRFQVendLink.RecId == _refRecId;
                    referencedRecord = purchRFQVendLink;
                    nodeSpecificId = purchRFQVendLink.RFQCaseId;
                    menuItemName = menuItemDisplayStr(PurchRFQCaseTable);
                    break;
                    
                case tableNum(PurchAgreementHeader):
                    PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::find(_refRecId);
                    referencedRecord = purchAgreementHeader;
                    nodeSpecificId = purchAgreementHeader.VendAccount;
                    menuItemName = menuItemDisplayStr(PurchAgreement);
                    break;
                    
                case tableNum(ProjInvoiceTable):
                    ProjInvoiceTable projInvoiceTable;
                    select firstonly projInvoiceTable where projInvoiceTable.RecId == _refRecId;
                    referencedRecord = projInvoiceTable;
                    nodeSpecificId = projInvoiceTable.ProjInvoiceProjId;
                    menuItemName = menuItemDisplayStr(ProjInvoiceTable);
                    break;
                    
                case tableNum(ProjProposalJour):
                    ProjProposalJour projProposalJour = ProjProposalJour::findRecid(_refRecId);
                    referencedRecord = projProposalJour;
                    nodeSpecificId = projProposalJour.ProposalId;
                    menuItemName = menuItemDisplayStr(ProjInvoiceProposalDetail);
                    break;

                case tableNum(ProjTable):
                    ProjTable projTable = ProjTable::findRecId(_refRecId);
                    referencedRecord = projTable;
                    nodeSpecificId = projTable.ProjId;
                    menuItemName = menuItemDisplayStr(ProjTable);
                    break;
                    
                case tableNum(InventTransferTable):
                    InventTransferTable inventTransferTable;
                    select firstonly inventTransferTable where inventTransferTable.RecId == _refRecId;
                    referencedRecord = inventTransferTable;
                    // menuItemName?
                    nodeSpecificId = inventTransferTable.TransferId;
                    break;
                    
                case tableNum(InventTable):
                    InventTable inventTable = InventTable::findRecId(_refRecId);
                    referencedRecord = inventTable;
                    // menuItemName?
                    nodeSpecificId = inventTable.ItemId;
                    break;
                    
                case tableNum(BankAccountTable):
                    BankAccountTable bankAccountTable;
                    select firstonly bankAccountTable where bankAccountTable.RecId == _refRecId;
                    referencedRecord = bankAccountTable;
                    // menuItemName?
                    nodeSpecificId = bankAccountTable.AccountID;
                    break;

                default:
                    // Skipped:
                    //   - module-level node types: Sales, Purch, Ledger, Bank,
                    //     SalesAdvanceInvoice, PurchaseAdvanceInvoice, WHS, TMS
                    //   - few transaction-level node types: Ledger, ProjectQuotation,
                    //     Bank, SalesAdvanceInvoice, PurchaseAdvanceInvoice
                    nodeInfo.parmIsValid(false);
                    nodeSpecificId = strFmt('%1 (%2)',
                                                    tableId2Name(_refTableId),
                                                    _refRecId);
            }
        }
        
        nodeInfo.parmNodeSpecificId(nodeSpecificId);
        nodeInfo.parmReferencedRecord(referencedRecord);
        nodeInfo.parmMenuItemName(menuItemName);
        nodeInfo.parmCountryRegionId(countryRegionId);

        return nodeInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the print destination related fields of the given DocPrintMgmtUtilsTmp record,
    /// based on the:
    ///   (a) SRSPrintDestinationSettings object, if provided as parameter, or 
    ///   (b) PrintJobSettings field in the DocPrintMgmtUtilsTmp record.
    /// </summary>
    /// <param name = "_tmpTable">DocPrintMgmtUtilsTmp record on which the print destination
    /// related fields should be populated.</param>
    /// <param name = "_pds">SRSPrintDestinationSettings (optional) object with print destination settings.
    /// If null, the PrintJobSettings field (container) on the given DocPrintMgmtUtilsTmp record will be
    /// unpacked and used for populating the print destination related fields.</param>
    public static void unpackPrintDestinationSettings(DocPrintMgmtUtilsTmp _tmpTable, SRSPrintDestinationSettings _pds = null)
    { 
        SRSPrintDestinationSettings pds;
       
       // *********************************************************************************
       // COMMON AND CONTROL FIELDS
       // *********************************************************************************        

        if (_pds == null)
        {
            // If unpacked settings object is not provided, unpack the settings (container) 
            // from the record and use them.
            pds = new SRSPrintDestinationSettings(_tmpTable.PrintJobSettings);
            _tmpTable.RecordStatus = DocPrintMgmtUtilsRecordStatus::Clean;
        }
        else
        {
            // If unpacked settings object is provided, use it and also pack it into the container
            // and store that container in the record.
            pds = _pds;
            _tmpTable.PrintJobSettings = pds.pack();
            _tmpTable.RecordStatus = DocPrintMgmtUtilsRecordStatus::Dirty;
        }

        // When we unpack the given packed settings, the packed and unpacked settings become synchronized.
        _tmpTable.UnpackedSyncStatus = DocPrintMgmtUtilsUnpackedSyncStatus::Synced;
        
        // *********************************************************************************
        // PRINT DESTINATION
        // *********************************************************************************
                
        // -------------------------------------------
        // Destination description
        // -------------------------------------------
        _tmpTable.PrintDestinationDescription = DocSrsReportRunUtil::getPrintDestDescription(pds);

        // Set print destination fields from current print destination settings
        _tmpTable.DocPrintDestinationSettingsMap::setRecordFromPrintDestinationSettings(pds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packAndSavePrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack the print destination related fields of the given DocPrintMgmtUtilsTmp record
    /// and save the packed value into the PrintJobSettings field.
    /// </summary>
    /// <param name = "_tmpTable">DocPrintMgmtUtilsTmp record on which the print destination
    /// related fields should be packed.</param>
    public static void packAndSavePrintDestinationSettings(DocPrintMgmtUtilsTmp _tmpTable)
    {
        // Get print destination settings from current record
        SRSPrintDestinationSettings pds = _tmpTable.DocPrintDestinationSettingsMap::getPrintDestinationSettingsFromRecord();

        _tmpTable.PrintJobSettings = pds.pack();
        _tmpTable.UnpackedSyncStatus = DocPrintMgmtUtilsUnpackedSyncStatus::Synced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUtilsRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper for performing the validation of one DocPrintMgmtUtilsTmp record, provided by its RecId
    /// and the DocPrintMgmtUtilsTmp temporary table.
    /// </summary>
    /// <param name = "_utilsRecId">RecId of the DocPrintMgmtUtilsTmp record to be validated.</param>
    /// <param name = "_tmpTable">DocPrintMgmtUtilsTmp temporary table in which the give RecId should
    /// be validated</param>
    /// <returns>boolean: true if record is valid, false otherwise.</returns>
    public static boolean validateUtilsRecord(RecId _utilsRecId, DocPrintMgmtUtilsTmp _tmpTable)
    {
        DocPrintMgmtUtilsTmp currentRecord = DocPrintMgmtUtilsTmp::find(_utilsRecId, _tmpTable, true);
        boolean isValid = currentRecord.validate();

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>