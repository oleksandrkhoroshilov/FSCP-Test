<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocentricReportViewerControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Docentric report viewer form template control.
/// </summary>
// Previous viewer control implementation
//[FormControlAttribute("Doc_DRV_Viewer", "resources/html/Doc_DRV_Viewer", classstr(DocentricReportViewerBuild))]
// The new viewer control implementation
[FormControlAttribute("Doc_PDFViewer_Control", "resources/html/Doc_PDFViewer_Control", classstr(DocentricReportViewerBuild))]
public class DocentricReportViewerControl extends FormTemplateControl
{
    #define.CommandName_GetNextChunk("GetNextChunk")
    #define.PropertyName_FileName("FileName")
    #define.PropertyName_UserLanguage("UserLanguage")
    #define.PropertyName_UseBrowserViewer("UseBrowserViewer")
    #define.PropertyName_EnableExportToWord("EnableExportToWord")
    #define.PropertyName_EnableExportToExcel("EnableExportToExcel")
    #define.PropertyName_EnableNativePdfPrinting("EnableNativePdfPrinting")
    #define.CommandName_ExportToWord("ExportToWord")
    #define.CommandName_ExportToExcel("ExportToExcel")

    private FormProperty fileNameProperty, userLanguageProperty, useBrowserViewerProperty;
    private FormProperty enableExportToWordProperty, enableExportToExcelProperty, enableNativePdfPrintingProperty;

    private System.String sourcePdfDocumentBase64String;
    private int64 currentChunkStartIndex, lenghtOfsourcePdfDocumentBase64String;
    private boolean endOfStreaming;
    private const int ChunkSize = 10000000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocentricReportViewerControl.
    /// </summary>
    /// <param name = "_build">The form build control.</param>
    /// <param name = "_formRun">The form run.</param>
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build,_formRun);

        // Previous viewer control implementation
        //this.setTemplateId('Doc_DRV_Viewer');
        //this.setResourceBundleName('resources/html/Doc_DRV_Viewer');
        // The new viewer control implementation
        this.setTemplateId('Doc_PDFViewer_Control');
        this.setResourceBundleName('resources/html/Doc_PDFViewer_Control');


        fileNameProperty = this.addProperty(methodStr(DocentricReportViewerControl, parmFileName), Types::String);
        userLanguageProperty = this.addProperty(methodStr(DocentricReportViewerControl, parmUserLanguage), Types::String);
        useBrowserViewerProperty = this.addProperty(methodStr(DocentricReportViewerControl, parmUseBrowserViewer), Types::Enum);
        enableExportToWordProperty = this.addProperty(methodStr(DocentricReportViewerControl, parmEnableExportToWord), Types::Enum);
        enableExportToExcelProperty = this.addProperty(methodStr(DocentricReportViewerControl, parmEnableExportToExcel), Types::Enum);
        enableNativePdfPrintingProperty = this.addProperty(methodStr(DocentricReportViewerControl, parmEnableNativePdfPrinting), Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourcePdfDocumentBase64String</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the source PDF document to be displayed in the Docentric report viewer in base64 format.
    /// </summary>
    /// <param name = "_sourcePdfDocumentBase64String">The PDF file in base64 format.</param>
    public void setSourcePdfDocumentBase64String(System.String _sourcePdfDocumentBase64String)
    {
        sourcePdfDocumentBase64String = _sourcePdfDocumentBase64String;
        lenghtOfsourcePdfDocumentBase64String = sourcePdfDocumentBase64String.Length;
        currentChunkStartIndex = 0;
        endOfStreaming = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextChunk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the next PDF file chunk in base64 format command.
    /// </summary>
    /// <returns>The chunk in base 64format.</returns>
    [FormCommandAttribute(#CommandName_GetNextChunk)]
    public str getNextChunk()
    {
        if (endOfStreaming)
        {
            return '';
        }

        if (currentChunkStartIndex + ChunkSize > lenghtOfsourcePdfDocumentBase64String - 1)
        {
            // If the lenght of the document is less than the size of the single chunk, 
            // or we have reached the last chunk in streaming, set the flag that streaming is finished.
            endOfStreaming = true;
            
            // Return the whole document or the last chunk.
            if (currentChunkStartIndex == 0)
            {
                return sourcePdfDocumentBase64String;
            }
            else
            {
                str lastChunk = sourcePdfDocumentBase64String.Substring(currentChunkStartIndex);
                return lastChunk;
            }
        }
        else
        {
            // We are in the middle of streaming, so return the current chunk.
            str currentChunk = sourcePdfDocumentBase64String.Substring(currentChunkStartIndex, ChunkSize);
            currentChunkStartIndex = currentChunkStartIndex + ChunkSize;
            return currentChunk;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The filename passed to the client side Docentric Report Viewer.
    /// </summary>
    /// <param name = "_value">The filename.</param>
    /// <returns>The filename.</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, #PropertyName_FileName, true)]
    public str parmFileName(str _value = fileNameProperty.parmValue())
    {
        if (!prmisdefault(_value))
        {
            fileNameProperty.setValueOrBinding(_value);
        }
        return fileNameProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// The user language in which the Docentric Report Viewer will show the UI.
    /// </summary>
    /// <param name = "_value">The user language code (e.g., en-US).</param>
    /// <returns>The user language code.</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, #PropertyName_UserLanguage, true)]
    public str parmUserLanguage(str _value = userLanguageProperty.parmValue())
    {
        if (!prmisdefault(_value))
        {
            userLanguageProperty.setValueOrBinding(_value);
        }
        return userLanguageProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseBrowserViewer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable viewing report directly from browser supported PDF viewer.
    /// </summary>
    /// <param name = "_value">True to enable, false to disable.</param>
    /// <returns>True if enabled, otherwise false.</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, #PropertyName_UseBrowserViewer, true)]
    public boolean parmUseBrowserViewer(boolean _value = useBrowserViewerProperty.parmValue())
    {
        if (!prmisdefault(_value))
        {
            useBrowserViewerProperty.setValueOrBinding(_value);
        }
        return useBrowserViewerProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableExportToWord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables export to Microsoft Word button on the Docentric report viewer.
    /// </summary>
    /// <param name = "_value">True to enable, false to disable.</param>
    /// <returns>True if enabled, otherwise false.</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, #PropertyName_EnableExportToWord, true)]
    public boolean parmEnableExportToWord(boolean _value = enableExportToWordProperty.parmValue())
    {
        if (!prmisdefault(_value))
        {
            enableExportToWordProperty.setValueOrBinding(_value);
        }
        return enableExportToWordProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableExportToExcel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables export to Microsoft Excel button on the Docentric report viewer.
    /// </summary>
    /// <param name = "_value">True to enable, false to disable.</param>
    /// <returns>True if enabled, otherwise false.</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, #PropertyName_EnableExportToExcel, true)]
    public boolean parmEnableExportToExcel(boolean _value = enableExportToExcelProperty.parmValue())
    {
        if (!prmisdefault(_value))
        {
            enableExportToExcelProperty.setValueOrBinding(_value);
        }
        return enableExportToExcelProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableNativePdfPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables native PDF printing in browser if supported.
    /// </summary>
    /// <param name = "_value">True to enable, false to disable.</param>
    /// <returns>True if enable, otherwise False.</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, #PropertyName_EnableNativePdfPrinting, true)]
    public boolean parmEnableNativePdfPrinting(boolean _value = enableNativePdfPrintingProperty.parmValue())
    {
        if (!prmisdefault(_value))
        {
            enableNativePdfPrintingProperty.setValueOrBinding(_value);
        }
        return enableNativePdfPrintingProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToWord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes export (download) to Microsoft Word command.
    /// </summary>
    [FormCommandAttribute(#CommandName_ExportToWord)]
    public void exportToWord()
    {
        // Export to Word
        Object formRun = this.formRun() as Object;
        formRun.exportToWord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToExcel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes export (download) to Microsoft Excel command.
    /// </summary>
    [FormCommandAttribute(#CommandName_ExportToExcel)]
    public void exportToExcel()
    {
        // Export to Excel
        Object formRun = this.formRun() as Object;
        formRun.exportToExcel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the properties from the control build class.
    /// </summary>
    public void applyBuild()
    {
        super();
 
        DocentricReportViewerBuild build = this.build();
        if (build)
        {
            this.parmFileName(build.parmFileName());
            this.parmUserLanguage(build.parmUserLanguage());
            this.parmUseBrowserViewer(build.parmUseBrowserViewer());
            this.parmEnableExportToWord(build.parmEnableExportToWord());
            this.parmEnableExportToExcel(build.parmEnableExportToExcel());
            this.parmEnableNativePdfPrinting(build.parmEnableNativePdfPrinting());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>