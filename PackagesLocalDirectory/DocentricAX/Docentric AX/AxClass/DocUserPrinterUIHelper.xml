<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocUserPrinterUIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocUserPrinterUIHelper
{
    Args args;
    FormDataSource userInfoDs, userPrinterDs, networkPrinterDs;
    FormRun callerForm;
    Set selectedNamesSet;
    str params;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsersOrPrintersSet</Name>
				<Source><![CDATA[
    public Set parmUsersOrPrintersSet(Set _selectedNamesSet = selectedNamesSet)
    {
        selectedNamesSet = _selectedNamesSet;
        return selectedNamesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCaller</Name>
				<Source><![CDATA[
    private void checkCaller()
    {
        // We expect to be called from the User printer form.
        // Obtain the UserInfo datasource from there.
        if (!(args.caller() && (args.caller() is FormRun)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: caller must be form');
        }

        callerForm = args.caller();
        for (int i = 1; i <= callerForm.dataSourceCount(); i++)
        {
            if (callerForm.dataSource(i).cursor() is UserInfo)
            {
                userInfoDs = callerForm.dataSource(i);
            }
            else if (callerForm.dataSource(i).cursor() is DocUserPrinter)
            {
                userPrinterDs = callerForm.dataSource(i);
            }
            else if (callerForm.dataSource(i).cursor() is SysCorpnetPrinters)
            {
                networkPrinterDs = callerForm.dataSource(i);
            }
        }

        if (!userInfoDs && !userPrinterDs && !networkPrinterDs)
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid caller form datasources');
        }

        params = args.parm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfoForViewByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Common method called to show results of bulk operations on User printers form by user.
    /// </summary>
    /// <param name = "_operationAdd">boolean, true for adding and false for removing printers</param>
    /// <param name = "_userId">UserId for which the operation is performed</param>
    /// <param name = "_usersProcessed">integer value of total number of processed users</param>
    /// <param name = "_successUsers">integer value of successfully processed users</param>
    /// <param name = "_errorUsers">integer value of users processed with errors</param>
    /// <param name = "_totalPrinters">integer value of total printers processed</param>
    private void showInfoForViewByUser(boolean _operationAdd, UserId _userId, int _usersProcessed, int _successUsers, int _errorUsers, int _totalPrinters)
    {
        if (_errorUsers == 0)
        {
            // No error occurred
            if (_usersProcessed == 1)
            {
                // Signle-select: show details about the number of added/removed reports for the selected user.
                if (_totalPrinters > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt(
                        (_operationAdd ? "@DocentricAX4:SuccessAddingPrintersForUser" : "@DocentricAX4:SuccessRemovingPrintersForUser"),
                        _totalPrinters, _userId));
                }
                else
                {
                    DocGlobalHelper::handleInfo(strFmt(
                        (_operationAdd ? "@DocentricAX4:NoUserPrinterForUserAdded" : "@DocentricAX4:NoUserPrinterForUserRemoved"),
                        _userId));
                }
            }
            else
            {
                // Multi-select: show how many total printers for how many selected users were added/removed.
                if (_totalPrinters > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt(
                        (_operationAdd ? "@DocentricAX4:SuccessAddingPrintersMultiSelect" : "@DocentricAX4:SuccessRemovingPrintersMultiSelect"),
                        _totalPrinters, _usersProcessed));
                }
                else
                {
                    DocGlobalHelper::handleInfo(_operationAdd ? "@DocentricAX4:NoPrinterAdded" : "@DocentricAX4:NoPrinterRemoved");
                }
            }
        }
        else if (_successUsers == 0)
        {
            // Only errors, no success.
            // We already informed for each user about error, so only print a summary info.
            DocGlobalHelper::handleWarning(_operationAdd ? "@DocentricAX4:NoSuccessAddingPrinters": "@DocentricAX4:NoSuccessRemovingPrinters");
        }
        else
        {
            // Some errors, some success.
            // We already informed for each user about error, so only print a summary info.
            DocGlobalHelper::handleInfo(strFmt(
                (_operationAdd ? "@DocentricAX4:PartialSuccessAddingPrinters" : "@DocentricAX4:PartialSuccessRemovingPrinters"),
                _errorUsers, _successUsers));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfoForViewByPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Common method called to show results of bulk operations on User printers form by printer.
    /// </summary>
    /// <param name = "_operationAdd">boolean, true for adding and false for removing users</param>
    /// <param name = "_printerName">PrinterName for which the operation is performed</param>
    /// <param name = "_printersProcessed">integer value of total number of processed printers</param>
    /// <param name = "_successPrinters">integer value of successfully processed printers</param>
    /// <param name = "_errorPrinters">integer value of printers processed with errors</param>
    /// <param name = "_totalUsers">integer value of total users processed (added/removed)</param>
    private void showInfoForViewByPrinter(boolean _operationAdd, PrinterName _printerName, int _printersProcessed, int _successPrinters, int _errorPrinters, int _totalUsers)
    {
        if (_errorPrinters == 0)
        {
            // No error occurred
            if (_printersProcessed == 1)
            {
                // Signle-select: show details about the number of added/removed users for the selected printer.
                if (_totalUsers > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt(
                        (_operationAdd ? "@DocentricAX4:SuccessAddingUsersForPrinter" : "@DocentricAX4:SuccessRemovingUsersForPrinter"),
                        _totalUsers, _printerName));
                }
                else
                {
                    DocGlobalHelper::handleInfo(strFmt(
                        (_operationAdd ? "@DocentricAX4:NoUserForPrinterAdded" : "@DocentricAX4:NoUserRemovedForPrinter"),
                        _printerName));
                }
            }
            else
            {
                // Multi-select: show how many total users for how many selected printers were added/removed.
                if (_totalUsers > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt(
                        (_operationAdd ? "@DocentricAX4:SuccessAddingUsersMultiSelect" : "@DocentricAX4:SuccessRemovingUsersMultiSelect"),
                        _totalUsers, _printersProcessed));
                }
                else
                {
                    DocGlobalHelper::handleInfo(_operationAdd ? "@DocentricAX4:NoUserAdded" : "@DocentricAX4:NoUserRemoved");
                }
            }
        }
        else if (_successPrinters == 0)
        {
            // Only errors, no success.
            // We already informed for each printer about error, so only print a summary info.
            DocGlobalHelper::handleWarning(_operationAdd ? "@DocentricAX4:NoSuccessAddingUsers" : "@DocentricAX4:NoSuccessRemovingUsers");
        }
        else
        {
            // Some errors, some success.
            // We already informed for each printer about error, so only print a summary info.
            DocGlobalHelper::handleInfo(strFmt(
                (_operationAdd ? "@DocentricAX4:PartialSuccessAddingUsers" : "@DocentricAX4:PartialSuccessRemovingUsers"),
                _errorPrinters, _successPrinters));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintersForUsers</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the users multi-selected in the caller form add all or selected printers.
    /// </summary>
    /// <param name = "_printers">Set of PrinterName values specifying the printers to be added
    /// to User printers table. If null, all the missing printers will be added.</param>
    private void addPrintersForUsers(Set _printers = null)
    {
        this.checkCaller();        
        
        if (!(args.record() && (args.record() is UserInfo)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Confirm the action only when asked to add ALL printers.
        // When adding selected printers, we already have a form for selecting them,
        // so user is aware of his action.
        if (_printers == null)
        {
            if (!Box::confirm("@DocentricAX4:ConfirmAddAllPrinters"))
            {
                return;
            }
        }
       
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(userInfoDs);

        int usersProcessed = 0, successUsers = 0, errorUsers = 0;
        int newPrintersForUser, totalPrinters = 0;
        RecId firstRecId;
        boolean success;
        UserId lastProcessedUserId;
        UserInfo userInfo = helper.getFirst();

        // Caller datasource contains users. Iterate through them 
        // and add the printers from the input set or all printers if set is null.
        while (userInfo.RecId != 0)
        {
            lastProcessedUserId = userInfo.id;

            if (_printers == null)
            {
                // Add all missing printers
                [newPrintersForUser, firstRecId, success] = DocUserPrinter::addForMissingPrinters(userInfo.id);
            }
            else
            {
                // Add the printers from the provided set
                [newPrintersForUser, firstRecId, success] = DocUserPrinter::addForPrinters(userInfo.id, _printers);
            }
            
            usersProcessed++;
            if (success)
            {
                successUsers++;
            }
            else
            {
                errorUsers++;
            }
            totalPrinters += newPrintersForUser;

            userInfo = helper.getNext();
        }

        // Show info
        this.showInfoForViewByUser(true, lastProcessedUserId, usersProcessed, successUsers, errorUsers, totalPrinters);

        // If adding for only 1 printer, then stay positioned on it
        boolean positionToCallerRecord = false;
        if (userInfoDs.recordsMarked().lastIndex() <= 1)
        {
            select firstonly userInfo where userInfo.id == lastProcessedUserId;
            if (userInfo)
            {
                positionToCallerRecord = true;
            }
        }

        if (params == 'DetailView')
        {
            // Refresh the user printer datasource, so that we see the newly added printers
            userPrinterDs.research();
        }

        // Refresh the users datasource, so that the display method with number of printers is updated.
        userInfoDs.research(true);        
        
        if (positionToCallerRecord)
        {
            userInfoDs.positionToRecord(userInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePrintersForUsers</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the users multi-selected in the caller form remove all or selected printers.
    /// </summary>
    /// <param name = "_printers">Set of PrinterName values specifying the printers to be removed
    /// from the User printers table. If null, all the linked printers will be removed.</param>
    private void removePrintersForUsers(Set _printers = null)
    {
        this.checkCaller();
        
        if (!(args.record() && (args.record() is UserInfo)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Confirm the action only when asked to remove ALL printers.
        // When removing selected printers, we already have a form for selecting them,
        // so user is aware of his action.
        if (_printers == null)
        {
            if (!Box::confirm("@DocentricAX4:ConfirmRemoveAllPrinters"))
            {
                return;
            }
        }
       
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(userInfoDs);

        int usersProcessed = 0, successUsers = 0, errorUsers = 0;
        int deletedPrintersForUser, totalPrinters = 0;
        boolean success;
        UserId lastProcessedUserId;
        UserInfo userInfo = helper.getFirst();

        // Caller datasource contains users. Iterate through them
        // and remove the printers from the input set or all printers if set is null.
        while (userInfo.RecId != 0)
        {
            lastProcessedUserId = userInfo.id;

            if (_printers == null)
            {
                // Remove all missing printers
                [deletedPrintersForUser, success] = DocUserPrinter::removeAllPrinters(userInfo.id);
            }
            else
            {
                // Add the printers from the provided set
                [deletedPrintersForUser, success] = DocUserPrinter::removeForPrinters(userInfo.id, _printers);
            }
            
            usersProcessed++;
            if (success)
            {
                successUsers++;
            }
            else
            {
                errorUsers++;
            }
            totalPrinters += deletedPrintersForUser;

            userInfo = helper.getNext();
        }

        // Show info
        this.showInfoForViewByUser(false, lastProcessedUserId, usersProcessed, successUsers, errorUsers, totalPrinters);

        // If adding for only 1 printer, then stay positioned on it
        boolean positionToCallerRecord = false;
        if (userInfoDs.recordsMarked().lastIndex() <= 1)
        {
            select firstonly userInfo where userInfo.id == lastProcessedUserId;
            if (userInfo)
            {
                positionToCallerRecord = true;
            }
        }

        if (params == 'DetailView')
        {
            // Refresh the user printer datasource, so that we see the new situation after removing the user printers
            userPrinterDs.research();
        }

        // Refresh the users datasource, so that the display method with number of printers is updated.
        userInfoDs.research(true);
        
        if (positionToCallerRecord)
        {
            userInfoDs.positionToRecord(userInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUsersForPrinters</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the printers multi-selected in the caller form add all or selected users, 
    /// or users with selected user roles.
    /// </summary>
    /// <param name = "_usersOrRoles">Set of UserId or SecurityRoleName values specifying the users
    /// to be added to User printers table, or the user roles for which the users should be
    /// added to User printers table. If null, all the missing users will be added.</param>
    /// <param name = "_isUserRole">Specifies whether the set contains user roles</param>
    private void addUsersForPrinters(Set _usersOrRoles = null, boolean _isUserRole = false)
    {
        this.checkCaller();
        
        if (!(args.record() && (args.record() is SysCorpNetPrinters)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Confirm the action only when asked to add ALL users.
        // When adding selected users or roles, we already have a form for selecting them,
        // so user is aware of his action.
        if (_usersOrRoles == null)
        {
            if (!Box::confirm("@DocentricAX4:ConfirmAddAllUsers"))
            {
                return;
            }
        }
       
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(networkPrinterDs);

        int printersProcessed = 0, successPrinters = 0, errorPrinters = 0;
        int newUsersForPrinter, totalUsers = 0;
        boolean success;
        PrinterName lastProcessedPrinterName;
        SysCorpNetPrinters networkPrinter = helper.getFirst();

        // Caller datasource contains users. Iterate through them
        // and add the users from the input set or all users if set is null.
        while (networkPrinter.RecId != 0)
        {
            lastProcessedPrinterName = networkPrinter.PrinterName;

            if (_usersOrRoles == null)
            {
                // Add all missing users
                [newUsersForPrinter, success] = DocUserPrinter::addForMissingUsers(networkPrinter.PrinterName);
            }
            else
            {
                // Add the users from the provided set of users/user roles
                [newUsersForPrinter, success] = DocUserPrinter::addForUsers(networkPrinter.PrinterName, _usersOrRoles, _isUserRole);
            }
            
            printersProcessed++;
            if (success)
            {
                successPrinters++;
            }
            else
            {
                errorPrinters++;
            }
            totalUsers += newUsersForPrinter;

            networkPrinter = helper.getNext();
        }

        // Show info
        this.showInfoForViewByPrinter(true, lastProcessedPrinterName, printersProcessed, successPrinters, errorPrinters, totalUsers);        

        // If adding for only 1 printer, then stay positioned on it
        boolean positionToCallerRecord = false;
        if (networkPrinterDs.recordsMarked().lastIndex() <= 1)
        {
            select firstonly networkPrinter where networkPrinter.PrinterName == lastProcessedPrinterName;
            if (networkPrinter)
            {
                positionToCallerRecord = true;
            }
        }

        // Refresh caller datasources and stay positioned on a caller record if applicable (if only 1 record
        // was selected in the caller datasource)
        if (params == 'DetailView')
        {
            // Refresh the user printer datasource, so that we see the newly added users
            userPrinterDs.research();
        }

        // Refresh the printers datasource, so that the display method with number of users is updated.
        networkPrinterDs.research(true);
        
        if (positionToCallerRecord)
        {
            networkPrinterDs.positionToRecord(networkPrinter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUsersForPrinters</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the printers multi-selected in the caller form remove all or selected users.
    /// </summary>
    /// <param name = "_usersOrRoles">Set of UserId values specifying the users to be removed
    /// from the User printers table. If null, all the linked users will be removed.</param>
    /// <param name = "_isUserRole">Specifies whether the set contains user roles</param>
    private void removeUsersForPrinters(Set _usersOrRoles = null, boolean _isUserRole = false)
    {
        this.checkCaller();
        
        if (!(args.record() && (args.record() is SysCorpNetPrinters)))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid mehtod call: wrong caller record type');
        }
        
        // Confirm the action only when asked to remove ALL users.
        // When removing selected users, we already have a form for selecting them,
        // so user is aware of his action.
        if (_usersOrRoles == null)
        {
            if (!Box::confirm("@DocentricAX4:ConfirmRemoveAllUsers"))
            {
                return;
            }
        }
       
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(networkPrinterDs);

        int printersProcessed = 0, successPrinters = 0, errorPrinters = 0;
        int deletedUsersForPrinter, totalUsers = 0;
        boolean success;
        PrinterName lastProcessedPrinterName;
        SysCorpNetPrinters networkPrinter = helper.getFirst();

        // Caller datasource contains users. Iterate through them
        // and remove the printers from the input set or all printers if set is null.
        while (networkPrinter.RecId != 0)
        {
            lastProcessedPrinterName = networkPrinter.PrinterName;

            if (_usersOrRoles == null)
            {
                // Remove all missing users
                [deletedUsersForPrinter, success] = DocUserPrinter::removeAllUsers(networkPrinter.PrinterName);
            }
            else
            {
                // Remove the users from the provided set
                [deletedUsersForPrinter, success] = DocUserPrinter::removeForUsers(networkPrinter.PrinterName, _usersOrRoles, _isUserRole);
            }
            
            printersProcessed++;
            if (success)
            {
                successPrinters++;
            }
            else
            {
                errorPrinters++;
            }
            totalUsers += deletedUsersForPrinter;

            networkPrinter = helper.getNext();
        }

        // Show info
        this.showInfoForViewByPrinter(false, lastProcessedPrinterName, printersProcessed, successPrinters, errorPrinters, totalUsers);

        // If removing from only 1 printer, then stay positioned on it
        boolean positionToCallerRecord = false;
        if (networkPrinterDs.recordsMarked().lastIndex() <= 1)
        {
            select firstonly networkPrinter where networkPrinter.PrinterName == lastProcessedPrinterName;
            if (networkPrinter)
            {
                positionToCallerRecord = true;
            }
        }

        // Refresh caller datasources and stay positioned on a caller record if applicable (if only 1 record
        // was selected in the caller datasource)
        if (params == 'DetailView')
        {
            // Refresh the user printer datasource, so that we see the newly added users
            userPrinterDs.research();
        }

        // Refresh the printers datasource, so that the display method with number of users is updated.
        networkPrinterDs.research(true);
        
        if (positionToCallerRecord)
        {
            networkPrinterDs.positionToRecord(networkPrinter);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUIActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// We are using the helper methods in this class from different forms, 
    /// so we base the logic on the menu item used.
    /// </summary>
    public void handleUIActions()
    {
        switch (args.menuItemName())
        {
            case menuItemActionStr(DocUserPrinterAddAllPrinters):
                // "Add all printers" menu item on:
                //      - User printers form by user, grid view (multi-selected users),
                //      - User printers form by user, detail view, printers grid
                this.addPrintersForUsers(null);
                break;
            
            case menuItemDisplayStr(DocUserPrinterAddSelectedPrinters):
                // "Add selected printers" menu item on:
                //      - User printers form by user, grid view (multi-selected users),
                //      - User printers form by user, detail view, printers grid
                this.addPrintersForUsers(selectedNamesSet);
                break;
            
            case menuItemActionStr(DocUserPrinterRemoveAllPrinters):
                // "Remove all printers" menu item on:
                //      - User printers form by user, grid view (multi-selected users),
                //      - User printers form by user, detail view, printers grid
                this.removePrintersForUsers(null);
                break;
            
            case menuItemDisplayStr(DocUserPrinterRemoveSelectedPrinters):
                // "Remove selected printers" menu item on:
                //      - User printers form by user, grid view (multi-selected users),
                //      - User printers form by user, detail view, printers grid
                this.removePrintersForUsers(selectedNamesSet);
                break;

            case menuItemActionStr(DocUserPrinterAddAllUsers):
                // "Add all users" menu item on:
                //      - User printers form by printer, grid view (multi-selected printers),
                //      - User printers form by printer, detail view, users grid
                this.addUsersForPrinters(null);
                break;
            
            case menuItemDisplayStr(DocUserPrinterAddSelectedUsers):
                // "Add selected users" menu item on:
                //      - User printers form by printer, grid view (multi-selected printers),
                //      - User printers form by printer, detail view, users grid
                this.addUsersForPrinters(selectedNamesSet);
                break;
            
            case menuItemDisplayStr(DocUserPrinterAddSelectedRoles):
                // "Add selected roles" menu item on:
                //      - User printers form by printer, grid view (multi-selected printers),
                //      - User printers form by printer, detail view, users grid
                this.addUsersForPrinters(selectedNamesSet, true);
                break;
            
            case menuItemActionStr(DocUserPrinterRemoveAllUsers):
                // "Remove all users" menu item on:
                //      - User printers form by printer, grid view (multi-selected printers)
                this.removeUsersForPrinters(null);
                break;
            
            case menuItemDisplayStr(DocUserPrinterRemoveSelectedUsers):
                // "Remove selected users" menu item on:
                //      - User printers form by printer, grid view (multi-selected printers)
                this.removeUsersForPrinters(selectedNamesSet);
                break;
            
            case menuItemDisplayStr(DocUserPrinterRemoveSelectedRoles):
                // "Remove selected roles" menu item on:
                //      - User printers form by printer, grid view (multi-selected printers)
                //      - User printers form by printer, detail view, users grid
                this.removeUsersForPrinters(selectedNamesSet, true);
                break;
            
            default:
                return;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        DocUserPrinterUIHelper uiHelper = new DocUserPrinterUIHelper();
        uiHelper.parmArgs(_args);
        uiHelper.handleUIActions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>