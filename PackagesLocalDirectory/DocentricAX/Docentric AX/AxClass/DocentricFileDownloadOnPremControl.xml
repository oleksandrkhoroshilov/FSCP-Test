<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocentricFileDownloadOnPremControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FormControlAttribute("DocentricFileDownloadHTM", "resources/html/DocentricFileDownloadHTM", classstr(DocentricFileDownloadOnPremBuild))]
class DocentricFileDownloadOnPremControl extends FormTemplateControl
{
    #define.CommandName_GetNextChunk("GetNextChunk")
    #define.PropertyName_FileName("FileName")
    #define.CommandName_OnDownloadComplete("OnDownloadComplete")

    FormProperty fileNameProperty;

    System.String fileContentBase64String;
    int64 currentChunkStartIndex, lenghtOfFileContentBase64String;
    boolean endOfStreaming;
    const int CHUNKSIZE = 10000000;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build,_formRun);

        this.setTemplateId('DocentricFileDownloadHTM');
        this.setResourceBundleName('resources/html/DocentricFileDownloadHTM');

        fileNameProperty = this.addProperty(methodStr(DocentricFileDownloadOnPremControl, parmFileName), Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileContentBase64String</Name>
				<Source><![CDATA[
    public void setFileContentBase64String(System.String _fileContentBase64String)
    {
        fileContentBase64String = _fileContentBase64String;
        lenghtOfFileContentBase64String = fileContentBase64String.Length;
        currentChunkStartIndex = 0;
        endOfStreaming = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextChunk</Name>
				<Source><![CDATA[
    [FormCommandAttribute(#CommandName_GetNextChunk)]
    public str getNextChunk()
    {
        if (endOfStreaming)
        {
            return '';
        }

        if (currentChunkStartIndex + CHUNKSIZE > lenghtOfFileContentBase64String - 1)
        {
            // If the lenght of the document is less than the size of the single chunk,
            // or we have reached the last chunk in streaming, set the flag that streaming is finished.
            endOfStreaming = true;
            
            // Return the whole document or the last chunk.
            if (currentChunkStartIndex == 0)
            {
                return fileContentBase64String;
            }
            else
            {
                str lastChunk = fileContentBase64String.Substring(currentChunkStartIndex);
                return lastChunk;
            }
        }
        else
        {
            // We are in the middle of streaming, so return the current chunk.
            str currentChunk = fileContentBase64String.Substring(currentChunkStartIndex, CHUNKSIZE);
            currentChunkStartIndex = currentChunkStartIndex + CHUNKSIZE;
            return currentChunk;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, #PropertyName_FileName, true)]
    public str parmFileName(str _value = fileNameProperty.parmValue())
    {
        if(!prmisdefault(_value))
        {
            fileNameProperty.setValueOrBinding(_value);
        }
        return fileNameProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDownloadComplete</Name>
				<Source><![CDATA[
    [FormCommandAttribute(#CommandName_OnDownloadComplete)]
    public void onDownloadComplete()
    {
        Object formRun = this.formRun() as Object;
        formRun.onDownloadComplete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    public void applyBuild()
    {
        super();
 
        DocentricFileDownloadOnPremBuild build = this.build();
        if (build)
        {
            this.parmFileName(build.parmFileName());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>