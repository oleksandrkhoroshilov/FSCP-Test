<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportAttachmentHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using Docentric.AX.Framework;
/// <summary>
/// The DocReportAttachmentHelper class is used as a helper class for download attachments.
/// </summary>
public class DocReportAttachmentHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFileToZip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add file to the list which will be zipped later.
    /// </summary>
    /// <param name = "_docList">List of files to Zip</param>
    /// <param name = "_namesMap">Maps with unique file names</param>
    /// <param name = "_attachmentContent">Attachment content</param>
    /// <param name = "_fileAttachmentName">Attachment file name</param>
    /// <param name = "_filenameType">Attachment file type</param>
    public static void addFileToZip(List _docList, Map _namesMap, System.IO.MemoryStream _attachmentContent, str _fileAttachmentName, FilenameType _filenameType)
    {
        int filenameCounter;
        str filenameWithSuffix;
        // Handle the files with same names - give them suffixes as (1), (2), etc,
        // similar as the browser would do when downloading the files with same names.
        if (_namesMap.exists(_fileAttachmentName))
        {
            filenameCounter = _namesMap.lookup(_fileAttachmentName);
            filenameCounter++;
                
            filenameWithSuffix = strFmt('%1 (%2).%3', DocFileMngHelper::getFileNameWithoutExtension(_fileAttachmentName), filenameCounter, _filenameType);
        }
        else
        {
            filenameCounter = 0;
            filenameWithSuffix = _fileAttachmentName;
        }

        _namesMap.insert(_fileAttachmentName, filenameCounter);  
        // Add content and filename to the list which we will use for zipping
        _docList.addEnd([filenameWithSuffix, _attachmentContent]);

    }

]]></Source>
			</Method>
			<Method>
				<Name>addPdfFileToMerge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add file to the list which will be merged later. Only PDF file will be added.
    /// </summary>
    /// <param name = "_docListMerge">List of files to merge</param>
    /// <param name = "_attachmentContent">Attachment content</param>
    /// <param name = "_filenameType">Attachment file type</param>
    public static void addPdfFileToMerge(List _docListMerge, System.IO.MemoryStream _attachmentContent, FilenameType _filenameType)
    {
        System.Byte[] pdfAsBytes = _attachmentContent.ToArray();
        // Add the attachment content to the list for merging.
        _docListMerge.addEnd(pdfAsBytes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the source document file format is PDF.
    /// </summary>
    /// <param name = "_attachmentContent">Attachment content</param>
    /// <param name = "_fileAttachmentName">Attachment file name</param>
    /// <param name = "_filenameType">Attachment file type</param>
    /// <returns>True/False</returns>
    public static boolean isPdfOutputFileFormat(System.IO.MemoryStream _attachmentContent, str _fileAttachmentName, FilenameType _filenameType)
    {
        boolean ret = false;

        if (_filenameType != DocConstantFile::FileExtPdf)
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotPDF", _fileAttachmentName));
            return ret;
        }

        _attachmentContent.Position = 0;
        DocFileType docFileType = DocFileDetection::GetKnownFileType(_attachmentContent);
        
        if (docFileType == DocFileType::Pdf)
        {
            ret = true;
        }
        else
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:CorruptedAndUnreadablePDF", _fileAttachmentName));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the selected attachments.
    /// </summary>
    /// <param name = "_attachmentContentMemoryStream">Attachment content</param>
    /// <param name = "_fileAttachmentName">Attachment file name</param>
    public static void downloadFile(System.IO.MemoryStream _attachmentContentMemoryStream, str _fileAttachmentName)
    {
        DocFileMngHelper::sendFileToUser(_attachmentContentMemoryStream, _fileAttachmentName, '', '', '', '', true, true);
        _attachmentContentMemoryStream.Dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInfoMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints info messages.
    /// </summary>
    /// <param name = "_numOfSuccessfullyDownloadedOrMergedAttachment">Number of successfully downloaded attachment files or merged PDF documents</param>
    /// <param name = "_numOfFailedAttachment">Number of attachment files failed to be retrieved</param>
    /// <param name = "_numOfSkippedAttachment">Number of skipped attachment notes, urls and non-PDF documents</param>
    /// <param name = "_numOfSelectedAttachment">Number of selected attachment files</param>
    /// <param name = "_downloadAttachmentType">Download type</param>
    public static void printInfoMsg(
        int _numOfSuccessfullyDownloadedOrMergedAttachment,
        int _numOfFailedAttachment,
        int _numOfSkippedAttachment,
        int _numOfSelectedAttachment,
        DocDownloadAttachmentType _downloadAttachmentType)
    {
        str message;

        if (_numOfSuccessfullyDownloadedOrMergedAttachment == 1 && _numOfSelectedAttachment <= 1)
        {
            return;
        }

        else if (_numOfSuccessfullyDownloadedOrMergedAttachment == 0)
        {
            message = _downloadAttachmentType == DocDownloadAttachmentType::MergedPDF ?
                                                        "@DocentricAX3:NoAttachmentPDFIsDownloaded" :
                                                        "@DocentricAX3:NoAttachmentFileIsDownloaded";

        }

        // Number of successfully downloaded attachment files or merged PDF documents are greater than 1.
        else
        {
            message = _downloadAttachmentType == DocDownloadAttachmentType::MergedPDF ?
                                                        strFmt("@DocentricAX3:SuccessfullyMergedAndDownloaded", _numOfSuccessfullyDownloadedOrMergedAttachment, _numOfSelectedAttachment, _numOfFailedAttachment, _numOfSkippedAttachment) :
                                                        strFmt("@DocentricAX3:SuccessfullyMerged", _numOfSuccessfullyDownloadedOrMergedAttachment, _numOfSelectedAttachment, _numOfFailedAttachment, _numOfSkippedAttachment);
        }
        
        if (_numOfFailedAttachment > 0 || _numOfSkippedAttachment > 0)
        {
            DocGlobalHelper::handleWarning(message);
        }
        else
        {
            DocGlobalHelper::handleInfo(message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadZip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the Zip file.
    /// </summary>
    /// <param name = "_docList">List of files to Zip</param>
    public static void downloadZip(List _docList)
    {
        if (_docList == null || _docList.empty())
        {
            return;
        }

        try
        {
            // Create the zip file from the documents saved in the list
            using (Stream zipStream = DocDocumentHelper::documents2Zip(_docList))
            {
                DocFileMngHelper::sendFileToUser(zipStream, 'DownloadedAttachments.zip');
            }
        }

        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX3:ErrorDownloadingZip");
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX3:ErrorDownloadingZip");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadMergedPDF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the merged PDF file.
    /// </summary>
    /// <param name = "_docListMerge">List of PDF files to merge</param>
    public static void downloadMergedPDF(List _docListMerge)
    {
        if (_docListMerge == null || _docListMerge.empty())
        {
            return;
        }

        try
        {
            // Create the merged PDF file from the document contents saved in the list
            using (MemoryStream mergedPDFStream = DocDocumentHelper::mergePdfDocuments(_docListMerge))
            {
                if (mergedPDFStream == null)
                {
                    throw Exception::Error;   
                }
                DocFileMngHelper::sendFileToUser(mergedPDFStream, 'MergedAttachments.pdf');
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX3:ErrorDownloadingMergedPDF");
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX3:ErrorDownloadingMergedPDF");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>download</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads attachments from the DocuRef formdatasource.
    /// </summary>
    /// <param name = "_ds">Form name datasource</param>
    /// <param name = "_downloadAttachmentType">Download type</param>
    public static void download(FormDataSource _ds, DocDownloadAttachmentType _downloadAttachmentType)
    {
        // We expect the datasource to be DocuRef
        if (_ds.table() != tableNum(DocuRef))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid datasource for this call');
        }
        
        // Get the flag indicating whether the current user is Attachment admin
        boolean isAttachmentAdmin = DocDocuRefHelper::isAttachmentAdmin();

        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(_ds);
        DocuRef attachmentDocuRef = helper.getFirst();

        FilenameType filenameType;
        int numOfFailedAttachment = 0;
        int numOfSuccessfullyDownloadedOrMergedAttachment = 0;
        // Skipped attachments are notes, url and non-PDF documents.
        int numOfSkippedAttachment = 0;
        int numOfSelectedAttachment = _ds.recordsMarked().lastIndex();
       
        // Use for Zipping files
        List docList = new List(Types::Container);
        Map namesMap = new Map(Types::String, Types::Integer);

        // Use for merging PDFs
        List docListMerged = new List(Types::AnyType);

        while (attachmentDocuRef.RecId != 0)
        {
            try
            {
                if (!DocReportAttachmentHelper::isFileDocumentType(attachmentDocuRef.docuType().ActionClassId))
                {
                    numOfSkippedAttachment++;
                    continue;
                }
                // Check if the current user can view the attachment
                if (!isAttachmentAdmin && !conPeek(DocDocuRefHelper::allowViewOrEditDocuRef(attachmentDocuRef), 1))
                {
                    numOfSkippedAttachment++;
                    continue;
                }

                // Get the attachment content
                System.IO.MemoryStream attachmentContentMemoryStream = DocDocuRefHelper::getAttachmentContentAsMemoryStream(attachmentDocuRef);
                filenameType = attachmentDocuRef.fileType();
                
                if (!attachmentContentMemoryStream)
                {
                    numOfFailedAttachment++;
                    continue;
                }

                switch (_downloadAttachmentType)
                {
                    case DocDownloadAttachmentType::SeparateFiles :
                        DocReportAttachmentHelper::downloadFile(attachmentContentMemoryStream, attachmentDocuRef.filename());
                        numOfSuccessfullyDownloadedOrMergedAttachment++;
                        break;

                    case DocDownloadAttachmentType::ZipFile :
                        DocReportAttachmentHelper::addFileToZip(docList, namesMap, attachmentContentMemoryStream, attachmentDocuRef.filename(), filenameType);
                        numOfSuccessfullyDownloadedOrMergedAttachment++;
                        break;

                    case DocDownloadAttachmentType::MergedPDF :
                        if (DocReportAttachmentHelper::isPdfOutputFileFormat(attachmentContentMemoryStream, attachmentDocuRef.filename(), filenameType))
                        {
                            DocReportAttachmentHelper::addPdfFileToMerge(docListMerged, attachmentContentMemoryStream, filenameType);
                            numOfSuccessfullyDownloadedOrMergedAttachment++;
                        }
                        else
                        {
                            numOfSkippedAttachment++;
                        }
                        break;
                }
            }
            catch
            {
                numOfFailedAttachment++;
            }

            finally
            {
                attachmentDocuRef = helper.getNext();
            } 
        }

        if (_downloadAttachmentType == DocDownloadAttachmentType::ZipFile && !docList.empty())
        {
            DocReportAttachmentHelper::downloadZip(docList);
        }

        else if (_downloadAttachmentType == DocDownloadAttachmentType::MergedPDF && !docListMerged.empty())
        {
            DocReportAttachmentHelper::downloadMergedPDF(docListMerged);
        }

        // Print messages if needed
        DocReportAttachmentHelper::printInfoMsg(numOfSuccessfullyDownloadedOrMergedAttachment, numOfFailedAttachment, numOfSkippedAttachment, numOfSelectedAttachment, _downloadAttachmentType);   
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionClassesByAttachmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of valid action classes for an input DocAttachmentType.
    /// </summary>
    /// <param name = "_attachmentType">Type to find the valid action classes of.</param>
    /// <returns>List of valid action classes for the input DocAttachmentType.</returns>
    public static List getActionClassesByAttachmentType(DocAttachmentType _attachmentType)
    {
        str baseActionClassName;
        List actionClassIds = new List(Types::Int64);

        switch (_attachmentType)
        {
            case DocAttachmentType::Files:
                actionClassIds.addEnd(classNum(DocuActionFile));
                baseActionClassName = classStr(DocuActionFile);
                break;
            case DocAttachmentType::Notes:
                actionClassIds.addEnd(classNum(DocuActionNote));
                baseActionClassName = classStr(DocuActionNote);
                break;
            case DocAttachmentType::URLs:
                actionClassIds.addEnd(classNum(DocuActionURL));
                baseActionClassName = classStr(DocuActionURL);
                break;
            default:
                return actionClassIds;
        }

        // Get the list of classes that extend the base DocAttachmentType action class.
        SysDictClass sysDictClass = SysDictClass::newName(baseActionClassName);
        actionClassIds.appendList(sysDictClass.extendedBy());
   
        return actionClassIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFileDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the action class is DocuActionFile or a subclass of it.
    /// </summary>
    /// <param name = "_classId">Class id.</param>
    /// <returns>True/False</returns>
    public static boolean isFileDocumentType(ClassId _classId)
    {  
        List actionFileClassIdsList = DocReportAttachmentHelper::getActionClassesByAttachmentType(DocAttachmentType::Files);
        ListEnumerator listEnumerator = actionFileClassIdsList.getEnumerator();
        while (listEnumerator.moveNext())
        {
            if (listEnumerator.current() == _classId)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>