<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEventHandlerRestrictedPrinterResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocEventHandlerRestrictedPrinterResult class. 
/// </summary>
public class DocEventHandlerRestrictedPrinterResult
{
    str selectedPrinterName;
    str resolvedPrinterName;
    DocReportId reportId;
    boolean printValidationErrors;
    DocRestrictedPrinter restrictedPrinter;
    boolean restrictPrinter;
    DocPrintReportSettings printReportSettings;
    SrsReportDataContract  srsReportContract;
    SRSPrintDestinationSettings srsPrintDestinationSettings;
    DocPrintDestSettingsPrinter docPrinterPrintDestinationSettings;
    container customData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printReportSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use printReportSettings.parmArchiveContract() to get the report metadata and other info,
    /// in case that you need them to apply your custom restriction to printers.
    /// </summary>
    /// <returns>An instance of the DocPrintReportSettings class</returns>
    public DocPrintReportSettings printReportSettings()
    {
        return printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>srsReportContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use srsReportContract.parmRdpContract() to get the report parameters and other info,
    /// in case that you need them to apply your custom restriction to printers.
    /// </summary>
    /// <returns>An instance of the SrsReportDataContract class</returns>
    public SrsReportDataContract srsReportContract()
    {
        return srsReportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docPrinterPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// If you are using Docentric Printer print destination, use the info from DocPrintDestSettingsPrinter
    /// such as orientation and number of copies, in case that you need them to apply your custom restriction to printers.
    /// </summary>
    /// <returns>An instance of the DocPrintDestSettingsPrinter class</returns>
    public DocPrintDestSettingsPrinter docPrinterPrintDestinationSettings()
    {
        return docPrinterPrintDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>srsPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// If you are using SSRS Printer print destination, use the info from SRSPrintDestinationSettings
    /// such as orientation and number of copies, in case that you need them to apply your custom restriction to printers.
    /// </summary>
    /// <returns>An instance of the SRSPrintDestinationSettings class</returns>
    public SRSPrintDestinationSettings srsPrintDestinationSettings()
    {
        return srsPrintDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedPrinterName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected printer name; it can contain a printer token, e.g. @DEFAULT_PRINTER@.
    /// </summary>
    /// <returns>Selected printer name</returns>
    public str selectedPrinterName()
    {
        return selectedPrinterName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvedPrinterName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resolved selected printer name - without any tokens;
    /// if the selected printer name doesn't contain any token, then the selected and resolved printer names are equal.
    /// </summary>
    /// <returns>Resolved printer name</returns>
    public str resolvedPrinterName()
    {
        return resolvedPrinterName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Report ID. Consider this parameter if you need to apply restriction only for particular reports.
    /// </summary>
    /// <returns>Report Id</returns>
    public str reportId()
    {
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printValidationErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether  the validation error will be printed to Infolog.
    /// In this case, you can also print your custom validation errors.
    /// </summary>
    /// <returns>True if the validation error will be printed to Infolog; otherwise false</returns>
    public boolean printValidationErrors()
    {
        return printValidationErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRestrictPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the selected printer should be restricted.
    /// </summary>
    /// <param name = "_restrictPrinter">Is the selected printer restricted</param>
    /// <returns>True if the selected printer is restricted; otherwise false</returns>
    public boolean parmRestrictPrinter(boolean _restrictPrinter = restrictPrinter)
    {
        restrictPrinter = _restrictPrinter;
        return restrictPrinter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the custom data, if there is more than 1 subscriber to enable communication between them.
    /// </summary>
    /// <param name = "_customData">Container with custom data</param>
    /// <returns>A container with custom data</returns>
    public container parmCustomData(container _customData = customData)
    {
        customData = _customData;
        return customData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocEventHandlerRestrictedPrinterResult class.
    /// </summary>
    /// <param name = "_selectedPrinterName">Selected printer name</param>
    /// <param name = "_resolvedPrinterName">Resolved printer name</param>
    /// <param name = "_printValidationErrors">Specifies whether to print the validation errors</param>
    /// <param name = "_reportId">Report Id</param>
    /// <param name = "_reportContextInfo">Report context info object</param>
    /// <param name = "_restrictedPrinter">The DocRestrictedPrinter table buffer</param>
    public void new(str _selectedPrinterName, str _resolvedPrinterName, boolean _printValidationErrors,
                    DocReportId _reportId, Object _reportContextInfo, DocRestrictedPrinter _restrictedPrinter)
    {
        selectedPrinterName = _selectedPrinterName;
        resolvedPrinterName = _resolvedPrinterName;
        reportId = _reportId;
        printValidationErrors = _printValidationErrors;
        restrictedPrinter = _restrictedPrinter;
        printReportSettings = _reportContextInfo as DocPrintReportSettings;
        srsReportContract = _reportContextInfo as SrsReportDataContract;
        if (printReportSettings && !srsReportContract)
        {
            srsReportContract = printReportSettings.parmSrsReportContract();
        }
        if (srsReportContract)
        {
            srsPrintDestinationSettings = srsReportContract.parmPrintSettings();
            if (srsPrintDestinationSettings)
            {
                docPrinterPrintDestinationSettings = srsPrintDestinationSettings.parmPrinterPrintDestSettings_DC();
            }
        }

        // If _restrictedPrinter.RecId != 0 -> the printer (_resolvedPrinterName) is restricted for the given report.
        // If _restrictedPrinter.RecId == 0 -> the printer (_resolvedPrinterName) is allowed for the given report.
        restrictPrinter = restrictedPrinter.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>