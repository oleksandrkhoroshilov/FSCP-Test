<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSysMailerSMTP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocSysMailerSMTP class provides email and newsgroup posting capabilities using
/// the .NET Framework's System.Net.Mail APIs
/// </summary>
public class DocSysMailerSMTP extends SysMailerSMTP implements SysIMailerNonInteractive
{
    private DocSmtpMailClient smtpMailClient;
    private boolean smtpMailClientLocalyInstanced;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines SysMailer description.
    /// </summary>
    /// <returns>SysMailer description</returns>
    public SysMailerDescription getDescription()
    {
        return "@DocentricAX4:DocSysMailerSMTPDescription"; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSmtpMailClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the SMTP mail client.
    /// If the client is set using this method, it will be used for sending emails through the sendNonInteractive() method.
    /// If the client is not set using this method, each time when sending a mail message, the default SMTP mail client
    /// will be constructed using the account inferred from the mail message sender.
    /// </summary>
    /// <param name = "_smtpMailClient">SMTP mail client</param>
    /// <returns>SMTP mail client</returns>
    public DocSmtpMailClient parmSmtpMailClient(DocSmtpMailClient _smtpMailClient = smtpMailClient)
    {
        smtpMailClient = _smtpMailClient;
        return smtpMailClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendNonInteractive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the provided mail message using parmSmtpMailClient(), if set.
    /// If the client is not set using this method, each time when sending a mail message, the default SMTP mail client
    /// will be constructed using the account inferred from the mail message sender.
    /// </summary>
    /// <param name = "_mailMessage">Mail message to be sent</param>
    /// <returns>True, if the mail message is successfully sent; otherwise false.</returns>
    /// <remarks>
    /// This method doesn't throw exceptions.
    /// Also, it writes Success/Failure to SysEmailHistory and completely handle error messaging.
    /// </remarks>
    public boolean sendNonInteractive(System.Net.Mail.MailMessage _mailMessage)
    {
        str clrErrorMsg;
        boolean isO365;

        smtpMailClientLocalyInstanced = false;
        if (smtpMailClient == null)
        {
            // Instantiate the SMTP mail client.
            try
            {
                smtpMailClient = DocEmailMngHelper::getSmtpClient(_mailMessage.get_From().Address);
                smtpMailClientLocalyInstanced = true;
            }
            catch (Exception::CLRError)
            {
                clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
                clrErrorMsg = this.handleClrErrorMessage(clrErrorMsg);

                this.handleError(_mailMessage, isO365, clrErrorMsg);
                return false;
            }
            catch
            {
                this.handleError(_mailMessage, isO365, clrErrorMsg);
                return false;
            }
        }
        // Suppress throttling if needed
        this.parmIsThrottlingEnabled(!smtpMailClient.parmSuppressThrottling());

        guid correlationId = newGuid();

        return this.sendMessageThrottled(_mailMessage, false, correlationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends email messages.
    /// </summary>
    /// <param name = "_mailMessage">The message to send</param>
    /// <param name = "_interactive">True if the message was created interactively. False otherwise</param>
    /// <param name = "_correlationId">The ID that correlates related telemetry</param>
    /// <returns>True if the message was successfully sent. False otherwise</returns>
    protected boolean sendMessage(System.Net.Mail.MailMessage _mailMessage, boolean _interactive, guid _correlationId)
    {
        boolean isO365;
        str clrErrorMsg;

        boolean emailSuccessfullySent = false;

        // Send the email.
        try
        {
            isO365 = smtpMailClient.isO365();

            smtpMailClient.send(_mailMessage);
    
            emailSuccessfullySent = true;

            DocEmailMngHelper::logSuccessToSysEmailHistory(_mailMessage, isO365);
        }
        catch (Exception::CLRError)
        {
            clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
            clrErrorMsg = this.handleClrErrorMessage(clrErrorMsg);

            this.handleError(_mailMessage, isO365, clrErrorMsg);
        }
        catch
        {
            this.handleError(_mailMessage, isO365, clrErrorMsg);
        }
        finally
        {
            if (smtpMailClientLocalyInstanced && smtpMailClient != null)
            {
                smtpMailClient.dispose();
            }
        }

        return emailSuccessfullySent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the error.
    /// </summary>
    /// <param name = "_mailMessage">The message to send</param>
    /// <param name = "_isO365">Specifies whether the mail provider is a standard O365 mail provider</param>
    /// <param name = "_clrErrorMsg">User-friendly CLR error medssage</param>
    private void handleError(System.Net.Mail.MailMessage _mailMessage, boolean _isO365, str _clrErrorMsg)
    {
        str errorMsg;
        if (smtpMailClientLocalyInstanced)
        {
            str smtpAccount = DocEmailMngHelper::getSmtpAccount(_mailMessage.get_From().Address);
            if (smtpAccount)
            {
                errorMsg = strFmt("@DocentricAX2:SendingEmailFailedSmtpAccount", _mailMessage.From.ToString(), _mailMessage.To.ToString(), _mailMessage.Subject, smtpAccount);
            }
            else
            {
                errorMsg = strFmt("@DocentricAX2:SendingEmailFailedSmtpAccount", _mailMessage.From.ToString(), _mailMessage.To.ToString(), _mailMessage.Subject, "@DocentricAX4:AuthenticationNotRequired");
            }
        }
        else
        {
            errorMsg = strFmt("@DocentricAX:SendingEmailFailedSmtp", _mailMessage.From.ToString(), _mailMessage.To.ToString(), _mailMessage.Subject);
        }

        DocEmailMngHelper::logFailureToSysEmailHistory(_mailMessage, _isO365, errorMsg, _clrErrorMsg);
        DocGlobalHelper::handleError(errorMsg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleClrErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates more user-friendly error message by parsing the raw error.
    /// </summary>
    /// <param name = "_clrErrorMsg">The raw CLR error message</param>
    /// <returns>User-friendly CLR error message</returns>
    private str handleClrErrorMessage(str _clrErrorMsg)
    {
        // Try to create more user-friendly error message by parsing the raw error.
        str clrErrorMsgExt = _clrErrorMsg;

        if (strContains(_clrErrorMsg, 'STARTTLS'))
        {
            clrErrorMsgExt = strFmt('%1\n>> %2', "@DocentricAX2:SmtpErrorMsgCheckSSL", clrErrorMsgExt);
        }

        if (strContains(_clrErrorMsg, 'MapiExceptionSendAsDenied'))
        {
            clrErrorMsgExt = strFmt('%1\n>> %2', "@DocentricAX2:SmtpErrorMsgSendAsPermission", clrErrorMsgExt);
        }

        if (strContains(_clrErrorMsg, 'not authenticated') 
            || strContains(_clrErrorMsg, 'target machine actively refused')
            || strContains(_clrErrorMsg, 'not support authentication'))
        {
            clrErrorMsgExt = strFmt('%1\n>> %2', "@DocentricAX2:SmtpErrorMsgCheckSettings", clrErrorMsgExt);
        }

        if (strContains(_clrErrorMsg, 'net_io_connectionclosed') 
            || strContains(_clrErrorMsg, 'operation has timed out') 
            || strContains(_clrErrorMsg, 'did not properly respond after a period of time'))
        {
            clrErrorMsgExt = strFmt('%1\n>> %2', "@DocentricAX2:SmtpErrorMsgCheckPort", clrErrorMsgExt);
        }

        if (strContains(_clrErrorMsg, 'remote name could not be resolved')
            || strContains(_clrErrorMsg, 'no such host'))
        {
            clrErrorMsgExt = strFmt('%1\n>> %2', "@DocentricAX2:SmtpErrorMsgCheckOutgoingMailServer", clrErrorMsgExt);
        }

        // Print out the error.
        DocGlobalHelper::handleError(clrErrorMsgExt);

        return clrErrorMsgExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testConnection_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests SMTP mail client connection.
    /// </summary>
    /// <param name = "_disposeSmtpMailClient">Should dispose the SMTP mail client after connection test</param>
    public void testConnection_DC(boolean _disposeSmtpMailClient = false)
    {
        if (smtpMailClient == null)
        {
            throw error("@DocentricAX4:DocParametersEmailingTestConnectionSmtpClientNotInstantiatedError");
        }

        try
        {
            smtpMailClient.testConnection();
            DocGlobalHelper::handleInfo(strFmt("@DocentricAX4:DocParametersEmailingTestConnectionSuccessful", smtpMailClient.getMailServerName(), "@DocentricAX2:SendTestEmail"));
        }
        catch (Exception::CLRError)
        {
            str clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
            clrErrorMsg = this.handleClrErrorMessage(clrErrorMsg);

            DocGlobalHelper::handleError(strFmt("@DocentricAX4:DocParametersEmailingTestConnectionFailed", smtpMailClient.getMailServerName()));
        }
        finally
        {
            if (_disposeSmtpMailClient)
            {
                smtpMailClient.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct Docentric SMTP SysMailer based on SMTP mail client if provided.
    /// </summary>
    /// <param name = "_smtpMailClient">SMTP mail client</param>
    /// <returns>An instance of the DocSysMailerSMTP class</returns>
    public static DocSysMailerSMTP construct(DocSmtpMailClient _smtpMailClient = null)
    {
        DocSysMailerSMTP smtpMailer = new DocSysMailerSMTP();
        smtpMailer.parmSmtpMailClient(_smtpMailClient);
        return smtpMailer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>