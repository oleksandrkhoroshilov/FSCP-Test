<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderParams</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocDataSourceProviderParams implements SysPackable
{
    UserId                                  userId;
    HcmWorkerRecId                          hcmWorkerRecId;
    CompanyId                               companyId;
    LanguageId                              dsLanguageId;
    boolean                                 includeCompanyLogoInDs;
    boolean                                 includeDisplayMethodsInDs;
    ClassName                               dsProviderDerivedClassName;
    boolean                                 saveXmlDataSourceToFile;
    str                                     xmlDataSourceFilename;
    boolean                                 isRuntime;
    str                                     previewLanguages;
    DocDataSourceGenerationMode             dataSourceGenerationMode;
    ERModelMappingTable                     erModelMappingTable; 
    ERDataModelTable                        erDataModelTable;
    ERSolutionTable                         erSolutionTable;
    DocERModelDataToIncludeInDS             erModelDataToIncludeInDS;
    str                                     docentricScriptEngine;

    #define.packVersion(1)
    #localmacro.currentList
        version,
        userId,
        hcmWorkerRecId,
        companyId,
        dsLanguageId,
        includeCompanyLogoInDs,
        includeDisplayMethodsInDs,
        dsProviderDerivedClassName,
        saveXmlDataSourceToFile,
        xmlDataSourceFilename,
        isRuntime,
        previewLanguages,
        dataSourceGenerationMode,
        erModelMappingTable,
        erDataModelTable,
        erSolutionTable,
        erModelDataToIncludeInDS,
        docentricScriptEngine
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPreviewLanguageSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the preview language set. The set contains all preview language IDs
    /// including the language ID stored in the this.parmLanguageId() parameter.
    /// All language IDs from the set are valid.
    /// The set contains at least one language ID - if this.parmLanguageId() is not set,
    /// a current user language ID is added to the set.
    /// </summary>
    /// <returns>
    /// Preview language ID set.
    /// </returns>
    public Set getPreviewLanguageSet()
    {
        container           previewLanguagesContainer;
        Set                 previewLanguageSet;
        int                 i;
        str                 previewLanguageCandidate;
    
    
        previewLanguageSet = new Set(Types::String);
        if (this.parmPreviewLanguages())
        {
            previewLanguagesContainer = str2con(this.parmPreviewLanguages(), ',');
            for (i = 1; i <= conLen(previewLanguagesContainer); i++)
            {
                previewLanguageCandidate = conPeek(previewLanguagesContainer, i);
                if (!previewLanguageCandidate)
                {
                    continue;
                }
    
                previewLanguageCandidate = strLTrim(strRTrim(previewLanguageCandidate));
                if (!LanguageTable::exist(previewLanguageCandidate))
                {
                    continue;
                }
    
                if (previewLanguageSet.in(previewLanguageCandidate))
                {
                    continue;
                }
    
                previewLanguageSet.add(previewLanguageCandidate);
            }
        }
    
        // Add the default DS language.
        if (this.parmDsLanguageId())
        {
            if (LanguageTable::exist(this.parmDsLanguageId()))
            {
                if (!previewLanguageSet.in(this.parmDsLanguageId()))
                {
                    previewLanguageSet.add(this.parmDsLanguageId());
                }
            }
        }
    
        // If the language set is empty, add the current user language.
        if (previewLanguageSet.empty())
        {
            previewLanguageSet.add(currentUserLanguage());
        }
    
    
        return previewLanguageSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int  version = #packVersion;
        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyId</Name>
				<Source><![CDATA[
    public CompanyId parmCompanyId(CompanyId _companyId = companyId)
    {
        companyId = _companyId;
        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDsLanguageId</Name>
				<Source><![CDATA[
    public LanguageId parmDsLanguageId(LanguageId _dsLanguageId = dsLanguageId)
    {
        if (!prmIsDefault(_dsLanguageId) && _dsLanguageId == '')
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:LanguageCannotBeEmptyErrorMsg");
        }

        dsLanguageId = _dsLanguageId;
        return dsLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDsProviderDerivedClassName</Name>
				<Source><![CDATA[
    public ClassName parmDsProviderDerivedClassName(ClassName _dsProviderDerivedClassName = dsProviderDerivedClassName)
    {
        dsProviderDerivedClassName = _dsProviderDerivedClassName;
        return dsProviderDerivedClassName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmWorkerRecId</Name>
				<Source><![CDATA[
    public HcmWorkerRecId parmHcmWorkerRecId(HcmWorkerRecId _hcmWorkerRecId = hcmWorkerRecId)
    {
        hcmWorkerRecId = _hcmWorkerRecId;
        return hcmWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCompanyLogoInDs</Name>
				<Source><![CDATA[
    public boolean parmIncludeCompanyLogoInDs(boolean _includeCompanyLogoInDs = includeCompanyLogoInDs)
    {
        includeCompanyLogoInDs = _includeCompanyLogoInDs;
        return includeCompanyLogoInDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDisplayMethodsInDs</Name>
				<Source><![CDATA[
    public boolean parmIncludeDisplayMethodsInDs(boolean _includeDisplayMethodsInDs = includeDisplayMethodsInDs)
    {
        includeDisplayMethodsInDs = _includeDisplayMethodsInDs;
        return includeDisplayMethodsInDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRuntime</Name>
				<Source><![CDATA[
    public boolean parmIsRuntime(boolean _isRuntime = isRuntime)
    {
        isRuntime = _isRuntime;
        return isRuntime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets preview language IDs in a string separated by commas, e.g. "en-us,da,de,de-ch,fi".
    /// That means it can be converted to container by using the con2str() method.
    /// </summary>
    /// <param name="_previewLanguages">
    /// Preview language ID list.
    /// </param>
    /// <returns>
    /// Preview language ID list.
    /// </returns>
    public str parmPreviewLanguages(str _previewLanguages = previewLanguages)
    {
        previewLanguages = _previewLanguages;
        return previewLanguages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveXmlDataSourceToFile</Name>
				<Source><![CDATA[
    public boolean parmSaveXmlDataSourceToFile(boolean _saveXmlDataSourceToFile = saveXmlDataSourceToFile)
    {
        saveXmlDataSourceToFile = _saveXmlDataSourceToFile;
        return saveXmlDataSourceToFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    public UserId parmUserId(UserId _userId = userId)
    {
        userId = _userId;
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlDataSourceFilename</Name>
				<Source><![CDATA[
    public Filename parmXmlDataSourceFilename(Filename _xmlDataSourceFilename = xmlDataSourceFilename)
    {
        xmlDataSourceFilename = _xmlDataSourceFilename;
        return xmlDataSourceFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceGenerationMode</Name>
				<Source><![CDATA[
    public DocDataSourceGenerationMode parmDataSourceGenerationMode(DocDataSourceGenerationMode _dataSourceGenerationMode = dataSourceGenerationMode)
    {
        dataSourceGenerationMode = _dataSourceGenerationMode;
        return dataSourceGenerationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERModelMappingTable</Name>
				<Source><![CDATA[
    public ERModelMappingTable parmERModelMappingTable(ERModelMappingTable _erModelMappingTable = erModelMappingTable)
    {
        erModelMappingTable = _erModelMappingTable;
        return erModelMappingTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERDataModelTable</Name>
				<Source><![CDATA[
    public ERDataModelTable parmERDataModelTable(ERDataModelTable _erDataModelTable = erDataModelTable)
    {
        erDataModelTable = _erDataModelTable;
        return erDataModelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERSolutionTable</Name>
				<Source><![CDATA[
    public ERSolutionTable parmERSolutionTable(ERSolutionTable _erSolutionTable = erSolutionTable)
    {
        erSolutionTable = _erSolutionTable;
        return erSolutionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERModelDataToIncludeInDS</Name>
				<Source><![CDATA[
    public DocERModelDataToIncludeInDS parmERModelDataToIncludeInDS(DocERModelDataToIncludeInDS _erModelDataToIncludeInDS = erModelDataToIncludeInDS)
    {
        erModelDataToIncludeInDS = _erModelDataToIncludeInDS;
        return erModelDataToIncludeInDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocentricScriptEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets Docentric script engine.
    /// Possible values:
    /// DocConstantDSP::ScriptEngineXpath, DocConstantDSP::ScriptEngineCSharp - at design-time, i.e. when generating DDSP,
    /// and DocConstantDSP::ScriptEngineTemplateDefined - at runtime.
    /// </summary>
    /// <param name = "_docentricScriptEngine">Docentric script engine</param>
    /// <returns>Docentric script engine</returns>
    public str parmDocentricScriptEngine(str _docentricScriptEngine = docentricScriptEngine)
    {
        docentricScriptEngine = _docentricScriptEngine;
        return docentricScriptEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultParmValues</Name>
				<Source><![CDATA[
    public void setDefaultParmValues()
    {
        if (!companyId)
        {
            companyId = curext();
        }
    
        if (!hcmWorkerRecId)
        {
            hcmWorkerRecId = HcmWorkerLookup::currentWorker();
        }
    
        if (!dsLanguageId)
        {
            dsLanguageId = currentUserLanguage();
        }
    
        if (!userId)
        {
            userId = curUserId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean     ret = false;
        int         version;
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #packVersion)
            {
                [#currentList] = _pack;
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>