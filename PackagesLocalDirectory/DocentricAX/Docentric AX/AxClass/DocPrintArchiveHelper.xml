<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintArchiveHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Mail;
using Docentric.AX.Email;
using Docentric.AX.Framework.Utilities;
using System.IO;

/// <summary>
/// The DocPrintArchiveHelper class is a helper class for print archive management.
/// </summary>
public class DocPrintArchiveHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>viewEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the email newly created from the data specified in the provided DocPrintJobHeader record.
    /// </summary>
    /// <param name = "_docPrintJobHeader">The DocPrintJobHeader record</param>
    public static void viewEmail(DocPrintJobHeader _docPrintJobHeader)
    {
        if (_docPrintJobHeader == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid parameter _docPrintJobHeader');
        }
        if (_docPrintJobHeader.EncryptedPdf && _docPrintJobHeader.SignedPdf)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:PDFEncryptionEncryptEmailWarning");
        }

        try
        {
            container srsPdPacked = _docPrintJobHeader.PrintDestinationSettingsPacked;
            SRSPrintDestinationSettings srsPd = new SRSPrintDestinationSettings(srsPdPacked);

            DocPrintDestSettingsEmail emailPrintDestSettings = srsPd.parmEmailPrintDestSettings_DC();

            container documentContainer = conNull();
            if (_docPrintJobHeader.EncryptedPdf && !_docPrintJobHeader.SignedPdf)
            {
                // Encrypt the generated report if needed.
                documentContainer = DocReportPdfSecurityManager::encryptDocumentFromPrintJobHeader(_docPrintJobHeader, DocPdfEncryptionConditionEnum::Email); 
            }
            else
            {
                documentContainer = _docPrintJobHeader.getReportPrintedWithDocentricInOriginalFormat().parmContent();
            }

            str fileName = (emailPrintDestSettings.parmEmailSubject() ? DocFileMngHelper::replaceInvalidCharsForFileName(emailPrintDestSettings.parmEmailSubject()) : 'email') + '.eml';
            using (MailMessage mailMsg = DocEmailMngHelper::createEmailMessage(
                                                                emailPrintDestSettings.parmEmailFrom(),
                                                                emailPrintDestSettings.parmEmailFromDisplayName(),
                                                                emailPrintDestSettings.parmEmailTo(),
                                                                emailPrintDestSettings.parmEmailCc(),
                                                                emailPrintDestSettings.parmEmailBcc(),
                                                                emailPrintDestSettings.parmEmailSubject(),
                                                                emailPrintDestSettings.parmEmailBody(),
                                                                emailPrintDestSettings.parmIsHtmlBody(),
                                                                emailPrintDestSettings.getEmailPriority(),
                                                                emailPrintDestSettings.parmEmailAttachmentName(),
                                                                documentContainer,
                                                                _docPrintJobHeader.getEmailReportAttachmentsForEmailMessage(),
                                                                emailPrintDestSettings.parmEmailImageMap(),
                                                                emailPrintDestSettings.parmEmailReplyTo(),
                                                                emailPrintDestSettings.parmEmailBounceTo(),
                                                                false, // don't create a message that can be sent from MS Outlook.
                                                                emailPrintDestSettings.parmReadReceiptAddress(),
                                                                emailPrintDestSettings.parmDeliveryReceiptCondition()))
            {
                using (MemoryStream emlStream = MailHelper::ConvertMailMessageToEml(mailMsg))
                {
                    DocFileMngHelper::sendFileToUser(emlStream, fileName);
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX2:ErrorDownloadingEML");
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:ErrorDownloadingEML");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportDocuRef_FromPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated DocuRef record for the specified PrintJobHeader record.
    /// </summary>
    /// <param name = "_printJobHeader">The PrintJobHeader record</param>
    /// <returns>The DocuRef record if found; otherwise an empty record</returns>
    public static DocuRef getReportDocuRef_FromPrintJobHeader(PrintJobHeader _printJobHeader)
    {
        #SRSFramework
        DocuRef docuRef;
        
        if (!_printJobHeader)
        {
            return null;
        }

        if (_printJobHeader.JobType == #SRSArchiveDocument)
        {
            select firstonly docuRef
                index hint RefIdx
                where docuRef.RefCompanyId == curExt()
                   && docuRef.RefTableId == DocuRef::GetRootTableID(tableNum(PrintJobHeader))
                   && docuRef.RefRecId == _printJobHeader.RecId;
        }

        return docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportDocuRef_FromDocPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated DocuRef record for the specified DocPrintJobHeader record.
    /// </summary>
    /// <param name = "_docPrintJobHeader">The DocPrintJobHeader record</param>
    /// <returns>The DocuRef record if found; otherwise an empty record</returns>
    public static DocuRef getReportDocuRef_FromDocPrintJobHeader(DocPrintJobHeader _docPrintJobHeader)
    {
        DocuRef docuRef;

        if (!_docPrintJobHeader)
        {
            return null;
        }

        select firstonly docuRef
            index hint RefIdx
            where docuRef.RefCompanyId == curExt()
               && docuRef.RefTableId == DocuRef::GetRootTableID(tableNum(DocPrintJobHeader))
               && docuRef.RefRecId == _docPrintJobHeader.RecId
               && (docuRef.Name == DocConstant::ArchivedInOriginalFormatReportName
                    || docuRef.Name == _docPrintJobHeader.getDocentricReportArchiveName());

        return docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportDocuRef_InPDF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated DocuRef record with the contained PDF file for the specified DocPrintJobHeader record.
    /// </summary>
    /// <param name = "_printJobHeader">The PrintJobHeader record</param>
    /// <returns>The DocuRef record if found; otherwise an empty record</returns>
    public static DocuRef getReportDocuRef_InPDF(PrintJobHeader _printJobHeader)
    {
        // Report might not be archived as PDF only if printed with SSRS Email or File print destinations.
        // Otherwise, for any other SSRS's and all Docentric's print destination, PDF file will be attached to PrintJobHeader.
        DocuRef reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_FromPrintJobHeader(_printJobHeader);
        if (reportDocuRef && reportDocuRef.fileType() == DocConstantFile::FileExtPdf)
        {
            return reportDocuRef;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportDocuRef_InNonPDF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated DocuRef record with the contained non-PDF file for the specified DocPrintJobHeader record.
    /// </summary>
    /// <param name = "_printJobHeader">The PrintJobHeader record</param>
    /// <param name = "_docPrintJobHeader">The DocPrintJobHeader record</param>
    /// <returns>The DocuRef record if found; otherwise an empty record</returns>
    public static DocuRef getReportDocuRef_InNonPDF(PrintJobHeader _printJobHeader, DocPrintJobHeader _docPrintJobHeader)
    {
        DocuRef reportDocuRef;

        // This can be a report attached to PrintJobHeader with format different from PDF for SSRS Email and File print destinations (newer D365FO versions).
        reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_FromPrintJobHeader(_printJobHeader);
        if (reportDocuRef && reportDocuRef.fileType() != DocConstantFile::FileExtPdf)
        {
            return reportDocuRef;
        }

        // If not found on PrintJobHeader, for SSRS print destinations it means that is not provided (previous D365FO versions) or it was printed as PDF.
        if (!_docPrintJobHeader || _docPrintJobHeader.PrintDestination == DocPrintDestinationArchive::Uknown)
        {
            return null;
        }

        // If not found on PrintJobHeader, for Docentric print destinations we will check if there is a non-PDF report attached to DocPrintJobHeader.
        // (This can happen only for Docentric Email and File print destinations)
        reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_FromDocPrintJobHeader(_docPrintJobHeader);
        if (reportDocuRef && reportDocuRef.fileType() != DocConstantFile::FileExtPdf)
        {
            return reportDocuRef;
        }
        
        // If not found, the report was either archived using a Docentric print destination different from Email and File, 
        // using Docentric version prior to 3.3.2, or the report is configured not to be archived in original format if it differs from PDF.
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshPrintArchiveViewMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the DocPrintArchiveView menu button on a common journal form.
    /// </summary>
    /// <param name = "_control">An instance of the FormFunctionButtonControl class</param>
    /// <param name = "_journalType">Journal type of the calling form</param>
    /// <param name = "_common">Buffer of primary data source table of the journal</param>
    public static void refreshPrintArchiveViewMenuButton(FormFunctionButtonControl _control, DocJournalType _journalType, Common _common)
    {
        int numberOfArchivedDocuments = DocPrintArchiveHelper::getNumberOfDocumentsByJournalType(_journalType, _common);

        if (_control)
        {
            _control.enabled(numberOfArchivedDocuments);
            _control.text(strFmt('%1 (%2)', "@DocentricAX3:PrintArchiveView", numberOfArchivedDocuments));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarningByJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets warning for corresponding print archive record according to journal type.
    /// </summary>
    /// <param name = "_journalType">Type of the journal where the error occurred.</param>
    /// <param name = "_common">Buffer of primary data source table of the journal where the error occurred.</param>
    /// <returns>String containing the warning message.</returns>
    protected static str getWarningByJournalType(DocJournalType _journalType, Common _common)
    {
        DocGeneratedReportDocumentId documentId;
        DocAccountNum accountNum;

        switch(_journalType)
        {
            case DocJournalType::CustConfirmJour:
                CustConfirmJour custConfirmJour = _common as CustConfirmJour;
                documentId = custConfirmJour.ConfirmDocNum;
                accountNum = custConfirmJour.InvoiceAccount;
                break;

            case DocJournalType::CustInvoiceJour:
                CustInvoiceJour custInvoiceJour = _common as CustInvoiceJour;
                documentId = custInvoiceJour.InvoiceId;
                accountNum = custInvoiceJour.InvoiceAccount;
                break;

            case DocJournalType::CustPackingSlipJour:
                CustPackingSlipJour custPackingSlipJour = _common as CustPackingSlipJour;
                documentId = custPackingSlipJour.PackingSlipId;
                accountNum = custPackingSlipJour.InvoiceAccount;
                break;

            case DocJournalType::CustQuotationConfirmJour:
                CustQuotationConfirmJour custQuotationConfirmJour = _common as CustQuotationConfirmJour;
                documentId = custQuotationConfirmJour.QuotationDocNum;
                accountNum = custQuotationConfirmJour.InvoiceAccount;
                break;

            case DocJournalType::CustQuotationJour:
                CustQuotationJour custQuotationJour = _common as CustQuotationJour;
                documentId = custQuotationJour.QuotationDocNum;
                accountNum = custQuotationJour.InvoiceAccount;
                break;

            case DocJournalType::ProjInvoiceJour:
                ProjInvoiceJour projInvoiceJour = _common as ProjInvoiceJour;
                documentId = projInvoiceJour.ProjInvoiceId;
                accountNum = projInvoiceJour.InvoiceAccount;
                break;

            case DocJournalType::VendPurchOrderJour:
                VendPurchOrderJour vendPurchOrderJour = _common as VendPurchOrderJour;
                documentId = vendPurchOrderJour.PurchOrderDocNum;
                accountNum = vendPurchOrderJour.OrderAccount;
                break;
        }

        return strFmt("@DocentricAX3:PrintArchiveNoDocumentFound", documentId, accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfDocumentsByJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of related documents in the print archive.
    /// </summary>
    /// <param name = "_journalType">Journal type of the calling form.</param>
    /// <param name = "_common">Buffer of primary data source table of the journal for which to check.</param>
    /// <returns>Number of documents found in print archive.</returns>
    public static int getNumberOfDocumentsByJournalType(DocJournalType _journalType, Common _common)
    {
        PrintJobHeader printJobHeader;
        DocPrintJobHeader docPrintJobHeader;

        select count(RecId) from printJobHeader
            exists join docPrintJobHeader
                where printJobHeader.RecId == docPrintJobHeader.PrintJobHeaderRecId
                   && docPrintJobHeader.DataAreaId == _common.DataAreaId
                   && docPrintJobHeader.JournalType == _journalType
                   && docPrintJobHeader.JournalRecId == _common.RecId;

        return int642int(printJobHeader.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFilenameForJournalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the filename for the downloaded print archive document.
    /// </summary>
    /// <param name = "_printJobHeader">The PrintJobHeader record.</param>
    /// <param name = "_docPrintJobHeader">The DocPrintJobHeader record.</param>
    /// <param name = "_docuRef">The DocuRef record.</param>
    /// <returns>The resolved filename of the downloaded print archive document.</returns>
    protected static str resolveFilenameForJournalDocument(PrintJobHeader _printJobHeader, DocPrintJobHeader _docPrintJobHeader, DocuRef _docuRef)
    {
        str filename;

        if (_docPrintJobHeader.DocumentId)
        {
            filename = _docPrintJobHeader.DocumentId;
        }
        else if (_printJobHeader.jobDescription)
        {
            filename = _printJobHeader.jobDescription;
        }
        else if (_docPrintJobHeader.ReportId)
        {
            filename = _docPrintJobHeader.ReportId;
        }

        // Sanitize filename.
        filename = strFmt('%1.%2',
                    DocFileMngHelper::replaceInvalidCharsForFileName(filename),
                    _docuRef.fileType());

        if (!filename)
        {
            DocGlobalHelper::handleException("@DocentricAX3:PrintArchiveInvalidFilename");
        }

        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadFileByJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the newest related print archive file(s) by journal type, if found.
    /// </summary>
    /// <param name = "_ds">The data source of the calling form</param>
    /// <param name = "_journalType">The journal type of the calling form.</param>
    /// <remarks>Downloads zip archive if more than 1 file is found.</remarks>
    public static void downloadFileByJournalType(FormDataSource _ds, DocJournalType _journalType)
    {
        Common common;
        int indexOfLastMarkedRecord = _ds.recordsMarked().lastIndex();

        // Check if either 1 record is marked (index = 1) or no records are marked (index = 0) but cursor has a record.
        if (indexOfLastMarkedRecord < 2 && _ds.cursor() != null)
        {
            PrintJobHeader printJobHeader;
            DocPrintJobHeader docPrintJobHeader;
            common = _ds.getFirst(indexOfLastMarkedRecord, false);

            // Find the newest added document in the print archive related to the record selected.
            select firstonly printJobHeader
                order by printJobHeader.createdDateTime desc
                join docPrintJobHeader
                    where printJobHeader.RecId == docPrintJobHeader.PrintJobHeaderRecId
                       && docPrintJobHeader.DataAreaId == common.DataAreaId
                       && docPrintJobHeader.JournalType == _journalType
                       && docPrintJobHeader.JournalRecId == common.RecId;

            // No documents found in print archive, show warning and return.
            if (!printJobHeader)
            {
                DocGlobalHelper::handleWarning(DocPrintArchiveHelper::getWarningByJournalType(_journalType, common));
                return;
            }

            try
            {
                DocuRef docuRef = DocPrintArchiveHelper::getReportDocuRef_InPDF(printJobHeader);

                using (System.IO.MemoryStream reportStream = DocDocuRefHelper::getAttachmentContentAsMemoryStream(docuRef))
                {
                    str filename = DocPrintArchiveHelper::resolveFilenameForJournalDocument(printJobHeader, docPrintJobHeader, docuRef);
                    DocFileMngHelper::sendFileToUser(reportStream, filename);
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription));
            }
            catch
            {
                DocGlobalHelper::handleException(strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription));
            }

            int documentsFound = DocPrintArchiveHelper::getNumberOfDocumentsByJournalType(_journalType, common);
            // If multiple copies are found, show warning.
            if (documentsFound > 1)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:PrintArchiveMultipleRecordsFound",
                    docPrintJobHeader.DocumentId,
                    docPrintJobHeader.AccountNum,
                    documentsFound));
            }
        }
        // Otherwise more than 1 record is marked. 0 not possible, as control requires record.
        else
        {
            MultiSelectionHelper multiSelectHelper = MultiSelectionHelper::construct();
            multiSelectHelper.parmDatasource(_ds);

            List docList = new List(Types::Container);
            Map namesMap = new Map(Types::String, Types::Integer);
            int downloadedReportCount = 0;
            int printArchiveCopiesCount = 0;

            common = multiSelectHelper.getFirst();

            while (common)
            {
                PrintJobHeader printJobHeader;
                DocPrintJobHeader docPrintJobHeader;

                select firstonly printJobHeader
                    order by printJobHeader.createdDateTime desc
                    join docPrintJobHeader
                        where printJobHeader.RecId == docPrintJobHeader.PrintJobHeaderRecId
                           && docPrintJobHeader.DataAreaId == common.DataAreaId
                           && docPrintJobHeader.JournalType == _journalType
                           && docPrintJobHeader.JournalRecId == common.RecId;

                try
                {

                    DocuRef docuRef = DocPrintArchiveHelper::getReportDocuRef_InPDF(printJobHeader);
    
                    if (!docuRef)
                    {
                        common = multiSelectHelper.getNext();
                        continue;
                    }

                    // Get the attachment content.
                    System.IO.MemoryStream reportStream = DocDocuRefHelper::getAttachmentContentAsMemoryStream(docuRef);

                    str filename = DocPrintArchiveHelper::resolveFilenameForJournalDocument(printJobHeader, docPrintJobHeader, docuRef);

                    str filenameWithSuffix;
                    int filenameCounter;
    
                    // Handle the files with same names - give them suffixes as (1), (2), etc,
                    // similar as the browser would do when downloading the files with same names.
                    if (namesMap.exists(filename))
                    {
                        filenameCounter = namesMap.lookup(filename);
                        filenameCounter++;
                    
                        filenameWithSuffix = strFmt('%1 (%2).%3', 
                            DocFileMngHelper::getFileNameWithoutExtension(filename),
                            filenameCounter, 
                            DocFileMngHelper::getFileExtension(filename));
                    }
                    else
                    {
                        filenameCounter = 0;
                        filenameWithSuffix = filename;
                    }
                    namesMap.insert(filename, filenameCounter);
                
                    // Add content and filename to the list which we will use for zipping
                    docList.addEnd([filenameWithSuffix, reportStream]);
                    downloadedReportCount++;
                }
                catch (Exception::CLRError)
                {
                    DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription));
                }
                catch
                {
                    DocGlobalHelper::handleException(strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription));
                }
                
                if (DocPrintArchiveHelper::getNumberOfDocumentsByJournalType(_journalType, common) > 1)
                {
                    printArchiveCopiesCount++;
                }

                common = multiSelectHelper.getNext();
            }

            // Check to see if there are multiple files to be added to the zip.
            if (downloadedReportCount > 1)
            {
                try
                {
                    // Create the zip file from the documents saved in the list
                    using (Stream zipStream = DocDocumentHelper::documents2Zip(docList))
                    {
                        DocFileMngHelper::sendFileToUser(zipStream, 'ArchivedReports.zip');
                    }
                }
                catch (Exception::CLRError)
                {
                    DocGlobalHelper::handleClrException(funcName(), "@DocentricAX3:ErrorDownloadingZip");
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), "@DocentricAX3:ErrorDownloadingZip");
                }
            }
            // If there is only 1 file, download a PDF instead.
            else if (downloadedReportCount == 1)
            {
                ListEnumerator docListEnumerator = docList.getEnumerator();
                docListEnumerator.moveNext();

                str filename = conPeek(docListEnumerator.current(), 1);
                Stream reportStream = conPeek(docListEnumerator.current(), 2);

                DocFileMngHelper::sendFileToUser(reportStream, filename);
            }

            str numberDownloadedMessage = strFmt("@DocentricAX3:PrintArchiveMultiSelectNumberDownloaded", 
                downloadedReportCount, 
                indexOfLastMarkedRecord);

            str numberOfCopiesMessage = strFmt("@DocentricAX3:PrintArchiveMultiSelectNumberOfCopies", 
                printArchiveCopiesCount,
                downloadedReportCount);

            // If all marked records were succesfully found and downloaded, then print messages.
            if (downloadedReportCount == indexOfLastMarkedRecord)
            {
                if (printArchiveCopiesCount == 0)
                {
                    DocGlobalHelper::handleInfo(numberDownloadedMessage);
                }
                else
                {
                    DocGlobalHelper::handleWarning(numberDownloadedMessage + numberOfCopiesMessage);
                }
            }
            // Else if fewer records than marked were downloaded, show warning.
            else
            {
                if (printArchiveCopiesCount == 0)
                {
                    DocGlobalHelper::handleWarning(numberDownloadedMessage);
                }
                else
                {
                    DocGlobalHelper::handleWarning(numberDownloadedMessage + numberOfCopiesMessage);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the generated files for the selected reports.
    /// There are three options:
    /// - only PDF files are downloaded if no parameters are set
    /// - only non-PDF files are downloaded if the parameter <c>_nonPdfFiles</c> is set
    /// - only PDF files which has EncryptedPdf = true are downloaded if the parameter <c>_onlyEncryptedPdfFiles</c> is set
    /// The parameters are mutually exclusive.
    /// </summary>
    /// <param name = "_ds">A <c>PrintJobHeader</c> datasource</param>
    /// <param name = "_nonPdfFiles">Download only non-PDF files</param>
    /// <param name = "_onlyEncryptedPdfFiles">Download only encrypted PDF files</param>
    public static void downloadFile(FormDataSource _ds, boolean _nonPdfFiles, boolean _onlyEncryptedPdfFiles = false)
    {
        // We expect the datasource to be PrintJobHeader
        if (_ds.table() != tableNum(PrintJobHeader))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid datasource for this call');
        }
        
        // If more than 10 records are selected, don't download as separate files.
        // Prompt user if we should download as ZIP or cancel.
        if (_ds.recordsMarked().lastIndex() > DocConstant::PrintArchiveMaxNumberOfFilesForSeparateDownload)
        {           
            DialogButton dlgBtn = Box::okCancel(
                                        strFmt("@DocentricAX3:PrintArchiveTooManyFilesText", DocConstant::PrintArchiveMaxNumberOfFilesForSeparateDownload),
                                        DialogButton::Ok, // Initial focus is on the OK button.
                                        "@DocentricAX3:PrintArchiveTooManyFilesTitle");
            if (dlgBtn == DialogButton::Ok)
            {
                DocPrintArchiveHelper::downloadZip(_ds, _nonPdfFiles, _onlyEncryptedPdfFiles);
            }
            return;
        }

        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(_ds);   
        
        // Collect the files
        PrintJobHeader printJobHeader;
        DocPrintJobHeader docPrintJobHeader;
        FilenameType fileType;
        int totalReportCount = 0;
        int downloadedReportCount = 0;
        
        printJobHeader = helper.getFirst();
        while (printJobHeader.RecId != 0)
        {
            docPrintJobHeader = DocPrintJobHeader::findByPrintJobHeader(printJobHeader.RecId);

            DocuRef reportDocuRef;
            System.IO.MemoryStream reportContentMemoryStream;

            // Get the corresponding DocuRef record and send it to user.
            try
            {
                totalReportCount++;
                if (_nonPdfFiles)
                {
                    // Get non-PDF file.
                    reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_InNonPDF(printJobHeader, docPrintJobHeader);
                }
                else if (!_onlyEncryptedPdfFiles)
                {
                    // Get PDF file.
                    reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_InPDF(printJobHeader);
                }
                else if (_onlyEncryptedPdfFiles 
                            && docPrintJobHeader.EncryptedPdf 
                            && strScan(docPrintJobHeader.EncryptedPdfConditions, enum2Symbol(enumNum(DocPdfEncryptionConditionEnum), DocPdfEncryptionConditionEnum::DownloadFile), 1, strLen(docPrintJobHeader.EncryptedPdfConditions)) > 0
                            && !docPrintJobHeader.SignedPdf)
                {
                    // Get encrypted PDF file.
                    reportContentMemoryStream = DocGlobalHelper::convertContainerToMemoryStream(DocReportPdfSecurityManager::encryptDocumentFromPrintJobHeader(docPrintJobHeader, DocPdfEncryptionConditionEnum::DownloadFile));
                    fileType = DocConstantFile::FileExtPdf;
                }

                // Get the attachment content.
                if (reportDocuRef)
                {
                    reportContentMemoryStream = DocDocuRefHelper::getAttachmentContentAsMemoryStream(reportDocuRef);
                    fileType = reportDocuRef.fileType();
                }

                // Send file to user.
                if (reportContentMemoryStream)
                {
                    str reportFilename = strFmt('%1.%2', DocFileMngHelper::replaceInvalidCharsForFileName(printJobHeader.jobDescription), fileType);
                    DocFileMngHelper::sendFileToUser(reportContentMemoryStream, reportFilename, '', '', '', '', true, true);

                    downloadedReportCount++;
                    reportContentMemoryStream.Dispose();
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrError(funcName(), strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", (docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription)));
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", (docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription)));
            }
            
            printJobHeader = helper.getNext();
        }

        // Print warning messages if needed.
        if (downloadedReportCount == 0 && totalReportCount == 0)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:NoReportsSelectedForDownload");
        }
        else if (downloadedReportCount == 0 && totalReportCount > 0)
        {
            if (_nonPdfFiles)
            {
                DocGlobalHelper::handleWarning("@DocentricAX3:NoNonPdfFilesFoundWarning");
            }
            else if (!_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning("@DocentricAX3:NoPdfFilesFoundWarning");
            }
            else if (_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning("@DocentricAX3:NoEncryptedPdfFilesFoundWarning");
            }
        }
        else if (totalReportCount > downloadedReportCount)
        {
            int notDownloadedReportCount = totalReportCount - downloadedReportCount;
            if (_nonPdfFiles)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotAllNonPdfFilesFoundWarning", downloadedReportCount, totalReportCount, notDownloadedReportCount));
            }
            else if (!_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotAllPdfFilesFoundWarning", downloadedReportCount, totalReportCount, notDownloadedReportCount));
            }
            else if (_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotAllEncryptedPdfFilesFoundWarning", downloadedReportCount, totalReportCount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadZip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the ZIP file with files for the selected reports.
    /// There are three options:
    /// - only PDF files are downloaded if no parameters are set
    /// - only non-PDF files are downloaded if the parameter <c>_nonPdfFiles</c> is set
    /// - only PDF files which has EncryptedPdf = true are downloaded if the parameter <c>_onlyEncryptedPdfFiles</c> is set
    /// The parameters are mutually exclusive.
    /// </summary>
    /// <param name = "_ds">A <c>PrintJobHeader</c> datasource</param>
    /// <param name = "_nonPdfFiles">Download only non-PDF files</param>
    /// <param name = "_onlyEncryptedPdfFiles">Download only encrypted PDF files</param>
    public static void downloadZip(FormDataSource _ds, boolean _nonPdfFiles, boolean _onlyEncryptedPdfFiles = false)
    {
        // We expect the datasource to be PrintJobHeader
        if (_ds.table() != tableNum(PrintJobHeader))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid datasource for this call');
        }

        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(_ds);
        
        // Collect the files        
        PrintJobHeader printJobHeader;
        DocPrintJobHeader docPrintJobHeader;
        FilenameType fileType;
        str filename, filenameWithSuffix;
        int filenameCounter;
        int totalReportCount = 0;
        int downloadedReportCount = 0;
        
        List docList = new List(Types::Container);
        Map namesMap = new Map(Types::String, Types::Integer);

        printJobHeader = helper.getFirst();
        while (printJobHeader.RecId != 0)
        {
            docPrintJobHeader = DocPrintJobHeader::findByPrintJobHeader(printJobHeader.RecId);

            DocuRef reportDocuRef;
            System.IO.MemoryStream reportContentMemoryStream;

            // Get the corresponding DocuRef record and add it to zipping list.
            try
            {
                totalReportCount++;
                if (_nonPdfFiles)
                {
                    // Get non-PDF file
                    reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_InNonPDF(printJobHeader, docPrintJobHeader);
                }
                else if (!_onlyEncryptedPdfFiles)
                {
                    // Get PDF file
                    reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_InPDF(printJobHeader);
                }
                else if (_onlyEncryptedPdfFiles 
                            && docPrintJobHeader.EncryptedPdf 
                            && strScan(docPrintJobHeader.EncryptedPdfConditions, enum2Symbol(enumNum(DocPdfEncryptionConditionEnum), DocPdfEncryptionConditionEnum::DownloadFile), 1, strLen(docPrintJobHeader.EncryptedPdfConditions)) > 0
                            && !docPrintJobHeader.SignedPdf)
                {
                    // Get encrypted PDF file
                    reportContentMemoryStream = DocGlobalHelper::convertContainerToMemoryStream(DocReportPdfSecurityManager::encryptDocumentFromPrintJobHeader(docPrintJobHeader, DocPdfEncryptionConditionEnum::DownloadFile));
                    fileType = DocConstantFile::FileExtPdf;
                }

                // Get the attachment content.
                if (reportDocuRef)
                {
                    reportContentMemoryStream = DocDocuRefHelper::getAttachmentContentAsMemoryStream(reportDocuRef);
                    fileType = reportDocuRef.fileType();
                }

                if (reportContentMemoryStream)
                {
                    filename = strFmt('%1.%2', DocFileMngHelper::replaceInvalidCharsForFileName(printJobHeader.jobDescription), fileType);
                    
                    // Handle the files with same names - give them suffixes as (1), (2), etc,
                    // similar as the browser would do when downloading the files with same names.
                    if (namesMap.exists(filename))
                    {
                        filenameCounter = namesMap.lookup(filename);
                        filenameCounter++;
                
                        filenameWithSuffix = strFmt('%1 (%2).%3', DocFileMngHelper::getFileNameWithoutExtension(filename), filenameCounter, DocFileMngHelper::getFileExtension(filename));
                    }
                    else
                    {
                        filenameCounter = 0;
                        filenameWithSuffix = filename;
                    }
                    namesMap.insert(filename, filenameCounter);
            
                    // Add content and filename to the list which we will use for zipping
                    docList.addEnd([filenameWithSuffix, reportContentMemoryStream]);

                    downloadedReportCount++;
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrError(funcName(), strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", (docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription)));
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", (docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription)));
            }

            printJobHeader = helper.getNext();
        }
         
        if (downloadedReportCount > 0)
        {
            try
            {
                // Create the zip file from the documents saved in the list
                using (Stream zipStream = DocDocumentHelper::documents2Zip(docList))
                {
                    DocFileMngHelper::sendFileToUser(zipStream, 'DownloadedReports.zip');
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), "@DocentricAX3:ErrorDownloadingZip");
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX3:ErrorDownloadingZip");
            }
        }
        
        // Print warning messages if needed.
        if (downloadedReportCount == 0 && totalReportCount == 0)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:NoReportsSelectedForDownload");
        }
        else if (downloadedReportCount == 0 && totalReportCount > 0)
        {
            if (_nonPdfFiles)
            {
                DocGlobalHelper::handleWarning("@DocentricAX3:NoNonPdfFilesFoundWarning");
            }
            else if (!_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning("@DocentricAX3:NoPdfFilesFoundWarning");
            }
            else if (_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning("@DocentricAX3:NoEncryptedPdfFilesFoundWarning");
            }
        }
        else if (totalReportCount > downloadedReportCount)
        {
            int notDownloadedReportCount = totalReportCount - downloadedReportCount;
            if (_nonPdfFiles)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotAllNonPdfFilesFoundWarning", downloadedReportCount, totalReportCount, notDownloadedReportCount));
            }
            else if (!_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotAllPdfFilesFoundWarning", downloadedReportCount, totalReportCount, notDownloadedReportCount));
            }
            else if (_onlyEncryptedPdfFiles)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotAllEncryptedPdfFilesFoundWarning", downloadedReportCount, totalReportCount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadMergedPDF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads merged PDF files.
    /// </summary>
    /// <param name = "_ds">A <c>PrintJobHeader</c> datasource</param>
    public static void downloadMergedPDF(FormDataSource _ds)
    {
        // We expect the datasource to be PrintJobHeader
        if (_ds.table() != tableNum(PrintJobHeader))
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid datasource for this call');
        }
        
        PrintJobHeader printJobHeader;
        DocPrintJobHeader docPrintJobHeader;
        DocuRef reportDocuRef;
        List docList = new List(Types::AnyType);
        int totalReportCount = 0;
        int downloadedReportCount = 0;

        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(_ds);
        printJobHeader = helper.getFirst();

        while (printJobHeader.RecId != 0)
        {
            docPrintJobHeader = DocPrintJobHeader::findByPrintJobHeader(printJobHeader.RecId);

            // Get the corresponding DocuRef record and add it to merging list.
            try
            {
                totalReportCount++;
                
                reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_InPDF(printJobHeader);
                if (reportDocuRef)
                {
                    // Get the attachment content.
                    System.IO.MemoryStream reportAsMemoryStream = DocDocuRefHelper::getAttachmentContentAsMemoryStream(reportDocuRef);
                    if (reportAsMemoryStream == null)
                    {
                        throw Exception::Error;
                    }
                    System.Byte[] pdfAsBytes = reportAsMemoryStream.ToArray();

                    // Add the file content to the list for merging.
                    docList.addEnd(pdfAsBytes);

                    downloadedReportCount++;
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrError(funcName(), strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", (docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription)));
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX3:PrintArchiveErrorFetchingAttachment", (docPrintJobHeader ? docPrintJobHeader.toString() : printJobHeader.jobDescription)));
            }

            printJobHeader = helper.getNext();
        }
         
        if (downloadedReportCount > 0)
        {
            try
            {
                // Create the merged PDF file from the document contents saved in the list
                using (MemoryStream mergedPDFStream = DocDocumentHelper::mergePdfDocuments(docList))
                {
                    DocFileMngHelper::sendFileToUser(mergedPDFStream, 'MergedReports.pdf');
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), "@DocentricAX3:ErrorDownloadingMergedPDF");
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX3:ErrorDownloadingMergedPDF");
            }
        }

        // Print warning messages if needed.
        if (downloadedReportCount == 0 && totalReportCount == 0)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:NoReportsSelectedForMerging");
        }
        else if (downloadedReportCount == 0 && totalReportCount > 0)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:NoPdfFilesFoundWarning");
        }
        else if (totalReportCount > downloadedReportCount)
        {
            int notDownloadedReportCount = totalReportCount - downloadedReportCount;
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:NotAllPdfFilesFoundForMergingWarning", downloadedReportCount, totalReportCount, notDownloadedReportCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParametersAndRanges</Name>
				<Source><![CDATA[
    /******************************************************************************************************/
    /*                              Getting Report Parameters                                             */
    /******************************************************************************************************/
    public static str getReportParametersAndRanges(DocReportPrintArchiveInfo _printArchiveInfo)
    {
        str combineStrings(str _str1, str _str2, boolean _appendDot)
        {
            str retVal;
            if (_str1 != '')
            {
                retVal = _str1 + (_str2 == '' ? '' : ', \n' + _str2);
            }
            else
            {
                retVal = _str2;
            }

            if (_appendDot)
            {
                retVal += retVal == '' ? '' : '.';
            }

            return retVal;
        }

        DocArchiveReportParamsOption paramOption = DocReportTable::getArchiveReportParamsOption(_printArchiveInfo.parmPrintReportSettings().parmReportId());

        if (paramOption == DocArchiveReportParamsOption::DoNotArchive)
        {
            return '';
        }
        
        str retVal;
        try
        {
            str params = DocPrintArchiveHelper::getReportParameters(_printArchiveInfo, paramOption);
            str predefinedRanges = DocPrintArchiveHelper::getReportPredefinedRanges(_printArchiveInfo, paramOption);
            str userDefinedRanges = DocPrintArchiveHelper::getReportUserDefinedRanges(_printArchiveInfo, paramOption);
        
            retVal = combineStrings(params, predefinedRanges, false);
            retVal = combineStrings(retVal, userDefinedRanges, true);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException('', strFmt("@DocentricAX3:ArchiveReportParamsError", _printArchiveInfo.parmPrintReportSettings().parmReportId()), Exception::Warning);
            retVal = '';
        }
        catch
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:ArchiveReportParamsError", _printArchiveInfo.parmPrintReportSettings().parmReportId()));
            retVal = '';
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    public static str getReportParameters(DocReportPrintArchiveInfo _printArchiveInfo, DocArchiveReportParamsOption _paramOption)
    {
        if (_paramOption == DocArchiveReportParamsOption::DoNotArchive)
        {
            return '';
        }
        boolean technicalLog = _paramOption == DocArchiveReportParamsOption::ArchiveWithTechnicalNames;  // for the sake of shorter expressions

        str retVal = '';

        // Go through the report parameters map and retrieve their names and values.
        Map rpMap = _printArchiveInfo.getReportParameters();  // Map(str _parametername, SRSReportParameter class instance)
        if (rpMap.elements() == 0)
        {
            return '';
        }

        str strVal;
        MapIterator it = new MapIterator(rpMap);
        while (it.more())
        {
            SRSReportParameter srsPar = it.value();
            anytype valueTyped = srsPar.getValueTyped();

            if ((!srsPar.hidden()) && DocReportingHelper::isSrsReportParameterConvertibleToString(valueTyped))
            {
                // Close the previous line and add a new line.
                retVal += (retVal == '' ? '' : ', \n');

                // Get the value of the parameter.
                if (srsPar.typeOfDataType() == Types::Enum)
                {
                    strVal = valueTyped.ToString();
                }
                else if (srsPar.isNullValue())
                {
                    strVal = DocConstant::EmptyReportParameter;
                }
                else
                {
                    strVal = srsPar.value(valueTyped);
                }
                
                retVal += strFmt('%1: %2', technicalLog ? srsPar.name() : srsPar.label(), strVal);
            }

            it.next();
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportPredefinedRanges</Name>
				<Source><![CDATA[
    public static str getReportPredefinedRanges(DocReportPrintArchiveInfo _printArchiveInfo, DocArchiveReportParamsOption _paramOption)
    {
        if (_paramOption == DocArchiveReportParamsOption::DoNotArchive)
        {
            return '';
        }
        boolean technicalLog = _paramOption == DocArchiveReportParamsOption::ArchiveWithTechnicalNames;  // for the sake of shorter expressions

        str retVal = '';
        Query query = _printArchiveInfo.getDynamicQueryParameter();

        if (query == null)
        {
            return '';
        }

        QueryBuildRange         qbr;
        QueryBuildDatasource    qbds;

        for (int dsNumber = 1; dsNumber <= query.dataSourceCount(); dsNumber++)
        {
            qbds = query.dataSourceNo(dsNumber);
            if (qbds.enabled())
            {
                for (int rangeNumber = 1; rangeNumber <= qbds.rangeCount(); rangeNumber++)
                {
                    qbr = qbds.range(rangeNumber);

                    // Skip the hidden ranges
                    if (qbr.status() != RangeStatus::Hidden)
                    {
                        retVal += (retVal == '' ? '' : ', \n');     // close the previous line and add a new line                              
                        retVal += strFmt('%1.%2: %3',
                                         technicalLog ? tableId2name(qbds.table()) : tableId2Pname(qbds.table()),
                                         technicalLog ? fieldId2name(qbds.table(), qbr.field()) : fieldId2Pname(qbds.table(), qbr.field()),
                                         qbr.value() == '' ? DocConstant::EmptyReportParameter : qbr.value());
                    }
                }
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportUserDefinedRanges</Name>
				<Source><![CDATA[
    public static str getReportUserDefinedRanges(DocReportPrintArchiveInfo _printArchiveInfo, DocArchiveReportParamsOption _paramOption)
    {
        if (_paramOption == DocArchiveReportParamsOption::DoNotArchive)
        {
            return '';
        }
        boolean technicalLog = _paramOption == DocArchiveReportParamsOption::ArchiveWithTechnicalNames;  // for the sake of shorter expressions

        str retVal = '';
        Query query = _printArchiveInfo.getDynamicQueryParameter();

        if (query == null)
        {
            return '';
        }

        QueryFilter qf;
        for (int qfNumber = 1; qfNumber <= query.queryFilterCount(); qfNumber++)
        {
            qf = query.queryFilter(qfNumber);

            retVal += (retVal == '' ? '' : ', \n');     // close the previous line and add a new line                      
            retVal += strFmt('%1.%2: %3',
                             technicalLog ? tableId2name(qf.dataSource().table()) : tableId2Pname(qf.dataSource().table()),
                             technicalLog ? qf.field() : fieldId2Pname(qf.dataSource().table(), fieldName2Id(qf.dataSource().table(), qf.field())),
                             qf.value() == '' ? DocConstant::EmptyReportParameter : qf.value());
        }

        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>