<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDocumentHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.IO.Compression;
using System.Collections;
using Docentric.AX.Documents;
using Docentric.AX.Documents.Word;
using Docentric.AX.Documents.Pdf;
using Docentric.AX.Framework;
using DOCSF = Docentric.AX.Storage.File;
using DOCFU = Docentric.AX.Framework.Utilities;
using DOCDPC = Docentric.AX.Documents.Pdf.Conversion;
using DOCFC = Docentric.AX.Framework.Collections;

// Document manipulation methods. Wrapper around Docentric.Documents classes.
class DocDocumentHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>combineDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Combine several Word documents in one document.
    /// </summary>
    /// <param name = "_documents">List of Word document System.IO.Stream objects to be concatenated (MemoryStream is preffered). Position must be 0 otherwise content before position is ignored.</param>
    /// <returns>Memory stream (with Position = 0) with the content of combined documents or null in case of error.</returns>
    /// <remarks>Position of the input streams is changed.</remarks>
    public static MemoryStream combineDocuments(List _documents)
    {        
        MemoryStream resultStream = new MemoryStream();

        try
        {
            ArrayList arrayList = new ArrayList();
            ListEnumerator le = _documents.getEnumerator();
            while (le.moveNext())
            {
                arrayList.Add(le.current());
            }

            Stream[] documents = new Stream[arrayList.Count]();
            arrayList.CopyTo(documents);

            DocWordTools::Concatenate(documents, resultStream);

            resultStream.Position = 0;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error while combining documents.');
            return null;
        }
        catch
        {
            DocGlobalHelper::handleError('Error while combining documents. Check input parameter types.', true, funcName());
            return null;
        }
    
        return resultStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWord2Pdf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert Word document to PDF.
    /// </summary>
    /// <param name = "_document">Word document System.IO.Stream object (MemoryStream is preffered). Position must be 0 otherwise content before position is ignored.</param>
    /// <returns>Memory stream (with Position = 0) with PDF content or null in case of error.</returns>
    /// <remarks>Position of the input stream is changed.</remarks>
    public static MemoryStream convertWord2Pdf(Stream _document)
    {
        MemoryStream resultStream = new MemoryStream();
        try
        {
            DocWordTools::Convert(_document, resultStream, DocSaveOptions::SaveAsPdf());

            resultStream.Position = 0;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error while coverting Word document to PDF.');
            return null;
        }
    
        return resultStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWord2Html</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert Word document to HTML.
    /// </summary>
    /// <param name = "_document">Word document System.IO.Stream object (MemoryStream is preffered). Position must be 0 otherwise content before position is ignored.</param>
    /// <returns>Memory stream (with Position = 0) with HTML content or null in case of error.</returns>
    /// <remarks>Position of the input stream is changed.</remarks>
    public static MemoryStream convertWord2Html(Stream _document)
    {
        MemoryStream resultStream = new MemoryStream();
        try
        {
            DocWordTools::Convert(_document, resultStream, DocHtmlSaveOptions::SaveAsHtml());

            resultStream.Position = 0;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error while coverting Word document to HTML.');
            return null;
        }
    
        return resultStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documents2Zip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Combine several documents in one ZIP package.
    /// </summary>
    /// <param name = "_documents">
    /// List of [documentFileName, documentStream] containers.
    /// documentFileName is the document filename (eg. A.docx) with relative path in the package.
    /// C:\Reports\A.docx will be interpreted as A.docx, while Reports\A.docx will create a Reports folder in ZIP package.
    /// documentStream is the System.IO.Stream object of the document (MemoryStream is preffered). Position must be 0 otherwise content before position is ignored.
    /// </param>
    /// <param name = "_disposeInputStreams">Whether the input streams should be disposed after use.</param>
    /// <param name = "_compressionLevel">The compression level used to compress ZIP package.</param>
    /// <param name = "_password">The password used to encrpyt and protect ZIP package. If null, ZIP package is not encrypted and protected.</param>
    /// <param name = "_encryptionAlgorithm">Encryption algorithm to be used to encrypt entry files in ZIP documents with the specified password.</param>
    /// <returns>Memory stream (with Position = 0) with the content of ZIP package or null in case of error.</returns>
    /// <remarks>Position of the input streams is changed.</remarks>
    public static MemoryStream documents2Zip(List _documents, boolean _disposeInputStreams = true,  
        DocZipCompressionLevel _compressionLevel = DocZipCompressionLevel::Best, 
        str _password = null, DocZipEncryptionAlgorithm _encryptionAlgorithm = DocZipEncryptionAlgorithm::AES256)
    {
        try
        {
            MemoryStream archiveStream = new MemoryStream();
            
            DOCSF.ZipFileEntryCollection zipFileEntryCollection = new DOCSF.ZipFileEntryCollection();

            ListEnumerator le = _documents.getEnumerator();
            while (le.moveNext())
            {
                str     documentFileName;
                Stream  documentStream;
                    
                [documentFileName, documentStream] = le.current();

                DOCSF.ZipFileEntry zipFileEntry = new DOCSF.ZipFileEntry();
                zipFileEntry.RelativeName = documentFileName;
                zipFileEntry.Content = documentStream;

                zipFileEntryCollection.Add(zipFileEntry);
            }

            // define the compression level
            DOCSF.ZipFileCompressionLevel zipCompressionLevel = DOCSF.ZipFileCompressionLevel::Best;
            switch (_compressionLevel)
            {
                case DocZipCompressionLevel::Store:
                    zipCompressionLevel = DOCSF.ZipFileCompressionLevel::Store;
                    break;
                case DocZipCompressionLevel::Fastest:
                    zipCompressionLevel = DOCSF.ZipFileCompressionLevel::Fastest;
                    break;
                case DocZipCompressionLevel::Fast:
                    zipCompressionLevel = DOCSF.ZipFileCompressionLevel::Fast;
                    break;
                case DocZipCompressionLevel::Normal:
                    zipCompressionLevel = DOCSF.ZipFileCompressionLevel::Normal;
                    break;
                case DocZipCompressionLevel::Good:
                    zipCompressionLevel = DOCSF.ZipFileCompressionLevel::Good;
                    break;
                case DocZipCompressionLevel::Best:
                    zipCompressionLevel = DOCSF.ZipFileCompressionLevel::Best;
                    break;
            }

            // define the encryption method
            DOCSF.ZipFileEncryptionMethod zipEncryptionMethod = DOCSF.ZipFileEncryptionMethod::AES256;
            switch (_encryptionAlgorithm)
            {
                case DocZipEncryptionAlgorithm::ZipCrypto:
                    zipEncryptionMethod = DOCSF.ZipFileEncryptionMethod::ZipCrypto;
                    break;
                case DocZipEncryptionAlgorithm::AES128:
                    zipEncryptionMethod = DOCSF.ZipFileEncryptionMethod::AES128;
                    break;
                case DocZipEncryptionAlgorithm::AES256:
                    zipEncryptionMethod = DOCSF.ZipFileEncryptionMethod::AES256;
                    break;
            }

            // create the ZIP package
            DOCSF.ZipFile::Create(archiveStream, zipFileEntryCollection, zipCompressionLevel, _password, zipEncryptionMethod);

            if (_disposeInputStreams)
            {
                for (int i = 0; i < zipFileEntryCollection.Count; i++)
                {
                    DOCSF.ZipFileEntry zipFileEntry = zipFileEntryCollection.GetByIndex(i);
                    Stream documentStream = zipFileEntry.Content;
                    documentStream.Dispose();
                }
            }

            archiveStream.Position = 0;
            return archiveStream;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error while zipping documents. Check the input parameter types.');
        }
        catch
        {
            DocGlobalHelper::handleError('Error while zipping documents. Check the input parameter types.', true, funcName());
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergePdfDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns merged PDF document.
    /// </summary>
    /// <param name = "_pdfDocuments">List(System.Byte[]) - List of PDF documents to merge.</param>
    /// <returns>Returns single PDF document as MemoryStream or null, if no document is provided or an error occurred.</returns>
    public static System.IO.MemoryStream mergePdfDocuments(List _pdfDocuments)
    {
        if (_pdfDocuments == null || _pdfDocuments.empty())
        {
            return null;
        }

        System.IO.MemoryStream memoryStream = null;
        try
        {
            System.Collections.ArrayList arrayList = new ArrayList();
            ListEnumerator le = _pdfDocuments.getEnumerator();
            while (le.moveNext())
            {
                arrayList.Add(le.current());
            }
            
            System.Byte[] mergedPdf = DocPdfTools::Concatenate(ArrayList);

            memoryStream = new System.IO.MemoryStream(mergedPdf);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error while merging PDF documents. Check the input parameter types.');
        }
        catch
        {
            DocGlobalHelper::handleError('Error while merging PDF documents. Check the input parameter types.', true, funcName());
        }

        return memoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWordExcel2PdfWithOfficeService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts given Word or Excel memory stream to PDF using Office 365 conversion service.
    /// A provided page orientation for the PDF is applied only for Excel documents, for
    /// Word documents is taken from the Word document itself.
    /// </summary>
    /// <param name = "_sourceDocument">A source document as memory stream</param>
    /// <param name = "_docFileFormat">A file format of a source document (only Excel and Word are supported)</param>
    /// <param name = "_throwError">Flag indicating if error should be thrown in case it arises</param>
    /// <param name = "_pageOrientation">A page orientation (applicable only for Excel)</param>
    /// <returns>Memory stream (with Position = 0) with PDF content or null in case of error.</returns>
    /// <remarks>
    /// The Office 365 conversion service is available from the 10.0.9 version. In older versions this method
    /// will always return null memory stream. 
    /// The page orientation setting is supported from the 10.0.10 version. In version 10.0.9 is used only the
    /// Portrait page orientation.
    /// </remarks>
    public static System.IO.MemoryStream convertWordExcel2PdfWithOfficeService(
        System.IO.MemoryStream _sourceDocument,
        DocFileFormat _docFileFormat,
        boolean _throwError = false,
        DocReportPrintOrientation _pageOrientation = DocReportPrintOrientation::Portrait)
    {
        const str ERPdfConversionServiceClassName = identifierStr(ERPdfConversionService);
        const str ConvertFileToPdfMethod = identifierStr(convertFileToPdf);

        str errMsg = "@DocentricAX4:WordExcel2PdfConversionWithOfficeServiceError";
        try
        {
            // Check the docuemnt file format
            if (_docFileFormat != DocFileFormat::DOCX && _docFileFormat != DocFileFormat::XLSX)
            {
                if (_throwError)
                {
                    throw error(strFmt("@DocentricAX4:WordExcel2PdfConversionWithOfficeServiceUnsupportedFileFormat", enum2Str(_docFileFormat)));
                }
                return null;
            }

            // Starting from the 10.0.10 version
            // Set papge orientation
            Object erPdfConversionSettings = null;
            DictClass erPdfConversionSettingsDictClass = new DictClass(className2Id(identifierStr(ERFormatFileDestinationPdfConversionSettings)));
            if (erPdfConversionSettingsDictClass)
            {
                int pageOrientation;
                switch (_pageOrientation)
                {
                    case DocReportPrintOrientation::Default:
                    case DocReportPrintOrientation::Portrait:
                        pageOrientation = 0;  // ERPdfConversionPageOrientaion::Portrait
                        break;
                    case DocReportPrintOrientation::Landscape:
                        pageOrientation = 2;  // ERPdfConversionPageOrientaion::Landscape
                        break;
                }

                erPdfConversionSettings = erPdfConversionSettingsDictClass.makeObject();
                if (erPdfConversionSettings != null)
                {
                    erPdfConversionSettingsDictClass.callObject(identifierStr(parmPageOrientation), erPdfConversionSettings, pageOrientation);
                }
            }

            // Set filename with provided file format
            str fileExtension = DocFileMngHelper::fileFormat2str(_docFileFormat);
            str filePath = strFmt('%1.%2', guid2Str(newGuid()), fileExtension);

            // Starting from the 10.0.9 version
            // Convert document to PDF
            DictClass erPdfConversionServiceDictClass = new DictClass(className2Id(ERPdfConversionServiceClassName));
            if (erPdfConversionServiceDictClass)
            {
                anytype conversionResult = null; 
                SysDictMethod convertFileToPdfDictMethod = new SysDictMethod(
                    UtilElementType::ClassStaticMethod, className2Id(ERPdfConversionServiceClassName), ConvertFileToPdfMethod);
                if (!convertFileToPdfDictMethod)
                {
                    return null;
                }

                // Check number of parameters for method convertFileToPdf
                if (convertFileToPdfDictMethod.parameterCnt() == 3)  // since 10.0.9
                {
                    conversionResult = erPdfConversionServiceDictClass.callStatic(
                        ConvertFileToPdfMethod, _sourceDocument, filePath);
                }
                else if (convertFileToPdfDictMethod.parameterName(2) == identifierStr('_filePath'))         // since 10.0.10
                {
                    conversionResult = erPdfConversionServiceDictClass.callStatic(
                        ConvertFileToPdfMethod, _sourceDocument, filePath, newGuid(), erPdfConversionSettings);
                }
                else if (convertFileToPdfDictMethod.parameterName(2) == identifierStr('_fileExtension'))    // since 10.0.17
                {
                    conversionResult = erPdfConversionServiceDictClass.callStatic(
                        ConvertFileToPdfMethod, _sourceDocument, fileExtension, newGuid(), erPdfConversionSettings);
                }
                else
                {
                    if (_throwError)
                    {
                        throw error(strFmt("@DocentricAX4:WordExcel2PdfConversionWithOfficeServiceConversionFailed", 
                            strFmt('Unsupported %1::%2() method signature.', ERPdfConversionServiceClassName, ConvertFileToPdfMethod)));
                    }
                }

                if (conversionResult)
                {
                    // Check if conversion was successful                
                    boolean isValidResponse = DOCFU.ReflectionHelper::GetProperty(conversionResult, identifierStr(IsValidResponse), false);
                    if (isValidResponse)
                    {
                        System.IO.MemoryStream resultStream = DOCFU.ReflectionHelper::GetProperty(conversionResult, identifierStr(ResultStream), false);
                        if (resultStream)
                        {
                            resultStream.Position = 0;
                        }
                        return resultStream;
                    }
                    else
                    {
                        if (_throwError)
                        {
                            str error = DOCFU.ReflectionHelper::GetProperty(conversionResult, identifierStr(Error), false);
                            throw error(strFmt("@DocentricAX4:WordExcel2PdfConversionWithOfficeServiceConversionFailed", error));
                        }
                    }
                }
            }
        }
        catch (Exception::CLRError)
        {
            if (_throwError)
            {
                DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrDocumentGeneration);
            }
            return null;
        }
        catch
        {
            if (_throwError)
            {
                DocGlobalHelper::handleException(funcName(), errMsg, DocConstantDiagnostics::ErrDocumentGeneration);
            }
            return null;
        }
        finally
        {
            _sourceDocument.Position = 0;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPdf2Emf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a PDF document to a collection of byte arrays, each representing an EMF (Enhanced Metafile) image.
    /// </summary>
    /// <param name = "_sourceDocument">The input stream (preferred MemoryStream) containing the PDF document to be converted.</param>
    /// <param name = "_conversionOptions">The options for the PDF to EMF image conversion process (e.g., resolution, start and end page).</param>
    /// <param name = "_throwError">Optional parameter. If set to true, the method will throw an exception if the conversion fails. If set to false, the method will suppress the exception, write error info log and return an empty list. Default value is true.</param>
    /// <returns>A list of byte arrays representing the EMF images.</returns>
    /// <remarks>
    /// This method converts each page of the PDF document to an EMF image. The resulting images are returned as a list of byte arrays.
    /// </remarks>
    public static DOCFC.DocByteArrayList convertPdf2Emf(Stream _sourceDocument, DOCDPC.DocImageConversionOptions _conversionOptions, boolean _throwError = true)
    {
        DOCFC.DocByteArrayList emfByteArrayList = new DOCFC.DocByteArrayList();
        DOCDPC.DocImageFormat imgFormat = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(_conversionOptions.ImageFormat.GetType(), enumNum(DocFileFormat), DocFileFormat::Emf);
        
        if (_conversionOptions.ImageFormat != imgFormat)
        {
            DocGlobalHelper::handleError("@DocentricAX4:Pdf2EmfConversionNotEmfFileFormat", true, funcName(), _throwError);
        }
        
        try
        {
            emfByteArrayList = DOCDPC.DocPdfToImageConverter::ConvertToImage(_sourceDocument, _conversionOptions);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), "@DocentricAX4:Pdf2EmfConversionErrorInConversion", _throwError);
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX4:Pdf2EmfConversionErrorInConversion", true, funcName(), _throwError);
        }
    
        return emfByteArrayList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>