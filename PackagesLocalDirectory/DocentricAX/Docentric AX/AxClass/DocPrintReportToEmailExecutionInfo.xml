<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintReportToEmailExecutionInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrintReportToEmailExecutionInfo implements SysPackable, IDocPdfEncryptionSettingsExecutionInfo
{
    str               senderDisplayName;
    boolean           saveToArchiveSuccess;
    RecId             printJobHeaderRecId;
    RecId             sysOutgoingEmailTableRecId;
    boolean           previewBeforePrintPrintingCanceled;
    boolean           reportDelivered;
    List              additionalEmailAttachments;  // List<AttachmentFilename (str)>
    boolean                     isPdfReportEncrypted;
    Set                         pdfEncryptionConditionSet;  // Set(Types::Enum)
    DocPdfEcryptionPassword     pdfEncryptionPassword;
    DocEncryptionAlgorithm      pdfEncryptionAlgorithm;
    
    // Not packed:
    boolean           isExecutionFailed;


    #define.currentPackVersion(7)  // Added pdfEncryptionAlgorithm
    #localmacro.currentList
        version,
        senderDisplayName,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        sysOutgoingEmailTableRecId,
        previewBeforePrintPrintingCanceled,
        reportDelivered,
        isPdfReportEncrypted,
        pdfEncryptionPassword,
        pdfEncryptionAlgorithm
    #endMacro

    #define.packVersion6(6)  // Added pdfEncryptionConditionSet
    #localmacro.packList6
        version,
        senderDisplayName,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        sysOutgoingEmailTableRecId,
        previewBeforePrintPrintingCanceled,
        reportDelivered,
        isPdfReportEncrypted,
        pdfEncryptionPassword
    #endMacro

    #define.packVersion5(5)  // Added isPdfReportEncrypted, pdfEncryptionPassword
    #localmacro.packList5
        version,
        senderDisplayName,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        sysOutgoingEmailTableRecId,
        previewBeforePrintPrintingCanceled,
        reportDelivered,
        isPdfReportEncrypted,
        pdfEncryptionPassword
    #endMacro

    #define.packVersion4(4)  // Added additionalEmailAttachments.
    #localmacro.packList4
        version,
        senderDisplayName,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        sysOutgoingEmailTableRecId,
        previewBeforePrintPrintingCanceled,
        reportDelivered
    #endMacro

    #define.packVersion3(3)
    #localmacro.packList3
        version,
        senderDisplayName,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        sysOutgoingEmailTableRecId,
        previewBeforePrintPrintingCanceled,
        reportDelivered
    #endMacro

    #define.packVersion2(2)
    #localmacro.packList2
        version,
        senderDisplayName,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        sysOutgoingEmailTableRecId
    #endMacro

    #define.packVersion1(1)
    #localmacro.packList1
        version,
        senderDisplayName,
        saveToArchiveSuccess,
        printJobHeaderRecId
    #endMacro
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container pack()
    {
        int         version = #currentPackVersion;
        container   additionalEmailAttachmentsContainer = conNull();
        container   pdfEncryptionConditionSetContainer = conNull();

        if (additionalEmailAttachments != null)
        {
            additionalEmailAttachmentsContainer = additionalEmailAttachments.pack();
        }
        if (pdfEncryptionConditionSet != null)
        {
            pdfEncryptionConditionSetContainer = pdfEncryptionConditionSet.pack();
        }
        
        return [#currentList, additionalEmailAttachmentsContainer, pdfEncryptionConditionSetContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSenderDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the sender display name.
    /// </summary>
    /// <param name = "_senderDisplayName">Sender display name</param>
    /// <returns>Sender display name</returns>
    [SysObsoleteAttribute('Use the DocPrintDestSettingsEmail.parmEmailFromDisplayName() method instead.', false, 19\08\2021)]
    public str parmSenderDisplayName(str _senderDisplayName = senderDisplayName)
    {
        senderDisplayName = _senderDisplayName;
        return senderDisplayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is delivered.
    /// </summary>
    /// <param name = "_reportDelivered">Is report delivered</param>
    /// <returns>True/False</returns>
    public boolean parmReportDelivered(boolean _reportDelivered = reportDelivered)
    {
        reportDelivered = _reportDelivered;
        return reportDelivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewBeforePrintPrintingCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report should be previewed before the printing will be canceled
    /// </summary>
    /// <param name = "_previewBeforePrintPrintingCanceled">Preview the repport before cancel the printing</param>
    /// <returns>True/False</returns>
    public boolean parmPreviewBeforePrintPrintingCanceled(boolean _previewBeforePrintPrintingCanceled = previewBeforePrintPrintingCanceled)
    {
        previewBeforePrintPrintingCanceled = _previewBeforePrintPrintingCanceled;
        return previewBeforePrintPrintingCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is successfully saved to archive.
    /// </summary>
    /// <param name = "_saveToArchiveSuccess">Is the report successfully saved to archive</param>
    /// <returns>True/False</returns>
    public boolean parmSaveToArchiveSuccess(boolean _saveToArchiveSuccess = saveToArchiveSuccess)
    {
        saveToArchiveSuccess = _saveToArchiveSuccess;
        return saveToArchiveSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArchivePrintJobHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print job header recId.
    /// </summary>
    /// <param name = "_printJobHeaderRecId">Print job header recId</param>
    /// <returns>Print job header recId</returns>
    public RecId parmArchivePrintJobHeaderRecId(RecId _printJobHeaderRecId = printJobHeaderRecId)
    {
        printJobHeaderRecId = _printJobHeaderRecId;
        return printJobHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysOutgoingEmailTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the SysOutgoingEmailTable recId.
    /// </summary>
    /// <param name = "_sysOutgoingEmailTableRecId">SysOutgoingEmailTable recId</param>
    /// <returns>SysOutgoingEmailTable recId</returns>
    public RecId parmSysOutgoingEmailTableRecId(RecId _sysOutgoingEmailTableRecId = sysOutgoingEmailTableRecId)
    {
        sysOutgoingEmailTableRecId = _sysOutgoingEmailTableRecId;
        return sysOutgoingEmailTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdditionalEmailAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the list of additional email attachments.
    /// </summary>
    /// <param name = "_additionalEmailAttachments">List of additional email attachments</param>
    /// <returns>List of additional email attachments</returns>
    public List parmAdditionalEmailAttachments(List _additionalEmailAttachments = additionalEmailAttachments)
    {
        additionalEmailAttachments = _additionalEmailAttachments;
        return additionalEmailAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAdditionalEmailAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating if the email has additional attachments.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean hasAdditionalEmailAttachments()
    {
        return additionalEmailAttachments != null && !additionalEmailAttachments.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdditionalEmailAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the list of additiona email attachments.
    /// </summary>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    public void setAdditionalEmailAttachments(DocPrintDestSettingsEmail _emailPrintDestSettings)
    {
        container additionalAttachmentContainer = _emailPrintDestSettings.parmEmailAdditionalAttachments();

        if (additionalAttachmentContainer == conNull())
        {
            return;
        }

        str additionalAttachmentName;
        List additionalAttachmentList = new List(Types::String);

        // Iterate through additional attachments.
        // [ [attachmentName, [content]], [attachmentName, [content]], ...]
        for (int counter = 1; counter <= conLen(additionalAttachmentContainer); counter++)
        {
            try
            {
                container additionalAttachment = conPeek(additionalAttachmentContainer, counter);
                additionalAttachmentName = conPeek(additionalAttachment, 1);
                if (additionalAttachmentName == '')
                {
                    throw Exception::Error;
                }
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:ParameterAdditionalAttachmentNotProvided");
            }
    
            additionalAttachmentList.addEnd(additionalAttachmentName);
        }

        if (!additionalAttachmentList.empty())
        {
            this.parmAdditionalEmailAttachments(additionalAttachmentList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPdfReportEncrypted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the PDF report is encrypted.
    /// </summary>
    /// <param name = "_isPdfReportEncrypted">Is PDF report encrypted</param>
    /// <returns>True/False</returns>
    public boolean parmIsPdfReportEncrypted(boolean _isPdfReportEncrypted = isPdfReportEncrypted)
    {
        isPdfReportEncrypted = _isPdfReportEncrypted;
        return isPdfReportEncrypted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionConditionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF encryption condition set.
    /// </summary>
    /// <param name = "_pdfEncryptionConditionSet">PDF encryption condition set</param>
    /// <returns>PDF encryption condition set</returns>
    public Set parmPdfEncryptionConditionSet(Set _pdfEncryptionConditionSet = pdfEncryptionConditionSet)
    {
        pdfEncryptionConditionSet = _pdfEncryptionConditionSet;
        if (pdfEncryptionConditionSet == null)
        {
            pdfEncryptionConditionSet = new Set(Types::Enum);
        }
        return pdfEncryptionConditionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdfEncryptionConditionSetToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the PDF encryption condition set to string.
    /// </summary>
    /// <returns>PDF encryption condition set as string</returns>
    public str pdfEncryptionConditionSetToString()
    {
        SysDictEnum dictEnum = new SysDictEnum(enumNum(DocPdfEncryptionConditionEnum));

        str pdfEncryptionCondStr = '';
        
        SetEnumerator conditionSetEnumerator = this.parmPdfEncryptionConditionSet().getEnumerator();
        while (conditionSetEnumerator.moveNext())
        {
            str conditionSymbol = dictEnum.value2Symbol(conditionSetEnumerator.current());

            pdfEncryptionCondStr += (pdfEncryptionCondStr == '' ? '' : '; ') + conditionSymbol;
        }
        
        return pdfEncryptionCondStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF encryption password.
    /// </summary>
    /// <param name = "_pdfEncryptionPassword">PDF encryption password</param>
    /// <returns>PDF encryption password</returns>
    public DocPdfEcryptionPassword parmPdfEncryptionPassword(DocPdfEcryptionPassword _pdfEncryptionPassword = pdfEncryptionPassword)
    {
        pdfEncryptionPassword = _pdfEncryptionPassword;
        return pdfEncryptionPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF encryption algorithm.
    /// </summary>
    /// <param name = "_pdfEncryptionAlgorithm">PDF encryption algorithm</param>
    /// <returns>PDF encryption algorithm</returns>
    public DocEncryptionAlgorithm parmPdfEncryptionAlgorithm(DocEncryptionAlgorithm _pdfEncryptionAlgorithm = pdfEncryptionAlgorithm)
    {
        pdfEncryptionAlgorithm = _pdfEncryptionAlgorithm;
        return pdfEncryptionAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdfEncryptionSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the PDF encryption settings.
    /// </summary>
    /// <param name = "_isPdfReportEncrypted">Is PDF report encrypted</param>
    /// <param name = "_pdfEncryptionCondition">PDF encryption condition set</param>
    /// <param name = "_pdfEncryptionPassword">PDF encryption password</param>
    /// <param name = "_pdfEncryptionAlgorithm">PDF encryption algorithm</param>
    public void setPdfEncryptionSettings(
        boolean _isPdfReportEncrypted, 
        DocPdfEncryptionConditionEnum _pdfEncryptionCondition,
        DocPdfEcryptionPassword _pdfEncryptionPassword,
        DocEncryptionAlgorithm _pdfEncryptionAlgorithm = DocEncryptionAlgorithm::Encryption_AES_128bit)
    {
        isPdfReportEncrypted = isPdfReportEncrypted || _isPdfReportEncrypted;
        if (_isPdfReportEncrypted)
        {
            this.parmPdfEncryptionConditionSet().add(_pdfEncryptionCondition);
        }
        pdfEncryptionPassword = _pdfEncryptionPassword;
        pdfEncryptionAlgorithm = _pdfEncryptionAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean      ret = false;
        int          version;
        container    additionalEmailAttachmentsContainer = conNull();
        container    pdfEncryptionConditionSetContainer = conNull();
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);

            if (version == #currentPackVersion)
            {
                [#currentList, additionalEmailAttachmentsContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion6)
            {
                [#packList6, additionalEmailAttachmentsContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion5)
            {
                [#packList5, additionalEmailAttachmentsContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion4)
            {
                [#packList4, additionalEmailAttachmentsContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion3)
            {
                [#packList3] = _pack;
                ret = true;
            }
            else if (version == #packVersion2)
            {
                [#packList2] = _pack;
                ret = true;
            }
            else if (version == #packVersion1)
            {
                [#packList1] = _pack;
                ret = true;
            }

            if (additionalEmailAttachmentsContainer != conNull())
            {
                additionalEmailAttachments = List::create(additionalEmailAttachmentsContainer);
            }
            else
            {
                additionalEmailAttachments = null;
            }
            
            if (pdfEncryptionConditionSetContainer != conNull())
            {
                pdfEncryptionConditionSet = Set::create(pdfEncryptionConditionSetContainer);
            }
            else
            {
                pdfEncryptionConditionSet = null;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsFailedExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark execution as failed.
    /// </summary>
    /// <returns>This object</returns>
    public DocPrintReportToEmailExecutionInfo markAsFailedExecution()
    {
        isExecutionFailed = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExecutionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the info whether the execution failed.
    /// </summary>
    /// <returns>True, if the execution failed</returns>
    public boolean isExecutionFailed()
    {
        return isExecutionFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExecutionSuccessful</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the info whether the execution succeeded.
    /// </summary>
    /// <returns>True, if the execution succeeded</returns>
    public boolean isExecutionSuccessful()
    {
        return !isExecutionFailed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>