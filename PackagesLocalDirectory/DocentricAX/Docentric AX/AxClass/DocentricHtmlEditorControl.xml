<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocentricHtmlEditorControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
[FormControlAttribute('DocentricHtmlEditorHTM', 'resources/html/DocentricHtmlEditorContainerHTM', classstr(DocentricHtmlEditorBuild))]
public class DocentricHtmlEditorControl extends FormTemplateControl
{
    private FormProperty sourceStringProperty;
    private FormProperty placeholdersProperty;
    private FormProperty emailTemplatesProperty;
    private FormProperty usedForEmailTemplatesProperty;
    private FormProperty refreshControlProperty;
    private FormProperty allowEditProperty;
    private FormProperty allowMaximizeProperty;
    private FormProperty allowPlaceholdersProperty;
    private FormProperty allowEmailTemplatesProperty;
    private FormProperty editorIdProperty;
    private FormProperty editorCaptionProperty;
    private FormProperty setSourceStringServerProperty;

    private Map overriddenMethodsMap = new Map(Types::String, Types::AnyType);  // The list of registered overriden methods
    private const str ObjectMethodToCall = 'objectMethodToCall';
    private const str OverrideObject = 'overrideObject';
    private Struct objectMethodToCallStruct; // Contain information about registered overriden method

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new control instannce.
    /// </summary>
    /// <param name = "_build">A FormBuildControl object</param>
    /// <param name = "_formRun">A FormRun object</param>
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build,_formRun);

        this.setTemplateId('DocentricHtmlEditorHTM');
        this.setResourceBundleName('resources/html/DocentricHtmlEditorContainerHTM');

        sourceStringProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmSourceStringInternal), Types::String);
        placeholdersProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmPlaceholders), Types::String);
        emailTemplatesProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmEmailTemplates), Types::String);
        usedForEmailTemplatesProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmUsedForEmailTemplates), Types::Enum);
        refreshControlProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmRefreshControl), Types::Enum);
        allowEditProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, allowEdit), Types::Enum);
        allowMaximizeProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmAllowMaximize), Types::Enum);
        allowPlaceholdersProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmAllowPlaceholders), Types::Enum);
        allowEmailTemplatesProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmAllowEmailTemplates), Types::Enum);
        editorIdProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmEditorId), Types::String);
        editorCaptionProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, parmEditorCaption), Types::String);
        setSourceStringServerProperty = this.addProperty(methodStr(DocentricHtmlEditorControl, setSourceStringServer), Types::String);

        // Generate unique editor id. It consists of the name of the control and unique GUID.
        editorIdProperty.setValueOrBinding(strFmt('%1_%2', this.name(), strReplace(guid2StrWithoutBraces(newGuid()), '-', '')));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the control.
    /// </summary>
    public void applyBuild()
    {
        super();
 
        DocentricHtmlEditorBuild build = this.build();
        if (build)
        {
            this.setSourceString(build.parmSourceString());
            this.parmPlaceholders(build.parmPlaceholders());
            this.parmEmailTemplates(build.parmEmailTemplates());
            this.parmUsedForEmailTemplates(build.parmUsedForEmailTemplates());
            this.allowEdit(build.allowEdit());
            this.parmAllowMaximize(build.parmAllowMaximize());
            this.parmAllowPlaceholders(build.parmAllowPlaceholders());
            this.parmAllowEmailTemplates(build.parmAllowEmailTemplates());
            this.parmEditorCaption(build.parmEditorCaption());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the editor. 
    /// This must be called if the instance of the editor is corrupted.
    /// </summary>
    public void refresh()
    {
        this.parmRefreshControl(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email template body for the specified email template id.
    /// This method should be implemented when the list of email templates is defined.
    /// </summary>
    /// <param name = "_emailTemplateId">Email template id</param>
    /// <param name = "_languageId">Language id</param>
    /// <returns>Email template body</returns>
    public str getEmailTemplateBody(str _emailTemplateId = '', str _languageId = '')
    {
        // Check if this method is overriden
        if (overriddenMethodsMap.exists(methodStr(DocentricHtmlEditorControl, GetEmailTemplateBody)))
        {
            objectMethodToCallStruct = overriddenMethodsMap.lookup(methodStr(DocentricHtmlEditorControl, GetEmailTemplateBody));
            object objInstance = objectMethodToCallStruct.value(DocentricHtmlEditorControl::OverrideObject);
            str methodToCall = objectMethodToCallStruct.value(DocentricHtmlEditorControl::ObjectMethodToCall);

            // Call the overridden method through reflection
            DictClass dictClass = new DictClass(classIdGet(objInstance));
            return dictClass.callObject(methodToCall, objInstance, this, _emailTemplateId, _languageId);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverrideMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the overridden methods.
    /// </summary>
    /// <param name = "_methodToOverride">Name of the method to override</param>
    /// <param name = "_objectMethodToCall">Name of the method to invoke</param>
    /// <param name = "_overrideObject">Object of class containing the invoking method</param>
    public void registerOverrideMethod(str _methodToOverride, str _objectMethodToCall, object _overrideObject = this)
    {
        // Check if the overridden method is already registered
        if (!overriddenMethodsMap.exists(_methodToOverride))
        {
            // Register the overridden method
            objectMethodToCallStruct = new Struct(Types::String, DocentricHtmlEditorControl::ObjectMethodToCall, Types::AnyType, DocentricHtmlEditorControl::OverrideObject);
            objectMethodToCallStruct.value(DocentricHtmlEditorControl::ObjectMethodToCall, _objectMethodToCall);
            objectMethodToCallStruct.value(DocentricHtmlEditorControl::OverrideObject, _overrideObject);
            overriddenMethodsMap.insert(_methodToOverride, objectMethodToCallStruct);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditorCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the caption of the editor when it is maximized.
    /// </summary>
    /// <param name = "_value">Editor caption</param>
    /// <returns>Editor caption</returns>
    public str parmEditorCaption(str _value = editorCaptionProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            editorCaptionProperty.setValueOrBinding(_value);
        }
        return editorCaptionProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximizeEditor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the editor in maximized mode. It is opened in D365FO dialog form to support D365FO behavior.
    /// The default behavior of Maximaize button in the editor is overriden with a call of this method.
    /// </summary>
    private void maximizeEditor()
    {
        Args args = new Args(formStr(DocentricHtmlEditorMaximized));
        args.caller(this);

        FormRun formRun = ClassFactory.formRunClass(args);
        formRun.init();

        // Set form caption
        if (this.parmEditorCaption())
        {
            formRun.design().caption(this.parmEditorCaption());
        }

        // Set the visibility of buttons in command button group
        FormCommandButtonControl okButton = formRun.design().controlName(identifierStr(OkButton)) as FormCommandButtonControl;
        FormCommandButtonControl cancelButton = formRun.design().controlName(identifierStr(CancelButton)) as FormCommandButtonControl;
        FormCommandButtonControl closeButton = formRun.design().controlName(identifierStr(CloseButton)) as FormCommandButtonControl;
        okButton.visible(this.allowEdit() && this.enabled());
        cancelButton.visible(this.allowEdit() && this.enabled());
        closeButton.visible(!(this.allowEdit() && this.enabled()));

        // Initialize the HTML editor control with the properties of the caller control
        DocentricHtmlEditorControl htmlEditorControl = formRun.design().controlName(identifierStr(BodyHtmlEditor)) as DocentricHtmlEditorControl;
        htmlEditorControl.setSourceString(this.getSourceString());
        htmlEditorControl.allowEdit(this.allowEdit());
        htmlEditorControl.enabled(this.enabled());
        htmlEditorControl.parmPlaceholders(this.parmPlaceholders());
        htmlEditorControl.parmAllowPlaceholders(this.parmAllowPlaceholders());
        htmlEditorControl.parmEmailTemplates(this.parmEmailTemplates());
        htmlEditorControl.parmAllowEmailTemplates(this.parmAllowEmailTemplates());
        htmlEditorControl.parmUsedForEmailTemplates(this.parmUsedForEmailTemplates());

        MapEnumerator overriddenMethodsMapEnum = overriddenMethodsMap.getEnumerator();
        while (overriddenMethodsMapEnum.moveNext())
        {
            htmlEditorControl.registerOverrideMethod(
                overriddenMethodsMapEnum.currentKey(),
                overriddenMethodsMapEnum.currentValue().value(DocentricHtmlEditorControl::ObjectMethodToCall),
                overriddenMethodsMapEnum.currentValue().value(DocentricHtmlEditorControl::OverrideObject));
        }
        
        formRun.run();
        formRun.wait();
        if (formRun.closedOk())
        {
            this.setSourceString(htmlEditorControl.getSourceString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editor's data.
    /// </summary>
    /// <param name = "_value">A content string</param>
    public void setSourceString(str _value = '')
    {
        this.setSourceStringServer(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the editor's data.
    /// </summary>
    /// <returns>A content string</returns>
    public str getSourceString()
    {
        return this.parmSourceStringInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceStringServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the editor's data from server side and updates the SourceString property.
    /// </summary>
    /// <param name = "_value">A content string</param>
    /// <returns>A content string</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'SetSourceStringServer', true)]
    private str setSourceStringServer(str _value = setSourceStringServerProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            setSourceStringServerProperty.setValueOrBinding(_value);
            this.parmSourceStringInternal(_value);
        }
        return setSourceStringServerProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceStringInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the editor's data.
    /// </summary>
    /// <param name = "_value">A content string</param>
    /// <returns>A content string</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'SourceString', true)]
    private str parmSourceStringInternal(str _value = sourceStringProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            sourceStringProperty.setValueOrBinding(_value);
        }
        return sourceStringProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the list of palceholders available in the editor.
    /// </summary>
    /// <param name = "_value">A list of placeholders</param>
    /// <returns>A list of placeholders</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'Placeholders', true)]
    public str parmPlaceholders(str _value = placeholdersProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            placeholdersProperty.setValueOrBinding(_value);
        }
        return placeholdersProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the list of email templates available in the editor.
    /// </summary>
    /// <param name = "_value">A list of email templates</param>
    /// <returns>A list of email templates</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'EmailTemplates', true)]
    public str parmEmailTemplates(str _value = emailTemplatesProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            emailTemplatesProperty.setValueOrBinding(_value);
        }
        return emailTemplatesProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsedForEmailTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether placeholders are used for email templates.
    /// </summary>
    /// <param name = "_value">Are placeholders used for email templates</param>
    /// <returns>True/False</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'UsedForEmailTemplates', true)]
    public boolean parmUsedForEmailTemplates(boolean _value = usedForEmailTemplatesProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            usedForEmailTemplatesProperty.setValueOrBinding(_value);
        }
        return usedForEmailTemplatesProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefreshControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the editor should be refreshed.
    /// </summary>
    /// <param name = "_value">Should the editor be refreshed</param>
    /// <returns>True/False</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'RefreshControl', true)]
    private boolean parmRefreshControl(boolean _value = refreshControlProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            refreshControlProperty.setValueOrBinding(_value);
        }
        return refreshControlProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the editor can be editable.
    /// </summary>
    /// <param name = "_value">Allow the editor be editable</param>
    /// <returns>True/False</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'AllowEdit', true)]
    public boolean allowEdit(boolean _value = allowEditProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            allowEditProperty.setValueOrBinding(_value);
        }
        return allowEditProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowMaximize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the editor can be maximized.
    /// </summary>
    /// <param name = "_value">Allow the editor to be maximized</param>
    /// <returns>True/False</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'AllowMaximize', true)]
    public boolean parmAllowMaximize(boolean _value = allowMaximizeProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            allowMaximizeProperty.setValueOrBinding(_value);
        }
        return allowMaximizeProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the use of placeholders is allowed in the editor.
    /// </summary>
    /// <param name = "_value">Allow placeholders in the editor</param>
    /// <returns>True/False</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'AllowPlaceholders', true)]
    public boolean parmAllowPlaceholders(boolean _value = allowPlaceholdersProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            allowPlaceholdersProperty.setValueOrBinding(_value);
        }
        return allowPlaceholdersProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowEmailTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the use of email templates is allowed in the editor.
    /// </summary>
    /// <param name = "_value">Allow email templates in the editor</param>
    /// <returns>True/False</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'AllowEmailTemplates', true)]
    public boolean parmAllowEmailTemplates(boolean _value = allowEmailTemplatesProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            allowEmailTemplatesProperty.setValueOrBinding(_value);
        }
        return allowEmailTemplatesProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the unique editor instance id.
    /// </summary>
    /// <param name = "_value">The unique editor instance id</param>
    /// <returns>The unique editor instance id</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'EditorId', true)]
    private str parmEditorId(str _value = editorIdProperty.parmValue())
    {
        if (!prmIsDefault(_value))
        {
            editorIdProperty.setValueOrBinding(_value);
        }
        return editorIdProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceStringClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the SourceString property with the editor's data from client side.
    /// </summary>
    /// <param name = "_value">An editor data</param>
    [FormCommandAttribute('SetSourceStringClient')]
    private void setSourceStringClient(str _value = '')
    {
        this.parmSourceStringInternal(_value);
        setSourceStringServerProperty.setValueOrBinding(sourceStringProperty.parmValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRefreshControlExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the RefreshControl property to false.
    /// </summary>
    [FormCommandAttribute('ResetRefreshControl')]
    private void resetRefreshControlExternal()
    {
        refreshControlProperty.setValueOrBinding(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateBodyExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email template body for the specified email template id.
    /// </summary>
    /// <param name = "_emailTemplateId">Email template id</param>
    /// <param name = "_languageId">Language id</param>
    /// <returns>Email template body</returns>
    [FormCommandAttribute('GetEmailTemplateBody')]
    private str getEmailTemplateBodyExternal(str _emailTemplateId = '', str _languageId = '')
    {
        return this.getEmailTemplateBody(_emailTemplateId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximizeEditorExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the editor in maximized mode. It is opened in D365FO dialog form to support D365FO behavior.
    /// The default behavior of Maximaize button in the editor is overriden with a call of this method.
    /// </summary>
    [FormCommandAttribute('MaximizeEditor')]
    private void maximizeEditorExternal()
    {
        this.maximizeEditor();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>