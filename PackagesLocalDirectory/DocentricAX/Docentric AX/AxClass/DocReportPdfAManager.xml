<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportPdfAManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;
using DPDFA = Docentric.AX.Documents.Pdf.PdfAConversion;

/// <summary>
/// The DocReportPdfAManager class is a manager for converting PDFs to PDF/A format for long-term archiving.
/// </summary>
public class DocReportPdfAManager extends DocPdfAManager
{
    private DocPrintReportSettings printReportSettings;
    protected DocPrintJobHeader docPrintJobHeader;
    private boolean convertReportContent;
    private container sourceDocumentContainer = conNull();  // Used to store the original report content for caching

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isReportArchived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the converted report is archived, i.e. stored in Print archive.
    /// </summary>
    /// <returns>True, if the report is archived</returns>
    private boolean isReportArchived()
    {
        return docPrintJobHeader != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintReportSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the DocPrintReportSettings object.
    /// </summary>
    /// <param name = "_printReportSettings">A DocPrintReportSettings object</param>
    private void setPrintReportSettings(DocPrintReportSettings _printReportSettings)
    {
        printReportSettings = _printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the DocPrintJobHeader record.
    /// The record is set when the class is called from print archive.
    /// </summary>
    /// <param name = "_docPrintJobHeader">A DocPrintJobHeader record</param>
    private void setDocPrintJobHeader(DocPrintJobHeader _docPrintJobHeader)
    {
        docPrintJobHeader = _docPrintJobHeader;

        if (docPrintJobHeader)
        {
            // Gets the packed DocPrintReportSettings object from the DocPrintJobHeader record.
            container printArchivePacked = docPrintJobHeader.PrintArchiveInfoPacked;
            DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
            printArchiveInfo.unpackFromDb(printArchivePacked);

            printReportSettings = printArchiveInfo.parmPrintReportSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document content as container.
    /// </summary>
    /// <returns>Source document content as container</returns>
    private container getSourceDocumentContainer()
    {
        // Check if the original report content is already cached.
        if (sourceDocumentContainer == conNull())
        {
            // Check if the class is called from Print archive.
            if (this.isReportArchived())
            {
                sourceDocumentContainer = docPrintJobHeader.getReportPrintedWithDocentricInOriginalFormat().parmContent();
            }
            else
            {
                sourceDocumentContainer = printReportSettings.parmPrintedReport().getReportContentContainer();
            }
        }
        return sourceDocumentContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document content as memory stream.
    /// </summary>
    /// <returns>Source document content as memory stream</returns>
    private System.IO.MemoryStream getSourceDocumentMemoryStream()
    {
        return DocGlobalHelper::convertContainerToMemoryStream(this.getSourceDocumentContainer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocReportPdfAManager class.
    /// </summary>
    /// <param name = "_printReportSettings">A DocPrintReportSettings object</param>
    /// <returns>An instance of DocReportPdfAManager class</returns>
    public static DocReportPdfAManager construct(DocPrintReportSettings _printReportSettings)
    {
        DocReportPdfAManager docReportPdfAManager = new DocReportPdfAManager();

        docReportPdfAManager.setPrintReportSettings(_printReportSettings);

        return docReportPdfAManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocReportPdfAManager class.
    /// This contructor needs to be called from print archive becasue the information about
    /// the printed reports is saved in the DocPrintJobHeader table.
    /// </summary>
    /// <param name = "_docPrintJobHeader">A DocPrintJobHeader record</param>
    /// <returns>An instance of DocReportPdfAManager class</returns>
    public static DocReportPdfAManager constructWithPrintJobHeader(DocPrintJobHeader _docPrintJobHeader)
    {
        DocReportPdfAManager docReportPdfAManager = new DocReportPdfAManager();

        docReportPdfAManager.setDocPrintJobHeader(_docPrintJobHeader);

        return docReportPdfAManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the conversion of the source document to PDF/A can be done.
    /// The conversion can be done when:
    /// - the source document is PDF
    /// - the PDF/A conformance level is set
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canConvert()
    {
        return (this.isPdfOutputFileFormat()
                    && printReportSettings.parmPdfAConformanceLevel() != DocPdfAConformanceLevel::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the source document file format is PDF.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isPdfOutputFileFormat()
    {
        if (isPdfOutputFormat == UnknownNoYes::Unknown)
        {
            // Check if the class is called from Print archive.
            if (this.isReportArchived())
            {
                using (System.IO.MemoryStream reportContent = this.getSourceDocumentMemoryStream())
                {
                    DocFileType fileType = DocFileDetection::GetKnownFileType(reportContent);
                    isPdfOutputFormat = fileType == DocFileType::Pdf ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
            }
            else
            {
                isPdfOutputFormat = printReportSettings.isPrintedReportProvidedAsPdf() ? UnknownNoYes::Yes : UnknownNoYes::No;
            }
        }

        return isPdfOutputFormat == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target document as container.
    /// </summary>
    /// <returns>Target document as container</returns>
    /// <remarks>
    /// The returned target document is:
    /// - PDF/A complient, if canConvert is true
    /// - unchanged, if canConvert is false
    /// </remarks>
    public container getDocumentContainer()
    {
        return DocGlobalHelper::convertMemoryStreamToContainer(this.getTargetDocument());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file type.
    /// </summary>
    /// <returns>File type</returns>
    public str getFileType()
    {
        if (this.isReportArchived())
        {
            return DocuRef::findRecId(docPrintJobHeader.getReportPrintedWithDocentricInOriginalFormat().parmDocuRefRecId()).fileType();
        }
        return printReportSettings.parmPrintedReport().getOutputFileFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the generated PDF report content provided by print report settings to PDF/A.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <returns>Document content as container</returns>
    /// <remarks>
    /// The returned document content is:
    /// - PDF/A complient, if canConvert is true
    /// - unchanged, if canConvert is false
    /// </remarks>
    public static container convertDocument(DocPrintReportSettings _printReportSettings)
    {
        if (_printReportSettings == null || !_printReportSettings.isPrintedReportProvided())
        {
            DocGlobalHelper::handleException(funcName(), 'Document cannot be converted to PDF/A due to invalid parameters: _printReportSettings is null or does not contain the printed document');
        }

        DocReportPdfAManager docReportPdfAManager = DocReportPdfAManager::construct(_printReportSettings);
        container convertedDocumentContainer = docReportPdfAManager.getDocumentContainer();
        _printReportSettings.parmPrintedReport().setReportContentContainer(convertedDocumentContainer);
        return convertedDocumentContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDocumentFromPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the generated PDF report content provided by DocPrintJobHeader record to PDF/A.
    /// This method needs to be called from print archive becasue the information about
    /// the printed reports is saved in the DocPrintJobHeader table.
    /// </summary>
    /// <param name = "_printJobHeader">A DocPrintJobHeader record</param>
    /// <returns>Document content as container</returns>
    /// <remarks>
    /// The returned document content is:
    /// - PDF/A complient, if canConvert is true
    /// - unchanged, if canConvert is false
    /// </remarks>
    public static container convertDocumentFromPrintJobHeader(DocPrintJobHeader _printJobHeader)
    {
        if (_printJobHeader == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Document cannot be converted to PDF/A due to invalid parameters: _printJobHeader is null');
        }

        DocReportPdfAManager docReportPdfAManager = DocReportPdfAManager::constructWithPrintJobHeader(_printJobHeader);
        return docReportPdfAManager.getDocumentContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target document as memory stream.
    /// </summary>
    /// <returns>Target document as memory stream</returns>
    /// <remarks>
    /// The returned target document is:
    /// - PDF/A complient, if canConvert is true
    /// - unchanged, if canConvert is false
    /// </remarks>
    public System.IO.MemoryStream getTargetDocument()
    {
        // Set PDF source document as memory stream
        this.setSourceDocument(this.getSourceDocumentMemoryStream());
        // Set PDF/A conformance level
        this.setPdfAConformanceLevel(printReportSettings.parmPdfAConformanceLevel());

        // Get target document
        System.IO.MemoryStream targetDocument = super();

        // Reset the cached report content container to null. This needs to be done because the the original report content
        // can be changed before the next call of the method getDocumentMemoryStream.
        sourceDocumentContainer = conNull();

        return targetDocument;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>