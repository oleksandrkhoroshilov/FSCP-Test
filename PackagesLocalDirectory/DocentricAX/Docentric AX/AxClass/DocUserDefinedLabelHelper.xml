<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocUserDefinedLabelHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocUserDefinedLabelHelper class is a helper class for user-defined labels.
/// </summary>
public class DocUserDefinedLabelHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolveUserDefinedLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns label translation for the given label ID in the given language, if found.
    /// Otherwise returns an empty string.
    /// </summary>
    /// <param name = "_globalLabelId">Label ID, e.g. @DGL_LABEL:ProjectValue</param>
    /// <param name = "_languageId">Language ID</param>
    /// <param name = "_checkCircularDependency">Flag to indicate if we need to run circular dependency check before resolving User-defined label</param>
    /// <returns>Translated label if found, otherwise empty string</returns>
    public static LabelType resolveUserDefinedLabel(LabelType _globalLabelId, LanguageId _languageId = currentUserLanguage(), boolean _checkCircularDependency = true)
    {
        str labelTranslation = '';

        // Check if this is user-defined label. We recognize it by the '@DOC_LABEL:' prefix.
        if (DocUserDefinedLabelHelper::isUserDefinedLabelId(_globalLabelId))
        {
            DocLabelTable globalLabelTable;
            DocLabelTranslation globalLabelTranslation;

            select firstonly RecId, LabelId, UseFallbackTranslation, FallbackTranslation
                from globalLabelTable
                    where globalLabelTable.GlobalLabelId == _globalLabelId
                outer join Translation 
                    from globalLabelTranslation
                        where globalLabelTranslation.GlobalLabelId == globalLabelTable.GlobalLabelId
                           && globalLabelTranslation.LanguageId == _languageId;
            if (globalLabelTable.RecId)
            {
                // Global label ID exists.
                if (globalLabelTranslation.Translation)
                {
                    // If translation for the given language exists, return it.
                    labelTranslation = globalLabelTranslation.Translation;
                }
                // Translation for the given language does not exist. Check if the fallback to the parent language is enabled and if the parent language exists.
                else if (!DocSystemSetting::isDisabledParentLangFallbackForUDLabels() && DocGlobalHelper::getCultureInfo(_languageId).Parent != null)
                {
                    // The 'en' language does not exist in the D365FO so we will use 'en-US' instead, like system labels.
                    str parentLanguageId = DocGlobalHelper::getCultureInfo(_languageId).Parent.Name;
                    parentLanguageId = parentLanguageId == 'en' ? 'en-US' : parentLanguageId;

                    // If translation for the parent language exists, return it.
                    labelTranslation = DocLabelTranslation::findByLabelAndLanguage(_globalLabelId, parentLanguageId).Translation;
                }

                // If translation was not resolved and the UseFallbackTranslation flag is turned on, use the fallback translation.
                if (!labelTranslation && globalLabelTable.UseFallbackTranslation && globalLabelTable.FallbackTranslation != '')
                {
                    // Translation for the given language doesn't exist, but it is marked
                    // on the label that we should use the fallback translation, and 
                    // the fallback translation is provided.
                    if (DocLabelHelper::isLabelId(globalLabelTable.FallbackTranslation))
                    {
                        // When a label ID (system or Docentric user-defined) is used as a fallback translation,
                        // it might happen that a label translation in a given language is resolved again as a label ID.
                        // In that case, we continue recursively resolving a label translation, until we get
                        // a translation that doesn't represent some label ID.
                        if (DocUserDefinedLabelHelper::isUserDefinedLabelId(globalLabelTable.FallbackTranslation))
                        {
                            // Check if circular dependency will occur for the User-defined label (_globalLabelId)
                            if (_checkCircularDependency)
                            {
                                if (!DocUserDefinedLabelHelper::checkUserDefinedLabelsCircularDependency(_globalLabelId, globalLabelTable.FallbackTranslation))
                                {
                                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:UserDefinedLabelCircularDependencyErrorMsg", _globalLabelId));
                                }
                            }

                            labelTranslation = DocUserDefinedLabelHelper::resolveUserDefinedLabel(globalLabelTable.FallbackTranslation, _languageId, false);
                        }
                        else
                        {
                            // Fallback translation is system label or Docentric user-defined label.
                            // Use its transaltion in a given _languageId.
                            labelTranslation = DocLabelHelper::resolveSysLabel(globalLabelTable.FallbackTranslation, _languageId);
                        }
                    }
                    else
                    {
                        // Fallback translation is a plain text. Use it.
                        labelTranslation = globalLabelTable.FallbackTranslation;
                    }
                }
            }
        }
        
        return labelTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeGlobalLabelIdPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes global label prefix from the specified global label Id.
    /// </summary>
    /// <param name = "_globalLabelId">Global label Id</param>
    /// <returns>Label Id without global label prefix</returns>
    public static DocReportLabelId removeGlobalLabelIdPrefix(DocReportLabelId _globalLabelId)
    {
        DocReportLabelId labelId;

        if (DocUserDefinedLabelHelper::isUserDefinedLabelId(_globalLabelId))
        {
            labelId = subStr(_globalLabelId, strLen(DocConstantDSP::DOC_LABEL_PREFIX) + 1,
                        strLen(_globalLabelId) - strLen(DocConstantDSP::DOC_LABEL_PREFIX));
        }

        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveUserDefinedLabelDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Label Description (comment) for the given label ID in the given language, if found.
    /// Otherwise returns an empty string.
    /// </summary>
    /// <param name = "_globalLabelId">Label ID, e.g. @DGL_LABEL:ProjectValue</param>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Label Description if found, otherwise empty string</returns>
    public static LabelType resolveUserDefinedLabelDescription(DocReportLabelId _globalLabelId, LanguageIdAll _languageId = currentUserLanguage())
    {
        return DocLabelTable::findByLabelId(_globalLabelId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserDefinedLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the given label ID starts with '@DGL_LABEL:'
    /// </summary>
    /// <param name = "_potentialLabelId">User-defined Label ID candidate</param>
    /// <returns>True if the provided ID is a valid user-defined Label ID</returns>
    public static boolean isUserDefinedLabelId(str _potentialLabelId)
    {
        // e.g. '@DGL_LABEL:ProjectValue'
        return DocLabelHelper::getLabelIdPrefix_GER_DGL_CFL(_potentialLabelId) == DocConstantDSP::DOC_LABEL_PREFIX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if at least one label with the provide Label ID found in Docentric Global labels, for any language.
    /// </summary>
    /// <param name = "_potentialLabelId">Label ID</param>
    /// <returns>True if such label is found regardless of the language, otherwise false</returns>
    public static boolean existsLabelId(str _potentialLabelId)
    {
        // e.g. '@DGL_LABEL:ProjectValue'
        if (!DocUserDefinedLabelHelper::isUserDefinedLabelId(_potentialLabelId))
        {
            return false;
        }

        return DocLabelTable::findByLabelId(_potentialLabelId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLabelFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the format of User-defined label ID. 
    /// We are using the same rule as the standard uses for the system labels:
    /// Only the capital and small letters and numbers are allowed, but 
    /// the first character can't be number.
    /// </summary>
    /// <param name = "_userDefinedLabelId">User-defined label ID to be validated</param>
    /// <returns>container [boolean result of the validation, string error message if the validation result is false]</returns>
    public static container validateLabelFormat(str _userDefinedLabelId)
    {
        boolean ret = true;
        str errorMsg = '';

        str checkPattern = '^[A-Za-z][A-Za-z0-9]*$';
        System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(checkPattern);

        if (!regex.IsMatch(_userDefinedLabelId))
        {
            ret = false;
            errorMsg = strFmt("@DocentricAX3:LabelIncorrectlyFormatted", _userDefinedLabelId);
        }

        return [ret, errorMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUserDefinedLabelsCircularDependency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided Fallback translation for the User-defined label would result in a circular dependency.
    /// For example, if label A depends on label B (has label B as fallback translation) and label B depends on label A, 
    /// there is a circular dependency and we must prevent that such dependency happens.
    /// </summary>
    /// <param name = "_userDefinedLabel">User-defined label Id for which the dependency is checked.</param>
    /// <param name = "_fallbackTranslation">Fallback translation against which we check for the dependency.
    /// It is always the FallbackTranslation field of the provided _userDefinedLabel, so it would be enough
    /// to provide only the first parameter, but then we would need to find() the user-defined label. Because
    /// we have both values on the caller side, we decided to provide both values as parameters.</param>
    /// <returns>boolean true if no circular dependency exists, otherwise checkFailed() with the description.</returns>
    public static boolean checkUserDefinedLabelsCircularDependency(LabelType _userDefinedLabel, str _fallbackTranslation)
    {
        Set processedUDLSet = new Set(Types::String);
        processedUDLSet.add(_userDefinedLabel);

        str fallbackTranslation = _fallbackTranslation;
        str lastProcessedUDL = _userDefinedLabel;

        do
        {
            if (processedUDLSet.add(fallbackTranslation))
            {
                lastProcessedUDL = fallbackTranslation;

                DocLabelTable docLabelTable = DocLabelTable::findByLabelId(fallbackTranslation);
                fallbackTranslation = docLabelTable.UseFallbackTranslation ? docLabelTable.FallbackTranslation : '';
            }
            else
            {
                return checkFailed(strFmt("@DocentricAX4:ErrorCircularDependency", _userDefinedLabel, fallbackTranslation, lastProcessedUDL));
            }
        }
        while (DocUserDefinedLabelHelper::isUserDefinedLabelId(fallbackTranslation));

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>