<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintMgmtHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class used for Print management settings. 
/// </summary>
public class DocPrintMgmtHelper
{
    private static boolean printMgmtReportFormatPopulated = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populatePrintMgmtReportFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the PrintMgmtReportFormat table for the current company.
    /// </summary>
    /// <param name = "_deleteAll">
    /// If true, the table will be repopulated from scratch and this will break
    /// all existing formats as selected on a PrintMgmtSettings record.
    /// </param>
    /// <param name = "_showConfirmation">Determines whether a confirmation of the added reports is added to the infolog</param>
    public static void populatePrintMgmtReportFormat(boolean _deleteAll = false, boolean _showConfirmation = false)
    {
        if (!printMgmtReportFormatPopulated)
        {
            PrintMgmtReportFormatPopulator printMgmtReportFormatPopulator = PrintMgmtReportFormatPopulator::construct();
            printMgmtReportFormatPopulator.populate(_deleteAll, _showConfirmation);

            printMgmtReportFormatPopulated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiDocumentOutputPrintMgmtReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the specified report is a multiple document report.
    /// </summary>
    /// <param name = "_reportId">SSRS report name</param>
    /// <returns>True if the specified report is a multiple document report; otherwise false</returns>
    public static boolean isMultiDocumentOutputPrintMgmtReport(str _reportId)
    {
        if (!DocPrintMgmtHelper::isPrintMgmtReport(_reportId))
        {
            return false;
        }

        PrintMgmtDocumentType docType = DocPrintMgmtHelper::getFirstPrintMgmtDocumentType(_reportId);

        switch (docType)
        {
            case PrintMgmtDocumentType::CustAccountStatement:
            case PrintMgmtDocumentType::CustCollectionLetter:
            case PrintMgmtDocumentType::CustInterestNote:
            case PrintMgmtDocumentType::CustPaymAdvice:
            case PrintMgmtDocumentType::VendPaymAdvice:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print management node type (module) for the specified report.
    /// </summary>
    /// <param name = "_reportId">SSRS report name</param>
    /// <returns>Print management node type</returns>
    public static PrintMgmtNodeType getPrintMgmtModule(str _reportId)
    {
        PrintMgmtReportFormat printMgmtFormat;

        select firstonly printMgmtFormat
            where printMgmtFormat.Name == _reportId;

        if (!printMgmtFormat)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Report (%1) is not a Print Management report', _reportId));
        }
        
        PrintMgmtDocInstance printMgmtDocInstance;

        select firstonly printMgmtDocInstance
            where printMgmtDocInstance.DocumentType == printMgmtFormat.DocumentType;

        if (!printMgmtDocInstance)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Report (%1) has no document configured', _reportId));
        }

        return printMgmtDocInstance.NodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintMgmtReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the specified report is a print management report.
    /// </summary>
    /// <param name = "_reportId">SSRS report name</param>
    /// <returns>True if the specified report is a print management report; otherwise false</returns>
    public static boolean isPrintMgmtReport(str _reportId)
    {
        PrintMgmtReportFormat printMgmtFormat;

        select firstonly printMgmtFormat
            where printMgmtFormat.Name == _reportId;

        return printMgmtFormat.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account role (type) for the print management document type for the specified report.
    /// </summary>
    /// <param name = "_reportId">SSRS report name</param>
    /// <returns>Account role</returns>
    public static DocAccountRole getAccountType(str _reportId)
    {
        PrintMgmtReportFormat  printMgmtFormat;

        select firstonly printMgmtFormat
            where printMgmtFormat.Name == _reportId;

        if (printMgmtFormat)
        {
            return DocPrintMgmtHelper::getAccountTypeForPrintMgmtDocumentType(printMgmtFormat.DocumentType);
        }
        else
        {
            return DocAccountRole::NA;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Print management document type for the provided SSRS report design name.
    /// </summary>
    /// <param name = "_reportId">SSRS report name</param>
    /// <returns>The first Print management document type</returns>
    /// <remarks>
    /// PurchPurchaseOrder.Report and RFQSend.Report are such reports with multiple Print management document types.
    /// Usually, there is a single Print management document type for a SSRS report design name.
    /// To get all Print management document types for a SSRS report design name, use DocPrintMgmtHelper::getPrintMgmtDocumentTypes().
    /// </remarks>
    public static PrintMgmtDocumentType getFirstPrintMgmtDocumentType(str _reportId)
    {
        PrintMgmtReportFormat printMgmtFormat;

        select firstonly printMgmtFormat
            where printMgmtFormat.Name == _reportId;

        return printMgmtFormat.DocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocumentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return a list of Print mgmt document types corresponding to a given report ID.
    /// The document type and report ID are in most cases in 1-to-1 relation, but
    /// there are few exceptions. For example, there are several RFQ-related documents,
    /// which are all linked to one (RFQSend) report.
    /// </summary>
    /// <param name = "_reportId">SSRS report name</param>
    /// <returns>List of PrintMgmtDocumentTypes (enums) which use the given SSRS report</returns>
    public static List getPrintMgmtDocumentTypes(str _reportId)
    {
        List documentTypes = new List(Types::Enum);
        PrintMgmtReportFormat printMgmtFormat;

        while select DocumentType from printMgmtFormat
            where printMgmtFormat.Name == _reportId
        {
            documentTypes.addEnd(printMgmtFormat.DocumentType);
        }

        return documentTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportCountByDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets print management report formats for the given print management document type.
    /// </summary>
    /// <param name="_documentType">Print management document type</param>
    /// <returns>Count of report formats for the given print management document type</returns>
    public static int getSrsReportCountByDocType(PrintMgmtDocumentType _documentType)
    {
        PrintMgmtReportFormat printMgmtReports;
    
        select count(RecId) from printMgmtReports
            where printMgmtReports.DocumentType == _documentType;
    
        int srsReportCount = int642int(printMgmtReports.RecId);
    
        return srsReportCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first SRS report design name for the provided PrintMgmtDocumentType.
    /// </summary>
    /// <param name = "_documentType">Print management document type</param>
    /// <returns>First SRS report design name of the provided PrintMgmtDocumentType type</returns>
    public static str getSrsReportName(PrintMgmtDocumentType _documentType)
    {
        PrintMgmtReportFormat printMgmtReports;
    
        select firstOnly RecId, Name from printMgmtReports
            where printMgmtReports.DocumentType == _documentType;
    
        return printMgmtReports.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the names of all SRS report designs for the provided PrintMgmtDocumentType as a container.
    /// </summary>
    /// <param name = "_documentType">Print management document type</param>
    /// <returns>Container containing SRS report designs names of the provided PrintMgmtDocumentType type</returns>
    public static container getSrsReportNames(PrintMgmtDocumentType _documentType)
    {
        PrintMgmtReportFormat printMgmtReports;
        container srsReportNamesContainer = conNull();

        while select RecId, Name from printMgmtReports
            where printMgmtReports.DocumentType == _documentType
        {
            srsReportNamesContainer += printMgmtReports.Name;
        }
    
        return srsReportNamesContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportNamesQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the names of all SRS report designs for the provided PrintMgmtDocumentType as comma separated string.
    /// </summary>
    /// <param name = "_documentType">Print management document type</param>
    /// <returns>Comma separated string containing SRS report designs names of the provided PrintMgmtDocumentType type. Can be used for a query range.</returns>
    public static str getSrsReportNamesQueryValues(PrintMgmtDocumentType _documentType)
    {
        PrintMgmtReportFormat printMgmtReports;
        container srsReportNamesContainer = conNull();

        while select RecId, Name from printMgmtReports
            where printMgmtReports.DocumentType == _documentType
        {
            srsReportNamesContainer += queryValue(printMgmtReports.Name);
        }
    
        return srsReportNamesContainer == conNull() ? '' : con2Str(srsReportNamesContainer, ',');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountTypeForPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account role (type) for the specified print management document type.
    /// </summary>
    /// <param name = "_docType">Print management document type</param>
    /// <returns>Account role</returns>
    public static DocAccountRole getAccountTypeForPrintMgmtDocumentType(PrintMgmtDocumentType _docType)
    {
        switch (_docType)
        {
            case PrintMgmtDocumentType::SIProjInvoice:
            case PrintMgmtDocumentType::SIProjInvoiceWithBR:
            case PrintMgmtDocumentType::SIManagedProjInvoice:
            case PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice:
            case PrintMgmtDocumentType::ProjectInvoice:
            case PrintMgmtDocumentType::SalesOrderInvoice:
            case PrintMgmtDocumentType::SalesFreeTextInvoice:
            case PrintMgmtDocumentType::InventPickList:
            case PrintMgmtDocumentType::SalesOrderPackingSlip:
            case PrintMgmtDocumentType::SalesOrderConfirmation:
            case PrintMgmtDocumentType::Confirmation:
            case PrintMgmtDocumentType::ProjectQuotation:
            case PrintMgmtDocumentType::Quotation:
            case PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU:
            case PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU:
            case PrintMgmtDocumentType::WMSBillOfLading_RU:
            case PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU:
            case PrintMgmtDocumentType::CustAccountStatement:
            case PrintMgmtDocumentType::CustCollectionLetter:
            case PrintMgmtDocumentType::CustInterestNote:
            case PrintMgmtDocumentType::SalesAgreementConfirmation:
            case PrintMgmtDocumentType::SalesAdvanceInvoice:
            case PrintMgmtDocumentType::CustPaymAdvice:
                return DocAccountRole::Customer;

            case PrintMgmtDocumentType::PurchaseOrderInvoice:
            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:
            case PrintMgmtDocumentType::PurchaseOrderRequisition:
            case PrintMgmtDocumentType::PurchRFQ:
            case PrintMgmtDocumentType::PurchRFQAccept:
            case PrintMgmtDocumentType::PurchRFQReject:
            case PrintMgmtDocumentType::PurchRFQReturn:
            case PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU:
            case PrintMgmtDocumentType::PurchAgreementConfirmation:
            case PrintMgmtDocumentType::PurchaseAdvanceInvoice:
            case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest:
            case PrintMgmtDocumentType::VendPaymAdvice:
                return DocAccountRole::Vendor;
        }

        return DocAccountRole::NA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the document is somehow linked to the
    /// sales or purchase order. It is used in the logic related to OrderEmail tokens.
    /// </summary>
    /// <param name = "_docType">Print management document type</param>
    /// <returns>True if the relation to the sales or purchase order exists; otherwise false</returns>
    public static boolean isOrderType(PrintMgmtDocumentType _docType)
    {
        switch (_docType)
        {
            // Sales
            case PrintMgmtDocumentType::SalesOrderInvoice:
            case PrintMgmtDocumentType::SalesOrderBailee:
            case PrintMgmtDocumentType::SalesOrderPackingSlip:
            case PrintMgmtDocumentType::SalesOrderConfirmation:
            case PrintMgmtDocumentType::Quotation:
            case PrintMgmtDocumentType::Confirmation:
            case PrintMgmtDocumentType::WHSSalesConfirmByLoad:
            case PrintMgmtDocumentType::WHSSalesInvoiceByLoad:

            // Purch
            case PrintMgmtDocumentType::PurchaseOrderInvoice:
            case PrintMgmtDocumentType::PurchaseOrderBailee:
            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:
            case PrintMgmtDocumentType::PurchaseOrderRequisition:
            case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the document is somehow linked to the
    /// project. It is used in the logic related to OrderEmail tokens.
    /// </summary>
    /// <param name = "_docType">Print management document type</param>
    /// <returns>True if the relation to the project exists; otherwise false</returns>
    public static boolean isProjectType(PrintMgmtDocumentType _docType)
    {
        switch (_docType)
        {
            // Project
            case PrintMgmtDocumentType::ProjectInvoice:
            case PrintMgmtDocumentType::ProjectQuotation:
            case PrintMgmtDocumentType::SIProjInvoice:
            case PrintMgmtDocumentType::SIProjInvoiceWithBR:
            case PrintMgmtDocumentType::SIManagedProjInvoice:
            case PrintMgmtDocumentType::SIManagedProjInvoiceWithBR:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuoteType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the document is somehow linked to the
    /// quotation. It is used in the logic related to QuoteEmail tokens.
    /// </summary>
    /// <param name = "_docType">Print management document type</param>
    /// <returns>True if the relation to the quotation exists; otherwise false</returns>
    public static boolean isQuoteType(PrintMgmtDocumentType _docType)
    {
        switch (_docType)
        {
            // Quote
            case PrintMgmtDocumentType::Quotation:
            case PrintMgmtDocumentType::Confirmation:
            case PrintMgmtDocumentType::ProjectQuotation:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRFQType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the document is somehow linked to the
    /// request for quotation. It is used in the logic related to OrderEmail tokens.
    /// </summary>
    /// <param name = "_docType">Print management document type</param>
    /// <returns>True if the relation to the request for quotation exists; otherwise false</returns>
    public static boolean isRFQType(PrintMgmtDocumentType _docType)
    {
        switch (_docType)
        {
            // Purch
            case PrintMgmtDocumentType::PurchRFQ:
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdForPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table that is used to define queries for the document type.
    /// Copied from PrintMgmtDelegatesHandler::getQueryTableId().
    /// </summary>
    /// <param name = "_docType">Print management document type</param>
    /// <returns>The table ID of the table this document type queries at runtime.</returns>
    public static TableId getTableIdForPrintMgmtDocumentType(PrintMgmtDocumentType _docType)
    {
        TableId tableId;

        switch (_docType)
        {
            case PrintMgmtDocumentType::PurchaseOrderInvoice:
                tableId = tableNum(VendInvoiceJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
                tableId = tableNum(VendPackingSlipJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:
                tableId = tableNum(VendReceiptsListJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderRequisition:
                tableId = tableNum(VendPurchOrderJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest:
                tableId = tableNum(PurchConfirmationRequestJour);
                break;

            case PrintMgmtDocumentType::PurchRFQ:
            case PrintMgmtDocumentType::PurchRFQAccept:
            case PrintMgmtDocumentType::PurchRFQReject:
            case PrintMgmtDocumentType::PurchRFQReturn:
                tableId = tableNum(VendRFQJour);
                break;

            case PrintMgmtDocumentType::SalesOrderInvoice:
            // <GEEHU>
            case PrintMgmtDocumentType::SalesFreeTextInvoice:
            case PrintMgmtDocumentType::TaxReimburstmentSlip_HU:
                // </GEEHU>
                tableId = tableNum(CustInvoiceJour);
                break;

            case PrintMgmtDocumentType::InventPickList:
                tableId = tableNum(WMSPickingRoute);
                break;

            case PrintMgmtDocumentType::SalesOrderPackingSlip:
                tableId = tableNum(CustPackingSlipJour);
                break;

            case PrintMgmtDocumentType::SalesOrderConfirmation:
                tableId = tableNum(CustConfirmJour);
                break;

            case PrintMgmtDocumentType::Confirmation:
                tableId = tableNum(CustQuotationConfirmJour);
                break;

            case PrintMgmtDocumentType::ProjectQuotation:
            case PrintMgmtDocumentType::Quotation:
                tableId = tableNum(CustQuotationJour);
                break;

            case PrintMgmtDocumentType::SIProjInvoice:
            case PrintMgmtDocumentType::SIProjInvoiceWithBR:
            case PrintMgmtDocumentType::SIManagedProjInvoice:
            case PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice:
            case PrintMgmtDocumentType::ProjectInvoice:
                tableId = tableNum(ProjInvoiceJour);
                break;

            // <GEERU>
            case PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU:
            case PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU:
                tableId = tableNum(CustInvoice4PaymJour_RU);
                break;

            case PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU:
                tableId = tableNum(VendInvoice4PaymJour_RU);
                break;

            case PrintMgmtDocumentType::WMSBillOfLading_RU:
            case PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU:
                tableId = tableNum(WMSBillOfLading);
                break;
            // </GEERU>

            case PrintMgmtDocumentType::CustAccountStatement:
                tableId = tableNum(CustTable);
                break;

            case PrintMgmtDocumentType::CustInterestNote:
                tableId = tableNum(CustInterestJour);
                break;

            case PrintMgmtDocumentType::CustCollectionLetter:
                tableId = tableNum(CustCollectionLetterJour);
                break;

            case PrintMgmtDocumentType::SalesAgreementConfirmation:
                tableId = tableNum(SalesAgreementHeaderHistory);
                break;

            case PrintMgmtDocumentType::PurchAgreementConfirmation:
                tableId = tableNum(PurchAgreementHeaderHistory);
                break;

            // <GBR>
            case PrintMgmtDocumentType::TaxFiscalDocument_BR:
                tableId = tableNum(TaxFiscalDocument_BR);
                break;

            case PrintMgmtDocumentType::BankCheque:
                tableId = tableNum(BankChequeTable);
                break;

            case PrintMgmtDocumentType::ComplementaryInvoice_BR:
            case PrintMgmtDocumentType::TransferOrderFiscalDoc_BR:
                tableId = tableNum(FiscalDocument_BR);
                break;

            case PrintMgmtDocumentType::ProjDebitNote_BR:
                tableId = tableNum(ProjInvoiceJour);
                break;
            // </GBR>

            // <GEERU>
            case PrintMgmtDocumentType::SalesFreeTextFacture:
            case PrintMgmtDocumentType::SalesOrderFacture:
            case PrintMgmtDocumentType::PurchaseOrderFacture:
                tableId = tableNum(FactureJour_RU);
                break;

            case PrintMgmtDocumentType::SalesOrderBailee:
                tableId = tableNum(CustInvoiceJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderBailee:
                tableId = tableNum(VendInvoiceJour);
                break;
            // </GEERU>

            // <GEEU>
            case PrintMgmtDocumentType::SalesAdvanceInvoice:
                tableId = tableNum(CzCustAdvanceInvoiceTable);
                break;

            case PrintMgmtDocumentType::PurchaseAdvanceInvoice:
                tableId = tableNum(CzVendAdvanceInvoiceTable);
                break;
            // </GEEU>

            // Add the WHS reports.
            case PrintMgmtDocumentType::WHSPickListShippingWave:
            case PrintMgmtDocumentType::WHSPickListProd:
                tableId = tableNum(WHSWaveTable);
                break;

            case PrintMgmtDocumentType::WHSPickListShippingLoad:
                tableId = tableNum(WHSLoadTable);
                break;

            case PrintMgmtDocumentType::WHSPickListShippingShipment:
                tableId = tableNum(WHSShipmentTable);
                break;

            case PrintMgmtDocumentType::WHSBOL:
                tableId = tableNum(WHSBillOfLading);
                break;

            case PrintMgmtDocumentType::WHSLoadList:
                tableId = tableNum(WHSLoadTable);
                break;

            case PrintMgmtDocumentType::WHSContainerContents:
                tableId = tableNum(WHSContainerTable);
                break;

            case PrintMgmtDocumentType::WHSSalesInvoiceByLoad:
                tableId = tableNum(CustInvoiceJour);
                break;

            case PrintMgmtDocumentType::WHSSalesConfirmByLoad:
                tableId = tableNum(CustConfirmJour);
                break;

            // Add the TMS reports.
            case PrintMgmtDocumentType::TMSCommercialInvoice:
                tableId = tableNum(WHSShipmentTable);
                break;

            case PrintMgmtDocumentType::TMSCertificateOfOrigin:
                tableId = tableNum(WHSShipmentTable);
                break;

            case PrintMgmtDocumentType::TMSRoute:
                tableId = tableNum(TMSRoute);
                break;

            case PrintMgmtDocumentType::TMSLoadTender:
                tableId = tableNum(WHSLoadTable);
                break;

            case PrintMgmtDocumentType::VendPaymAdvice:
                tableId = DocConstantFeature::isFeatureEnabled_BankPaymAdviceReportV2() ? tableNum(BankPaymAdviceVendV2Tmp) : tableNum(BankPaymAdviceVendTmp);
                break;

            case PrintMgmtDocumentType::CustPaymAdvice:
                tableId = DocConstantFeature::isFeatureEnabled_BankPaymAdviceReportV2() ? tableNum(BankPaymAdviceCustV2Tmp) : tableNum(BankPaymAdviceCustTmp);
                break;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the delivery address of the document being printed.
    /// </summary>
    /// <param name = "_documentRecord">Document record (mostly some kind of journal) being printed.</param>
    /// <returns>Document ID</returns>
    public static LogisticsPostalAddressRecId getDeliveryAddress(Common _documentRecord)
    {
        LogisticsPostalAddressRecId deliveryAddress;
        
        switch (_documentRecord.TableId)
        {
            // SalesInvoice, FreeTextInvoice, SalesOrderInvoice, SalesFreeTextInvoice,
            // SalesOrderBailee, WHSSalesInvoiceByLoad
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _documentRecord as CustInvoiceJour;
                deliveryAddress = custInvoiceJour.DeliveryPostalAddress;
                break;
                
            // VendInvoiceDocument, PurchaseOrderInvoice, PurchaseOrderBailee
            case tableNum(VendInvoiceJour):
                VendInvoiceJour vendInvoiceJour = _documentRecord as VendInvoiceJour;
                deliveryAddress = vendInvoiceJour.DeliveryPostalAddress;
                break;
                                    
            // PurchaseOrderPackingSlip
            case tableNum(VendPackingSlipJour):
                VendPackingSlipJour vendPackingSlipJour = _documentRecord as VendPackingSlipJour;
                deliveryAddress = vendPackingSlipJour.DeliveryPostalAddress;
                break;
                                    
            // PurchaseOrderReceiptsList
            case tableNum(VendReceiptsListJour):
                VendReceiptsListJour vendReceiptsListJour = _documentRecord as VendReceiptsListJour;
                deliveryAddress = vendReceiptsListJour.DeliveryPostalAddress;
                break;
                                    
            // PurchPurchaseOrder, PurchaseOrderRequisition
            case tableNum(VendPurchOrderJour):
                VendPurchOrderJour vendPurchOrderJour = _documentRecord as VendPurchOrderJour;
                deliveryAddress = vendPurchOrderJour.DeliveryPostalAddress;
                break;
                                    
            // PurchaseOrderConfirmationRequest
            case tableNum(PurchConfirmationRequestJour):
                PurchConfirmationRequestJour purchConfirmationRequestJour = _documentRecord as PurchConfirmationRequestJour;
                deliveryAddress = purchConfirmationRequestJour.DeliveryPostalAddress;
                break;
                                    
            // PurchRFQ, PurchRFQAccept, PurchRFQReject, PurchRFQReturn
            case tableNum(VendRFQJour):
                VendRFQJour vendRFQJour = _documentRecord as VendRFQJour;
                deliveryAddress = vendRFQJour.DeliveryPostalAddress;
                break;
                                    
            // InventPickList
            case tableNum(WMSPickingRoute):
                WMSPickingRoute wmsPickingRoute = _documentRecord as WMSPickingRoute;
                deliveryAddress = wmsPickingRoute.DeliveryPostalAddress;
                break;
                                    
            // SalesOrderPackingSlip
            case tableNum(CustPackingSlipJour):
                CustPackingSlipJour custPackingSlipJour = _documentRecord as CustPackingSlipJour;
                deliveryAddress = custPackingSlipJour.DeliveryPostalAddress;
                break;
                                    
            // SalesOrderConfirmation, WHSSalesConfirmByLoad
            case tableNum(CustConfirmJour):
                CustConfirmJour custConfirmJour = _documentRecord as CustConfirmJour;
                deliveryAddress = custConfirmJour.DeliveryPostalAddress;
                break;
                                    
            // Confirmation
            case tableNum(CustQuotationConfirmJour):
                CustQuotationConfirmJour custQuotationConfirmJour = _documentRecord as CustQuotationConfirmJour;
                deliveryAddress = custQuotationConfirmJour.DeliveryPostalAddress;
                break;
                                    
            // Quotation, ProjectQuotation
            case tableNum(CustQuotationJour):
                CustQuotationJour custQuotationJour = _documentRecord as CustQuotationJour;
                deliveryAddress = custQuotationJour.DeliveryPostalAddress;
                break;
                                    
            // SIProjInvoice, SIProjInvoiceWithBR, SIManagedProjInvoice,
            // ProjCustRetentionReleaseInvoice, ProjectInvoice
            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = _documentRecord as ProjInvoiceJour;
                deliveryAddress = projInvoiceJour.DeliveryPostalAddress;
                break;
                                    
            // CustInterestNote
            case tableNum(CustInterestJour):
                CustInterestJour custInterestJour = _documentRecord as CustInterestJour;
                deliveryAddress = custInterestJour.PostalAddress;
                break;
                                    
            // CustCollectionLetter
            case tableNum(CustCollectionLetterJour):
                CustCollectionLetterJour custCollectionLetterJour = _documentRecord as CustCollectionLetterJour;
                deliveryAddress = custCollectionLetterJour.PostalAddress;
                break;
                                    
            // BankCheque
            case tableNum(BankChequeTable):
                deliveryAddress = 0;
                break;
                                    
            // SalesAdvanceInvoice
            case tableNum(CzCustAdvanceInvoiceTable):
                CzCustAdvanceInvoiceTable czCustAdvanceInvoiceTable = _documentRecord as CzCustAdvanceInvoiceTable;
                deliveryAddress = czCustAdvanceInvoiceTable.PostalAddress;
                break;
                                    
            // PurchaseAdvanceInvoice
            case tableNum(CzVendAdvanceInvoiceTable):
                CzVendAdvanceInvoiceTable czVendAdvanceInvoiceTable = _documentRecord as CzVendAdvanceInvoiceTable;
                deliveryAddress = czVendAdvanceInvoiceTable.PostalAddress;
                break;
                                    
            // WHSPickListShippingWave, WHSPickListProd
            case tableNum(WHSWaveTable):
                deliveryAddress = 0;
                break;
                                    
            // WHSPickListShippingLoad, WHSLoadList
            case tableNum(WHSLoadTable):
                WHSLoadTable whsLoadTable = _documentRecord as WHSLoadTable;
                deliveryAddress = whsLoadTable.DestinationPostalAddress;
                break;
                                    
            // TMSLoadTender
            case tableNum(TMSTransportationTender):
                TMSTransportationTender tmsTransportationTender = _documentRecord as TMSTransportationTender;
                deliveryAddress = tmsTransportationTender.destinationPostalAddress().RecId;
                break;
                                    
            // WHSPickListShippingShipment, TMSCommercialInvoice, TMSCertificateOfOrigin
            case tableNum(WHSShipmentTable):
                WHSShipmentTable whsShipmentTable = _documentRecord as WHSShipmentTable;
                deliveryAddress = whsShipmentTable.DeliveryPostalAddress;
                break;
                                    
            // WHSBOL
            case tableNum(WHSBillOfLading):
                WHSBillOfLading whsBillOfLading = _documentRecord as WHSBillOfLading;
                deliveryAddress = whsBillOfLading.DeliveryPostalAddress;
                break;
                                    
            // WHSContainerContents
            case tableNum(WHSContainerTable):
                WHSContainerTable whsContainerTable = _documentRecord as WHSContainerTable;
                deliveryAddress = WHSShipmentTable::find(whsContainerTable.ShipmentId).DeliveryPostalAddress;
                break;
                                    
            // WHSPickListShippingWave, WHSPickListProd
            case tableNum(WHSWaveTable):
                deliveryAddress = 0;
                break;
                                    
            // TMSRoute
            case tableNum(TMSRoute):
                deliveryAddress = 0;
                break;

            default:
                deliveryAddress = 0;
        }

        return deliveryAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTypeAndId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the party type (Customer/Vendor) and its account number from the given
    /// print management document type and document record.
    /// </summary>
    /// <param name = "_docType">Print management document type.</param>
    /// <param name = "_documentRecord">Document record (mostly some kind of journal) being printed.</param>
    /// <returns>The container with the party type and account number.</returns>
    public static container getPartyTypeAndId(PrintMgmtDocumentType _docType, Common _documentRecord)
    {
        // NOTE: mappings from _jour to a specific table are found in the CustVendAccountMap
        // The table mapped is the same table referenced in method getQueryTableId()
        CustVendAC getAccount(Common _common)
        {
            CustVendAccountMap accountMap = _common;
            return accountMap.Account;
        }

        container getPartyTypeAndIdFromShipmentId(WHSShipmentId _shipmentId)
        {
            PrintMgmtPrintDestinationPartyType partyType;
            CustVendAC custVendAccountNumber;

            WHSShipmentTable whsShipmentTable = WHSShipmentTable::find(_shipmentId);
            
            if (whsShipmentTable.RecId)
            {
                if (whsShipmentTable.WorkTransType == WHSWorkTransType::Sales)
                {
                    SalesTable salesTable = SalesTable::find(whsShipmentTable.OrderNum);

                    partyType = PrintMgmtPrintDestinationPartyType::Customer;
                    custVendAccountNumber = salesTable.CustAccount;
                }
                else if (whsShipmentTable.WorkTransType == WHSWorkTransType::Purch)
                {
                    PurchTable purchTable = PurchTable::find(whsShipmentTable.OrderNum);

                    partyType = PrintMgmtPrintDestinationPartyType::Vendor;
                    custVendAccountNumber = purchTable.OrderAccount;
                }
                // add support for other WorkTransTypes if needed
            }

            return [partyType, custVendAccountNumber];
        }
        
        PrintMgmtPrintDestinationPartyType partyType;
        CustVendAC custVendAccountNumber;
        if (_documentRecord.TableId == tableNum(CustQuotationJour) && _documentRecord.(fieldNum(CustQuotationJour, BusRelAccount)))
        {
            DirPartyRecId partyRecId = smmBusRelTable::find(_documentRecord.(fieldNum(CustQuotationJour, BusRelAccount))).Party;
            partyType = PrintMgmtPrintDestinationPartyType::Unknown;
            custVendAccountNumber = DirPartyTable::findRec(partyRecId).PartyNumber;
        }
        else if (_docType == PrintMgmtDocumentType::WHSContainerContents)
        {
            WHSContainerTable   whsContainerTable = _documentRecord;
            [partyType, custVendAccountNumber] = getPartyTypeAndIdFromShipmentId(whsContainerTable.ShipmentId);
        }
        else if (_docType == PrintMgmtDocumentType::WMSBillOfLading_RU) // WHSBOL report
        {
            WHSBillOfLading whsBillOfLading = _documentRecord;
            [partyType, custVendAccountNumber] = getPartyTypeAndIdFromShipmentId(whsBillOfLading.ShipmentId);
        }
        else
        {
            switch (DocPrintMgmtHelper::getAccountTypeForPrintMgmtDocumentType(_docType))
            {
                case DocAccountRole::Customer:
                    partyType = PrintMgmtPrintDestinationPartyType::Customer;
                    custVendAccountNumber = getAccount(_documentRecord);
                    break;

                case DocAccountRole::Vendor:
                    partyType = PrintMgmtPrintDestinationPartyType::Vendor;
                    custVendAccountNumber = getAccount(_documentRecord);
                    break;

                case DocAccountRole::NA:
                    partyType = PrintMgmtPrintDestinationPartyType::Unknown;
                    custVendAccountNumber = '';
                    break;
            }
        }

        return [partyType, custVendAccountNumber];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the document being printed.
    /// </summary>
    /// <param name = "_documentRecord">Document record (mostly some kind of journal) being printed.</param>
    /// <returns>Document ID</returns>
    public static str getDocumentId(Common _documentRecord)
    {
        str documentId;
        
        switch (_documentRecord.TableId)
        {
            // SalesInvoice, FreeTextInvoice, SalesOrderInvoice, SalesFreeTextInvoice,
            // SalesOrderBailee, WHSSalesInvoiceByLoad,
            // VendInvoiceDocument, PurchaseOrderInvoice, PurchaseOrderBailee
            case tableNum(CustInvoiceJour):
            case tableNum(VendInvoiceJour):
                CustVendInvoiceJour journalMap = _documentRecord;
                documentId = journalMap.InvoiceNum;
                break;
                                    
            // PurchaseOrderPackingSlip
            case tableNum(VendPackingSlipJour):
                VendPackingSlipJour vendPackingSlipJour = _documentRecord as VendPackingSlipJour;
                documentId = vendPackingSlipJour.PackingSlipId;
                break;
                                    
            // PurchaseOrderReceiptsList
            case tableNum(VendReceiptsListJour):
                VendReceiptsListJour vendReceiptsListJour = _documentRecord as VendReceiptsListJour;
                documentId = vendReceiptsListJour.ReceiptsListId;
                break;
                                    
            // PurchPurchaseOrder, PurchaseOrderRequisition
            case tableNum(VendPurchOrderJour):
                VendPurchOrderJour vendPurchOrderJour = _documentRecord as VendPurchOrderJour;
                documentId = vendPurchOrderJour.PurchId;
                break;
                                    
            // PurchaseOrderConfirmationRequest
            case tableNum(PurchConfirmationRequestJour):
                PurchConfirmationRequestJour purchConfirmationRequestJour = _documentRecord as PurchConfirmationRequestJour;
                documentId = purchConfirmationRequestJour.DocumentNumber;
                break;
                                    
            // PurchRFQ, PurchRFQAccept, PurchRFQReject, PurchRFQReturn
            case tableNum(VendRFQJour):
                VendRFQJour vendRFQJour = _documentRecord as VendRFQJour;
                documentId = vendRFQJour.RFQId;
                break;
                                    
            // InventPickList
            case tableNum(WMSPickingRoute):
                WMSPickingRoute wmsPickingRoute = _documentRecord as WMSPickingRoute;
                documentId = wmsPickingRoute.PickingRouteId;
                break;
                                    
            // SalesOrderPackingSlip
            case tableNum(CustPackingSlipJour):
                CustPackingSlipJour custPackingSlipJour = _documentRecord as CustPackingSlipJour;
                documentId = custPackingSlipJour.PackingSlipId;
                break;
                                    
            // SalesOrderConfirmation, WHSSalesConfirmByLoad
            case tableNum(CustConfirmJour):
                CustConfirmJour custConfirmJour = _documentRecord as CustConfirmJour;
                documentId = custConfirmJour.ConfirmId;
                break;
                                    
            // Confirmation
            case tableNum(CustQuotationConfirmJour):
                CustQuotationConfirmJour custQuotationConfirmJour = _documentRecord as CustQuotationConfirmJour;
                documentId = custQuotationConfirmJour.salesQuotationTable().QuotationId;
                break;
                                    
            // Quotation, ProjectQuotation
            case tableNum(CustQuotationJour):
                CustQuotationJour custQuotationJour = _documentRecord as CustQuotationJour;
                documentId = custQuotationJour.salesQuotationTable().QuotationId;
                break;
                                    
            // SIProjInvoice, SIProjInvoiceWithBR, SIManagedProjInvoice,
            // ProjCustRetentionReleaseInvoice, ProjectInvoice
            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = _documentRecord as ProjInvoiceJour;
                documentId = projInvoiceJour.ProjInvoiceId;
                break;
                                    
            // CustInterestNote
            case tableNum(CustInterestJour):
                CustInterestJour custInterestJour = _documentRecord as CustInterestJour;
                documentId = custInterestJour.Interestnote;
                break;
                                    
            // CustCollectionLetter
            case tableNum(CustCollectionLetterJour):
                CustCollectionLetterJour custCollectionLetterJour = _documentRecord as CustCollectionLetterJour;
                documentId = custCollectionLetterJour.CollectionLetterNum;
                break;
                                    
            // BankCheque
            case tableNum(BankChequeTable):
                BankChequeTable bankChequeTable = _documentRecord as BankChequeTable;
                documentId = bankChequeTable.ChequeNum;
                break;
                                    
            // SalesAdvanceInvoice
            case tableNum(CzCustAdvanceInvoiceTable):
                CzCustAdvanceInvoiceTable czCustAdvanceInvoiceTable = _documentRecord as CzCustAdvanceInvoiceTable;
                documentId = czCustAdvanceInvoiceTable.InvoiceId;
                break;
                                    
            // PurchaseAdvanceInvoice
            case tableNum(CzVendAdvanceInvoiceTable):
                CzVendAdvanceInvoiceTable czVendAdvanceInvoiceTable = _documentRecord as CzVendAdvanceInvoiceTable;
                documentId = czVendAdvanceInvoiceTable.InvoiceId;
                break;
                                    
            // WHSPickListShippingWave, WHSPickListProd
            case tableNum(WHSWaveTable):
                WHSWaveTable whsWaveTable = _documentRecord as WHSWaveTable;
                documentId = whsWaveTable.WaveId;
                break;
                                    
            // WHSPickListShippingLoad, WHSLoadList, TMSLoadTender
            case tableNum(WHSLoadTable):
                WHSLoadTable whsLoadTable = _documentRecord as WHSLoadTable;
                documentId = whsLoadTable.LoadId;
                break;
                                    
            // WHSPickListShippingShipment, TMSCommercialInvoice, TMSCertificateOfOrigin
            case tableNum(WHSShipmentTable):
                WHSShipmentTable whsShipmentTable = _documentRecord as WHSShipmentTable;
                documentId = whsShipmentTable.ShipmentId;
                break;
                                    
            // WHSBOL
            case tableNum(WHSBillOfLading):
                WHSBillOfLading whsBillOfLading = _documentRecord as WHSBillOfLading;
                documentId = whsBillOfLading.BillOfLadingId;
                break;
                                    
            // WHSContainerContents
            case tableNum(WHSContainerTable):
                WHSContainerTable whsContainerTable = _documentRecord as WHSContainerTable;
                documentId = whsContainerTable.ContainerId;
                break;
                                    
            // TMSRoute
            case tableNum(TMSRoute):
                TMSRoute tmsRoute = _documentRecord as TMSRoute;
                documentId = tmsRoute.RouteCode;
                break;

            default:
                documentId = '';
        }

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryAddressEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of delivery addresses separated by the specified separator as a string.
    /// </summary>
    /// <param name = "_jour">The query table buffer from the PrintMgmtPrintContext class</param>
    /// <param name = "_isPrimary">Should only consider primary email addresses</param>
    /// <param name = "_purpose">List of purposes to be considered for the email address</param>
    /// <param name = "_addressSeparator">Email address separator</param>
    /// <returns>The list of delivery addresses as a string</returns>
    public static str getDeliveryAddressEmail(Common _jour, boolean _isPrimary, str _purpose = '', str _addressSeparator = '')
    {
        str dlvEmail = '';
        
        LogisticsPostalAddressRecId deliveryAddress = DocPrintMgmtHelper::getDeliveryAddress(_jour);
                        
        LogisticsPostalAddress postalAddress;
        LogisticsLocation loc1, loc2;
        LogisticsElectronicAddress electronicAddress;

        // There can be more addresses with the same purpose --> loop through all of them.
        while select Locator, ElectronicAddressRoles from electronicAddress
                where electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                    && electronicAddress.IsPrimary == _isPrimary
            exists join loc1 where loc1.RecId == electronicAddress.Location
            exists join loc2 where loc2.RecId == loc1.ParentLocation
            exists join postalAddress where postalAddress.Location == loc2.RecId
                && postalAddress.RecId == deliveryAddress
        {
            if (_isPrimary)
            {
                // There can be only 1 primary address
                dlvEmail = electronicAddress.Locator;
                break;
            }
            else if (_purpose != '')
            {
                // Each address can have more purposes, which are all stored as a comma-separated list
                // in the ElectronicAddressRoles field --> parse this field and check if it contains
                // the purpose we are looking for.
                if (strScan(electronicAddress.ElectronicAddressRoles, _purpose, 1, strLen(electronicAddress.ElectronicAddressRoles)))
                {
                    dlvEmail += (dlvEmail == '' ? '' : _addressSeparator) + electronicAddress.Locator;
                }
            }            
        }

        return dlvEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjIdAndEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project number, project Id and email for the document being printed.
    /// Document must be related to some kind of project.
    /// </summary>
    /// <param name = "_documentRecord">Document record (mostly some kind of journal) being printed.</param>
    /// <returns>[Project number, Project Id, Project email address]</returns>
    public static container getProjIdAndEmail(Common _documentRecord)
    {
        str projEmail = '';
        str projId = '';
        int projNum = 0;
        ProjTable projTable;

        switch (_documentRecord.TableId)
        {
            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = _documentRecord as ProjInvoiceJour;
                PSAProjProposalProj proposalLine;

                while select ProjId, Email from projTable
                    group by projTable.ProjId, projTable.Email
                    join proposalLine
                        where proposalLine.ProjId == projTable.ProjId
                            && proposalLine.ProjProposalId == projInvoiceJour.ProposalId
                {
                    projId += (projId == '' ? '' : ', ') + projTable.ProjId;
                    projNum++;

                    if (projTable.Email)
                    {
                        projEmail += (projEmail == '' ? '' : ';') + projTable.Email;
                    }
                }

                break;
                
            case tableNum(CustQuotationConfirmJour):
                CustQuotationConfirmJour jourConfirmation = _documentRecord as CustQuotationConfirmJour;

                select firstonly ProjId, Email from projTable where projTable.ProjId == jourConfirmation.ProjIdRef;
                projId = projTable.ProjId;
                projEmail = projTable.Email;
                if (projTable)
                {
                    projNum = 1;
                }

                break;
                
            case tableNum(CustQuotationJour):
                CustQuotationJour jour = _documentRecord as CustQuotationJour;

                select firstonly ProjId, Email from projTable where projTable.ProjId == jour.ProjIdRef;
                projId = projTable.ProjId;
                projEmail = projTable.Email;
                if (projTable)
                {
                    projNum = 1;
                }

                break;
        }

        return [projNum, projId, projEmail];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFQIdAndEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the request for quotation Id and email for the document being printed.
    /// Document must be related to some kind of request for quotation.
    /// </summary>
    /// <param name = "_documentRecord">Document record (mostly some kind of journal) being printed.</param>
    /// <returns>[Request for quotation Id, Request for quotation email address]</returns>
    public static container getRFQIdAndEmail(Common _documentRecord)
    {
        str rfqEmail = '';
        str rfqId = '';

        switch (_documentRecord.TableId)
        {
            case tableNum(VendRFQJour):
                VendRFQJour vendRFQJour = _documentRecord as VendRFQJour;
                rfqId = vendRFQJour.RFQId;
                rfqEmail = vendRFQJour.Email;
                break;
        }

        return [rfqId, rfqEmail];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuoteIdAndEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the request for quotation Id and email for the document being printed.
    /// Document must be related to some kind of quotation.
    /// </summary>
    /// <param name = "_documentRecord">Document record (mostly some kind of journal) being printed.</param>
    /// <returns>[Quotation Id, Quotation email address]</returns>
    public static container getQuoteIdAndEmail(Common _documentRecord)
    {
        str quoteEmail = '';
        str quoteId = '';

        switch (_documentRecord.TableId)
        {
            case tableNum(CustQuotationJour):
                CustQuotationJour custQuotationJour = _documentRecord as CustQuotationJour;
                quoteId = custQuotationJour.salesQuotationTable().QuotationId; 
                quoteEmail = custQuotationJour.salesQuotationTable().Email;
                break;

            case tableNum(CustQuotationConfirmJour):
                CustQuotationConfirmJour custQuotationConfirmJour = _documentRecord as CustQuotationConfirmJour;
                quoteId = custQuotationConfirmJour.salesQuotationTable().QuotationId;
                quoteEmail = custQuotationConfirmJour.salesQuotationTable().Email;
                break;
        }

        return [quoteId, quoteEmail];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderIdAndEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the order Id and Email for the document being printed.
    /// Document must be related to some kind of order (sales or purchase).
    /// </summary>
    /// <param name = "_documentRecord">Document record (mostly some kind of journal) being printed.</param>
    /// <returns>[Sales order Id, Purchase order Id, Order email address]</returns>
    public static container getOrderIdAndEmail(Common _documentRecord)
    {
        str orderEmail = '';
        SalesId salesId = '';
        PurchId purchId = '';
        
        switch (_documentRecord.TableId)
        {
            // ----------------------------------------------------------------
            // SALES
            // ----------------------------------------------------------------

            // SalesInvoice, FreeTextInvoice, SalesOrderInvoice, SalesFreeTextInvoice,
            // SalesOrderBailee
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = _documentRecord as CustInvoiceJour;
                salesId = custInvoiceJour.SalesId;
                break;
                          
            // SalesOrderPackingSlip
            case tableNum(CustPackingSlipJour):
                CustPackingSlipJour custPackingSlipJour = _documentRecord as CustPackingSlipJour;
                salesId = custPackingSlipJour.SalesId;
                break;

            // Sales Quotation
            case tableNum(CustQuotationJour):
                CustQuotationJour custQuotationJour = _documentRecord as CustQuotationJour;
                salesId = custQuotationJour.salesQuotationTable().SalesIdRef;
                break;

            // Sales Quotation Confirmation
            case tableNum(CustQuotationConfirmJour):
                CustQuotationConfirmJour custQuotationConfirmJour = _documentRecord as CustQuotationConfirmJour;
                salesId = custQuotationConfirmJour.SalesId;
                break;

            // SalesOrderConfirmation, WHSSalesConfirmByLoad
            case tableNum(CustConfirmJour):
                CustConfirmJour custConfirmJour = _documentRecord as CustConfirmJour;
                salesId = custConfirmJour.SalesId;
                break;
            
            
            // ----------------------------------------------------------------
            // PURCHASE
            // ----------------------------------------------------------------

            // VendInvoiceDocument, PurchaseOrderInvoice, PurchaseOrderBailee
            case tableNum(VendInvoiceJour):
                VendInvoiceJour vendInvoiceJour = _documentRecord as VendInvoiceJour;
                purchId = vendInvoiceJour.PurchId;
                break;
                                    
            // PurchaseOrderPackingSlip
            case tableNum(VendPackingSlipJour):
                VendPackingSlipJour vendPackingSlipJour = _documentRecord as VendPackingSlipJour;
                purchId = vendPackingSlipJour.PurchId;
                break;
                                    
            // PurchaseOrderReceiptsList
            case tableNum(VendReceiptsListJour):
                VendReceiptsListJour vendReceiptsListJour = _documentRecord as VendReceiptsListJour;
                purchId =vendReceiptsListJour.PurchId;
                break;
                                    
            // PurchPurchaseOrder, PurchaseOrderRequisition
            case tableNum(VendPurchOrderJour):
                VendPurchOrderJour vendPurchOrderJour = _documentRecord as VendPurchOrderJour;
                purchId = vendPurchOrderJour.PurchId;
                break;
                                    
            // PurchaseOrderConfirmationRequest
            case tableNum(PurchConfirmationRequestJour):
                PurchConfirmationRequestJour purchConfirmationRequestJour = _documentRecord as PurchConfirmationRequestJour;
                purchId = purchConfirmationRequestJour.getPurchaseOrderId();
                break;

            // ----------------------------------------------------------------
            // OTHERS
            // ----------------------------------------------------------------                

            // WHSContainerTable
            case tableNum(WHSContainerTable):
                WHSContainerTable   whsContainerTable = _documentRecord as WHSContainerTable;
                WHSShipmentTable    whsShipmentTable = WHSShipmentTable::find(whsContainerTable.ShipmentId);
            
                if (whsShipmentTable.RecId)
                {
                    if (whsShipmentTable.WorkTransType == WHSWorkTransType::Sales)
                    {
                        salesId = whsShipmentTable.OrderNum;
                    }
                    else if (whsShipmentTable.WorkTransType == WHSWorkTransType::Purch)
                    {
                        purchId = whsShipmentTable.OrderNum;
                    }
                    // add support for other WorkTransTypes if needed
                }
                break;
        }

        if (salesId)
        {
            orderEmail = SalesTable::find(salesId).Email;
        }
        else if (purchId)
        {
            orderEmail = PurchTable::find(purchId).Email;
        }

        return [salesId, purchId, orderEmail];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtNodeTypeForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print management node type for the specified SSRS report name.
    /// </summary>
    /// <param name = "_reportName">SSRS report name</param>
    /// <returns>Print management node type</returns>
    public static PrintMgmtNodeType getPrintMgmtNodeTypeForReport(DocReportSRSName _reportName)
    {
        PrintMgmtReportFormat   printMgmtFormat;
        PrintMgmtDocInstance    docInstance;

        select firstonly RecId from printMgmtFormat
                where printMgmtFormat.Name == _reportName
            join DocumentType, NodeType from docInstance
                where docInstance.DocumentType == printMgmtFormat.DocumentType;
        
        return docInstance.NodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtAddSalesDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds sales documents to the <c>PrintMgmtSetupContext</c>.
    /// </summary>
    /// <param name = "_context">The <c>PrintMgmtSetupContext</c> object.</param>
    /// <param name = "_salesDocs">To add other sales document types, this param can be overridden.</param>
    public static void printMgmtAddSalesDocuments(PrintMgmtSetupContext _context, List _salesDocs = new List(Types::Enum))
    {
        #ISOCountryRegionCodes

        _salesDocs.addEnd(PrintMgmtDocumentType::Confirmation);
        _salesDocs.addEnd(PrintMgmtDocumentType::Quotation);
        _salesDocs.addEnd(PrintMgmtDocumentType::SalesFreeTextInvoice);
        _salesDocs.addEnd(PrintMgmtDocumentType::SalesOrderConfirmation);
        _salesDocs.addEnd(PrintMgmtDocumentType::SalesOrderInvoice);
        _salesDocs.addEnd(PrintMgmtDocumentType::SalesOrderPackingSlip);
        _salesDocs.addEnd(PrintMgmtDocumentType::CustAccountStatement);

        if (isConfigurationkeyEnabled(configurationKeyNum(CustInterest)))
        {
            _salesDocs.addEnd(PrintMgmtDocumentType::CustInterestNote);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(CustCollectionLetter)))
        {
            _salesDocs.addEnd(PrintMgmtDocumentType::CustCollectionLetter);
        }

        _salesDocs.addEnd(PrintMgmtDocumentType::SalesAgreementConfirmation);
        _salesDocs.addEnd(PrintMgmtDocumentType::CustPaymAdvice);

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            _salesDocs.addEnd(PrintMgmtDocumentType::TaxReimburstmentSlip_HU);
        }
        // </GEEHU>
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL]))
        {
            _salesDocs.addEnd(PrintMgmtDocumentType::SalesAdvanceInvoice);
        }
        // </GEEU>

        _context.addHierarchyContext(PrintMgmtHierarchyType::Sales, PrintMgmtNodeType::CustTable, _salesDocs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtAddProjectDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds project documents to the <c>PrintMgmtSetupContext</c>.
    /// </summary>
    /// <param name = "_context">The <c>PrintMgmtSetupContext</c> object.</param>
    /// <param name = "_projectDocs">To add other project document types, this param can be overridden.</param>
    public static void printMgmtAddProjectDocuments(PrintMgmtSetupContext _context, List _projectDocs = new List(Types::Enum))
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project))) 
        {
            _projectDocs.addEnd(PrintMgmtDocumentType::SIProjInvoice);
            _projectDocs.addEnd(PrintMgmtDocumentType::SIProjInvoiceWithBR);
            _projectDocs.addEnd(PrintMgmtDocumentType::SIManagedProjInvoice);
            _projectDocs.addEnd(PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice);
            _projectDocs.addEnd(PrintMgmtDocumentType::ProjectQuotation);
        }
        else
        {
            _projectDocs.addEnd(PrintMgmtDocumentType::ProjectInvoice);
        }
        _context.addHierarchyContext(PrintMgmtHierarchyType::Project, PrintMgmtNodeType::CustTable, _projectDocs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtAddInventDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds invent documents to the <c>PrintMgmtSetupContext</c>.
    /// </summary>
    /// <param name = "_context">The <c>PrintMgmtSetupContext</c> object.</param>
    /// <param name = "_inventDocs">To add other invent document types, this param can be overridden.</param>
    public static void printMgmtAddInventDocuments(PrintMgmtSetupContext _context, List _inventDocs = new List(Types::Enum))
    {
        _inventDocs.addEnd(PrintMgmtDocumentType::InventPickList);
        _context.addHierarchyContext(PrintMgmtHierarchyType::Invent, PrintMgmtNodeType::CustTable, _inventDocs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveNodeReferenceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method resolves the reference TableId and RecId, that identify
    /// the Print management node based on the node type and node-specific ID.
    /// For example, in case of Customer, node type is Customer and node-specific ID
    /// is Account number.
    /// </summary>
    /// <param name = "_nodeType">PrintMgmtNodeType enum. For example: CustTable and VendTable for Customer and Vendor, Sales for Accounts receivable module, etc.</param>
    /// <param name = "_nodeSpecificId">ID by which the record in a given node can be identified. For example: Account number for Customer and Vendor nodes.</param>
    /// <returns>Container with reference TableId and RecId, and flag if the record is found based on the provided parameters.</returns>
    public static container resolveNodeReferenceData(PrintMgmtNodeType _nodeType, Num _nodeSpecificId)
    {
        RefTableId refTableId = 0;
        RefRecId refRecId = 0;
        boolean isFound = true;
        
        if (_nodeSpecificId)
        {
            isFound = false;

            switch (_nodeType)
            {
                case PrintMgmtNodeType::CustTable:
                    CustTable custTable = CustTable::find(_nodeSpecificId);
                    if (custTable)
                    {
                        refTableId = tableNum(CustTable);
                        refRecId = custTable.RecId;
                        isFound = true;
                    }
                    break;
                    
                case PrintMgmtNodeType::VendTable:
                    VendTable vendTable = VendTable::find(_nodeSpecificId);
                    if (vendTable)
                    {
                        refTableId = tableNum(VendTable);
                        refRecId = vendTable.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::SalesTable:
                    SalesTable salesTable = SalesTable::find(_nodeSpecificId);
                    if (salesTable)
                    {
                        refTableId = tableNum(SalesTable);
                        refRecId = salesTable.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::SalesQuotationTable:
                    SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(_nodeSpecificId);
                    if (salesQuotationTable)
                    {
                        refTableId = tableNum(SalesQuotationTable);
                        refRecId = salesQuotationTable.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::PurchTable:
                    PurchTable purchTable = PurchTable::find(_nodeSpecificId);
                    if (purchTable)
                    {
                        refTableId = tableNum(PurchTable);
                        refRecId = purchTable.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::PurchRFQTable:
                    PurchRFQTable purchRFQTable = PurchRFQTable::find(_nodeSpecificId);
                    if (purchRFQTable)
                    {
                        refTableId = tableNum(PurchRFQTable);
                        refRecId = purchRFQTable.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::PurchRFQVendLink:
                    PurchRFQVendLink purchRFQVendLink = PurchRFQVendLink::find(_nodeSpecificId);
                    if (purchRFQVendLink)
                    {
                        refTableId = tableNum(PurchRFQVendLink);
                        refRecId = purchRFQVendLink.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::ProjInvoiceTable:
                    ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(_nodeSpecificId);
                    if (projInvoiceTable)
                    {
                        refTableId = tableNum(ProjInvoiceTable);
                        refRecId = projInvoiceTable.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::ProjProposalJour:
                    ProjProposalJour projProposalJour = ProjProposalJour::find(_nodeSpecificId);
                    if (projProposalJour)
                    {
                        refTableId = tableNum(ProjProposalJour);
                        refRecId = projProposalJour.RecId;
                        isFound = true;
                    }
                    break;

                case PrintMgmtNodeType::Project:
                    ProjTable projTable = ProjTable::find(_nodeSpecificId);
                    if (projTable)
                    {
                        refTableId = tableNum(ProjTable);
                        refRecId = projTable.RecId;
                        isFound = true;
                    }
                    break;

                default:
                    refTableId = 0;
                    refRecId = 0;
            }
        }
        else
        {
            switch (_nodeType)
            {
                // Override with empty Node-specific ID is invalid setting.
                case PrintMgmtNodeType::CustTable:
                case PrintMgmtNodeType::VendTable:
                    isFound = false;
                    break;

                // Module-level setting.
                default:
                    refTableId = 0;
                    refRecId = 0;
            }
        }

        return [refTableId, refRecId, isFound];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtSetupContextForNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the given PrintMgmtSetupContext object for the given node type and optionally
    /// for the given document type. For the module-level nodes we do it in the same way as standard.
    /// </summary>
    /// <param name = "_setupContext">PrintMgmtSetupContext object to be initialized</param>
    /// <param name = "_nodeType">PrintMgmtNodeType enum for which the context is initialized</param>
    /// <param name = "_filterByDocumentType">boolean, if set then only the given _documentTypeis displayed</param>
    /// <param name = "_documentTypes">
    /// List of PrintMgmtDocumentType enums - optional parameter, used in the combination with _filterByDocumentType flag.
    /// If that flag is true, only the PrintMgmtDocumentTypes from this list will be displayed.
    /// </param>
    public static void initPrintMgmtSetupContextForNode(
        PrintMgmtSetupContext _setupContext, 
        PrintMgmtNodeType _nodeType,
        boolean _filterByDocumentType = false,
        List _documentTypes = new List(Types::Enum))
    {
        if (_setupContext == null)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_setupContext)), true, funcName(), true);
        }

        switch (_nodeType)
        {
            /* 
             * ---------------------------------------------------------------------
             * Module nodes: initialize them in the same way as standard forms
             * ---------------------------------------------------------------------
             */
            case PrintMgmtNodeType::Sales:
            case PrintMgmtNodeType::SalesQuotationTable:
            case PrintMgmtNodeType::SalesAgreement:
                if (_filterByDocumentType)
                {
                    // Add AR module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Sales, _nodeType, _documentTypes);
                }
                else
                {
                    // Add the whole AR module
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Sales, _nodeType);
                    
                    if (_nodeType == PrintMgmtNodeType::Sales)
                    {
                        // Add Inventory management module with only Picking list document
                        _documentTypes.addEnd(PrintMgmtDocumentType::InventPickList);
                        _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Invent, PrintMgmtNodeType::Invent, _documentTypes);
                    }
                }
                break;


            case PrintMgmtNodeType::Purch:
            case PrintMgmtNodeType::PurchTable:
            case PrintMgmtNodeType::PurchRFQTable:
            case PrintMgmtNodeType::PurchRFQVendLink:
            case PrintMgmtNodeType::PurchAgreement:
                if (_filterByDocumentType)
                {
                    // Add AP module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Purch, _nodeType, _documentTypes);
                }
                else
                {
                    // Add the whole AP module
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Purch, _nodeType);
                }
                break;

            case PrintMgmtNodeType::Project:
            case PrintMgmtNodeType::ProjectQuotation:
            case PrintMgmtNodeType::ProjInvoiceTable:
            case PrintMgmtNodeType::ProjProposalJour:
                if (_filterByDocumentType)
                {
                    // Add Project module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Project, _nodeType, _documentTypes);
                }
                else
                {
                    // Add the whole Project module
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Project, _nodeType);
                }
                break;

            case PrintMgmtNodeType::WHS:
                if (_filterByDocumentType)
                {
                    // Add WHS module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::WHS, _nodeType, _documentTypes);
                }
                else
                {
                    // Add the whole WHS module
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::WHS, _nodeType);
                }
                break;

            case PrintMgmtNodeType::TMS:
                if (_filterByDocumentType)
                {
                    // Add TMS module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::TMS, _nodeType, _documentTypes);
                }
                else
                {
                    // Add the whole TMS module
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::TMS, _nodeType);
                }
                break;

            case PrintMgmtNodeType::Invent:
                if (_filterByDocumentType)
                {
                    // Add Invent module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Invent, _nodeType, _documentTypes);
                }
                else
                {
                    // Add the whole Invent module
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Invent, _nodeType);
                }
                break;
            
            /*
            * ---------------------------------------------------------------------
            * Account nodes
            * ---------------------------------------------------------------------
            */
            case PrintMgmtNodeType::CustTable:    
                if (_filterByDocumentType)
                {
                    // Add Sales module for Customer node with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Sales, _nodeType, _documentTypes);
                }
                else
                {
                    // Add all customer-related documents (copied from CustTable form)
                    DocPrintMgmtHelper::printMgmtAddSalesDocuments(_setupContext);
                    DocPrintMgmtHelper::printMgmtAddProjectDocuments(_setupContext);
                    DocPrintMgmtHelper::printMgmtAddInventDocuments(_setupContext);
                }
                break;

            case PrintMgmtNodeType::VendTable:
                if (_filterByDocumentType)
                {
                    // Add Purch module for Vendor node with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Purch, _nodeType, _documentTypes);
                }
                else
                {
                    // Add all vendor-related documents (copied from VendTable form)
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Purch, _nodeType);
                }
                break;
            
            /*
            * ---------------------------------------------------------------------
            * Transaction nodes
            * ---------------------------------------------------------------------
            */            
            case PrintMgmtNodeType::SalesTable:
                if (_filterByDocumentType)
                {
                    // Add AR module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Sales, _nodeType, _documentTypes);
                }
                else
                {
                    // Copied from SalesTableListPage form. This will add the documents
                    // related to sales order: Customer invoice, Sales order confirmation,
                    // Picking list, Sales order packing slip
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Sales, _nodeType);
                }
                break;

            case PrintMgmtNodeType::CustInvoiceTable:
                if (_filterByDocumentType)
                {
                    // Add AR module with only the selected document
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Sales, _nodeType, _documentTypes);
                }
                else
                {
                    // Add the whole AR module
                    _setupContext.addHierarchyContext(PrintMgmtHierarchyType::Sales, PrintMgmtNodeType::Sales);
                }
                break;

            default:
                // Do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypesAllowedForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of Print Management node types for which the current user has
    /// a privilege to access the corresponding Print Management setup form.
    /// </summary>
    /// <returns>Set of Print Management node types.</returns>
    public static Set getNodeTypesAllowedForUser()
    {
        Set allowedNodeTypes = new Set(Types::Enum);
        SecurityRights securityRights = SecurityRights::construct();

        AccessRight accessRight;
        
        // Accounts Receivable form letter parameters
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(CustFormLetterParameters));
        if (accessRight != AccessRight::NoAccess)
        {
            allowedNodeTypes.add(PrintMgmtNodeType::Sales);
        }

        // Accounts Payable form letter parameters
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(VendFormLetterParameters));
        if (accessRight != AccessRight::NoAccess)
        {
            allowedNodeTypes.add(PrintMgmtNodeType::Purch);
        }

        // Purchasing form letter parameters
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(PurchFormLetterParameters));
        if (accessRight != AccessRight::NoAccess)
        {
            allowedNodeTypes.add(PrintMgmtNodeType::Purch);
        }

        // Project management form letter parameters
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(ProjFormLetterParameters));
        if (accessRight != AccessRight::NoAccess)
        {
            allowedNodeTypes.add(PrintMgmtNodeType::Project);
        }

        // WHS parameters
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(WHSParameters));
        if (accessRight != AccessRight::NoAccess)
        {
            allowedNodeTypes.add(PrintMgmtNodeType::WHS);
        }

        // TMS parameters
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(TMSParameters));
        if (accessRight != AccessRight::NoAccess)
        {
            allowedNodeTypes.add(PrintMgmtNodeType::TMS);
        }

        // Inventory parameters
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(InventParameters));
        if (accessRight != AccessRight::NoAccess)
        {
            allowedNodeTypes.add(PrintMgmtNodeType::Invent);
        }
        
        return allowedNodeTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTypesForModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the information about the document types for a given Print mgmt module.
    /// </summary>
    /// <param name = "_module">PrintMgmtNodeType specifying a Print mgmt module (Purch, Sales, ...)</param>
    /// <returns>List with document types for current company and provided Print mgmt module.</returns>
    public static List getDocumentTypesForModule(PrintMgmtNodeType _module)
    {
        List documentTypes;
        Name moduleName;    

        // Initialize the list of documents for this module by calling the framework methods.
        switch (_module)
        {
            case PrintMgmtNodeType::Purch:
                
                PrintMgmtNode_Purch nodePurch = new PrintMgmtNode_Purch();
                documentTypes = nodePurch.getDocumentTypes();
                moduleName = nodePurch.getDisplayCaption(null);

                break;

            case PrintMgmtNodeType::Sales:
                PrintMgmtNode_Sales nodeSales = new PrintMgmtNode_Sales();
                documentTypes = nodeSales.getDocumentTypes();
                moduleName = nodeSales.getDisplayCaption(null);

                break;

            case PrintMgmtNodeType::Project:
                PrintMgmtNode_Project nodeProject = new PrintMgmtNode_Project();
                documentTypes = nodeProject.getDocumentTypes();
                moduleName = nodeProject.getDisplayCaption(null);

                break;

            case PrintMgmtNodeType::Invent:
                PrintMgmtNode_Invent nodeInvent = PrintMgmtNode_Invent::construct();
                documentTypes = nodeInvent.getDocumentTypes();
                moduleName = nodeInvent.getDisplayCaption(null);

                break;

            case PrintMgmtNodeType::WHS:
                WhsPrintMgmtNode_WHS nodeWHS = new WhsPrintMgmtNode_WHS();
                documentTypes = nodeWHS.getDocumentTypes();
                moduleName = nodeWHS.getDisplayCaption(null);

                break;

            case PrintMgmtNodeType::TMS:
                TmsPrintMgmtNode_TMS nodeTMS = new TmsPrintMgmtNode_TMS();
                documentTypes = nodeTMS.getDocumentTypes();
                moduleName = nodeTMS.getDisplayCaption(null);

                break;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported Print management module (%1)', _module));
        }

        return documentTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllPrintMgmtModules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of all print management modules.
    /// </summary>
    /// <returns>List of PrintMgmtNodeType values, with node types that represent the print management modules.</returns>
    public static List getAllPrintMgmtModules()
    {
        List allModules = new List(Types::Enum);

        allModules.addEnd(PrintMgmtNodeType::Purch);
        allModules.addEnd(PrintMgmtNodeType::Sales);
        allModules.addEnd(PrintMgmtNodeType::Project);
        allModules.addEnd(PrintMgmtNodeType::Invent);
        allModules.addEnd(PrintMgmtNodeType::WHS);
        allModules.addEnd(PrintMgmtNodeType::TMS);

        return allModules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSettingsDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper for calling the standard SrsReportRunUtil::showSettingsDialog() method
    /// for displaying the print destination setting form. Main motive is the compiler
    /// warning for enum2Symbol() method, to have only 1 suppression.
    /// </summary>
    /// <param name = "_settings">SRSPrintDestinationSettings object with unpacked print destination settings.</param>
    /// <param name = "_formatName">PrintMgmtReportFormatName format name.</param>
    /// <param name = "_documentType">PrintMgmtDocumentType document type.</param>
    /// <returns>True if user pressed OK on the print destination form, false otherwise</returns>
    public static boolean showSettingsDialog(SRSPrintDestinationSettings _settings,
                                             PrintMgmtReportFormatName _formatName,
                                             PrintMgmtDocumentType _documentType)
    {
        #PrintMgmtSetup

        boolean ok = SrsReportRunUtil::showSettingsDialog(
                        _settings,
                        DocPrintMgmtHelper::isPrintMgmtReport(_formatName) ? #SRSPrintDestinationTokenPrintMgmt : SrsPrintDestinationTokens::defaultTokenType(),
                        enum2Symbol(enumNum(PrintMgmtDocumentType), _documentType));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrintManagementSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a PrintMgmtSettings record based on the provided RecId.
    /// We perform all validations that standard runs in different situations, as documented below before each validation.
    /// </summary>
    /// <param name = "_printMgmtSettingsRecId">RecId of the PringMgmtSettins record to be validated.</param>
    /// <returns>True if record is valid, false otherwise.</returns>
    public static boolean validatePrintManagementSetting(RecId _printMgmtSettingsRecId)
    {
        boolean isValid = true;

        PrintMgmtSettings settings;
        PrintMgmtDocInstance docInstance;

        // 1. Do the related PrintMgmtSettings and PrintMgmtDocInstance records exist?        
        select firstonly settings where settings.RecId == _printMgmtSettingsRecId;
        if (!settings.RecId)
        {
            isValid = false;
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:ErrorPrintMgmtSettingsRecordDoesNotExist", _printMgmtSettingsRecId));
            
            // Nothing to check further
            return isValid;
        }

        select firstonly docInstance where docInstance.RecId == settings.ParentId;
        if (!docInstance.RecId)
        {
            isValid = false;
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:ErrorPrintMgmtDocInstanceRecordDoesNotExist", settings.ParentId));
            
            // Nothing to check further
            return isValid;
        }

        // 2. Conditional setting must have non-empty Description field 
        // PrintMgmtSetupSettings.newSettingsFromRecs() throws error in this case.
        if (settings.PriorityId > 1 && settings.Description == '')
        {
            isValid = false;
            DocGlobalHelper::handleWarning("@DocentricAX4:ErrorConditionalSettingHasEmptyDescription");
        }

        // 3. Conditional setting must have non-null Query
        // PrintMgmtConsistencyCheck.checkInvalidConditionalSettings() method checks if the conditional
        // setting has an associated query.
        if (settings.PriorityId > 1 && settings.QueryPacked == conNull())
        {
            isValid = false;
            DocGlobalHelper::handleWarning("@DocentricAX4:ErrorConditionalSettingHasNoQuery");
        }

        // 3. Query on conditional setting must be valid        
        // PrintMgmtSetupSettings.saveTableFields() tries to create new Query based on the QueryPacked
        // value. This reaches the ContainerHelper::deserialize() method, which throws error
        // while deserializing the provided value.
        if (settings.PriorityId > 1)
        {
            // Try to create a new Query based on the QueryPacked
            try
            {
                new Query(settings.QueryPacked);
            }
            catch
            {
                isValid = false;
                DocGlobalHelper::handleWarning("@DocentricAX4:ErrorConditionalSettingHasInvalidQuery");
            }
        }

        // 4. In case of override, check if the references are correct
        // PrintMgmtConsistencyCheck.checkDocumentReferences() method checks if the override
        // setting refers to a valid table.
        if (docInstance.ReferencedTableId != 0)
        {
            // This is override, check if the referenced document exists in the referenced table.
            // There are many entries in the DocInstanceNodeType, so we can have one long case statement
            // here to check for each of them, but it is more elegant to use a Query as in the
            // standard PrintMgmtConsistencyCheck logic.
            //
            // We want to get this kind of query:
            //
            // select * from PrintMgmtDocInstance where
            //     PrintMgmtDocInstance.ReferencedTableId = <table id> and
            //     exists (select * from <table> where <table>.RecId = PrintMgmtDocInstance.ReferencedRecId)
            
            QueryBuildDataSource qbdsPrintMgmtDocInstance;
            QueryBuildDataSource qbdsRelatedTable;

            Query query = new Query();
            qbdsPrintMgmtDocInstance = query.addDataSource(tablenum(PrintMgmtDocInstance));
            qbdsPrintMgmtDocInstance.addRange(fieldnum(PrintMgmtDocInstance, ReferencedTableId)).value(SysQuery::value(docInstance.ReferencedTableId));

            qbdsRelatedTable = qbdsPrintMgmtDocInstance.addDataSource(docInstance.ReferencedTableId);
            qbdsRelatedTable.addLink(fieldnum(PrintMgmtDocInstance, ReferencedRecId), fieldnum(Common, RecId));
            qbdsRelatedTable.joinMode(JoinMode::ExistsJoin);
            
            QueryRun queryRun = new QueryRun(query);
            if (!queryRun.next())
            {
                // No such join exists.
                isValid = false;
                DocGlobalHelper::handleWarning(strfmt("@SYS110317", docInstance.ReferencedTableId, docInstance.RecId));                           
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSrsBuiltInDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating if SSRS build-in design is used for provided template Id.
    /// </summary>
    /// <param name = "_templateId">Template Id</param>
    /// <returns>True if SSRS build-in design is used; otherwise false</returns>
    public static boolean useSrsBuiltInDesign(DocReportTemplateId _templateId)
    {
        return _templateId == DocConstant::BuiltInSsrsDesignPlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProformaSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the specified print management document type supports a proforma scenario.
    /// </summary>
    /// <param name = "_docType">The print management document type to check for proforma support.</param>
    /// <returns>True if the specified print management document type supports a proforma scenario; otherwise false</returns>
    public static boolean isProformaSupported(PrintMgmtDocumentType _docType)
    {
        // Toggles controls for saving proforma reports to Docentric print destinations if they are supported.
        // If you think that there is a use case and want to see a report proforma be supported, please contact Docentric support. As a work-around try uncommenting as needed.
        switch (_docType)
        {
            // Sales
            case PrintMgmtDocumentType::SalesOrderInvoice:                   // SalesInvoice.Report                   - Customer invoice.                        - Supported.
            case PrintMgmtDocumentType::SalesOrderPackingSlip:               // SalesPackingSlip.Report               - Sales order packing slip.                - Supported.
            case PrintMgmtDocumentType::SalesOrderConfirmation:              // SalesConfirm.Report                   - Sales order confirmation.                - Supported.
            // case PrintMgmtDocumentType::SalesOrderFacture:                // RU only non-SSRS report               - Customer facture.                        - Not supported, not SSRS report.
            // case PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU:        // RU only non-SSRS report               - Sales order - invoice for payment.       - Not supported, not SSRS report.
            // case PrintMgmtDocumentType::SalesFreeTextFacture:             // RU only non-SSRS report               - Free text invoice facture.               - Not supported, not SSRS report.
            case PrintMgmtDocumentType::SalesFreeTextInvoice:                // FreeTextInvoice.Report                - Free text invoice.                       - Supported.
            // case PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU:     // RU only non-SSRS report               - Free text invoice - invoice for payment. - Not supported, not SSRS report.
            // case PrintMgmtDocumentType::Quotation:                        // SalesQuotation.Report                 - Sales quotation.                         - Not supported.
            // case PrintMgmtDocumentType::Confirmation:                     // SalesQuotationConfirmation.Report     - Sales quotation confirmation.            - Not supported.
            case PrintMgmtDocumentType::SalesAgreementConfirmation:          // AgreementConfirmation.Report          - Sales agreement confirmation.            - Supported.
                                                                                                                      
            // Purchase                                                                                               
            case PrintMgmtDocumentType::PurchaseOrderInvoice:                // VendInvoiceDocument.Report            - Purchase order invoice.                  - Supported.
            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:            // PurchPackingSlip.Report               - Purchase order product receipt.          - Supported.
            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:           // PurchReceiptsList.Report              - Purchase order receipts list.            - Supported.
            case PrintMgmtDocumentType::PurchaseOrderRequisition:            // PurchPurchaseOrder.Report             - Purchase order (confirmation).           - Supported.
            // case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest: // PurchPurchaseOrder.Report             - Purchase order inquiry.                  - Not supported.
            // case PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU:        // RU only non-SSRS report               - Purchase order - Invoice for payment.    - Not supported, not SSRS report.
            // case PrintMgmtDocumentType::PurchaseOrderFacture:             // RU only non-SSRS report               - Vendor facture.                          - Not supported, not SSRS report.
            case PrintMgmtDocumentType::PurchAgreementConfirmation:          // AgreementConfirmation.Report          - Purchase agreement confirmation.         - Supported.
                                                                                                                      
            // PurchRFQ                                                                                               
            // case PrintMgmtDocumentType::PurchRFQ:                         // RFQSend.Report                        - Request for quotation.                   - Not supported.
            // case PrintMgmtDocumentType::PurchRFQAccept:                   // RFQSend.Report                        - Request for quotation - Accept.          - Not supported.
            // case PrintMgmtDocumentType::PurchRFQReject:                   // RFQSend.Report                        - Request for quotation - Reject.          - Not supported.
            // case PrintMgmtDocumentType::PurchRFQReturn:                   // RFQSend.Report                        - Request for quotation - Return.          - Not supported.
                                                                                                                      
            // Project                                                                                                
            case PrintMgmtDocumentType::SIProjInvoice:                       // PSAProjInvoice.Report                 - Project invoice without billing rules.   - Supported.
            case PrintMgmtDocumentType::SIProjInvoiceWithBR:                 // PSAContractLineInvoice.Report         - Project invoice with billing rules.      - Supported.
            // case PrintMgmtDocumentType::SIManagedProjInvoice:             // PSAManageInvoice.Report               - User defined project invoice.            - Not supported.
            // case PrintMgmtDocumentType::SIManagedProjInvoiceWithBR:       // N/A                                   - N/A                                      - Not supported, not used in any controller?
            // case PrintMgmtDocumentType::ProjectInvoice:                   // ProjInvoice.Report                    - Obsolete Project invoice.                - Not supported, obsolete.
            // case PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice:  // PSACustRetentionReleaseInvoice.Report - Customer retention release.              - Not supported.
            // case PrintMgmtDocumentType::ProjDebitNote_BR:                 // ProjDebitNoteBR.Report                - Brazil only debit note.                  - Not supported.
            // case PrintMgmtDocumentType::ProjectQuotation:                 // PSAQuotations.Report                  - Project quotation                        - Not supported.
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>