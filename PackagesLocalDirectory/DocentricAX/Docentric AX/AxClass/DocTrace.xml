<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTrace</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class DocTrace is used as a helper class for tracing when running a report.
/// </summary>
public class DocTrace
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>traceToInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the trace message to Infolog.
    /// </summary>
    /// <param name = "_category">Trace category</param>
    /// <param name = "_event">Trace event</param>
    /// <param name = "_severity">Trace message severity</param>
    /// <param name = "_message">Trace message</param>
    private static void traceToInfolog(DocTraceCategory _category, DocTraceEvent _event, DocMessageSeverity _severity, DocMessage _message)
    {
        DocMessage traceMessage = strFmt('(%1) %2 %3 *** %4', DateTimeUtil::getSystemDateTime(), _category, _event, _message);

        switch (_severity)
        {
            case DocMessageSeverity::Info:
                DocGlobalHelper::handleInfo(traceMessage);
                break;
            case DocMessageSeverity::Warning:
                DocGlobalHelper::handleWarning(traceMessage);
                break;
            case DocMessageSeverity::Error:
                DocGlobalHelper::handleError(traceMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceToDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the trace message to Database.
    /// </summary>
    /// <param name = "_category">Trace category</param>
    /// <param name = "_event">Trace event</param>
    /// <param name = "_severity">Trace message severity</param>
    /// <param name = "_message">Trace message</param>
    /// <param name = "_traceContext">Trace context</param>
    private static void traceToDatabase(DocTraceCategory _category, DocTraceEvent _event, DocMessageSeverity _severity, DocMessage _message, IDocTraceContext _traceContext = null)
    {
        DocTraceTable::writeMessage(_category, _event, _severity, _message, _traceContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>info</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the info trace message to Infolog, File, Database, etc. if the tracing is enabled for the given trace category.
    /// </summary>
    /// <param name = "_traceCategory">Trace category</param>
    /// <param name = "_traceEvent">Trace event</param>
    /// <param name = "_traceMessage">Trace message</param>
    /// <param name = "_traceContext">Object which can provide context information</param>
    public static void info(DocTraceCategory _traceCategory, DocTraceEvent _traceEvent, DocMessage _traceMessage, IDocTraceContext _traceContext = null)
    {
        if (DocTraceParam::isEnabled(_traceCategory))
        {
            // Trace the message to Infolog.
            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceTraceToInfolog))
            {
                DocTrace::traceToInfolog(_traceCategory, _traceEvent, DocMessageSeverity::Info, _traceMessage);
            }

            // Trace the message to Database.
            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceTraceToDatabase))
            {
                DocTrace::traceToDatabase(_traceCategory, _traceEvent, DocMessageSeverity::Info, _traceMessage, _traceContext);
            }

            // Add here tracing to other outputers if they are activated.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>warning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the warning trace message to Infolog, File, Database, etc. if the tracing is enabled for the given trace category.
    /// </summary>
    /// <param name = "_traceCategory">Trace category</param>
    /// <param name = "_traceEvent">Trace event</param>
    /// <param name = "_traceMessage">Trace message</param>
    /// <param name = "_traceContext">Object which can provide context information</param>
    public static void warning(DocTraceCategory _traceCategory, DocTraceEvent _traceEvent, DocMessage _traceMessage, IDocTraceContext _traceContext = null)
    {
        if (DocTraceParam::isEnabled(_traceCategory))
        {
            // Trace the message to Infolog.
            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceTraceToInfolog))
            {
                DocTrace::traceToInfolog(_traceCategory, _traceEvent, DocMessageSeverity::Warning, _traceMessage);
            }

            // Trace the message to Database.
            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceTraceToDatabase))
            {
                DocTrace::traceToDatabase(_traceCategory, _traceEvent, DocMessageSeverity::Warning, _traceMessage, _traceContext);
            }

            // Add here tracing to other outputers if they are activated.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>error</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the error trace message to Infolog, File, Database, etc. if the tracing is enabled for the given trace category.
    /// </summary>
    /// <param name = "_traceCategory">Trace category</param>
    /// <param name = "_traceEvent">Trace event</param>
    /// <param name = "_traceMessage">Trace message</param>
    /// <param name = "_traceContext">Object which can provide context information</param>
    public static void error(DocTraceCategory _traceCategory, DocTraceEvent _traceEvent, DocMessage _traceMessage, IDocTraceContext _traceContext = null)
    {
        if (DocTraceParam::isEnabled(_traceCategory))
        {
            // Trace the message to Infolog.
            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceTraceToInfolog))
            {
                DocTrace::traceToInfolog(_traceCategory, _traceEvent, DocMessageSeverity::Error, _traceMessage);
            }

            // Trace the message to Database.
            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceTraceToDatabase))
            {
                DocTrace::traceToDatabase(_traceCategory, _traceEvent, DocMessageSeverity::Error, _traceMessage, _traceContext);
            }

            // Add here tracing to other outputers if they are activated.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTraceCategoryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true, if the provided trace category is enabled.
    /// </summary>
    /// <param name = "_traceCategory">Trace category</param>
    /// <returns>True, if the provided trace category is enabled</returns>
    public static boolean isTraceCategoryEnabled(DocTraceCategory _traceCategory)
    {
        return DocTraceParam::isEnabled(_traceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceDRADocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads EMF pages and print job settings XML sent to DRA for test purposes
    /// </summary>
    /// <param name = "_activityId">Activity Id</param>
    /// <param name = "_pages">List of EMF pages</param>
    /// <param name = "_printJobSettingsXml">Print job settings XML</param>
    public static void traceDRADocument(System.Guid _activityId, System.Collections.IList _pages, str _printJobSettingsXml)
    {
        str             fileName = guid2Str(_activityId) + '_PrintJobSettings.xml';
        System.Byte[]   byteArray = System.Text.Encoding::get_UTF8().GetBytes(_printJobSettingsXml);
        int             pagesCnt = _pages.get_Count();

        DocFileMngHelper::sendFileToUser(new System.IO.MemoryStream(byteArray), fileName, '', '', '', classStr(DocFileUploadTemporaryStorageStrategy), true, true);

        for (int i=0; i<pagesCnt; i++)
        {
            fileName = strFmt('%1_page%2.emf', guid2Str(_activityId), i + 1);
            byteArray = Docentric.AX.Framework.Utilities.ListHelper::GetItem(_pages, i);
            DocFileMngHelper::sendFileToUser(new System.IO.MemoryStream(byteArray), fileName, '', '', '', classStr(DocFileUploadTemporaryStorageStrategy), true, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceDDSP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the runtime DDSP file.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    protected static void traceDDSP(DocPrintReportSettings _printReportSettings)
    {
        using (System.IO.MemoryStream ddspMemoryStream = DocGlobalHelper::saveXmlToMemoryStream(_printReportSettings.parmXmlDataSourceStr()))
        {
            Filename ddspFilename = strFmt('%1_DDSP_%2_%3.%4', 
                                           _printReportSettings.parmPrintDestination(),
                                           _printReportSettings.parmReportId(),
                                           _printReportSettings.getCurrentExecutionIdStr(),
                                           DocConstantFile::FileExtDdsp);
            DocFileMngHelper::sendFileToUser(ddspMemoryStream, ddspFilename, DocConstantFile::MimeTypeDdsp, '', '', '', true, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceDocentricTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the runtime Docentric report template.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    protected static void traceDocentricTemplate(DocPrintReportSettings _printReportSettings)
    {
        str templateId = _printReportSettings.parmSrsReportContract().parmPrintSettings().parmSrsPrintReportSettings_DC().parmTemplateId();

        if (templateId == DocConstant::BuiltInSsrsDesignPlaceholder)
        {
            return;
        }
        else if (templateId == '') // @DOCENTRIC_DEFAULT_TEMPLATE@
        {
            templateId = DocReportTable::findDefaultTemplateReportId(_printReportSettings.parmReportId(), _printReportSettings.parmCompanyId(), _printReportSettings.parmLanguageId(), false).TemplateId;
        }
        
        using (System.IO.MemoryStream templateMS = DocReportTemplate::getTemplateContent(templateId, _printReportSettings.parmCompanyId(), _printReportSettings.parmLanguageId()))
        {
            Filename templateFilename = strFmt('%1_Template_%2_%3_%4.%5', 
                                               _printReportSettings.parmPrintDestination(),
                                               templateId,
                                               _printReportSettings.parmReportId(), 
                                               _printReportSettings.getCurrentExecutionIdStr(), 
                                               DocConstantFile::FileExtDocx);

            DocFileMngHelper::sendFileToUser(templateMS, templateFilename, '', '', '', '', true, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceGeneratedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the runtime generated report content in a predefined file format.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    protected static void traceGeneratedDocument(DocPrintReportSettings _printReportSettings)
    {
        System.IO.MemoryStream generatedDocumentMemoryStream = _printReportSettings.parmPrintedReport().getReportContentMemoryStream();
        if (generatedDocumentMemoryStream == null)
        {
            return;
        }

        Filename generatedDocumentFilename = strFmt('%1_GeneratedDocument_%2_%3.%4',
                                                    _printReportSettings.parmPrintDestination(),
                                                    _printReportSettings.parmReportId(),
                                                    _printReportSettings.getCurrentExecutionIdStr(),
                                                    _printReportSettings.parmPrintedReport().getOutputFileFormat());

        DocFileMngHelper::sendFileToUser(generatedDocumentMemoryStream, generatedDocumentFilename, '', '', '', '', true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceReportDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// If configured so in the DocTraceParam table, the report execution files will be downloaded in the browser:
    /// DDSP, Docentric template and generated document (based on SSRS original design or Docentric template).
    /// - When printing to Generate DS print destination, dumping of report execution files is not supported.
    /// - When printing to Docentric Printer print destinations on premises, dumping of report execution files is not supported.
    /// - When printing to Docentric Printer print destinations in cloud with the Print as PDF option turned off, dumping of generated documents is not supported.
    /// - When printing to Docentric Printer print destination in cloud with the Print as PDF option turned on, dumping of report execution files is supported.
    /// - For tracing report execution files when printing to Docentric Memory print destination, the additional trace parameter TraceGeneratedDocumentInMemory should be enabled.
    /// - Dumping of report execution files is not supported when running in batch.
    /// </summary>
    /// <param name = "_printReportSettings">An object with the runtime DDSP, Docentric template and generated document</param>
    public static void traceReportDocument(DocPrintReportSettings _printReportSettings)
    {
        if (!DocGlobalHelper::isNonInteractiveSession())
        {
            if (_printReportSettings.parmPrintDestination() == DocPrintDestination::Memory &&
                !DocTraceParam::isEnabled(DocConstantDiagnostics::TraceGeneratedDocumentInMemory))
            {
                return;
            }

            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceDDSP))
            {
                DocTrace::traceDDSP(_printReportSettings);
            }

            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceDocentricTemplate))
            {
                DocTrace::traceDocentricTemplate(_printReportSettings);
            }

            if (DocTraceParam::isEnabled(DocConstantDiagnostics::TraceGeneratedDocument))
            {
                DocTrace::traceGeneratedDocument(_printReportSettings);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>