<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocCodeGeneratorHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocCodeGeneratorHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCode_TableDisplayMethods</Name>
				<Source><![CDATA[
    public static str generateCode_TableDisplayMethods(TableName _tableName,
                                                       DocCodeGeneratorOptions _codeGeneratorOptions = DocCodeGeneratorOptions::GenerateAsList,
                                                       str _objectName = '_addingRecord',
                                                       str _filterText = '',
                                                       DocFilterTextOptions _filterTextOption = DocFilterTextOptions::StartsWith)
    {
        str                 methodName;
        str                 tableMethodsCode, codeForMethod;
        SysDictTable        sysDictTable;
        TableId             tableId;
        Set                 methodSet;
        SetEnumerator       enumerator;
        SysDictMethod       sysDictMethod;
    
    
        if (_tableName == '')
        {
            DocGlobalHelper::handleWarning('Table name is not provided');
            return '';
        }
    
        tableId = tableName2id(_tableName);
        if (tableId == 0)
        {
            DocGlobalHelper::handleWarning(strFmt('Table ID does not exist for the table %1', _tableName));
            return '';
        }
    
        sysDictTable = new SysDictTable(tableId);
        if (sysDictTable == null)
        {
            DocGlobalHelper::handleWarning(strFmt('SysDictTable object failed to be instanced for the table %1', _tableName));
            return '';
        }
    
        tableMethodsCode = '';
        methodSet = sysDictTable.methods(true, false, true);
        enumerator = methodSet.getEnumerator();
    
        while (enumerator.moveNext())
        {
            sysDictMethod = enumerator.current();
    
            // Consider only display methods.
            if (sysDictMethod.displayType() != DisplayFunctionType::Get)
            {
                continue;
            }
    
            methodName = sysDictMethod.name();
            if (strStartsWith(methodName, 'DEL_'))
            {
                continue;
            }
    
            if (_filterText != '')
            {
                switch (_filterTextOption)
                {
                    case DocFilterTextOptions::StartsWith:
                        if (!strStartsWith(methodName, _filterText))
                        {
                            continue;
                        }
                        break;
    
                    case DocFilterTextOptions::EndsWith:
                        if (!strEndsWith(methodName, _filterText))
                        {
                            continue;
                        }
                        break;
    
                    case DocFilterTextOptions::Contains:
                        if (strScan(methodName, _filterText, 1, strLen(methodName)) == 0)
                        {
                            continue;
                        }
                        break;
    
                    default:
                        DocGlobalHelper::handleException(funcName(), strFmt('Unsupported DocFilterTextOptions element %1', _filterTextOption));
                }
            }
    
            codeForMethod = strFmt('tableMethodStr(%1, %2)', _tableName, methodName);
    
            switch (_codeGeneratorOptions)
            {
                case DocCodeGeneratorOptions::GenerateAsList:
                    if (tableMethodsCode == '')
                    {
                        tableMethodsCode = codeForMethod;
                    }
                    else
                    {
                        tableMethodsCode = tableMethodsCode + ',\n' + codeForMethod;
                    }
                    break;
    
                case DocCodeGeneratorOptions::GenerateAsMethodCallList:
                    if (_objectName != '')
                    {
                        codeForMethod = _objectName + '.addDisplayMethod(' +  codeForMethod + ');';
                    }
                    if (tableMethodsCode == '')
                    {
                        tableMethodsCode = codeForMethod;
                    }
                    else
                    {
                        tableMethodsCode = tableMethodsCode + '\n' + codeForMethod;
                    }
                    break;
    
                default:
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported DocCodeGeneratorOptions element %1', _codeGeneratorOptions));
            }
        }
    
        return tableMethodsCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCode_TableFieldGroups</Name>
				<Source><![CDATA[
    public static str generateCode_TableFieldGroups(TableName _tableName,
                                                    DocCodeGeneratorOptions _codeGeneratorOptions = DocCodeGeneratorOptions::GenerateAsList,
                                                    str _objectName = '_addingRecord',
                                                    str _filterText = '',
                                                    DocFilterTextOptions _filterTextOption = DocFilterTextOptions::StartsWith)
    {
        str             fieldGroupName;
        str             tableFieldGroupsCode, codeForFieldGroup;
        SysDictTable    sysDictTable;
        int             i, fieldGroupNo;
        TableId         tableId;
    
    
        if (_tableName == '')
        {
            DocGlobalHelper::handleWarning('Table name is not provided');
            return '';
        }
    
        tableId = tableName2id(_tableName);
        if (tableId == 0)
        {
            DocGlobalHelper::handleWarning(strFmt('Table ID does not exist for the table %1', _tableName));
            return '';
        }
    
        sysDictTable = new SysDictTable(tableId);
        if (sysDictTable == null)
        {
            DocGlobalHelper::handleWarning(strFmt('SysDictTable object failed to be instanced for the table %1', _tableName));
            return '';
        }
    
        tableFieldGroupsCode = '';
        fieldGroupNo = sysDictTable.fieldGroupCnt(TableScope::IncludeBaseTables);
        for (i = 1; i <= fieldGroupNo; i++)
        {
            fieldGroupName = sysDictTable.fieldGroup(i, TableScope::IncludeBaseTables);
    
            if (strStartsWith(fieldGroupName, 'DEL_'))
            {
                continue;
            }
    
            if (_filterText != '')
            {
                switch (_filterTextOption)
                {
                    case DocFilterTextOptions::StartsWith:
                        if (!strStartsWith(fieldGroupName, _filterText))
                        {
                            continue;
                        }
                        break;
    
                    case DocFilterTextOptions::EndsWith:
                        if (!strEndsWith(fieldGroupName, _filterText))
                        {
                            continue;
                        }
                        break;
    
                    case DocFilterTextOptions::Contains:
                        if (strScan(fieldGroupName, _filterText, 1, strLen(fieldGroupName)) == 0)
                        {
                            continue;
                        }
                        break;
    
                    default:
                        DocGlobalHelper::handleException(funcName(), strFmt('Unsupported DocFilterTextOptions element %1', _filterTextOption));
                }
            }
    
            codeForFieldGroup = strFmt('tableFieldgroupStr(%1, %2)', _tableName, fieldGroupName);
            switch (_codeGeneratorOptions)
            {
                case DocCodeGeneratorOptions::GenerateAsList:
                    if (tableFieldGroupsCode == '')
                    {
                        tableFieldGroupsCode = codeForFieldGroup;
                    }
                    else
                    {
                        tableFieldGroupsCode = tableFieldGroupsCode + ',\n' + codeForFieldGroup;
                    }
                    break;
    
                case DocCodeGeneratorOptions::GenerateAsMethodCallList:
                    if (_objectName != '')
                    {
                        codeForFieldGroup = _objectName + '.addFieldGroup(' +  codeForFieldGroup + ');';
                    }
                    if (tableFieldGroupsCode == '')
                    {
                        tableFieldGroupsCode = codeForFieldGroup;
                    }
                    else
                    {
                        tableFieldGroupsCode = tableFieldGroupsCode + '\n' + codeForFieldGroup;
                    }
                    break;
    
                default:
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported DocCodeGeneratorOptions element %1', _codeGeneratorOptions));
            }
        }
    
    
        return tableFieldGroupsCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCode_TableFields</Name>
				<Source><![CDATA[
    public static str generateCode_TableFields(TableName _tableName,
                                               DocCodeGeneratorOptions _codeGeneratorOptions = DocCodeGeneratorOptions::GenerateAsList,
                                               str _objectName = '_addingRecord',
                                               str _filterText = '',
                                               DocFilterTextOptions _filterTextOption = DocFilterTextOptions::StartsWith,
                                               boolean _includeSystemFields = false)
    {
        str             tableFieldsCode, codeForField;
        SysDictField    sysDictField;
        SysDictTable    sysDictTable;
        int             i;
        TableId         tableId;
        FieldId         fieldId;
        FieldName       fieldName;
    
    
        if (_tableName == '')
        {
            DocGlobalHelper::handleWarning('Table name is not provided');
            return '';
        }
    
        tableId = tableName2id(_tableName);
        if (tableId == 0)
        {
            DocGlobalHelper::handleWarning(strFmt('Table ID does not exist for the table %1', _tableName));
            return '';
        }
    
        sysDictTable = new SysDictTable(tableId);
        if (sysDictTable == null)
        {
            DocGlobalHelper::handleWarning(strFmt('SysDictTable object failed to be instanced for the table %1', _tableName));
            return '';
        }
    
        tableFieldsCode = '';
        for (i = 1; i <= sysDictTable.fieldCnt(TableScope::IncludeBaseTables); i++)
        {
            // Note: The fieldCntWithoutSys() method is not used because it has a performance issue.
    
            fieldId = sysDictTable.fieldCnt2Id(i, TableScope::IncludeBaseTables);
            sysDictField = new SysDictField(tableId, fieldId);
    
            fieldName = sysDictField.name();
    
            if (!_includeSystemFields && sysDictField.isSystem() || strStartsWith(fieldName, 'DEL_'))
            {
                continue;
            }
    
            if (_filterText != '')
            {
                switch (_filterTextOption)
                {
                    case DocFilterTextOptions::StartsWith:
                        if (!strStartsWith(fieldName, _filterText))
                        {
                            continue;
                        }
                        break;
    
                    case DocFilterTextOptions::EndsWith:
                        if (!strEndsWith(fieldName, _filterText))
                        {
                            continue;
                        }
                        break;
    
                    case DocFilterTextOptions::Contains:
                        if (strScan(fieldName, _filterText, 1, strLen(fieldName)) == 0)
                        {
                            continue;
                        }
                        break;
    
                    default:
                        DocGlobalHelper::handleException(funcName(), strFmt('Unsupported DocFilterTextOptions element %1', _filterTextOption));
                }
            }
    
            codeForField = strFmt('fieldStr(%1, %2)', _tableName, fieldName);
    
            switch (_codeGeneratorOptions)
            {
                case DocCodeGeneratorOptions::GenerateAsList:
                    if (tableFieldsCode == '')
                    {
                        tableFieldsCode = codeForField;
                    }
                    else
                    {
                        tableFieldsCode = tableFieldsCode + ',\n' + codeForField;
                    }
                    break;
    
                case DocCodeGeneratorOptions::GenerateAsMethodCallList:
                    if (_objectName != '')
                    {
                        codeForField = _objectName + '.addField(' +  codeForField + ');';
                    }
                    if (tableFieldsCode == '')
                    {
                        tableFieldsCode = codeForField;
                    }
                    else
                    {
                        tableFieldsCode = tableFieldsCode + '\n' + codeForField;
                    }
                    break;
    
                default:
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported DocCodeGeneratorOptions element %1', _codeGeneratorOptions));
            }
        }
    
        return tableFieldsCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        /*** Generate the code for adding TABLE FIELDS from particular table to a data record of DS record tree ***/
        // Generate the code for adding all fields from the SalesInvoiceTmp table to '_addingRecord' object.
        info(DocCodeGeneratorHelper::generateCode_TableFields(tableStr(SalesInvoiceTmp),
                                                              DocCodeGeneratorOptions::GenerateAsMethodCallList));
    
        /* Filter which fields you want to include in the generated code */
        // Include all fields whose names contain 'company' as a substring.
        info(DocCodeGeneratorHelper::generateCode_TableFields(tableStr(SalesInvoiceHeaderFooterTmp),
                                                              DocCodeGeneratorOptions::GenerateAsList,
                                                              '', 'company', DocFilterTextOptions::Contains));
    
        // Inlcude all fieds whose names end with the 'Num' string.
        info(DocCodeGeneratorHelper::generateCode_TableFields(tableStr(SalesInvoiceTmp),
                                                              DocCodeGeneratorOptions::GenerateAsMethodCallList,
                                                              'dataRecord',
                                                              'Num', DocFilterTextOptions::EndsWith));
    
        // Generate the code for all fields including the system fields.
        info(DocCodeGeneratorHelper::generateCode_TableFields(tableStr(SalesInvoiceTmp),
                                                              DocCodeGeneratorOptions::GenerateAsMethodCallList,
                                                              '_addingRecord', '', 0, true));
    
    
        /*** Generate the code for adding TABLE FIELD GROUPS from particular table to a data record of DS record tree ***/
        // Generate the code for adding all field groups from the SalesTable table to '_addingRecord' object.
        info(DocCodeGeneratorHelper::generateCode_TableFieldGroups(tableStr(SalesTable),
                                                                   DocCodeGeneratorOptions::GenerateAsMethodCallList));
    
        /* Filter which field groups you want to include in the generated code */
        // Include all field groups whose names contain 'Sales' as a substring.
        info(DocCodeGeneratorHelper::generateCode_TableFieldGroups(tableStr(SalesTable),
                                                                   DocCodeGeneratorOptions::GenerateAsList,
                                                                   '', 'Sales', DocFilterTextOptions::Contains));
    
    
        /*** Generate the code for adding TABLE DISPLAY METHODS from particular table to a data record of DS record tree ***/
        // Generate the code for adding all display methods from the SalesTable table to '_addingRecord' object.
        info(DocCodeGeneratorHelper::generateCode_TableDisplayMethods(tableStr(SalesTable),
                                                                      DocCodeGeneratorOptions::GenerateAsMethodCallList));
    
        /* Filter which display methods you want to include in the generated code */
        // Include all display methods whose names contain 'Sales' as a substring.
        info(DocCodeGeneratorHelper::generateCode_TableDisplayMethods(tableStr(SalesTable),
                                                                      DocCodeGeneratorOptions::GenerateAsList,
                                                                      '', 'Sales', DocFilterTextOptions::Contains));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>