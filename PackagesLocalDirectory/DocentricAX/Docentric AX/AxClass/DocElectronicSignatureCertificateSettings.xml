<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocElectronicSignatureCertificateSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocElectronicSignatureCertificateSettings
{
    private DocCertificateId certificateId;
    private CompanyId companyId;
    private System.Byte[] certificate;
    private DocCertificateThumbprint certificateThumbprint;
    private str azureKeyVaultApplicationId;
    private str azureKeyVaultUrl;
    private str azureKeyVaultSecret;
    private str azureKeyVaultSecretIdentifier;
    private str azureKeyVaultKeyIdentifier;
    private DocCertificateStorage certificateStorage;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCertificateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the certificate Id.
    /// </summary>
    /// <param name = "_certificateId">Certificate Id</param>
    /// <returns>Certificate Id</returns>
    public DocCertificateId parmCertificateId(DocCertificateId _certificateId = certificateId)
    {
        certificateId = _certificateId;
        return certificateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current company that is active when the object is constructed.
    /// </summary>
    /// <returns>Current company</returns>
    public CompanyId getCompanyId()
    {
        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the certificate storage.
    /// </summary>
    /// <param name = "_certificateStorage">Certificate storage</param>
    /// <returns>Certificate storage</returns>
    public DocCertificateStorage parmCertificateStorage(DocCertificateStorage _certificateStorage = certificateStorage)
    {
        certificateStorage = _certificateStorage;
        return certificateStorage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PFX certificate as byte array.
    /// </summary>
    /// <param name = "_certificate">PFX certificate</param>
    /// <returns>PFX certificate as byte array</returns>
    public System.Byte[] parmCertificate(System.Byte[] _certificate = certificate)
    {
        certificate = _certificate;
        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateThumbprint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the certificate thumbprint.
    /// </summary>
    /// <param name = "_certificateThumbprint">Certificate thumbprint</param>
    /// <returns>Certificate thumbprint</returns>
    public DocCertificateThumbprint parmCertificateThumbprint(DocCertificateThumbprint _certificateThumbprint = certificateThumbprint)
    {
        certificateThumbprint = _certificateThumbprint;
        return certificateThumbprint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAzureKeyVaultApplicationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Azure key vault application Id.
    /// </summary>
    /// <param name = "_azureKeyVaultApplicationId">Azure key vault application Id</param>
    /// <returns>Azure key vault application Id</returns>
    public str parmAzureKeyVaultApplicationId(str _azureKeyVaultApplicationId = azureKeyVaultApplicationId)
    {
        azureKeyVaultApplicationId = _azureKeyVaultApplicationId;
        return azureKeyVaultApplicationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAzureKeyVaultUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Azure key vault URL.
    /// </summary>
    /// <param name = "_azureKeyVaultUrl">Azure key vault URL</param>
    /// <returns>Azure key value URL</returns>
    public str parmAzureKeyVaultUrl(str _azureKeyVaultUrl = azureKeyVaultUrl)
    {
        azureKeyVaultUrl = _azureKeyVaultUrl;
        return azureKeyVaultUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAzureKeyVaultSecret</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Azure key vault secret.
    /// </summary>
    /// <param name = "_azureKeyVaultSecret">Azure key vault secret</param>
    /// <returns>Azure key value secret</returns>
    public str parmAzureKeyVaultSecret(str _azureKeyVaultSecret = azureKeyVaultSecret)
    {
        azureKeyVaultSecret = _azureKeyVaultSecret;
        return azureKeyVaultSecret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAzureKeyVaultSecretIdentifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Azure key vault secret identifier.
    /// </summary>
    /// <param name = "_azureKeyVaultSecretIdentifier">Azure key vault secret identifier</param>
    /// <returns>Azure key vault secret identifier</returns>
    public str parmAzureKeyVaultSecretIdentifier(str _azureKeyVaultSecretIdentifier = azureKeyVaultSecretIdentifier)
    {
        azureKeyVaultSecretIdentifier = _azureKeyVaultSecretIdentifier;
        return azureKeyVaultSecretIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAzureKeyVaultKeyIdentifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Azure key vault key identifier.
    /// </summary>
    /// <param name = "_azureKeyVaultKeyIdentifier">Azure key vault key identifier</param>
    /// <returns>Azure key vault key identifier</returns>
    public str parmAzureKeyVaultKeyIdentifier(str _azureKeyVaultKeyIdentifier = azureKeyVaultKeyIdentifier)
    {
        azureKeyVaultKeyIdentifier = _azureKeyVaultKeyIdentifier;
        return azureKeyVaultKeyIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocElectronicSignatureCertificateSettings class.
    /// </summary>
    /// <param name = "_certificateId">Certificate Id</param>
    /// <param name = "_companyId">Company Id</param>
    /// <returns>An instance of DocElectronicSignatureCertificateSettings class</returns>
    public static DocElectronicSignatureCertificateSettings construct(DocCertificateId _certificateId, CompanyId _companyId = curext())
    {
        DocElectronicSignatureCertificateSettings signatureCertificateSettings;

        changecompany(_companyId)
        {
            DocElectronicSignatureCertificate signatureCertificate = DocElectronicSignatureCertificate::find(_certificateId);
            if (signatureCertificate)
            {
                signatureCertificateSettings = new DocElectronicSignatureCertificateSettings();

                signatureCertificateSettings.parmCertificateId(signatureCertificate.CertificateId);
                signatureCertificateSettings.companyId = _companyId;
                signatureCertificateSettings.parmCertificateStorage(signatureCertificate.CertificateStorage);
                signatureCertificateSettings.parmCertificate(signatureCertificate.getCertificate());
                signatureCertificateSettings.parmCertificateThumbprint(signatureCertificate.Thumbprint);

                if (signatureCertificate.KeyVaultCertificate)
                {
                    KeyVaultCertificateTable keyVaultCertificateTable = KeyVaultCertificateTable::findRecId(signatureCertificate.KeyVaultCertificate);
                    if (keyVaultCertificateTable.KeyVaultRef)
                    {
                        KeyVaultParameters keyVaultParameters = KeyVaultParameters::findRecId(keyVaultCertificateTable.KeyVaultRef);
                        if (keyVaultParameters)
                        {
                            signatureCertificateSettings.parmAzureKeyVaultApplicationId(keyVaultParameters.AppClientId);
                            signatureCertificateSettings.parmAzureKeyVaultUrl(keyVaultParameters.Url);
                            signatureCertificateSettings.parmAzureKeyVaultSecret(keyVaultParameters.getClientSecretKey());
                            signatureCertificateSettings.parmAzureKeyVaultSecretIdentifier(keyVaultCertificateTable.KeyVaultCertificate);
                            signatureCertificateSettings.parmAzureKeyVaultKeyIdentifier(keyVaultCertificateTable.KeyVaultCertificate);
                        }
                    }
                }
            }
        }

        return signatureCertificateSettings;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>