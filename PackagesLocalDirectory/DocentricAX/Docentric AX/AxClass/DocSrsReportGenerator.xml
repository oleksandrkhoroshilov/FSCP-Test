<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSrsReportGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocSrsReportGenerator
{
    SrsReportRunController controller;
    SRSPrintDestinationSettings pds;
    container reportContentAsContainer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SrsReportRunController _controller)
    {
        if (_controller == null || _controller.parmReportName() == '' || _controller.parmReportContract() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameters controller, report name or report contract are not set');
        }

        controller = _controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationSettings</Name>
				<Source><![CDATA[
    public SRSPrintDestinationSettings getPrintDestinationSettings()
    {
        pds = controller.parmReportContract().parmPrintSettings();
        if (pds == null)
        {
            pds = new SRSPrintDestinationSettings();
            controller.parmReportContract().parmPrintSettings(pds);
        }
        return pds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintDestinationSettings_DocentricReport</Name>
				<Source><![CDATA[
    public void setPrintDestinationSettings_DocentricReport(DocOutputFileFormat _docentricOutputFileFormat, str _docentricTemplateId = '')
    {
        pds = this.getPrintDestinationSettings();

        // Set the target print destination.
        pds.printMediumType(SRSPrintMediumType::Memory_DC);
        pds.parmMemoryPrintDestSettings_DC().parmOutputFileFormat(_docentricOutputFileFormat);
        pds.parmMemoryPrintDestSettings_DC().parmUseSsrsBuiltInDesign(false);

        // Set general report print settings.
        pds.parmSrsPrintReportSettings_DC().setProperty_PrintSrsOriginalDesign(false);
        pds.parmSrsPrintReportSettings_DC().parmTemplateId(_docentricTemplateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintDestinationSettings_SsrsReport</Name>
				<Source><![CDATA[
    public void setPrintDestinationSettings_SsrsReport(SRSReportFileFormat _ssrsOutputFileFormat)
    {
        pds = this.getPrintDestinationSettings();
        
        // Set the target print destination.
        pds.printMediumType(SRSPrintMediumType::Memory_DC);
        pds.parmMemoryPrintDestSettings_DC().parmOutputFileFormatSrs(_ssrsOutputFileFormat);
        pds.parmMemoryPrintDestSettings_DC().parmUseSsrsBuiltInDesign(true);

        // Set general report print settings.
        pds.parmSrsPrintReportSettings_DC().setProperty_PrintSrsOriginalDesign(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocentricReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates report based on a Docentric template as container.
    /// </summary>
    /// <param name = "_docentricOutputFileFormat">Docentric output file format</param>
    /// <param name = "_docentricTemplateId">Template ID; leave empty if Docentric default template should be used.</param>
    /// <returns>Generated report as container</returns>
    public container generateDocentricReport(DocOutputFileFormat _docentricOutputFileFormat = DocOutputFileFormat::PDF, str _docentricTemplateId = '')
    {
        this.setPrintDestinationSettings_DocentricReport(_docentricOutputFileFormat, _docentricTemplateId);
        return this.startOperationSynchronouslyAndGetReportContent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSsrsReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate SSRS report using SSRS Reporting Services as container.
    /// </summary>
    /// <param name = "_ssrsOutputFileFormat">SSRS output file format</param>
    /// <returns>Generated report as container</returns>
    public container generateSsrsReport(SRSReportFileFormat _ssrsOutputFileFormat = SRSReportFileFormat::PDF)
    {
        this.setPrintDestinationSettings_SsrsReport(_ssrsOutputFileFormat);
        return this.startOperationSynchronouslyAndGetReportContent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates SSRS report or Docentric report.
    /// Use this method in combination with the setPrintDestinationSettings_DocentricReport() and
    /// and setPrintDestinationSettings_SsrsReport() methods.
    /// </summary>
    /// <returns>Generated report as container</returns>
    public container generateReport()
    {
        void validateParameters()
        {
            if (pds == null)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter Print destination settings is not set');
            }

            if (pds.printMediumType() != SRSPrintMediumType::Memory_DC)
            {
                DocGlobalHelper::handleException(funcName(),
                    strFmt('Target print destination (%1) is not set to Docentric Memory print destination', pds.printMediumType()));
            }

            if (pds.parmMemoryPrintDestSettings_DC().parmUseSsrsBuiltInDesign() !=
                pds.parmSrsPrintReportSettings_DC().printSrsOriginalDesign())
            {
                DocGlobalHelper::handleException(funcName(), 
                    strFmt('Flag pds.parmMemoryPrintDestSettings_DC().parmUseSsrsBuiltInDesign() = %1 differs from pds.parmSrsPrintReportSettings_DC().printSrsOriginalDesign() = %2',
                           pds.parmMemoryPrintDestSettings_DC().parmUseSsrsBuiltInDesign(), pds.parmSrsPrintReportSettings_DC().printSrsOriginalDesign()));
            }
        }

        try
        {
            validateParameters();
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), this.getErrorMessage());
        }

        return this.startOperationSynchronouslyAndGetReportContent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperationSynchronouslyAndGetReportContent</Name>
				<Source><![CDATA[
    protected container startOperationSynchronouslyAndGetReportContent()
    {       
        try
        {
            // Register event handler for the RenderingComplete event to get the report content.
            controller.renderingCompleted += eventhandler(this.renderingComplete);

            // Report execution mode has to be Synchronous mode in order to block the execution until the report is not generated.
            controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);

            // Don't show the report dialog.
            controller.parmShowDialog(false);

            // Do not load the report parameter values from SysLastValue nor save them to SysLastValue.
            controller.parmLoadFromSysLastValue(false);

            // Start the report execution; it will wait until the controller completes, i.e. until
            // the renderingComplete event handler, which sets reportContentAsContainer, completes.
            controller.startOperation();

            // Unregister the event handler for the RenderingComplete event.
            controller.renderingCompleted -= eventhandler(this.renderingComplete);
        }
        catch(Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), this.getErrorMessage());
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), this.getErrorMessage());
        }

        return reportContentAsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    protected void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        try
        {
            // Get the report execution info.
            if (_eventArgs.parmReportExecutionInfo() != null)
            {
                DocReportExecutionInfo reportExecutionInfo = _eventArgs.parmReportExecutionInfo().parmReportExecutionInfo_DC();
                DocPrintReportToMemoryExecutionInfo printDestMemoryExecutionInfo = reportExecutionInfo.parmPrintToMemoryExecutionInfo();

                // Convert the report content from the memory stream to a container.
                using (System.IO.MemoryStream reportMemoryStream = printDestMemoryExecutionInfo.getReportContentAsMemoryStream())
                {
                    reportContentAsContainer = DocGlobalHelper::convertMemoryStreamToContainer(reportMemoryStream);
                }
            }
        }
        catch(Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt('Retrieving report content failed. %1.', this.getErrorMessage()));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Retrieving report content failed. %1.', this.getErrorMessage()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    protected str getErrorMessage()
    {
        return strFmt('Error while synchronously generating report (%1) using Docentric Memory print destination', controller.parmReportName());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>