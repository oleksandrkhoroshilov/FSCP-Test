<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocERFormatGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// An abstract class for running provided ER format configuration and returning a generated document as memory stream.
/// </summary>
public abstract class DocERFormatGenerator extends SysOperationServiceBase
{
    private DocDocument generatedDocument;
    private ERGUID formatMappingGUID;
    private SysOperationServiceController controller;
    private SysOperationDataContractBase contract;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of DocERFormatGenerator class.
    /// </summary>
    /// <param name = "_controllerClassName">The class name of the controller class extending the ERFormatMappingRunBaseController class.</param>
    /// <param name = "_serviceClassName">The class name of the service class.</param>
    /// <param name = "_serviceMethodName">The method name of the service operation.</param>
    public void new (
        IdentifierName _controllerClassName = '',
        IdentifierName _serviceClassName = '',
        IdentifierName _serviceMethodName = '')
    {
        DictClass controllerDictClass = new DictClass(className2Id(_controllerClassName));
        if (controllerDictClass)
        {
            // Check parameters
            str errMsg = strFmt('The %1 cannot be instantiated due to invalid parameters:', classStr(DocERFormatGenerator));
            if (controllerDictClass.extend() != className2Id(classStr(ERFormatMappingRunBaseController)))
            {
                DocGlobalHelper::handleException(funcName(), strFmt('%1 _controllerClassName (%2) does not extend %3 class', errMsg, _controllerClassName, classStr(ERFormatMappingRunBaseController)));
            }
            if (!_serviceClassName)
            {
                DocGlobalHelper::handleException(funcName(), strFmt('%1 _serviceClassName is not defined', errMsg));
            }
            if (!_serviceMethodName)
            {
                DocGlobalHelper::handleException(funcName(), strFmt('%1 _serviceMethodName is not defined', errMsg));
            }
            DictClass serviceDictClass = new DictClass(className2Id(_serviceClassName));
            if (!serviceDictClass)
            {
                DocGlobalHelper::handleException(funcName(), strFmt('%1 _serviceClassName (%2) does not exist', errMsg, _serviceClassName));
            }
            if (serviceDictClass.extend() != className2Id(classStr(DocERFormatGenerator)))
            {
                DocGlobalHelper::handleException(funcName(), strFmt('%1 _serviceClassName (%2) does not extend %3 class', errMsg, _serviceClassName, classStr(DocERFormatGenerator)));
            }
            boolean serviceMethodExist = false;
            for (int i = 1; i < serviceDictClass.objectMethodCnt(); i++)
            {
                DictMethod serviceDictMethod = serviceDictClass.objectMethodObject(i);
                if (serviceDictMethod.name() == _serviceMethodName)
                {
                    serviceMethodExist = true;
                    break;
                }
            }
            if (!serviceMethodExist)
            {
                DocGlobalHelper::handleException(funcName(), strFmt('%1 _serviceMethodName (%2) does not exist in _serviceClassName (%3) class', errMsg, _serviceMethodName, _serviceClassName));
            }

            // Instantiated a controller
            controller = controllerDictClass.makeObject(
                _serviceClassName,
                _serviceMethodName,
                SysOperationExecutionMode::Synchronous);

            if (controller != null)
            {
                controller.showBatchTab(false);
                controller.parmShowDialog(false);

                contract = controller.getDataContractObject();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instantiated controller or data contact class from args.
    /// </summary>
    /// <param name = "_args">An instance of Args object</param>
    public void initFromArgs(Args _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the service operation and returns the result if any.
    /// </summary>
    public void run()
    {
        if (controller != null)
        {
            controller.startOperation();

            var erFormatGenerator = controller.operationReturnValue();
            if (erFormatGenerator is DocERFormatGenerator && erFormatGenerator != null)
            {
                this.parmGeneratedDocument(erFormatGenerator.parmGeneratedDocument());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGeneratedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the generated document object.
    /// </summary>
    /// <param name = "_generatedDocument">A generated dcoument object</param>
    /// <returns>A generated dcoument object</returns>
    public DocDocument parmGeneratedDocument(DocDocument _generatedDocument = generatedDocument)
    {
        generatedDocument = _generatedDocument;
        return generatedDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGeneratedDocumentProvided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the generated document object is set.
    /// </summary>
    /// <returns>True if the generated document object is set; otherwise false</returns>
    public boolean isGeneratedDocumentProvided()
    {
        return generatedDocument != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateERReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the ER report.
    /// </summary>
    /// <param name = "_contract">A data contract object</param>
    protected void generateERReport(SysOperationDataContractBase _contract = null)
    {
        str errMsg = "@DocentricAX4:ERFormatGeneratorERFormatMappingRunError";
        try
        {
            contract = _contract;
            this.runER();
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrDocumentGeneration);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrDocumentGeneration);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg, DocConstantDiagnostics::ErrDocumentGeneration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatMappingGUID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ER format mapping GUID.
    /// </summary>
    protected abstract void setFormatMappingGUID()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameters for the ER format mapping.
    /// </summary>
    /// <param name = "_formatMappingRun">An instance of ERFormatMappingRun class</param>
    protected abstract void setParameters(ERIFormatMappingRun _formatMappingRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatMappingGUID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the ER format mapping GUID.
    /// </summary>
    /// <param name = "_formatMappingGUID">Format mapping GUID</param>
    /// <returns>ER format mapping GUID</returns>
    protected ERGUID parmFormatMappingGUID(ERGUID _formatMappingGUID = formatMappingGUID)
    {
        formatMappingGUID = _formatMappingGUID;
        return formatMappingGUID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a controller object.
    /// </summary>
    /// <returns>A controller object</returns>
    protected SysOperationServiceController getController()
    {
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a data contract object.
    /// </summary>
    /// <returns>A data contract object</returns>
    protected SysOperationDataContractBase getContract()
    {
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERModelName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ER model name from provided ER format mapping run.
    /// </summary>
    /// <param name = "_formatMappingRun">An instance of ERFormatMappingRun class</param>
    /// <returns>An ER model name</returns>
    protected Name getERModelName(ERIFormatMappingRun _formatMappingRun)
    {
        ERSingleModelBinding erSingleModelBinding;

        select firstonly SpecificModel
            from erSingleModelBinding
                where erSingleModelBinding.FormatBinding == _formatMappingRun.getFormatMappingTableRecId();

        return ERDataModelTable::find(erSingleModelBinding.SpecificModel).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a provided ER format configuration and returns a generated document as memory stream.
    /// </summary>
    private void runER()
    {
        this.setFormatMappingGUID();

        ERFormatMappingId erFormatMappingId = ERFormatMappingTable::getRecIDByGuid(formatMappingGUID);
        if (!erFormatMappingId)
        {
            throw error(strFmt("@DocentricAX4:ERFormatGeneratorERFormatMappingNotFound", guid2Str(formatMappingGUID)));
        }

        // Call ER to generate the report.
        ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(erFormatMappingId);
        this.setParameters(formatMappingRun);

        // Set memory stream file destionation
        ERFileDestinationMemory fileDestinationMemory = new ERFileDestinationMemory();
        formatMappingRun.withFileDestination(fileDestinationMemory);

        str filePath = formatMappingRun.run();
        if (filePath)
        {
            this.parmGeneratedDocument(DocDocument::createMemoryStream(fileDestinationMemory.GetStream(), filePath));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentContentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a generated document as memory stream. 
    /// </summary>
    /// <returns>A generated document as memory stream</returns>
    public System.IO.MemoryStream getDocumentContentMemoryStream()
    {
        if (this.isGeneratedDocumentProvided())
        {
            return this.parmGeneratedDocument().getDocumentContentMemoryStream();
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdfDocumentContentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a generated document as PDF memory stream.
    /// </summary>
    /// <param name = "_pageOrientation">A page orientation</param>
    /// <param name = "_throwError">Flag indicating if error should be thrown in case it arises</param>
    /// <returns>A generated document as PDF memory stream</returns>
    public System.IO.MemoryStream getPdfDocumentContentMemoryStream(DocReportPrintOrientation _pageOrientation = DocReportPrintOrientation::Portrait, boolean _throwError = false)
    {
        if (this.isGeneratedDocumentProvided())
        {
            return DocDocumentHelper::convertWordExcel2PdfWithOfficeService(
                this.getDocumentContentMemoryStream(), this.parmGeneratedDocument().fileFormat(), _throwError, _pageOrientation);
        }
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>