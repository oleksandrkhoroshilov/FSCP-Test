<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocuTypeTable_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class for the DocuType table.
/// </summary>
[ExtensionOf(tableStr(DocuType))]
final class DocuTypeTable_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupDocuActionFile_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup method that shows only document types that are bound to an action class which derives from the DocuActionFile class.
    /// </summary>
    /// <param name = "_formControl">The sender form control</param>
    /// <returns>The lookup object</returns>
    public static SysTableLookup lookupDocuActionFile_DC(FormControl _formControl)
    {
        SysTableLookup  lookup = SysTableLookup::newParameters(tablenum(DocuType), _formControl);
        Query           query = new Query();

        TmpIdRef tmpIdRef = Docu::Instance().actionIdRef();
        str filterString = '';

        while select tmpIdRef
        {
            ClassId classId = className2Id(tmpIdRef.Name);

            if (SysDictClass::isEqualOrSuperclass(classId, classNum(DocuActionFile)))
            {
                filterString += (filterString == '' ? '' : ' || ');
                filterString += strFmt('(ActionClassId == %1)', classId);
            }
        }

        filterString += strFmt('(%1)', filterString);
 
        QueryBuildDataSource dataSource = query.addDataSource(tablenum(DocuType));
        dataSource.addRange(fieldnum(DocuType, ActionClassId)).value(filterString);
        
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldnum(DocuType, TypeId));
        lookup.addLookupfield(fieldnum(DocuType, Name));

        lookup.performFormLookup();

        return lookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocuTypeForDocuActionFile_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the provided document type is bound to an action class which derives from the DocuActionFile class.
    /// </summary>
    /// <param name = "_docuTypeId">The document type ID to be validated</param>
    /// <param name = "_verbose">Print warnings if enabled</param>
    /// <returns>TRUE if document type is valid or not provided, FALSE otherwise</returns>
    public static boolean validateDocuTypeForDocuActionFile_DC(DocuTypeId _docuTypeId, boolean _verbose)
    {
        if (!strLRTrim(_docuTypeId))
        {
            // We don't have what to validate, so return.
            return true;
        }

        DocuType docuType = DocuType::find(_docuTypeId);
        if (!docuType.RecId)
        {
            if (_verbose)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:DocuTypeInvalid", _docuTypeId));
            }

            return false;
        }

        // Check if the action class derives from DocuActionFile.
        if (!SysDictClass::isEqualOrSuperclass(docuType.ActionClassId, classNum(DocuActionFile)))
        {
            if (_verbose)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:DocuTypeNotAppropriateForFileAttachments", _docuTypeId));
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionClassDescription_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Description of the corrensponding action class.
    /// Description is defined via the description() method on the action class.
    /// </summary>
    /// <returns>Description of the document type's action class</returns>
    public str getActionClassDescription_DC()
    {
        return this.actionClassName(false, '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>