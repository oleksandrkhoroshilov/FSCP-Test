<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportTypeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocReportTypeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findFirstActiveReportForType</Name>
				<Source><![CDATA[
    public static DocReportTable findFirstActiveReportForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable         reportTable;
        PrintMgmtReportFormat  printMgmtReports;

        select firstonly reportTable order by SRSReportName asc
        where reportTable.IsActiveSRS == true    // consider only active reports
            exists join printMgmtReports         // consider only reports belonging to the provided report type
            where printMgmtReports.Name == reportTable.SRSReportName &&
                  printMgmtReports.DocumentType == _reportType;

        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstReportForType</Name>
				<Source><![CDATA[
    public static DocReportTable findFirstReportForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable         reportTable;
        PrintMgmtReportFormat  printMgmtReports;

        select firstonly reportTable order by SRSReportName asc
        exists join printMgmtReports  // consider only reports belonging to the provided report type
        where printMgmtReports.Name == reportTable.SRSReportName &&
              printMgmtReports.DocumentType == _reportType;

        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allReportsDeactivedForType</Name>
				<Source><![CDATA[
    public static boolean allReportsDeactivedForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable         reportTable;
        PrintMgmtReportFormat  printMgmtReports;

        select firstonly RecId from reportTable
        where reportTable.IsActiveSRS == true    // consider only active reports
            exists join printMgmtReports         // consider only reports belonging to the provided report type
            where printMgmtReports.Name == reportTable.SRSReportName &&
                  printMgmtReports.DocumentType == _reportType;

        boolean foundOneActive = reportTable.RecId != 0;

        return !foundOneActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allReportsUseOnlyWithPDForType</Name>
				<Source><![CDATA[
    public static boolean allReportsUseOnlyWithPDForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable         reportTable;
        PrintMgmtReportFormat  printMgmtReports;

        select firstonly RecId from reportTable
        where reportTable.IsActiveSRS == true &&     // consider only active reports
              reportTable.UseOnlyWithPrintDestinations == false
            exists join printMgmtReports             // consider only reports belonging to the provided report type
            where printMgmtReports.Name == reportTable.SRSReportName &&
                  printMgmtReports.DocumentType == _reportType;

        boolean foundOneThatIsNotUsedOnlyWithPD = reportTable.RecId != 0;

        return !foundOneThatIsNotUsedOnlyWithPD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existEnabledTemplatesForType</Name>
				<Source><![CDATA[
    public static boolean existEnabledTemplatesForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable          reportTable;
        PrintMgmtReportFormat   printMgmtReports;
        DocReportTemplate       reportTemplate;

        select firstonly RecId from reportTemplate
            exists join reportTable
        where reportTable.IsActiveSRS == true &&     // consider only active reports
              reportTable.RecId == reportTemplate.Report &&
              reportTemplate.IsEnabled == true       // consider only enabled templates
            exists join printMgmtReports             // consider only reports belonging to the provided report type
            where printMgmtReports.Name == reportTable.SRSReportName &&
                  printMgmtReports.DocumentType == _reportType;

        boolean found = reportTemplate.RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyReportIncludeCompanyLogoForType</Name>
				<Source><![CDATA[
    public static boolean anyReportIncludeCompanyLogoForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable         reportTable;
        PrintMgmtReportFormat  printMgmtReports;

        select firstonly RecId from reportTable
        where reportTable.IsActiveSRS == true &&     // consider only active reports
              reportTable.IncludeCompanyLogoInDS == true
            exists join printMgmtReports             // consider only reports belonging to the provided report type
            where printMgmtReports.Name == reportTable.SRSReportName &&
                  printMgmtReports.DocumentType == _reportType;

        boolean found = reportTable.RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyReportIncludeHiddenParamsForType</Name>
				<Source><![CDATA[
    public static boolean anyReportIncludeHiddenParamsForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable         reportTable;
        PrintMgmtReportFormat  printMgmtReports;

        select firstonly RecId from reportTable
        where reportTable.IsActiveSRS == true &&     // consider only active reports
              reportTable.IncludeHiddenParamsInDS == true
            exists join printMgmtReports             // consider only reports belonging to the provided report type
            where printMgmtReports.Name == reportTable.SRSReportName &&
                  printMgmtReports.DocumentType == _reportType;

        boolean found = reportTable.RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportsForType</Name>
				<Source><![CDATA[
    public static container getReportsForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable          reportTable;
        PrintMgmtReportFormat   printMgmtReports;
        container               reportRecIDs = conNull();

        while select RecId from reportTable
              where reportTable.IsActiveSRS == true      // consider only active reports
                exists join printMgmtReports             // consider only reports belonging to the provided report type
                where printMgmtReports.Name == reportTable.SRSReportName &&
                      printMgmtReports.DocumentType == _reportType
        {
            reportRecIDs += reportTable.RecId;
        }

        return reportRecIDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSRSReportDesignNamesForType</Name>
				<Source><![CDATA[
    public static container getSRSReportDesignNamesForType(PrintMgmtDocumentType _reportType)
    {
        PrintMgmtReportFormat   printMgmtReports;
        container               reportDesignNames = conNull();

        while select Name from printMgmtReports
                where printMgmtReports.DocumentType == _reportType
        {
            reportDesignNames += printMgmtReports.Name;
        }

        return reportDesignNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDefaultTemplateForType</Name>
				<Source><![CDATA[
    public static DocReportTemplate findFirstDefaultTemplateForType(PrintMgmtDocumentType _reportType)
    {
        DocReportTable          reportTable;
        PrintMgmtReportFormat   printMgmtReports;
        DocReportTemplate       reportTemplate;

        select firstonly reportTemplate
            exists join reportTable order by ReportId asc  // ordering by Report ID ASC
        where reportTable.IsActiveSRS == true &&  // consider only active reports
              reportTable.RecId == reportTemplate.Report &&
              reportTemplate.IsDefaultTemplate == true &&
              reportTemplate.IsEnabled == true       // consider only enabled templates
            exists join printMgmtReports             // consider only reports belonging to the provided report type
            where printMgmtReports.Name == reportTable.SRSReportName &&
                  printMgmtReports.DocumentType == _reportType;

        return reportTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChequeReportFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true, if the provided SSRS report name is most likely one of Cheque formats.
    /// </summary>
    /// <param name = "_ssrsOnlyReportName">SSRS report name</param>
    /// <returns>True, if the given report name contains 'Cheque' as a substring</returns>
    public static boolean isChequeReportFormat(str _ssrsOnlyReportName)
    {
        if (_ssrsOnlyReportName == '')
        {
            return false;
        }

        int pos = strScan(_ssrsOnlyReportName, 'Cheque', 1, strLen(_ssrsOnlyReportName));
        return pos > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>