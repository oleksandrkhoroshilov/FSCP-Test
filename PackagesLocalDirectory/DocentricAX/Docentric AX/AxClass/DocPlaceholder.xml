<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPlaceholder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to store the placeholder data.
/// </summary>
public class DocPlaceholder
{
    private str name;
    private str valueStr;
    private LanguageId formatLanguage;
    private DocPlaceholderKind placeholderKind;  // Standard, Custom or User-defined
    private DocPlaceholderType placeholderType;  // Text, HTML or Image
    private DocFormatString formatString;
    
    #define.currentPackVersion(1)

    #localmacro.currentList
        version,
        name,
        valueStr,
        formatLanguage,
        placeholderKind,
        placeholderType,
        formatString
    #endMacro
    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs placeholder data to container.
    /// </summary>
    /// <returns>Packed container with placeholder data</returns>
    public container pack()
    {
        int version = #currentPackVersion;

        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container with placeholder data.
    /// </summary>
    /// <param name = "_pack">Packed container with placeholder data</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean ret = false;
        int version;
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #currentPackVersion)
            {
                [#currentList] = _pack;
    
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the placeholder name.
    /// </summary>
    /// <param name = "_name">Placeholder name</param>
    /// <returns>Placeholder name</returns>
    public str parmName(str _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the placeholder value as string.
    /// </summary>
    /// <param name = "_valueStr">Placeholder value as string</param>
    /// <returns>Placeholder value as string</returns>
    public str parmValueStr(str _valueStr = valueStr)
    {
        valueStr = _valueStr;
        return valueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the format languange used for placeholder value.
    /// </summary>
    /// <param name = "_formatLanguage">Format languange</param>
    /// <returns>Foramt language</returns>
    public LanguageId parmFormatLanguage(LanguageId _formatLanguage = formatLanguage)
    {
        formatLanguage = _formatLanguage;
        return formatLanguage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the format string used for placeholder value.
    /// </summary>
    /// <param name = "_formatString">Format string</param>
    /// <returns>Format string</returns>
    public DocFormatString parmFormatString(DocFormatString _formatString = formatString)
    {
        formatString = _formatString;
        return formatString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlaceholderKind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the placeholder kind. Can be:
    /// - Standard
    /// - Custom
    /// - User-defined
    /// </summary>
    /// <param name = "_placeholderKind">Placeholder kind</param>
    /// <returns>Placeholder kind</returns>
    public DocPlaceholderKind parmPlaceholderKind(DocPlaceholderKind _placeholderKind = placeholderKind)
    {
        placeholderKind = _placeholderKind;
        return placeholderKind;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlaceholderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the placeholder type. Can be:
    /// - Text
    /// - HTML
    /// - Image
    /// </summary>
    /// <param name = "_placeholderType">Placeholder type</param>
    /// <returns>Placeholder type</returns>
    public DocPlaceholderType parmPlaceholderType(DocPlaceholderType _placeholderType = placeholderType)
    {
        placeholderType = _placeholderType;
        return placeholderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocPlaceholder class.
    /// </summary>
    /// <param name = "_con">Container with placeholder data</param>
    /// <returns>An instance of DocPlaceholder class</returns>
    public static DocPlaceholder create(container _con)
    {
        DocPlaceholder placeholder = new DocPlaceholder();
        placeholder.unpack(_con);
        return placeholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTextPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocPlaceholder class.
    /// </summary>
    /// <param name = "_name">Placeholder name</param>
    /// <param name = "_valueStr">Placeholder value as string</param>
    /// <param name = "_placeholderKind">Placeholder kind</param>
    /// <param name = "_formatLanguage">Format langunage</param>
    /// <param name = "_formatString">Format string</param>
    /// <returns>An instance of DocPlaceholder class</returns>
    public static DocPlaceholder constructTextPlaceholder(
        str _name,
        str _valueStr,
        DocPlaceholderKind _placeholderKind, 
        LanguageId _formatLanguage = '', 
        DocFormatString _formatString = '')
    {
        DocPlaceholder placeholder = new DocPlaceholder();

        placeholder.parmName(_name);
        placeholder.parmValueStr(_valueStr);
        placeholder.parmFormatLanguage(_formatLanguage);
        placeholder.parmPlaceholderKind(_placeholderKind);
        placeholder.parmPlaceholderType(DocPlaceholderType::Text);
        placeholder.parmFormatString(_formatString);

        return placeholder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>