<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPlaceholderManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPlaceholderManager
{
    DocReportRunContext                     reportRunContext;
    CompanyId                               companyId;
    LanguageId                              labelLanguageId, formatLanguageId;
    Map                                     parameterMap;  // Map(str parameterName, anytype parameterValue)
    Common                                  reportExecutionContext;
    DocPrintDestination                     currentPrintDestination;
    DocPrintDestSettingsGenerateDS          generateDSPrintDestSettings;
    DocPrintDestSettingsPrinter             printerPrintDestSettings;
    DocPrintDestSettingsFile                filePrintDestSettings;
    DocPrintDestSettingsEmail               emailPrintDestSettings;
    HcmWorker                               currentHcmWorker;
    System.Globalization.CultureInfo        cultureInfo;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getStdPlaceholderValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates string value for the given standard placeholders.
    /// </summary>
    /// <param name="_placeholder">Standard placeholder name without placeholder start and end symbol '@'</param>
    /// <param name="_swallowException">Throws an exception if the given placeholder is not a standard placeholder.</param>
    /// <returns>
    /// Returns string value for the given standard placeholder, if such exists.
    /// Otherwise returns empty string.
    /// </returns>
    /// <remarks>
    /// Standard placeholders:
    /// - @FIELD_{Name of the field from the Report Execution Context table}@ -> extract the value of the specified field
    /// - @METHOD_{Name of the method from the Report Execution Context table}@ -> extract the value of the specified parameterless method
    /// - @PARAMETER_{Name of the report parameter}@ -> extract the value of specified report parameter
    /// - @REPORTID@
    /// - @REPORTCAPTION@
    /// - @COMPANYID@
    /// - @COMPANYNAME@
    /// - @COMPANYLOGO@
    /// - @COMPANYLOGO_BASE64@
    /// - @USERID@
    /// - @USERNAME@
    /// - @USERALIAS@
    /// - @USEREMAIL@
    /// - @WORKER@
    /// - @WORKERTITLE@
    /// - @WORKERDEPARTMENT@
    /// - @WORKEREMAIL@
    /// - @WORKERIMAGE@
    /// - @LANGUAGEID@
    /// - @TIMESTAMP@
    /// - @CURRENTDATE@
    /// - @CURRENTDATETIME@
    /// - @CURRENTDAY@
    /// - @CURRENTMONTH@
    /// - @CURRENTYEAR@
    /// - @GUID@
    /// - @BATCHJOBID@
    /// - @BATCHJOB_SCHEDULED_STARTDATETIME@
    /// - @BATCHJOB_ACTUAL_STARTDATETIME@
    /// - @ENVNAME@
    /// - @ENVDOMAINNAME@
    /// - @ENVTYPE@
    /// - @ENVMODE@
    /// Use constants defined in the DocConstantPlaceholder class instead of string constants.
    /// </remarks>
    public str getStdPlaceholderValueStr(str _placeholder, boolean _swallowException = false)
    {
        str                 placeholderValue = '';
        utcDateTime         timeStamp;
        System.DateTime     currentDateTimeNet;
        utcDateTime         currentDateTime;
        date                currentDate;
        UserInfo            userInfo;
    
    
        if (!this.isValidStdPlaceholder(_placeholder, _swallowException))
        {
            if (_swallowException)
            {
                return '';
            }
    
            if (_placeholder)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:PlaceholderInvalid", _placeholder));
            }
            else
            {
                throw Exception::Error;
            }
        }
    
        // Check simple standard placeholders.
        switch (_placeholder)
        {
            case DocConstantPlaceholder::PlaceholderReportId:
                placeholderValue = reportRunContext.reportId();
                break;

            case DocConstantPlaceholder::PlaceholderReportCaption:
                placeholderValue = reportRunContext.parmReportCaption();
                break;

            case DocConstantPlaceholder::PlaceholderCompanyId:
                placeholderValue = companyId;
                break;

            case DocConstantPlaceholder::PlaceholderCompanyName:
                CompanyInfo currentCompanyInfo = CompanyInfo::findDataArea(companyId);
                placeholderValue = currentCompanyInfo.Name;
                break;

            case DocConstantPlaceholder::PlaceholderCompanyLogo:
                // <IMG SRC="cid:@COMPANYLOGO@"> -> <IMG SRC="cid:COMPANYLOGO">,
                // while the image content is loaded in the replacePlhInCurrentPrintDestCommon() -> loadContentOfStandardImagePlaceholders() method.
                placeholderValue = _placeholder;
                break;

            case DocConstantPlaceholder::PlaceholderCompanyLogoBase64:
                // Get Company Logo image as Base64 encoded string
                str companyLogoBase64 = this.getCompanyLogoImageAsBase64Str();
                placeholderValue =  companyLogoBase64 ? companyLogoBase64 : _placeholder;
                break;

            case DocConstantPlaceholder::PlaceholderWorkerImage:
                // <IMG SRC="cid:@WORKERIMAGE@"> -> <IMG SRC="cid:WORKERIMAGE">,
                // while the image content is loaded in the replacePlhInCurrentPrintDestCommon() -> loadContentOfStandardImagePlaceholders() method.
                placeholderValue = _placeholder;
                break;

            case DocConstantPlaceholder::PlaceholderUserId:
                placeholderValue = reportRunContext.userId();
                break;

            case DocConstantPlaceholder::PlaceholderUserName:
                select firstOnly name from userInfo where userInfo.id == reportRunContext.userId();
                placeholderValue = userInfo.name;
                break;

            case DocConstantPlaceholder::PlaceholderUserAlias:
                select firstOnly networkAlias from userInfo where userInfo.id == reportRunContext.userId();
                placeholderValue = userInfo.networkAlias;
                break;

            case DocConstantPlaceholder::PlaceholderUserEmail:
            case DocConstantPlaceholder::PlaceholderCurrentUserEmail:
                placeholderValue = DocEmailMngHelper::getUserEmailAddress(reportRunContext.userId());
                break;

            case DocConstantPlaceholder::PlaceholderWorker:
                placeholderValue = this.getCurrentHcmWorker().name();
                break;

            case DocConstantPlaceholder::PlaceholderWorkerTitle:
                placeholderValue = this.getCurrentHcmWorker().title();
                break;

            case DocConstantPlaceholder::PlaceholderWorkerDepartment:
                placeholderValue = this.getCurrentHcmWorker().primaryDepartmentName();
                break;

            case DocConstantPlaceholder::PlaceholderWorkerEmail:
                placeholderValue = this.getCurrentHcmWorker().email();
                break;

            case DocConstantPlaceholder::PlaceholderLanguageId:
                placeholderValue = labelLanguageId;
                break;

            case DocConstantPlaceholder::PlaceholderTimestamp:
                timeStamp = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
                currentDateTimeNet = timeStamp;
                placeholderValue = System.String::Format('{0:yyyy-MM-dd_HH-mm-ss}', currentDateTimeNet);
                break;

            case DocConstantPlaceholder::PlaceholderCurrentDate:
                currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
                placeholderValue = DocGlobalHelper::formatData(currentDate, cultureInfo);
                break;

            case DocConstantPlaceholder::PlaceholderCurrentDatetime:
                currentDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
                placeholderValue = DocGlobalHelper::formatData(currentDateTime, cultureInfo, DocApplyTimeZone::None);
                break;

            case DocConstantPlaceholder::PlaceholderCurrentDay:
                currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
                int currentDay = dayOfMth(currentDate);
                placeholderValue = System.String::Format('{0:00}', currentDay);
                break;

            case DocConstantPlaceholder::PlaceholderCurrentMonth:
                currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
                int currentMonth = mthOfYr(currentDate);
                placeholderValue = System.String::Format('{0:00}', currentMonth);
                break;

            case DocConstantPlaceholder::PlaceholderCurrentYear:
                currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
                int currentYear = year(currentDate);
                placeholderValue = int2Str(currentYear);
                break;

            case DocConstantPlaceholder::PlaceholderGuid:
                placeholderValue = DocGlobalHelper::guid2strWithoutBraces(newguid());
                break;
    
            // Check if placeholder is related to the batch info.
            case DocConstantPlaceholder::PlaceholderBatchJobId:
            case DocConstantPlaceholder::PlhBatchJobSchedStartDateTime:
            case DocConstantPlaceholder::PlhBatchJobActualStartDateTime:
                placeholderValue = this.getStdPlhBatchValueStr(_placeholder);
                break;

            case DocConstantPlaceholder::PlaceholderEnvironmentName:
                placeholderValue = DocDiagnosticsManager::getCurrentEnvironmentCustomName();
                break;

            case DocConstantPlaceholder::PlaceholderEnvironmentDomainName:
                placeholderValue = DocDiagnosticsManager::fullyQualifiedDomainName();
                break;

            case DocConstantPlaceholder::PlaceholderEnvironmentType:
                placeholderValue = strFmt('%1 / %2', DocDiagnosticsManager::deploymentType(), DocDiagnosticsManager::hostingEnvironment());
                break;

            case DocConstantPlaceholder::PlaceholderEnvironmentMode:
                placeholderValue = enum2Str(DocDiagnosticsManager::getCurrentEnvironmentMode());
                break;
    
            default:
                // Check if placeholder is a field or a method of report execution context.
                if (strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderFieldStartToken) ||
                    strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderMethodStartToken))
                {
                    placeholderValue = this.getStdPlhREContextValueStr(_placeholder);
                }
    
                // Check if the placeholder is a report parameter.
                else if (strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderParameterStartToken))
                {
                    placeholderValue = this.getStdPlhParameterValueStr(_placeholder);
                }
        }
    
        return placeholderValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentHcmWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the HcmWorker table buffer for current worker.
    /// </summary>
    /// <returns>The HcmWorker table buffer</returns>
    protected HcmWorker getCurrentHcmWorker()
    {
        if (currentHcmWorker.RecId == 0 && reportRunContext.hcmWorkerRecId() != 0)
        {
            currentHcmWorker = HcmWorker::find(reportRunContext.hcmWorkerRecId());
        }

        return currentHcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStdPlhBatchValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates string value for the given standard placeholders:
    /// - @BATCHJOBID@
    /// - @BATCHJOB_SCHEDULED_STARTDATETIME@
    /// - @BATCHJOB_ACTUAL_STARTDATETIME@
    /// </summary>
    /// <param name = "_placeholder">Standard placeholder name without placeholder start and end symbol '@'</param>
    /// <returns>
    /// Returns string value for the given standard placeholder, if such exists.
    /// Otherwise returns empty string.
    /// </returns>
    protected str getStdPlhBatchValueStr(str _placeholder)
    {
        str                 placeholderValue;
        RecId               batchJobId;
        BatchJob            batchJob;
    
    
        placeholderValue = '';
    
        if (_placeholder == DocConstantPlaceholder::PlaceholderBatchJobId ||
            _placeholder == DocConstantPlaceholder::PlhBatchJobSchedStartDateTime ||
            _placeholder == DocConstantPlaceholder::PlhBatchJobActualStartDateTime)
        {
            if (_placeholder == DocConstantPlaceholder::PlaceholderBatchJobId)
            {
                placeholderValue = DocGlobalHelper::formatData(reportRunContext.currentBatch().BatchJobId, cultureInfo);
            }
    
            else if (_placeholder == DocConstantPlaceholder::PlhBatchJobSchedStartDateTime ||
                     _placeholder == DocConstantPlaceholder::PlhBatchJobActualStartDateTime)
            {
                if (reportRunContext.currentBatch())
                {
                    batchJobId = reportRunContext.currentBatch().BatchJobId;
                    select firstOnly batchJob
                    where batchJob.RecId == batchJobId;
                    if (batchJob)
                    {
                        if (_placeholder == DocConstantPlaceholder::PlhBatchJobSchedStartDateTime)
                        {
                            placeholderValue = DocGlobalHelper::formatData(batchJob.OrigStartDateTime, cultureInfo, DocApplyTimeZone::UserPreferredTimeZone);
                        }
                        else if (_placeholder == DocConstantPlaceholder::PlhBatchJobActualStartDateTime)
                        {
                            placeholderValue = DocGlobalHelper::formatData(batchJob.StartDateTime, cultureInfo, DocApplyTimeZone::UserPreferredTimeZone);
                        }
                    }
                }
            }
        }
    
        return placeholderValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStdPlhParameterValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates string value for the given standard placeholders:
    /// - @PARAMETER_Name of the report parameter@ - extracts the value of specified report parameter
    /// </summary>
    /// <param name = "_placeholder">Standard placeholder name without placeholder start and end symbol '@'</param>
    /// <returns>
    /// Returns string value for the given standard placeholder, if such exists.
    /// Otherwise returns empty string.
    /// </returns>
    protected str getStdPlhParameterValueStr(str _placeholder)
    {
        str  placeholderValue;
        str  parameterName;
    
    
        placeholderValue = '';
    
        // Check if the placeholder is a report parameter.
        if (strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderParameterStartToken))
        {
            parameterName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderParameterStartToken) + 1, strLen(_placeholder));
            if (parameterMap.exists(parameterName))
            {
                placeholderValue = DocGlobalHelper::formatData(parameterMap.lookup(parameterName), cultureInfo, DocApplyTimeZone::UserPreferredTimeZone);
            }
        }
    
        return placeholderValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStdPlhREContextValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates string value for the given standard placeholders:
    /// - @FIELD_Name of field of Report Execution Context table@ - extract the value of specified field
    /// - @METHOD_Name of method of Report Execution Context table@ - extract the value of specified parameterless method
    /// </summary>
    /// <param name = "_placeholder">Standard placeholder name without placeholder start and end symbol '@'</param>
    /// <returns>
    /// Returns string value for the given standard placeholder, if such exists.
    /// Otherwise returns empty string.
    /// </returns>
    protected str getStdPlhREContextValueStr(str _placeholder)
    {
        str                 placeholderValue;
        MethodName          methodName;
        FieldName           fieldName;
        FieldId             fieldId;
        SysDictMethod       dictMethod;
        SysDictTable        dictTable;
        anytype             methodReturnValue;
    
    
        if (!_placeholder)
        {
            return '';
        }
    
        placeholderValue = '';
    
        boolean isStdPl_Field = strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderFieldStartToken);
        boolean isStdPl_Method = strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderMethodStartToken);

        if (isStdPl_Field || isStdPl_Method)
        {
            // Check if placeholder is a field of report execution context.
            if (isStdPl_Field)
            {
                fieldName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderFieldStartToken) + 1, strLen(_placeholder));
                fieldId = fieldName2id(reportExecutionContext.TableId, fieldName);
                if (fieldId)
                {
                    placeholderValue = DocGlobalHelper::formatData(reportExecutionContext.(fieldId), cultureInfo, DocApplyTimeZone::UserPreferredTimeZone);
                }
            }
    
            // Check if the placeholder is a method of the report execution context.
            else if (isStdPl_Method)
            {
                methodName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderMethodStartToken) + 1, strLen(_placeholder));
                dictMethod = new SysDictMethod(UtilElementType::TableInstanceMethod, reportExecutionContext.TableId, methodName);
                if (dictMethod)
                {
                    // Execute method.
                    dictTable = new SysDictTable(reportExecutionContext.TableId);
                    new ExecutePermission().assert();
                    methodReturnValue = dictTable.callObject(methodName, reportExecutionContext);
                    CodeAccessPermission::revertAssert();
    
                    placeholderValue = DocGlobalHelper::formatData(methodReturnValue, cultureInfo, DocApplyTimeZone::UserPreferredTimeZone);
                }
            }
        }
    
        return placeholderValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidStdPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the given placeholder if it is a standard placeholder
    /// and if it, can it be used in the current context (e.g. if running in batch)
    /// </summary>
    /// <param name="_placeholder">Placeholder to check.</param>
    /// <param name="_suppressWarnings">Should warnings, if any, be suppressed.</param>
    /// <returns>
    /// Returns true if the given placeholder is a valid standard placeholder and
    /// if it can be used in the current context.
    /// </returns>
    public boolean isValidStdPlaceholder(str _placeholder, boolean _suppressWarnings = false)
    {
        boolean             isValid;
        str                 parameterName;
        RecId               batchJobId;
        BatchJob            batchJob;
        FieldName           fieldName;
        FieldId             fieldId;
        MethodName          methodName;
        SysDictMethod       dictMethod;
        Counter             parameterCounter;
    
    
        if (!DocPlaceholderManager::isValidPlaceholderName(_placeholder, _suppressWarnings))
        {
            return false;
        }
    
        if (!DocPlaceholderManager::isStandardPlaceholder(_placeholder))
        {
            if (!_suppressWarnings)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:NotStandardPlaceholder", _placeholder), true, '', false);
            }
    
            return false;
        }
    
    
        isValid = true;
    
        if (_placeholder == DocConstantPlaceholder::PlaceholderBatchJobId ||
            _placeholder == DocConstantPlaceholder::PlhBatchJobSchedStartDateTime ||
            _placeholder == DocConstantPlaceholder::PlhBatchJobActualStartDateTime)
        {
            if (!reportRunContext.isExecutingInBatch())
            {
                isValid = false;
                if (!_suppressWarnings)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX:PrintingReportIsNotInBatch", true, '', false);
                }
            }
    
            else if (_placeholder == DocConstantPlaceholder::PlhBatchJobSchedStartDateTime ||
                     _placeholder == DocConstantPlaceholder::PlhBatchJobActualStartDateTime)
            {
                if (reportRunContext.currentBatch())
                {
                    batchJobId = reportRunContext.currentBatch().BatchJobId;
                    select firstOnly batchJob
                    where batchJob.RecId == batchJobId;
                    if (!batchJob)
                    {
                        isValid = false;
                        if (!_suppressWarnings)
                        {
                            DocGlobalHelper::handleWarning("@DocentricAX:BatchJobNotExist", true, '', false);
                        }
                    }
                }
                else
                {
                    isValid = false;
                    if (!_suppressWarnings)
                    {
                        DocGlobalHelper::handleWarning("@DocentricAX:BatchInfoNotSet", true, '', false);
                    }
                }
            }
        }
    
        if (strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderParameterStartToken))
        {
            parameterName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderParameterStartToken) + 1, strLen(_placeholder));
            if (!parameterName)
            {
                isValid = false;
                if (!_suppressWarnings)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX:ParameterNameNotProvided", true, '', false);
                }
            }
    
            if (!parameterMap.exists(parameterName))
            {
                isValid = false;
                if (!_suppressWarnings)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ParameterWithNameNotExist", parameterName), true, '', false);
                }
            }
        }
    
        boolean isStdPl_Field = strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderFieldStartToken);
        boolean isStdPl_Method = strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderMethodStartToken);

        if (isStdPl_Field || isStdPl_Method)
        {
            // Check if the report execution context is set.
            if (!reportExecutionContext)
            {
                isValid = false;
                if (!_suppressWarnings)
                {
                    if (isStdPl_Field)
                    {
                        fieldName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderFieldStartToken) + 1, strLen(_placeholder));
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReportExecutionContextNotSet", fieldName), true, '', false);
                    }
                    else // if (isStdPl_Method)
                    {
                        methodName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderMethodStartToken) + 1, strLen(_placeholder));
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReportExecutionContextNotSetMethod", methodName), true, '', false);
                    }
                }
            }
    
            // Check if placeholder is a field of report execution context.
            else if (isStdPl_Field)
            {
                fieldName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderFieldStartToken) + 1, strLen(_placeholder));
                fieldId = fieldName2id(reportExecutionContext.TableId, fieldName);
                if (!fieldId)
                {
                    isValid = false;
                    if (!_suppressWarnings)
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:FieldIsNotDefiinedOnTable", fieldName, tableId2name(reportExecutionContext.TableId)), true, '', false);
                    }
                }
            }
    
            // Check if the placeholder is a method of the report execution context.
            else if (isStdPl_Method)
            {
                methodName = subStr(_placeholder, strLen(DocConstantPlaceholder::PlaceholderMethodStartToken) + 1, strLen(_placeholder));
                if (!SysDictTable::hasMethod(new DictTable(reportExecutionContext.TableId), methodName))
                {
                    isValid = false;
                    if (!_suppressWarnings)
                    {
                        DocGlobalHelper::handleWarning(strFmt('Method (%1) is not defined on the table (%2)',
                                                              methodName, tableId2name(reportExecutionContext.TableId)), true, '', false);
                    }
                }
    
                dictMethod = new SysDictMethod(UtilElementType::TableInstanceMethod, reportExecutionContext.TableId, methodName);
                if (!dictMethod)
                {
                    isValid = false;
                    if (!_suppressWarnings)
                    {
                        DocGlobalHelper::handleWarning(strFmt('Method (%1) is not defined on the table (%2)',
                                                       methodName, tableId2name(reportExecutionContext.TableId)), true, '', false);
                    }
                }
    
                if (dictMethod.parameterCnt() > 0)
                {
                    // Check if all parameters are optional.
                    for (parameterCounter = 1; parameterCounter <= dictMethod.parameterCnt(); parameterCounter++)
                    {
                        if (!dictMethod.parameterOptional(parameterCounter))
                        {
                            isValid = false;
                            if (!_suppressWarnings)
                            {
                                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:MethodHasParameters", methodName, tableId2name(reportExecutionContext.TableId)), true, '', false);
                            }
                            break;
                        }
                    }
                }
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocPlaceholderManager class.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_parameterMap">
    /// Report parameter map: Map(parameterName, anytype parameterValue).
    /// Should be provided to enable standard placeholders @PARAMETER_{Name of the report parameter}@.
    /// </param>
    protected void new (DocReportRunContext _reportRunContext, Map _parameterMap)
    {
        reportRunContext = _reportRunContext;
        companyId = reportRunContext.parmTemplateCompanyId();
        labelLanguageId = reportRunContext.parmTemplateLanguageId();
        formatLanguageId = reportRunContext.parmTemplateLanguageId();  // in the future, we might support a different language for formatting numbers and dates.

        // Current print destination.
        currentPrintDestination = reportRunContext.parmPrintDestination();
    
        // Generate DS, Printer, File and Email print destinations.
        generateDSPrintDestSettings = reportRunContext.generateDSPrintDestSettings();
        printerPrintDestSettings = reportRunContext.printerPrintDestSettings();
        filePrintDestSettings = reportRunContext.filePrintDestSettings();
        emailPrintDestSettings = reportRunContext.emailPrintDestSettings();

        // Report parameter map.
        parameterMap = _parameterMap;
        if (!parameterMap)
        {
            parameterMap = new Map(Types::String, Types::AnyType);  // Map(str parameterName, anytype parameterValue)
        }
        
        // Report Execution Context record
        reportExecutionContext = reportRunContext.getReportExecutionContextRecord();

        // Get CultureInfo.
        SysInfologLevel currentInfoLogLevel = infolog.infologLevel();
        infolog.setInfoLogLevel(SysInfologLevel::None);
        try
        {
            try
            {
                cultureInfo = new System.Globalization.CultureInfo(formatLanguageId);
            }
            catch
            {
                // Fall back to the company language
                cultureInfo = new System.Globalization.CultureInfo(CompanyInfo::languageId());
            }
        }
        catch
        {
            // Fall back to en-US if nothing else works
            cultureInfo = new System.Globalization.CultureInfo('en-US');
        }
        infolog.setInfoLogLevel(currentInfoLogLevel);
        
        // Set the cultureInfo on the reportRunContext object.
        reportRunContext.parmTemplateCultureInfo(cultureInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholderInCurrentPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces every occurrences of the given placeholder with its given value in current print destination.
    /// </summary>
    /// <param name="_placeholder">Custom placeholder name without placeholder start and end symbol '@'</param>
    /// <param name="_placeholderValue">Placeholder value used for replacement of the given placeholder</param>
    public void replacePlaceholderInCurrentPrintDest(str _placeholder, anytype _placeholderValue)
    {
        // Replace the placeholder in the report caption, and in the currently selected print destination settings (applicable only for File and Email).
        this.replacePlhInCurrentPrintDestCommon(false, [[_placeholder, _placeholderValue]]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholderImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces every occurrences of the given image placeholder with its given content in the email body.
    /// </summary>
    /// <param name="_placeholder">Custom placeholder name without placeholder start and end symbol '@'</param>
    /// <param name="_placeholderValue">Image content used for replacement of the given image placeholder</param>
    public void replacePlaceholderImage(str _placeholder, Bitmap _placeholderValue)
    {
        // Only replace the placeholder if the placeholder is found.
        if (!DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailBody(), _placeholder))
        {
            return;
        }

        // Add the provided image content to the Image Map(contentId (str), imageContent (container)).
        emailPrintDestSettings.addImage(_placeholder, _placeholderValue);

        // Replace '@contentId@' with 'contentId', e.g. within email body we'll have <IMG SRC="cid:@PLACEHOLDERNAME@"> -> <IMG SRC="cid:PLACEHOLDERNAME">.
        str strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailBody(), [[_placeholder, _placeholder]], false);
        if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailBody())
        {
            emailPrintDestSettings.parmEmailBody(strWithReplacedPlaceholders);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadContentOfStandardImagePlaceholders</Name>
				<Source><![CDATA[
    protected void loadContentOfStandardImagePlaceholders()
    {
        /* Load and add all standard image placeholders' content. */

        // Standard image placeholder @COMPANYLOGO@.
        if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailBody(), DocConstantPlaceholder::PlaceholderCompanyLogo))
        {
            CompanyImage currentCompanyImage = CompanyImage::findByRecord(CompanyInfo::findDataArea(companyId));
            if (currentCompanyImage.Image)
            {
                emailPrintDestSettings.addImage(DocConstantPlaceholder::PlaceholderCompanyLogo, currentCompanyImage.Image);
            }
        }

        // Standard image placeholder @WORKERIMAGE@.
        if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailBody(), DocConstantPlaceholder::PlaceholderWorkerImage))
        {
            HcmWorker currentWorker = this.getCurrentHcmWorker();
            if (currentWorker)
            {
                Bitmap workerImage = currentWorker.personImageOrNull_DC();
                if (workerImage)
                {
                    emailPrintDestSettings.addImage(DocConstantPlaceholder::PlaceholderWorkerImage, workerImage);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsPlaceholderInCurrentPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the currently selected print destination contains the given placeholder.
    /// </summary>
    /// <param name = "_placeholder">Placeholder name without placeholder start and end symbol '@', e.g. 'VendAccount'</param>
    /// <returns>True if the current print destination contains the given placeholder</returns>
    public boolean containsPlaceholderInCurrentPrintDest(str _placeholder)
    {
        // Report caption.
        if (DocPlaceholderManager::findPlaceholder(reportRunContext.parmReportCaption(), _placeholder))
        {
            return true;
        }

        // Print archive note.
        if (DocPlaceholderManager::findPlaceholder(reportRunContext.parmSaveToArchiveNote(), _placeholder))
        {
            return true;
        }

        // Report attachment rules.
        List attachmentRuleList = reportRunContext.attachmentRuleList();
        if (attachmentRuleList != null && !attachmentRuleList.empty())
        {
            ListEnumerator attachmentRuleListEnum = attachmentRuleList.getEnumerator();
            while (attachmentRuleListEnum.moveNext())
            {
                DocReportAttachmentRule attachmentRule = attachmentRuleListEnum.current();
                
                // Attachment rule description.
                if (DocPlaceholderManager::findPlaceholder(attachmentRule.parmName(), _placeholder))
                {
                    return true;
                }

                // Attachment rule display name.
                if (DocPlaceholderManager::findPlaceholder(attachmentRule.parmDisplayName(), _placeholder))
                {
                    return true;
                }
            }
        }

        // PDF encryption password.
        if (DocPlaceholderManager::findPlaceholder(reportRunContext.parmPdfPassword(), _placeholder))
        {
            return true;
        }

        // Document title.
        if (DocPlaceholderManager::findPlaceholder(reportRunContext.parmDocumentTitle(), _placeholder))
        {
            return true;
        }

        // Document author.
        if (DocPlaceholderManager::findPlaceholder(reportRunContext.parmDocumentAuthor(), _placeholder))
        {
            return true;
        }

        // Document subject.
        if (DocPlaceholderManager::findPlaceholder(reportRunContext.parmDocumentSubject(), _placeholder))
        {
            return true;
        }

        // Document keywords.
        if (DocPlaceholderManager::findPlaceholder(reportRunContext.parmDocumentKeywords(), _placeholder))
        {
            return true;
        }

        // PDF signature settings.
        DocPdfSignatureSettings signatureSettings = reportRunContext.parmPdfSignatureSettings();
        if (signatureSettings != null)
        {
            // Signature reason.
            if (DocPlaceholderManager::findPlaceholder(signatureSettings.parmReason(), _placeholder))
            {
                return true;
            }

            // Signature location.
            if (DocPlaceholderManager::findPlaceholder(signatureSettings.parmLocation(), _placeholder))
            {
                return true;
            }

            // Signature contact info.
            if (DocPlaceholderManager::findPlaceholder(signatureSettings.parmContact(), _placeholder))
            {
                return true;
            }
        }

        // Check the File, Email and Printer print destinations.
        switch (currentPrintDestination)
        {
            case DocPrintDestination::GenerateDataSource:
                // DDSP filename
                if (DocPlaceholderManager::findPlaceholder(generateDSPrintDestSettings.parmXmlDataSourceFilename(), _placeholder))
                {
                    return true;
                }

            case DocPrintDestination::Printer:
                // PrintAsPdfFilename.
                if (DocPlaceholderManager::findPlaceholder(printerPrintDestSettings.parmPrintAsPdfFilename(), _placeholder))
                {
                    return true;
                }

                // SelectedPrinterName.
                if (DocPlaceholderManager::findPlaceholder(printerPrintDestSettings.parmSelectedPrinterName(), _placeholder))
                {
                    return true;
                }

                break;

            case DocPrintDestination::File:
                // OutputFilename.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmOutputFilename(), _placeholder))
                {
                    return true;
                }

                // Azure container name.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmAzureBsContainerName(), _placeholder))
                {
                    return true;
                }

                // Azure blob path.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmAzureBsBlobPath(), _placeholder))
                {
                    return true;
                }

                // Azure file share name.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmAzureFilesFileShareName(), _placeholder))
                {
                    return true;
                }

                // Azure file path.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmAzureFilesDirectoryPath(), _placeholder))
                {
                    return true;
                }

                // File system file path.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmFileSystemFilePath(), _placeholder))
                {
                    return true;
                }

                // SharePoint site url.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmSharePointSiteUrl(), _placeholder))
                {
                    return true;
                }

                // SharePoint folder path.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmSharePointFolderPath(), _placeholder))
                {
                    return true;
                }

                // Attachment settings - Tags.
                if (DocPlaceholderManager::findPlaceholder(filePrintDestSettings.parmSaveToAttachmentsTags(), _placeholder))
                {
                    return true;
                }

                break;
    
            case DocPrintDestination::Email:
                // EmailAttachmentName.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailAttachmentName(), _placeholder))
                {
                    return true;
                }
    
                // EmailBody.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailBody(), _placeholder))
                {
                    return true;
                }
    
                // EmailSubject.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailSubject(), _placeholder))
                {
                    return true;
                }

                // EmailTo.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailTo(), _placeholder))
                {
                    return true;
                }

                // EmailCc.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailCc(), _placeholder))
                {
                    return true;
                }
      
                // EmailBcc.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailBcc(), _placeholder))
                {
                    return true;
                }

                // EmailFrom.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailFrom(), _placeholder))
                {
                    return true;
                }

                // EmailFromDisplayName.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailFromDisplayName(), _placeholder))
                {
                    return true;
                }

                // EmailReplyTo.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailReplyTo(), _placeholder))
                {
                    return true;
                }

                // EmailBounceTo.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmEmailBounceTo(), _placeholder))
                {
                    return true;
                }

                // ReadReceiptAddress.
                if (DocPlaceholderManager::findPlaceholder(emailPrintDestSettings.parmReadReceiptAddress(), _placeholder))
                {
                    return true;
                }

                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholdersInCurrentPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces every occurrences of the given placeholders with their given values
    /// in current print destination.
    /// </summary>
    /// <param name="_placeholderValues">
    /// A container containing pairs [ [ placeholder_name, placeholder_value ], ... ].
    /// Placeholder name is specified without start and end symbol of a placeholder (@),
    /// e.g. [ ['CollectionLetterNum', '00006'] ].
    /// </param>
    public void replacePlaceholdersInCurrentPrintDest(container _placeholderValues)
    {
        this.replacePlhInCurrentPrintDestCommon(false, _placeholderValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlhInCurrentPrintDestCommon</Name>
				<Source><![CDATA[
    protected void replacePlhInCurrentPrintDestCommon(boolean _replaceStandardPlaceholders, container _customPlaceholderValues = conNull())
    {
        str strWithReplacedPlaceholders;
    
        if (!_replaceStandardPlaceholders && _customPlaceholderValues == conNull())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:PairsShouldBeProvided");
        }
    
        // -- Replace placeholders in the report caption.
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(reportRunContext.parmReportCaption());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmReportCaption(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != reportRunContext.parmReportCaption())
        {
            reportRunContext.parmReportCaption(strWithReplacedPlaceholders);
        }

        // -- Replace placeholders in Print archive note.
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(reportRunContext.parmSaveToArchiveNote());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmSaveToArchiveNote(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != reportRunContext.parmSaveToArchiveNote())
        {
            reportRunContext.parmSaveToArchiveNote(strWithReplacedPlaceholders);
        }

        // -- Replace placeholders in the report attachment rules.
        List attachmentRuleList = reportRunContext.attachmentRuleList();
        if (attachmentRuleList != null && !attachmentRuleList.empty())
        {
            ListEnumerator attachmentRuleListEnum = attachmentRuleList.getEnumerator();
            while (attachmentRuleListEnum.moveNext())
            {
                DocReportAttachmentRule attachmentRule = attachmentRuleListEnum.current();
                
                // Attachment rule description.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(attachmentRule.parmName());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(attachmentRule.parmName(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != attachmentRule.parmName())
                {
                    attachmentRule.parmName(strWithReplacedPlaceholders);
                }

                // Attachment rule display name.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(attachmentRule.parmDisplayName());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(attachmentRule.parmDisplayName(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != attachmentRule.parmDisplayName())
                {
                    attachmentRule.parmDisplayName(strWithReplacedPlaceholders);
                }

                // Attachment rule tags.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(attachmentRule.parmTags());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(attachmentRule.parmTags(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != attachmentRule.parmTags())
                {
                    attachmentRule.parmTags(strWithReplacedPlaceholders);
                }
            }
        }

        // -- Replace placeholders in PDF encryption password.
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(reportRunContext.parmPdfPassword());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmPdfPassword(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != reportRunContext.parmPdfPassword())
        {
            reportRunContext.parmPdfPassword(strWithReplacedPlaceholders);
        }

        // -- Replace placeholders in document title.
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(reportRunContext.parmDocumentTitle());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentTitle(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != reportRunContext.parmDocumentTitle())
        {
            reportRunContext.parmDocumentTitle(strWithReplacedPlaceholders);
        }

        // -- Replace placeholders in document author.
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(reportRunContext.parmDocumentAuthor());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentAuthor(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != reportRunContext.parmDocumentAuthor())
        {
            reportRunContext.parmDocumentAuthor(strWithReplacedPlaceholders);
        }

        // -- Replace placeholders in document subject.
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(reportRunContext.parmDocumentSubject());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentSubject(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != reportRunContext.parmDocumentSubject())
        {
            reportRunContext.parmDocumentSubject(strWithReplacedPlaceholders);
        }

        // -- Replace placeholders in document keywords.
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(reportRunContext.parmDocumentKeywords());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentKeywords(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != reportRunContext.parmDocumentKeywords())
        {
            reportRunContext.parmDocumentKeywords(strWithReplacedPlaceholders);
        }

        // PDF signature settings.
        DocPdfSignatureSettings signatureSettings = reportRunContext.parmPdfSignatureSettings();
        if (signatureSettings != null)
        {
            // -- Replace placeholders in signature reason.
            if (_replaceStandardPlaceholders)
            {
                strWithReplacedPlaceholders = this.replaceStdPlaceholders(signatureSettings.parmReason());
            }
            else
            {
                strWithReplacedPlaceholders = this.replacePlaceholders(signatureSettings.parmReason(), _customPlaceholderValues);
            }
            if (strWithReplacedPlaceholders != signatureSettings.parmReason())
            {
                signatureSettings.parmReason(strWithReplacedPlaceholders);
            }

            // -- Replace placeholders in signature location.
            if (_replaceStandardPlaceholders)
            {
                strWithReplacedPlaceholders = this.replaceStdPlaceholders(signatureSettings.parmLocation());
            }
            else
            {
                strWithReplacedPlaceholders = this.replacePlaceholders(signatureSettings.parmLocation(), _customPlaceholderValues);
            }
            if (strWithReplacedPlaceholders != signatureSettings.parmLocation())
            {
                signatureSettings.parmLocation(strWithReplacedPlaceholders);
            }

            // -- Replace placeholders in signature contact info.
            if (_replaceStandardPlaceholders)
            {
                strWithReplacedPlaceholders = this.replaceStdPlaceholders(signatureSettings.parmContact());
            }
            else
            {
                strWithReplacedPlaceholders = this.replacePlaceholders(signatureSettings.parmContact(), _customPlaceholderValues);
            }
            if (strWithReplacedPlaceholders != signatureSettings.parmContact())
            {
                signatureSettings.parmContact(strWithReplacedPlaceholders);
            }
        }

        // Replace placeholders in Generate DS print destination when DDSP is generated alongside report
        if (generateDSPrintDestSettings.parmIsGeneratedAlongsideReport())
        {
            this.replacePlhInGenerateDSPrintDest(_replaceStandardPlaceholders, _customPlaceholderValues);
            return;
        }

        // -- Replace placeholders in the current print destination settings (Printer, File or Email).
        switch (currentPrintDestination)
        {
            case DocPrintDestination::GenerateDataSource:
                this.replacePlhInGenerateDSPrintDest(_replaceStandardPlaceholders, _customPlaceholderValues);
                break;

            case DocPrintDestination::Printer:
                // PrintAsPdfFilename.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(printerPrintDestSettings.parmPrintAsPdfFilename());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(printerPrintDestSettings.parmPrintAsPdfFilename(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != printerPrintDestSettings.parmPrintAsPdfFilename())
                {
                    printerPrintDestSettings.parmPrintAsPdfFilename(strWithReplacedPlaceholders);
                }

                // SelectedPrinterName.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(printerPrintDestSettings.parmSelectedPrinterName());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(printerPrintDestSettings.parmSelectedPrinterName(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != printerPrintDestSettings.parmSelectedPrinterName())
                {
                    printerPrintDestSettings.parmSelectedPrinterName(strWithReplacedPlaceholders);
                }

                break;

            case DocPrintDestination::File:
                // OutputFilename.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmOutputFilename());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmOutputFilename(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmOutputFilename())
                {
                    filePrintDestSettings.parmOutputFilename(strWithReplacedPlaceholders);
                }
                
                // Azure container name.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmAzureBsContainerName());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureBsContainerName(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmAzureBsContainerName())
                {
                    // Since most of placeholders contains uppercase letters, which are not allowed in Azure container names,
                    // if any placeholder got replaced, convert all letters of the resulting string to lowercase.
                    filePrintDestSettings.parmAzureBsContainerName(strLwr(strWithReplacedPlaceholders));
                }

                // Azure blob path.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmAzureBsBlobPath());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureBsBlobPath(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmAzureBsBlobPath())
                {
                    filePrintDestSettings.parmAzureBsBlobPath(strWithReplacedPlaceholders);
                }

                // Azure file share name.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmAzureFilesFileShareName());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureFilesFileShareName(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmAzureFilesFileShareName())
                {
                    // Since most of placeholders contains uppercase letters, which are not allowed in Azure file share names,
                    // if any placeholder got replaced, convert all letters of the resulting string to lowercase.
                    filePrintDestSettings.parmAzureFilesFileShareName(strLwr(strWithReplacedPlaceholders));
                }

                // Azure file path.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmAzureFilesDirectoryPath());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureFilesDirectoryPath(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmAzureFilesDirectoryPath())
                {
                    filePrintDestSettings.parmAzureFilesDirectoryPath(strWithReplacedPlaceholders);
                }
                
                // File system file path.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmFileSystemFilePath());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmFileSystemFilePath(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmFileSystemFilePath())
                {
                    filePrintDestSettings.parmFileSystemFilePath(strWithReplacedPlaceholders);
                }

                // SharePoint site url.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmSharePointSiteUrl());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmSharePointSiteUrl(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmSharePointSiteUrl())
                {
                    filePrintDestSettings.parmSharePointSiteUrl(strWithReplacedPlaceholders);
                }
                                
                // SharePoint folder path.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmSharePointFolderPath());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmSharePointFolderPath(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmSharePointFolderPath())
                {
                    filePrintDestSettings.parmSharePointFolderPath(strWithReplacedPlaceholders);
                }

                // Attachment settings - Tags.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(filePrintDestSettings.parmSaveToAttachmentsTags());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmSaveToAttachmentsTags(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != filePrintDestSettings.parmSaveToAttachmentsTags())
                {
                    filePrintDestSettings.parmSaveToAttachmentsTags(strWithReplacedPlaceholders);
                }

                break;
    
            case DocPrintDestination::Email:
                // EmailAttachmentName.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailAttachmentName());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailAttachmentName(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailAttachmentName())
                {
                    emailPrintDestSettings.parmEmailAttachmentName(strWithReplacedPlaceholders);
                }
    
                // EmailBody.
                if (_replaceStandardPlaceholders)
                {
                    // Load and add content of all standard image placeholders such as @COMPANYLOGO@ which are used in the email body.
                    this.loadContentOfStandardImagePlaceholders();

                    // Replace all standard placeholders with their values.
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailBody(), true);
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailBody(), _customPlaceholderValues, true);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailBody())
                {
                    emailPrintDestSettings.parmEmailBody(strWithReplacedPlaceholders);
                }
    
                // EmailCc.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailCc());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailCc(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailCc())
                {
                    emailPrintDestSettings.parmEmailCc(strWithReplacedPlaceholders);
                }
    
                // EmailFrom.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailFrom());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailFrom(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailFrom())
                {
                    emailPrintDestSettings.parmEmailFrom(strWithReplacedPlaceholders);
                }
    
                // EmailSubject.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailSubject());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailSubject(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailSubject())
                {
                    emailPrintDestSettings.parmEmailSubject(strWithReplacedPlaceholders);
                }
    
                // EmailTo.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailTo());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailTo(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailTo())
                {
                    emailPrintDestSettings.parmEmailTo(strWithReplacedPlaceholders);
                }
    
                // EmailBcc.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailBcc());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailBcc(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailBcc())
                {
                    emailPrintDestSettings.parmEmailBcc(strWithReplacedPlaceholders);
                }
    
                // EmailReplyTo.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailReplyTo());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailReplyTo(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailReplyTo())
                {
                    emailPrintDestSettings.parmEmailReplyTo(strWithReplacedPlaceholders);
                }

                // EmailBounceTo.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailBounceTo());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailBounceTo(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailBounceTo())
                {
                    emailPrintDestSettings.parmEmailBounceTo(strWithReplacedPlaceholders);
                }

                // EmailFromDisplayName.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmEmailFromDisplayName());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailFromDisplayName(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmEmailFromDisplayName())
                {
                    emailPrintDestSettings.parmEmailFromDisplayName(strWithReplacedPlaceholders);
                }

                // ReadReceiptAddress.
                if (_replaceStandardPlaceholders)
                {
                    strWithReplacedPlaceholders = this.replaceStdPlaceholders(emailPrintDestSettings.parmReadReceiptAddress());
                }
                else
                {
                    strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmReadReceiptAddress(), _customPlaceholderValues);
                }
                if (strWithReplacedPlaceholders != emailPrintDestSettings.parmReadReceiptAddress())
                {
                    emailPrintDestSettings.parmReadReceiptAddress(strWithReplacedPlaceholders);
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlhInGenerateDSPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces standard and custom placeholders in Generate DS print destination.
    /// </summary>
    /// <param name = "_replaceStandardPlaceholders">Should standard placeholders be replaced</param>
    /// <param name = "_customPlaceholderValues">Container with a custom placeholder-value pairs</param>
    private void replacePlhInGenerateDSPrintDest(boolean _replaceStandardPlaceholders, container _customPlaceholderValues)
    {
        str strWithReplacedPlaceholders;

        // DDSP filename
        if (_replaceStandardPlaceholders)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholders(generateDSPrintDestSettings.parmXmlDataSourceFilename());
        }
        else
        {
            strWithReplacedPlaceholders = this.replacePlaceholders(generateDSPrintDestSettings.parmXmlDataSourceFilename(), _customPlaceholderValues);
        }
        if (strWithReplacedPlaceholders != generateDSPrintDestSettings.parmXmlDataSourceFilename())
        {
            generateDSPrintDestSettings.parmXmlDataSourceFilename(strWithReplacedPlaceholders);
            generateDSPrintDestSettings.escapeddspFilename();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceStdPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace the given standard placeholder within input string with its value if such found.
    /// </summary>
    /// <param name="_inputStr">Input string for replacing of the given standard placeholder.</param>
    /// <param name="_stdPlaceholder">Standard placeholder.</param>
    /// <param name="_htmlEncode">Should the standard placeholder value be HTML encoded.</param>
    /// <returns>
    /// Returns input string with replaced standard placeholder if such is found.
    /// Otherwise returns the same input string.
    /// </returns>
    public str replaceStdPlaceholder(str _inputStr, str _stdPlaceholder, boolean _htmlEncode)
    {
        if (!this.isValidStdPlaceholder(_stdPlaceholder))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:PlaceholderInvalid", _stdPlaceholder));
        }
    
        return this.replaceValidStdPlaceholder(_inputStr, _stdPlaceholder, _htmlEncode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceStdPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all standard placeholders within input string with their values.
    /// </summary>
    /// <param name="_inputStr">Input string for replacing of standard placeholders.</param>
    /// <param name="_htmlEncode">Should the standard placeholder values be HTML encoded.</param>
    /// <returns>
    /// Returns input string with replaced standard placeholders if such is found. 
    /// Otherwise returns the same input string.
    /// </returns>
    public str replaceStdPlaceholders(str _inputStr, boolean _htmlEncode = false)
    {
        str   strWithReplacedPlaceholders;
        int   foundPosStart, newStartingPos;
        str   placeholderWithoutStartAndStopSym;
    
    
        if (!_inputStr)
        {
            return _inputStr;
        }
    
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(_inputStr, DocConstantPlaceholder::PlaceholderReportId, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderReportCaption, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCompanyId, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCompanyName, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCompanyLogo, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCompanyLogoBase64, _htmlEncode);

        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderUserId, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderUserName, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderUserAlias, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderUserEmail, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCurrentUserEmail, _htmlEncode);
    
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderWorker, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderWorkerTitle, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderWorkerDepartment, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderWorkerEmail, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderWorkerImage, _htmlEncode);

        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderLanguageId, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderTimestamp, _htmlEncode);
        
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCurrentDate, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCurrentDatetime, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCurrentDay, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCurrentMonth, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderCurrentYear, _htmlEncode);

        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderGuid, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderBatchJobId, _htmlEncode);
    
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlhBatchJobSchedStartDateTime, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlhBatchJobActualStartDateTime, _htmlEncode);

        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderEnvironmentName, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderEnvironmentDomainName, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderEnvironmentType, _htmlEncode);
        strWithReplacedPlaceholders = this.tryReplaceStdPlaceholder(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderEnvironmentMode, _htmlEncode);
    
        // Check if placeholder is a field of report execution context.
        [foundPosStart, placeholderWithoutStartAndStopSym] =
            DocPlaceholderManager::findPlaceholderStartingWith(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderFieldStartToken, 1);
        while (foundPosStart)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholder(strWithReplacedPlaceholders, placeholderWithoutStartAndStopSym, _htmlEncode);
            newStartingPos = foundPosStart;
            [foundPosStart, placeholderWithoutStartAndStopSym] =
                DocPlaceholderManager::findPlaceholderStartingWith(
                    strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderFieldStartToken, newStartingPos);
        }
    
        // Check if placeholder is a method of report execution context.
        [foundPosStart, placeholderWithoutStartAndStopSym] =
            DocPlaceholderManager::findPlaceholderStartingWith(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderMethodStartToken, 1);
        while (foundPosStart)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholder(strWithReplacedPlaceholders, placeholderWithoutStartAndStopSym, _htmlEncode);
            newStartingPos = foundPosStart;
            [foundPosStart, placeholderWithoutStartAndStopSym] =
                DocPlaceholderManager::findPlaceholderStartingWith(
                    strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderMethodStartToken, newStartingPos);
        }
    
        // Check if placeholder is a report parameter.
        [foundPosStart, placeholderWithoutStartAndStopSym] =
            DocPlaceholderManager::findPlaceholderStartingWith(strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderParameterStartToken, 1);
        while (foundPosStart)
        {
            strWithReplacedPlaceholders = this.replaceStdPlaceholder(strWithReplacedPlaceholders, placeholderWithoutStartAndStopSym, _htmlEncode);
            newStartingPos = foundPosStart;
            [foundPosStart, placeholderWithoutStartAndStopSym] =
                DocPlaceholderManager::findPlaceholderStartingWith(
                    strWithReplacedPlaceholders, DocConstantPlaceholder::PlaceholderParameterStartToken, newStartingPos);
        }
    

        return strWithReplacedPlaceholders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceStdPlaceholdersInCurrentPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all standard placeholders with their values within current print destination.
    /// </summary>
    public void replaceStdPlaceholdersInCurrentPrintDest()
    {
        this.replacePlhInCurrentPrintDestCommon(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceValidStdPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the given standard placeholder within input string with its value if such found.
    /// </summary>
    /// <param name = "_inputStr">Input string for replacing of standard placeholders.</param>
    /// <param name = "_stdPlaceholder">A standard placeholder.</param>
    /// <param name = "_htmlEncode">Should the standard placeholder values be HTML encoded.</param>
    /// <returns>
    /// Returns input string with replaced standard placeholders if such is found. 
    /// Otherwise returns the same input string.
    /// </returns>
    protected str replaceValidStdPlaceholder(str _inputStr, str _stdPlaceholder, boolean _htmlEncode)
    {
        if (!_stdPlaceholder || !_inputStr)
        {
            return _inputStr;
        }
    
        // Find a placeholder.
        if (DocPlaceholderManager::findPlaceholder(_inputStr, _stdPlaceholder))
        {
            // Check if a placeholder is a valid standard placeholder
            if (!this.isValidStdPlaceholder(_stdPlaceholder))
            {
                return _inputStr;
            }

            str stdPlaceholderValue;

            // Check if standard placeholder already exists in the Placeholder map
            DocPlaceholder docPlaceholder = reportRunContext.getPlaceholder(_stdPlaceholder);
            if (docPlaceholder != null && docPlaceholder.parmPlaceholderKind() == DocPlaceholderKind::StandardPlaceholder)
            {
                stdPlaceholderValue = docPlaceholder.parmValueStr();
            }
            else
            {
                stdPlaceholderValue = this.getStdPlaceholderValueStr(_stdPlaceholder);
                // Add the placeholder to Placeholder map as a Standard placeholder, if it is not already added to the map.
                reportRunContext.addPlaceholderToMap(_stdPlaceholder, stdPlaceholderValue, DocPlaceholderKind::StandardPlaceholder);
            }

            // Placeholder found or constructed. Replace every occurrences in the input string.            
            str strWithReplacedPlaceholders = 
                DocPlaceholderManager::replacePlaceholder(_inputStr, _stdPlaceholder, stdPlaceholderValue, _htmlEncode, cultureInfo);
    
            return strWithReplacedPlaceholders;
        }
    
        return _inputStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryReplaceStdPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace the given standard placeholder within input string with its value if such found.
    /// </summary>
    /// <param name="_inputStr">Input string for replacing of the given standard placeholder.</param>
    /// <param name="_stdPlaceholder">Standard placeholder.</param>
    /// <param name="_htmlEncode">Should the standard placeholder value be HTML encoded.</param>
    /// <returns>
    /// Returns input string with replaced standard placeholder if such is found.
    /// Otherwise returns the same input string.
    /// </returns>
    public str tryReplaceStdPlaceholder(str _inputStr, str _stdPlaceholder, boolean _htmlEncode)
    {
        if (!this.isValidStdPlaceholder(_stdPlaceholder, true))
        {
            return _inputStr;
        }
    
        return this.replaceValidStdPlaceholder(_inputStr, _stdPlaceholder, _htmlEncode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyPlaceholderCandidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first placeholder candidate within given input string, starting at the given position.
    /// </summary>
    /// <param name="_inputStr">
    /// The string in which to search for potential placeholders.
    /// </param>
    /// <param name="_position">
    /// The first position in the _inputStr parameter to perform a search.
    /// </param>
    /// <param name="_number">
    /// The number of positions in the _inputStr parameter for performing a search.
    /// </param>
    /// <returns>
    /// The first placeholder candidate in the _inputStr if exists; otherwise, an empty string.
    /// </returns>
    public static str findAnyPlaceholderCandidate(str _inputStr, int _position = 1, int _number = strLen(_inputStr))
    {
        int  foundPosStart, foundPosEnd;
        str  placeholderWithoutStartAndStopSym;
        int  position;
    
    
        // There is no placeholder in an empty string.
        if (_inputStr == '')
        {
            return '';
        }
    
        if (_number <= 0)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _number has to be a positive number');
        }
    
        position = _position;
    
        foundPosStart = strScan(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol, position, _number);
        if (foundPosStart == 0)
        {
            return '';
        }
    
        foundPosEnd = strScan(_inputStr, DocConstantPlaceholder::PlaceholderEndSymbol, foundPosStart + 1, _number - foundPosStart + 1);
        if (foundPosEnd == 0)
        {
            return '';
        }
    
        placeholderWithoutStartAndStopSym = subStr(_inputStr, foundPosStart + 1, foundPosEnd - foundPosStart - 1);
    
        return placeholderWithoutStartAndStopSym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyPlaceholderCandidateForEmails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first placeholder candidate within the given input string
    /// representing a list of email addresses.
    /// </summary>
    /// <param name="_inputStr">
    /// A string (email list) in which to search for potential placeholders.
    /// </param>
    /// <param name="_showWarnings">
    /// Indicates whether the warning is shown in case that a placeholder is found.
    /// </param>
    /// <returns>
    /// True if a placeholder is found in _inputStr; otherwise, returns false.
    /// </returns>
    public static boolean findAnyPlaceholderCandidateForEmails(str _inputStr, boolean _showWarnings = true)
    {
        str         inputStr, inputStrPart;
        int         placeholderPosition, emailSeparatorPosition;
        boolean     containsPlaceholder;
    
    
        boolean checkPlaceholder(str _inputContainingStr,
                                 int _placeholderCandidateStartPosition,
                                 str _placeholderCandidate)
        {
            if (_placeholderCandidateStartPosition == 2)
            {
                // There is no text before the candidate: @placeholderCandidate@abc
                return true;
            }
    
            if (strLen(_inputContainingStr) == _placeholderCandidateStartPosition + strLen(_placeholderCandidate))
            {
                // There is no text after the candidate: abc@placeholderCandidate@
                return true;
            }
    
            return false;
        }
    
    
        boolean processInputStrPart(str _inputStrPart)
        {
            boolean     isPlaceholder;
            str         placeholderCandidate;
    
            // Search for the primary contact email placeholder '@@'.
            placeholderPosition = DocPlaceholderManager::findPrimaryContactEmailPlaceholder(_inputStrPart, 1, strLen(_inputStrPart));
            if (placeholderPosition > 0)
            {
                if (_showWarnings)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:PrimaryContactPlaceholderFound",
                                                   DocConstantPlaceholder::PlaceholderStartSymbol + DocConstantPlaceholder::PlaceholderEndSymbol,
                                                   _inputStr));
                }
    
                return true;
            }
    
            // Search for other placeholders.
            placeholderCandidate = DocPlaceholderManager::findAnyPlaceholderCandidate(_inputStrPart, 1, strLen(_inputStrPart));
            if (placeholderCandidate != '')
            {
                placeholderPosition = strScan(_inputStrPart, placeholderCandidate, 1, strLen(_inputStrPart));
                isPlaceholder = checkPlaceholder(_inputStrPart, placeholderPosition, placeholderCandidate);
    
                if (isPlaceholder)
                {
                    if (_showWarnings)
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:PlaceholderFoundInEmailList",
                                                       DocConstantPlaceholder::PlaceholderStartSymbol + placeholderCandidate +
                                                       DocConstantPlaceholder::PlaceholderEndSymbol,
                                                       _inputStr));
                    }
    
                    return true;
                }
            }
    
            return false;
        }
    
    
        if (_inputStr == '')
        {
            return false;
        }
    
        inputStr = strLTrim(_inputStr);
    
        // We will check each of substrings separately; in order to get substrings
        // we will search the input string for one of two email address separators: ',' and ';'.
        emailSeparatorPosition = strFind(inputStr, ';,', 1, strLen(inputStr));
        while (emailSeparatorPosition > 0)
        {
            inputStrPart = subStr(inputStr, 1, emailSeparatorPosition - 1);
            inputStrPart = strRTrim(inputStrPart);
    
            if (inputStrPart != '') // this can happend in case that we have, e.g.'name@xxx.com;;name2@yyy.com'
            {
                containsPlaceholder = processInputStrPart(inputStrPart);
                if (containsPlaceholder)
                {
                    return true;
                }
            }
    
            inputStr = subStr(inputStr, emailSeparatorPosition + 1, strLen(inputStr));
            inputStr = strLTrim(inputStr);
            emailSeparatorPosition = strFind(inputStr, ';,', 1, strLen(inputStr));
        }
    
        // For the last email in the list, check if it contains placeholders.
        inputStr = strRTrim(inputStr);
        if (inputStr != '')
        {
            containsPlaceholder = processInputStrPart(inputStr);
            if (containsPlaceholder)
            {
                return true;
            }
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyStdPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first standard placeholder within given input string, starting at the given position.
    /// </summary>
    /// <param name="_inputStr">The string in which to search for standard placeholders.</param>
    /// <param name="_position">The first position in the _inputStr parameter to perform a search.</param>
    /// <param name="_number">The number of positions in the _inputStr parameter for performing a search.</param>
    /// <returns>The first standard placeholder in the _inputStr if exists; otherwise, an empty string.</returns>
    public static str findAnyStdPlaceholder(str _inputStr, int _position = 1, int _number = strLen(_inputStr))
    {
        int  foundPosStart, foundPosEnd;
        str  placeholderWithoutStartAndStopSym;
        int  position;
    
    
        // There is no placeholder in an empty string.
        if (_inputStr == '')
        {
            return '';
        }
    
        if (_number <= 0)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _number has to be a positive number');
        }
    
        position = _position;
        foundPosStart = strScan(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol, position, _number);
        while (foundPosStart != 0)
        {
            foundPosEnd = strScan(_inputStr, DocConstantPlaceholder::PlaceholderEndSymbol, foundPosStart + 1, _number - foundPosStart + 1);
            if (foundPosEnd == 0)
            {
                break;
            }
    
            placeholderWithoutStartAndStopSym = subStr(_inputStr, foundPosStart + 1, foundPosEnd - foundPosStart - 1);
            if (DocPlaceholderManager::isStandardPlaceholder(placeholderWithoutStartAndStopSym))
            {
                return placeholderWithoutStartAndStopSym;
            }
    
            position = foundPosEnd + 1;
    
            foundPosStart = strScan(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol, position, _number);
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the position of the given placeholder within given input string, starting at the given position.
    /// </summary>
    /// <param name="_inputStr">
    /// The string in which to search given placeholder.
    /// </param>
    /// <param name="_placeholder">
    /// Placeholder without start and end symbol of a placeholder (@).
    /// </param>
    /// <param name="_position">
    /// The first position in the _inputStr parameter to perform a search.
    /// </param>
    /// <param name="_number">
    /// The number of positions in the _inputStr parameter for performing a search.
    /// If there is a minus sign in front of the _number parameter,
    /// the system searches the number of characters in reverse order from the specified position.
    /// </param>
    /// <returns>
    /// The position in the _inputStr at which the specified placeholder was found; otherwise, 0.
    /// </returns>
    public static int findPlaceholder(str _inputStr, str _placeholder, int _position = 1, int _number = strLen(_inputStr))
    {
        int foundPos;
        str placeholderWithStartAndStopSym;
    
        placeholderWithStartAndStopSym = DocConstantPlaceholder::PlaceholderStartSymbol + _placeholder + DocConstantPlaceholder::PlaceholderEndSymbol;
    
        foundPos = strScan(_inputStr, placeholderWithStartAndStopSym, _position, _number);
    
        return foundPos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlaceholderStartingWith</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds placeholder within given input string, starting at the given position,
    /// with the given prefix without start symbol of a placeholder (@).
    /// </summary>
    /// <param name="_inputStr">
    /// The string in which to search the given prefix of a placeholder.
    /// </param>
    /// <param name="_placeholderStart">
    /// Prefix of a placeholder to find without start symbol of a placeholder (@).
    /// </param>
    /// <param name="_position">
    /// The first position in the _inputStr parameter to perform a search.
    /// </param>
    /// <returns>
    /// The whole placeholder without start and end sybol of a placeholder (@) and its starting position,
    /// if such exists as a substring of the _inputStr; otherwise returns an empty string.
    /// </returns>
    public static container findPlaceholderStartingWith(str _inputStr, str _placeholderStart, int _position = 1)
    {
        int   foundPosStart, foundPosEnd;
        str   placeholderStartWithStartSymbol;
        str   placeholderWithoutStartAndStopSym;
    
        placeholderWithoutStartAndStopSym = '';
    
        placeholderStartWithStartSymbol = DocConstantPlaceholder::PlaceholderStartSymbol + _placeholderStart;
        foundPosStart =  strScan(_inputStr, placeholderStartWithStartSymbol, _position, strLen(_inputStr));
        if (foundPosStart)
        {
            foundPosEnd = strScan(_inputStr, DocConstantPlaceholder::PlaceholderEndSymbol, foundPosStart + 1, strLen(_inputStr));
            if (foundPosEnd)
            {
                placeholderWithoutStartAndStopSym = subStr(_inputStr, foundPosStart + 1, foundPosEnd - foundPosStart - 1);
            }
    
            if (!placeholderWithoutStartAndStopSym)
            {
                foundPosStart = 0;
            }
        }
    
        return [foundPosStart, placeholderWithoutStartAndStopSym];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrimaryContactEmailPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first occurrence of the primary contact email placeholder ('@@')
    /// within given input string, starting at the given position.
    /// </summary>
    /// <param name="_inputStr">
    /// The string in which to search for the primary contact email placeholder.
    /// </param>
    /// <param name="_position">
    /// The first position in the _inputStr parameter to perform a search.
    /// </param>
    /// <param name="_number">
    /// The number of positions in the _inputStr parameter for performing a search.
    /// </param>
    /// <returns>
    /// The position of the first occurrence of '@@' in the _inputStr; returns 0 if '@@' is not found.
    /// </returns>
    public static int findPrimaryContactEmailPlaceholder(str _inputStr, int _position = 1, int _number = strLen(_inputStr))
    {
        int  foundPos;
        str  primaryContactEmailPlaceholder;
        int  position;
    
        // There is no placeholder in an empty string.
        if (_inputStr == '')
        {
            return 0;
        }
    
        if (_number <= 0)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _number has to be a positive number');
        }
    
        position = _position;
    
        primaryContactEmailPlaceholder = DocConstantPlaceholder::PlaceholderStartSymbol + DocConstantPlaceholder::PlaceholderEndSymbol;
    
        foundPos = strScan(_inputStr, primaryContactEmailPlaceholder, position, _number);
    
        return foundPos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStandardPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the given placeholder is a standard placeholders.
    /// </summary>
    /// <param name="_placeholder">
    /// Name of placeholder without the placeholder start and end symbol '@'
    /// e.g. _placeholder = 'REPORTID'
    /// </param>
    /// <returns>
    /// Returns true if the given placeholder is a standard placeholders, otherwise false.
    /// </returns>
    /// <remarks>
    /// Standard placeholders:
    /// @FIELD_{Name of the field from the Report Execution Context table}@ -> extract the value of the specified field
    /// @METHOD_{Name of the method from the Report Execution Context table}@ -> extract the value of the specified parameterless method
    /// @PARAMETER_{Name of the report parameter}@ -> extract the value of specified report parameter
    /// @REPORTID@
    /// @REPORTCAPTION@
    /// @COMPANYID@
    /// @COMPANYNAME@
    /// @COMPANYLOGO@
    /// @COMPANYLOGO_BASE64@
    /// @USERID@
    /// @USERNAME@
    /// @USERALIAS@
    /// @USEREMAIL@
    /// @WORKER@
    /// @WORKERTITLE@
    /// @WORKERDEPARTMENT@
    /// @WORKEREMAIL@
    /// @WORKERIMAGE@
    /// @LANGUAGEID@
    /// @TIMESTAMP@
    /// @CURRENTDATE@
    /// @CURRENTDATETIME@
    /// @CURRENTDAY@
    /// @CURRENTMONTH@
    /// @CURRENTYEAR@
    /// @GUID@
    /// @BATCHJOBID@
    /// @BATCHJOB_SCHEDULED_STARTDATETIME@
    /// @BATCHJOB_ACTUAL_STARTDATETIME@
    /// @ENVNAME@
    /// @ENVDOMAINNAME@
    /// @ENVTYPE@
    /// @ENVMODE@
    /// Use macros defined in DocMacros instead of string constants.
    /// </remarks>
    public static boolean isStandardPlaceholder(str _placeholder)
    {
        if (!_placeholder)
        {
            return false;
        }
    
        if (_placeholder == DocConstantPlaceholder::PlaceholderReportId)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderReportCaption)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCompanyId)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCompanyName)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCompanyLogo)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCompanyLogoBase64)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderUserId)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderUserName)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderUserAlias)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderUserEmail)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCurrentUserEmail)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderWorker)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderWorkerTitle)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderWorkerDepartment)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderWorkerEmail)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderWorkerImage)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderLanguageId)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderTimestamp)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCurrentDate)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCurrentDatetime)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCurrentDay)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCurrentMonth)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderCurrentYear)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderGuid)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderBatchJobId ||
                 _placeholder == DocConstantPlaceholder::PlhBatchJobSchedStartDateTime ||
                 _placeholder == DocConstantPlaceholder::PlhBatchJobActualStartDateTime)
        {
            return true;
        }
        else if (strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderFieldStartToken) ||
                 strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderMethodStartToken))
        {
            return true;
        }
        else if (strStartsWith(_placeholder, DocConstantPlaceholder::PlaceholderParameterStartToken))
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderEnvironmentName)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderEnvironmentDomainName)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderEnvironmentType)
        {
            return true;
        }
        else if (_placeholder == DocConstantPlaceholder::PlaceholderEnvironmentMode)
        {
            return true;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidPlaceholderName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if given placeholder name is valid.
    /// </summary>
    /// <param name="_placeholder">
    /// Placeholder name.
    /// </param>
    /// <param name="_suppressWarnings">
    /// Should warnings, if any, be suppressed.
    /// </param>
    /// <returns>
    /// Returns true if the given placeholder name is a valid placeholder name.
    /// </returns>
    public static boolean isValidPlaceholderName(str _placeholder, boolean _suppressWarnings = false)
    {
        if (!_placeholder)
        {
            if (!_suppressWarnings)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:PlaceholderIsEmptyString", true, '', false);
            }
    
            return false;
        }
    
        if (strScan(_placeholder, DocConstantPlaceholder::PlaceholderStartSymbol, 1, strLen(_placeholder)) ||
            strScan(_placeholder, DocConstantPlaceholder::PlaceholderEndSymbol, 1, strLen(_placeholder)))
        {
            if (!_suppressWarnings)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:PlaceholderWronglySpecified", true, '', false);
            }
    
            return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace given placeholder within given input string with a given placeholder value.
    /// </summary>
    /// <param name="_inputStr">Input string within replacement is going to be done.</param>
    /// <param name="_placeholder">Placeholder to be replaced without start and end symbol ('@').</param>
    /// <param name="_placeholderValue">Placeholder value used for replacement of the given placeholder.</param>
    /// <param name="_htmlEncode">Should the placeholder value be HTML encoded.</param>
    /// <param name="_cultureInfo">An instance of the CultureInfo class.</param>
    /// <returns>
    /// Returns input string with replaced placeholder. If a placeholder is not found,
    /// replacement is not done and input string is not changed.
    /// </returns>
    public static str replacePlaceholder(str _inputStr, str _placeholder, anytype _placeholderValue, boolean _htmlEncode = true, System.Globalization.CultureInfo _cultureInfo = null)
    {
        str strWithReplacedPlaceholders;
        str placeholderValueStr;
        str placeholderWithStartAndStopSym;
    
    
        if (!_placeholder)
        {
            return _inputStr;
        }
    
        // Find a placeholder.
        if (DocPlaceholderManager::findPlaceholder(_inputStr, _placeholder))
        {
            // Placeholder found. Replace every occurrences in the input string.
            if (typeOf(_placeholderValue) == Types::AnyType)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:PlaceholderNotInitialized", _placeholder));
            }
            if (typeOf(_placeholderValue) == Types::BLOB ||
                typeOf(_placeholderValue) == Types::Class ||
                typeOf(_placeholderValue) == Types::Record ||
                typeOf(_placeholderValue) == Types::Container ||
                typeOf(_placeholderValue) == Types::void)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:PlaceholderValueNotSupported", typeOf(_placeholder), _placeholder));
            }
    
            placeholderWithStartAndStopSym = DocConstantPlaceholder::PlaceholderStartSymbol + _placeholder + DocConstantPlaceholder::PlaceholderEndSymbol;
    
            // Format value according to the current culture (language).
            placeholderValueStr = DocGlobalHelper::formatData(_placeholderValue, _cultureInfo, DocApplyTimeZone::UserPreferredTimeZone);
    
            if (_htmlEncode)
            {
                // HTML encode the value.
                placeholderValueStr = System.Web.HttpUtility::HtmlEncode(placeholderValueStr);
            }

            strWithReplacedPlaceholders = Docentric.AX.Framework.Utilities.StringHelper::Replace(_inputStr, placeholderWithStartAndStopSym, placeholderValueStr);
    
            return strWithReplacedPlaceholders;
        }
    
        return _inputStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholderInText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces all occurrences of the given Custom placeholder with the given value of any data type.
    /// Note that the placeholder value will be formatted in the report run-time language.
    /// Additionally, stores the custom placeholder to the placeholder map.
    /// </summary>
    /// <param name = "_inputStr">The input string where the given placeholder should be replaced.</param>
    /// <param name = "_placeholder">Custom placeholder name</param>
    /// <param name = "_placeholderValue">Placeholder value of any data type</param>
    /// <param name = "_htmlEncode">Should placeholder value be encoded</param>
    /// <returns>Input string with the replaced placeholder.</returns>
    public str replacePlaceholderInText(str _inputStr, str _placeholder, anytype _placeholderValue, boolean _htmlEncode = true)
    {
        // Add the placeholder to Placeholder map as a Custom placeholder, if it is not already added to the map.
        reportRunContext.addPlaceholderToMap(_placeholder, _placeholderValue, DocPlaceholderKind::CustomPlaceholder);

        // If the placeholder value contains a NULL value, e.g. dateNull(), replace it with DocConstatDSP::NA ('/').
        str replacementForNullValue = this.getReplacementForNullValue(_placeholderValue);
        if (replacementForNullValue)
        {
            return DocPlaceholderManager::replacePlaceholder(_inputStr, _placeholder, replacementForNullValue, _htmlEncode, cultureInfo);
        }
        
        return DocPlaceholderManager::replacePlaceholder(_inputStr, _placeholder, _placeholderValue, _htmlEncode, cultureInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplacementForNullValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the replacement value for date and utcDateTime null values.
    /// </summary>
    /// <param name = "_placeholderValue">Placeholder value of any data type</param>
    /// <returns>
    ///   - Empty string, if the given placeholder is not of type date and utcDateTime.
    ///   - Empty string, if the given placeholder is of date or utcDateTime type, but it doesn't contain the null value.
    ///   - Otherwise returns DocConstantDSP::NA ('/').
    /// </returns>
    protected str getReplacementForNullValue(anytype _placeholderValue)
    {
        str replacementValue;

        switch (typeOf(_placeholderValue))
        {
            case Types::Date:
                if (_placeholderValue == dateNull())
                {
                    replacementValue = DocConstantDSP::NA;
                }
                break;
            case Types::UtcDateTime:
                if (_placeholderValue == utcDateTimeNull())
                {
                    replacementValue = DocConstantDSP::NA;
                }
                break;
        }

        return replacementValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces all given placeholders within given input string.
    /// </summary>
    /// <param name="_inputStr">
    /// Input string within replacement is going to be done.
    /// </param>
    /// <param name="_placeholderValues">
    /// A container containing pairs [ [ placeholder_name, placeholder_value ], ... ].
    /// Placeholder name is specified without start and end symbol of a placeholder (@).
    /// </param>
    /// <param name="_htmlEncode">
    /// Should the placeholder values be HTML encoded.
    /// </param>
    /// <returns>
    /// Returns input string with replaced placeholders. If a placeholder is not found,
    /// replacement is not done and input string is not changed.
    /// </returns>
    public str replacePlaceholders(str _inputStr, container _placeholderValues, boolean _htmlEncode = false)
    {
        container   placeholderPair;
        int         counter;
        str         placeholderName;
        str         strWithReplacedPlaceholders;
    
    
        if (_placeholderValues == conNull())
        {
            return _inputStr;
        }
    
        strWithReplacedPlaceholders = _inputStr;
        for (counter = 1; counter <= conLen(_placeholderValues); counter++)
        {
            try
            {
                placeholderPair = conPeek(_placeholderValues, counter);
                placeholderName = conPeek(placeholderPair, 1);
                // placeholderValue = conPeek(placeholderPair, 2);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PlaceholderValuesWrongFormat");
            }
    
            if (conLen(placeholderPair) != 2)
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:PlaceholderValuesWrongFormat");
            }
    
    
            if (!DocPlaceholderManager::isValidPlaceholderName(placeholderName))
            {
                if (placeholderName)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:PlaceholderNameInvalid", placeholderName));
                }
                else
                {
                    DocGlobalHelper::handleException(funcName(), "@DocentricAX:PlaceholderNameNotProvided");
                }
            }
    
            strWithReplacedPlaceholders = this.replacePlaceholderInText(strWithReplacedPlaceholders, placeholderName, conPeek(placeholderPair, 2), _htmlEncode);
        }
    
    
        return strWithReplacedPlaceholders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containPlaceholders_emailPrintDestSettings</Name>
				<Source><![CDATA[
    public static boolean containPlaceholders_emailPrintDestSettings(DocPrintDestSettingsEmail _emailPrintDestSettings)
    {
        str      containPlaceholders;
        boolean  containPlaceholdersEmail;

        // EmailAttachmentName.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_emailPrintDestSettings.parmEmailAttachmentName());
        if (containPlaceholders)
        {
            return true;
        }
    
        // EmailBody.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_emailPrintDestSettings.parmEmailBody());
        if (containPlaceholders)
        {
            return true;
        }
    
        // EmailCc.
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmEmailCc(), false);
        if (containPlaceholdersEmail)
        {
            return true;
        }
                
        // EmailFrom.
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmEmailFrom(), false);
        if (containPlaceholdersEmail)
        {
            return true;
        }

        // EmailSubject.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_emailPrintDestSettings.parmEmailSubject());
        if (containPlaceholders)
        {
            return true;
        }

        // EmailTo.
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmEmailTo(), false);
        if (containPlaceholdersEmail)
        {
            return true;
        }

        // EmailBcc.
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmEmailBcc(), false);
        if (containPlaceholdersEmail)
        {
            return true;
        }

        // EmailReplyTo.
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmEmailReplyTo(), false);
        if (containPlaceholdersEmail)
        {
            return true;
        }

        // EmailBounceTo.
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmEmailBounceTo(), false);
        if (containPlaceholdersEmail)
        {
            return true;
        }

        // EmailFromDisplayName
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmEmailFromDisplayName(), false);
        if (containPlaceholdersEmail)
        {
            return true;
        }

        // ReadReceiptAddress.
        containPlaceholdersEmail = DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(_emailPrintDestSettings.parmReadReceiptAddress(), false);
        if (containPlaceholdersEmail)
        {
            // Ignore token @FROM_ADDRESS@.
            if (_emailPrintDestSettings.parmReadReceiptAddress() != DocConstant::EmailFromAddressPlaceholder)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containPlaceholders_filePrintDestSettings</Name>
				<Source><![CDATA[
    public static boolean containPlaceholders_filePrintDestSettings(DocPrintDestSettingsFile _filePrintDestSettings)
    {
        str containPlaceholders;
      
        // OutputFilename.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmOutputFilename());
        if (containPlaceholders)
        {
            return true;
        }
                
        // Azure container name.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmAzureBsContainerName());
        if (containPlaceholders)
        {
            return true;
        }

        // Azure blob path.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmAzureBsBlobPath());
        if (containPlaceholders)
        {
            return true;
        }

        // Azure file share name.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmAzureFilesFileShareName());
        if (containPlaceholders)
        {
            return true;
        }

        // Azure file path.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmAzureFilesDirectoryPath());
        if (containPlaceholders)
        {
            return true;
        }

        // File system file path.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmFileSystemFilePath());
        if (containPlaceholders)
        {
            return true;
        }

        // SharePoint site url.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmSharePointSiteUrl());
        if (containPlaceholders)
        {
            return true;
        }

        // SharePoint folder path.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmSharePointFolderPath());
        if (containPlaceholders)
        {
            return true;
        }

        // Attachment settings - Tags.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_filePrintDestSettings.parmSaveToAttachmentsTags());
        if (containPlaceholders)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containPlaceholders_printerPrintDestSettings</Name>
				<Source><![CDATA[
    public static boolean containPlaceholders_printerPrintDestSettings(DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        str containPlaceholders;

        // NOTE: Execute the method nevertheless is the "Printing As PDF" mode on or not.
      
        // PrintAsPdfFilename.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printerPrintDestSettings.parmPrintAsPdfFilename());
        if (containPlaceholders)
        {
            return true;
        }

        // SelectedPrinterName.
        if (!DocPrintDestSettingsPrinter::containsToken(_printerPrintDestSettings.parmSelectedPrinterName()))
        {
            containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printerPrintDestSettings.parmSelectedPrinterName());
            if (containPlaceholders)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containPlaceholders_printReportSettings</Name>
				<Source><![CDATA[
    public static boolean containPlaceholders_printReportSettings(DocPrintReportSettings _printReportSettings)
    {
        str containPlaceholders;
      
        // Report caption.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printReportSettings.parmReportCaption());
        if (containPlaceholders)
        {
            return true;
        }

        // Print archive note.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printReportSettings.parmSaveToArchiveNote());
        if (containPlaceholders)
        {
            return true;
        }
                
        // Report attachment rules.
        List attachmentRuleList = _printReportSettings.parmAttachmentRuleList();
        if (attachmentRuleList != null && !attachmentRuleList.empty())
        {
            ListEnumerator attachmentRuleListEnum = attachmentRuleList.getEnumerator();
            while (attachmentRuleListEnum.moveNext())
            {
                DocReportAttachmentRule attachmentRule = attachmentRuleListEnum.current();
                
                // Attachment rule description.
                containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(attachmentRule.parmName());
                if (containPlaceholders)
                {
                    return true;
                }

                // Attachment rule display name.
                containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(attachmentRule.parmDisplayName());
                if (containPlaceholders)
                {
                    return true;
                }
            }
        }

        // PDF encryption password.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printReportSettings.parmPdfPassword());
        if (containPlaceholders)
        {
            return true;
        }

        // Document title.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printReportSettings.parmDocumentTitle());
        if (containPlaceholders)
        {
            return true;
        }

        // Document author.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printReportSettings.parmDocumentAuthor());
        if (containPlaceholders)
        {
            return true;
        }

        // Document subject.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printReportSettings.parmDocumentSubject());
        if (containPlaceholders)
        {
            return true;
        }

        // Document keywords.
        containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_printReportSettings.parmDocumentKeywords());
        if (containPlaceholders)
        {
            return true;
        }

        // PDF siganture settings.
        DocPdfSignatureSettings signatureSettings = _printReportSettings.parmPdfSignatureSettings();
        if (signatureSettings != null)
        {
            // Signature reason.
            containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(signatureSettings.parmReason());
            if (containPlaceholders)
            {
                return true;
            }

            // Signature location.
            containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(signatureSettings.parmLocation());
            if (containPlaceholders)
            {
                return true;
            }

            // Signature contact info.
            containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(signatureSettings.parmContact());
            if (containPlaceholders)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containPlaceholders</Name>
				<Source><![CDATA[
    public static boolean containPlaceholders(str _inputString)
    {
        str containPlaceholders = DocPlaceholderManager::findAnyPlaceholderCandidate(_inputString);
        if (containPlaceholders)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePlaceholderStartEndSymbols</Name>
				<Source><![CDATA[
    public static str removePlaceholderStartEndSymbols(str _inputString)
    {
        str retStr = strRem(_inputString, DocConstantPlaceholder::PlaceholderStartSymbol);
        if (DocConstantPlaceholder::PlaceholderEndSymbol != DocConstantPlaceholder::PlaceholderStartSymbol)
        {
            retStr = strRem(retStr, DocConstantPlaceholder::PlaceholderEndSymbol);
        }

        return retStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all placeholders (including label-placeholders, e.g. @DOC_LABEL:UserDefinedLabelId@) from the input string.
    /// </summary>
    /// <param name = "_inputString">Input string to be cleaned from placeholders</param>
    /// <returns>Input string without placeholders</returns>
    public static str removeAllPlaceholders(str _inputString)
    {
        str placeholderRegex = '@[a-zA-Z0-9_:]+@';

        str outputString = System.Text.RegularExpressions.Regex::Replace(_inputString, placeholderRegex, '');

        return outputString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocPlaceholderManager class.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_parameterMap">
    /// Report parameter map: Map(parameterName, anytype parameterValue).
    /// Should be provided to enable standard placeholders @PARAMETER_{Name of the report parameter}@.
    /// </param>
    /// <returns>Created DocPlaceholderManager object</returns>
    public static DocPlaceholderManager construct(DocReportRunContext _reportRunContext, Map _parameterMap = null)
    {
        if (!_reportRunContext)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportRunContext is not provided');
        }
        
        DocPlaceholderManager docPlaceholderManager = new DocPlaceholderManager(_reportRunContext, _parameterMap);
        return docPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithSrsParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocPlaceholderManager class.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_srsReportDataContract">SrsReportDataContract object</param>
    /// <param name = "_srsParameterMap">
    /// SSRS report parameter map: Map(str parameterName, SrsReportParameter class instance).
    /// Should be provided to enable standard placeholders @PARAMETER_{Name of the report parameter}@.
    /// </param>
    /// <returns>Created DocPlaceholderManager object</returns>
    public static DocPlaceholderManager constructWithSrsParameters(DocReportRunContext _reportRunContext, SrsReportDataContract _srsReportDataContract, Map _srsParameterMap = null)
    {
        if (!_reportRunContext)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportRunContext is not provided');
        }

        Map srsReportParameterValueMap;
        if (_srsReportDataContract != null && _srsReportDataContract.parmRdpName())
        {
            srsReportParameterValueMap = DocReportingHelper::getSrsReportParameterValues(_srsReportDataContract, _srsParameterMap);
        }
        
        DocPlaceholderManager docPlaceholderManager = new DocPlaceholderManager(_reportRunContext, srsReportParameterValueMap);
        return docPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyLogoImageAsBase64Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a current company logo as Base64 encoded string.
    /// </summary>
    /// <returns>Current company logo as Base64 encoded string</returns>
    protected str getCompanyLogoImageAsBase64Str()
    {
        CompanyImage currentCompanyImage = CompanyImage::findByRecord(CompanyInfo::findDataArea(companyId));

        if (currentCompanyImage.Image)
        {
            return DocGlobalHelper::convertToBase64String(DocGlobalHelper::convertContainerToBytes(currentCompanyImage.Image));
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>