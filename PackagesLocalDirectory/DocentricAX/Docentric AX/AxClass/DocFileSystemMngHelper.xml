<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocFileSystemMngHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocFileSystemMngHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aosHaveReadPermissionForFile</Name>
				<Source><![CDATA[
    public static NoYesError aosHaveReadPermissionForFile(str _fullFilename)
    {
        if (_fullFilename == '')
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _fullFilename is not set');
        }

        System.Exception ex;
        boolean haveReadPermission = NoYesError::Yes;
        try
        {
            using (System.IO.FileStream fs = System.IO.File::OpenRead(_fullFilename))
            {
            }
        }
        catch (ex)
        {
            if (ex is System.UnauthorizedAccessException)
            {
                haveReadPermission = NoYesError::No;
            }
            else
            {
                haveReadPermission = NoYesError::Error;
            }
        }

        return haveReadPermission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExistsOnFileSystem</Name>
				<Source><![CDATA[
    public static boolean fileExistsOnFileSystem(str _fullFilename)
    {
        new FileIOPermission(_fullFilename, 'r').assert();
        
        // NOTE: This method never throws an exception.
        boolean fileExists = System.IO.File::Exists(_fullFilename);

        CodeAccessPermission::revertAssert();
       
        return fileExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>folderExistsOnFileSystem</Name>
				<Source><![CDATA[
    public static boolean folderExistsOnFileSystem(str _folderPath)
    {
        boolean filePathExists;
        new FileIOPermission(_folderPath, 'r').assert();
        try
        {
            filePathExists = System.IO.Directory::Exists(_folderPath);
            CodeAccessPermission::revertAssert();
        }
        catch (Exception::CLRError)
        {
            CodeAccessPermission::revertAssert();
            DocGlobalHelper::handleClrException(funcName(), strFmt('Checking if the folder exists (%1) failed', _folderPath));
        }
        catch (Exception::Internal)
        {
            CodeAccessPermission::revertAssert();
            DocGlobalHelper::handleClrException(funcName(), strFmt('Checking if the folder exists (%1) failed', _folderPath));
        }

        return filePathExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFileOnFileSystem</Name>
				<Source><![CDATA[
    public static boolean deleteFileOnFileSystem(Filename _fullFilename, boolean _showErrorMsg = true)
    {
        new FileIOPermission(_fullFilename, 'rw').assert();
        try
        {
            System.IO.File::Delete(_fullFilename);
            CodeAccessPermission::revertAssert();
            return true;
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError();
            }
            CodeAccessPermission::revertAssert();
            return false;
        }
        catch (Exception::Internal)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError();
            }
            CodeAccessPermission::revertAssert();
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFolderOnFileSystem</Name>
				<Source><![CDATA[
    public static boolean deleteFolderOnFileSystem(str _folderPath, boolean _recursive = true)
    {
        new FileIOPermission(_folderPath, 'rw').assert();
        try
        {
            System.IO.Directory::Delete(_folderPath, _recursive);
            CodeAccessPermission::revertAssert();
            return true;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), strFmt('Folder (%1) deletion failed', _folderPath));
            CodeAccessPermission::revertAssert();
            return false;
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrError(funcName(), strFmt('Folder (%1) deletion failed', _folderPath));
            CodeAccessPermission::revertAssert();
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFolderOnFileSystem</Name>
				<Source><![CDATA[
    public static boolean createFolderOnFileSystem(str _folderPath)
    {
        new FileIOPermission(_folderPath, 'rw').assert();
        try
        {
            System.IO.Directory::CreateDirectory(_folderPath);
            CodeAccessPermission::revertAssert();
            return true;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), strFmt('Folder (%1) creation failed', _folderPath));
            CodeAccessPermission::revertAssert();
            return false;
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrError(funcName(), strFmt('Folder (%1) creation failed', _folderPath));
            CodeAccessPermission::revertAssert();
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFileToFileSystem</Name>
				<Source><![CDATA[
    public static void saveFileToFileSystem(System.IO.MemoryStream _fileContent, str _fullFilename, boolean _overrideIfExists = true)
    {
        if (_fileContent == null || _fullFilename == '')
        {
            DocGlobalHelper::handleException(funcName(), 'Parameters _fileContent and/or _fullFileName are not set');
        }

        new FileIOPermission(_fullFilename, 'rw').assert();
        try
        {
            _fileContent.Position = 0;

            // Delete the file if it already exists with the same name.
            if (DocFileSystemMngHelper::fileExistsOnFileSystem(_fullFilename))
            {
                if (_overrideIfExists)
                {
                    if (!DocFileSystemMngHelper::deleteFileOnFileSystem(_fullFilename, true))
                    {
                        DocGlobalHelper::handleException(funcName(), strFmt('File (%1) already exists on File system and _overrideIfExists is set to true but deletion of the file failed', _fullFilename));
                    }
                }
                else
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('File (%1) already exists on File system and _overrideIfExists is set to false', _fullFilename));
                }
            }

            // Create the new file.
            using (System.IO.FileStream savingFileStream = new System.IO.FileStream(_fullFilename, System.IO.FileMode::Create, System.IO.FileAccess::Write))
            {
                _fileContent.CopyTo(savingFileStream);
            }
        }
        catch (Exception::CLRError)
        {
            CodeAccessPermission::revertAssert();
            _fileContent.Position = 0;
            DocGlobalHelper::handleClrException(funcName(), strFmt('Failed to save the file (%1) to File system', _fullFilename));
        }
        catch (Exception::Internal)
        {
            CodeAccessPermission::revertAssert();
            _fileContent.Position = 0;
            DocGlobalHelper::handleClrException(funcName(), strFmt('Failed to save the file (%1) to File system', _fullFilename));
        }
        catch
        {
            CodeAccessPermission::revertAssert();
            _fileContent.Position = 0;
            DocGlobalHelper::handleException(funcName(), strFmt('Failed to save the file (%1) to File system', _fullFilename));
        }

        CodeAccessPermission::revertAssert();
        _fileContent.Position = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFolderAndSaveToFileSystem</Name>
				<Source><![CDATA[
    public static void createFolderAndSaveToFileSystem(System.IO.MemoryStream _fileContent, str _folderPath, str _fullFilename)
    {
        if (_fileContent == null || _folderPath == '' || _fullFilename == '')
        {
            DocGlobalHelper::handleException(funcName(), 'Parameters _fileContent, _folderPath and/or _fullFilename are not set');
        }

        // Check if directory exists and create it, if doesn't.
        if (!DocFileSystemMngHelper::folderExistsOnFileSystem(_folderPath))
        {
            if (!DocFileSystemMngHelper::createFolderOnFileSystem(_folderPath))
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Failed to save the file (%1) to File system', _fullFilename));
            }
        }

        // Save the given file content to the target file system location.
        DocFileSystemMngHelper::saveFileToFileSystem(_fileContent, _fullFilename, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileContentAsMemoryStream</Name>
				<Source><![CDATA[
    public static System.IO.MemoryStream getFileContentAsMemoryStream(str _fullFilename, boolean _showError = true)
    {
        System.IO.MemoryStream  templateMemoryStream;
        System.IO.FileStream    templateFileStream;

        void cleanUp()
        {
            if (templateMemoryStream != null)
            {
                templateMemoryStream.Close();
                templateMemoryStream.Dispose();
            }
            if (templateFileStream != null)
            {
                templateFileStream.Close();
                templateFileStream.Dispose();
            }
        }


        if (_fullFilename == '')
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _fullFilename is not set');
        }
        
        try
        {
            templateMemoryStream = new System.IO.MemoryStream();
            templateFileStream = new System.IO.FileStream(_fullFilename, System.IO.FileMode::Open,
                                                          System.IO.FileAccess::Read, System.IO.FileShare::ReadWrite);
            templateFileStream.CopyTo(templateMemoryStream);
            templateMemoryStream.Position = 0;

            templateFileStream.Close();
            templateFileStream.Dispose();
        }
        catch(Exception::CLRError)
        {
            if (_showError)
            {
                DocGlobalHelper::handleClrError(funcName(), strFmt("@DocentricAX:FailedToReadFileContent", _fullFilename));
            }
            cleanUp();
            templateMemoryStream = null;
        }
        catch(Exception::Internal)
        {
            if (_showError)
            {
                DocGlobalHelper::handleClrError(funcName(), strFmt("@DocentricAX:FailedToReadFileContent", _fullFilename));
            }
            cleanUp();
            templateMemoryStream = null;
        }

        return templateMemoryStream;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>