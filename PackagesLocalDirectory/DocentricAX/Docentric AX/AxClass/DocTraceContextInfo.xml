<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTraceContextInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class DocTraceContextInfo is used for storing trace context information.
/// </summary>
public class DocTraceContextInfo
{
    public List contextInfoList;
    ListEnumerator contextInfoListEnum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the DocTraceContextInfo class.
    /// </summary>
    public void new()
    {
        contextInfoList = new List(Types::Container); // List([Name,Value])
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the new context info field as container [Name, Value] to the end of the context info list.
    /// </summary>
    /// <param name = "_contextInfoPairNameValue">Contect info field as container [Name, Value]</param>
    public void addEnd(container _contextInfoPairNameValue)
    {
        if (!DocTraceContextInfo::validateContextInfoPairNameValue(_contextInfoPairNameValue))
        {
            throw error(strFmt('Invalid container [Name, Value]: %1', con2Str(_contextInfoPairNameValue, ',')));
        }

        contextInfoList.addEnd(_contextInfoPairNameValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentContextInfoFieldStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the context info field that is pointed to by the context info list enumerator.
    /// </summary>
    /// <returns>Context info field as string 'Name=Value'</returns>
    public str getCurrentContextInfoFieldStr()
    {
        if (!contextInfoListEnum)
        {
            contextInfoListEnum = contextInfoList.getEnumerator();
        }
        
        container contextInfoPairNameValue = contextInfoListEnum.current();
        if (contextInfoPairNameValue)
        {
            return DocTraceContextInfo::toStringContextInfoPairNameValue(contextInfoPairNameValue);
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentContextInfoField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the context info field that is pointed to by the context info list enumerator.
    /// </summary>
    /// <returns>Context info field as container [Name, Value]</returns>
    public container getCurrentContextInfoField()
    {
        if (!contextInfoListEnum)
        {
            contextInfoListEnum = contextInfoList.getEnumerator();
        }
        
        return contextInfoListEnum.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the context info list enumerator denotes a valid list element.
    /// </summary>
    /// <returns>True if the current position in the list holds a valid element; otherwise false</returns>
    public boolean moveNext()
    {
        if (!contextInfoListEnum)
        {
            contextInfoListEnum = contextInfoList.getEnumerator();
        }
        
        return contextInfoListEnum.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the context info list enumerator to the start of the list.
    /// </summary>
    public void reset()
    {
        if (!contextInfoListEnum)
        {
            contextInfoListEnum.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContextInfoField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the context info field for the specified parameter name.
    /// </summary>
    /// <param name = "_parName">Parameter name</param>
    /// <returns>Context info field as container [Name, Value] if found; otherwise conNull()</returns>
    public container findContextInfoField(str _parName)
    {
        this.reset();

        while (this.moveNext())
        {
            container contextInfoPairNameValue = this.getCurrentContextInfoField();
            if (contextInfoPairNameValue != conNull() && conPeek(contextInfoPairNameValue, 1) == _parName)
            {
                return contextInfoPairNameValue;
            }
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toStringContextInfoPairNameValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns context info field container as string: [Name, Value] -> 'Name=Value'.
    /// </summary>
    /// <param name = "_contextInfoPairNameValue">Context info field as container [Name, Value]</param>
    /// <returns>String: 'Name=Value'</returns>
    public static str toStringContextInfoPairNameValue(container _contextInfoPairNameValue)
    {
        str parName = conPeek(_contextInfoPairNameValue, 1);
        str parValue = conPeek(_contextInfoPairNameValue, 2);
        return strFmt('%1=%2', parName, parValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContextInfoPairNameValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the context info field.
    /// </summary>
    /// <param name = "_contextInfoPairNameValue">Context info field as container [Name, Value]</param>
    /// <returns>True if the container is valid; otherwise false</returns>
    public static boolean validateContextInfoPairNameValue(container _contextInfoPairNameValue)
    {
        if (conLen(_contextInfoPairNameValue) != 2)
        {
            return false;
        }

        try
        {
            str parName = conPeek(_contextInfoPairNameValue, 1);
            str parValue = conPeek(_contextInfoPairNameValue, 2);
        }
        catch
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>