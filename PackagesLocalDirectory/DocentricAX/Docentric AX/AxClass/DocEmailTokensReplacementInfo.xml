<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTokensReplacementInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocEmailTokensReplacementInfo
{
    DocEmailAddressField                addressField;           // From, To, Cc, Bcc
    Map                                 printMgmtTokensMap;     // Map[PrintMgmtToken (str), token resolved/unresolved value (str)]
    boolean                             isAnyResolved;          // true if at least one token is resolved
    boolean                             isAnyUnresolved;        // true if at least one token is unresolved
    boolean                             isAddressFieldEmpty;
    boolean                             isAnyPurposeResolved;
    boolean                             isAnyPurposeFound;
    boolean                             isPrimaryContactResolved;
    boolean                             isPrimaryContactFound;
    str                                 expandedTokens;         // stores the final result of expanding the address field
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(DocEmailAddressField _addressField)
    {
        printMgmtTokensMap = new Map(Types::String, Types::String);
        addressField = _addressField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressField</Name>
				<Source><![CDATA[
    public DocEmailAddressField parmAddressField(DocEmailAddressField _addressField = addressField)
    {
        addressField = _addressField;
        return addressField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMgmtTokensMap</Name>
				<Source><![CDATA[
    public Map parmPrintMgmtTokensMap(Map _printMgmtTokensMap = printMgmtTokensMap)
    {
        printMgmtTokensMap = _printMgmtTokensMap;
        return printMgmtTokensMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAnyResolved</Name>
				<Source><![CDATA[
    public boolean parmIsAnyResolved(boolean _isAnyResolved = isAnyResolved)
    {
        isAnyResolved = _isAnyResolved;
        return isAnyResolved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAnyUnresolved</Name>
				<Source><![CDATA[
    public boolean parmIsAnyUnresolved(boolean _isAnyUnresolved = isAnyUnresolved)
    {
        isAnyUnresolved = _isAnyUnresolved;
        return isAnyUnresolved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAddressFieldEmpty</Name>
				<Source><![CDATA[
    public boolean parmIsAddressFieldEmpty(boolean _isAddressFieldEmpty = isAddressFieldEmpty)
    {
        isAddressFieldEmpty = _isAddressFieldEmpty;
        return isAddressFieldEmpty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAnyPurposeResolved</Name>
				<Source><![CDATA[
    public boolean parmIsAnyPurposeResolved(boolean _isAnyPurposeResolved = isAnyPurposeResolved)
    {
        isAnyPurposeResolved = _isAnyPurposeResolved;
        return isAnyPurposeResolved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAnyPurposeFound</Name>
				<Source><![CDATA[
    public boolean parmIsAnyPurposeFound(boolean _isAnyPurposeFound = isAnyPurposeFound)
    {
        isAnyPurposeFound = _isAnyPurposeFound;
        return isAnyPurposeFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrimaryContactResolved</Name>
				<Source><![CDATA[
    public boolean parmIsPrimaryContactResolved(boolean _isPrimaryContactResolved = isPrimaryContactResolved)
    {
        isPrimaryContactResolved = _isPrimaryContactResolved;
        return isPrimaryContactResolved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrimaryContactFound</Name>
				<Source><![CDATA[
    public boolean parmIsPrimaryContactFound(boolean _isPrimaryContactFound = isPrimaryContactFound)
    {
        isPrimaryContactFound = _isPrimaryContactFound;
        return isPrimaryContactFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpandedTokens</Name>
				<Source><![CDATA[
    public str parmExpandedTokens(str _expandedTokens = expandedTokens)
    {
        expandedTokens = _expandedTokens;
        return expandedTokens;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>