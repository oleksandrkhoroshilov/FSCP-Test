<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTemplateFontsUIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Storage.Azure.BlobStorage;

/// <summary>
/// Implementation of font managment.
/// </summary>
class DocTemplateFontsUIHelper
{
    Args            args;
    FormRun         callerFormRun;
    TableId         callerRecordTableId;
    FormDataSource  callerFds;
    str             callerMenuItemName;
    Set             allowedMenuItemNames, allowedTableIds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor of <c>DocTemplateFontsUIHelper</c>.
    /// </summary>
    /// <param name = "_args">Arguments passed from caller.</param>
    protected void new(Args _args)
    {
        if (!_args)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        args = _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCallerFds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the caller form data source.
    /// </summary>
    private void resolveCallerFds()
    {
        callerFds = null;
        
        // Iterate through all datasources of the caller form.
        // If we encounter the datasource that matches the caller dataset,
        // then it is the correct datasource.
        for (int i = 1; i <= callerFormRun.dataSourceCount(); i++)
        {
            Common callerRecord = callerFormRun.dataSource(i).cursor();
            if (callerRecord.TableId == callerRecordTableId)
            {
                callerFds = callerFormRun.dataSource(i);
            }
        }

        if (callerFds == null)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidFormDatasource");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get records to be processed.
    /// </summary>
    /// <returns>Returns list of </returns>
    private List getRecordsToProcess()
    {
        // Figure out the correct form datasource
        this.resolveCallerFds();

        // Collect the RecIds of the marked datasource records
        Common settings;
        List recIds = new List(Types::Int64);
        for (settings = callerFds.getFirst(true) ? callerFds.getFirst(true) : callerFds.cursor();
        settings;
        settings = callerFds.getNext())
        {
            recIds.addEnd(settings.RecId);
        }

        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCheckArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization and argument check
    /// </summary>
    private void initAndCheckArgs()
    {
        if (!(args && args.caller() && args.menuItemName()))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        callerMenuItemName = args.menuItemName();
        
        // Actions from this class can be called from the menu items listed here.
        // New implementations should add the supported menu items below.
        allowedMenuItemNames = new Set(Types::String);
        allowedMenuItemNames.add(menuItemActionStr(DocReloadFonts));
        allowedMenuItemNames.add(menuItemActionStr(DocCustomBlobStorageDownloadFonts));

        if (!allowedMenuItemNames.in(callerMenuItemName))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCallerMenuItem");
        }
       
        if (!(args.caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        callerFormRun = args.caller() as FormRun;
        
        // We can deal with the record types listed here.
        // New implementations should add the supported record types below.
        allowedTableIds = new Set(Types::Int64);
        allowedTableIds.add(tableNum(DocParameters));
        allowedTableIds.add(tableNum(DocFontManager));
        if (!args.dataset() || !allowedTableIds.in(args.dataset()))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCallerDatasource");
        }
        callerRecordTableId = args.dataset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArgsCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if we have a valid combination of caller menu item, form and record.
    /// New implementations should add their combination below.
    /// </summary>
    private void checkArgsCombination()
    {
        boolean isValidCombination = false;

        // Form 'DocParameters', menu item 'DocReloadFonts', table 'DocParameters'
        if (callerMenuItemName == menuItemActionStr(DocReloadFonts)
            && callerFormRun.name() == formStr(DocParameters)
            && callerRecordTableId == tableNum(DocParameters))
        {
            isValidCombination = true;
        }

        // Form 'DocParameters', menu item 'DocCustomBlobStorageDownloadFonts', table 'DocFontManager'
        if (callerMenuItemName == menuItemActionStr(DocCustomBlobStorageDownloadFonts)
            && callerFormRun.name() == formStr(DocParameters)
            && callerRecordTableId == tableNum(DocParameters))
        {
            isValidCombination = true;
        }

        if (!isValidCombination)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle actions based on menu item.
    /// </summary>
    public void handleActions()
    {
        List recIds;

        // Init and make sure that class is invoked from the correct menu item and with
        // the correct dataset
        this.initAndCheckArgs();

        // Make sure that the class is invoked with the valid combination of menu item,
        // caller form and caller record
        this.checkArgsCombination();

        // Retrieve the caller form records which were marked for processing
        recIds = this.getRecordsToProcess();
        if (recIds.elements() == 0)
        {
            DocGlobalHelper::handleWarning("@DocentricAX2:NoRecordSelected");
            return;
        }
        
        // Execute the action depending on the menu item which invoked this class
        try
        {
            switch (callerMenuItemName)
            {
                /* Reload fonts in the system */
                case menuItemActionStr(DocReloadFonts):
                    this.refreshFonts();
                    break;

                /* Download custom blob storage fonts */
                case menuItemActionStr(DocCustomBlobStorageDownloadFonts):
                    this.downloadCustomBlobStorageFonts();
                    break;

                default:
                    return;
            }
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX3:FailedToExecuteReportTemplateFontsAction");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFonts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh fonts accross all AOS instances.
    /// </summary>
    private void refreshFonts()
    {
        // Read current sent record from arguments
        DocParameters docParameters = this.args.record();

        // Validate Azure storage template fonts container name if set.
        if (docParameters.CustomFontsBlobStorageContainer != '' &&
                    !DocAzureBlobHelper::isContainerNameValid(docParameters.CustomFontsBlobStorageContainer))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX:InvalidContainerName", docParameters.CustomFontsBlobStorageContainer));
            return;
        }
        
        // Ask user to confirm reload fonts request
        DialogButton dlgResult = Box::okCancel("@DocentricAX3:ReloadTemplateFontsConfirmDialogText",
                DialogButton::Cancel,
                "@DocentricAX3:ReloadTemplateFontsConfirmDialogTitle");

        if (dlgResult == DialogButton::Ok)
        {
            // Save new state of FontManager
            DocFontManager::updateVersionId(System.Guid::NewGuid());

            try
            {
                // Request reload of fonts
                Docentric.AX.Fonts.DocFontManager::ReLoadFonts();

                // Notify the user of success font refresh
                DocGlobalHelper::handleInfo("@DocentricAX3:ReloadTemplateFontsSuccessfullySent");
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrError();
                DocGlobalHelper::handleError("@DocentricAX3:ReloadTemplateFontsFailed");
            }
            catch
            {
                DocGlobalHelper::handleError("@DocentricAX3:ReloadTemplateFontsFailed");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadCustomBlobStorageFonts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Download custom blob storage fonts as ZIP package.
    /// </summary>
    private void downloadCustomBlobStorageFonts()
    {
        // Read current sent record from arguments
        DocParameters docParameters = this.args.record();

        // Validate Azure storage template fonts container name if set.
        if (docParameters.CustomFontsBlobStorageContainer != '' &&
                    !DocAzureBlobHelper::isContainerNameValid(docParameters.CustomFontsBlobStorageContainer))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX:InvalidContainerName", docParameters.CustomFontsBlobStorageContainer));
            return;
        }

        try
        {
            // If blob exists
            if (BlobStorageHelper::BlobExists(docParameters.CustomFontsBlobStorageContainer, DocConstant::CustomBlobStorageFontsZipFilename))
            {
                // Download custom font ZIP package to AOS memory
                using(System.IO.Stream customFontContent = BlobStorageHelper::DownloadBlobContent(docParameters.CustomFontsBlobStorageContainer,
                    DocConstant::CustomBlobStorageFontsZipFilename))
                {
                    // Download custom font ZIP package to client
                    DocFileMngHelper::sendFileToUser(customFontContent, DocConstant::CustomBlobStorageFontsZipFilename);
                }
            }
            else
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:MissingTemplateFontZipPackage", docParameters.CustomFontsBlobStorageContainer));
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError();
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:DownloadTemplateFontZipPackageFailed",
                    DocConstant::CustomBlobStorageFontsZipFilename,
                    docParameters.CustomFontsBlobStorageContainer));
        }
        catch
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:DownloadTemplateFontZipPackageFailed",
                    DocConstant::CustomBlobStorageFontsZipFilename,
                    docParameters.CustomFontsBlobStorageContainer));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute <c>DocTemplateFontsUIHelper</c>.
    /// </summary>
    /// <param name = "_args">Arguments passed from caller.</param>
    public static void main(Args _args)
    {
        DocTemplateFontsUIHelper helper = new DocTemplateFontsUIHelper(_args);
        helper.handleActions();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>