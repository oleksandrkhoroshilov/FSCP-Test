<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportSharePointMetadataProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Storage.SharePoint.Common;
using Docentric.AX.Storage.SharePoint.Model;

/// <summary>
/// Used to load and process SharePoint metadata.
/// </summary>
public class DocReportSharePointMetadataProcessor
{
    private DocReportRunContext reportRunContext;
    private DocPlaceholderProcessor docPlaceholderProcessor;
    private str saveToDestinationMsg;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setReportRunContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report run context.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    private void setReportRunContext(DocReportRunContext _reportRunContext)
    {
        reportRunContext = _reportRunContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocPlaceholderProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the placeholder processor.
    /// </summary>
    /// <param name = "_docPlaceholderProcessor">DocPlaceholderProcessor object</param>
    private void setDocPlaceholderProcessor(DocPlaceholderProcessor _docPlaceholderProcessor)
    {
        docPlaceholderProcessor = _docPlaceholderProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creatse an instance of DocReportSharePointMetadataProcessor class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocReportSharePointMetadataProcessor class.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_docUserDefinedPlaceholderManager">DocUserDefinedPlaceholderManager object</param>
    /// <param name = "_docPlaceholderManager">DocPlaceholderManager object</param>
    /// <returns>An instance of DocReportSharePointMetadataProcessor class</returns>
    public static DocReportSharePointMetadataProcessor construct(DocReportRunContext _reportRunContext,
                                                                 DocUserDefinedPlaceholderManager _docUserDefinedPlaceholderManager,
                                                                 DocPlaceholderManager _docPlaceholderManager)
    {
        DocReportSharePointMetadataProcessor spMetadataProcessor = new DocReportSharePointMetadataProcessor();
        spMetadataProcessor.setReportRunContext(_reportRunContext);

        DocPlaceholderProcessor docPlaceholderProcessor = DocPlaceholderProcessor::construct(_reportRunContext, _docUserDefinedPlaceholderManager, _docPlaceholderManager);
        spMetadataProcessor.setDocPlaceholderProcessor(docPlaceholderProcessor);
        
        return spMetadataProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSharePointMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SharePoint metada.
    /// </summary>
    public void processSharePointMetadata()
    {
        DocReportSharePointSettings spSettings;

        // Save to Archive
        if (reportRunContext.parmSaveToArchive() || reportRunContext.parmPrintDestination() == DocPrintDestination::Archive)
        {
            DocuTypeId saveToArchiveDocuTypeId = reportRunContext.parmSaveToArchiveDocuTypeId();
            if (!saveToArchiveDocuTypeId)
            {
                saveToArchiveDocuTypeId = DocReportingHelper::getDefaultPrintArchiveDocuTypeId();
            }
            spSettings = this.getSharePointSettingsByDocuTypeId(saveToArchiveDocuTypeId);
            if (spSettings && spSettings.SaveToPrintArchiveIsEnabled)
            {
                saveToDestinationMsg = "@DocentricAX:SaveToArchive";
                // Check if SharePoint metadata object exists
                if (reportRunContext.parmSaveToArchiveSharePointMetadata() == null)
                {
                    // If not, create it by loading the SharePoint metadata settings.
                    reportRunContext.parmSaveToArchiveSharePointMetadata(this.loadSharePointMetadataSettings(spSettings, DocSharePointReportSavingType::Archive));
                }
              
                // Resolve the placeholders in SharePoint metadata settings.
                this.resolvePlaceholders(reportRunContext.parmSaveToArchiveSharePointMetadata());
            }
        }

        if (reportRunContext.parmPrintDestination() == DocPrintDestination::File)
        {
            // Save to SharePoint
            if (reportRunContext.filePrintDestSettings().parmSaveToSharePoint())
            {
                spSettings = this.getSharePointSettingsByFilePrintDestSettings();
                if (spSettings && spSettings.SaveToSharePointIsEnabled)
                {
                    saveToDestinationMsg = "@DocentricAX:SaveToSharePoint";
                    // Check if SharePoint metadata object exists
                    if (reportRunContext.filePrintDestSettings().parmSharePointMetadata() == null)
                    {
                        // If not, create it by loading the SharePoint metadata settings.
                        reportRunContext.filePrintDestSettings().parmSharePointMetadata(this.loadSharePointMetadataSettings(spSettings, DocSharePointReportSavingType::Direct));
                    }

                    // Resolve the placeholders in SharePoint metadata settings.
                    this.resolvePlaceholders(reportRunContext.filePrintDestSettings().parmSharePointMetadata());
                }
            }

            // Save to Attachments
            if (reportRunContext.filePrintDestSettings().parmSaveToAttachments())
            {
                spSettings = this.getSharePointSettingsByDocuTypeId(reportRunContext.filePrintDestSettings().parmSaveToAttachmentsDocuTypeId());
                if (spSettings && spSettings.SaveToAttachmentsIsEnabled)
                {
                    saveToDestinationMsg = "@DocentricAX:SaveToAttachments";
                    // Check if SharePoint metadata object exists
                    if (reportRunContext.filePrintDestSettings().parmSaveToAttachmentsSharePointMetadata() == null)
                    {
                        // If not, create it by loading the SharePoint metadata settings.
                        reportRunContext.filePrintDestSettings().parmSaveToAttachmentsSharePointMetadata(this.loadSharePointMetadataSettings(spSettings, DocSharePointReportSavingType::Attachments));
                    }
                 
                    // Resolve the placeholders in SharePoint metadata settings.
                    this.resolvePlaceholders(reportRunContext.filePrintDestSettings().parmSaveToAttachmentsSharePointMetadata());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointSettingsByDocuTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint settings for provided document type Id.
    /// </summary>
    /// <param name = "_docuTypeId">Document type Id</param>
    /// <returns>A DocReportSharePointSettings table buffer</returns>
    private DocReportSharePointSettings getSharePointSettingsByDocuTypeId(DocuTypeId _docuTypeId)
    {
        DocReportSharePointSettings spSettings;

        if (!_docuTypeId)
        {
            return spSettings;
        }

        DocuType docuType = DocuType::find(_docuTypeId);
        if (!docuType || docuType.FilePlace != DocuFilePlace::SharePoint)
        {
            return spSettings;
        }

        System.String[] docuTypeUrlPaths = new System.String[2]();
        docuTypeUrlPaths.Set(0, docuType.Site);
        docuTypeUrlPaths.Set(1, docuType.FolderPath);

        str spFolderRelativeUrl = DocSPUrlHelper::CombineUrlPath(docuTypeUrlPaths);
        str spSiteUrl = DocSPUrlHelper::GetSiteUrl(docuType.Host, docuType.Site);

        return this.getSharePointSettings(spFolderRelativeUrl, spSiteUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointSettingsByFilePrintDestSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint settings from file print destination settings.
    /// </summary>
    /// <returns>A DocReportSharePointSettings table buffer</returns>
    private DocReportSharePointSettings getSharePointSettingsByFilePrintDestSettings()
    {
        str spFolderRelativeUrl = DocSPUrlHelper::GetServerRelativePath(reportRunContext.filePrintDestSettings().parmSharePointSiteUrl(), reportRunContext.filePrintDestSettings().parmSharePointFolderPath());
        str spSiteUrl = reportRunContext.filePrintDestSettings().parmSharePointSiteUrl();

        return this.getSharePointSettings(spFolderRelativeUrl, spSiteUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint settings by provided relative SharePoint folder url and SharePoint site url.
    /// </summary>
    /// <param name = "_spFolderRelativeUrl">A relative SharePoint folder url</param>
    /// <param name = "_spSiteUrl">A SharePoint site url</param>
    /// <returns>A DocReportSharePointSettings table buffer</returns>
    private DocReportSharePointSettings getSharePointSettings(str _spFolderRelativeUrl, str _spSiteUrl)
    {
        str spDocumentLibraryUrl = DocSharePointHelperV3::getDocumentLibraryUrl(_spFolderRelativeUrl, _spSiteUrl);

        DocReportTableRecId docReportTableRecId = DocReportTable::findReportId(reportRunContext.reportId()).RecId;

        // Get SharePoint settings
        return DocReportSharePointSettings::findByReportSiteUrlAndLibraryUrl(docReportTableRecId, _spSiteUrl, spDocumentLibraryUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSharePointMetadataSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the SharePoint metadata settings.
    /// </summary>
    /// <param name = "_spSettings">A DocReportSharePointSettings table buffer</param>
    /// <param name = "_sharePointSavingType">SharePoint report saving type</param>
    /// <returns>An instance of DocReportSharePointMetadataSettings class</returns>
    private DocReportSharePointMetadataSettings loadSharePointMetadataSettings(DocReportSharePointSettings _spSettings, DocSharePointReportSavingType _sharePointSavingType)
    {
        DocReportSharePointMetadataSettings spMetadataSettings = DocReportSharePointMetadataSettings::construct(_spSettings, _sharePointSavingType);
        return spMetadataSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the placeholders in the provided SharePoint metadata field map.
    /// </summary>
    /// <param name = "_spMetadataSettings">SharePoint metadata settings</param>
    private void resolvePlaceholders(DocReportSharePointMetadataSettings _spMetadataSettings)
    {
        if (!_spMetadataSettings || !_spMetadataSettings.parmSharePointMetadataFieldMap())
        {
            return;
        }

        str warningMsg = '';

        MapEnumerator spMetadataFieldMapEnum = new MapEnumerator(_spMetadataSettings.parmSharePointMetadataFieldMap());
        while (spMetadataFieldMapEnum.moveNext())
        {
            DocReportSharePointMetadataField spMetadataField = spMetadataFieldMapEnum.currentValue();
            
            // Resolve the placeholder
            DocPlaceholder docPlaceholder = docPlaceholderProcessor.resolvePlaceholder(spMetadataField.parmPlaceholderName());
            // Check if the placholder is resolved
            if (docPlaceholder != null)
            {
                spMetadataField.parmFieldValue(docPlaceholder.parmValueStr());
                if (docPlaceholder.parmFormatLanguage())
                {
                    spMetadataField.parmCultureInfo(DocGlobalHelper::getCultureInfo(docPlaceholder.parmFormatLanguage()));
                }
                continue;
            }

            if (docPlaceholderProcessor.getErrorMsg())
            {
                warningMsg += (warningMsg ? '\r\n' : '') + docPlaceholderProcessor.getErrorMsg();
            }
        }

        if (warningMsg)
        {
            warningMsg = strFmt("@DocentricAX4:SharePointProcessingMetadataFieldValuesWarning", saveToDestinationMsg, warningMsg);
            DocGlobalHelper::handleWarning(warningMsg, false, funcName(), false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>