<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLicenseNotificationSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocLicenseNotificationSettings class contains information about the license notification settings.
/// </summary>
public class DocLicenseNotificationSettings implements SysPackable
{
    private DocLicenseNotificationRole notificationRole;
    private DocEmailFrom notificationEmailFrom;
    private DocEmailTo notificationEmailTo;
    private boolean notificationSendEmail;

    #define.currentPackVersion(1)
    #localmacro.currentList
        version,
        notificationRole,
        notificationEmailFrom,
        notificationEmailTo,
        notificationSendEmail
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container pack()
    {
        int version = #currentPackVersion;
    
        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean ret = false;
        
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            int version = conPeek(_pack, 1);
    
            if (version == #currentPackVersion)
            {
                [#currentList] = _pack;
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotificationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license notification security role.
    /// </summary>
    /// <param name = "_notificationRole">The license notification security role</param>
    /// <returns>The license notification security role</returns>
    public DocLicenseNotificationRole parmNotificationRole(DocLicenseNotificationRole _notificationRole = notificationRole)
    {
        notificationRole = _notificationRole;
        return notificationRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotificationEmailFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license notification From email address.
    /// </summary>
    /// <param name = "_notificationEmailFrom">The license notification From email address</param>
    /// <returns>The license notification From email address</returns>
    public DocEmailFrom parmNotificationEmailFrom(DocEmailFrom _notificationEmailFrom = notificationEmailFrom)
    {
        notificationEmailFrom = _notificationEmailFrom;
        return notificationEmailFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotificationEmailTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license notification To email addresses.
    /// </summary>
    /// <param name = "_notificationEmailTo">The license notification To email addresses</param>
    /// <returns>The license notification To email addresses</returns>
    public DocEmailTo parmNotificationEmailTo(DocEmailTo _notificationEmailTo = notificationEmailTo)
    {
        notificationEmailTo = _notificationEmailTo;
        return notificationEmailTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotificationSendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the license notification email should be sent.
    /// </summary>
    /// <param name = "_notificationSendEmail">The flag indicating whether the license notification email should be sent</param>
    /// <returns>True if the license notification email should be sent; otherwise false</returns>
    public boolean parmNotificationSendEmail(boolean _notificationSendEmail = notificationSendEmail)
    {
        notificationSendEmail = _notificationSendEmail;
        return notificationSendEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocLicenseNotificationSettings class from specified 
    /// DocLicenseNotificationSettingsTmp table buffer.
    /// </summary>
    /// <param name = "_notificationSettingsTmp">The DocLicenseNotificationSettingsTmp table buffer</param>
    /// <returns>An instance of the DocLicenseNotificationSettings class</returns>
    public static DocLicenseNotificationSettings construct(DocLicenseNotificationSettingsTmp _notificationSettingsTmp)
    {
        DocLicenseNotificationSettings notificationSettings = new DocLicenseNotificationSettings();
        notificationSettings.parmNotificationRole(_notificationSettingsTmp.NotificationRole);
        notificationSettings.parmNotificationEmailFrom(_notificationSettingsTmp.NotificationEmailFrom);
        notificationSettings.parmNotificationEmailTo(_notificationSettingsTmp.NotificationEmailTo);
        notificationSettings.parmNotificationSendEmail(_notificationSettingsTmp.NotificationSendEmail);

        return notificationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocLicenseNotificationSettings class from specified packed container.
    /// </summary>
    /// <param name = "_notificationSettings">Packed container of an instance of the DocLicenseNotificationSettings class</param>
    /// <returns>An instance of the DocLicenseNotificationSettings class</returns>
    public static DocLicenseNotificationSettings create(container _notificationSettings)
    {
        DocLicenseNotificationSettings notificationSettings = new DocLicenseNotificationSettings();
        notificationSettings.unpack(_notificationSettings);
        return notificationSettings;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>