<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportPdfSecurityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;

public class DocReportPdfSecurityManager extends DocPdfSecurityManager
{
    private DocPrintReportSettings printReportSettings;
    private DocPdfEncryptionConditionEnum pdfEncryptionCondition = -1;  // Set enum variable to -1 to represent an undefined value
    protected DocPrintJobHeader docPrintJobHeader;
    private boolean signReportContent;
    private container sourceDocumentContainer = conNull();  // Used to store the original report content for caching

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isReportArchived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the encrypting/signing report is archived, i.e. stored in Print archive.
    /// </summary>
    /// <returns>True, if the report is archived</returns>
    private boolean isReportArchived()
    {
        return docPrintJobHeader != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintReportSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the DocPrintReportSettings object.
    /// </summary>
    /// <param name = "_printReportSettings">A DocPrintReportSettings object</param>
    private void setPrintReportSettings(DocPrintReportSettings _printReportSettings)
    {
        printReportSettings = _printReportSettings;

        // Set the signature appearance settings if needed
        if (printReportSettings && printReportSettings.applyPdfSignature() && !printReportSettings.parmPdfSignatureSettings().parmSignatureAppearanceSettings())
        {
            printReportSettings.parmPdfSignatureSettings().loadSignatureAppearanceSettings(
                                                                printReportSettings.parmTemplateId(),
                                                                printReportSettings.parmCompanyId(),
                                                                printReportSettings.parmLanguageId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the DocPrintJobHeader record.
    /// The record is set when the class is called from print archive.
    /// </summary>
    /// <param name = "_docPrintJobHeader">A DocPrintJobHeader record</param>
    private void setDocPrintJobHeader(DocPrintJobHeader _docPrintJobHeader)
    {
        docPrintJobHeader = _docPrintJobHeader;

        if (docPrintJobHeader)
        {
            // Gets the packed DocPrintReportSettings object from the DocPrintJobHeader record.
            container printArchivePacked = docPrintJobHeader.PrintArchiveInfoPacked;
            DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
            printArchiveInfo.unpackFromDb(printArchivePacked);

            printReportSettings = printArchiveInfo.parmPrintReportSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdfEncryptionCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the encryption codition.
    /// </summary>
    /// <param name = "_pdfEncryptionCondition">Encryption condition</param>
    private void setPdfEncryptionCondition(DocPdfEncryptionConditionEnum _pdfEncryptionCondition)
    {
        pdfEncryptionCondition = _pdfEncryptionCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSignReportContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flag indicating that the report content needs to be signed.
    /// </summary>
    /// <param name = "_signReportContent">Sign the report content</param>
    private void setSignReportContent(boolean _signReportContent)
    {
        signReportContent = _signReportContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document content as container.
    /// </summary>
    /// <returns>Source document content as container</returns>
    private container getSourceDocumentContainer()
    {
        // Check if the original report content is already cached.
        if (sourceDocumentContainer == conNull())
        {
            // Check if the class is called from Print archive.
            if (this.isReportArchived())
            {
                sourceDocumentContainer = docPrintJobHeader.getReportPrintedWithDocentricInOriginalFormat().parmContent();
            }
            else
            {
                sourceDocumentContainer = printReportSettings.parmPrintedReport().getReportContentContainer();
            }
        }
        return sourceDocumentContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document content as memory stream.
    /// </summary>
    /// <returns>Source document content as memory stream</returns>
    private System.IO.MemoryStream getSourceDocumentMemoryStream()
    {
        return DocGlobalHelper::convertContainerToMemoryStream(this.getSourceDocumentContainer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocReportPdfSecurityManager class.
    /// The report content is signed if the flag signReportContent is true and is not encrypted.
    /// </summary>
    /// <param name = "_printReportSettings">A DocPrintReportSettings object</param>
    /// <param name = "_signReportContent">Sign the report content</param>
    /// <returns>An instance of DocReportPdfSecurityManager class</returns>
    public static DocReportPdfSecurityManager construct(DocPrintReportSettings _printReportSettings, boolean _signReportContent = false)
    {
        DocReportPdfSecurityManager docReportPdfSecurityManager = new DocReportPdfSecurityManager();

        docReportPdfSecurityManager.setPrintReportSettings(_printReportSettings);
        docReportPdfSecurityManager.setSignReportContent(_signReportContent);

        return docReportPdfSecurityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithEncryptionCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocReportPdfSecurityManager class.
    /// The report content is encrypted and signed if the flag signReportContent is true.
    /// </summary>
    /// <param name = "_printReportSettings">A DocPrintReportSettings object</param>
    /// <param name = "_pdfEncryptionCondition">Encryption condition</param>
    /// <param name = "_signReportContent">Sign the report content</param>
    /// <returns>An instance of DocReportPdfSecurityManager class</returns>
    public static DocReportPdfSecurityManager constructWithEncryptionCondition(DocPrintReportSettings _printReportSettings, DocPdfEncryptionConditionEnum _pdfEncryptionCondition, boolean _signReportContent = false)
    {
        DocReportPdfSecurityManager docReportPdfSecurityManager = new DocReportPdfSecurityManager();

        docReportPdfSecurityManager.setPrintReportSettings(_printReportSettings);
        docReportPdfSecurityManager.setPdfEncryptionCondition(_pdfEncryptionCondition);
        docReportPdfSecurityManager.setSignReportContent(_signReportContent);

        return docReportPdfSecurityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithPrintJobHeaderAndEncryptionCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocReportPdfSecurityManager class.
    /// The report content is encrypted and signed if the flag signReportContent is true.
    /// This contructor needs to be called from print archive becasue the information about
    /// the printed reports is saved in the DocPrintJobHeader table.
    /// </summary>
    /// <param name = "_docPrintJobHeader">A DocPrintJobHeader record</param>
    /// <param name = "_pdfEncryptionCondition">Encryption condition</param>
    /// <param name = "_signReportContent">Sign the report content</param>
    /// <returns>An instance of DocReportPdfSecurityManager class</returns>
    public static DocReportPdfSecurityManager constructWithPrintJobHeaderAndEncryptionCondition(DocPrintJobHeader _docPrintJobHeader, DocPdfEncryptionConditionEnum _pdfEncryptionCondition, boolean _signReportContent = false)
    {
        DocReportPdfSecurityManager docReportPdfSecurityManager = new DocReportPdfSecurityManager();

        docReportPdfSecurityManager.setDocPrintJobHeader(_docPrintJobHeader);
        docReportPdfSecurityManager.setPdfEncryptionCondition(_pdfEncryptionCondition);
        docReportPdfSecurityManager.setSignReportContent(_signReportContent);

        return docReportPdfSecurityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEncrypt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the encryption of the source document can be done.
    /// The encryption can be done when:
    /// - the source document is PDF
    /// - the When to encrypt condition is met
    /// - the encryption password is not empty
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canEncrypt()
    {
        return (this.isPdfOutputFileFormat() 
                    && printReportSettings.parmPdfPassword()
                    && printReportSettings.parmPdfEncryptionConditionSet() != null
                    && pdfEncryptionCondition != -1
                    && printReportSettings.parmPdfEncryptionConditionSet().in(pdfEncryptionCondition));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the signature of the source document can be done.
    /// The signature can be done when:
    /// - the source document is PDF
    /// - the PDF signature settings are set
    /// - the PDF signature settings are enabled
    /// - the PDF signature certificate is set
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canSign()
    {
        return (this.isPdfOutputFileFormat()
                    && signReportContent
                    && printReportSettings.applyPdfSignature());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the source document file format is PDF.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isPdfOutputFileFormat()
    {
        if (isPdfOutputFormat == UnknownNoYes::Unknown)
        {
            // Check if the class is called from Print archive.
            if (this.isReportArchived())
            {
                using (System.IO.MemoryStream reportContent = this.getSourceDocumentMemoryStream())
                {
                    DocFileType fileType = DocFileDetection::GetKnownFileType(reportContent);
                    isPdfOutputFormat = fileType == DocFileType::Pdf ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
            }
            else
            {
                isPdfOutputFormat = printReportSettings.isPrintedReportProvidedAsPdf() ? UnknownNoYes::Yes : UnknownNoYes::No;
            }
        }

        return isPdfOutputFormat == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target document as container.
    /// The returned target document can be:
    /// - signed, if canSign is true
    /// - encrypted, if canEncrypted is true
    /// - encrypted and signed, if canEncrypted and canSign are true
    /// - unchanged, if canEncrypted and canSign are false
    /// </summary>
    /// <returns>Target document as container</returns>
    public container getDocumentContainer()
    {
        return DocGlobalHelper::convertMemoryStreamToContainer(this.getTargetDocument());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PDF encryption password from print archive.
    /// </summary>
    /// <param name = "_docPrintJobHeader">A <c>DocPrintJobHeader</c> record</param>
    /// <returns>PDF encryption password</returns>
    public static DocPdfEcryptionPassword getPassword(DocPrintJobHeader _docPrintJobHeader)
    {
        DocReportPdfSecurityManager docReportPdfSecurityManager = new DocReportPdfSecurityManager();

        docReportPdfSecurityManager.setDocPrintJobHeader(_docPrintJobHeader);

        return docReportPdfSecurityManager.printReportSettings.parmPdfPassword();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file type.
    /// </summary>
    /// <returns>File type</returns>
    public str getFileType()
    {
        if (this.isReportArchived())
        {
            return DocuRef::findRecId(docPrintJobHeader.getReportPrintedWithDocentricInOriginalFormat().parmDocuRefRecId()).fileType();
        }
        return printReportSettings.parmPrintedReport().getOutputFileFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signs the generated PDF report content provided by print report settings.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <returns>Document content as container</returns>
    public static container signDocument(DocPrintReportSettings _printReportSettings)
    {
        if (_printReportSettings == null || !_printReportSettings.isPrintedReportProvided())
        {
            DocGlobalHelper::handleException(funcName(), 'Document cannot be signed due to invalid parameters: _printReportSettings is null or does not contain the printed document');
        }

        DocReportPdfSecurityManager docReportPdfSecurityManager = DocReportPdfSecurityManager::construct(_printReportSettings, true);
        container signedDocumentContainer = docReportPdfSecurityManager.getDocumentContainer();
        _printReportSettings.parmPrintedReport().setReportContentContainer(signedDocumentContainer);
        return signedDocumentContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts the generated PDF report content provided by print report settings.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_pdfEncryptionCondition">Encryption condition</param>
    /// <param name = "_executionInfo">Execution info</param>
    /// <returns>Document content as container</returns>
    public static container encryptDocument(DocPrintReportSettings _printReportSettings, DocPdfEncryptionConditionEnum _pdfEncryptionCondition, IDocPdfEncryptionSettingsExecutionInfo _executionInfo = null)
    {
        if (_printReportSettings == null || !_printReportSettings.isPrintedReportProvided())
        {
            DocGlobalHelper::handleException(funcName(), 'Document cannot be encrypted due to invalid parameters: _printReportSettings is null or does not contain the printed document');
        }

        DocReportPdfSecurityManager docReportPdfSecurityManager = DocReportPdfSecurityManager::constructWithEncryptionCondition(_printReportSettings, _pdfEncryptionCondition);
        docReportPdfSecurityManager.updateExecutionInfo(_executionInfo);
        return docReportPdfSecurityManager.getDocumentContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptAndSignDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts and signs the generated PDF report content provided by print report settings.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_pdfEncryptionCondition">Encryption condition</param>
    /// <param name = "_executionInfo">Execution info</param>
    /// <returns>Document content as container</returns>
    public static container encryptAndSignDocument(DocPrintReportSettings _printReportSettings, DocPdfEncryptionConditionEnum _pdfEncryptionCondition, IDocPdfEncryptionSettingsExecutionInfo _executionInfo = null)
    {
        if (_printReportSettings == null || !_printReportSettings.isPrintedReportProvided())
        {
            DocGlobalHelper::handleException(funcName(), 'Document cannot be encrypted/signed due to invalid parameters: _printReportSettings is null or does not contain the printed document');
        }

        DocReportPdfSecurityManager docReportPdfSecurityManager = DocReportPdfSecurityManager::constructWithEncryptionCondition(_printReportSettings, _pdfEncryptionCondition, true);
        docReportPdfSecurityManager.updateExecutionInfo(_executionInfo);
        return docReportPdfSecurityManager.getDocumentContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptDocumentFromPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts the generated PDF report content provided by DocPrintJobHeader record.
    /// This method needs to be called from print archive becasue the information about
    /// the printed reports is saved in the DocPrintJobHeader table.
    /// </summary>
    /// <param name = "_printJobHeader">A DocPrintJobHeader record</param>
    /// <param name = "_pdfEncryptionCondition">Encryption condition</param>
    /// <returns>Document content as container</returns>
    public static container encryptDocumentFromPrintJobHeader(DocPrintJobHeader _printJobHeader, DocPdfEncryptionConditionEnum _pdfEncryptionCondition)
    {
        if (_printJobHeader == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Document cannot be encrypted due to invalid parameters: _printJobHeader is null');
        }

        DocReportPdfSecurityManager docReportPdfSecurityManager = DocReportPdfSecurityManager::constructWithPrintJobHeaderAndEncryptionCondition(_printJobHeader, _pdfEncryptionCondition);
        return docReportPdfSecurityManager.getDocumentContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptAndSignDocumentFromPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts and signs the generated PDF report content provided by  DocPrintJobHeader record.
    /// This method needs to be called from print archive becasue the information about
    /// the printed reports is saved in the DocPrintJobHeader table.
    /// </summary>
    /// <param name = "_printJobHeader">A DocPrintJobHeader record</param>
    /// <param name = "_pdfEncryptionCondition">Encryption condition</param>
    /// <returns>Document content as container</returns>
    public static container encryptAndSignDocumentFromPrintJobHeader(DocPrintJobHeader _printJobHeader, DocPdfEncryptionConditionEnum _pdfEncryptionCondition)
    {
        if (_printJobHeader == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Document cannot be encrypted/signed due to invalid parameters: _printJobHeader is null');
        }

        DocReportPdfSecurityManager docReportPdfSecurityManager = DocReportPdfSecurityManager::constructWithPrintJobHeaderAndEncryptionCondition(_printJobHeader, _pdfEncryptionCondition, true);
        return docReportPdfSecurityManager.getDocumentContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the execution info object.
    /// </summary>
    /// <param name = "_executionInfo">Execution info</param>
    private void updateExecutionInfo(IDocPdfEncryptionSettingsExecutionInfo _executionInfo)
    {
        if (_executionInfo != null)
        {
            _executionInfo.setPdfEncryptionSettings(this.canEncrypt(), pdfEncryptionCondition, printReportSettings.parmPdfPassword(), printReportSettings.parmPdfEncryptionAlgorithm());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target document as memory stream.
    /// The returned target document can be:
    /// - signed, if canSign is true
    /// - encrypted, if canEncrypted is true
    /// - encrypted and signed, if canEncrypted and canSign are true
    /// - unchanged, if canEncrypted and canSign are false
    /// </summary>
    /// <returns>Target document as memory stream</returns>
    public System.IO.MemoryStream getTargetDocument()
    {
        // Set PDF source document as memory stream
        this.setSourceDocument(this.getSourceDocumentMemoryStream());
        // Set PDF signature settings
        this.setPdfSignatureSettings(printReportSettings.parmPdfSignatureSettings());
        // Set report run-time language
        this.setLanguageId(printReportSettings.parmLanguageId());
        // Set PDF encryption password
        this.setPdfPassword(printReportSettings.parmPdfPassword());
        // Set PDF encryption algorithm
        this.setPdfEncryptionAlgorithm(printReportSettings.parmPdfEncryptionAlgorithm());

        // Get target document
        System.IO.MemoryStream targetDocument = super();

        // Reset the cached report content container to null. This needs to be done because the the original report content
        // can be changed before the next call of the method getDocumentMemoryStream.
        sourceDocumentContainer = conNull();

        return targetDocument;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>