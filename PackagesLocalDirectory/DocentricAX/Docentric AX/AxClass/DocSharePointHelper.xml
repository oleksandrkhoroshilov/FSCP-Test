<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSharePointHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.SharePoint;
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Docentric.AX.Storage.SharePoint.Old;
using Docentric.AX.Framework.Utilities;
using System.Collections.Generic;

/// <summary>
/// Docentric SharePoint helper class.
/// </summary>
[SysObsoleteAttribute('The DocSharePointHelper class is obsolete. Please use the DocSharePointHelperV2 class instead.', false, 19\08\2021)]
class DocSharePointHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>folderPathExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given folder path exists on SharePoint.
    /// </summary>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_showErrorMsg">Should error message be shown if an error occur</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <returns>
    /// Returns true if the provided folder path exists on SharePoint.
    /// Returns false if any of the folder specified in the given folder path does not exist,
    /// or if an error occurs and the _throwError parameter set to false (otherwise the error is thrown).
    /// </returns>
    public static boolean folderPathExists(str _spSiteUrl, str _spFolderPath, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        System.Uri spSiteUri;
        if (!_spSiteUrl || !System.Uri::TryCreate(_spSiteUrl, System.UriKind::Absolute, byref spSiteUri))
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError('Parameter _spSiteUrl is not set or it is invalid', true, funcName(), _throwError);
            }
            return false;
        }

        boolean folderPathExists = false;
        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        
        str errMsg = strFmt('Failed to retrieve folder info from the SharePoint URL (%1) for the user (%2), which has the external user ID (%3)',
                           _spFolderPath, _userId, externalUserId);

        try
        {
            ISharePointProxy proxy = DocSharePointHelper::createSharePointProxy(spSiteUri.Host, spSiteUri.AbsolutePath, externalUserId, _showErrorMsg, _throwError);
            if (proxy != null)
            {
                var docProxy = DocSharePointProxy::CreateProxy(proxy);
                var folder = docProxy.GetFolder(_spFolderPath);

                folderPathExists = folder.Success;
            }
        }
        catch(Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
            }
        }

        return folderPathExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a folder in the given folder path on SharePoint.
    /// </summary>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_showErrorMsg">Should error message be shown if an error occur</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <returns>
    /// Returns true if the provided folder was created on SharePoint.
    /// Returns false if any of the folder specified in the given folder path does not exist,
    /// or if an error occurs and the _throwError parameter set to false (otherwise the error is thrown).
    /// </returns>
    public static boolean createFolder(str _spSiteUrl, str _spFolderPath, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        System.Uri spSiteUri;
        if (!_spSiteUrl || !System.Uri::TryCreate(_spSiteUrl, System.UriKind::Absolute, byref spSiteUri))
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError('Parameter _spSiteUrl is not set or it is invalid', true, funcName(), _throwError);
            }
            return false;
        }

        boolean folderWasCreated = false;
        str externalUserId = DocGlobalHelper::getExternalId(_userId);

        str errMsg = strFmt('Failed to create folder in the SharePoint URL (%1) for the user (%2), which has the external user ID (%3)',
                           _spFolderPath, _userId, externalUserId);
        
        try
        {
            ISharePointProxy proxy = DocSharePointHelper::createSharePointProxy(spSiteUri.Host, spSiteUri.AbsolutePath, externalUserId, _showErrorMsg, _throwError);
            if (proxy != null)
            {
                var docProxy = DocSharePointProxy::CreateProxy(proxy);
                var folder = docProxy.CreateFolder(_spFolderPath);

                folderWasCreated = folder.Success;
            }
        }
        catch(Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
            }
        }

        return folderWasCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures full folder structure in Sharepoint. If the folder already exists the list of created folders is empty, as the method did not create anything.
    /// </summary>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_showErrorMsg">Should error message be shown if an error occur</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <returns>
    /// Returns true if the provided folder was created on SharePoint.
    /// Returns false if any of the folder specified in the given folder path does not exist,
    /// or if an error occurs and the _throwError parameter set to false (otherwise the error is thrown).
    /// </returns>
    public static FolderResults ensureFolder(str _spSiteUrl, str _spFolderPath, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        System.Uri spSiteUri;
        if (!_spSiteUrl || !System.Uri::TryCreate(_spSiteUrl, System.UriKind::Absolute, byref spSiteUri))
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError('Parameter _spSiteUrl is not set or it is invalid', true, funcName(), _throwError);
            }
            return null;
        }

        FolderResults result;
        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        
        str errMsg = strFmt('Failed to ensure folder structure in the SharePoint URL (%1) for the user (%2), which has the external user ID (%3)',
                           _spFolderPath, _userId, externalUserId);

        try
        {
            ISharePointProxy proxy = DocSharePointHelper::createSharePointProxy(spSiteUri.Host, spSiteUri.AbsolutePath, externalUserId, _showErrorMsg, _throwError);
            if (proxy != null)
            {
                var docProxy = DocSharePointProxy::CreateProxy(proxy);
                var ensureFolderResult = docProxy.EnsureFolder(_spFolderPath);
                result = ensureFolderResult.Content;
            }
        }
        catch(Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteExists</Name>
				<Source><![CDATA[
    public static boolean siteExists(str _spSiteUrl, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        System.Uri spSiteUri;
        boolean siteExists = false;
        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        str errMsg = strFmt('Failed to connect to SharePoint site (%1) for the user (%2), which has the external user ID (%3)',
                             _spSiteUrl, _userId, externalUserId);

        if (_spSiteUrl && System.Uri::TryCreate(_spSiteUrl, System.UriKind::Absolute, byref spSiteUri))
        {
            try
            {
                ISharePointProxy proxy = DocSharePointHelper::createSharePointProxy(spSiteUri.Host, spSiteUri.AbsolutePath, externalUserId, _showErrorMsg, _throwError);
                if (proxy != null)
                {
                    WebInformation webInfo = SharePointHelper::OpenWeb(proxy);
                    siteExists = webInfo != null;
                }
            }
            catch(Exception::CLRError)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
            catch(Exception::Internal)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
        }
        else
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError('Parameter _spSiteUrl is not set or it is invalid', true, funcName(), _throwError);
            }
        }

        return siteExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileInfoByUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint FileResult object with file info.
    /// </summary>
    /// <param name = "_fileUrl">File url</param>
    /// <param name = "_siteUrl">Site url</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_showErrorMsg">Should error message be shown if an error occur</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <returns>File info. Returns null if file does not exist, or if an error occurs and the _throwError parameter set to false.</returns>
    public static Microsoft.Dynamics.Platform.Integration.SharePoint.FileResult getFileInfoByUrl(
        str _fileUrl, str _siteUrl, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        System.Uri fileUri, siteUri;
        FileResult fileResult = null;

        str errMsg = strFmt('Failed to retrieve file info from the SharePoint URL (%1) for the user (%2), which has the external user ID (%3)',
                           _fileUrl, _userId, externalUserId);

        if (_fileUrl && System.Uri::TryCreate(_fileUrl, System.UriKind::Absolute, byref fileUri) &&
            _siteUrl && System.Uri::TryCreate(_siteUrl, System.UriKind::Absolute, byref siteUri))
        {
            try
            {
                System.Uri fileODataApiUri = DocSharePointHelper::convertFileUriToODataApiUri(siteUri, fileUri);
                ISharePointProxy spProxy = DocSharePointHelper::createSharePointProxyForFile(fileODataApiUri, externalUserId, _showErrorMsg, _throwError);
                if (spProxy != null)
                {
                    fileResult = SharePointHelper::GetFileInfo(spProxy, fileODataApiUri);
                }
            }
            catch (Exception::CLRError)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
            catch (Exception::Internal)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
        }
        else
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt('Parameters _fileUrl (%1) and/or _siteUrl (%2) are invalid or not set', _fileUrl, _siteUrl), true, funcName(), _throwError);
            }
        }

        return fileResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExistsByUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given file exists on SharePoint.
    /// </summary>
    /// <param name = "_fileUrl">File url</param>
    /// <param name = "_siteUrl">Site url</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_showErrorMsg">Should error message be shown if an error occur</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <returns>
    /// Returns true if file exists on SharePoint. Returns false if file does not exist, 
    /// or if an error occurs and the _throwError parameter set to false.
    /// </returns>
    public static boolean fileExistsByUrl(str _fileUrl, str _siteUrl, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        boolean fileExists = false;

        FileResult fileResult = DocSharePointHelper::getFileInfoByUrl(_fileUrl, _siteUrl, _userId, _showErrorMsg, _throwError);
        if (fileResult != null)
        {
            fileExists = fileResult.Exists;
        }

        return fileExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileInfoByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint FileResult object with file info.
    /// </summary>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_showErrorMsg">Should error message be shown if an error occur</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <returns>File info. Returns null if file does not exist, or if an error occurs and the _throwError parameter set to false.</returns>
    public static Microsoft.Dynamics.Platform.Integration.SharePoint.FileResult getFileInfoByName(
        str _spSiteUrl, str _spFolderPath, str _fileName, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        if (_fileName == '' || _spSiteUrl == '' || _spFolderPath == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError('One or more parameters (_fileName, _spSite, _spFolder) are not set', true, funcName(), _throwError);
            }
            return null;
        }

        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        System.Uri spSiteUri;
        FileResult fileResult = null;

        str errMsg = strFmt('Failed to retrieve file info (%1) from the SharePoint site (%2) and folder path (%3), for the user (%4), which has the external user ID (%5)',
                            _fileName, _spSiteUrl, _spFolderPath, _userId, externalUserId);

        if (System.Uri::TryCreate(_spSiteUrl, System.UriKind::Absolute, byref spSiteUri))
        {
            try
            {
                ISharePointProxy spProxy = DocSharePointHelper::createSharePointProxy(spSiteUri.Host, spSiteUri.AbsolutePath, externalUserId, _showErrorMsg, _throwError);
                if (spProxy != null)
                {
                    FileResults fileResults = SharePointHelper::GetFiles(spProxy, _spFolderPath, _fileName);
                    if (fileResults != null)
                    {
                        if (ListHelper::Count(fileResults.Results) > 0)
                        {
                            fileResult = ListHelper::GetItem(fileResults.Results, 0);
                        }
                    }
                }
            }
            catch (Exception::CLRError)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
            catch (Exception::Internal)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
        }
        else
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt('Parameter _spSiteUrl (%1) is not valid URL', _spSiteUrl), true, funcName(), _throwError);
            }
        }

        return fileResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExistsByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given file exists on SharePoint.
    /// </summary>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_showErrorMsg">Should error message be shown if an error occur</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <returns>
    /// Returns true if file exists on SharePoint. Returns false if file does not exist, 
    /// or if an error occurs and the _throwError parameter set to false.
    /// </returns>
    public static boolean fileExistsByName(str _spSiteUrl, str _spFolderPath, str _fileName, str _userId = curUserId(),
                                           boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        boolean fileExists = false;

        FileResult fileResult = DocSharePointHelper::getFileInfoByName(_spSiteUrl, _spFolderPath, _fileName, _userId, _showErrorMsg, _throwError);
        if (fileResult != null)
        {
            fileExists = fileResult.Exists;
        }
        
        return fileExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileContentByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a file content from SharePoint.
    /// </summary>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_userId">User Id</param>
    /// <returns>File content. Returns null if the file does not exist.</returns>
    public static System.IO.Stream getFileContentByName(str _spSiteUrl, str _spFolderPath, str _fileName, str _userId = curUserId())
    {
        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        System.Uri fileUri;
        
        str errMsg = strFmt('Failed to retrieve file content (%1) from the SharePoint site (%2) and folder path (%3), for the user (%4), which has the external user ID (%5)',
                            _fileName, _spSiteUrl, _spFolderPath, _userId, externalUserId);

        System.IO.Stream fileContent = null;

        FileResult fileResult = DocSharePointHelper::getFileInfoByName(_spSiteUrl, _spFolderPath, _fileName, _userId, true, true);
        if (fileResult != null && fileResult.Exists)
        {
            try
            {
                fileUri = fileResult.FullPath();
                if (fileUri != null && fileUri.AbsoluteUri != '')
                {
                    fileContent = DocSharePointHelper::getFileContentByUrl(fileUri.AbsoluteUri, _spSiteUrl, _userId);
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), errMsg);
            }
            catch (Exception::Internal)
            {
                DocGlobalHelper::handleClrException(funcName(), errMsg);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), errMsg);
            }
        }

        return fileContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileContentByUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a file content from SharePoint.
    /// </summary>
    /// <param name = "_fileUrl">File url</param>
    /// <param name = "_siteUrl">Site url</param>
    /// <param name = "_userId">User Id</param>
    /// <returns>File content. Returns null if file does not exist.</returns>
    public static System.IO.Stream getFileContentByUrl(str _fileUrl, str _siteUrl, str _userId = curUserId())
    {
        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        
        str errMsg = strFmt('Failed to retrieve file content from the SharePoint URL (%1) for the user (%2), which has the external user ID (%3)',
                           _fileUrl, _userId, externalUserId);
        System.Uri fileUri, siteUri;
        System.IO.Stream fileContent = null;

        if (_fileUrl && System.Uri::TryCreate(_fileUrl, System.UriKind::Absolute, byref fileUri) &&
            _siteUrl && System.Uri::TryCreate(_siteUrl, System.UriKind::Absolute, byref siteUri))
        {
            try
            {
                System.Uri fileODataApiUri = DocSharePointHelper::convertFileUriToODataApiUri(siteUri, fileUri);
                ISharePointProxy spProxy = DocSharePointHelper::createSharePointProxyForFile(fileODataApiUri, externalUserId, true, true);
                if (spProxy != null)
                {
                    FileContents fileContents = SharePointHelper::GetFileContents(spProxy, fileODataApiUri);
                    if (fileContents != null)
                    {
                        fileContent = fileContents.Content;
                    }
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), errMsg);
            }
            catch (Exception::Internal)
            {
                DocGlobalHelper::handleClrException(funcName(), errMsg);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), errMsg);
            }
        }
        else
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Parameters _fileUrl (%1) and/or _siteUrl (%2) are invalid or not set', _fileUrl, _siteUrl));
        }

        return fileContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadToSharePoint_OpenInBrowser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upload file to SharePoint and modified file url to be open in web app.
    /// </summary>
    /// <param name = "_stream">File content</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_overwriteFile">Should the uploading file be overwritten</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <param name = "_createNonExistingFolders">Should the non-existing folders in the provided folder path be created</param>
    /// <returns>The uploaded file URL</returns>
    public static str uploadToSharePoint_OpenInBrowser(System.IO.MemoryStream _stream, str _fileName, str _spSiteUrl, str _spFolderPath, str _userId = curUserId(),
                                                       boolean _overwriteFile = true, boolean _throwError = true, boolean _createNonExistingFolders = true)
    {
        str url;
        str uploadedFileUrl = DocSharePointHelper::uploadToSharePoint(_stream, _fileName, _spSiteUrl, _spFolderPath, _userId, _overwriteFile, _throwError, _createNonExistingFolders);
        if (uploadedFileUrl)
        {
            // Append the parameter to open in the web app.
            url = uploadedFileUrl + '?web=1';
        }

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upload file to SharePoint.
    /// </summary>
    /// <param name = "_stream">File content</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_spSiteUrl">SharePoint site url</param>
    /// <param name = "_spFolderPath">SharePoint folder path</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_overwriteFile">Should the uploading file be overwritten</param>
    /// <param name = "_throwError">If error occurs, throw an exception</param>
    /// <param name = "_createNonExistingFolders">Should the non-existing folders in the provided folder path be created</param>
    /// <returns>The uploaded file URL</returns>
    public static str uploadToSharePoint(System.IO.MemoryStream _stream, str _fileName, str _spSiteUrl, str _spFolderPath, str _userId = curUserId(),
                                         boolean _overwriteFile = true, boolean _throwError = true, boolean _createNonExistingFolders = true)
    {
        System.Uri spSiteUri;
        str url = '';
        str externalUserId = DocGlobalHelper::getExternalId(_userId);
        str errorMsg = strFmt("@DocentricAX3:UploadFileToSharePointError", _filename, _spSiteUrl, _spFolderPath, _userId, externalUserId, _overwriteFile, _createNonExistingFolders);

        if (_stream == null || _fileName == '' || _spSiteUrl == '' || _spFolderPath == '')
        {
            DocGlobalHelper::handleError('One or more parameters (_stream, _fileName, _spSite, _spFolder) are not set', true, funcName(), _throwError);
            return '';
        }

        if (System.Uri::TryCreate(_spSiteUrl, System.UriKind::Absolute, byref spSiteUri))
        {
            ISharePointProxy proxy = DocSharePointHelper::createSharePointProxy(spSiteUri.Host, spSiteUri.AbsolutePath, externalUserId, true, _throwError);
            if (proxy != null)
            {
                try
                {
                    var docProxy = DocSharePointProxy::CreateProxy(proxy);
                    if (_createNonExistingFolders)
                    {
                        var ensureFolderResult = docProxy.EnsureFolder(_spFolderPath);

                        if ((ensureFolderResult != null) && (ensureFolderResult.Content != null))
                        {
                            FolderResults createdFolders = ensureFolderResult.Content;
                            if (createdFolders.Results != null)
                            {
                                var listOfCreateFolders = createdFolders.Results;
                                var cnt = ListHelper::Count(listOfCreateFolders);

                                if (cnt > 0)
                                {
                                    str newlyCreatedFolders = '';
                                    str startingSharePointPath = '';

                                    for(int idx=0; idx < cnt; idx++)
                                    {
                                        SPFolder item = ListHelper::GetItem(listOfCreateFolders, idx);
                                        newlyCreatedFolders += item.Name + '/';
                                        startingSharePointPath = item.ServerRelativeUrl;
                                    }

                                    // we remove the trailing slash
                                    newlyCreatedFolders = (newlyCreatedFolders as System.String).TrimEnd('/');
                                    
                                    // base folder where new folders were created
                                    str baseFolder = strReplace(_spFolderPath, newlyCreatedFolders, '');
                                    baseFolder = (baseFolder as System.String).TrimEnd('/');
                                    
                                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:SaveToSharePointCreatedFolderStructure", newlyCreatedFolders, baseFolder));
                                }
                            }
                        }
                    }

                    _stream.Position = 0;
                    var saveResult = docProxy.CreateFile(_spFolderPath, _fileName, _stream, _overwriteFile);
                    if ((saveResult != null) && (saveResult.Content))
                    {
                        url = DataContractExtensions::FullPath(saveResult.Content).ToString();
                    }

                    if (url == '')
                    {
                        DocGlobalHelper::handleError(errorMsg, true, funcName(), _throwError);
                    }
                }
                catch(Exception::CLRError)
                {
                    DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
                }
            }
        }
        else
        {
            DocGlobalHelper::handleError('Parameter _siteUrl is invalid', true, funcName(), _throwError);
        }

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidSharePointFolderPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given SharePoint folder path is valid.
    /// </summary>
    /// <param name="_spFolderPath">
    /// SharePoint folder path.
    /// </param>
    /// <returns>
    /// True if the given SharePoint folder path is valid.
    /// </returns>
    public static boolean isValidSharePointFolderPath(str _spFolderPath)
    {
        System.Char[]                           invalidCharactersArray;
        int                                     indexOfArray = 1;
        int                                     lenOfFilePath;
        str                                     regex  = '[a-zA-Z0-9]+';
        System.String                           strInvalidChars;
        System.String                           filePathChar;
        str                                     folderPath;
        
        if (_spFolderPath == '')
        {
            return true;
        }

        // SharePoint folder path doesn't start with '/'
        if (strStartsWith(_spFolderPath, DocConstantFile::SharePointFolderPathDelimiter))
        {
            return false;
        }
    
        // Check if the file path contains invalid path characters.
        invalidCharactersArray = System.IO.Path::GetInvalidPathChars();
    
        folderPath = System.Text.RegularExpressions.Regex::Replace(_spFolderPath, regex, '');
        lenOfFilePath = strlen(folderPath);
    
        strInvalidChars = new System.String(invalidCharactersArray);
        // Adding additional invalid characters
        strInvalidChars = strInvalidChars + '#%*:?';

        while (indexOfArray <= lenOfFilePath)
        {
            filePathChar = substr(folderPath, indexOfArray, 1);
            if (filePathChar == DocConstantFile::SharePointFolderPathDelimiter)
            {
                indexOfArray++;
                continue;
            }

            if (strInvalidChars.Contains(filePathChar))
            {
                return false;
            }

            indexOfArray++;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSiteNameFromURL</Name>
				<Source><![CDATA[
    public static str getSiteNameFromURL(str _siteUrl)
    {
        int length = strLen(_siteUrl);
        int lastPos = length - 1;

        int targetPos = strFind(_siteUrl, DocConstantFile::UrlDelimiter, lastPos, -lastPos);
        str siteName = subStr(_siteUrl, targetPos+1, length);

        if (strEndsWith(siteName, DocConstantFile::UrlDelimiter))
        {
            siteName = subStr(siteName, 1, strLen(siteName) - 1);
        }

        return siteName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointHostNameFromSharePointUrl</Name>
				<Source><![CDATA[
    public static str getSharePointHostNameFromSharePointUrl(str _spUrl)
    {
        str hostName = '';
        System.Uri spUri;

        if (System.Uri::TryCreate(_spUrl, System.UriKind::Absolute, byref spUri))
        {
            hostName = spUri.Host;
        }
        
        return hostName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the host name of the default SharePoint server if one exists
    /// </summary>
    /// <returns>The default SharePoint server</returns>
    public static str getDefaultServer()
    {
        str serverName;
        DocuParameters parameters = DocuParameters::find();
        if (parameters)
        {
            serverName = parameters.DefaultSharePointServer;
        }

        if (!serverName)
        {
            str tenantId = DocGlobalHelper::getAADTenantId();
            if (tenantId != '')
            {
                serverName = DocSharePointHelper::constructDefaultServerName(tenantId);
            }
        }

        return serverName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConnectToSpServer</Name>
				<Source><![CDATA[
    public static boolean canConnectToSpServer(str _serverName, str _userId = curUserId(), boolean _showErrorMsg = true, boolean _throwError = true)
    {
        boolean canConnect = false;
        str extUserId = DocGlobalHelper::getExternalId(_userId);

        // Create the SharePoint server proxy.
        ISharePointProxy proxy = DocSharePointHelper::createSharePointProxy(_serverName, '/', extUserId, _showErrorMsg, _throwError);

        if (proxy)
        {
            try
            {
                canConnect = SharePointHelper::VerifyAuthentication(proxy);
            }
            catch(Exception::CLRError)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(),
                        strFmt('Cannot connect to the SharePoint server (%1) and user (%2), which has the external user ID (%3)', _serverName, _userId, extUserId),
                        _throwError);
                }
            }
            catch(Exception::Internal)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(),
                        strFmt('Cannot connect to the SharePoint server (%1) and user (%2), which has the external user ID (%3)', _serverName, _userId, extUserId),
                        _throwError);
                }
            }
        }
        else
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt('Cannot create a proxy to the SharePoint server for the user (%1)', _userId), true, funcName(), _throwError);
            }
        }

        return canConnect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSharePointProxy</Name>
				<Source><![CDATA[
    private static ISharePointProxy createSharePointProxy(str _serverName, str _siteName = '/', str _extUserId = DocGlobalHelper::getExternalId(curUserId()) ,
                                                          boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        ISharePointProxy proxy = null;
        str errMsg = strFmt('Cannot create proxy for the SharePoint server (%1) and the external user ID (%2)', _serverName, _extUserId);

        if(_serverName != '' && _extUserId != '')
        {
            try
            {
                proxy = SharePointHelper::CreateProxy(_serverName, _siteName, _extUserId);
                if (proxy == null && _showErrorMsg)
                {
                    DocGlobalHelper::handleError(errMsg, true, funcName(), _throwError);
                }
            }
            catch(Exception::CLRError)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
            catch(Exception::Internal)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
        }
        else
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError('Parameters _serverName and/or _extUserId are not set', true, funcName(), _throwError);
            }
        }

        return proxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSharePointProxyForFile</Name>
				<Source><![CDATA[
    private static ISharePointProxy createSharePointProxyForFile(System.Uri _fileUri, str _extUserId = DocGlobalHelper::getExternalId(curUserId()) ,
                                                                 boolean _showErrorMsg = true, boolean _throwError = true)
    {
        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Invalid parameter combination: _showError (%1) and _throwError (%2)', _showErrorMsg, _throwError));
        }

        ISharePointProxy proxy = null;
        str errMsg = strFmt('Cannot create proxy for the SharePoint file URL (%1) and the external user ID (%2)', _fileUri.AbsoluteUri, _extUserId);

        if(_fileUri != null && !System.String::IsNullOrEmpty(_fileUri.AbsoluteUri) && _extUserId != '')
        {
            try
            {
                str folderPath;
                proxy = SharePointHelper::CreateProxyForFile(_fileUri, _extUserId, byref folderPath);
                if (proxy == null && _showErrorMsg)
                {
                    DocGlobalHelper::handleError(errMsg, true, funcName(), _throwError);
                }
            }
            catch(Exception::CLRError)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
            catch(Exception::Internal)
            {
                if (_showErrorMsg)
                {
                    DocGlobalHelper::handleClrError(funcName(), errMsg, _throwError);
                }
            }
        }
        else
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError('Parameters _fileUri and/or _extUserId are not set', true, funcName(), _throwError);
            }
        }

        return proxy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefaultServerName</Name>
				<Source><![CDATA[
    private static str constructDefaultServerName(str _tenantId)
    {
        str serverName = '';
        if(_tenantId)
        {
            str suffix;
            int tenantNumber = strLen(_tenantId);
            int endingIndex = strScan(_tenantId, '.onmicrosoft.com', 1, tenantNumber);
            if(endingIndex > 0)
            {
                suffix = 'sharepoint.com';
            }
            else
            {
                endingIndex = strScan(_tenantId, '.ccsctp.net', 1, tenantNumber);
                suffix = 'spoppe.com';
            }

            if(endingIndex > 0)
            {
                str tenant = subStr(_tenantId, 0, endingIndex);
                serverName = tenant + suffix;
            }
        }

        return serverName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFileUriToODataApiUri</Name>
				<Source><![CDATA[
    private static System.Uri convertFileUriToODataApiUri(System.Uri _siteUri, System.Uri _fileUri)
    {
        str ret = strFmt('%1%2_api/Web/GetFileByServerRelativeUrl(\'%3\')', _siteUri.AbsoluteUri, (_siteUri.AbsoluteUri.EndsWith('/') ? '' : '/'), _fileUri.LocalPath);
        return new System.Uri(ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>