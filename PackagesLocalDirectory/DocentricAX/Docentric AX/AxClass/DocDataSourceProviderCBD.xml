<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderCBD</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
using System.Reflection;
using UL = Docentric.AX.Framework.Utilities;

/// <summary>
/// The DocDataSourceProviderCBD class is a data provider for configurable business documents (CBD).
/// </summary>
public class DocDataSourceProviderCBD
{
    private const static str DataContractName = 'ReportDataContract';
    private const static str DataProviderName = 'ReportDataProvider';
    private const static str DataRDLContractName = 'ReportRDLDataContract';
    private const static str PrintMgmtSettingDetailName = 'PrintMgmtPrintSettingDetail';

    private SrsReportDataContract srsReportDataContract;
    private Query srsReportFirstDynamicQuery;
    private SRSReportDataProviderBase srsReportDataProvider;
    private ERModelMappingTable erModelMappingTable;
    private DocDataSourceProviderParams docDataSourceProviderParams;
    private DocDataSourceProviderParamsReporting docDataSourceProviderParamsReporting;
    private ERISolutionLabelRepository erSolutionLabelRepository;
    private DocERModelDataToIncludeInDS erModelDataToIncludeInDS;
    private Map srsReportParameters;
    private LanguageId dsLanguageId;
    private boolean isRuntime;
    private boolean isExecutingInBatch;
    

    #PrintMgmtSetup

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLabelRepository</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the label repository for the report.
    /// </summary>
    /// <param name = "_erSolutionLabelRepository">A label repository.</param>
    /// <returns>Label repository.</returns>
    public ERISolutionLabelRepository parmLabelRepository(ERISolutionLabelRepository _erSolutionLabelRepository = erSolutionLabelRepository)
    {
        erSolutionLabelRepository = _erSolutionLabelRepository;
        return erSolutionLabelRepository;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// A constructor.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initialize the data source provider for the report.
    /// </summary>
    /// <param name = "_docDataSourceProviderParams">An instance of the DocDataSourceProviderParams class.</param>
    /// <param name = "_docDataSourceProviderParamsReporting">An instance of the DocDataSourceProviderParamsReporting class.</param>
    /// <param name = "_srsReportDataContract">A report data contract.</param>
    /// <param name = "_srsReportParameters">A report parameters.</param>
    /// <param name = "_srsReportDataProvider">A report data provider.</param>
    /// <param name = "_srsReportFirstDynamicQuery">A report first dynamic query.</param>
    /// <returns>A data source provider object.</returns>
    public static DocDataSourceProviderCBD construct(DocDataSourceProviderParams _docDataSourceProviderParams, 
                                                     DocDataSourceProviderParamsReporting _docDataSourceProviderParamsReporting,
                                                     SrsReportDataContract _srsReportDataContract,
                                                     Map _srsReportParameters,
                                                     SRSReportDataProviderBase _srsReportDataProvider, 
                                                     Query _srsReportFirstDynamicQuery)
    {
        DocDataSourceProviderCBD dataSourceProviderCBD = new DocDataSourceProviderCBD();

        dataSourceProviderCBD.docDataSourceProviderParams = _docDataSourceProviderParams;
        dataSourceProviderCBD.docDataSourceProviderParamsReporting = _docDataSourceProviderParamsReporting;
        dataSourceProviderCBD.srsReportDataContract = _srsReportDataContract;
        dataSourceProviderCBD.srsReportParameters = _srsReportParameters;
        dataSourceProviderCBD.srsReportDataProvider = _srsReportDataProvider;
        dataSourceProviderCBD.srsReportFirstDynamicQuery = _srsReportFirstDynamicQuery;

        dataSourceProviderCBD.init();

        return dataSourceProviderCBD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data soource provider for the report.
    /// </summary>
    protected void init()
    {
        // Get a model mapping for a report
        erModelMappingTable = docDataSourceProviderParams.parmERModelMappingTable();

        // Get a languange for a report
        dsLanguageId = docDataSourceProviderParams.parmDsLanguageId();

        // Flag indicating if a report is executing in design-time or runtime
        isRuntime = docDataSourceProviderParams.parmIsRuntime();

        // Flag indicating if a report is executing in batch
        if (docDataSourceProviderParamsReporting.parmReportRunContext() != null)
        {
            isExecutingInBatch = docDataSourceProviderParamsReporting.parmReportRunContext().isExecutingInBatch();
        }

        // Flag indicating which model data should be included in DDSP (Mapped data only, All data)
        erModelDataToIncludeInDS = docDataSourceProviderParams.parmERModelDataToIncludeInDS();

        // Set a solution label repository
        erSolutionLabelRepository = this.getSolutionLabelRepository();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the model mapping and creates the DDSP file for the selected report.
    /// </summary>
    /// <param name = "_docXmlRecordBuilder">A record builder.</param>
    public void run(DocXmlRecordBuilder _docXmlRecordBuilder)
    {
        str getLicenseErrMsg()
        {
            str licenseErrMsg;
            if (this.docDataSourceProviderParamsReporting.parmReportRunContext() == null ||
                this.docDataSourceProviderParamsReporting.parmReportRunContext().parmPrintDestination() == DocPrintDestination::GenerateDataSource)
            {
                licenseErrMsg = strFmt("@DocentricAX4:LicenseCheckFeatureCBDGenerateDDSPError", this.docDataSourceProviderParamsReporting.parmReportId());
            }
            else
            {
                licenseErrMsg = strFmt("@DocentricAX4:LicenseCheckFeatureCBDError", this.docDataSourceProviderParamsReporting.parmReportId(),
                                       this.docDataSourceProviderParamsReporting.parmReportRunContext().parmTemplateId());
            }
            return licenseErrMsg;
        }

        /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
        /*
                   In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                   is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                   the Docentric AX Free Edition product.
                   You must keep intact all parts of the source code related to the licensing of the full product version.
                   Read more: https://ax.docentric.com/free-edition-license/
        */
        /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

        // If the CBD is used, check the license. This feature cannot be used with Free Edition!
        // This call will throw an exception if the license is not found or if the license is invalid, expired or insufficient.
        DocLicenseMng::checkLicense(DocConstant::FeatureCBD, getLicenseErrMsg());


        DocDataSourceProviderERModelMappingRun dataSourceProviderERModelMappingRun = new DocDataSourceProviderERModelMappingRun();

        dataSourceProviderERModelMappingRun.parmRecordBuilder(_docXmlRecordBuilder);
        dataSourceProviderERModelMappingRun.parmModelMappingTable(erModelMappingTable);
        dataSourceProviderERModelMappingRun.parmLabelRepository(erSolutionLabelRepository);
        dataSourceProviderERModelMappingRun.parmERModelDataToIncludeInDS(erModelDataToIncludeInDS);
        dataSourceProviderERModelMappingRun.parmDsLanguageId(dsLanguageId);
        dataSourceProviderERModelMappingRun.parmIsRuntime(isRuntime);
        dataSourceProviderERModelMappingRun.parmIsExecutingInBatch(isExecutingInBatch);

        dataSourceProviderERModelMappingRun.init();

        dataSourceProviderERModelMappingRun.setParameters(this.setParameters(dataSourceProviderERModelMappingRun.getParameters()));

        dataSourceProviderERModelMappingRun.promptDatasourceDebugger();

        dataSourceProviderERModelMappingRun.runUnattended();

        _docXmlRecordBuilder = dataSourceProviderERModelMappingRun.parmRecordBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameters for the model mapping.
    /// </summary>
    /// <param name = "_erModelDefinitionParameters">Parameters defined in a model mapping</param>
    /// <returns>Model mapping parameters.</returns>
    protected ERIModelDefinitionParameters setParameters(ERIModelDefinitionParameters _erModelDefinitionParameters)
    {
        if (srsReportDataContract)
        {
            // Set ReportDataProvider parameter
            if (srsReportDataContract.parmRdpName())
            {
                if (srsReportDataProvider)
                {
                    this.initDataProvider();
                    _erModelDefinitionParameters.Add(DataProviderName, srsReportDataProvider);
                }
            }

            // Set ReportDataContract parameter
            if (srsReportDataContract.parmRdpContract())
            {
                _erModelDefinitionParameters.Add(DataContractName, srsReportDataContract.parmRdpContract());
            }

            // Set ReportRDLDataContract parameter
            if (srsReportDataContract.parmRdlContract())
            {
                _erModelDefinitionParameters.Add(DataRDLContractName, srsReportDataContract.parmRdlContract());
            }
        }

        // Set PrintMgmtPrintSettingDetail parameter
        PrintMgmtPrintSettingDetail printMgmtPrintSettingDetail = this.constructPrintMgmtPrintSettingDetail();
        if (printMgmtPrintSettingDetail)
        {
            _erModelDefinitionParameters.Add(PrintMgmtSettingDetailName, printMgmtPrintSettingDetail);
        }

        // Set query based parameter
        if (srsReportFirstDynamicQuery)
        {
            QueryBuildDataSource qbds = srsReportFirstDynamicQuery.dataSourceNo(1);
            if (qbds)
            {
                DictClass dataContractDictClass = new DictClass(className2Id(identifierStr(ERQueryDataContract)));
                if (dataContractDictClass)
                {
                    anytype erQueryDataContract = dataContractDictClass.makeObject(srsReportFirstDynamicQuery);
                    if (erQueryDataContract)
                    {
                        _erModelDefinitionParameters.Add(tableId2Name(qbds.file()), erQueryDataContract);
                    }
                }
            }
        }

        // Set parameters depending on print management document type
        if (DocPrintMgmtHelper::isPrintMgmtReport(docDataSourceProviderParamsReporting.parmReportId()))
        {
            switch (DocPrintMgmtHelper::getFirstPrintMgmtDocumentType(docDataSourceProviderParamsReporting.parmReportId()))
            {
                case PrintMgmtDocumentType::SalesFreeTextInvoice:
                    RecId custInvoiceJourRecId = srsReportDataContract.parmRdpContract().parmCustInvoiceJourRecId();
                    ERModelDefinitionDatabaseContext erModelDefinitionDatabaseContext = new ERModelDefinitionDatabaseContext()
                        .addRange(tableNum(CustInvoiceJour), fieldNum(CustInvoiceJour, RecId), queryValue(custInvoiceJourRecId));
                    erModelDefinitionDatabaseContext.applyTo(_erModelDefinitionParameters);
                    break;
            }
        }

        return _erModelDefinitionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a report data provider.
    /// </summary>
    private void initDataProvider()
    {
        if (this.srsReportDataProvider is SrsReportDataProviderPreProcess)
        {
            SrsReportDataProviderPreProcess dpPreProcess = this.srsReportDataProvider;

            dpPreProcess.parmCreatedTransactionId(
                SrsReportPreProcessedDetails::findByRecId(
                    this.srsReportDataContract.parmReportExecutionInfo().parmRdpPreProcessedId(), this.srsReportDataContract.parmRdpName()).
                CreatedTransactionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtPrintSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object instance of the PrintMgmtPrintSettingDetail class.
    /// </summary>
    /// <returns>PrintMgmtPrintSettingDetail object.</returns>
    private PrintMgmtPrintSettingDetail constructPrintMgmtPrintSettingDetail()
    {
        PrintMgmtPrintSettingDetail printMgmtPrintSettingDetail = new PrintMgmtPrintSettingDetail();

        PrintMgmtDocInstanceType printMgmtDocInstanceType = PrintMgmtDocInstanceType::Original;
        if (docDataSourceProviderParamsReporting)
        {
            switch (docDataSourceProviderParamsReporting.parmOriginalCopyType())
            {
                case DocPrintMgmtOriginalCopyType::Original:
                    printMgmtDocInstanceType = PrintMgmtDocInstanceType::Original;
                    break;
                case DocPrintMgmtOriginalCopyType::Copy:
                    printMgmtDocInstanceType = PrintMgmtDocInstanceType::Copy;
                    break;
            }
        }
        printMgmtPrintSettingDetail.parmType(printMgmtDocInstanceType);

        if (srsReportDataContract)
        {
            printMgmtPrintSettingDetail.parmReportFormatName(srsReportDataContract.parmReportName());
            printMgmtPrintSettingDetail.parmPrintJobSettings(srsReportDataContract.parmPrintSettings());
        }

        if (srsReportParameters)
        {
            printMgmtPrintSettingDetail.parmIdentificationText(srsReportParameters.exists(#IdentificationTextReportParamName) ? srsReportParameters.lookup(#IdentificationTextReportParamName).getValueTyped(): '');
        }

        printMgmtPrintSettingDetail.parmInstanceName(enum2Str(printMgmtPrintSettingDetail.parmType()));
        printMgmtPrintSettingDetail.parmNumberOfCopies(1);

        return printMgmtPrintSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSolutionLabelRepository</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a solution label repository for the selected model mapping. 
    /// If the selected model mapping is derived from the base model mapping then the label repository of the selected model 
    /// mapping does not include the label repository of the selected data model. In this case the label repository of the
    /// selected model mapping needs to be merged with the label repository of the selected data model.
    /// </summary>
    /// <returns>Merged solution label repository.</returns>
    private ERISolutionLabelRepository getSolutionLabelRepository()
    {
        ERISolutionLabelRepository erSolutionLabelRepositoryMerged;

        DictClass labelRepositoryDictClass = new DictClass(className2Id(identifierStr(ERSolutionReadModeLabelRepository)));
        if (labelRepositoryDictClass)
        {
            // Get the Solution ID for the selected data model
            ERSolutionID erSolutionId = docDataSourceProviderParams.parmERDataModelTable().Solution;

            // Get a label repository for the selected model mapping
            var modelMappingLabelRepository = labelRepositoryDictClass.callStatic(
                identifierStr(newFromSolution), docDataSourceProviderParams.parmERSolutionTable()) /*as ERSolutionLabelRepository*/;

            // Check if the selected model mapping label repository includes the selected data model label repository 
            System.Object[] parameters = new System.Object[1]();
            parameters.SetValue(docDataSourceProviderParams.parmERDataModelTable().Solution, 0);
            boolean hasSolutionId = UL.ReflectionHelper::InvokeInstanceMethod(modelMappingLabelRepository, 'hasSolutionId', parameters);
            
            if (hasSolutionId)
            {
                erSolutionLabelRepositoryMerged = modelMappingLabelRepository;
            }
            else
            {
                // Get a label repository for the selected data model
                var dataModelLabelRepository = labelRepositoryDictClass.callStatic(
                    identifierStr(newFromSolution), ERSolutionTable::find(erSolutionId)) /*as ERSolutionLabelRepository*/;

                // Merge both label repositories into one 
                var dataModelLabelRepositoryBase = UL.ReflectionHelper::GetField(dataModelLabelRepository, 'labelRepositoryBase') as ERSolutionLabelRepositoryBase;

                parameters.SetValue(modelMappingLabelRepository, 0);
                UL.ReflectionHelper::InvokeInstanceMethod(dataModelLabelRepositoryBase, 'SetParentRepository', parameters);

                erSolutionLabelRepositoryMerged = dataModelLabelRepositoryBase;
            }
        }

        return erSolutionLabelRepositoryMerged;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>