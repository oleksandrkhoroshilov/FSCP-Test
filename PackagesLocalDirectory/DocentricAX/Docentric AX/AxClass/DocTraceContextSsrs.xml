<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTraceContextSsrs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class DocTraceContextSsrs is used for tracing SSRS report settings used at report generation.
/// </summary>
public class DocTraceContextSsrs implements IDocTraceContext
{
    private SrsReportDataContract srsReportDataContract;
    private SrsReportRunPrinter srsReportRunPrinter;
    private boolean includePrintingResult;
    private str reportParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTraceContextInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the DocTraceContextInfo class.
    /// </summary>
    /// <returns>An instance of the DocTraceContextInfo class</returns>
    private DocTraceContextInfo createTraceContextInfo()
    {
        guid reportRunId;
        RecId preProcessedId;
        
        SRSReportExecutionInfo srsReportExecutionInfo = srsReportRunPrinter.parmSrsProxy().parmReportExecutionInfo();

        reportRunId = srsReportExecutionInfo.parmReportRunId();
        preProcessedId = srsReportExecutionInfo.parmRdpPreProcessedId();

        DocTraceContextInfo traceContextInfo = new DocTraceContextInfo();

        // ReportRunId
        traceContextInfo.addEnd(['ReportRunId', guid2StrWithoutBraces(reportRunId)]);
        // PreProcessedId
        traceContextInfo.addEnd(['PreProcessedId', int642Str(preProcessedId)]);
        // ReportParams
        traceContextInfo.addEnd(['ReportParams', this.getReportParameters()]);

        if (includePrintingResult)
        {
            DocReportExecutionInfo docReportExecutionInfo = srsReportExecutionInfo.parmReportExecutionInfo_DC();
            DocPrintReportSettings printReportSettings = docReportExecutionInfo.parmPrintReportSettings();
            if (docReportExecutionInfo && printReportSettings)
            {
                // PrintDest
                traceContextInfo.addEnd(['PrintDest', DocTraceContextSsrs::getPrintDestinationStr(printReportSettings.parmPrintDestination())]);
                // IsSuccess
                traceContextInfo.addEnd(['IsSuccess', docReportExecutionInfo.parmIsSuccess() ? 'true' : 'false']);
                // ErrorMsg
                traceContextInfo.addEnd(['ErrorMsg', docReportExecutionInfo.parmErrorMessage()]);
                // Template
                DocReportTemplateId templateId = printReportSettings.parmPrintDestination() == DocPrintDestination::GenerateDataSource ? '' : printReportSettings.parmTemplateId();
                if (templateId && DocParameters::find().EnableCbdDs)
                {
                    // Check if the template is ER-based
                    if (DocReportTable::findActiveReport(printReportSettings.parmReportId()).isTemplateERBased(templateId, printReportSettings.parmCompanyId(), printReportSettings.parmLanguageId()))
                    {
                        templateId += ' (ER-based)';
                    }
                }
                traceContextInfo.addEnd(['Template', templateId]);
            }
        }

        return traceContextInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTraceMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a trace message.
    /// </summary>
    /// <param name = "_message">A trace message</param>
    /// <returns>A trace message</returns>
    private DocMessage createTraceMessage(DocMessage _message)
    {
        _message += (_message ? ' | ' : '') + (srsReportDataContract ? srsReportDataContract.parmReportName() : "@DocentricAX:Unknown");

        return _message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the new instance of DocTraceContextSsrs class.
    /// </summary>
    /// <param name = "_srsReportRunPrinter">An instance of the SrsReportRunPrinter class</param>
    /// <param name = "_srsReportDataContract">An instance of the SrsReportDataContract class</param>
    protected void new(SrsReportRunPrinter _srsReportRunPrinter, SrsReportDataContract _srsReportDataContract)
    {
        srsReportRunPrinter = _srsReportRunPrinter;
        srsReportDataContract = _srsReportDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocTraceContextSsrs class.
    /// </summary>
    /// <param name = "_srsReportRunPrinter">An instance of the SrsReportRunPrinter class</param>
    /// <param name = "_srsReportDataContract">An instance of the SrsReportDataContract class</param>
    /// <returns>An instance of the DocTraceContextSsrs class</returns>
    public static DocTraceContextSsrs construct(SrsReportRunPrinter _srsReportRunPrinter, SrsReportDataContract _srsReportDataContract)
    {
        return new DocTraceContextSsrs(_srsReportRunPrinter, _srsReportDataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncludePrintingResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the flag indicating whether to include printing results or not.
    /// </summary>
    /// <param name = "_includePrintingResult">The flag indicating whether to include printing results or not</param>
    /// <returns>An instance of the DocTraceContextSsrs class</returns>
    public DocTraceContextSsrs setIncludePrintingResult(boolean _includePrintingResult)
    {
        this.includePrintingResult = _includePrintingResult;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTraceContextInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current instance of the DocTraceContextInfo class.
    /// </summary>
    /// <returns>An instance of the DocTraceContextInfo class</returns>
    public DocTraceContextInfo getTraceContextInfo()
    {
        return this.createTraceContextInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTraceMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a trace message.
    /// </summary>
    /// <param name = "_message">A trace message</param>
    /// <returns>A trace message</returns>
    public DocMessage getTraceMessage(DocMessage _message = '')
    {
        return this.createTraceMessage(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report parameters.
    /// </summary>
    /// <returns>The report parameters as string</returns>
    private str getReportParameters()
    {
        if (!reportParameters)
        {
            try
            {
                Map reportParameterMap = DocTraceContextSsrs::createReportParameterMap(srsReportDataContract);  // Map(str _parameterName, SrsReportParameter class instance)
                Map reportParameterStrValueMap = SrsReportRunUtil::getReportParamNameValuePairs(reportParameterMap);  // Map(reportName (str), reportValue (str))
                
                MapEnumerator reportParameterStrValueMapEnum = reportParameterStrValueMap.getEnumerator();
                while (reportParameterStrValueMapEnum.moveNext())
                {
                    str paramName = reportParameterStrValueMapEnum.currentKey();
                    str paramValueStr = reportParameterStrValueMapEnum.currentValue();
                    if (reportParameters == '')
                    {
                        reportParameters = strFmt('%1=%2', paramName, paramValueStr);
                    }
                    else
                    {
                        reportParameters = reportParameters + strFmt('; %1=%2', paramName, paramValueStr);
                    }
                }
            }
            catch
            {
                exceptionTextFallThrough();
            }
        }

        return reportParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportParameterMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report parameter map.
    /// </summary>
    /// <param name = "_srsReportDataContract">An instance of the SrsReportDataContract class</param>
    /// <returns>Report parameter map</returns>
    private static Map createReportParameterMap(SrsReportDataContract _srsReportDataContract)
    {
        Map reportParameterMap = new Map(Types::String, Types::Class);  // Map(str _parameterName, SrsReportParameter class instance)

        // Add RDL parameters.
        SrsReportRdlDataContract rdlContract = _srsReportDataContract.parmRdlContract();
        if (rdlContract != null)
        {
            SrsReportRunUtil::copyToReportParamMap(rdlContract.getParametersMap(), reportParameterMap);
        }
    
        // Add RDP parameters.
        if (_srsReportDataContract.parmReportName())
        {
            SrsReportRunRdlParser rdlParser = SrsReportRunRdlParser::construct(_srsReportDataContract.parmReportName());
            if (rdlParser != null)
            {
                rdlParser.parmLocalMode(true);
                rdlParser.parseRdl();
                Object rdpContract = _srsReportDataContract.parmRdpContract();
                if (rdpContract != null)
                {
                    Map rdpReportParameterMap = rdlParser.getRdpReportParamsKeyedByFieldAlias();  // Map(str _parameterName, SrsReportParameter class instance)
                    SrsReportRunUtil::setParamValuesFromRdpContract(rdpContract, rdpReportParameterMap);
                    SrsReportRunUtil::copyToReportParamMap(rdpReportParameterMap, reportParameterMap);
                }
            }
        }

        return reportParameterMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print destination as string.
    /// </summary>
    /// <param name = "_pd">Print destination</param>
    /// <returns>A print destination as string</returns>
    private static str getPrintDestinationStr(DocPrintDestination _pd)
    {
        switch (_pd)
        {
            case DocPrintDestination::Archive:
                return 'Archive';
            case DocPrintDestination::Email:
                return 'Email';
            case DocPrintDestination::File:
                return 'File';
            case DocPrintDestination::GenerateDataSource:
                return 'GenerateDS';
            case DocPrintDestination::Memory:
                return 'Memory';
            case DocPrintDestination::Printer:
                return 'Printer';
            case DocPrintDestination::Screen:
                return 'Screen';
        }
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>