<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWorkflowCommentWriter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class for retrieving and formatting workflow comments.
/// </summary>
public class DocWorkflowCommentWriter
{
    private boolean includeCommentUser = true;
    private boolean includeCommentDateTime = true;
    private boolean includeTrackingMessage = false;
    
    protected WorkflowApprovalWorkItemHistory wfComments;
    protected TableId tableId;
    protected RecId recId;
    protected LanguageId languageId;
    protected UserId userId;

    public const str CommaSep = ', ';
    public const str ColonSep = ': ';
    public const str ShiftRightSep = ' >> ';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Class constructor.
    /// </summary>
    /// <param name = "_tableId">The table that contains the record involved in the WF.</param>
    /// <param name = "_recId">The record for which the workflow history needs to be retrieved.</param>
    /// <param name = "_languageId">The language ID to be used for the localization of messages.</param>
    /// <param name = "_accessUserId">The user ID which has access to the WF comments. If empty, no security check will be done.</param>
    protected void new(TableId _tableId, RecId _recId, LanguageId _languageId, UserId _accessUserId)
    {
        tableId = _tableId;
        recId = _recId;
        languageId = _languageId;
        userId = _accessUserId;

        wfComments = this.getHistoryByDocumentRecId(tableId2Name(tableId), recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default class constructor.
    /// </summary>
    /// <param name = "_tableId">The table that contains the record involved in the WF.</param>
    /// <param name = "_recId">The record for which the workflow history needs to be retrieved.</param>
    /// <param name = "_languageId">The language ID to be used for the localization of messages.</param>
    /// <param name = "_accessUserId">The user ID which has access to the WF comments. If omitted, no security check will be done.</param>
    /// <returns>A new instance of the DocWorkflowCommentWriter class.</returns>
    public static DocWorkflowCommentWriter constructDefault(TableId _tableId, RecId _recId, LanguageId _languageId = CompanyInfo::languageId(), UserId _accessUserId = '')
    {
        return new DocWorkflowCommentWriter(_tableId, _recId, _languageId, _accessUserId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCommentToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Format the provided workflow comment as a string depending on the properties:
    /// parmIncludeCommentUser(), parmIncludeCommentDateTime() and parmIncludeTrackingMessage().
    /// If all of these properties are set to true, the formatted value of the given comment will be:
    /// [User], [CommentDateTime]: [Comment] >> [Localized tracking message]
    /// </summary>
    /// <param name = "_wfComment">The workflow comment to be formatted.</param>
    /// <returns>The formatted workflow comment.</returns>
    public str workflowCommentToString(WorkflowApprovalWorkItemComment _wfComment)
    {
        str workflowCommentStr;

        workflowCommentStr = includeCommentUser ? _wfComment.parmUser() : '';

        if (includeCommentDateTime)
        {
            // If both the comment user and comment date are to be included in the message, add a comma separator between them.
            workflowCommentStr += includeCommentUser ? CommaSep : '';

            workflowCommentStr += DocGlobalHelper::formatData(_wfComment.parmDateTime(), DocGlobalHelper::getCultureInfo(languageId), DocApplyTimeZone::CompanyTimeZone);
        }
            
        // Add a colon separator before the workflow comment if the user and/or date information have been previously included.
        workflowCommentStr += workflowCommentStr ? ColonSep : '';

        // Add the workflow comment.
        workflowCommentStr += _wfComment.parmComment();
        
        if (includeTrackingMessage)
        {
            // If the tracking message is to be included, add a shift right separator between the comment and the tracking message.
            workflowCommentStr += ShiftRightSep;

            // The tracking message included is either the original or the localized one, depending on the language ID set.
            workflowCommentStr += _wfComment.parmActionLabel();
        }

        return workflowCommentStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstWorkflowCommentToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first workflow comment from the workflow work item history.
    /// </summary>
    /// <returns>The first workflow comment from the workflow work item history as a string value.</returns>
    public str firstWorkflowCommentToString()
    {
        WorkflowApprovalWorkItemComment wfFirstComment = this.getWfFirstComment();

        return wfFirstComment ? this.workflowCommentToString(wfFirstComment) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWfFirstComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first workflow comment from the workflow work item history.
    /// </summary>
    /// <returns>The first workflow comment from the workflow work item history.</returns>
    public WorkflowApprovalWorkItemComment getWfFirstComment()
    {
        ListEnumerator                      workflowCommentsList;
        WorkflowApprovalWorkItemComment     workflowComment;

        if (!wfComments || wfComments.parmComments().empty())
        {
            return null;
        }

        workflowCommentsList = wfComments.parmComments().getEnumerator();

        while (workflowCommentsList.moveNext())
        {
            workflowComment = workflowCommentsList.current();
        }

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastWorkflowCommentToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the last workflow comment from the workflow work item history.
    /// </summary>
    /// <returns>The last workflow comment from the workflow work item history as a string value.</returns>
    public str lastWorkflowCommentToString()
    {
        WorkflowApprovalWorkItemComment wfLastComment = this.getWfLastComment();
        
        return wfLastComment ? this.workflowCommentToString(wfLastComment) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWfLastComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the last workflow comment from the workflow work item history.
    /// </summary>
    /// <returns>The last workflow comment from the workflow work item history.</returns>
    public WorkflowApprovalWorkItemComment getWfLastComment()
    {
        ListEnumerator  workflowCommentsList;
        
        if (!wfComments || wfComments.parmComments().empty())
        {
            return null;
        }

        workflowCommentsList = wfComments.parmComments().getEnumerator();
        
        workflowCommentsList.moveNext();

        return workflowCommentsList.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allWorkflowCommentsToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all the workflow comments from the workflow work item history.
    /// </summary>
    /// <returns>A combined string of all the workflow comments from the workflow work item history.</returns>
    public str allWorkflowCommentsToString()
    {
        ListEnumerator  workflowCommentsList;
        str             mergedWorkflowComments;
        str             workflowCommentStr;

        if (!wfComments || wfComments.parmComments().empty())
        {
            return '';
        }

        workflowCommentsList = wfComments.parmComments().getEnumerator();
        
        while (workflowCommentsList.moveNext())
        {
            // Format the current workflow comment.
            workflowCommentStr = this.workflowCommentToString(workflowCommentsList.current());
            
            workflowCommentStr += mergedWorkflowComments ? '\n' : '';

            // Add the workflow comment in front of the previously processed comments (workflow work item history is in DESC order).
            mergedWorkflowComments = strFmt('%1%2', workflowCommentStr, mergedWorkflowComments);
        }

        return mergedWorkflowComments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryByDocumentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the workflow item history given the document recId and table name. Copy of the same method from the SysWorkflowApprovalWorkItemService class.
    /// </summary>
    /// <param name="_tableName">The name of the table.</param>
    /// <param name="_recId">The RecId of the document.</param>
    /// <returns>A <c>WorkflowAprovalWorkItemHistory</c> object that contains information about work item history.</returns>
    protected WorkflowApprovalWorkItemHistory getHistoryByDocumentRecId(TableName _tableName, RecId _recId)
    {
        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        select firstonly RecId, CorrelationId from workflowTrackingStatusTable
            order by CreatedDateTime desc where
                workflowTrackingStatusTable.ContextRecId == _recId &&
                workflowTrackingStatusTable.ContextTableId == tableName2id(_tableName);

        if (!workflowTrackingStatusTable.RecId)
        {
            SysDictTable currentTable = new SysDictTable(tableName2id(_tableName));
            TableId parentTableId;
            boolean isFound = false;

            while (currentTable.extends())
            {
                parentTableId = currentTable.extends();

                select firstonly RecId, CorrelationId from workflowTrackingStatusTable
                    order by CreatedDateTime desc where
                        workflowTrackingStatusTable.ContextRecId == _recId &&
                        workflowTrackingStatusTable.ContextTableId == parentTableId;

                if (workflowTrackingStatusTable.RecId)
                {
                    isFound = true;    
                    break;
                }

                currentTable = new SysDictTable(parentTableId);
            }

            if (!isFound)
            {
                DocGlobalHelper::handleException(funcName(), strFmt('The WorkflowTrackingStatusTable record not found for table %1 (or any of its parent tables) and RecId %2.', _tableName, _recId));
            }
        }

        return this.getHistory(workflowTrackingStatusTable.CorrelationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the workflow item history. Copied and modified from the same method in the SysWorkflowApprovalWorkItemService class.
    /// </summary>
    /// <param name="_id">Item correlation Id.</param>
    /// <returns><c>WorkflowAprovalWorkItemHistory</c> object that contains information about work item history.</returns>
    protected WorkflowApprovalWorkItemHistory getHistory(WorkflowCorrelationId _id)
    {
        List                                    comments;
        WorkflowApprovalWorkItemComment         workItemComment;
        WorkflowApprovalWorkItemHistory         workItemHistory;
        WorkflowTrackingTable                   trackingRecord;
        WorkflowTrackingStatusTable             trackingStatus;
        WorkflowTrackingCommentTable            trackingComment;
        DirPersonInfoService                    personInfoService;
        DirPersonInfoData                       personInfoData;

        workItemHistory = new WorkflowApprovalWorkItemHistory();
        workItemHistory.parmCorrelationId(_id);
        
        comments = new List(Types::Class);
        personInfoService = new DirPersonInfoService();

        // Validate if the user has access to the workflow document.
        if (this.hasAccessToWorkItem(_id))
        {
            while select User, TrackingId, TrackingContext, TrackingType from trackingRecord order by trackingRecord.CreatedDateTime desc where
               ((trackingRecord.TrackingContext == WorkflowTrackingContext::WorkItem &&
                  trackingRecord.TrackingType != WorkflowTrackingType::Creation) ||
                ((trackingRecord.TrackingType == WorkflowTrackingType::Submission ||
                  trackingRecord.TrackingType == WorkflowTrackingType::SubmitOnBehalf ||
                  trackingRecord.TrackingType == WorkflowTrackingType::Cancellation ||
                  trackingRecord.TrackingType == WorkflowTrackingType::Resume) &&
                 trackingRecord.TrackingContext == WorkflowTrackingContext::Workflow) ||
                 (trackingRecord.TrackingType == WorkflowTrackingType::Resubmission) ||
                 (trackingRecord.TrackingContext == WorkflowTrackingContext::LineItemWorkflow &&
                  trackingRecord.TrackingType == WorkflowTrackingType::Creation))
            join Comment, CreatedDateTime, TrackingId, MessageLabelId from trackingComment
                where trackingComment.TrackingId == trackingRecord.TrackingId
            exists join trackingStatus
                where trackingStatus.RecId == trackingRecord.WorkflowTrackingStatusTable &&
                      trackingStatus.CorrelationId == _id
            {
                workItemComment = new WorkflowApprovalWorkItemComment();
                workItemComment.parmComment(trackingComment.Comment);
                workItemComment.parmUserId(trackingRecord.User);
                workItemComment.parmDateTime(trackingComment.CreatedDateTime);
                // <Docentric>
                workItemComment.parmActionLabel(this.getLocalizedTrackingMessage(trackingComment));
                // </Docentric>
                workItemComment.parmWorkflowTrackingType(trackingRecord.TrackingType);
                personInfoData = personInfoService.getPersonInfoFromUserId(trackingRecord.User);
                workItemComment.parmCommunicatorSignIn(personInfoData.parmPersonCommunicatorSignIn());
                workItemComment.parmUser(personInfoData.parmPersonName());
                comments.addEnd(workItemComment);
            }
        }
        
        workItemHistory.parmComments(comments);
        
        return workItemHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessToWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the user has access to the workflow work item. Copy of the same method from the SysWorkflowApprovalWorkItemService class.
    /// </summary>
    /// <param name="_correlationId"><c>WorkflowCorrelationId</c> identifier of the workflow record.</param>
    /// <returns>true if the user has access to the workflow work item; otherwise, false.</returns>
    private boolean hasAccessToWorkItem(WorkflowCorrelationId _correlationId)
    {
        WorkflowWorkItemTable       workItemTable;
        WorkflowTrackingStatusTable trackingStatusTable;
        WorkflowTrackingTable       trackingTable;

        // If the user is not provided, no security check will be done.
        if (userId == '')
        {
            return true;
        }

        // Check for pending approvals first.
        select firstOnly RecId from workItemTable
            where workItemTable.CorrelationId == _correlationId
                && workItemTable.UserId == userId;

        if (workItemTable.RecId)
        {
            return true;
        }

        // Then try recent approvals.
        select firstOnly RecId from trackingStatusTable
            where trackingStatusTable.CorrelationId == _correlationId
            exists join trackingTable
                where trackingTable.WorkflowTrackingStatusTable == trackingStatusTable.RecId
                    && trackingTable.User == userId;

        if (trackingStatusTable.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedTrackingMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Translates the tracking message according to the _languageId parameter. Copied and modified from the same method in the WorkflowTrackingCommentTable table.
    /// </summary>
    /// <param name = "_wfTrackingComment">The current workflow tracking comment record.</param>
    /// <returns>The translated tracking message.</returns>
    protected str getLocalizedTrackingMessage(WorkflowTrackingCommentTable _wfTrackingComment)
    {
        WorkflowTrackingArgumentTable argumentTable;
        str trackingMessageArgs[];
        str message;
        str token;
        utcdatetime defaultDateTime;
        int i,j;
        SysDictType sysDictType;
        #Workflow
        ;

        if (_wfTrackingComment.MessageLabelId)
        {
            i = 0;
            while select * from argumentTable order by WorkflowTrackingCommentTable, Sequence where argumentTable.WorkflowTrackingCommentTable == _wfTrackingComment.RecId
            {
                i++;
                if (defaultDateTime != argumentTable.TrackingDate)
                {
                    trackingMessageArgs[i] = datetime2str(DateTimeUtil::applyTimeZoneOffset(argumentTable.TrackingDate, DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll);
                }
                else
                {
                    sysDictType = new SysDictType(extendedTypeName2Id(argumentTable.DataType));
                    if (sysDictType &&
                       (((sysDictType.id() == extendedTypeNum(userId)) || sysDictType.isExtending(extendedTypeNum(userId))) ||
                        ((sysDictType.id() == extendedTypeNum(createdBy)) || sysDictType.isExtending(extendedTypeNum(createdBy))) ||
                        ((sysDictType.id() == extendedTypeNum(modifiedBy)) || sysDictType.isExtending(extendedTypeNum(modifiedBy))) ||
                        ((sysDictType.id() == extendedTypeNum(WorkflowUser)) || sysDictType.isExtending(extendedTypeNum(WorkflowUser)))))
                    {
                        trackingMessageArgs[i] = SysWorkflowHelper::getDirPartyNameFromUserId(argumentTable.Value);
                    }
                    else
                    {
                        trackingMessageArgs[i] = argumentTable.Value;
                    }
                }
            }
            // <Docentric>
            message = SysLabel::labelId2String(_wfTrackingComment.MessageLabelId, languageId);
            // </Docentric>
            for (j = 1; j <= i; j++)
            {
                token = '%'+ int2str(j);
                message = Global::strReplace(message, token, trackingMessageArgs[j]);
            }
        }
        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWfComments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list with all the comments from the workflow history for the current workflow instance.
    /// </summary>
    /// <returns>All the workflow history comments for the current workflow instance.</returns>
    public WorkflowApprovalWorkItemHistory getWfComments()
    {
        return wfComments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCommentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/set if the comment user information is included in the output message.
    /// </summary>
    /// <param name = "_includeCommentUser">Should the user information be included in the output message?</param>
    /// <returns>Is the comment user included in the message.</returns>
    public boolean parmIncludeCommentUser(boolean _includeCommentUser = includeCommentUser)
    {
        includeCommentUser = _includeCommentUser;

        return includeCommentUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCommentDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/set if the comment date and time information is included in the output message.
    /// </summary>
    /// <param name = "_includeCommentDateTime">Should the date/time information be included in the output message?</param>
    /// <returns>Is the comment date and time included in the message.</returns>
    public boolean parmIncludeCommentDateTime(boolean _includeCommentDateTime = includeCommentDateTime)
    {
        includeCommentDateTime = _includeCommentDateTime;

        return includeCommentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeTrackingMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/set if the comment tracking message is included in the output message.
    /// </summary>
    /// <param name = "_includeTrackingMessage">Should the tracking message be included in the output message?</param>
    /// <returns>Is the comment tracking message included in the output message.</returns>
    public boolean parmIncludeTrackingMessage(boolean _includeTrackingMessage = includeTrackingMessage)
    {
        includeTrackingMessage = _includeTrackingMessage;

        return includeTrackingMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the source document.
    /// </summary>
    /// <returns>The document table ID.</returns>
    public TableId getDocumentTableId()
    {
        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID for the source document.
    /// </summary>
    /// <returns>The document record ID.</returns>
    public RecId getDocumentRecId()
    {
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the language ID that is used for localization of messages.
    /// </summary>
    /// <returns>Language ID</returns>
    public LanguageId getLanguageId()
    {
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the User ID, which has access to the WF comments. If empty, no security check is done.
    /// </summary>
    /// <returns>User ID</returns>
    public UserId getUserId()
    {
        return userId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>