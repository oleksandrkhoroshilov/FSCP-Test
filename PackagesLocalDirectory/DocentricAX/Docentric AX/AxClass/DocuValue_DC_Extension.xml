<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocuValue_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.@Client.Instrumentation;
using Microsoft.Dynamics.AX.Framework.FileManagement;

/// <summary>
/// The class DocuValue_DC_Extension is an extension of the table DocuValue.
/// </summary>
[ExtensionOf(tableStr(DocuValue))]
final class DocuValue_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteWithImmediateFileDeletion_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the DocuValue record, along with any stored documents. The attached documents are deleted immediately.
    /// </summary>
    /// <param name="_useCreatedByUser">
    /// If true, the storage provider should be retrieved using the user who created the record, not the current user.
    /// </param>
    /// <remarks>
    /// This method does the same as the delete method in the DocuValue table with two exceptions:
    /// - the attached files are deleted immediately (the standard method deletes the attached files with a delay, using the batch job)
    /// - does not support the deffered deletion of attached files (the standard method supports the deffered deletion of the attached files if the option is enabled)
    /// </remarks>
    public void deleteWithImmediateFileDeletion_DC(boolean _useCreatedByUser = false)
    {
        IDocumentStorageProvider storageProvider;
        if (_useCreatedByUser)
        {
            UserInfo uInfo = xUserInfo::find(false, this.CreatedBy);
            storageProvider = this.getStorageProvider(uInfo.RecId);
        }
        else
        {
            storageProvider = this.getStorageProvider(-1);
        }

        DictTable dtDocuValue = new DictTable(tableNum(DocuValue));
        DictTable dtDocuDeletedValue = new DictTable(tableNum(DocuDeletedValue));
        DictTable dtDocuDeletedFile = new DictTable(tableNum(DocuDeletedFile));

        if (storageProvider == null)
        {
            DocumentManagementEventSource::EventWriteDocuValueUnableToDeleteFile(this.RecId, 'StorageProvider Null');
        }
        else
        {
            DocumentLocation location = this.createLocation();
            if (location.AccessUri == null)
            {
                DocumentManagementEventSource::EventWriteDocuValueUnableToDeleteFile(this.RecId, 'AccessInformation Null');
            }
            else if (dtDocuValue.callStatic(tableStaticMethodStr(DocuValue, fileExists), this.StorageProviderId, this.AccessInformation, this.FileId, this.RecId))
            {
                DocumentManagementEventSource::EventWriteDocuValueUnableToDeleteFile(this.RecId, 'Duplicate DocuValue File');
            }
            else if (dtDocuDeletedValue.callStatic(identifierStr(fileExists), this.StorageProviderId, this.AccessInformation, this.FileId))
            {
                DocumentManagementEventSource::EventWriteDocuValueUnableToDeleteFile(this.RecId, 'Duplicate DocuDeletedValue File');
            }
            else if (dtDocuDeletedFile.callStatic(identifierStr(fileExists), this.StorageProviderId, this.AccessInformation))
            {
                DocumentManagementEventSource::EventWriteDocuValueUnableToDeleteFile(this.RecId, 'Duplicate DocuDeletedFile File');
            }
            else if (storageProvider.ProviderId <= 0)
            {
                DocumentManagementEventSource::EventWriteDocuValueUnableToDeleteFile(this.RecId, strFmt('StorageProviderId %1', storageProvider.ProviderId));
            }
            else
            {
                // Delete the attached file
                storageProvider.DeleteFile(location);

                if (DocuSharedParameters::isDocuHistoryEnabled())
                {
                    // Because the file is being permanently deleted, alert all
                    // connected records (DocuRef, DocuDeletedRef, DocuHistory[latest]).
                    DocuHistory::insertFileDeletionHistory(this.RecId, false);
                }
            }
        }

        DocumentManagementEventSource::EventWriteValueDeleted(
                guid2StrWithoutBraces(this.FileId),
                this.FileType,
                enum2Symbol(enumNum(DocuValueType), this.Type),
                this.StorageProviderId,
                storageProvider ? (storageProvider as System.Object).GetType().FullName : null,
                this.RecId);

        // Delete the DocuValue record
        this.doDelete();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>