<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocRenderingSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

public class DocRenderingSettings
{
    LanguageId   renderingLanguageId;
    str          documentTitle;
    str          documentAuthor;
    str          documentSubject;
    str          documentKeywords;
    DocFileFormat                fileFormat;
    IDocumentConverter           customDocumentConverter = null;    // Custom Word-to-target-output-format converter
    IDocSaveOptionsConfigurator  saveOptionsConfigurator = null;    // Modifier of the Docentric Engine's default Save options

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intitializes the instance of the DocRenderingSettings class.
    /// </summary>
    public void new()
    {
        renderingLanguageId = currentUserLanguage();
        documentAuthor = curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the title property for the generated PDF.
    /// </summary>
    /// <param name = "_documentTitle">Title</param>
    /// <returns>Title</returns>
    public str parmDocumentTitle(str _documentTitle = documentTitle)
    {
        documentTitle = _documentTitle;
        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentAuthor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the author property for the generated PDF.
    /// </summary>
    /// <param name = "_documentAuthor">Author</param>
    /// <returns>Author</returns>
    public str parmDocumentAuthor(str _documentAuthor = documentAuthor)
    {
        documentAuthor = _documentAuthor;
        return documentAuthor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the subject property for the generated PDF.
    /// </summary>
    /// <param name = "_documentSubject">Subject</param>
    /// <returns>Subject</returns>
    public str parmDocumentSubject(str _documentSubject = documentSubject)
    {
        documentSubject = _documentSubject;
        return documentSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentKeywords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the keywords property for the generated PDF.
    /// </summary>
    /// <param name = "_documentKeywords">Keywords</param>
    /// <returns>Keywords</returns>
    public str parmDocumentKeywords(str _documentKeywords = documentKeywords)
    {
        documentKeywords = _documentKeywords;
        return documentKeywords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRenderingLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the rendering language.
    /// </summary>
    /// <param name = "_renderingLanguageId">Language ID</param>
    /// <returns>language ID</returns>
    public str parmRenderingLanguageId(str _renderingLanguageId = renderingLanguageId)
    {
        renderingLanguageId = _renderingLanguageId;
        return renderingLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the target output file format.
    /// </summary>
    /// <param name = "_fileFormat">Output file format</param>
    /// <returns>language ID</returns>
    public DocFileFormat parmFileFormat(DocFileFormat _fileFormat = fileFormat)
    {
        fileFormat = _fileFormat;
        return fileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomDocumentConverter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the custom Word-to-target-output-format conversion class instance.
    /// </summary>
    /// <param name = "_customDocumentConverter">Custom converter. Leave null to use Docentric Converter.</param>
    /// <returns>Custom conversion engine</returns>
    public IDocumentConverter parmCustomDocumentConverter(IDocumentConverter _customDocumentConverter = customDocumentConverter)
    {
        customDocumentConverter = _customDocumentConverter;
        return customDocumentConverter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveOptionsConfigurator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets a configurator class instance that modifies the default Save options for Docentric Engine.
    /// </summary>
    /// <param name = "_saveOptionsConfigurator">Leave null to use the Docentric Engine's default Save options.</param>
    /// <returns>Save options configurator</returns>
    public IDocSaveOptionsConfigurator parmSaveOptionsConfigurator(IDocSaveOptionsConfigurator _saveOptionsConfigurator = saveOptionsConfigurator)
    {
        saveOptionsConfigurator = _saveOptionsConfigurator;
        return saveOptionsConfigurator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPrintReportSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocRenderingSettings class.
    /// </summary>
    /// <param name = "_printReportSettings">A DocPrintReportSettings object</param>
    /// <param name = "_fileFormat">Output file format</param>
    /// <returns>An instance of DocRenderingSettings class</returns>
    public static DocRenderingSettings constructFromPrintReportSettings(DocPrintReportSettings _printReportSettings, DocFileFormat _fileFormat)
    {
        DocRenderingSettings renderingSettings = new DocRenderingSettings();

        if (_printReportSettings)
        {
            renderingSettings.parmRenderingLanguageId(_printReportSettings.parmLanguageId());
            renderingSettings.parmDocumentTitle(_printReportSettings.parmDocumentTitle() == '' ? _printReportSettings.getReportCaptionOrId() : _printReportSettings.parmDocumentTitle());
            renderingSettings.parmDocumentAuthor(_printReportSettings.parmDocumentAuthor() == '' ? renderingSettings.parmDocumentAuthor() : _printReportSettings.parmDocumentAuthor());
            renderingSettings.parmDocumentSubject(_printReportSettings.parmDocumentSubject());
            renderingSettings.parmDocumentKeywords(_printReportSettings.parmDocumentKeywords());
        }
        
        renderingSettings.parmFileFormat(_fileFormat);

        // Enable a subscriber to use a custom document converter instead of Docentric Converter.
        renderingSettings.setCustomDocumentConverter(_printReportSettings);

        // Enable a subscriber to modify the default Save options used by Docentric Engine.
        renderingSettings.setSaveOptionsConfigurator(_printReportSettings);

        return renderingSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customDocumentConverterDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for changing the default Docentric Word-to-target-output-format converter.
    /// </summary>
    /// <param name = "_renderingSettings">Rendering settings</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <remarks>Set a custom document converter via the parmCustomDocumentConverter() method by using the report context information and output file format.</remarks>
    delegate void customDocumentConverterDelegate(DocRenderingSettings _renderingSettings, DocPrintReportSettings _printReportSettings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomDocumentConverter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for changing the default Docentric Word-to-target-output-format converter.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <remarks>Set a custom document converter via the parmCustomDocumentConverter() method by using the report context information and output file format.</remarks>
    public void setCustomDocumentConverter(DocPrintReportSettings _printReportSettings)
    {
        try
        {
            this.customDocumentConverterDelegate(this, _printReportSettings);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocRenderingSettings, customDocumentConverterDelegate)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocRenderingSettings, customDocumentConverterDelegate)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOptionsConfiguratorDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for modifying the Docentric's Engine default Save options, e.g. DocTiffSaveOptions.DpiX/DpiY.
    /// </summary>
    /// <param name = "_renderingSettings">Rendering settings</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <remarks>Set a Save option configurator via the parmSaveOptionsConfigurator() method by using the report context information and output file format.</remarks>
    delegate void saveOptionsConfiguratorDelegate(DocRenderingSettings _renderingSettings, DocPrintReportSettings _printReportSettings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSaveOptionsConfigurator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for modifying the Docentric's Engine default Save options, e.g. DocTiffSaveOptions.DpiX/DpiY.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <remarks>Set a Save option configurator via the parmSaveOptionsConfigurator() method by using the report context information and output file format.</remarks>
    public void setSaveOptionsConfigurator(DocPrintReportSettings _printReportSettings)
    {
        try
        {
            this.saveOptionsConfiguratorDelegate(this, _printReportSettings);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocRenderingSettings, saveOptionsConfiguratorDelegate)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocRenderingSettings, saveOptionsConfiguratorDelegate)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>