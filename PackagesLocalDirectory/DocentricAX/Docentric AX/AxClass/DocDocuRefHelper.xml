<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDocuRefHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocDocuRefHelper class is a helper class for managing attachments.
/// </summary>
public class DocDocuRefHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocuTypeSharePointUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint URL for the document type where the file destination is SharePoint.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record</param>
    /// <returns>The SharePoint URL or empty string</returns>
    public static str getDocuTypeSharePointUrl(DocuRef _docuRef)
    {
        if (_docuRef)
        {
            DocuType docuType = _docuRef.docuType();
            if (docuType)
            {
                return docuType.sharePointUrl();
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocuRefAttachmentPublicUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a public URL that points at the provided document reference.
    /// </summary>
    /// <param name="_docuRef">The DocuRef record</param>
    /// <returns>An URL that can be used to navigate to the attached URL or download the attached file.</returns>
    public static str getDocuRefAttachmentPublicUrl(DocuRef _docuRef)
    {
        str url = DocumentManagement::getAttachmentPublicUrl(_docuRef);
        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToDocuRefAttachmentUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the public URL that points at the provided document reference.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record</param>
    /// <param name = "_openInNewTab">Should the file be opened in a new tab</param>
    /// <param name = "_showExitWarning">Should the exit warning be displayed</param>
    public static void navigateToDocuRefAttachmentUrl(DocuRef _docuRef, boolean _openInNewTab = false, boolean _showExitWarning = false)
    {
        str url = DocDocuRefHelper::getDocuRefAttachmentPublicUrl(_docuRef);
        DocGlobalHelper::navigateToUrl(url, _openInNewTab, _showExitWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachmentContentAsMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attachment context for the specified DocuRef record as memory stream.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record</param>
    /// <returns>The attachment context as memory stream</returns>
    public static System.IO.MemoryStream getAttachmentContentAsMemoryStream(DocuRef _docuRef)
    {
        System.IO.MemoryStream memoryStream;

        if (!_docuRef)
        {
            return null;
        }
        
        try
        {
            using (System.IO.Stream fileStream = DocumentManagement::getAttachmentStream(_docuRef))
            {
                if (fileStream == null)
                {
                    throw Exception::Error;
                }

                memoryStream = new System.IO.MemoryStream();
                fileStream.CopyTo(memoryStream);
                memoryStream.Position = 0;
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(),
                strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", _docuRef.Name, _docuRef.RecId, _docuRef.refTablename()));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", _docuRef.Name, _docuRef.RecId, _docuRef.refTablename()));
        }

        return memoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachmentContentAsContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attachment context for the specified DocuRef record as container.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record</param>
    /// <returns>The attachment context as container</returns>
    public static container getAttachmentContentAsContainer(DocuRef _docuRef)
    {
        if (!_docuRef)
        {
            return conNull();
        }
        
        try
        {
            return DocumentManagement::getAttachmentAsContainer(_docuRef);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(),
                strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", _docuRef.Name, _docuRef.RecId, _docuRef.refTablename()));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", _docuRef.Name, _docuRef.RecId, _docuRef.refTablename()));
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocuRef_SaveToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocuRef record for the specified referenced record, description and filename.
    /// </summary>
    /// <param name = "_attachmentRecord">A referenced record</param>
    /// <param name = "_docuRefName">The attachment description</param>
    /// <param name = "_docuRefFilename">The attachment filename</param>
    /// <returns>A record in the DocuRef table; otherwise, an empty record</returns>
    public static DocuRef findDocuRef_SaveToAttachments(Common _attachmentRecord, str _docuRefName, str _docuRefFilename)
    {
        return DocDocuRefHelper::findDocuRefWithNameAndFilename(
            _attachmentRecord.TableId,
            _attachmentRecord.RecId,
            _attachmentRecord.DataAreaId,
            _docuRefName, _docuRefFilename);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocuRefWithNameAndFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocuRef record for the specified referenced record, description and filename.
    /// </summary>
    /// <param name = "_docuRefTableId">Referenced table Id</param>
    /// <param name = "_docuRefRecId">Referenced record Id</param>
    /// <param name = "_docuRefDataAreaId">Referenced data area Id</param>
    /// <param name = "_docuRefName">The attachment description</param>
    /// <param name = "_docuRefFilename">The attachment filename</param>
    /// <returns>A record in the DocuRef table; otherwise, an empty record</returns>
    public static DocuRef findDocuRefWithNameAndFilename(TableId _docuRefTableId, RefRecId _docuRefRecId, DataAreaId _docuRefDataAreaId, str _docuRefName, str _docuRefFilename)
    {
        DocuRef docuRef;
        DocuValue docuValue;

        str name, ext;
        [name, ext] = Docu::splitFilename(_docuRefFilename);
       
        select firstonly docuRef
        order by docuRef.CreatedDateTime desc
        where docuRef.RefCompanyId == _docuRefDataAreaId &&
              docuRef.RefTableId == _docuRefTableId &&
              docuRef.RefRecId == _docuRefRecId &&
              docuRef.Name == _docuRefName
        exists join docuValue
        where docuRef.ValueRecId == docuValue.RecId &&
              docuValue.FileName == name &&
              docuValue.FileType == ext;

        return docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceDocuValueForDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reattaches a new file to the existing DocuRef record.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record</param>
    /// <param name = "_newDocuTypeId">A document type Id for a new file</param>
    /// <param name = "_newFileMemoryStream">A context for a new file as memory stream</param>
    /// <param name = "_newFileName">A file name for a new file</param>
    /// <param name = "_newFileContentType">A file context type for a new file</param>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    public static void replaceDocuValueForDocuRef(DocuRef _docuRef, DocuTypeId _newDocuTypeId,
                                                  System.IO.MemoryStream _newFileMemoryStream, str _newFileName, str _newFileContentType = '',
                                                  DocPrintReportSettings _printReportSettings = null)
    {
        ttsbegin;

        // Updating of DocuValue will update the parent DocuRef too, so we have to make DocuRef updatable.
        _docuRef.selectForUpdate(true);

        if (!_docuRef.existAnotherValue())
        {
            DocuValue docuValue = DocuValue::find(_docuRef.ValueRecId, true);
            
            // If DocuValue record is URL type, we can't delete it since it
            // represents an independent document file.
            if (docuValue.RecId && docuValue.Type != DocuValueType::URL)
            {
                DocuType docuType = _docuRef.docuType();
                if (docuType.FilePlace == DocuFilePlace::Archive || docuType.FilePlace == DocuFilePlace::SharePoint)
                {
                    // Delete DocuValue on behalf of the user which inserted it in the first place.
                    // (This is only important for SharePoint)
                    docuValue.deleteWithImmediateFileDeletion_DC(true);
                }
            }
        }

        // Update Document type if needed.
        if (_newDocuTypeId != '' && _docuRef.TypeId != _newDocuTypeId)
        {
            _docuRef.TypeId = _newDocuTypeId;
            _docuRef.doUpdate();
        }

        // Attach the new file.
        DocuActionFile act = _docuRef.docuAction();

        // Provide the DocuAction class with the report metadata.
        if (_printReportSettings)
        {
            DocDocuActionReportInfoInterface actWithMetadata = act as DocDocuActionReportInfoInterface;
            if (actWithMetadata != null)
            {
                actWithMetadata.setPrintReportSettings(_printReportSettings);
            }
        }
        
        // Attach the file using the corresponding docuAction class.
        if (!_newFileContentType)
        {
            _newFileContentType = DocFileMngHelper::getMimeType(_newFileName);
        }
        _newFileMemoryStream.Position = 0;
        
        boolean isAttached = act.attachFile(_docuRef, _newFileName, _newFileContentType, _newFileMemoryStream);
        if (!isAttached)
        {
            throw Exception::Error;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reattaches a new file to the existing DocuRef record.
    /// </summary>
    /// <param name = "_docuRef">The DocuRef record</param>
    /// <param name = "_newFileMemoryStream">A context for a new file as memory stream</param>
    /// <param name = "_newFileName">A file name for a new file</param>
    /// <param name = "_newFileContentType">A file context type for a new file</param>
    /// <param name = "_newDocuTypeId">A document type Id for a new file</param>
    /// <param name = "_newNotes">Notes for a new file</param>
    /// <param name = "_newDocumentRestriction">A document restriction for a new file</param>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    /// <param name = "_userId">User Id</param>
    /// <param name = "_filePrintDestSettings">An instance of the DocPrintDestSettingsFile class</param>
    /// <returns>True if a new file was successfully reattached; otherwise false</returns>
    public static boolean updateDocuRef(DocuRef _docuRef,
                                        System.IO.Stream _newFileMemoryStream, str _newFileName, str _newFileContentType = '',
                                        DocuTypeId _newDocuTypeId = '',
                                        str _newNotes = '', DocuRestriction _newDocumentRestriction = DocuRestriction::Internal,
                                        DocPrintReportSettings _printReportSettings = null, str _userId = curUserId(),
                                        DocPrintDestSettingsFile _filePrintDestSettings = null)
    {
        boolean isUpdated = false;

        try
        {
            ttsbegin;
            
            // Update the file content and docuType.
            DocDocuRefHelper::replaceDocuValueForDocuRef(_docuRef, _newDocuTypeId, _newFileMemoryStream, _newFileName, _newFileContentType, _printReportSettings);
                                    
            _docuRef.selectForUpdate(true);
            
            // Update Notes and Restriction.
            _docuRef.Notes = _newNotes;
            _docuRef.Restriction = _newDocumentRestriction;

            // Update CategoryId, Tags, LanguageId, ActiveFrom and ActiveTo.
            _docuRef.CategoryId_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsCategory() : '';
            _docuRef.Tags_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsTags() : '';
            _docuRef.LanguageId_DC = _filePrintDestSettings != null && _printReportSettings != null && _filePrintDestSettings.parmSaveToAttachmentsLanguageMode() == DocAttachmentLanguageMode::ReportLanguage ? _printReportSettings.parmLanguageId() : '';
            _docuRef.ActiveFrom_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsActiveFrom() : dateNull();
            _docuRef.ActiveTo_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsActiveTo() : dateNull();

            // Update Author.
            _docuRef.Author = DirPersonUser::find(_userId).PersonParty;
                        
            // Update DocuRef -> this will trigger the delegates in the update() method.
            // Note that if a different DocuType is provided, it has already been updated in the replaceDocuValueForDocuRef() method.
            _docuRef.update();

            ttscommit;

            isUpdated = true;
        }
        catch(Exception::CLRError)
        {
            DocGlobalHelper::handleClrException('', strFmt("@DocentricAX:ErrorWhileReattachingFile", _newFileName, _newDocuTypeId), Exception::Warning);
        }
        catch(Exception::Internal)
        {
            DocGlobalHelper::handleClrException('', strFmt("@DocentricAX:ErrorWhileReattachingFile", _newFileName, _newDocuTypeId), Exception::Warning);
        }
        catch
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ErrorWhileReattachingFile", _newFileName, _newDocuTypeId));
        }

        return isUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches a file to a record as a new document attachment.
    /// </summary>
    /// <param name="_printToFileExecutionInfo">PrintToFile execution info</param>
    /// <param name="_docuRefTableId">The table ID of the record to attach the document to</param>
    /// <param name="_docuRefRecId">The RecId of the record to attach the document to</param>
    /// <param name="_docuRefDataAreaId">The data area ID of the record to attach the document to</param>
    /// <param name="_docuTypeId">The DocuType to use when attaching the document</param>
    /// <param name="_fileMemoryStream">A stream containing the file to attach</param>
    /// <param name="_fileName">The filename of the file to attach</param>
    /// <param name="_fileContentType">The MIME type of the file</param>
    /// <param name="_attachmentName">The name of the attachment to create</param>
    /// <param name="_notes">Optional. Notes that are provided for the new document attachment record.</param>
    /// <param name="_userId">User who is attaching the document</param>
    /// <param name="_printReportSettings">Print report settings</param>
    /// <param name="_documentRestriction">The restriction type of the attaching document</param>
    /// <param name="_attachmentOverridingMode">What action should be taken if the attachment with the same name and filename already exists</param>
    /// <param name="_filePrintDestSettings">File print destination settings</param>
    /// <returns>A reference to the created document attachment if created, otherwise returns null.</returns>
    public static DocuRef saveToAttachments(DocPrintReportToFileExecutionInfo _printToFileExecutionInfo,
                                            TableId _docuRefTableId, RefRecId _docuRefRecId, DataAreaId _docuRefDataAreaId,
                                            DocuTypeId _docuTypeId, System.IO.Stream _fileMemoryStream, str _fileName,
                                            str _fileContentType = '', str _attachmentName = '', str _notes = '',
                                            str _userId = curUserId(), DocPrintReportSettings _printReportSettings = null,
                                            DocDocumentRestriction _documentRestriction = DocDocumentRestriction::Internal,
                                            DocAttachmentsOverridingMode _attachmentOverridingMode = DocAttachmentsOverridingMode::CreateNewAttachment,
                                            DocPrintDestSettingsFile _filePrintDestSettings = null)
    {
        DocuType          docuType;
        DocuRestriction   docuRestriction;

        boolean validateAndDefaultParameters()
        {
            if (!_docuRefTableId || !_docuRefRecId || !_docuRefDataAreaId)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _docuRefTableId/_docuRefRecId/_docuRefDataAreaId are not set');
            }

            if (_fileMemoryStream == null || !_fileName)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _fileMemoryStream/_fileName are not set');
            }

            if (!_docuTypeId)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _docuTypeId is not set');
            }

            docuType = DocuType::find(_docuTypeId);
            if (!docuType)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:SaveToAttDocuTypeNotExist", _docuTypeId));
                return false;
            }
            
            if (!docuType.ActionClassId || !SysDictClass::isEqualOrSuperclass(docuType.ActionClassId, classNum(DocuActionFile)))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:InvalidActionClassOfDocuType", _docuTypeId, docuType.getActionClassDescription_DC()));
                return false;
            }
        
            if (!_attachmentName)
            {
                _attachmentName = DocFileMngHelper::getFileNameWithoutExtension(_fileName);
            }

            if (!_attachmentName)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _attachmentName/_fileName are not set');
            }

            if (!_fileContentType)
            {
                _fileContentType = DocFileMngHelper::getMimeType(_fileName);
            }

            if (!_fileContentType)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _fileContentType/_fileName are not set');
            }

            switch (_documentRestriction)
            {
                case DocDocumentRestriction::External:
                    docuRestriction = DocuRestriction::External;
                    break;

                case DocDocumentRestriction::Internal:
                    docuRestriction = DocuRestriction::Internal;
                    break;

                default:
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:AttachmentRestrictionValueNotSupported", _documentRestriction));
                    return false;
            }

            return true;
        }
        
        void setPrintToFileExecutionInfo_Success_DocuRefRecId_AttachmentsExists(boolean _success, RecId _recId, boolean _attachmentExists)
        {
            _printToFileExecutionInfo.parmSaveToAttachmentsSuccess(_success);
            _printToFileExecutionInfo.parmSaveToAttachmentsDocuRef_RecId(_recId);
            _printToFileExecutionInfo.parmSaveToAttachments_AttachmentAlreadyExists(_attachmentExists);
        }


        if (!validateAndDefaultParameters())
        {
            return null;
        }

        TableId docuRefRootTableId = DocuRef::GetRootTableID(_docuRefTableId);

        // Should we check if the attachment with the same name and filename already exists?
        if (_attachmentOverridingMode == DocAttachmentsOverridingMode::DoNotSave || 
            _attachmentOverridingMode == DocAttachmentsOverridingMode::ReplaceAttachmentFile)
        {
            // Locate the first DocuRef record with the provided Name and Filename if such exists.
            DocuRef docuRefToUpdate = DocDocuRefHelper::findDocuRefWithNameAndFilename(docuRefRootTableId, _docuRefRecId, _docuRefDataAreaId, _attachmentName, _fileName);

            // If not found, proceed with creating the new attachment.
            if (docuRefToUpdate.RecId != 0)
            {
                if (_attachmentOverridingMode == DocAttachmentsOverridingMode::ReplaceAttachmentFile)
                {
                    // Attachment is found -> Update the corresponding DocuValue.
                    boolean isUpdated = DocDocuRefHelper::updateDocuRef(docuRefToUpdate, _fileMemoryStream, _fileName, _fileContentType, _docuTypeId, _notes, docuRestriction, _printReportSettings, _userId, _filePrintDestSettings);
                    if (isUpdated)
                    {
                        setPrintToFileExecutionInfo_Success_DocuRefRecId_AttachmentsExists(true, docuRefToUpdate.RecId, true);
                        return docuRefToUpdate;
                    }
                    else
                    {
                        setPrintToFileExecutionInfo_Success_DocuRefRecId_AttachmentsExists(false, 0, true);
                        return null;
                    }
                }
                else // if (_attachmentOverridingMode == DocAttachmentsOverridingMode::DoNotSave)
                {
                    // Attachment is found -> Do nothing.
                    setPrintToFileExecutionInfo_Success_DocuRefRecId_AttachmentsExists(false, 0, true);
                    return null;
                }
            }
        }

        // Create a new DocuRef and attach the file.
        DocuRef docuRef;
        boolean isAttached = false;
        try
        {
            ttsbegin;

            docuRef.clear();
            docuRef.RefTableId = docuRefRootTableId;
            docuRef.RefRecId = _docuRefRecId;
            docuRef.RefCompanyId = _docuRefDataAreaId;
            docuRef.TypeId = _docuTypeId;
            docuRef.Name = _attachmentName;
            docuRef.Notes = _notes;
            docuRef.Author = DirPersonUser::find(_userId).PersonParty;
            docuRef.Restriction = docuRestriction;
            docuRef.CategoryId_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsCategory() : '';
            docuRef.Tags_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsTags() : '';
            docuRef.LanguageId_DC = _filePrintDestSettings != null && _printReportSettings != null && _filePrintDestSettings.parmSaveToAttachmentsLanguageMode() == DocAttachmentLanguageMode::ReportLanguage ? _printReportSettings.parmLanguageId() : '';
            docuRef.ActiveFrom_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsActiveFrom() : dateNull();
            docuRef.ActiveTo_DC = _filePrintDestSettings != null ? _filePrintDestSettings.parmSaveToAttachmentsActiveTo() : dateNull();
            docuRef.insert();

            // Attach the file.
            DocuActionFile act = docuRef.docuAction();

            // Provide the DocuAction class with the report metadata.
            DocDocuActionReportInfoInterface actWithMetadata = act as DocDocuActionReportInfoInterface;
            if (actWithMetadata != null)
            {
                actWithMetadata.setPrintReportSettings(_printReportSettings);
            }

            _fileMemoryStream.Position = 0;
            isAttached = act.attachFile(docuRef, _fileName, _fileContentType, _fileMemoryStream);

            // Update Attachment with the document's hash number.
            if (isAttached && _filePrintDestSettings && _filePrintDestSettings.parmSaveToAttachmentsWithDocumentHashNumber())
            {
                DocDocuRefHelper::updateAttachmentWithHashNumber(docuRef);
            }

            ttscommit;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException('', strFmt("@DocentricAX:ErrorWhileAttachingFile", _fileName, _docuTypeId), Exception::Warning);
        }
        catch
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ErrorWhileAttachingFile", _fileName, _docuTypeId));
        }
       
        // Return.
        if (isAttached)
        {
            setPrintToFileExecutionInfo_Success_DocuRefRecId_AttachmentsExists(true, docuRef.RecId, false);
            return docuRef;
        }
        else
        {
            setPrintToFileExecutionInfo_Success_DocuRefRecId_AttachmentsExists(false, 0, false);
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttachmentWithHashNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// A DocumentAttachment.attachDocumentHashNumber() wrapper method.
    /// It updates the related DocuValue.DocumentHashNumber field with the Attachment document's hash number.
    /// </summary>
    /// <param name = "_docuRef">Document attachment record</param>
    public static void updateAttachmentWithHashNumber(DocuRef _docuRef)
    {
        // We just need some instance of DocumentAttachment class to call the attachDocumentHashNumber() instance method.
        DocumentAttachment documentAttachment = DocumentAttachment::construct(PrintMgmtDocumentType::SalesFreeTextInvoice);
        
        // From 10.0.18 the method methodStr(DocumentAttachment, attachDocumentHashNumber) is introduced.
        SysDictClass sysDictClass = new SysDictClass(classNum(DocumentAttachment));
        const str METHODNAME_attachDocumentHashNumber = 'attachDocumentHashNumber'; 
        if (sysDictClass.hasObjectMethod(METHODNAME_attachDocumentHashNumber))
        {
            try
            {
                sysDictClass.callObject(methodStr(DocumentAttachment, attachDocumentHashNumber), documentAttachment, _docuRef);
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:UpdateAttachmentWithHashNumberErrorMsg", _docuRef.Name));
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:UpdateAttachmentWithHashNumberErrorMsg", _docuRef.Name));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowViewOrEditDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the container with the AllowView and AllowEdit flags indicating whether the current user
    /// can view or edit the attachment details depending on the security context of the DocuView form.
    /// </summary>
    /// <param name="_docuRef">The DocuRef record</param>
    /// <returns>Container with the AllowView and AllowEdit flags: [AllowView (true/false), AllowEdit (true/false)]</returns>
    public static container allowViewOrEditDocuRef(DocuRef _docuRef)
    {
        boolean allowView = false;
        boolean allowEdit = false;
        
        // Set a global cache that stores the AllowView and AllowEdit flags for each selected DocuRef record.
        // Use SGC and not SGOC because we want the scope to be in the current user session. The cache is 
        // cleared in the close method of the DocAllAttachments form.
        // Owner - DocAllAttachments, Key - DocuRef.RecId, Value - [AllowView (true/false), AllowEdit (true/false)].
        str owner = formStr(DocAllAttachments);
        SysGlobalCache globalCache = ClassFactory.globalCache();
        container conAllowOrEditDocuRef = globalCache.get(owner, _docuRef.RecId, conNull());
        if (conAllowOrEditDocuRef != conNull())
        {
            return conAllowOrEditDocuRef;
        }

        int infoLine;
        try
        {
            infoLine = infologLine();

            // We need to close the existing instance of the DocuView form before we can create a new one
            if (Docu::Instance() && Docu::Instance().docuView())
            {
                Docu::Instance().clearDocuView();
            }

            Args args = new Args();
            args.lookupRecord(_docuRef);

            FormRun formRun = new MenuFunction(menuItemDisplayStr(DocuView), MenuItemType::Display).create(args);
            if (formRun)
            {
                allowView = true;
                allowEdit = formRun.getDocuRefAllowEdit_DC();

                formRun.close();
                formRun = null;
            }
        }
        catch
        {
            infolog.cut(infoLine + 1, infologLine());
        }
        conAllowOrEditDocuRef = [allowView, allowEdit];

        globalCache.set(owner, _docuRef.RecId, conAllowOrEditDocuRef);

        return conAllowOrEditDocuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttachmentAdmin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current user is Attachment administrator.
    /// </summary>
    /// <returns>True if the current user is Attachment administrator; otherwise false</returns>
    public static boolean isAttachmentAdmin()
    {
        return (isSystemAdministrator() || DocGlobalHelper::hasUserSecurityPrivilege(privilegeStr(DocentricAXAllAttachmentsAdmin)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUserViewDocumentPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the user has sufficient privileges for document preview.
    /// </summary>
    /// <param name = "_docuRef">The underyling docuRef record</param>
    /// <returns>True if the user has sufficient privileges, otherwise false</returns>
    protected static boolean canUserViewDocumentPreview(DocuRef _docuRef)
    {
        return (DocDocuRefHelper::isAttachmentAdmin() || conPeek(DocDocuRefHelper::allowViewOrEditDocuRef(_docuRef), 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentPreviewBasedOnSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes state of DocumentPreviewGroup visibility.
    /// </summary>
    /// <param name = "_formRun">The formRun object of the caller form.</param>
    public static void initDocumentPreviewBasedOnSysLastValue(FormRun _formRun)
    {
        // Check if formRun was passed.
        if (!_formRun)
        {
            DocGlobalHelper::handleError("@DocentricAX4:InvalidArgumentsForMethodCall", true, funcName());
        }

        FormGroupControl documentPreviewGroup;
        FormButtonControl toggleDocumentPreviewButton;

        // Assign values according to the form that called the method.
        switch(_formRun.name())
        {
            case formStr(DocReportAttachmentDetail):
                documentPreviewGroup = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, DocumentPreviewGroup));
                toggleDocumentPreviewButton = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, ToggleDocumentPreview));
                
                break;

            case formStr(DocAllAttachments):
                documentPreviewGroup = _formRun.design().controlName(formControlStr(DocAllAttachments, DocumentPreviewGroup));
                toggleDocumentPreviewButton = _formRun.design().controlName(formControlStr(DocAllAttachments, ToggleDocumentPreview));
               
                break;

            case formStr(SysPrintArchive):
                documentPreviewGroup = _formRun.getDocumentPreviewGroup_DC();
                toggleDocumentPreviewButton = _formRun.getToggleDocumentPreview_DC();
              
                break;

            default:
                DocGlobalHelper::handleError("@DocentricAX4:InvalidFormForMethodCall", true, funcName());
                
                return;
        }
        // Toggles preview pane based on value stored in usage data.
        documentPreviewGroup.visible(conPeek (xSysLastValue::getValue(curExt(), curUserId(), UtilElementType::Form, _formRun.name(), "@DocentricAX4:DocumentPreviewPaneVisibility"), 1));

        // Sets the multiselect value of the preview button to "Yes", so that it behaves the same on all forms where it is implemented.
        toggleDocumentPreviewButton.multiSelect(NoYes::Yes);

        // Changes label of toggle preview button according to visibility of preview pane.
        if (!documentPreviewGroup.visible())
        {
            toggleDocumentPreviewButton.text("@DocentricAX3:ShowDocumentPreview");
        }
        else
        {
            toggleDocumentPreviewButton.text("@DocentricAX3:HideDocumentPreview");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleDocumentPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles the state of the document preview on caller form.
    /// </summary>
    /// <param name = "_formRun">The formRun object of the caller form.</param>
    public static void toggleDocumentPreview(FormRun _formRun)
    {
        // Check if formRun was passed.
        if (!_formRun)
        {
            DocGlobalHelper::handleError("@DocentricAX4:InvalidArgumentsForMethodCall", true, funcName());
            return;
        }

        FormGroupControl documentPreviewGroup;
        FormButtonControl toggleDocumentPreviewButton;

        // Assign values according to the form that called the method.
        switch(_formRun.name())
        {
            case formStr(DocReportAttachmentDetail):
                documentPreviewGroup = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, DocumentPreviewGroup));
                toggleDocumentPreviewButton = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, ToggleDocumentPreview));
                
                break;

            case formStr(DocAllAttachments):
                documentPreviewGroup = _formRun.design().controlName(formControlStr(DocAllAttachments, DocumentPreviewGroup));
                toggleDocumentPreviewButton = _formRun.design().controlName(formControlStr(DocAllAttachments, ToggleDocumentPreview));
               
                break;

            case formStr(SysPrintArchive):
                documentPreviewGroup = _formRun.getDocumentPreviewGroup_DC();
                toggleDocumentPreviewButton = _formRun.getToggleDocumentPreview_DC();
              
                break;

            default:
                DocGlobalHelper::handleError("@DocentricAX4:InvalidFormForMethodCall", true, funcName());
                
                return;
        }

        // Toggle visibility of document preview.
        if (documentPreviewGroup.visible())
        {
            toggleDocumentPreviewButton.text("@DocentricAX3:ShowDocumentPreview");
            documentPreviewGroup.visible(false);
        }
        else
        {
            toggleDocumentPreviewButton.text("@DocentricAX3:HideDocumentPreview");
            documentPreviewGroup.visible(true);
            DocDocuRefHelper::findAndShowDocumentForPreview(_formRun);
        }

        // Save the value of the visibility of the document preview in usage data.
        xSysLastValue::putValue([documentPreviewGroup.visible()], curExt(), curUserId(), UtilElementType::Form, _formRun.name(), "@DocentricAX4:DocumentPreviewPaneVisibility");
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndShowDocumentForPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to find and show document for preview if document preview group is visible.
    /// </summary>
    /// <param name = "_formRun">The formRun object of the caller form.</param>
    public static void findAndShowDocumentForPreview(FormRun _formRun)
    {
        // Check if formRun was passed.
        if (!_formRun)
        {
            DocGlobalHelper::handleError("@DocentricAX4:InvalidArgumentsForMethodCall", true, funcName());
            return;
        }

        FormGroupControl documentPreviewGroup;
        DocDocumentViewer docDocumentViewer;
        DocuRef docuRef;

        FormStringControl notePreview;
        FormStringControl urlPreview;
        FormStaticTextControl insufficientPrivilegeStaticText;
        
        // Assign values according to the form that called the method and call the appropriate method.
        switch(_formRun.name())
        {
            case formStr(DocReportAttachmentDetail):
                documentPreviewGroup = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, DocumentPreviewGroup));
                docDocumentViewer = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, DocDocumentViewer)) as DocDocumentViewer;
                docuRef = _formRun.dataSource(formDataSourceStr(DocReportAttachmentDetail, DocuRef)).cursor();

                notePreview = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, NotePreview));
                urlPreview = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, UrlPreview));
                insufficientPrivilegeStaticText = _formRun.design().controlName(formControlStr(DocReportAttachmentDetail, InsufficientPrivilegeStaticText));
                
                // If the parent group is visible, call the appropriate method for showing document preview.
                if (documentPreviewGroup.visible())
                {
                    DocDocuRefHelper::findAndShowAttachmentDocumentForPreview(docDocumentViewer, docuRef, notePreview, urlPreview, insufficientPrivilegeStaticText);
                }

                break;

            case formStr(DocAllAttachments):
                documentPreviewGroup = _formRun.design().controlName(formControlStr(DocAllAttachments, DocumentPreviewGroup));
                docDocumentViewer = _formRun.design().controlName(formControlStr(DocAllAttachments, DocDocumentViewer)) as DocDocumentViewer;
                docuRef = _formRun.dataSource(formDataSourceStr(DocAllAttachments, DocuRef)).cursor();

                notePreview = _formRun.design().controlName(formControlStr(DocAllAttachments, NotePreview));
                urlPreview = _formRun.design().controlName(formControlStr(DocAllAttachments, UrlPreview));
                insufficientPrivilegeStaticText = _formRun.design().controlName(formControlStr(DocAllAttachments, InsufficientPrivilegeStaticText));

                // If the parent group is visible, call the appropriate method for showing document preview.
                if (documentPreviewGroup.visible())
                {
                    DocDocuRefHelper::findAndShowAttachmentDocumentForPreview(docDocumentViewer, docuRef, notePreview, urlPreview, insufficientPrivilegeStaticText);
                }

                break;

            case formStr(SysPrintArchive):
                documentPreviewGroup = _formRun.getDocumentPreviewGroup_DC();
                docDocumentViewer = _formRun.getDocDocumentViewerFormControl_DC();

                PrintJobHeader printJobHeader = _formRun.dataSource(formDataSourceStr(SysPrintArchive, PrintJobHeader)).cursor();
                docuRef = DocuRef::findTableIdRecId(printJobHeader.DataAreaId, printJobHeader.TableId, printJobHeader.RecId);

                // If the parent group is visible, call the appropriate method for showing document preview.
                if (documentPreviewGroup.visible())
                {
                    DocDocuRefHelper::findAndShowPrintArchiveDocumentForPreview(docDocumentViewer, docuRef);
                }

                break;

            default:
                // If the form is not supported, show error and return.
                DocGlobalHelper::handleError("@DocentricAX4:InvalidFormForMethodCall", true, funcName());
                
                return;
        }
        // If the parent group is not visible, then method will silently exit.
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndShowAttachmentDocumentForPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specific method for finding and showing document preview used for attachment forms.
    /// </summary>
    /// <param name = "_docDocumentViewer">DocDocumentViewer form control.</param>
    /// <param name = "_docuRef">The underlying DocuRef record.</param>
    /// <param name = "_notePreview">NotePreview form control.</param>
    /// <param name = "_urlPreview">UrlPreview form control.</param>
    /// <param name = "_insufficientPrivilegeStaticText">insufficientPrivilegeStaticText form control.</param>
    protected static void findAndShowAttachmentDocumentForPreview (DocDocumentViewer _docDocumentViewer, DocuRef _docuRef, FormStringControl _notePreview, FormStringControl _urlPreview, FormStaticTextControl _insufficientPrivilegeStaticText)
    {
        // If the user has insufficient privileges to view the document, then hide the preview and show the warning message instead.
        if (!DocDocuRefHelper::canUserViewDocumentPreview(_docuRef))
        {
            _insufficientPrivilegeStaticText.visible(true);
            _docDocumentViewer.visible(false);
            _notePreview.visible(false);
            _urlPreview.visible(false);

            return;
        }
        else
        {
            _insufficientPrivilegeStaticText.visible(false);
        }

        // Try to find the related document to show for preview.
        try
        {
            // Set the document found for preview.
            _docDocumentViewer.setDocuRefRecord(_docuRef);
            _docDocumentViewer.referencesDocuRef(1);
        
            if (!_docuRef)
            {
                List documents = new List(Types::Class);
                _docDocumentViewer.parmDocuments(documents);
            }

            ClassId actionClassId = _docuRef.DocuType().ActionClassId;

            // Check if the record is of type Note or URL.
            if (SysDictClass::isEqualOrSuperclass(actionClassId, classNum(DocuActionNote)))
            {
                // Switch to note preview.
                _docDocumentViewer.visible(false);
                _notePreview.visible(true);
                _urlPreview.visible(false);

                _notePreview.text(_docuRef.Notes);
            }
            else if (SysDictClass::isEqualOrSuperclass(actionClassId, classNum(DocuActionURL)))
            {
                // Switch to URL preview.
                _docDocumentViewer.visible(false);
                _notePreview.visible(false);
                _urlPreview.visible(true);

                _urlPreview.text(_docuRef.Notes);
            }
            else
            {
                // Switch to document preview.
                _docDocumentViewer.visible(true);
                _notePreview.visible(false);
                _urlPreview.visible(false);

                // Refresh document viewer control.
                _docDocumentViewer.ReferencedRecordChangeCommand();
            }
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX3:PrintArchivePreviewError", true, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndShowPrintArchiveDocumentForPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specific method for finding and showing document preview used for print archive form.
    /// </summary>
    /// <param name = "_docDocumentViewer">DocDocumentPreview form control.</param>
    /// <param name = "_docuRef">The underlying DocuRef record.</param>
    protected static void findAndShowPrintArchiveDocumentForPreview(DocDocumentViewer _docDocumentViewer, DocuRef _docuRef)
    {
        // Try to find the related document to show for preview.
        try
        {
            // Set the document found for preview.
            _docDocumentViewer.setDocuRefRecord(_docuRef);
            _docDocumentViewer.referencesDocuRef(1);
        
            if (!_docuRef)
            {
                List documents = new List(Types::Class);
                _docDocumentViewer.parmDocuments(documents);
            }

            _docDocumentViewer.ReferencedRecordChangeCommand();
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX3:PrintArchivePreviewError");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>