<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintReportSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrintReportSettings
{
    DocReportTemplateId             templateId;
    str                             xmlDataSourceStr;
    DocPrintDestination             printDestination;
    UserId                          userId;
    HcmWorkerRecId                  hcmWorkerRecId;
    CompanyId                       companyId;
    LanguageId                      languageId;
    boolean                         saveToArchive;
    DocuTypeId                      saveToArchiveDocuTypeId;
    DocPrintArchiveNote             saveToArchiveNote;
    boolean                         saveProformaToArchive;
    DataAreaId                      reportExecutionContextDataAreaId;
    TableId                         reportExecutionContextTableId;
    RefRecId                        reportExecutionContextTableRecId;
    DocReportId                     reportId;
    DocReportCaption                reportCaption;
    MenuItemName                    reportMenuItemName;
    MenuItemType                    reportMenuItemType;
    guid                            reportRunId;
    guid                            printDestinationRunId;
    guid                            currentExecutionId;
    SrsReportDataContract           srsReportContract;
    boolean                         executeOnlyData;
    boolean                         suppressSuccessMsg;
    DocPrintMgmtOriginalCopyType    originalCopyType;
    str                             printMgmtSettingName;
    int                             docGenExecutionTime;
    DocArchiveContract              archiveContract;
    container                       customSettings;
    boolean                         previewBeforePrint;
    List                            attachmentRuleList;    // List<DocReportAttachmentRule (class)>
    DocReportPrintedFrom            printedFrom;
    DocPdfEcryptionPassword         pdfPassword;
    DocEncryptionAlgorithm          pdfEncryptionAlgorithm;
    Set                             pdfEncryptionConditionSet;
    DocPdfDocumentTitle             documentTitle;
    DocPdfDocumentAuthor            documentAuthor;
    DocPdfDocumentSubject           documentSubject;
    DocPdfDocumentKeywords          documentKeywords;
    str                             documentTitleOriginal;
    DocPdfAConformanceLevel         pdfAConformanceLevel;
    
    // Not packed:
    DocPrintedReport                        printedReport;
    Map                                     placeholderMap;      // Map (str placeholderName, class DocPlaceholder)
    DocPdfSignatureSettings                 pdfSignatureSettings;
    DocReportSharePointMetadataSettings     saveToArchiveSharePointMetadata;
    DocDataSourceObject                     ddspDataSourceObject;                

    #define.packVersion1(1)
    #define.packVersion2(2)         // Added customSettings (container) and archiveContract (class).
    #define.packVersion3(3)         // Added saveToArchiveDocuTypeId (str), previewBeforePrint (boolean) and attachmentRuleList (list).
    #define.packVersion4(4)         // Added saveToArchiveNote (str) and printedFrom (DocReportPrintedFrom).
    #define.packVersion5(5)         // Added pdfPassword (DocPdfEcryptionPassword), pdfEncryptionConditionSet (Set), documentTitle (DocPdfDocumentTitle), documentAuthor (DocPdfDocumentAuthor), documentSubject (DocPdfDocumentSubject), documentKeywords (DocPdfDocumentKeywords)
    #define.packVersion6(6)         // Added printMgmtSettingName (str), printDestinationRunId (guid).
    #define.packVersion7(7)         // Added currentExecutionId (guid).
    #define.packVersion8(8)         // Added pdfEncryptionAlgorithm (DocumentTitleOriginal).
    #define.packVersion9(9)         // Added documentTitleOriginal (str).
    #define.packVersion10(10)       // Added pdfAConformanceLevel (enum).
    #define.currentPackVersion(11)  // Added saveProformaToArchive (boolean)

    #localmacro.packListVersion1And2
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime
    #endMacro

    #localmacro.packListVersion3
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId
    #endMacro

    #localmacro.packListVersion4
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom
    #endMacro
    
    #localmacro.packListVersion5
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords
    #endMacro
    
    #localmacro.packListVersion6
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords,
        printMgmtSettingName,
        printDestinationRunId
    #endMacro

    #localmacro.packListVersion7
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords,
        printMgmtSettingName,
        printDestinationRunId,
        currentExecutionId
    #endMacro

    #localmacro.packListVersion8
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords,
        printMgmtSettingName,
        printDestinationRunId,
        currentExecutionId,
        pdfEncryptionAlgorithm
    #endMacro

    #localmacro.packListVersion9
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords,
        printMgmtSettingName,
        printDestinationRunId,
        currentExecutionId,
        pdfEncryptionAlgorithm,
        documentTitleOriginal
    #endMacro

    #localmacro.packListVersion10
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords,
        printMgmtSettingName,
        printDestinationRunId,
        currentExecutionId,
        pdfEncryptionAlgorithm,
        documentTitleOriginal,
        pdfAConformanceLevel
    #endMacro

    #localmacro.currentList
        version,
        templateId,
        xmlDataSourceStr,
        printDestination,
        userId,
        hcmWorkerRecId,
        companyId,
        languageId,
        saveToArchive,
        reportExecutionContextDataAreaId,
        reportExecutionContextTableId,
        reportExecutionContextTableRecId,
        reportId,
        reportCaption,
        reportMenuItemName,
        reportMenuItemType,
        executeOnlyData,
        suppressSuccessMsg,
        originalCopyType,
        reportRunId,
        docGenExecutionTime,
        previewBeforePrint,
        saveToArchiveDocuTypeId,
        saveToArchiveNote,
        printedFrom,
        pdfPassword,
        documentTitle,
        documentAuthor,
        documentSubject,
        documentKeywords,
        printMgmtSettingName,
        printDestinationRunId,
        currentExecutionId,
        pdfEncryptionAlgorithm,
        documentTitleOriginal,
        pdfAConformanceLevel,
        saveProformaToArchive
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container pack()
    {
        int         version = #currentPackVersion;
        container   srsReportContractContainer = conNull();
        container   archiveContractContainer = conNull(); 
        container   attachmentRuleListContainer = conNull();
        container   pdfEncryptionConditionSetContainer = conNull();
            
        if (srsReportContract != null)
        {
            srsReportContractContainer = srsReportContract.pack();
        }

        if (archiveContract != null)
        {
            archiveContractContainer = archiveContract.pack();
        }

        if (attachmentRuleList != null)
        {
            attachmentRuleListContainer = attachmentRuleList.pack();
        }

        if (pdfEncryptionConditionSet != null)
        {
            pdfEncryptionConditionSetContainer = pdfEncryptionConditionSet.pack();
        }
        
        return [#currentList, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packWithoutSrsReportContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object into the packed container with the exception of the SrsReportDataContract object.
    /// </summary>
    /// <returns>Packed container</returns>
    public container packWithoutSrsReportContract()
    {
        int         version = #currentPackVersion;
        container   srsReportContractContainer = conNull();
        container   archiveContractContainer = conNull();
        container   attachmentRuleListContainer = conNull();
        container   pdfEncryptionConditionSetContainer = conNull();
            
        if (archiveContract != null)
        {
            archiveContractContainer = archiveContract.pack();
        }

        if (attachmentRuleList != null)
        {
            attachmentRuleListContainer = attachmentRuleList.pack();
        }

        if (pdfEncryptionConditionSet != null)
        {
            pdfEncryptionConditionSetContainer = pdfEncryptionConditionSet.pack();
        }
        
        return [#currentList, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean      ret = false;
        int          version;
        container    srsReportContractContainer = conNull();
        container    archiveContractContainer = conNull();
        container    attachmentRuleListContainer = conNull();
        container    pdfEncryptionConditionSetContainer = conNull();

        void initDocumentPropertiesForVersionLessThanVersion5()
        {
            documentAuthor = curExt();
            documentTitle = this.getReportCaptionOrId();
        }

        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
            
            if (version == #currentPackVersion)
            {
                [#currentList, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion10)
            {
                [#packListVersion10, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion9)
            {
                [#packListVersion9, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion8)
            {
                [#packListVersion8, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion7)
            {
                [#packListVersion7, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion6)
            {
                [#packListVersion6, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion5)
            {
                [#packListVersion5, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion4)
            {
                [#packListVersion4, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer] = _pack;
                initDocumentPropertiesForVersionLessThanVersion5();
                ret = true;
            }
            else if (version == #packVersion3)
            {
                [#packListVersion3, srsReportContractContainer, archiveContractContainer, customSettings, attachmentRuleListContainer] = _pack;
                initDocumentPropertiesForVersionLessThanVersion5();
                ret = true;
            }
            else if (version == #packVersion2)
            {
                [#packListVersion1And2, srsReportContractContainer, archiveContractContainer, customSettings] = _pack;
                initDocumentPropertiesForVersionLessThanVersion5();
                ret = true;
            }
            else if (version == #packVersion1)
            {
                [#packListVersion1And2, srsReportContractContainer] = _pack;
                initDocumentPropertiesForVersionLessThanVersion5();
                ret = true;
            }
            
            if (srsReportContractContainer != conNull())
            {
                srsReportContract = new SrsReportDataContract();
                ret = srsReportContract.unpack(srsReportContractContainer) && ret;
            }
            else
            {
                srsReportContract = null;
            }
            
            if (archiveContractContainer != conNull())
            {
                archiveContract = new DocArchiveContract();
                ret = archiveContract.unpack(archiveContractContainer) && ret;
            }
            else
            {
                archiveContract = null;
            }

            if (attachmentRuleListContainer != conNull())
            {
                attachmentRuleList = List::create(attachmentRuleListContainer);
            }
            else
            {
                attachmentRuleList = null;
            }

            if (pdfEncryptionConditionSetContainer != conNull())
            {
                pdfEncryptionConditionSet = Set::create(pdfEncryptionConditionSetContainer);
            }
            else
            {
                pdfEncryptionConditionSet = null;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSaveToArchive</Name>
				<Source><![CDATA[
    public void checkSaveToArchive()
    {
        if (this.parmPrintDestination() == DocPrintDestination::Archive ||
            this.parmSaveToArchive() == true)
        {
            boolean isValid;
            if (this.parmSaveToArchiveDocuTypeId() == '')
            {
                isValid = DocReportingHelper::validateBuiltInDocuTypeForSavingToPrintArchive(true);
            }
            else
            {
                isValid = DocReportingHelper::validateDocuTypeForSavingToPrintArchive(this.parmSaveToArchiveDocuTypeId(), true);
            }

            if (!isValid)
            {
                DocGlobalHelper::handleError("@DocentricAX:PrintDestIncludeArchiveInvalid", true, '', true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintedFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the location from where the report is printed.
    /// </summary>
    /// <param name = "_printedFrom">Printed from location</param>
    /// <returns>Printed from location</returns>
    public DocReportPrintedFrom parmPrintedFrom(DocReportPrintedFrom _printedFrom = printedFrom)
    {
        printedFrom = _printedFrom;
        return printedFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the password used to encrypt generated PDF document.
    /// </summary>
    /// <param name = "_pdfPassword">Password</param>
    /// <returns>Password</returns>
    public DocPdfEcryptionPassword parmPdfPassword(DocPdfEcryptionPassword _pdfPassword = pdfPassword)
    {
        pdfPassword = _pdfPassword;
        return pdfPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the encryption algorithm used to encrypt generated PDF document.
    /// </summary>
    /// <param name = "_pdfEncryptionAlgorithm">Encryption algorithm</param>
    /// <returns>DocEncryptionAlgorithm</returns>
    public DocEncryptionAlgorithm parmPdfEncryptionAlgorithm(DocEncryptionAlgorithm _pdfEncryptionAlgorithm = pdfEncryptionAlgorithm)
    {
        pdfEncryptionAlgorithm = _pdfEncryptionAlgorithm;
        return pdfEncryptionAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionConditionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the condition set used to determine when to encrypt the generated PDF document.
    /// </summary>
    /// <param name = "_pdfEncryptionConditionSet">When to encrypt condition set</param>
    /// <returns>When to encrypt condition set</returns>
    public Set parmPdfEncryptionConditionSet(Set _pdfEncryptionConditionSet = pdfEncryptionConditionSet)
    {
        pdfEncryptionConditionSet = _pdfEncryptionConditionSet;
        return pdfEncryptionConditionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfSignatureSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the PDF signature settings.
    /// </summary>
    /// <param name = "_pdfSignatureSettings">PDF signature settings</param>
    /// <returns>PDF signature settings</returns>
    public DocPdfSignatureSettings parmPdfSignatureSettings(DocPdfSignatureSettings _pdfSignatureSettings = pdfSignatureSettings)
    {
        pdfSignatureSettings = _pdfSignatureSettings;
        return pdfSignatureSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfAConformanceLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the PDF/A conformance level.
    /// </summary>
    /// <param name = "_pdfAConformanceLevel">PDF/A conformance level</param>
    /// <returns>PDF/A conformance level</returns>
    /// <remarks>
    /// If this value is set, the output PDF document is converted to PDF/A format using the selected
    /// PDF/A conformance level. Conversion is not performed if this value is set to None.
    /// </remarks>
    public DocPdfAConformanceLevel parmPdfAConformanceLevel(DocPdfAConformanceLevel _pdfAConformanceLevel = pdfAConformanceLevel)
    {
        pdfAConformanceLevel = _pdfAConformanceLevel;
        return pdfAConformanceLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the title property for the generated PDF.
    /// </summary>
    /// <param name = "_documentTitle">Title</param>
    /// <returns>Title</returns>
    public DocPdfDocumentTitle parmDocumentTitle(DocPdfDocumentTitle _documentTitle = documentTitle)
    {
        documentTitle = _documentTitle;
        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentAuthor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the author property for the generated PDF.
    /// </summary>
    /// <param name = "_documentAuthor">Author</param>
    /// <returns>Author</returns>
    public DocPdfDocumentAuthor parmDocumentAuthor(DocPdfDocumentAuthor _documentAuthor = documentAuthor)
    {
        documentAuthor = _documentAuthor;
        return documentAuthor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the subject property for the generated PDF.
    /// </summary>
    /// <param name = "_documentSubject">Subject</param>
    /// <returns>Subject</returns>
    public DocPdfDocumentSubject parmDocumentSubject(DocPdfDocumentSubject _documentSubject = documentSubject)
    {
        documentSubject = _documentSubject;
        return documentSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentKeywords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the keywords property for the generated PDF.
    /// </summary>
    /// <param name = "_documentKeywords">Keywords</param>
    /// <returns>Keywords</returns>
    public DocPdfDocumentKeywords parmDocumentKeywords(DocPdfDocumentKeywords _documentKeywords = documentKeywords)
    {
        documentKeywords = _documentKeywords;
        return documentKeywords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveDocuTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the document type used for saving to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveDocuTypeId">Print archive's document type</param>
    /// <returns>Print archive's document type</returns>
    public DocuTypeId parmSaveToArchiveDocuTypeId(DocuTypeId _saveToArchiveDocuTypeId = saveToArchiveDocuTypeId)
    {
        saveToArchiveDocuTypeId = _saveToArchiveDocuTypeId;
        return saveToArchiveDocuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the print archive note used when saving report to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveNote">Print archive note</param>
    /// <returns>Print archive note</returns>
    public DocPrintArchiveNote parmSaveToArchiveNote(DocPrintArchiveNote _saveToArchiveNote = saveToArchiveNote)
    {
        saveToArchiveNote = _saveToArchiveNote;
        return saveToArchiveNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveProformaToArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a value indicating whether the report is allowed to be saved in the print archive when executed as a proforma.
    /// </summary>
    /// <param name = "_saveProformaToArchive">True to allow archiving of the report when run as a proforma; otherwise, false.</param>
    /// <returns>The current setting of whether the report is allowed to be archived when run as a proforma.</returns>
    /// <remarks>
    /// This flag is used for reports that support the proforma scenario (SalesInvoice, PurchPurchaseOrder, SalesConfirm etc.).
    /// List of supported reports can be found in the DocPrintMgmtHelper::isProformaSupported() method.
    /// </remarks>
    public boolean parmSaveProformaToArchive(boolean _saveProformaToArchive = saveProformaToArchive)
    {
        saveProformaToArchive = _saveProformaToArchive;
        return saveProformaToArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveSharePointMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the SharePoint metadata settings used when saving report to Print archive.
    /// </summary>
    /// <param name = "_saveToArchiveSharePointMetadata">SharePoint metadata settings</param>
    /// <returns>SharePoint metadata settings</returns>
    public DocReportSharePointMetadataSettings parmSaveToArchiveSharePointMetadata(DocReportSharePointMetadataSettings _saveToArchiveSharePointMetadata = saveToArchiveSharePointMetadata)
    {
        saveToArchiveSharePointMetadata = _saveToArchiveSharePointMetadata;
        return saveToArchiveSharePointMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledSaveToArchiveSharePointMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the saving to SharePoint with metadata fields via Print archive is enabled.
    /// </summary>
    /// <returns>True, if saving to SharePoint with metadata fields via Print archive's document type is enabled</returns>
    public boolean isEnabledSaveToArchiveSharePointMetadata()
    {
        if (saveToArchiveSharePointMetadata != null && saveToArchiveSharePointMetadata.parmIsSavingEnabled())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewBeforePrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the flag which specifies should the report be previewed before printing.
    /// </summary>
    /// <param name = "_previewBeforePrint">Preview before printing</param>
    /// <returns>Preview before printing</returns>
    public boolean parmPreviewBeforePrint(boolean _previewBeforePrint = previewBeforePrint)
    {
        previewBeforePrint = _previewBeforePrint;
        return previewBeforePrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAttachmentRuleList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the list which contains report attachment rules used when emailing or printing the report.
    /// </summary>
    /// <param name = "_attachmentRuleList">List[DocReportAttachmentRule (class)]</param>
    /// <returns>List[DocReportAttachmentRule (class)]</returns>
    public List parmAttachmentRuleList(List _attachmentRuleList = attachmentRuleList)
    {
        attachmentRuleList = _attachmentRuleList;
        return attachmentRuleList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArchiveContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets archive contract which contains Document ID, Vend/Cust account and other report metadata
    /// which are used for Print archive, Additional attachments, Save to Attachments, and Docentric Log.
    /// </summary>
    /// <param name = "_archiveContract">Report archive contract</param>
    /// <returns>Report archive contract</returns>
    public DocArchiveContract parmArchiveContract(DocArchiveContract _archiveContract = archiveContract)
    {
        archiveContract = _archiveContract;
        return archiveContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets custom settings. This container field can contain anything, e.g. packed custom class,
    /// that can store some report specific value which can be used along report execution pipeline.
    /// </summary>
    /// <param name = "_customSettings">Custom report settings</param>
    /// <returns>Custom report settings</returns>
    public container parmCustomSettings(container _customSettings = customSettings)
    {
        customSettings = _customSettings;
        return customSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecuteOnlyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set/Gets if only the report data and settings should be executed, without printing
    /// the report to any print destination. All report execution settings will be completed/handled
    /// (e.g. the report data source will be created, placeholders will be replaced, etc.).
    /// </summary>
    /// <param name="_executeOnlyData">
    /// Should only the report data and settings be executed.
    /// </param>
    /// <returns>
    /// True if the report data and settings only should be executed, without printing the report.
    /// </returns>
    /// <remarks>
    /// Set this flag to true if you don't want to print the report to any print destination
    /// but only to retrieve the report data and execution settings. Afterwards you can use
    /// the same completed printReportSettings() and file/email/printerPrintDestSettings()
    /// to print the report to multiple print destinations from the code,
    /// using the DocGeneratorClient or DocGeneratorServer class.
    /// </remarks>
    public boolean parmExecuteOnlyData(boolean _executeOnlyData = executeOnlyData)
    {
        executeOnlyData = _executeOnlyData;
        return executeOnlyData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuppressSuccessMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets if the success message about report execution should be suppressed.
    /// </summary>
    /// <param name="_suppressSuccessMsg">
    /// Should be the success message about printing the report suppressed.
    /// </param>
    /// <returns>
    /// True if the success message about printing the report is suppressed.
    /// </returns>
    /// <remarks>
    /// Set this flag to true if the report needs to run silently i.e. from the code
    /// without message about successful report execution.
    /// </remarks>
    public boolean parmSuppressSuccessMsg(boolean _suppressSuccessMsg = suppressSuccessMsg)
    {
        suppressSuccessMsg = _suppressSuccessMsg;
        return suppressSuccessMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets current company that is active when the report runs.
    /// </summary>
    /// <param name="_companyId">
    /// Current company that is active when the report runs.
    /// </param>
    /// <returns>
    /// Current company that is active when the report runs.
    /// </returns>
    public CompanyId parmCompanyId(CompanyId _companyId = companyId)
    {
        companyId = _companyId;
        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmWorkerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets current worker who executes the report.
    /// This parameter affects the GeneralData data section of the report data source.
    /// </summary>
    /// <param name="_hcmWorkerRecId">
    /// Current worker who executes the report.
    /// </param>
    /// <returns>
    /// Current worker who executes the report.
    /// </returns>
    public HcmWorkerRecId parmHcmWorkerRecId(HcmWorkerRecId _hcmWorkerRecId = hcmWorkerRecId)
    {
        hcmWorkerRecId = _hcmWorkerRecId;
        return hcmWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the report run-time language, i.e. language for the report execution time.
    /// All labels used on report will be translated to this language.
    /// It also affects selection of the default template, if the template ID (this.parmTemplateId())
    /// is not set and the templates are not language neutral.
    /// </summary>
    /// <param name="_languageId">
    /// Report run-time language.
    /// </param>
    /// <returns>
    /// Report run-time language.
    /// </returns>
    /// <remarks>
    /// The combination of the selected template and the runtime language will be validated
    /// in the this.validate() method which is called in the most of the Docentric AX APIs.
    /// </remarks>
    public LanguageId parmLanguageId(LanguageId _languageId = languageId)
    {
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the target print destination for report execution (Email, File, Printer, Screen, Archive).
    /// </summary>
    /// <param name="_printDestination">
    /// The selected report print destination.
    /// </param>
    /// <returns>
    /// The selected report print destination.
    /// </returns>
    public DocPrintDestination parmPrintDestination(DocPrintDestination _printDestination = printDestination)
    {
        printDestination = _printDestination;
        return printDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportMenuItemName</Name>
				<Source><![CDATA[
    public MenuItemName parmReportMenuItemName(MenuItemName _reportMenuItemName = reportMenuItemName)
    {
        reportMenuItemName = _reportMenuItemName;
        return reportMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportMenuItemType</Name>
				<Source><![CDATA[
    public MenuItemType parmReportMenuItemType(MenuItemType _reportMenuItemType = reportMenuItemType)
    {
        reportMenuItemType = _reportMenuItemType;
        return reportMenuItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalCopyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the Original/Copy type. Applicable only for Print management reports.
    /// </summary>
    /// <param name = "_originalCopyType">Original/Copy type</param>
    /// <returns>Original/Copy type</returns>
    /// <remarks>
    /// Changing the Original/Copy type will not affect the document content neither will affect the Print management loading.
    /// </remarks>
    public DocPrintMgmtOriginalCopyType parmOriginalCopyType(DocPrintMgmtOriginalCopyType _originalCopyType = originalCopyType)
    {
        originalCopyType = _originalCopyType;
        return originalCopyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentTitleOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the report Original document title.
    /// Contains either Label ID or Label translation in the runtime report language,
    /// which is translated before Docentric pipeline starts.
    /// Label translation is presented for SalesInvoice, FreeTextInvoie and PSAQuotations.
    /// </summary>
    /// <param name = "_documentTitleOriginal">Original document title</param>
    /// <returns>Original document title</returns>
    public str parmDocumentTitleOriginal(str _documentTitleOriginal = documentTitleOriginal)
    {
        documentTitleOriginal = _documentTitleOriginal;
        return documentTitleOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMgmtSettingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the Print management setting name. Applicable only for Print management reports.
    /// </summary>
    /// <param name = "_printMgmtSettingName">Print management setting name</param>
    /// <returns>Print management setting name</returns>
    /// <remarks>
    /// Changing this setting will not affect the Print management loading rules in any way.
    /// </remarks>
    public str parmPrintMgmtSettingName(str _printMgmtSettingName = printMgmtSettingName)
    {
        printMgmtSettingName = _printMgmtSettingName;
        return printMgmtSettingName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets report caption. If not set the label of the report menu item
    /// will be used. If the report is execute without menu item, e.g. from the code,
    /// then the Default report caption field from the report setup will be used.
    /// This value can be overridden using this parm method.
    /// </summary>
    /// <param name="_reportCaption">
    /// Report caption which results in the standard data field in the report data source.
    /// </param>
    /// <returns>
    /// Report caption which results in the standard data field in the report data source.
    /// </returns>
    public DocReportCaption parmReportCaption(DocReportCaption _reportCaption = reportCaption)
    {
        reportCaption = _reportCaption;
        return reportCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportCaptionOrId</Name>
				<Source><![CDATA[
    public str getReportCaptionOrId()
    {
        if (reportCaption != '')
        {
            return reportCaption;
        }
        else
        {
            return reportId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets report execution context data area ID. Should be used
    /// in combination with the parmReportExecutionContextTableId() and
    /// the parmReportExecutionContextTableRecId() methods.
    /// Report execution context table is a table that report can be attached to
    /// if the SaveToAttachments flag with the File print destination is set.
    /// </summary>
    /// <param name="_reportExecutionContextDataAreaId">
    /// Report execution context data area ID.
    /// </param>
    /// <returns>
    /// Report execution context data area ID.
    /// </returns>
    public DataAreaId parmReportExecutionContextDataAreaId(DataAreaId _reportExecutionContextDataAreaId = reportExecutionContextDataAreaId)
    {
        reportExecutionContextDataAreaId = _reportExecutionContextDataAreaId;
        return reportExecutionContextDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets report execution context data area ID. Should be used
    /// in combination with the parmReportExecutionContextDataAreaId() and
    /// the parmReportExecutionContextTableRecId() methods.
    /// Report execution context table is a table that report can be attached to
    /// if the SaveToAttachments flag with the File print destination is set.
    /// </summary>
    /// <param name="_reportExecutionContextTableId">
    /// Report execution context table ID.
    /// </param>
    /// <returns>
    /// Report execution context table ID.
    /// </returns>
    public TableId parmReportExecutionContextTableId(TableId _reportExecutionContextTableId = reportExecutionContextTableId)
    {
        reportExecutionContextTableId = _reportExecutionContextTableId;
        return reportExecutionContextTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportExecutionContextTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets report execution context data area ID. Should be used
    /// in combination with the parmReportExecutionContextTableId() and
    /// the parmReportExecutionContextDataAreaId() methods.
    /// Report execution context table is a table that report can be attached to
    /// if the SaveToAttachments flag with the File print destination is set.
    /// </summary>
    /// <param name="_reportExecutionContextTableRecId">
    /// Report execution context table RecId.
    /// </param>
    /// <returns>
    /// Report execution context table RecId.
    /// </returns>
    public RefRecId parmReportExecutionContextTableRecId(RefRecId _reportExecutionContextTableRecId = reportExecutionContextTableRecId)
    {
        reportExecutionContextTableRecId = _reportExecutionContextTableRecId;
        return reportExecutionContextTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the report ID. It is unique field among all report
    /// and reports are not saved per company.
    /// </summary>
    /// <param name="_reportId">
    /// Report ID.
    /// </param>
    /// <returns>
    /// Report ID.
    /// </returns>
    public DocReportId parmReportId(DocReportId _reportId = reportId)
    {
        reportId = _reportId;
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets a flag that determines which report should be save to
    /// print archive. It affects all print destinations.
    /// </summary>
    /// <param name="_saveToArchive">
    /// Should be report save to Print archive.
    /// </param>
    /// <returns>
    /// Should be report save to Print archive.
    /// </returns>
    public boolean parmSaveToArchive(boolean _saveToArchive = saveToArchive)
    {
        saveToArchive = _saveToArchive;
        return saveToArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSrsReportContract</Name>
				<Source><![CDATA[
    public SrsReportDataContract parmSrsReportContract(SrsReportDataContract _srsReportContract = srsReportContract)
    {
        srsReportContract = _srsReportContract;
        return srsReportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the selected template ID for the running report.
    /// If not set, a default template for the running report and the runtime language
    /// (this.parmLanguageId()) will be selected.
    /// </summary>
    /// <param name="_templateId">
    /// Report template ID.
    /// </param>
    /// <returns>
    /// Report template ID.
    /// </returns>
    /// <remarks>
    /// The combination of the selected template and the runtime language will be validated
    /// in the this.validate() method which is called in the most of the Docentric AX APIs.
    /// </remarks>
    public DocReportTemplateId parmTemplateId(DocReportTemplateId _templateId = templateId)
    {
        templateId = _templateId;
        return templateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets current user who executes the report.
    /// </summary>
    /// <param name="_userId">
    /// Current user who executes the report.
    /// </param>
    /// <returns>
    /// Current user who executes the report.
    /// </returns>
    public UserId parmUserId(UserId _userId = userId)
    {
        userId = _userId;
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportExecutionContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report execution context record.
    /// </summary>
    /// <param name="_common">
    /// Report execution context record.
    /// </param>
    public void setReportExecutionContextRecord(Common _common)
    {
        this.parmReportExecutionContextDataAreaId(_common.DataAreaId);
        this.parmReportExecutionContextTableId(_common.TableId);
        this.parmReportExecutionContextTableRecId(_common.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportExecutionContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report execution context record.
    /// </summary>
    /// <returns>
    /// Returns report execution context record.
    /// </returns>
    public Common getReportExecutionContextRecord()
    {
        Common reportExecutionContextRecord = null;
        
        if (this.parmReportExecutionContextTableId() && this.parmReportExecutionContextTableRecId())
        {
            reportExecutionContextRecord = DocGlobalHelper::getTableRecord(
                                                this.parmReportExecutionContextTableId(),
                                                this.parmReportExecutionContextTableRecId(),
                                                this.parmReportExecutionContextDataAreaId());
        }

        return reportExecutionContextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlDataSourceStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets document data source serialized to XML.
    /// This XML gets automatically produced by Docentric AX framework.
    /// </summary>
    /// <param name="_xmlDataSourceStr">DDSP serialized to XML</param>
    /// <returns>DDSP serialized to XML</returns>
    public str parmXmlDataSourceStr(str _xmlDataSourceStr = xmlDataSourceStr)
    {
        xmlDataSourceStr = _xmlDataSourceStr;
        return xmlDataSourceStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets report data source object, containing the top records of all three data sections:
    /// MainData, GeneralData, Parameters and the label map with label codes which are either part
    /// of the data source or added in the report setup.
    /// </summary>
    /// <param name = "_ddspDataSourceObject">DDSP as an object</param>
    /// <returns>DDSP as an object</returns>
    public DocDataSourceObject parmDataSourceObject(DocDataSourceObject _ddspDataSourceObject = ddspDataSourceObject)
    {
        ddspDataSourceObject = _ddspDataSourceObject;
        return ddspDataSourceObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultParmValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set's the default values for companyId, hcmWorkerRecId, languageId, userId and optionally resolves the default template.
    /// Resolving the default template means finding and setting templateId if empty.
    /// </summary>
    /// <param name = "_resolveDefaultTemplate">Should the default template be resolved (by using reportId, companyId and languageId)</param>
    /// <remarks>Empty templateId means @DOCENTRIC_DEFAULT_TEMPLATE@ (this is AX 2012 legacy matter).</remarks>
    public void setDefaultParmValues(boolean _resolveDefaultTemplate = true)
    {
        if (!companyId)
        {
            companyId = curext();
        }
    
        if (!hcmWorkerRecId)
        {
            hcmWorkerRecId = HcmWorkerLookup::currentWorker();
        }
    
        if (!languageId)
        {
            languageId = currentUserLanguage();
        }
    
        if (!userId)
        {
            userId = curUserId();
        }
    
        if (_resolveDefaultTemplate && !this.printSrsOriginalDesign() && !this.isPrintedReportProvided())
        {
            if (!templateId && reportId)
            {
                templateId = DocReportTable::findDefaultTemplateReportId(reportId, companyId, languageId, false).TemplateId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(boolean _validateXmlDs = true, boolean _validateTemplate = true, boolean _printValidationErrors = true)
    {
        boolean                 isValid;
        DocReportTemplate       reportTemplate;
        DocReportTable          reportTableActiveReport;
        str                     errorMsg;
    
    
        isValid = true;
    
        /* Print report using Docentric template */
        if (!this.printSrsOriginalDesign() && !this.isPrintedReportProvided())
        {
            // Validate report.
            if (!this.parmReportId())
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX:ReportIdIsNotSet");
                }
                return isValid;
            }

            reportTableActiveReport = DocReportTable::findActiveReport(this.parmReportId());
            if (!reportTableActiveReport)
            {
                isValid = false;

                if (_printValidationErrors)
                {
                    // Active report not found in Docentric report setup while the report is printed using a Docentric template.
                    // Check if the report exists in Docentric report setup as inactive to inform the user better.
                    DocReportTable reportTable = DocReportTable::findReportId(this.parmReportId());
                    if (reportTable)
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:PrintDocentricTemplateInactiveReportErrMsg", this.parmTemplateId() ? this.parmTemplateId() : DocConstant::DefaultTemplatePlaceholder));
                    }
                    else  // Report not found in Docentric report setup.
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:PrintDocentricTemplateNotRegisteredReportErrMsg", this.parmTemplateId() ? this.parmTemplateId() : DocConstant::DefaultTemplatePlaceholder));
                    }
                }

                return isValid;
            }
            
            // Validate language.
            if (this.parmLanguageId())
            {
                if (!LanguageTable::exist(this.parmLanguageId()))
                {
                    isValid = false;
                    if (_printValidationErrors)
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:LanguageNotExist", this.parmLanguageId()));
                    }
                    return isValid;
                }
            }
    
            // Validate the report data source.
            if (_validateXmlDs)
            {
                if (!this.parmXmlDataSourceStr())
                {
                    isValid = false;
                    if (_printValidationErrors)
                    {
                        DocGlobalHelper::handleWarning("@DocentricAX:ReportDataSourceNotSet");
                    }
                    return isValid;
                }
            }
    
            // Validate the report template.
            if (_validateTemplate)
            {
                errorMsg = '';
                if (this.parmTemplateId())
                {
                    reportTemplate = DocReportTemplate::findTemplateIdUsingRules(this.parmTemplateId(), this.parmCompanyId(), this.parmLanguageId(), false);

                    // Check if the provided report template is assigned to the provided report ID.
                    if (reportTemplate.RecId != 0 && reportTableActiveReport.RecId != reportTemplate.Report)
                    {
                        DocReportTable parentReport = DocReportTable::find(reportTemplate.Report);
                        errorMsg = strFmt("@DocentricAX:TemplateIsNotAssignedToReport", this.parmTemplateId(), parentReport.ReportId, this.parmReportId());
                    }
                    // Check if the given template exists.
                    else if (reportTemplate.RecId == 0)
                    {
                        errorMsg = strFmt("@DocentricAX:TemplateWithIdNotExist", this.parmTemplateId(), this.parmCompanyId(), this.parmLanguageId());

                        // The given template is not found. Check if it exists but it is disabled.
                        DocReportTemplate reportTemplate2 = DocReportTemplate::findTemplateIdUsingRules(this.parmTemplateId(), this.parmCompanyId(), this.parmLanguageId(), true);
                        if (reportTemplate2.RecId != 0 && reportTemplate2.IsEnabled == false)
                        {
                            errorMsg = strFmt("@DocentricAX:TemplateWithIdNotEnabled", this.parmTemplateId(), this.parmCompanyId(), this.parmLanguageId());
                        }
                    }
                }
                else  // if (!this.parmTemplateId())
                {
                    // Note that empty templateId means @DOCENTRIC_DEFAULT_TEMPLATE@ (this is AX 2012 legacy matter).
                    // Locate the default template.
                    reportTemplate = DocReportTable::findDefaultTemplateReportId(this.parmReportId(), this.parmCompanyId(), this.parmLanguageId(), false);
                    if (!reportTemplate)
                    {
                        errorMsg = strFmt("@DocentricAX:DefaultTemplateNotExist", this.parmReportId(), this.parmCompanyId(), this.parmLanguageId());

                        // The default template is not found. Check if it exists but it is disabled.
                        DocReportTemplate reportTemplate2 = DocReportTable::findDefaultTemplateReportId(this.parmReportId(), this.parmCompanyId(), this.parmLanguageId(), true);
                        if (reportTemplate2.RecId != 0 && reportTemplate2.IsEnabled == false)
                        {
                            errorMsg = strFmt("@DocentricAX:DefaultTemplateNotEnabled", DocConstant::DefaultTemplatePlaceholder, this.parmReportId());
                        }
                    }
                }
                
                if (errorMsg)
                {
                    isValid = false;
                    if (_printValidationErrors)
                    {
                        DocGlobalHelper::handleWarning(errorMsg);
                    }
                }
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSrsOriginalDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the original built-in SSRS design be printed instead of Docentric template.
    /// </summary>
    /// <returns>True if the built-in SSRS design should be used</returns>
    public boolean printSrsOriginalDesign()
    {
        return templateId == DocConstant::BuiltInSsrsDesignPlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProperty_PrintSrsOriginalDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Resets the printSrsOriginalDesign flag.
    /// </summary>
    /// <param name = "_value">Value of this property</param>
    public void setProperty_PrintSrsOriginalDesign(boolean _value)
    {
        if (_value)
        {
            templateId = DocConstant::BuiltInSsrsDesignPlaceholder;
        }
        else
        {
            templateId = '';  // This means @DOCENTRIC_DEFAULT_TEMPLATE@
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocentricDefaultTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the selected template is a default Docentric report template.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean printDocentricDefaultTemplate()
    {
        if (this.printSrsOriginalDesign())
        {
            return false;
        }

        if (templateId == '')  // This means @DOCENTRIC_DEFAULT_TEMPLATE@
        {
            return true;
        }

        str defaultTemplateId = DocReportTable::findDefaultTemplateReportId(reportId, companyId, languageId).TemplateId;
        if (defaultTemplateId == '')
        {
            // No templates found for the report.
            return false;
        }

        return templateId == defaultTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintedReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the printed report content.
    /// </summary>
    /// <param name = "_printedReport">Printed report content</param>
    /// <returns>Printed report content</returns>
    /// <remarks>Use this method in combination with the DocOutputManager methods</remarks>
    public DocPrintedReport parmPrintedReport(DocPrintedReport _printedReport = printedReport)
    {
        printedReport = _printedReport;
        return printedReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintedReportProvided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the printed report content is set.
    /// </summary>
    /// <returns>Returns true if the printed report is set.</returns>
    /// <remarks>Use this method in combination with the DocOutputManager methods</remarks>
    public boolean isPrintedReportProvided()
    {
        return printedReport != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintedReportProvidedAsPdf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the printed report is already provided and if so, if it is printed in PDF output format.
    /// </summary>
    /// <returns>True, if the printed report is provided as PDF</returns>
    public boolean isPrintedReportProvidedAsPdf()
    {
        if (!this.isPrintedReportProvided())
        {
            return false;
        }

        return printedReport.outputFileFormat() == DocFileFormat::PDF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintedReportProvidedAsSignedPdf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the printed report is already provided and if so, if it is a signed PDF document.
    /// </summary>
    /// <returns>True, if the printed report is provided as a signed PDF</returns>
    public boolean isPrintedReportProvidedAsSignedPdf()
    {
        if (this.isPrintedReportProvided())
        {
            return printedReport.isPdfReportContentSigned() == UnknownNoYes::Yes;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPdfSignature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true, if the report should be electronically signed.
    /// </summary>
    /// <returns>True, if the report should be electronically signed; otherwise returns false.</returns>
    public boolean applyPdfSignature()
    {
        DocPdfSignatureSettings signatureSettings = this.parmPdfSignatureSettings();
        return signatureSettings != null && signatureSettings.parmIsEnabled() && signatureSettings.parmSignatureCertificateSettings() != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintedReportNumberOfPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns number of pages of the printed report.
    /// Currently, only PDF and EMF formats are supported.
    /// </summary>
    /// <returns>Number of pages of the printed report</returns>
    public int getPrintedReportNumberOfPages()
    {
        if (this.isPrintedReportProvided())
        {
            return printedReport.getNumberOfPages();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintedReportDocFromContainer</Name>
				<Source><![CDATA[
    public void addPrintedReportDocFromContainer(container _printedReportContainer, DocOutputFileFormat _fileFormat)
    {
        printedReport = DocPrintedReport::createContainer(_printedReportContainer);
        printedReport.parmDocentricOutputFileFormat(_fileFormat);
        printedReport.parmIsDocentricReport(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintedReportDocFromMemoryStream</Name>
				<Source><![CDATA[
    public void addPrintedReportDocFromMemoryStream(System.IO.MemoryStream _printedReportMemoryStream, DocOutputFileFormat _fileFormat)
    {
        printedReport = DocPrintedReport::createByteArray(_printedReportMemoryStream.toArray());
        printedReport.parmDocentricOutputFileFormat(_fileFormat);
        printedReport.parmIsDocentricReport(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintedReportDocFromByteArray</Name>
				<Source><![CDATA[
    public void addPrintedReportDocFromByteArray(System.Byte[] _printedReportByteArray, DocOutputFileFormat _fileFormat)
    {
        printedReport = DocPrintedReport::createByteArray(_printedReportByteArray);
        printedReport.parmDocentricOutputFileFormat(_fileFormat);
        printedReport.parmIsDocentricReport(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintedReportDocFromImageList</Name>
				<Source><![CDATA[
    public void addPrintedReportDocFromImageList(System.Collections.IList _printedReportImageList)
    {
        printedReport = DocPrintedReport::createImageList(_printedReportImageList);
        printedReport.parmIsDocentricReport(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>reportRunId</c> parameter.
    /// </summary>
    /// <returns>
    /// The value of <c>reportRunId</c> parameter.
    /// </returns>
    /// <remarks>
    /// Report Run Id is a unique identifier given to each report run instance, generated by <c>SrsReportRunController</c>.
    /// - When a Print management report is printed, Report Run Id contains the same guid for each executed print management setting.
    /// - When a multi-document report is printed such as Customer account statement, Report Run Id contains the same guid for
    /// all printed reports (one report is printed for each of the selected customers).
    /// </remarks>
    public guid getReportRunId()
    {
        return reportRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportRunIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ReportRunId (guid) as a string without braces.
    /// </summary>
    /// <returns>ReportRunId as a string</returns>
    public str getReportRunIdStr()
    {
        return DocGlobalHelper::guid2strWithoutBraces(reportRunId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>reportRunId</c> parameter.
    /// </summary>
    /// <param name = "_reportRunId">Sets the value of <c>reportRunId</c> parameter.</param>
    /// <remarks>
    /// Report Run Id is a unique identifier given to each report run instance, generated by <c>SrsReportRunController</c>.
    /// - When a Print management report is printed, Report Run Id contains the same guid for each executed print management setting.
    /// - When a multi-document report is printed such as Customer account statement, Report Run Id contains the same guid for
    /// all printed reports (one report is printed for each of the selected customers).
    /// </remarks>
    public void setReportRunId(guid _reportRunId = newGuid())
    {
        reportRunId = _reportRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>printDestinationRunId</c> parameter.
    /// </summary>
    /// <returns>
    /// The value of <c>printDestinationRunId</c> parameter.
    /// </returns>
    /// <remarks>
    /// Print Destination Run Id is a unique identifier given to each print destination run,
    /// generated by <c>SRSPrintDestinationSettingsDelegates_printReport</c>, a subscriber method
    /// for the SRSPrintDestinationSettingsDelegates.printReport delegate.
    /// This becomes a meaningful information when a report is printed to a Preconfigured Docentric
    /// print destination, which usually contains multiple print destinations.
    /// </remarks>
    public guid getPrintDestinationRunId()
    {
        return printDestinationRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationRunIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets PrintDestinationRunId (guid) as a string without braces.
    /// </summary>
    /// <returns>PrintDestinationRunId as a string</returns>
    public str getPrintDestinationRunIdStr()
    {
        return DocGlobalHelper::guid2strWithoutBraces(printDestinationRunId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintDestinationRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>printDestinationRunId</c> parameter.
    /// </summary>
    /// <param name = "_printDestinationRunId">Sets the value of <c>printDestinationRunId</c> parameter.</param>
    /// <remarks>
    /// Print Destination Run Id is a unique identifier given to each print destination run,
    /// generated by <c>SRSPrintDestinationSettingsDelegates_printReport</c>, a subscriber method
    /// for the SRSPrintDestinationSettingsDelegates.printReport delegate.
    /// This becomes a meaningful information when a report is printed to a Preconfigured Docentric
    /// print destination, which usually contains multiple print destinations.
    /// </remarks>
    public void setPrintDestinationRunId(guid _printDestinationRunId = newGuid())
    {
        printDestinationRunId = _printDestinationRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentExecutionId</Name>
				<Source><![CDATA[
    /// <summary>Gets/Sets Current execution ID</summary>
    /// <param name = "_currentExecutionId">Current execution ID</param>
    /// <returns>Current execution ID</returns>
    /// <remarks>
    /// Current execution ID is a unique identifier created for each document generation by Docentric or SSRS engine.
    /// It differs from ReportRunId which is assigned to each report run by SrsReportRunController, and
    /// it differs from PrintDestinationRunId which is assigned to each print destination execution by Docentric pipeline.
    /// </remarks>
    public guid parmCurrentExecutionId(guid _currentExecutionId = currentExecutionId)
    {
        currentExecutionId = _currentExecutionId;
        return currentExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentExecutionIdStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets CurrentExecutionId (guid) as a string without braces.
    /// </summary>
    /// <returns>CurrentExecutionId as a string</returns>
    public str getCurrentExecutionIdStr()
    {
        return DocGlobalHelper::guid2strWithoutBraces(currentExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocGenExecutionTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets document generation execution time.
    /// </summary>
    /// <param name = "_docGenExecutionTime">Report document generation time</param>
    /// <returns>Report document generation execution time</returns>
    /// <remarks>
    /// This value is set when the report document is generated.
    /// It is used only for diagnostics purposes.
    /// </remarks>
    public int parmDocGenExecutionTime(int _docGenExecutionTime = docGenExecutionTime)
    {
        docGenExecutionTime = _docGenExecutionTime;
        return docGenExecutionTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBeingUsedOutsideSsrsPipeline</Name>
				<Source><![CDATA[
    public boolean isBeingUsedOutsideSsrsPipeline()
    {
        return printedFrom != DocReportPrintedFrom::SsrsPipeline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SSRS report parameters.
    /// </summary>
    /// <returns>Map(str parameterName, SrsReportParameter class instance)</returns>
    public Map getReportParameters()
    {
        return DocReportingHelper::getSrsReportParameters(this.parmSrsReportContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDynamicQueryParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SSRS dynamic query report parameter.
    /// </summary>
    /// <returns>Dynamic query report parameter</returns>
    public Query getDynamicQueryParameter()
    {
        return DocReportingHelper::getSrsDynamicQueryParameter(this.parmSrsReportContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintMgmtReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the report is a Print management report.
    /// </summary>
    /// <returns>True, if the report is a Print management report</returns>
    public boolean isPrintMgmtReport()
    {
        return DocPrintMgmtHelper::isPrintMgmtReport(reportId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets (the first) Print management type of the report, if this is a Print management report.
    /// </summary>
    /// <returns>The first Print management document type</returns>
    /// <remarks>
    /// PurchPurchaseOrder.Report and RFQSend.Report are such reports with multiple Print management document types.
    /// Usually, there is a single Print management document type for a SSRS report design name.
    /// To get all Print management document types for a SSRS report design name, use DocPrintMgmtHelper::getPrintMgmtDocumentTypes().
    /// </remarks>
    public PrintMgmtDocumentType getFirstPrintMgmtDocumentType()
    {
        return DocPrintMgmtHelper::getFirstPrintMgmtDocumentType(reportId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlaceholderMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains all placeholders for the report:
    /// - All Custom placeholders.
    /// - Those Standard placeholders which are used in the current print destination settings.
    /// - No User-defined placeholders.
    /// </summary>
    /// <param name = "_placeholderMap">Custom placeholder map: Map(str placeholderName, class DocPlaceholder)</param>
    /// <returns>Placeholder map</returns>
    public Map parmPlaceholderMap(Map _placeholderMap = placeholderMap)
    {
        placeholderMap = _placeholderMap;
        if (placeholderMap == null)
        {
            placeholderMap = new Map(Types::String, Types::Class);  // Map (placeholderName, DocPlaceholder object)
        }
        return placeholderMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocPlaceholder object for the given placeholder name.
    /// </summary>
    /// <param name = "_placeholderName">Placeholder name</param>
    /// <returns>The corresponding DocPlaceholder object if exists, otherwise null.</returns>
    public DocPlaceholder getPlaceholder(str _placeholderName)
    {
        if (!this.parmPlaceholderMap().exists(_placeholderName))
        {
            return null;
        }

        DocPlaceholder placeholder = placeholderMap.lookup(_placeholderName);
        return placeholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the instance of the DocPrintReportSettings class in order
    /// to be used directly with the DocGeneratorClient/DocGeneratorServer APIs.
    /// </summary>
    /// <param name="_reportId">Report ID.</param>
    /// <param name="_xmlDataSourceStr">Report data source.</param>
    /// <param name="_languageId">Runtime language ID.</param>
    /// <param name="_templateId">Template ID.</param>
    /// <param name="_companyId">Company ID.</param>
    /// <returns>The constructed instance of the DocPrintReportSettings class.</returns>
    /// <remarks>
    /// This method should be used in scenarios where the report runtime data source is generated first
    /// and afterwards the DocGeneratorClient/DocGeneratorServer APIs are invoked to generate and
    /// print report to different print destinations.
    /// </remarks>
    public static DocPrintReportSettings construct(DocReportId _reportId,
                                                   str _xmlDataSourceStr = '',
                                                   LanguageId _languageId = currentUserLanguage(),
                                                   DocReportTemplateId _templateId = '',
                                                   CompanyId _companyId = curext())
    {
        DocPrintReportSettings printReportSettings = new DocPrintReportSettings();
    
        printReportSettings.parmReportId(_reportId);
        printReportSettings.parmXmlDataSourceStr(_xmlDataSourceStr);
        printReportSettings.parmLanguageId(_languageId);
        printReportSettings.parmTemplateId(_templateId);
        printReportSettings.parmCompanyId(_companyId);
    
        // Set the default report caption.
        printReportSettings.parmReportCaption(DocReportTable::findReportId(_reportId).ReportDefaultCaption);
        if (!printReportSettings.parmReportCaption())
        {
            printReportSettings.parmReportCaption(_reportId);
        }
    
        // Set the default values.
        printReportSettings.setDefaultParmValues();
    
        return printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct and validate the instance of the DocPrintReportSettings class in
    /// order to be used directly with the DocGeneratorClient/DocGeneratorServer APIs.
    /// </summary>
    /// <param name="_reportId">Report ID.</param>
    /// <param name="_xmlDataSourceStr">Report data source.</param>
    /// <param name="_languageId">Runtime language ID.</param>
    /// <param name="_templateId">Template ID.</param>
    /// <returns>The constructed and validated instance of the DocPrintReportSettings class.</returns>
    /// <remarks>
    /// This method should be used in scenarios where the report runtime data source is generated first
    /// and afterwards the DocGeneratorClient/DocGeneratorServer APIs are invoked to generate and
    /// print report to different print destinations.
    /// </remarks>
    public static DocPrintReportSettings constructAndValidate(DocReportId _reportId,
                                                              str _xmlDataSourceStr = '',
                                                              LanguageId _languageId = currentUserLanguage(),
                                                              DocReportTemplateId _templateId = '')
    {
        DocPrintReportSettings printReportSettings = new DocPrintReportSettings();
    
        printReportSettings.parmReportId(_reportId);
        printReportSettings.parmXmlDataSourceStr(_xmlDataSourceStr);
        printReportSettings.parmLanguageId(_languageId);
        printReportSettings.parmTemplateId(_templateId);
    
        // Set the default report caption.
        printReportSettings.parmReportCaption(DocReportTable::findReportId(_reportId).ReportDefaultCaption);
        if (!printReportSettings.parmReportCaption())
        {
            printReportSettings.parmReportCaption(_reportId);
        }
    
        // Set the default values.
        printReportSettings.setDefaultParmValues();
    
        // Validate the settings.
        if (!printReportSettings.validate())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:PrintReportSettingsInvalid");
        }
    
        return printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithoutArchiveAndSrsReportContracts</Name>
				<Source><![CDATA[
    public static DocPrintReportSettings constructWithoutArchiveAndSrsReportContracts(DocPrintReportSettings _fromPrintReportSettings)
    {
        DocPrintReportSettings printReportSettings = new DocPrintReportSettings();
    
        printReportSettings.parmCompanyId(_fromPrintReportSettings.parmCompanyId());
        printReportSettings.parmHcmWorkerRecId(_fromPrintReportSettings.parmHcmWorkerRecId());
        printReportSettings.parmLanguageId(_fromPrintReportSettings.parmLanguageId());
        printReportSettings.parmPrintDestination(_fromPrintReportSettings.parmPrintDestination());
        printReportSettings.parmReportMenuItemName(_fromPrintReportSettings.parmReportMenuItemName());
        printReportSettings.parmReportMenuItemType(_fromPrintReportSettings.parmReportMenuItemType());
        printReportSettings.parmOriginalCopyType(_fromPrintReportSettings.parmOriginalCopyType());
        printReportSettings.parmDocumentTitleOriginal(_fromPrintReportSettings.parmDocumentTitleOriginal());
        printReportSettings.parmPrintMgmtSettingName(_fromPrintReportSettings.parmPrintMgmtSettingName());
        printReportSettings.parmReportCaption(_fromPrintReportSettings.parmReportCaption());
        printReportSettings.parmReportExecutionContextDataAreaId(_fromPrintReportSettings.parmReportExecutionContextDataAreaId());
        printReportSettings.parmReportExecutionContextTableId(_fromPrintReportSettings.parmReportExecutionContextTableId());
        printReportSettings.parmReportExecutionContextTableRecId(_fromPrintReportSettings.parmReportExecutionContextTableRecId());
        printReportSettings.parmReportId(_fromPrintReportSettings.parmReportId());
        printReportSettings.parmSaveToArchive(_fromPrintReportSettings.parmSaveToArchive());
        printReportSettings.parmSaveToArchiveDocuTypeId(_fromPrintReportSettings.parmSaveToArchiveDocuTypeId());
        printReportSettings.parmSaveToArchiveNote(_fromPrintReportSettings.parmSaveToArchiveNote());
        printReportSettings.parmSaveProformaToArchive(_fromPrintReportSettings.parmSaveProformaToArchive());
        // DO NOT CLONE: printReportSettings.parmSaveToArchiveSharePointMetadata()
        printReportSettings.parmSaveToArchiveSharePointMetadata(_fromPrintReportSettings.parmSaveToArchiveSharePointMetadata());
        // SKIP: printReportSettings.parmSrsReportContract();
        printReportSettings.parmTemplateId(_fromPrintReportSettings.parmTemplateId());
        printReportSettings.parmUserId(_fromPrintReportSettings.parmUserId());
        printReportSettings.parmXmlDataSourceStr(_fromPrintReportSettings.parmXmlDataSourceStr());
        printReportSettings.parmExecuteOnlyData(_fromPrintReportSettings.parmExecuteOnlyData());
        printReportSettings.parmSuppressSuccessMsg(_fromPrintReportSettings.parmSuppressSuccessMsg());
        printReportSettings.setReportRunId(_fromPrintReportSettings.getReportRunId());
        printReportSettings.setPrintDestinationRunId(_fromPrintReportSettings.getPrintDestinationRunId());
        printReportSettings.parmCurrentExecutionId(_fromPrintReportSettings.parmCurrentExecutionId());
        printReportSettings.parmDocGenExecutionTime(_fromPrintReportSettings.parmDocGenExecutionTime());
        // SKIP: printReportSettings.parmArchiveContract()
        printReportSettings.parmCustomSettings(_fromPrintReportSettings.parmCustomSettings());
        // SKIP: printReportSettings.parmPrintedReport()
        printReportSettings.parmPreviewBeforePrint(_fromPrintReportSettings.parmPreviewBeforePrint());
        // CLONE: printReportSettings.parmAttachmentRuleList()
        printReportSettings.parmAttachmentRuleList(null);
        if (_fromPrintReportSettings.parmAttachmentRuleList() != null)
        {
            printReportSettings.parmAttachmentRuleList(List::create(_fromPrintReportSettings.parmAttachmentRuleList().pack()));
        }
        printReportSettings.parmPdfPassword(_fromPrintReportSettings.parmPdfPassword());
        printReportSettings.parmPdfEncryptionAlgorithm(_fromPrintReportSettings.parmPdfEncryptionAlgorithm());

        // CLONE: printReportSettings.parmPdfEncryptionConditionSet()
        printReportSettings.parmPdfEncryptionConditionSet(null);
        if (_fromPrintReportSettings.parmPdfEncryptionConditionSet() != null)
        {
            printReportSettings.parmPdfEncryptionConditionSet(Set::create(_fromPrintReportSettings.parmPdfEncryptionConditionSet().pack()));
        }
        // DO NOT CLONE: printReportSettings.parmPdfSignatureSettings()
        printReportSettings.parmPdfSignatureSettings(_fromPrintReportSettings.parmPdfSignatureSettings());
        printReportSettings.parmPdfAConformanceLevel(_fromPrintReportSettings.parmPdfAConformanceLevel());
        printReportSettings.parmDocumentTitle(_fromPrintReportSettings.parmDocumentTitle());
        printReportSettings.parmDocumentAuthor(_fromPrintReportSettings.parmDocumentAuthor());
        printReportSettings.parmDocumentSubject(_fromPrintReportSettings.parmDocumentSubject());
        printReportSettings.parmDocumentKeywords(_fromPrintReportSettings.parmDocumentKeywords());
        // DO NOT CLONE: printReportSettings.parmPlaceholderMap()
        printReportSettings.parmPlaceholderMap(_fromPrintReportSettings.parmPlaceholderMap());
        // SKIP: printReportSettings.parmDataSourceObject()

        return printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithSameArchiveAndSrsReportContracts</Name>
				<Source><![CDATA[
    public static DocPrintReportSettings constructWithSameArchiveAndSrsReportContracts(DocPrintReportSettings _fromPrintReportSettings)
    {
        DocPrintReportSettings printReportSettings = new DocPrintReportSettings();
    
        printReportSettings.parmCompanyId(_fromPrintReportSettings.parmCompanyId());
        printReportSettings.parmHcmWorkerRecId(_fromPrintReportSettings.parmHcmWorkerRecId());
        printReportSettings.parmLanguageId(_fromPrintReportSettings.parmLanguageId());
        printReportSettings.parmPrintDestination(_fromPrintReportSettings.parmPrintDestination());
        printReportSettings.parmReportMenuItemName(_fromPrintReportSettings.parmReportMenuItemName());
        printReportSettings.parmReportMenuItemType(_fromPrintReportSettings.parmReportMenuItemType());
        printReportSettings.parmOriginalCopyType(_fromPrintReportSettings.parmOriginalCopyType());
        printReportSettings.parmDocumentTitleOriginal(_fromPrintReportSettings.parmDocumentTitleOriginal());
        printReportSettings.parmPrintMgmtSettingName(_fromPrintReportSettings.parmPrintMgmtSettingName());
        printReportSettings.parmReportCaption(_fromPrintReportSettings.parmReportCaption());
        printReportSettings.parmReportExecutionContextDataAreaId(_fromPrintReportSettings.parmReportExecutionContextDataAreaId());
        printReportSettings.parmReportExecutionContextTableId(_fromPrintReportSettings.parmReportExecutionContextTableId());
        printReportSettings.parmReportExecutionContextTableRecId(_fromPrintReportSettings.parmReportExecutionContextTableRecId());
        printReportSettings.parmReportId(_fromPrintReportSettings.parmReportId());
        printReportSettings.parmSaveToArchive(_fromPrintReportSettings.parmSaveToArchive());
        printReportSettings.parmSaveToArchiveDocuTypeId(_fromPrintReportSettings.parmSaveToArchiveDocuTypeId());
        printReportSettings.parmSaveToArchiveNote(_fromPrintReportSettings.parmSaveToArchiveNote());
        printReportSettings.parmSaveProformaToArchive(_fromPrintReportSettings.parmSaveProformaToArchive());
        // DO NOT CLONE: printReportSettings.parmSaveToArchiveSharePointMetadata()
        printReportSettings.parmSaveToArchiveSharePointMetadata(_fromPrintReportSettings.parmSaveToArchiveSharePointMetadata());
        // DO NOT CLONE: printReportSettings.parmSrsReportContract();
        printReportSettings.parmSrsReportContract(_fromPrintReportSettings.parmSrsReportContract());
        printReportSettings.parmTemplateId(_fromPrintReportSettings.parmTemplateId());
        printReportSettings.parmUserId(_fromPrintReportSettings.parmUserId());
        printReportSettings.parmXmlDataSourceStr(_fromPrintReportSettings.parmXmlDataSourceStr());
        printReportSettings.parmExecuteOnlyData(_fromPrintReportSettings.parmExecuteOnlyData());
        printReportSettings.parmSuppressSuccessMsg(_fromPrintReportSettings.parmSuppressSuccessMsg());
        printReportSettings.setReportRunId(_fromPrintReportSettings.getReportRunId());
        printReportSettings.setPrintDestinationRunId(_fromPrintReportSettings.getPrintDestinationRunId());
        printReportSettings.parmCurrentExecutionId(_fromPrintReportSettings.parmCurrentExecutionId());
        printReportSettings.parmDocGenExecutionTime(_fromPrintReportSettings.parmDocGenExecutionTime());
        // DO NOT CLONE: printReportSettings.parmArchiveContract()
        printReportSettings.parmArchiveContract(_fromPrintReportSettings.parmArchiveContract());
        printReportSettings.parmCustomSettings(_fromPrintReportSettings.parmCustomSettings());
        // SKIP: printReportSettings.parmPrintedReport()
        printReportSettings.parmPreviewBeforePrint(_fromPrintReportSettings.parmPreviewBeforePrint());
        // CLONE: printReportSettings.parmAttachmentRuleList()
        printReportSettings.parmAttachmentRuleList(null);
        if (_fromPrintReportSettings.parmAttachmentRuleList() != null)
        {
            printReportSettings.parmAttachmentRuleList(List::create(_fromPrintReportSettings.parmAttachmentRuleList().pack()));
        }
        printReportSettings.parmPdfPassword(_fromPrintReportSettings.parmPdfPassword());
        printReportSettings.parmPdfEncryptionAlgorithm(_fromPrintReportSettings.parmPdfEncryptionAlgorithm());

        // CLONE: printReportSettings.parmPdfEncryptionConditionSet()
        printReportSettings.parmPdfEncryptionConditionSet(null);
        if (_fromPrintReportSettings.parmPdfEncryptionConditionSet() != null)
        {
            printReportSettings.parmPdfEncryptionConditionSet(Set::create(_fromPrintReportSettings.parmPdfEncryptionConditionSet().pack()));
        }
        // DO NOT CLONE: printReportSettings.parmPdfSignatureSettings()
        printReportSettings.parmPdfSignatureSettings(_fromPrintReportSettings.parmPdfSignatureSettings());
        printReportSettings.parmPdfAConformanceLevel(_fromPrintReportSettings.parmPdfAConformanceLevel());
        printReportSettings.parmDocumentTitle(_fromPrintReportSettings.parmDocumentTitle());
        printReportSettings.parmDocumentAuthor(_fromPrintReportSettings.parmDocumentAuthor());
        printReportSettings.parmDocumentSubject(_fromPrintReportSettings.parmDocumentSubject());
        printReportSettings.parmDocumentKeywords(_fromPrintReportSettings.parmDocumentKeywords());
        // DO NOT CLONE: printReportSettings.parmPlaceholderMap()
        printReportSettings.parmPlaceholderMap(_fromPrintReportSettings.parmPlaceholderMap());
        // SKIP: printReportSettings.parmDataSourceObject()

        return printReportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static DocPrintReportSettings create(container _packedFromPrintReportSettings)
    {
        DocPrintReportSettings printReportSettings;
    
        printReportSettings = new DocPrintReportSettings();
        printReportSettings.unpack(_packedFromPrintReportSettings);
    
        return printReportSettings;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>