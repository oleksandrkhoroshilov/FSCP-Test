<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocCustomFieldsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class for Extension fields.
/// </summary>
class DocCustomFieldsHelper
{
    DocTableFieldsMetadata  customFieldsMetadata;
    Struct                  customFieldStruct;      // Struct(fieldName (str), fieldValue (anytype)) - contains pairs: field name and field value, which is strongly typed.
    Common                  common;

    #define.CustomFields('CustomFields')
    #define.Custom('_Custom')


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>common</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table record that Custom fields metadata is being collected from.
    /// </summary>
    /// <returns>Table record</returns>
    public Common common()
    {
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldNameSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set with Custom field names.
    /// </summary>
    /// <returns>Set(fieldName (str))</returns>
    public Set getFieldNameSet()
    {
        return customFieldsMetadata.customFieldNames();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDataTypeMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map with Custom field data types.
    /// </summary>
    /// <returns>Map(fieldName (str), SysCustomFieldFieldType (enum))</returns>
    public Map getFieldDataTypeMap()
    {
        return customFieldsMetadata.customFieldDataTypes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the custom field data type.
    /// </summary>
    /// <param name = "_customFieldName">Custom field name</param>
    /// <returns>The enum value SysCustomFieldFieldType - the data type of the given custom field</returns>
    public SysCustomFieldFieldType getFieldDataType(str _customFieldName)
    {
        if (this.getFieldDataTypeMap().exists(_customFieldName))
        {
            return this.getFieldDataTypeMap().lookup(_customFieldName);
        }

        return SysCustomFieldFieldType::Undefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldLabelIdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map with Custom field label IDs.
    /// </summary>
    /// <returns>Map(fieldName (str), fieldLabelId (str))</returns>
    public Map getFieldLabelIdMap()
    {
        return customFieldsMetadata.customFieldLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the custom field label ID.
    /// </summary>
    /// <param name = "_customFieldName">Custom field name</param>
    /// <returns>The label ID of the given custom field</returns>
    public str getFieldLabelId(str _customFieldName)
    {
        if (this.getFieldLabelIdMap().exists(_customFieldName))
        {
            return this.getFieldLabelIdMap().lookup(_customFieldName);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldHelpTextIdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map with Custom field help text IDs.
    /// </summary>
    /// <returns>Map(fieldName(str), fieldHelpTextId (str))</returns>
    public Map getFieldHelpTextIdMap()
    {
        return customFieldsMetadata.customFieldHelpTexts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldHelpTextId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the custom field help text ID.
    /// </summary>
    /// <param name = "_customFieldName">Custom field name</param>
    /// <returns>The help text ID of the given custom field</returns>
    public str getFieldHelpTextId(str _customFieldName)
    {
        if (this.getFieldHelpTextIdMap().exists(_customFieldName))
        {
            return this.getFieldHelpTextIdMap().lookup(_customFieldName);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValueStruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Struct object containing pairs: field name and field value, which is strongly typed.
    /// </summary>
    /// <returns>Struct(fieldName (str), fieldValue (anytype))</returns>
    public Struct getFieldValueStruct()
    {
        if (customFieldStruct == null)
        {
            this.retrieveCustomFields();
        }

        return customFieldStruct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the custom field value.
    /// </summary>
    /// <param name = "_customFieldName">Custom field name</param>
    /// <returns>Custom field value</returns>
    public anytype getFieldValue(str _customFieldName)
    {
        if (customFieldStruct.exists(_customFieldName))
        {
            return customFieldStruct.value(_customFieldName);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name = "_common">Underlaying table record to retrieve the Custom fields values from</param>
    /// <param name = "_customFieldsMetadata">Custom fields metadata</param>
    protected void new(Common _common, DocTableFieldsMetadata _customFieldsMetadata)
    {
        common = _common;

        if (_customFieldsMetadata)
        {
            customFieldsMetadata = _customFieldsMetadata;
        }
        else
        {
            customFieldsMetadata = DocTableFieldsMetadata::construct(tableId2Name(_common.TableId));
        }

        customFieldStruct = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs helper class instance for getting custom fields.
    /// </summary>
    /// <param name = "_common">Table buffer containing custom fields</param>
    /// <param name = "_customFieldsMetadata">Custom fields metadata</param>
    /// <returns>An instance of the DocCustomFieldsHelper class</returns>
    public static DocCustomFieldsHelper construct(Common _common, DocTableFieldsMetadata _customFieldsMetadata = null)
    {
        if (_customFieldsMetadata && _customFieldsMetadata.tableId() != _common.TableId) 
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt('Invalid parameters: _customFieldsMetadata based on table (%1) differs from _common (%2)', _customFieldsMetadata.tableName(), tableId2Name(_common.TableId)));
        }

        DocCustomFieldsHelper customFieldsHelper = new DocCustomFieldsHelper(_common, _customFieldsMetadata);
        return customFieldsHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCustomFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets custom fields values.
    /// </summary>
    protected void retrieveCustomFields()
    {
        customFieldStruct = new Struct();

        try
        {
            SetEnumerator se = this.getFieldNameSet().getEnumerator();
            while (se.moveNext())
            {
                str fieldName = se.current();
                
                // Get the custom field value and add it to customFieldStruct.
                anytype fieldValue = DocCustomFieldsHelper::getCustomFieldValue(common, fieldName);

                if (this.getFieldDataType(fieldName) == SysCustomFieldFieldType::Boolean)
                {
                    boolean fieldValueBoolean = fieldValue;
                    customFieldStruct.add(fieldName, fieldValueBoolean);
                }
                else
                {
                    customFieldStruct.add(fieldName, fieldValue);
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt('Error while retrieving Custom fields for the %1 table', tableId2Name(common.TableId)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Error while retrieving Custom fields for the %1 table', tableId2Name(common.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the given custom field.
    /// </summary>
    /// <param name = "_common">Table buffer containing custom fields</param>
    /// <param name = "_customFieldName">Custom field name with or without the '_Custom' suffix</param>
    /// <returns>Custom field value</returns>
    public static anytype getCustomFieldValue(Common _common, str _customFieldName)
    {
        str customFieldName = _customFieldName;
        if (!strEndsWith(customFieldName, #Custom))
        {
            customFieldName = customFieldName + #Custom;
        }
        
        if (fieldName2Id(_common.TableId, customFieldName))
        {
            anytype customFieldValue = _common.getFieldValue(customFieldName);
            return customFieldValue;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomFieldPickListValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets custom field pick list values for the given custom field.
    /// </summary>
    /// <param name = "_tableName">Table name</param>
    /// <param name = "_customFieldName">Custom field name</param>
    /// <returns>Container that contains all available pick list values</returns>
    public static container getCustomFieldPickListValues(str _tableName, str _customFieldName)
    {
        container                     pickListValues;
        SysCustomFieldPicklist        sysCustomFieldPicklist;
        SysCustomFieldPickListValues  sysCustomFieldPickListValues;

        While select TableName, FieldName, Id from sysCustomFieldPicklist
            where sysCustomFieldPicklist.TableName == _tableName
            && sysCustomFieldPicklist.FieldName == _customFieldName
        join Sequence, PicklistId, Value from sysCustomFieldPickListValues
            order by sysCustomFieldPickListValues.Sequence
            where sysCustomFieldPickListValues.PicklistId == sysCustomFieldPicklist.Id
        {
            pickListValues += sysCustomFieldPickListValues.Value;
        }

        return pickListValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAllCustomFieldsToDataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all custom fields from the given table buffer to the given data record.
    /// If the provided table buffer does not have any custom field defined, no data fields are added to _addingRecord.
    /// </summary>
    /// <param name = "_commonWithCustomFields">Table buffer containing custom fields</param>
    /// <param name = "_addingRecord">Data record</param>
    /// <param name = "_addAsChildRecord">Should custom fields be added to the given data record as a child record</param>
    /// <param name = "_customFieldsMetadata">Custom fields metadata</param>
    /// <returns>False, if the given table buffer doesn't contain any custom field</returns>
    public static boolean addAllCustomFieldsToDataRecord(Common _commonWithCustomFields, DocXmlRecord _addingRecord, boolean _addAsChildRecord = true, 
                                                         DocTableFieldsMetadata _customFieldsMetadata = null)
    {
        if (!_commonWithCustomFields || !_addingRecord)
        {
            return false;
        }

        // Gets the all custom fields.
        DocCustomFieldsHelper customFieldsHelper = DocCustomFieldsHelper::construct(_commonWithCustomFields, _customFieldsMetadata);
        Struct customFieldStruct = customFieldsHelper.getFieldValueStruct();

        if (customFieldStruct.fields() == 0)
        {
            return false;
        }

        DocXmlRecord customFieldsDataRecord = _addingRecord;
        if (_addAsChildRecord)
        {
            // Create a child data record named as 'CustomFields'.
            str customFieldsDataRecordName = strFmt('%1_%2', #CustomFields, tableId2Name(_commonWithCustomFields.TableId));
            if (_addingRecord.recordBuildingContext().isDesignTime())
            {
                customFieldsDataRecord = _addingRecord.addChildCalculatedRecord(customFieldsDataRecordName, strFmt("@DocentricAX3:CustomFieldsForTable", tableId2PName(_commonWithCustomFields.TableId)));
            }
            else
            {
                customFieldsDataRecord = _addingRecord.addChildCalculatedRecord(customFieldsDataRecordName);
            }

            /* NOTE: SingleRecord is introduced in 3.3.9 for Docentric NextGen */
            customFieldsDataRecord.setSingleRecord(true);
        }

        str customFieldName;
        for (int i = 1; i <= customFieldStruct.fields(); i++)
        {
            try
            {
                customFieldName = customFieldStruct.fieldName(i);

                // Get the custom field's value and label ID.
                anytype customFieldValue = customFieldsHelper.getFieldValue(customFieldName);
                str customFieldLabelId = DocConstantDSP::CF_LABEL_PREFIX + customFieldsHelper.getFieldLabelId(customFieldName);
                customFieldsDataRecord.addCalculatedField(customFieldName, customFieldValue, customFieldLabelId);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(),
                        strFmt('Error while adding Custom field (%1) of the table (%2) to the data record (%3)',
                               customFieldName, tableId2Name(_commonWithCustomFields.TableId), _addingRecord.getRecordName()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddAllCustomFieldsToDataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all custom fields from the given table buffer to the given data record.
    /// If the provided table buffer does not have any custom field defined, no data fields are added to _addingRecord.
    /// If an error occurs, no exception is thrown.
    /// </summary>
    /// <param name = "_commonWithCustomFields">Table buffer containing custom fields</param>
    /// <param name = "_addingRecord">Data record</param>
    /// <param name = "_addAsChildRecord">Should custom fields be added to the given data record as a child record</param>
    /// <param name = "_customFieldsMetadata">Custom fields metadata</param>
    public static void tryAddAllCustomFieldsToDataRecord(Common _commonWithCustomFields, DocXmlRecord _addingRecord, boolean _addAsChildRecord = true,
                                                         DocTableFieldsMetadata _customFieldsMetadata = null)
    {
        try
        {
            DocCustomFieldsHelper::addAllCustomFieldsToDataRecord(_commonWithCustomFields, _addingRecord, _addAsChildRecord, _customFieldsMetadata);
        }
        catch
        {
            // Swallow the exception (although the previous errors will be written in Infolog).
            Global::exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomFieldToDataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given custom field from the given table buffer to the given data record, including custom field label in the given language.
    /// </summary>
    /// <param name = "_customFieldName">Custom field name</param>
    /// <param name = "_commonWithCustomFields">Table buffer containing the given custom field</param>
    /// <param name = "_addingRecord">Data record that the given custom field should be added as a calculated field</param>
    /// <param name = "_customFieldsMetadata">Custom fields metadata</param>
    /// <returns>True, if the given custom field is successfully added to the given data record</returns>
    public static boolean addCustomFieldToDataRecord(str _customFieldName, Common _commonWithCustomFields, DocXmlRecord _addingRecord, 
                                                     DocTableFieldsMetadata _customFieldsMetadata = null)
    {
        if (!_commonWithCustomFields || !_addingRecord || _customFieldName == '')
        {
            return false;
        }

        str customFieldName = _customFieldName;
        if (!strEndsWith(customFieldName, #Custom))
        {
            customFieldName = customFieldName + #Custom;
        }

        if (_addingRecord.containField(customFieldName))
        {
            return false;
        }

        try
        {
            // Get the custom field's value.
            DocCustomFieldsHelper customFieldsHelper = DocCustomFieldsHelper::construct(_commonWithCustomFields, _customFieldsMetadata);
            anytype customFieldValue = customFieldsHelper.getFieldValue(customFieldName);
            if (customFieldValue == null)
            {
                return false;
            }
        
            // Get the custom field's label ID.
            str customFieldLabelId = DocConstantDSP::CF_LABEL_PREFIX + customFieldsHelper.getFieldLabelId(customFieldName);
            _addingRecord.addCalculatedField(customFieldName, customFieldValue, customFieldLabelId);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt('Error while adding Custom field (%1) of the table (%2) to the data record (%3)',
                       customFieldName, tableId2Name(_commonWithCustomFields.TableId), _addingRecord.getRecordName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomFieldsToDataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given custom fields from the given table buffer to the given data record, including custom field label in the given language.
    /// </summary>
    /// <param name = "_customFieldNames">Names of custom fields in form container [customFieldName1, customFieldName2, ...]</param>
    /// <param name = "_commonWithCustomFields">Table buffer containing the given custom field</param>
    /// <param name = "_addingRecord">Data record that the given custom field should be added as a calculated field</param>
    /// <param name = "_customFieldsMetadata">Custom fields metadata</param>
    public static void addCustomFieldsToDataRecord(container _customFieldNames, Common _commonWithCustomFields, DocXmlRecord _addingRecord, 
                                                   DocTableFieldsMetadata _customFieldsMetadata = null)
    {
        if (_customFieldNames == conNull() || _commonWithCustomFields == null || _addingRecord == null)
        {
            return;
        }

        DocCustomFieldsHelper customFieldsHelper = DocCustomFieldsHelper::construct(_commonWithCustomFields, _customFieldsMetadata);

        for (int i = 1; i <= conLen(_customFieldNames); i++)
        {
            str customFieldName = conPeek(_customFieldNames, i);
            if (!strEndsWith(customFieldName, #Custom))
            {
                customFieldName = customFieldName + #Custom;
            }

            if (_addingRecord.containField(customFieldName))
            {
                continue;
            }

            try
            {
                // Get the custom field's value.
                anytype customFieldValue = customFieldsHelper.getFieldValue(customFieldName);
                if (customFieldValue == null)
                {
                    continue;
                }
                
                // Get the custom field's label ID.
                str customFieldLabelId = DocConstantDSP::CF_LABEL_PREFIX + customFieldsHelper.getFieldLabelId(customFieldName);
                _addingRecord.addCalculatedField(customFieldName, customFieldValue, customFieldLabelId);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(),
                strFmt('Error while adding Custom field (%1) of the table (%2) to the data record (%3)',
                       customFieldName, tableId2Name(_commonWithCustomFields.TableId), _addingRecord.getRecordName()));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>