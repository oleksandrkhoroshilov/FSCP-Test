<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocExtensionFieldsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class for Extension fields.
/// </summary>
class DocExtensionFieldsHelper
{
    DocTableFieldsMetadata  extensionFieldsMetadata;
    Common                  common;

    private const str ExtensionFields = 'ExtensionFields';
    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>common</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table record that Extension fields metadata is being collected from.
    /// </summary>
    /// <returns>Table record</returns>
    public Common common()
    {
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldNameSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set with Extension field names.
    /// </summary>
    /// <returns>Set(fieldName (str))</returns>
    public Set getFieldNameSet()
    {
        return extensionFieldsMetadata.extensionFieldNames();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension field value.
    /// </summary>
    /// <param name = "_extensionFieldName">Extension field name</param>
    /// <returns>Extension field value</returns>
    public anytype getFieldValue(str _extensionFieldName)
    {
        if (fieldName2Id(common.TableId, _extensionFieldName))
        {
            anytype extensionFieldValue = common.getFieldValue(_extensionFieldName);
            return extensionFieldValue;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name = "_common">Underlaying table record to retrieve the Extension fields values from</param>
    /// <param name = "_extensionFieldsMetadata">Extension fields metadata</param>
    protected void new(Common _common, DocTableFieldsMetadata _extensionFieldsMetadata)
    {
        common = _common;
        
        if (_extensionFieldsMetadata)
        {
            extensionFieldsMetadata = _extensionFieldsMetadata;
        }
        else
        {
            extensionFieldsMetadata = DocTableFieldsMetadata::construct(tableId2Name(_common.TableId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs helper class instance for getting Extension fields.
    /// </summary>
    /// <param name = "_common">Table buffer containing Extension fields</param>
    /// <param name = "_extensionFieldsMetadata">Extension fields metadata</param>
    /// <returns>An instance of the DocExtensionFieldsHelper class</returns>
    public static DocExtensionFieldsHelper construct(Common _common, DocTableFieldsMetadata _extensionFieldsMetadata = null)
    {
        if (_extensionFieldsMetadata && _extensionFieldsMetadata.tableId() != _common.TableId)
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt('Invalid parameters: _extensionFieldsMetadata based on table (%1) differs from _common (%2)', _extensionFieldsMetadata.tableName(), tableId2Name(_common.TableId)));
        }

        DocExtensionFieldsHelper extensionFieldsHelper = new DocExtensionFieldsHelper(_common, _extensionFieldsMetadata);
        return extensionFieldsHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAllExtensionFieldsToDataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all Extension fields from the given table buffer to the given data record.
    /// If the provided table buffer does not have any Extension field defined, no data fields are added to _addingRecord.
    /// </summary>
    /// <param name = "_commonWithExtensionFields">Table buffer containing Extension fields</param>
    /// <param name = "_addingRecord">Data record</param>
    /// <param name = "_addAsChildRecord">Should Extension fields be added to the given data record as a child record</param>
    /// <param name = "_extensionFieldsMetadata">Extension fields metadata</param>
    /// <returns>False, if the given table buffer doesn't contain any Extension field</returns>
    public static boolean addAllExtensionFieldsToDataRecord(Common _commonWithExtensionFields, DocXmlRecord _addingRecord, boolean _addAsChildRecord = true,
                                                            DocTableFieldsMetadata _extensionFieldsMetadata = null)
    {
        if (!_commonWithExtensionFields || !_addingRecord)
        {
            return false;
        }

        // Get all Extension field names. Exit if there are no Extension fields.
        DocExtensionFieldsHelper extensionFieldsHelper = DocExtensionFieldsHelper::construct(_commonWithExtensionFields, _extensionFieldsMetadata);
        Set extensionFieldNameSet = extensionFieldsHelper.getFieldNameSet();
        if (extensionFieldNameSet.empty())
        {
            return false;
        }

        // Add a child record for the Extension fields, if needed.
        DocXmlRecord extensionFieldsDataRecord = _addingRecord;
        if (_addAsChildRecord)
        {
            if (_addingRecord.recordBuildingContext().isDesignTime())
            {
                extensionFieldsDataRecord = _addingRecord.addChildRecord(_commonWithExtensionFields, strFmt("@DocentricAX3:ExtensionFieldsForTable", tableId2PName(_commonWithExtensionFields.TableId))).setRecordName(DocExtensionFieldsHelper::ExtensionFields);
            }
            else
            {
                extensionFieldsDataRecord = _addingRecord.addChildRecord(_commonWithExtensionFields).setRecordName(DocExtensionFieldsHelper::ExtensionFields);
            }

            /* NOTE: SingleRecord is introduced in 3.3.9 for Docentric NextGen */
            extensionFieldsDataRecord.setSingleRecord(true);
        }

        // Add the Extension fields with values to the data record.
        str extensionFieldName;
        SetEnumerator extensionFieldNameSetEnum = extensionFieldNameSet.getEnumerator();
        while (extensionFieldNameSetEnum.moveNext())
        {
            try
            {
                extensionFieldName = extensionFieldNameSetEnum.current();
                extensionFieldsDataRecord.addField(extensionFieldName);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(),
                        strFmt('Error while adding Extension field (%1) of the table (%2) to the data record (%3)',
                               extensionFieldName, tableId2Name(_commonWithExtensionFields.TableId), _addingRecord.getRecordName()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddAllExtensionFieldsToDataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all Extension fields from the given table buffer to the given data record.
    /// If the provided table buffer does not have any Extension field defined, no data fields are added to _addingRecord.
    /// If an error occurs, no exception is thrown.
    /// </summary>
    /// <param name = "_commonWithExtensionFields">Table buffer containing Extension fields</param>
    /// <param name = "_addingRecord">Data record</param>
    /// <param name = "_addAsChildRecord">Should Extension fields be added to the given data record as a child record</param>
    /// <param name = "_extensionFieldsMetadata">Extension fields metadata</param>
    public static void tryAddAllExtensionFieldsToDataRecord(Common _commonWithExtensionFields, DocXmlRecord _addingRecord, boolean _addAsChildRecord = true,
                                                            DocTableFieldsMetadata _extensionFieldsMetadata = null)
    {
        try
        {
            DocExtensionFieldsHelper::addAllExtensionFieldsToDataRecord(_commonWithExtensionFields, _addingRecord, _addAsChildRecord, _extensionFieldsMetadata);
        }
        catch
        {
            // Swallow the exception (although the previous errors will be written in Infolog).
            Global::exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>