<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderERModelMappingRun</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
using SL = Microsoft.Dynamics365.LocalizationFramework.XppSupportLayer;
using UL = Docentric.AX.Framework.Utilities;
using Microsoft.Dynamics.ElectronicReporting.Instrumentation;
using System.Collections;
using System.Diagnostics;

/// <summary>
/// The DocDataSourceProviderERModelMappingRun class is an ERModelMappingRun data source provider.
/// </summary>
public class DocDataSourceProviderERModelMappingRun implements ERIModelMappingRun
{
    private const str Delimiter = '{|}';

    protected ERModelDataSourceHandler erModelDataSource;
    protected ERModelDefinitionParameters erModelDefinitionParameters;
    protected ERModelMappingTable erModelMappingTable;
    protected ERISolutionLabelRepository erSolutionLabelRepository;
    protected DocERModelDataToIncludeInDS erModelDataToIncludeInDS;
    protected ERIDataContainerDescriptor erDataContainerDescriptor;
    protected ERIDataFetchSharedData erDataFetchSharedData;
    protected DocXmlRecordBuilder docXmlRecordBuilder;
    protected LanguageId dsLanguageId;
    protected boolean isRuntime;
    protected boolean isExecutingInBatch;

    private ERIExecutionLogger erExecutionLogger;
    private int numberOfSolutionErrors;
    private int numberOfValidationErrors;
    private Generic.List<ERIRuntimeSolutionError> solutionErrors;
    private Generic.List<ERIRuntimeValidationError> validationErrors;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRecordBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the record builder.
    /// </summary>
    /// <param name = "_docXmlRecordBuilder">A rrecord builder</param>
    /// <returns>Record builder.</returns>
    public DocXmlRecordBuilder parmRecordBuilder(DocXmlRecordBuilder _docXmlRecordBuilder = docXmlRecordBuilder)
    {
        docXmlRecordBuilder = _docXmlRecordBuilder;
        return docXmlRecordBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelRepository</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the label repository for the report.
    /// </summary>
    /// <param name = "_erSolutionLabelRepository">Label repository</param>
    /// <returns>Label repository.</returns>
    public ERISolutionLabelRepository parmLabelRepository(ERISolutionLabelRepository _erSolutionLabelRepository = erSolutionLabelRepository)
    {
        erSolutionLabelRepository = _erSolutionLabelRepository;
        return erSolutionLabelRepository;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDsLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the report language.
    /// </summary>
    /// <param name = "_dsLanguageId">Language Id</param>
    /// <returns>Language Id.</returns>
    public LanguageId parmDsLanguageId(LanguageId _dsLanguageId = dsLanguageId)
    {
        dsLanguageId = _dsLanguageId;
        return dsLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModelMappingTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the ER Model Mapping record.
    /// </summary>
    /// <param name = "_erModelMappingTable">ER Model Mapping record</param>
    /// <returns>ER Model Mapping record.</returns>
    public ERModelMappingTable parmModelMappingTable(ERModelMappingTable _erModelMappingTable = erModelMappingTable)
    {
        erModelMappingTable = _erModelMappingTable;
        return erModelMappingTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRuntime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the execution mode of the report. The DDSP file is generated when the flag is false.
    /// </summary>
    /// <param name = "_isRuntime">Is the report executing in run-time</param>
    /// <returns>True/False.</returns>
    public boolean parmIsRuntime(boolean _isRuntime = isRuntime)
    {
        isRuntime = _isRuntime;
        return isRuntime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsExecutingInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if a report is executing in batch.
    /// </summary>
    /// <param name = "_isExecutingInBatch">Is the report executing in batch</param>
    /// <returns>True/False.</returns>
    public boolean parmIsExecutingInBatch(boolean _isExecutingInBatch = isExecutingInBatch)
    {
        isExecutingInBatch = _isExecutingInBatch;
        return isExecutingInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERModelDataToIncludeInDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets which model data needs to be included in DDSP.
    /// </summary>
    /// <param name = "_erModelDataToIncludeInDS">Specifies which model data needs to be included in DDSP</param>
    /// <returns>Model data included in DDSP</returns>
    public DocERModelDataToIncludeInDS parmERModelDataToIncludeInDS(DocERModelDataToIncludeInDS _erModelDataToIncludeInDS = erModelDataToIncludeInDS)
    {
        erModelDataToIncludeInDS = _erModelDataToIncludeInDS;
        return erModelDataToIncludeInDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPerformanceCounterEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the telemetry performance counter setting.
    /// </summary>
    /// <returns>True/False.</returns>
    public boolean isPerformanceCounterEnabled()
    {
        return !ERParameterTable::find().TelemetryPerformanceCounterDisabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns parameters of datasources.
    /// </summary>
    /// <returns>Parameters of datasources.</returns>
    public ERIModelDefinitionParameters getParameters()
    {
        if (!erModelDefinitionParameters)
        {
            erModelDefinitionParameters = erModelDataSource.createParameters('', '');
        }
        return erModelDefinitionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal variables.
    /// </summary>
    public void init()
    {
        if (erModelMappingTable)
        {
            erExecutionLogger = this.createExecutionLogger();

            erModelDataSource = this.getDataSource();
            if (erSolutionLabelRepository != null)
            {
                erModelDataSource.set_labelRepository(erSolutionLabelRepository);
            }

            DictClass erModelBasedDataSourceHandlerDictClass = new DictClass(className2Id(identifierStr(ERModelBasedDataSourceHandler_Extension)));
            if (erModelBasedDataSourceHandlerDictClass)
            {
                erModelBasedDataSourceHandlerDictClass.callStatic(identifierStr(parmDataContainerDescriptorID), erModelDataSource, erModelMappingTable.DataContainerDescriptor);
            }

            if (erModelDataSource.GetSharedData() == null)
            {
                erModelDataSource.set_sharedData(this.getSharedData());
            }
            erDataContainerDescriptor = erModelDataSource.getDescriptorByMapping(erModelDataSource.getModelMapping());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a model mapping.
    /// </summary>
    public void run()
    {
        ERModelMappingRunResult modelMappingRunResult = this.runAndReturnResult();
        this.processModelMappingRunResult(modelMappingRunResult, this.isRuntime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUnattended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a model mapping without interaction with user.
    /// </summary>
    public void runUnattended()
    {
        ERModelMappingRunResult modelMappingRunResult = this.runUnattendedAndReturnResult();
        this.processModelMappingRunResult(modelMappingRunResult, this.isRuntime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAndReturnResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a model mapping.
    /// </summary>
    /// <returns>A model mapping run result.</returns>
    public ERIModelMappingRunResult runAndReturnResult()
    {
        return this.runUnattendedAndReturnResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUnattendedAndReturnResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a model mapping without interaction with user.
    /// </summary>
    /// <returns>A model mapping run result.</returns>
    public ERIModelMappingRunResult runUnattendedAndReturnResult()
    {
        ERIModelMappingRunResult erModelMappingRunResult = null;
        boolean success = false;
        boolean isExceptionCalledByValidation = false;
        ERPerformanceCounter erPerformanceCounter = null;

        // Create a windows event log instance to enable logging to windows event log
        ElectronicReportingEventSource log = ElectronicReportingEventSource::get_Log();
        log.FormatMappingRunStart('', '', guid2Str(erModelMappingTable.GUID), erModelMappingTable.Name);
        Stopwatch stopwatch = Stopwatch::StartNew();

        solutionErrors = new Generic.List<ERIRuntimeSolutionError>();
        validationErrors = new Generic.List<ERIRuntimeValidationError>();

        try
        {
            // Check if performance counter is enabled
            if (this.isPerformanceCounterEnabled())
            {
                erPerformanceCounter = new ERPerformanceCounter(erModelDataSource.GetSharedData());
            }
            
            // Create an execution services instance to enable logging to execution log table
            ERIExecutionServices executionServices = this.createExecutionServices();
            this.logSelectedModelMapping();

            // Runs a given data source and returns a result container
            ERMappedModelDataContainer resultContainer = ERCast::asAny(this.getResultContainer());
            this.applyExecutionService(resultContainer, executionServices);
            
            // Creates an xml document with mapped values.
            this.generateXMLDataSourceERModeMapping(docXmlRecordBuilder, resultContainer);

            // Shared context instance contains potential validation errors created during model mapping evaluation.
            // The Post-validation action setting in the model mapping validations determines if the error is thrown or only remark is written.
            // The Write to log setting in the model mapping validations determines where to the validation errors are logged.
            ERSharedContext sharedContext = resultContainer.getDataContext().parmSharedContext();
            if (sharedContext != null)
            {
                numberOfValidationErrors = sharedContext.GetNumberOfValidationWarnings();
                validationErrors.AddRange(sharedContext.ValidationErrors);
                // Check if error should be thrown
                if (sharedContext.ParmValidationError())
                {
                    isExceptionCalledByValidation = sharedContext.ParmIsExceptionCalledByValidation();

                    ERRuntimeSolutionError solutionError = new ERRuntimeSolutionError("@ElectronicReportingMapping:ValidationErrorsExist");
                    solutionErrors.Add(solutionError);

                    throw Exception::Error;
                }
            }

            success = true;
        }
        catch (Exception::CLRError)
        {
            if (this.isRuntime)
            {
                if (this.isLatestERClrException())
                {
                    throw Exception::Error;
                }
                else
                {
                    throw this.getCLRError();
                }
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        finally
        {
            // Create a model mapping run result
            erModelMappingRunResult = new ERModelMappingRunResult(
                ERCast::asAny(validationErrors), 
                ERCast::asAny(solutionErrors), 
                isExceptionCalledByValidation,
                erPerformanceCounter != null ? erPerformanceCounter.GetDataSourceRecordsCount() : 0,
                erPerformanceCounter != null ? erPerformanceCounter.GetFormatNodesCount() : 0);

            // Save logged data into execution log table
            if (erExecutionLogger != null && erExecutionLogger.inDebugMode())
            {
                UL.ReflectionHelper::InvokeInstanceMethod(erExecutionLogger, 'save');
            }

            stopwatch.Stop();

            // Prepare result information for event log
            this.sendTotalEventLog(
                log,
                stopwatch.ElapsedMilliseconds,
                success,
                EREventLogFailReason::Other,
                numberOfValidationErrors,
                erModelMappingRunResult);
        }

        return erModelMappingRunResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a given parameter for the format mapping run.
    /// </summary>
    /// <param name = "_emModelDefinitionParamsAction">The given parameter.</param>
    /// <returns>This.</returns>
    ERIModelMappingRun withParameter(ERIModelDefinitionParamsAction _emModelDefinitionParamsAction)
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the given parameters.
    /// </summary>
    /// <param name = "_erModelDefinitionParameters">The given parameters.</param>
    public void setParameters(ERIModelDefinitionParameters _erModelDefinitionParameters)
    {
        erModelDefinitionParameters = _erModelDefinitionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a data source.
    /// </summary>
    /// <returns>A data source.</returns>
    public ERModelDataSourceHandler getDataSource()
    {
        if (!erModelDataSource)
        {
            erModelDataSource = new ERModelDataSourceHandler(erModelMappingTable.dataModel().GUID, null, erModelMappingTable.guid);
            erModelDataSource.parmReturnEmptyForNotMapped(true);
            erModelDataSource.set_locale(this.getFormattingParameters());
        }
        return erModelDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a given data source and returns a result container.
    /// </summary>
    /// <returns>A result container.</returns>
    public ERIDataContainer getResultContainer()
    {
        return erModelDataSource.getValue(ERCast::asAny(erModelDefinitionParameters), null, this.getSharedData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a shared data.
    /// </summary>
    /// <returns>A shared data.</returns>
    public ERIDataFetchSharedData getSharedData()
    {
        if (!erDataFetchSharedData)
        {
            erDataFetchSharedData = new ERDataFetchSharedDataStorage(true);
        }
        return erDataFetchSharedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXMLDataSourceERModeMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an xml document with mapped values.
    /// </summary>
    /// <param name = "_docXmlRecordBuilder">A record builder.</param>
    /// <param name = "_resultDataContainer">A model mapping result container.</param>
    private void generateXMLDataSourceERModeMapping(DocXmlRecordBuilder _docXmlRecordBuilder, ERMappedModelDataContainer _resultDataContainer)
    {
        _docXmlRecordBuilder.goToTopRecord();
        DocXmlRecord docXmlRecord = _docXmlRecordBuilder.currentRecord();
        numberOfValidationErrors = 0;

        // Get root data container descriptor
        var descriptor = UL.ReflectionHelper::GetField(erDataContainerDescriptor, 'descriptor', false) as ERDataContainerDescriptor;
        if (descriptor != null && descriptor.get_IsRoot())
        {
            var name = strReplace(DocGlobalHelper::escapeString(DocGlobalHelper::capitalizeFirstLetterOfEachWord(descriptor.getName())), '_', '');
            str labelCode = this.GetLabelCode(descriptor);
            docXmlRecord = docXmlRecord.addChildCalculatedRecord(name, labelCode).setSingleRecord(true);
        }

        this.outputDataContainer(docXmlRecord, _resultDataContainer, _resultDataContainer, erDataContainerDescriptor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputDataContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs container.
    /// </summary>
    /// <param name = "_docXmlRecord">A record.</param>
    /// <param name = "_resultDataContainer">A result container.</param>
    /// <param name = "_dataContainer">A container.</param>
    /// <param name = "_erDataContainerDescriptor">A container descriptor.</param>
    /// <param name = "_path">A current evaluating path in a result container.</param>
    private void outputDataContainer(
        DocXmlRecord _docXmlRecord,
        ERMappedModelDataContainer _resultDataContainer,
        ERIDataContainer _dataContainer,
        ERIDataContainerDescriptor _erDataContainerDescriptor, 
        str _path = '')
    {
        ERIDataItemDescriptorEnumerator i = _erDataContainerDescriptor.get_Enumerator();
        ERIDataItemDescriptor itemDescriptor;
        
        while (i.moveNext())
        {
            // Get the current item descriptor from a container descriptor
            itemDescriptor = i.get_Current();

            System.Exception ex;
            anytype value = null;
            boolean hasError;
            str labelCode;
            str path;

            try
            {
                // Get the current evaluating path in the result container
                path = this.getPath(_resultDataContainer, _path, itemDescriptor.get_Name());
                // Check which model data should be included in DDSP
                if (this.erModelDataToIncludeInDS == DocERModelDataToIncludeInDS::IncludeMappedDataOnly)
                {
                    // Check if current model item or any nested model items are bound to datasource
                    if (!this.IsItemOrAnyNestedItemBound(_resultDataContainer, path))
                    {
                        continue;
                    }
                }

                if (_dataContainer != null)
                {
                    // Get the current item in the result container
                    value = _dataContainer.get_Item(itemDescriptor.get_Name());
                }

                // Update last infolog line with additional information if the validation error occurred when the current item was evaluated
                this.updateInfolog(_resultDataContainer, path);

                // Get the label code for the current item
                var dataItemDescriptor = UL.ReflectionHelper::GetProperty(itemDescriptor, 'DataItemDescriptor', false) as ERIDataItemDescriptor;
                if (dataItemDescriptor != null)
                {
                    labelCode = this.GetLabelCode(dataItemDescriptor);
                }
                else
                {
                    labelCode = this.GetLabelCode(itemDescriptor);
                }
            }
            catch (ex)
            {
                if (ex is SL.XppException)
                {
                    if (this.canAddErrorToSolutionErrors(_resultDataContainer))
                    {
                        str errorMsg = ex.Message;
                        if (ex.InnerException)
                        {
                            ex = ex.InnerException;
                            errorMsg += ' ' + ex.Message;
                        }
                        ERRuntimeSolutionError solutionError = new ERRuntimeSolutionError(errorMsg);
                        solutionErrors.Add(solutionError);
                    }
                }
                else
                {
                    SL.PredefinedFunctions::Error(SL.LabelHelper::GetLabel(ex.Message));
                    ERRuntimeSolutionError solutionError = new ERRuntimeSolutionError(ex.Message);
                    solutionErrors.Add(solutionError);
                }
                hasError = true;
            }

            if (!this.isRuntime || (this.isRuntime && value != null && !hasError))
            {
                try
                {
                    // Output value into given record
                    this.outputDataValue(_docXmlRecord, _resultDataContainer, value, itemDescriptor, labelCode, path);
                }
                catch (ex)
                {
                    if (ex is SL.XppException)
                    {
                        if (this.canAddErrorToSolutionErrors(_resultDataContainer))
                        {
                            ERRuntimeSolutionError solutionError = new ERRuntimeSolutionError(ex.Message);
                            solutionErrors.Add(solutionError);
                        }
                    }
                    else
                    {
                        SL.PredefinedFunctions::Error(SL.LabelHelper::GetLabel(ex.Message));
                        ERRuntimeSolutionError solutionError = new ERRuntimeSolutionError(ex.Message);
                        solutionErrors.Add(solutionError);
                    }
                    hasError = true;
                }
                finally
                {
                    if (hasError)
                    {
                        // Update last infolog line with additional information if the validation error occurred when the current item was evaluated
                        this.updateInfolog(_resultDataContainer, path);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputDataValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs value into given record.
    /// </summary>
    /// <param name = "_docXmlRecord">A record.</param>
    /// <param name = "_resultDataContainer">A result container.</param>
    /// <param name = "_value">A value.</param>
    /// <param name = "_dataItemDescriptor">An item descriptor.</param>
    /// <param name = "_labelCode">A label code.</param>
    /// <param name = "_path">A current evaluating path in a result container.</param>
    public void outputDataValue(
        DocXmlRecord _docXmlRecord,
        ERMappedModelDataContainer _resultDataContainer,
        anytype _value,
        ERIDataItemDescriptor _dataItemDescriptor,
        str _labelCode,
        str _path)
    {
        ERIDataContainerDescriptor dataContainerDescriptor = _dataItemDescriptor.get_TypeDescriptor().get_DataContainerDescriptor();
        LFDataItemType dataItemType = _dataItemDescriptor.get_TypeDescriptor().get_Type();

        switch (dataItemType)
        {
            case LFDataItemType::DataContainer:
                _docXmlRecord = _docXmlRecord.addChildCalculatedRecord(_dataItemDescriptor.get_Name(), _labelCode).setSingleRecord(true);
                this.outputDataContainer(_docXmlRecord, _resultDataContainer, _value, dataContainerDescriptor, _path);
                break;
            case LFDataItemType::DataContainerList:
                this.outputDataContainerList(_docXmlRecord, _resultDataContainer, _value, dataContainerDescriptor, _dataItemDescriptor, _labelCode, _path);
                break;
            case LFDataItemType::Enum:
                var enumValue = _value as ERIEnumValue;
                if (enumValue != null || !this.isRuntime)
                {
                    enumValue = enumValue == null ? this.getDefaultValueForNull(dataItemType, _dataItemDescriptor) : enumValue;
                    var enumValueLabelCode = UL.ReflectionHelper::GetField(enumValue, 'enumValueLabel', false);
                    _docXmlRecord.addCalculatedFieldFromUserDefEnum(_dataItemDescriptor.get_Name(), enumValue.getName(), enumValueLabelCode, _labelCode);
                }
                break;
            case LFDataItemType::Date:
                if (_value is SL.Date || typeOf(_value) == Types::Date || !this.isRuntime)
                {
                    // Convert CLR date to X++ date
                    date dateValue = _value == null ? this.getDefaultValueForNull(dataItemType, _dataItemDescriptor) : (_value is SL.Date ? this.convertClrDateToXppDate(_value) : _value);
                    _docXmlRecord.addCalculatedField(_dataItemDescriptor.get_Name(), dateValue, _labelCode);
                }
                break;
            case LFDataItemType::DateTime:
                if (_value is SL.utcdatetime || typeOf(_value) == Types::UtcDateTime || !this.isRuntime)
                {
                    // Convert CLR utcdatetime to X++ utcdatetime
                    utcdatetime dateTimeValue = _value == null ? this.getDefaultValueForNull(dataItemType, _dataItemDescriptor) : (_value is SL.utcdatetime ? this.convertClrUtcDateTimeToXppUtcDateTime(_value) : _value);
                    _docXmlRecord.addCalculatedField(_dataItemDescriptor.get_Name(), dateTimeValue, _labelCode);
                }
                break;
            default:
                if (_value != null || !this.isRuntime)
                {
                    _value = _value == null ? this.getDefaultValueForNull(dataItemType, _dataItemDescriptor) : _value;
                    _docXmlRecord.addCalculatedField(_dataItemDescriptor.get_Name(), _value, _labelCode);
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputDataContainerList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Output container list.
    /// </summary>
    /// <param name = "_docXmlRecord">A record.</param>
    /// <param name = "_resultDataContainer">A result container.</param>
    /// <param name = "_dataContainerList">A current container list.</param>
    /// <param name = "_dataContainerDescriptor">A container descriptor.</param>
    /// <param name = "_dataItemDescriptor">An item descriptor.</param>
    /// <param name = "_labelCode">A label code.</param>
    /// <param name = "_path">A current evaluating path in a result container.</param>
    private void outputDataContainerList(
        DocXmlRecord _docXmlRecord, 
        ERMappedModelDataContainer _resultDataContainer, 
        ERIDataContainerList _dataContainerList, 
        ERIDataContainerDescriptor _dataContainerDescriptor, 
        ERIDataItemDescriptor _dataItemDescriptor, 
        str _labelCode, 
        str _path)
    {
        boolean itemExists = false;

        // Data container list is null when there is no child nodes with defined model binding under
        // the selected node in the model mapping schema. If the model mapping is executed in run-time,
        // this child nodes are excluded from DDSP. In design-time they are included in DDSP with the
        // default X++ values replacing the null value.
        if (_dataContainerList != null)
        {
            // Data container list is empty when the model binding for the child nodes exist under the selected node
            // but there is no data after the binding is evaluated. If the model mapping is executed in run-time, the
            // child nodes without data are excluded from DDSP. In design-time the child nodes without data are included
            // in DDSP with the default X++ values replacing the null value.
            ERIDataContainerEnumerator i = _dataContainerList.get_Enumerator();

            while (i.moveNext())
            {
                itemExists = true;
                _docXmlRecord = _docXmlRecord.addChildCalculatedRecord(_dataItemDescriptor.get_Name(), _labelCode);
                this.outputDataContainer(_docXmlRecord, _resultDataContainer, i.get_Current(), _dataContainerDescriptor, _path);
                _docXmlRecord = _docXmlRecord.getParent();
            }
        }
        if (!itemExists && !this.isRuntime)
        {
            _docXmlRecord = _docXmlRecord.addChildCalculatedRecord(_dataItemDescriptor.get_Name(), _labelCode);
            this.outputDataContainer(_docXmlRecord, _resultDataContainer, null, _dataContainerDescriptor, _path);
            _docXmlRecord = _docXmlRecord.getParent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValueForNull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets X++ default value for null for the selected data type.
    /// </summary>
    /// <param name = "_dataItemType">An item type.</param>
    /// <param name = "_dataItemDescriptor">An item descriptor.</param>
    /// <returns>X++ default value for null.</returns>
    private anytype getDefaultValueForNull(LFDataItemType _dataItemType, ERIDataItemDescriptor _dataItemDescriptor)
    {
        switch (_dataItemType)
        {
            case LFDataItemType::Date:
                return dateNull();
            case LFDataItemType::DateTime:
                return DateTimeUtil::minValue();
            case LFDataItemType::Time:
                return 0;
            case LFDataItemType::Container:
                return conNull();
            case LFDataItemType::String:
                return '';
            case LFDataItemType::Boolean:
                return false;
            case LFDataItemType::Guid:
                guid defaultGuid;
                return defaultGuid;
            case LFDataItemType::Real:
                return 0.0;
            case LFDataItemType::Integer:
            case LFDataItemType::Int64:
                return 0;
            case LFDataItemType::Enum:
                ERIEnumValue enumValue;
                ERDataItemTypeDescriptorEnum enumTypeDescriptor = _dataItemDescriptor.get_TypeDescriptor() as ERDataItemTypeDescriptorEnum;
                str enumName = enumTypeDescriptor.GetEnumName();
                str enumPrefix = enumTypeDescriptor.GetPrefix();

                var enumContainerDescriptor = UL.ReflectionHelper::GetField(_dataItemDescriptor, 'typeDescriptor', false) as ERDataContainerDescriptor;
                if (enumContainerDescriptor != null)
                {
                    // Gets the first enum value from the enum value set
                    ERIDataItemDescriptorEnumerator i = enumContainerDescriptor.get_Enumerator();
                    if (i.moveNext())
                    {
                        ERIDataItemDescriptor enumDescriptor = i.get_Current();
                        str enumValueName = enumDescriptor.get_Name();
                        str enumValueLabel = this.GetLabelCode(enumDescriptor);

                        enumValue = new EREnumValueBase(enumName, enumPrefix, enumValueName, enumValueLabel);
                    }
                }
                return enumValue;
            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertClrDateToXppDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert CLR date to X++ date.
    /// </summary>
    /// <param name = "_value">CLR date</param>
    /// <returns>X++ date.</returns>
    private date convertClrDateToXppDate(SL.Date _value)
    {
        var slDateValue = _value.DateValue;
        int day = slDateValue.Day;
        int month = slDateValue.Month;
        int year = slDateValue.Year;

        return mkDate(day, month, year);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertClrUtcDateTimeToXppUtcDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert CLR utcdatetime to X++ utcdatetime.
    /// </summary>
    /// <param name = "_value">CLR utcdatetime</param>
    /// <returns>X++ utcdatetime.</returns>
    private utcdatetime convertClrUtcDateTimeToXppUtcDateTime(SL.utcdatetime _value)
    {
        var slDateTimeValueUtc = _value.ValueUtc;
        int day = slDateTimeValueUtc.Day;
        int month = slDateTimeValueUtc.Month;
        int year = slDateTimeValueUtc.Year;
        var slTimeOfDay = slDateTimeValueUtc.TimeOfDay;
        TimeOfDay timeValue = System.Convert::ToInt32(slTimeOfDay.TotalSeconds);

        return DateTimeUtil::newDateTime(mkDate(day, month, year), timeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLabelCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a label from an item descriptor. A label can contain a label code or a static text.
    /// If a label is empty then a description from an item descriptor is returned. A description
    /// can also contain a label code or a static text. If a description contains a label code
    /// it is translated and returned as a static text.
    /// </summary>
    /// <param name = "_itemDescriptor">An item descriptor.</param>
    /// <returns>A label code.</returns>
    private str GetLabelCode(anytype _itemDescriptor)
    {
        var labelCode = UL.ReflectionHelper::GetField(_itemDescriptor, 'label', false);
        if (!labelCode)
        {
            labelCode = UL.ReflectionHelper::GetField(_itemDescriptor, 'description', false);
            labelCode = erSolutionLabelRepository.getTranslatedText(labelCode, dsLanguageId);
        }
        return labelCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the last message in the infolog with additional information.
    /// This is only done if the validation error was added to infolog.
    /// </summary>
    /// <param name = "_resultDataContainer">A result container.</param>
    /// <param name = "_path">A current evaluating path in a result container.</param>
    private void updateInfolog(ERMappedModelDataContainer _resultDataContainer, str _path)
    {
        ERSharedContext sharedContext = _resultDataContainer.getDataContext().parmSharedContext();
        if (sharedContext != null)
        {
            // Check if the number of the validation warnings increased after last cycle
            int numberOfValidationErrorsOld = numberOfValidationErrors;
            numberOfValidationErrors = sharedContext.ValidationErrors.Count;

            if (numberOfValidationErrorsOld < numberOfValidationErrors)
            {
                str path = _path;
                str errorMessage = '';

                // Get the evaluating path from the last validation error
                var validationError = UL.ListHelper::GetItem(ERCast::AsAny(sharedContext.ValidationErrors), numberOfValidationErrors - 1);
                if (validationError != null)
                {
                    path = UL.ReflectionHelper::GetProperty(validationError, 'Path', false);
                    errorMessage = UL.ReflectionHelper::GetProperty(validationError, 'Message', false);
                }

                // Get the last infolog line
                int line = infologLine();

                // Get the message from the last infolog line
                str infologMessage = strRem(infolog.text(line), '\t');

                // Check if the infolog message is the same as the validation error message.
                // If it is not then the infolog should not be updated.
                if (infologMessage == errorMessage)
                {
                    // Get the exception level from the last infolog line
                    Exception level = infolog.level(line);
                    // Get the message from the last infolog line and adds the additional information
                    str message = strFmt("@ElectronicReportingCore:EvaluatingExpressionForPath", path) + ' ' + infologMessage;

                    // Delete the last inflog line and add new one
                    infolog.clear(line - 1);
                    infolog.add(level, message);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddErrorToSolutionErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if error can be added to the solution errors list.
    /// </summary>
    /// <param name = "_resultDataContainer">A result container.</param>
    /// <returns>True/False.</returns>
    private boolean canAddErrorToSolutionErrors(ERMappedModelDataContainer _resultDataContainer)
    {
        ERSharedContext sharedContext = _resultDataContainer.getDataContext().parmSharedContext();
        if (sharedContext != null)
        {
            // Check if the number of the validation warnings increased after last cycle
            if (numberOfValidationErrors < sharedContext.ValidationErrors.Count)
            {
                var validationError = UL.ListHelper::GetItem(ERCast::AsAny(sharedContext.ValidationErrors), sharedContext.ValidationErrors.Count - 1);
                if (validationError != null)
                {
                    ErrorSeverity severity = UL.ReflectionHelper::GetProperty(validationError, 'Severity', false);
                    if (severity == ErrorSeverity::Error)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current evaluating path created from the current data container's path and its containing item name.
    /// </summary>
    /// <param name = "_resultDataContainer">A result container.</param>
    /// <param name = "_path">A current container's path in a result container.</param>
    /// <param name = "_itemDescriptorName">An item descriptor name.</param>
    /// <returns>The current evaluating path</returns>
    private str getPath(ERMappedModelDataContainer _resultDataContainer, str _path = '', str _itemDescriptorName = '')
    {
        str path = _path;

        if (path == '')
        {
            path = UL.ReflectionHelper::GetField(_resultDataContainer, 'path', false);
        }
        ERPathService erPathService = UL.ReflectionHelper::GetField(_resultDataContainer, 'pathService', false);
        if ((path != null || path == '') && erPathService != null)
        {
            path = erPathService.combine(path, _itemDescriptorName);
        }
        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemOrAnyNestedItemBound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current item or any of the nested items are bound to the datasource.
    /// </summary>
    /// <param name = "_resultDataContainer">A result container.</param>
    /// <param name = "_path">A current evaluating path in a result container.</param>
    /// <returns>True/False.</returns>
    private boolean isItemOrAnyNestedItemBound(ERMappedModelDataContainer _resultDataContainer, str _path)
    {
        boolean isBound = false;

        ERDataContainerBinding binding = _resultDataContainer.GetBinding();
        if (binding != null)
        {
            isBound = binding.IsItemOrAnyNestedItemBound(_path);
        }
        return isBound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processModelMappingRunResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the model mapping run result.
    /// The error is thrown if the model mapping is not successfully processed and the report is executing in run-time.
    /// </summary>
    /// <param name = "_modelMappingRunResult">A model mapping result.</param>
    /// <param name = "_isRuntime">Is the report executing in run-time.</param>
    private void processModelMappingRunResult(ERIModelMappingRunResult _modelMappingRunResult = null, boolean _isRuntime = false)
    {
        if (_modelMappingRunResult && !_modelMappingRunResult.IsSuccess())
        {
            str errorMsg = _modelMappingRunResult.get_IsExceptionCalledByValidation() ? 
                strFmt("@ElectronicReporting:UnexpectedErrorDuringRun", "@ElectronicReporting:ModelMapping") :
                strFmt("@DocentricAX4:DocERConfigurationErrorMsg", erModelMappingTable.Name, erModelMappingTable.ERSolutionTable().Name, guid2Str(erModelMappingTable.GUID));

            // Add the action to open the ERModelMappingDesigner form from the message bar.
            MenuItemMessageAction actionData = new MenuItemMessageAction();
            actionData.MenuItemName(menuItemActionStr(DocERConfigurationDesigner));
            actionData.TableName(tableStr(ERModelMappingTable));
            actionData.RecId(erModelMappingTable.RecId);
            actionData.FilterType(MenuItemMessageActionFilterType::CallerRecord);

            str jsonData = FormJsonSerializer::serializeClass(actionData);
           
            if (_isRuntime)
            {
                Message::AddAction(MessageSeverity::Error, errorMsg, "@SYS4157", MessageActionType::ActionMenuItem, jsonData);
                throw Exception::Error;
            }
            else
            {
                Message::AddAction(MessageSeverity::Error, errorMsg, "@SYS4157", MessageActionType::ActionMenuItem, jsonData);
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user settings of current domain.
    /// </summary>
    /// <returns>The instance of <c>ERUserSettings</c>.</returns>
    private anytype getUserSettings()
    {
        anytype erUserSetting = null;

        DictClass domainUIDictClass = new DictClass(className2Id(identifierStr(ERDomainUI)));
        if (domainUIDictClass)
        {
            erUserSetting = domainUIDictClass.callStatic(identifierStr(getUserSettingsByID), this.erModelMappingTable.ERSolutionTable().getDomainGUID());
        }
        return erUserSetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionLogger</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an <c>ERIExecutionLogger</c> instance.
    /// </summary>
    /// <returns>An <c>ERIExecutionLogger</c> instance.</returns>
    internal ERIExecutionLogger createExecutionLogger()
    {
        anytype executionLogger = null;

        if (this.getUserSettings().parmRunInDebugMode())
        {
            DictClass executionLoggerDictClass = new DictClass(className2Id(identifierStr(ERExecutionLoggerDelayed)));
            if (executionLoggerDictClass)
            {
                executionLogger = executionLoggerDictClass.makeObject(true);
                executionLogger.parmSolutionID(erModelMappingTable.Solution);
                executionLogger.parmStartOnDemand(true);
                executionLogger.parmDestinationMappingId(erModelMappingTable.RecId);
            }
        }
        else
        {
            executionLogger = ERCast::asAny(new EREmptyExecutionLogger());
        }
        return executionLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormattingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>ERIFormattingParameters</c> instance.
    /// </summary>
    /// <returns>An <c>ERIFormattingParameters</c> instance.</returns>
    internal ERIFormattingParameters getFormattingParameters()
    {
        ERFormattingParameters formattingParameters = null;

        DictClass environmentDictClass = new DictClass(className2Id(identifierStr(ERMappingRuntimeEnvironmentForAx)));
        if (environmentDictClass)
        {
            var environment = environmentDictClass.callStatic(identifierStr(construct));
        
            formattingParameters = environment.getFormattingParameters();
        }
        return formattingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionServices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>ERIExecutionServices</c> instance.
    /// </summary>
    /// <returns>An <c>ERIExecutionServices</c> instance.</returns>
    protected ERIExecutionServices createExecutionServices()
    {
        ERExecutionServices executionServices = null;

        DictClass executionServicesFactoryDictClass = new DictClass(className2Id(identifierStr(ERExecutionServicesFactory)));
        if (executionServicesFactoryDictClass)
        {
            executionServices = executionServicesFactoryDictClass.callStatic(identifierStr(createExecutionServices));
            executionServices.withOverriddenFormattingParameters(erModelDataSource.get_locale());
            executionServices.initLoggingService(erExecutionLogger);
            executionServices.getLoggingService().start(erModelMappingTable.Solution, erModelMappingTable.RecId);
        }
        return executionServices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyExecutionService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies <c>ERExecutionSerivices</c> to nested data sources.
    /// </summary>
    /// <param name = "_container"><c>ERMappedModelDataContainer</c> to apply execution services.</param>
    /// <param name = "_executionService"><c>ERExecutionServices</c> to apply.</param>
    protected void applyExecutionService(ERMappedModelDataContainer _container, ERExecutionServices _executionService)
    {
        _container.parmExecutionService(_executionService);
        var action = new ERSetExecutionServiceDataSourceAction(_executionService);
        erModelDataSource.applyActionToDatasources(action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClrErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest CLR exception error message.
    /// </summary>
    /// <returns>An error message.</returns>
    private str getClrErrorMessage()
    {
        str clrErrorMessage;

        DictClass exceptionUtilsDictClass = new DictClass(className2Id(identifierStr(ERExceptionUtils)));
        if (exceptionUtilsDictClass)
        {
            clrErrorMessage = exceptionUtilsDictClass.callStatic(identifierStr(getCLRErrorMessage));
        }
        return clrErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLatestERClrException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the latest CLR exception is <c>XppSupportLayer.XppException</c>.
    /// </summary>
    /// <returns>True, if the latest CLR exception is <c>XppSupportLayer.XppException</c>; otherwise, false.</returns>
    private boolean isLatestERClrException()
    {
        boolean isLatestERClrException;

        DictClass exceptionUtilsDictClass = new DictClass(className2Id(identifierStr(ERExceptionUtils)));
        if (exceptionUtilsDictClass)
        {
            isLatestERClrException = exceptionUtilsDictClass.callStatic(identifierStr(isLatestERClrException));
        }
        return isLatestERClrException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCLRError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest CLR exception and inserts it's error message into infolog.
    /// </summary>
    /// <returns>Exception::Error.</returns>
    private Exception getCLRError()
    {
        Exception error;

        DictClass exceptionUtilsDictClass = new DictClass(className2Id(identifierStr(ERExceptionUtils)));
        if (exceptionUtilsDictClass)
        {
            error = exceptionUtilsDictClass.callStatic(identifierStr(getCLRError));
        }
        return error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTotalEventLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare result information for windows event log. The information is stored under the
    /// node Applications and Services logs/Microsoft/Dynamics/ElectronicReporting.
    /// </summary>
    /// <param name = "_log">A log instance.</param>
    /// <param name = "_elapsedMilliseconds">Elapsed time in miliseconds.</param>
    /// <param name = "_success">Is model mapping run succeeded.</param>
    /// <param name = "_failReason">A fail reason.</param>
    /// <param name = "_numberOfValidationWarnings">A number of validation warnings.</param>
    /// <param name = "_modelMappingRunResult">A model mapping run result instance.</param>
    private void sendTotalEventLog(
        ElectronicReportingEventSource _log,
        int64 _elapsedMilliseconds,
        boolean _success,
        EREventLogFailReason _failReason,
        int _numberOfValidationWarnings,
        ERIModelMappingRunResult _modelMappingRunResult)
    {
        EREventLogFailReason failReason = _failReason;
        if (_success)
        {
            failReason = EREventLogFailReason::None;
        }
        else if (_modelMappingRunResult && !_modelMappingRunResult.get_IsExceptionCalledByValidation())
        {
            failReason = EREventLogFailReason::Validation;
        }
        str warnings, errors;
        if (_modelMappingRunResult != null)
        {
            warnings = ERTelemetryUtils::GetMessageBySeverityLevel(_modelMappingRunResult.get_ValidationErrors(), ErrorSeverity::Warning);
            errors = ERTelemetryUtils::GetMessageBySeverityLevel(_modelMappingRunResult.get_ValidationErrors(), ErrorSeverity::Error);
            errors += (errors == '' ? '' : DocDataSourceProviderERModelMappingRun::Delimiter) + DocDataSourceProviderERModelMappingRun::getMessageFromErrors(ERCast::asAny(_modelMappingRunResult.get_SolutionErrors()));
        }

        ERSolutionVersionTable erSolutionVersionTable = ERSolutionVersionTable::findDraftVersion(erModelMappingTable.Solution);

        // Write resulting information to windows event log
        this.formatMappingRunStop(
            _log,
            _success,
            '',
            '',
            _elapsedMilliseconds,
            enum2Str(failReason),
            '',
            SysCountryRegionCode::countryInfo(),
            _numberOfValidationWarnings,
            guid2Str(erModelMappingTable.GUID),
            erModelMappingTable.Name,
            int2Str(erModelMappingTable.getLatestVersion().VersionNumber),
            warnings,
            errors,
            guid2Str(ERSolutionTable::find(erModelMappingTable.Solution).GUID),
            '',
            '',
            erSolutionVersionTable.PublicVersionNumber,
            this.getElapsedTimePerTableDataSourceRowInMilliseconds(_modelMappingRunResult as ERIRunResultWithCounters, _elapsedMilliseconds),
            this.getElapsedTimePerFormatNodeInMilliseconds(_modelMappingRunResult as ERIRunResultWithCounters, _elapsedMilliseconds),
            '',
            this.getDataSourceRecordsCount(_modelMappingRunResult as ERIRunResultWithCounters),
            this.getFormatNodesCount(_modelMappingRunResult as ERIRunResultWithCounters)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElapsedTimePerTableDataSourceRowInMilliseconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets elapsed time per table datasource row in miliseconds.
    /// </summary>
    /// <param name = "_modelMappingRunResult">A model mapping run result instance.</param>
    /// <param name = "_elapsed">The given elapsed time.</param>
    /// <returns>Elapsed time in miliseconds.</returns>
    private int64 getElapsedTimePerTableDataSourceRowInMilliseconds(ERIRunResultWithCounters _modelMappingRunResult, int64 _elapsed)
    {
        int elapsedTime = 0;
        var counter = _modelMappingRunResult ? _modelMappingRunResult.get_DataSourceRecordsCount() : 0;
        
        DictClass performanceCounterUtilsDictClass = new DictClass(className2Id(identifierStr(ERPerformanceCounterUtils)));
        if (performanceCounterUtilsDictClass)
        {
            elapsedTime = performanceCounterUtilsDictClass.callStatic(identifierStr(getElapsedTimePerCounterValue), counter, _elapsed);
        }
        return elapsedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElapsedTimePerFormatNodeInMilliseconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets elapsed time per format node in miliseconds.
    /// </summary>
    /// <param name = "_modelMappingRunResult">A model mapping run instance.</param>
    /// <param name = "_elapsed">The given elapsed time.</param>
    /// <returns>Elapesd time in miliseconds.</returns>
    private int64 getElapsedTimePerFormatNodeInMilliseconds(ERIRunResultWithCounters _modelMappingRunResult, int64 _elapsed)
    {
        int elapsedTime = 0;
        var counter = _modelMappingRunResult ? _modelMappingRunResult.get_FormatNodesCount() : 0;

        DictClass performanceCounterUtilsDictClass = new DictClass(className2Id(identifierStr(ERPerformanceCounterUtils)));
        if (performanceCounterUtilsDictClass)
        {
            elapsedTime = performanceCounterUtilsDictClass.callStatic(identifierStr(getElapsedTimePerCounterValue), counter, _elapsed);
        }
        return elapsedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataSourceRecordsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets count of the datasource records.
    /// </summary>
    /// <param name = "_modelMappingRunResult">A model mapping run instance.</param>
    /// <returns>Datasource records count.</returns>
    private int64 getDataSourceRecordsCount(ERIRunResultWithCounters _modelMappingRunResult)
    {
        var counter = _modelMappingRunResult ? _modelMappingRunResult.get_DataSourceRecordsCount() : 0;
        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatNodesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets count of the format nodes.
    /// </summary>
    /// <param name = "_modelMappingRunResult">A model mapping run instance.</param>
    /// <returns>Format nodes count.</returns>
    private int64 getFormatNodesCount(ERIRunResultWithCounters _modelMappingRunResult)
    {
        var counter = _modelMappingRunResult ? _modelMappingRunResult.get_FormatNodesCount() : 0;
        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageFromErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets error messages as string.
    /// </summary>
    /// <param name = "_solutionErrors">A list of solution errors.</param>
    /// <returns>Error messages as string.</returns>
    private static str getMessageFromErrors(Generic.List<ERIRuntimeSolutionError> _solutionErrors)
    {
        str errors = '';

        if (_solutionErrors != null)
        {
            for (int i = 0; i < _solutionErrors.Count; i++)
            {
                var solutionError = UL.ListHelper::GetItem(_solutionErrors, i);
                if (solutionError != null)
                {
                    str errorMessage = UL.ReflectionHelper::GetProperty(solutionError, 'Message', false);
                    if (errorMessage != null && errorMessage != '')
                    {
                        errors += (errors != '' ? DocDataSourceProviderERModelMappingRun::Delimiter : '') + errorMessage;
                    }
                }
            }
        }
        return errors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSelectedModelMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs information about current executing model mapping.
    /// </summary>
    private void logSelectedModelMapping()
    {
        if (erExecutionLogger != null)
        {
            DictClass executionLogEntryDictClass = new DictClass(className2Id(identifierStr(ERExecutionLogEntry)));
            if (executionLogEntryDictClass)
            {
                var executionLogEntry = executionLogEntryDictClass.makeObject(
                        strFmt("@ElectronicReporting:SelectedModelMappingDebugLogRecord", ERSolutionTable::find(erModelMappingTable.Solution).Name, erModelMappingTable.Name),
                        ValidationPostActionType::Warning,
                        Exception::Info,
                        "@ElectronicReporting:SelectedModelMappingFormatComponentLogEntry");
                if (executionLogEntry)
                {
                    erExecutionLogger.write(ERCast::asAny(executionLogEntry));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatMappingRunStop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes resulting information to windows event log.
    /// NOTE:
    /// This methood is a copy of standard method FormatMappingRunStop in .NET assembly
    /// Microsoft.Dynamics.Compliance.Instrumentation.ElectronicReportingEventSource.
    /// The copy was made due an MS bug inside this method in version 10.0.12.
    /// </summary>
    /// <param name = "_log">An instance of the ElectronicReportingEventSource class</param>
    /// <param name = "_success">Specifies whether the process execution was successful</param>
    /// <param name = "_formatMappingGuid">Format mapping guid</param>
    /// <param name = "_formatMappingName">Format mapping name</param>
    /// <param name = "_elapsedTimeInMilliseconds">Elapsed time in milliseconds</param>
    /// <param name = "_failReason">Fail reason</param>
    /// <param name = "_formatFileDestinations">Format file destination</param>
    /// <param name = "_countryRegion">Country region</param>
    /// <param name = "_numberOfValidationWarnings">Number of validation warnings</param>
    /// <param name = "_destinationModelMappingGuid">Destination model mapping guid</param>
    /// <param name = "_destinationModelMappingName">Destination model mapping name</param>
    /// <param name = "_destinationModelMappingVersion">Destination model mapping version</param>
    /// <param name = "_warningMessage">Warning message</param>
    /// <param name = "_errorMessage">Error message</param>
    /// <param name = "_solutionGuid">Solution guid</param>
    /// <param name = "_parentSolutionWithMicrosoftVendor">Parent solution with MS vendor</param>
    /// <param name = "_featureReference">Feature reference</param>
    /// <param name = "_featureVersion">Feature version</param>
    /// <param name = "_elapsedTimePerTableDataSourceRowInMilliseconds">Elapsed time per table datasource row in milliseconds</param>
    /// <param name = "_elapsedTimePerFormatNodeInMilliseconds">Elapsed time per format node in milliseconds</param>
    /// <param name = "_solutionTags">Solution tags</param>
    /// <param name = "_tableRowCount">Table row count</param>
    /// <param name = "_nodeCount">Node count</param>
    private void formatMappingRunStop(
        ElectronicReportingEventSource _log,
        boolean _success,
        str _formatMappingGuid,
        str _formatMappingName,
        int64 _elapsedTimeInMilliseconds,
        str _failReason,
        str _formatFileDestinations,
        str _countryRegion,
        int _numberOfValidationWarnings = 0,
        str _destinationModelMappingGuid = '',
        str _destinationModelMappingName = '',
        str _destinationModelMappingVersion = '',
        str _warningMessage = '',
        str _errorMessage = '',
        str _solutionGuid = '',
        str _parentSolutionWithMicrosoftVendor = '',
        str _featureReference = '',
        str _featureVersion = '',
        int64 _elapsedTimePerTableDataSourceRowInMilliseconds = 0,
        int64 _elapsedTimePerFormatNodeInMilliseconds = 0,
        str _solutionTags = '',
        int64 _tableRowCount = 0,
        int64 _nodeCount = 0)
    {
        System.Object[] eventData = new System.Object[22]();
        eventData.Set(0, _success);
        eventData.Set(1, _formatMappingGuid);
        eventData.Set(2, _formatMappingName);
        eventData.Set(3, _elapsedTimeInMilliseconds);
        eventData.Set(4, _failReason);
        eventData.Set(5, _formatFileDestinations);
        eventData.Set(6, _countryRegion);
        eventData.Set(7, _numberOfValidationWarnings);
        eventData.Set(8, _destinationModelMappingGuid);
        eventData.Set(9, _destinationModelMappingName);
        eventData.Set(10, _destinationModelMappingVersion);
        eventData.Set(11, _warningMessage);
        eventData.Set(12, _errorMessage);
        eventData.Set(13, _solutionGuid);
        eventData.Set(14, _parentSolutionWithMicrosoftVendor);
        eventData.Set(15, _featureReference);
        eventData.Set(16, _featureVersion);
        eventData.Set(17, _elapsedTimePerTableDataSourceRowInMilliseconds);
        eventData.Set(18, _elapsedTimePerFormatNodeInMilliseconds);
        eventData.Set(19, _solutionTags);
        eventData.Set(20, _tableRowCount);
        eventData.Set(21, _nodeCount);

        System.Object[] params = new System.Object[2]();
        params.Set(0, 2);
        params.Set(1, eventData);

        System.Type[] types = new System.Type[2]();
        types.Set(0, params.Get(0).GetType());
        types.Set(1, params.Get(1).GetType());

        UL.ReflectionHelper::InvokeInstanceMethod(_log, 'WriteEvent', params, types);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptDatasourceDebugger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts data source debugging of an executed ER model mapping.
    /// NOTE:
    /// This feature was published in version 10.0.11. Due backward compatibility 
    /// we need to use reflection and avoid compile-time functions to make all 
    /// calls and checks in this function.
    /// </summary>
    public void promptDatasourceDebugger()
    {
        // Check if user setting debuggingSettings exists and get the current value
        var debuggingSettings = UL.ReflectionHelper::GetField(this.getUserSettings(), 'debuggingSettings', false);
        if (debuggingSettings  == null)
        {
            return;
        }
        // Check if user setting enableDatasourceDebugging exists and get the current value
        var enableDatasourceDebugging = UL.ReflectionHelper::GetField(debuggingSettings, 'enableDatasourceDebugging', false);
        if (enableDatasourceDebugging == null)
        {
            return;
        }

        // Check if datasource debugging can be started
        if (isExecutingInBatch || !enableDatasourceDebugging)
        {
            return;
        }
        if (!Box::confirm("@ElectronicReporting:SwitchToDebugMode"))
        {
            return;
        }

        DictClass dataSourceDebugEvaluationParametersDictClass = new DictClass(className2Id('ERDataSourceDebugEvaluationParameters'));
        if (dataSourceDebugEvaluationParametersDictClass)
        {
            var dataSourceDebugEvaluationParameters = dataSourceDebugEvaluationParametersDictClass.makeObject();
            if (dataSourceDebugEvaluationParameters)
            {
                dataSourceDebugEvaluationParameters.parmFormatMappingDataContainer(this.getResultContainer());

                var modelMappingDataSource = erModelDataSource.GetDataSourceDefinition();
                var modelMappingDataContainer = modelMappingDataSource.getCombinedDataContainer(erDataFetchSharedData, erModelDefinitionParameters);
                dataSourceDebugEvaluationParameters.parmModelMappingDataContainer(modelMappingDataContainer);

                DictClass erFormUtilsDictClass = new DictClass(className2Id(identifierStr(ERFormUtils)));
                if (erFormUtilsDictClass)
                {
                    erFormUtilsDictClass.callStatic('ERFormUtils.runFormRunAndWait', 'ERDataSourceDebugEvaluation', dataSourceDebugEvaluationParameters, this);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>