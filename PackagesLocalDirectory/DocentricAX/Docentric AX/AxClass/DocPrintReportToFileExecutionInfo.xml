<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintReportToFileExecutionInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrintReportToFileExecutionInfo implements SysPackable, IDocPdfEncryptionSettingsExecutionInfo
{
    str                             reportOutputFilename;
    boolean                         saveToSharePointSuccess;
    str                             saveToSharePointFileUrl;
    DocSharePointAuthorizationType  saveToSharePointAuthorizationType;
    UserId                          saveToSharePointIntegratedReportUser;
    boolean                         saveToAttachmentsSuccess;
    boolean                         saveToArchiveSuccess;
    RecId                           printJobHeaderRecId;
    RecId                           saveToAttachmentsDocuRef_RecId;
    boolean                         saveToAttachments_AttachmentAlreadyExists;
    boolean                         saveToAzureBlobStorageSuccess;
    str                             saveToAzureBsBlobName;
    boolean                         saveToAzureFilesSuccess;
    str                             saveToAzureFilesPathFilename;
    boolean                         saveToFileSystemSuccess;
    str                             saveToFileSystemFullOutputFilename;
    boolean                         previewBeforePrintPrintingCanceled;
    boolean                         reportDelivered;
    boolean                         isPdfReportEncrypted;
    Set                             pdfEncryptionConditionSet;
    DocPdfEcryptionPassword         pdfEncryptionPassword;
    DocEncryptionAlgorithm          pdfEncryptionAlgorithm;

    // Not packed:
    boolean           isExecutionFailed;


    #define.currentPackVersion(6)   // Added saveToAzureFilesSuccess, saveToAzureFilesPathFilename, saveToSharePointAuthorizationType, saveToSharePointIntegratedReportUser
    #localmacro.currentList
        version,
        reportOutputFilename,
        saveToSharePointSuccess,
        saveToAttachmentsSuccess,
        saveToAttachmentsDocuRef_RecId,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        saveToAzureBlobStorageSuccess,
        saveToAzureBsBlobName,
        saveToFileSystemSuccess,
        saveToFileSystemFullOutputFilename,
        previewBeforePrintPrintingCanceled,
        reportDelivered,
        saveToAttachments_AttachmentAlreadyExists,
        isPdfReportEncrypted,
        pdfEncryptionPassword,
        pdfEncryptionAlgorithm,
        saveToAzureFilesSuccess,
        saveToAzureFilesPathFilename,
        saveToSharePointAuthorizationType,
        saveToSharePointIntegratedReportUser
    #endMacro

    #define.packVersion5(5)   // Added pdfEncryptionAlgorithm
    #localmacro.listVersion5
        version,
        reportOutputFilename,
        saveToSharePointSuccess,
        saveToAttachmentsSuccess,
        saveToAttachmentsDocuRef_RecId,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        saveToAzureBlobStorageSuccess,
        saveToAzureBsBlobName,
        saveToFileSystemSuccess,
        saveToFileSystemFullOutputFilename,
        previewBeforePrintPrintingCanceled,
        reportDelivered,
        saveToAttachments_AttachmentAlreadyExists,
        isPdfReportEncrypted,
        pdfEncryptionPassword,
        pdfEncryptionAlgorithm
    #endMacro

    #define.packVersion4(4)   // Added isPdfReportEncrypted, pdfEncryptionConditionSet, pdfEncryptionPassword
    #localmacro.listVersion4
        version,
        reportOutputFilename,
        saveToSharePointSuccess,
        saveToAttachmentsSuccess,
        saveToAttachmentsDocuRef_RecId,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        saveToAzureBlobStorageSuccess,
        saveToAzureBsBlobName,
        saveToFileSystemSuccess,
        saveToFileSystemFullOutputFilename,
        previewBeforePrintPrintingCanceled,
        reportDelivered,
        saveToAttachments_AttachmentAlreadyExists,
        isPdfReportEncrypted,
        pdfEncryptionPassword
    #endMacro

    #define.packVersion3(3)   // Added saveToAttachments_AttachmentAlreadyExists
    #localmacro.listVersion3
        version,
        reportOutputFilename,
        saveToSharePointSuccess,
        saveToAttachmentsSuccess,
        saveToAttachmentsDocuRef_RecId,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        saveToAzureBlobStorageSuccess,
        saveToAzureBsBlobName,
        saveToFileSystemSuccess,
        saveToFileSystemFullOutputFilename,
        previewBeforePrintPrintingCanceled,
        reportDelivered,
        saveToAttachments_AttachmentAlreadyExists
    #endMacro

    #define.packVersion2(2)
    #localmacro.listVersion2
        version,
        reportOutputFilename,
        saveToSharePointSuccess,
        saveToAttachmentsSuccess,
        saveToAttachmentsDocuRef_RecId,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        saveToAzureBlobStorageSuccess,
        saveToAzureBsBlobName,
        saveToFileSystemSuccess,
        saveToFileSystemFullOutputFilename,
        previewBeforePrintPrintingCanceled,
        reportDelivered
    #endMacro

    #define.packVersion1(1)
    #localmacro.listVersion1
        version,
        reportOutputFilename,
        saveToSharePointSuccess,
        saveToAttachmentsSuccess,
        saveToAttachmentsDocuRef_RecId,
        saveToArchiveSuccess,
        printJobHeaderRecId,
        saveToAzureBlobStorageSuccess,
        saveToAzureBsBlobName,
        saveToFileSystemSuccess,
        saveToFileSystemFullOutputFilename
    #endMacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the current object to the packed container.
    /// </summary>
    /// <returns>Packed container</returns>
    public container pack()
    {
        int version = #currentPackVersion;
        container pdfEncryptionConditionSetContainer = conNull();

        if (pdfEncryptionConditionSet != null)
        {
            pdfEncryptionConditionSetContainer = pdfEncryptionConditionSet.pack();
        }

        return [#currentList, pdfEncryptionConditionSetContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is delivered.
    /// </summary>
    /// <param name = "_reportDelivered">Is report delivered</param>
    /// <returns>True/False</returns>
    public boolean parmReportDelivered(boolean _reportDelivered = reportDelivered)
    {
        reportDelivered = _reportDelivered;
        return reportDelivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewBeforePrintPrintingCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report should be previewed before the printing will be canceled
    /// </summary>
    /// <param name = "_previewBeforePrintPrintingCanceled">Preview the repport before cancel the printing</param>
    /// <returns>True/False</returns>
    public boolean parmPreviewBeforePrintPrintingCanceled(boolean _previewBeforePrintPrintingCanceled = previewBeforePrintPrintingCanceled)
    {
        previewBeforePrintPrintingCanceled = _previewBeforePrintPrintingCanceled;
        return previewBeforePrintPrintingCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportOutputFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the report output filename.
    /// </summary>
    /// <param name = "_reportOutputFilename">Report output filename</param>
    /// <returns>Report output filename</returns>
    public str parmReportOutputFilename(str _reportOutputFilename = reportOutputFilename)
    {
        reportOutputFilename = _reportOutputFilename;
        return reportOutputFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToSharePointSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is successfully saved to Sharepoint.
    /// </summary>
    /// <param name = "_saveToSharePointSuccess">Is the report successfully saved to Sharepoint</param>
    /// <returns>True/False</returns>
    public boolean parmSaveToSharePointSuccess(boolean _saveToSharePointSuccess = saveToSharePointSuccess)
    {
        saveToSharePointSuccess = _saveToSharePointSuccess;
        return saveToSharePointSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToSharePointFileUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Sharepoint file url.
    /// </summary>
    /// <param name = "_saveToSharePointFileUrl">Sharepoint file url</param>
    /// <returns>Sharepoint file url</returns>
    public str parmSaveToSharePointFileUrl(str _saveToSharePointFileUrl = saveToSharePointFileUrl)
    {
        saveToSharePointFileUrl = _saveToSharePointFileUrl;
        return saveToSharePointFileUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToSharePointAuthorizationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the SharePoint authorization type.
    /// </summary>
    /// <param name = "_saveToSharePointAuthorizationType">SharePoint authorization type</param>
    /// <returns>SharePoint authorization type</returns>
    public DocSharePointAuthorizationType parmSaveToSharePointAuthorizationType(DocSharePointAuthorizationType _saveToSharePointAuthorizationType = saveToSharePointAuthorizationType)
    {
        saveToSharePointAuthorizationType = _saveToSharePointAuthorizationType;
        return saveToSharePointAuthorizationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToSharePointIntegratedReportUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the SharePoint report user if the SharePoint authorization type is Integrated.
    /// </summary>
    /// <param name = "_saveToSharePointIntegratedReportUser">The SharePoint report user</param>
    /// <returns>The SharePoint report user</returns>
    public UserId parmSaveToSharePointIntegratedReportUser(UserId _saveToSharePointIntegratedReportUser = saveToSharePointIntegratedReportUser)
    {
        saveToSharePointIntegratedReportUser = _saveToSharePointIntegratedReportUser;
        return saveToSharePointIntegratedReportUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToAzureBlobStorageSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is successfully saved to Azure blob storage.
    /// </summary>
    /// <param name = "_saveToAzureBlobStorageSuccess">Is the report successfully saved to Azure blob storage</param>
    /// <returns>True/false</returns>
    public boolean parmSaveToAzureBlobStorageSuccess(boolean _saveToAzureBlobStorageSuccess = saveToAzureBlobStorageSuccess)
    {
        saveToAzureBlobStorageSuccess = _saveToAzureBlobStorageSuccess;
        return saveToAzureBlobStorageSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToAzureBsBlobName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Azure blob storage blob name: blob path + output filename (without container).
    /// </summary>
    /// <param name = "_saveToAzureBsBlobName">Azure blob storage blob name</param>
    /// <returns>Azure blob storage blob name</returns>
    public str parmSaveToAzureBsBlobName(str _saveToAzureBsBlobName = saveToAzureBsBlobName)
    {
        saveToAzureBsBlobName = _saveToAzureBsBlobName;
        return saveToAzureBsBlobName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToAzureFilesSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is successfully saved to Azure files.
    /// </summary>
    /// <param name = "_saveToAzureFilesSuccess">Is the report successfully saved to Azure files</param>
    /// <returns>True/false</returns>
    public boolean parmSaveToAzureFilesSuccess(boolean _saveToAzureFilesSuccess = saveToAzureFilesSuccess)
    {
        saveToAzureFilesSuccess = _saveToAzureFilesSuccess;
        return saveToAzureFilesSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToAzureFilesPathFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Azure file share name: folder path + output filename (without Azure file share).
    /// </summary>
    /// <param name = "_saveToAzureFilesPathFilename">Azure file share name</param>
    /// <returns>Azure file full output filename</returns>
    public str parmSaveToAzureFilesPathFilename(str _saveToAzureFilesPathFilename = saveToAzureFilesPathFilename)
    {
        saveToAzureFilesPathFilename = _saveToAzureFilesPathFilename;
        return saveToAzureFilesPathFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToAttachmentsSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is successfully saved to attachments.
    /// </summary>
    /// <param name = "_saveToAttachmentsSuccess">Is the report successfully saved to attachments</param>
    /// <returns>True/False</returns>
    public boolean parmSaveToAttachmentsSuccess(boolean _saveToAttachmentsSuccess = saveToAttachmentsSuccess)
    {
        saveToAttachmentsSuccess = _saveToAttachmentsSuccess;
        return saveToAttachmentsSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToAttachmentsDocuRef_RecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the attachment DocuRef recId.
    /// </summary>
    /// <param name = "_saveToAttachmentsDocuRef_RecId">Attachment DocuRef recId</param>
    /// <returns>Attachment DocuRef recId</returns>
    public RecId parmSaveToAttachmentsDocuRef_RecId(RecId _saveToAttachmentsDocuRef_RecId = saveToAttachmentsDocuRef_RecId)
    {
        saveToAttachmentsDocuRef_RecId = _saveToAttachmentsDocuRef_RecId;
        return saveToAttachmentsDocuRef_RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToAttachments_AttachmentAlreadyExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the attachment already exists.
    /// If true, this means that the 'Override file if exists' option was set to True and at least one DocuRef with Name and
    /// Filename the same as the current output filename was found on the underlaying record, which was successfully resolved.
    /// </summary>
    /// <param name = "_saveToAttachments_AttachmentAlreadyExists">Does attachment already exist</param>
    /// <returns>True/False</returns>
    public boolean parmSaveToAttachments_AttachmentAlreadyExists(boolean _saveToAttachments_AttachmentAlreadyExists = saveToAttachments_AttachmentAlreadyExists)
    {
        saveToAttachments_AttachmentAlreadyExists = _saveToAttachments_AttachmentAlreadyExists;
        return saveToAttachments_AttachmentAlreadyExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToArchiveSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is successfully saved to archive.
    /// </summary>
    /// <param name = "_saveToArchiveSuccess">Is the report successfully saved to archive</param>
    /// <returns>True/False</returns>
    public boolean parmSaveToArchiveSuccess(boolean _saveToArchiveSuccess = saveToArchiveSuccess)
    {
        saveToArchiveSuccess = _saveToArchiveSuccess;
        return saveToArchiveSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArchivePrintJobHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print job header recId.
    /// </summary>
    /// <param name = "_printJobHeaderRecId">Print job header recId</param>
    /// <returns>Print job header recId</returns>
    public RecId parmArchivePrintJobHeaderRecId(RecId _printJobHeaderRecId = printJobHeaderRecId)
    {
        printJobHeaderRecId = _printJobHeaderRecId;
        return printJobHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToFileSystemSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is successfully saved to file system.
    /// </summary>
    /// <param name = "_saveToFileSystemSuccess">Is the report successfully saved to file system</param>
    /// <returns>True/False</returns>
    public boolean parmSaveToFileSystemSuccess(boolean _saveToFileSystemSuccess = saveToFileSystemSuccess)
    {
        saveToFileSystemSuccess = _saveToFileSystemSuccess;
        return saveToFileSystemSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveToFileSystemFullOutputFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the file system full output filename.
    /// </summary>
    /// <param name = "_saveToFileSystemFullOutputFilename">File system full output filename</param>
    /// <returns>File system full output filename</returns>
    public str parmSaveToFileSystemFullOutputFilename(str _saveToFileSystemFullOutputFilename = saveToFileSystemFullOutputFilename)
    {
        saveToFileSystemFullOutputFilename = _saveToFileSystemFullOutputFilename;
        return saveToFileSystemFullOutputFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPdfReportEncrypted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the PDF report is encrypted.
    /// </summary>
    /// <param name = "_isPdfReportEncrypted">Is PDF report encrypted</param>
    /// <returns>True/False</returns>
    public boolean parmIsPdfReportEncrypted(boolean _isPdfReportEncrypted = isPdfReportEncrypted)
    {
        isPdfReportEncrypted = _isPdfReportEncrypted;
        return isPdfReportEncrypted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionConditionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF encryption condition set.
    /// </summary>
    /// <param name = "_pdfEncryptionConditionSet">PDF encryption condition set</param>
    /// <returns>PDF encryption condition set</returns>
    public Set parmPdfEncryptionConditionSet(Set _pdfEncryptionConditionSet = pdfEncryptionConditionSet)
    {
        pdfEncryptionConditionSet = _pdfEncryptionConditionSet;
        if (pdfEncryptionConditionSet == null)
        {
            pdfEncryptionConditionSet = new Set(Types::Enum);
        }
        return pdfEncryptionConditionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdfEncryptionConditionSetToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the PDF encryption condition set to string.
    /// </summary>
    /// <returns>PDF encryption condition set as string</returns>
    public str pdfEncryptionConditionSetToString()
    {
        SysDictEnum dictEnum = new SysDictEnum(enumNum(DocPdfEncryptionConditionEnum));

        str pdfEncryptionCondStr = '';
        
        SetEnumerator conditionSetEnumerator = this.parmPdfEncryptionConditionSet().getEnumerator();
        while (conditionSetEnumerator.moveNext())
        {
            str conditionSymbol = dictEnum.value2Symbol(conditionSetEnumerator.current());

            pdfEncryptionCondStr += (pdfEncryptionCondStr == '' ? '' : '; ') + conditionSymbol;
        }
        
        return pdfEncryptionCondStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF encryption password.
    /// </summary>
    /// <param name = "_pdfEncryptionPassword">PDF encryption password</param>
    /// <returns>PDF encryption password</returns>
    public DocPdfEcryptionPassword parmPdfEncryptionPassword(DocPdfEcryptionPassword _pdfEncryptionPassword = pdfEncryptionPassword)
    {
        pdfEncryptionPassword = _pdfEncryptionPassword;
        return pdfEncryptionPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdfEncryptionAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the PDF encryption algorithm.
    /// </summary>
    /// <param name = "_pdfEncryptionAlgorithm">PDF encryption algorithm</param>
    /// <returns>PDF encryption algorithm</returns>
    public DocEncryptionAlgorithm parmPdfEncryptionAlgorithm(DocEncryptionAlgorithm _pdfEncryptionAlgorithm)
    {
        pdfEncryptionAlgorithm = _pdfEncryptionAlgorithm;
        return pdfEncryptionAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdfEncryptionSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the PDF encryption settings.
    /// </summary>
    /// <param name = "_isPdfReportEncrypted">Is PDF report encrypted</param>
    /// <param name = "_pdfEncryptionCondition">PDF encryption condition set</param>
    /// <param name = "_pdfEncryptionPassword">PDF encryption password</param>
    /// <param name = "_pdfEncryptionAlgorithm">PDF encryption algorithm</param>
    public void setPdfEncryptionSettings(
        boolean _isPdfReportEncrypted,
        DocPdfEncryptionConditionEnum _pdfEncryptionCondition,
        DocPdfEcryptionPassword _pdfEncryptionPassword,
        DocEncryptionAlgorithm _pdfEncryptionAlgorithm = DocEncryptionAlgorithm::Encryption_AES_128bit)
    {
        isPdfReportEncrypted = isPdfReportEncrypted || _isPdfReportEncrypted;
        if (_isPdfReportEncrypted)
        {
            this.parmPdfEncryptionConditionSet().add(_pdfEncryptionCondition);
        }
        pdfEncryptionPassword = _pdfEncryptionPassword;
        pdfEncryptionAlgorithm = _pdfEncryptionAlgorithm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the packed container to the current object.
    /// </summary>
    /// <param name = "_pack">Packed container</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _pack)
    {
        boolean     ret = false;
        int         version;
        container   pdfEncryptionConditionSetContainer = conNull();
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #packVersion1)
            {
                [#listVersion1] = _pack;
                ret = true;
            }
            else if (version == #packVersion2)
            {
                [#listVersion2] = _pack;
                ret = true;
            }
            else if (version == #packVersion3)
            {
                [#listVersion3] = _pack;
                ret = true;
            }
            else if (version == #packVersion4)
            {
                [#listVersion4, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #packVersion5)
            {
                [#listVersion5, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }
            else if (version == #currentPackVersion)
            {
                [#currentList, pdfEncryptionConditionSetContainer] = _pack;
                ret = true;
            }

            if (pdfEncryptionConditionSetContainer != conNull())
            {
                pdfEncryptionConditionSet = Set::create(pdfEncryptionConditionSetContainer);
            }
            else
            {
                pdfEncryptionConditionSet = null;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsFailedExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks execution as failed.
    /// </summary>
    /// <returns>This object</returns>
    public DocPrintReportToFileExecutionInfo markAsFailedExecution()
    {
        isExecutionFailed = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExecutionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the info whether the execution failed.
    /// </summary>
    /// <returns>True, if the execution failed</returns>
    public boolean isExecutionFailed()
    {
        return isExecutionFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExecutionSuccessful</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the info whether the execution succeeded.
    /// </summary>
    /// <returns>True, if the execution succeeded</returns>
    public boolean isExecutionSuccessful()
    {
        return !isExecutionFailed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>