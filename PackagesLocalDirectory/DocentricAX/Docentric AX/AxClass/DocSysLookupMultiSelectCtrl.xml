<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSysLookupMultiSelectCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocSysLookupMultiSelectCtrl class extends the SysLookupMultiSelectCtrl that is used to create
/// a multi-select lookup based on a query object. The extended class supports the use of multi-select lookup
/// on a form string control bind to a data field or a data method.
/// </summary>
public class DocSysLookupMultiSelectCtrl extends SysLookupMultiSelectCtrl
{
    private str delimiter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ctrlNames_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the lookup method on the source form string control.
    /// </summary>
    /// <param name = "_fsCtrlNames">The source form string control</param>
    public void ctrlNames_lookup(FormStringControl _fsCtrlNames)
    {
        DocSysLookupMultiSelectGrid lookupMultiSelect = DocSysLookupMultiSelectGrid::construct(fsCtrlIds, fsCtrlNamesTmp, delimiter);
        lookupMultiSelect.parmCallingControl(fsCtrlNames);
        lookupMultiSelect.parmQuery(query);
        lookupMultiSelect.parmQueryRun(queryRun);
        lookupMultiSelect.parmSelectField(selectField);
        lookupMultiSelect.run();

        this.ctrlNames_textChange(_fsCtrlNames);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlNames_textChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the textChange method on the source form string control.
    /// </summary>
    /// <param name = "_fsCtrlNames">The source form string control</param>
    public void ctrlNames_textChange(FormStringControl _fsCtrlNames)
    {
        Common currentDSRecord;

        FormDataSource formDataSource = _fsCtrlNames.dataSourceObject();
        if (formDataSource && _fsCtrlNames.dataField())
        {
            // Form string control is bind to a data field. Setting the text property of the form string control is ignored.
            DictField dictfield = new DictField(formDataSource.table(), _fsCtrlNames.dataField());
            currentDSRecord = formDataSource.cursor();
            currentDSRecord.(dictfield.id()) = fsCtrlNamesTmp.text();
            _fsCtrlNames.update();
            fsCtrlNames.modified();
        }
        else if (formDataSource && _fsCtrlNames.dataMethod())
        {
            // Form string control is bind to a data method. Setting the text property of the form string control is ignored.
            DictTable dictTable = new DictTable(formDataSource.table());
            currentDSRecord = formDataSource.cursor();
            dictTable.callObject(_fsCtrlNames.dataMethod(), currentDSRecord, NoYes::Yes, fsCtrlNamesTmp.text());
            _fsCtrlNames.update();
            fsCtrlNames.modified();
        }
        else
        {
            // Form string control is not bind.
            super(_fsCtrlNames);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDelimiter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the delimiter used to create a list of selected values.
    /// </summary>
    /// <param name = "_delimiter">A delimiter</param>
    /// <returns>A delimiter</returns>
    public str parmDelimiter(str _delimiter = delimiter)
    {
        delimiter = _delimiter;
        return delimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the multi-select control for the specified query.
    /// </summary>
    /// <param name="_frmRun">The underlying form run object on which to create the multi-select control</param>
    /// <param name="_namesCtrl">The string control to replace</param>
    /// <param name="_queryName">The named query to use</param>
    /// <param name="_isMandatory">A Boolean value that specifies whether this control requires mandatory values</param>
    /// <param name="_selectField">The fields to select, in the format [tableId, fieldId]</param>
    /// /// <param name="_delimiter">A delimiter to separate the values</param>
    /// <returns>The multi-select control instance</returns>
    public static DocSysLookupMultiSelectCtrl construct(
        FormRun _frmRun,
        FormStringControl _namesCtrl,
        str _queryName,
        boolean _isMandatory = false,
        container _selectField = conNull(),
        str _delimiter = #SEMICOLON)
    {
        Query q = new Query(_queryName);

        DocSysLookupMultiSelectCtrl multiSelectCtrl = new DocSysLookupMultiSelectCtrl(_frmRun, _namesCtrl, q, _isMandatory, _selectField);
        multiSelectCtrl.parmDelimiter(_delimiter);
        multiSelectCtrl.init();

        return multiSelectCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the multi-select control for the given query.
    /// </summary>
    /// <param name="_frmRun">The underlying form run object on which to create the multi-select control</param>
    /// <param name="_namesCtrl">The string control to replace</param>
    /// <param name="_query">The query to use</param>
    /// <param name="_isMandatory">A Boolean value that specifies whether this control requires mandatory values</param>
    /// <param name="_selectField">The fields to select, in the format [tableId, fieldId]</param>
    /// <param name="_delimiter">A delimiter to separate the values</param>
    /// <returns>The multi-select control instance</returns>
    public static SysLookupMultiSelectCtrl constructWithQuery(
        FormRun _frmRun,
        FormStringControl _namesCtrl,
        Query _query, 
        boolean _isMandatory = false, 
        container _selectField = conNull(),
        str _delimiter = #SEMICOLON)
    {
        DocSysLookupMultiSelectCtrl multiSelectCtrl = new DocSysLookupMultiSelectCtrl(_frmRun, _namesCtrl, _query, _isMandatory, _selectField);
        multiSelectCtrl.parmDelimiter(_delimiter);
        multiSelectCtrl.init();

        return multiSelectCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the multi-select control for the specified query run object.
    /// </summary>
    /// <param name="_frmRun">The underlying form run object on which to create the multi-select control</param>
    /// <param name="_namesCtrl">The string control to replace</param>
    /// <param name="_queryRun">The query run object to use</param>
    /// <param name="_isMandatory">A Boolean value that specifies whether this control requires mandatory values</param>
    /// <param name="_selectField">The fields to select, in the format [tableId, fieldId]</param>
    /// <param name="_delimiter">A delimiter to separate the values</param>
    /// <returns>The multi-select control instance</returns>
    /// <remarks>
    /// Use this for cases where you do not want the control to execute the query, and want to provide the
    /// form a data source with the cursors to which you want to bind.A typical case would be when you want
    /// to bind to a temporary table. In this case you would populate the temporary table and then set the
    /// query run pointer to point to the temporary table.For all other cases, where the query is executing
    /// directly on regular table and you do not have to set the pointer, use the other forms of
    /// construct.When using this with a temporary table, you have to specify the select field container.
    /// This would be required if the control is loaded with values and you want the control to pre-select
    /// the values.
    /// </remarks>
    public static DocSysLookupMultiSelectCtrl constructWithQueryRun(
        FormRun _frmRun,
        FormStringControl _namesCtrl,
        QueryRun _queryRun,
        boolean _isMandatory = false, 
        container _selectField = conNull(), 
        str _delimiter = #SEMICOLON)
    {
        if (!_queryRun)
        {
            throw error(strFmt("@SYS318601", identifierStr(_queryRun)));
        }

        DocSysLookupMultiSelectCtrl multiSelectCtrl = new DocSysLookupMultiSelectCtrl(_frmRun, _namesCtrl, _queryRun.query(), _isMandatory, _selectField, _queryRun);
        multiSelectCtrl.parmDelimiter(_delimiter);
        multiSelectCtrl.init();

        return multiSelectCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>