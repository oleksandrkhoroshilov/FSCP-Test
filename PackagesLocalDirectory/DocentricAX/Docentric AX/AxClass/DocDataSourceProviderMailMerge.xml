<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderMailMerge</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class DocDataSourceProviderMailMerge extends DocDataSourceProviderBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional labels to the report/document data source.
    /// </summary>
    /// <param name="_labelMap">
    /// Label map.
    /// </param>
    protected void addCustomLabels(Map _labelMap)
    {
        // This will be implemented in the next version.
        DocGlobalHelper::handleException(funcName(), 'Not implemented');
        //DocDocuTemplateLabel::fillCustomLabels(
        //    _labelMap,
        //    this.parmParamsMailMerge().parmDocuTypeId(),
        //    this.parmParamsMailMerge().parmTemplateId(),
        //    this.parmParamsMailMerge().parmTemplateLanguageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainDataSectionPre</Name>
				<Source><![CDATA[
    final protected void addMainDataSectionPre()
    {
        DocXmlRecord topRecord;
    
        // Construct Top record in Main Data data element.
        topRecord = DocXmlRecord::constructRecord(
                        this.getPrimaryTableRecord(),
                        this.commonRecordBuildingContext().getLabelForTable(this.parmParamsMailMerge().parmPrimaryTableId()),
                        this.parmParams().parmDsLanguageId(),
                        commonRecordBuildingContext);
    
        // Construct RecordBuilderMainData.
        recordBuilderMainData = DocXmlRecordBuilder::construct(topRecord);
    
        if (this.isQueryBased())
        {
            this.addMainDataSectionQuery();
        }
        else
        {
            recordBuilderMainData.addTitleFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainDataSectionQuery</Name>
				<Source><![CDATA[
    protected void addMainDataSectionQuery()
    {
        DocGlobalHelper::handleException(funcName(), 'Not applicable method for this class - invalid call');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParametersSection</Name>
				<Source><![CDATA[
    final protected void addParametersSection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSystemInfoSection</Name>
				<Source><![CDATA[
    final protected void addSystemInfoSection()
    {
        XmlAttribute        xmlAtt;
        XmlElement          xmlSystemInfoMailMergeElement;
        XmlElement          xmlSystemInfoReportingElement;
        ListEnumerator      listEnumerator;
        str                 dsProviderQueryListStr;
    
    
        super();
    
        xmlSystemInfoMailMergeElement =
            DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlSystemInfoMailMergeElementName);
        xmlSystemInfoRootElement.appendChild(xmlSystemInfoMailMergeElement);
    
        xmlSystemInfoReportingElement =
            DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlSystemInfoReportingElementName);
        xmlSystemInfoRootElement.appendChild(xmlSystemInfoReportingElement);
    
    
        /* Applicable Attributes - MailMerge flavour */
        // DocuTypeId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'docuTypeId');
        xmlAtt.value(this.parmParamsMailMerge().parmDocuTypeId());
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // TemplateId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'templateId');
        xmlAtt.value(this.parmParamsMailMerge().parmTemplateId());
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // TemplateLanguageId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'templateLanguageId');
        xmlAtt.value(this.parmParamsMailMerge().parmTemplateLanguageId());
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // PrimaryTable
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'primaryTable');
        xmlAtt.value(tableId2name(this.parmParamsMailMerge().parmPrimaryTableId()));
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // PrimaryTableRecId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'primaryTableRecId');
        xmlAtt.value(int642str(this.parmParamsMailMerge().parmPrimaryTableRecId()));
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // DataSourceProviderQueryNameList
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'dsProviderQueryNameList');
        dsProviderQueryListStr = DocConstantDSP::ConstStringNA;
        if (this.isQueryBased())
        {
            dsProviderQueryListStr = '';
            listEnumerator = this.parmParamsMailMerge().parmDsProviderQueryNameList().getEnumerator();
            while (listEnumerator.moveNext())
            {
                if (!dsProviderQueryListStr)
                {
                    dsProviderQueryListStr = listEnumerator.current();
                }
                else
                {
                    dsProviderQueryListStr = dsProviderQueryListStr + ',' + listEnumerator.current();
                }
            }
        }
        xmlAtt.value(dsProviderQueryListStr);
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // IncludeCompanyLogoInDs
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'includeCompanyLogoInDs');
        xmlAtt.value(this.parmParams().parmIncludeCompanyLogoInDs() ? 'true' : 'false');
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // IncludeDisplayMethodsInDs
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'includeDisplayMethodsInDs');
        xmlAtt.value(this.parmParams().parmIncludeDisplayMethodsInDs() ? 'true' : 'false');
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
    
        /* Not Applicable Attributes - Basic and SSRS flavour */
        // ReportType
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'reportType');
        xmlAtt.value(int2str(DocConstantDSP::ConstIntegerNA));
        xmlSystemInfoReportingElement.setAttributeNode(xmlAtt);
    
        // ReportTypeLabel
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'reportTypeLabel');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoReportingElement.setAttributeNode(xmlAtt);
    
        // ReportId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'reportId');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoReportingElement.setAttributeNode(xmlAtt);
    
        // ReportGroupId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'reportGroupId');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoReportingElement.setAttributeNode(xmlAtt);
    
        // SRSReportName
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'srsReportName');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoReportingElement.setAttributeNode(xmlAtt);

        // DataSourceType
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'dataSourceType');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoReportingElement.setAttributeNode(xmlAtt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current record RecId of the Primary table.
    /// </summary>
    /// <returns>
    /// Current record RecId of the Primary table.
    /// </returns>
    final public RefRecId getPrimaryTableRecId()
    {
        return this.parmParamsMailMerge().parmPrimaryTableRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current record of the Primary table.
    /// </summary>
    /// <returns>
    /// Current record of the Primary table.
    /// </returns>
    final public Common getPrimaryTableRecord()
    {
        return DocGlobalHelper::getTableRecord(
                    this.parmParamsMailMerge().parmPrimaryTableId(),
                    this.parmParamsMailMerge().parmPrimaryTableRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryTableSysDictTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SysDictTable of the Primary table.
    /// </summary>
    /// <returns>
    /// SysDictTable of the Primary table.
    /// </returns>
    final public SysDictTable getPrimaryTableSysDictTable()
    {
        SysDictTable  sysDictTablePrimaryTable;
    
        sysDictTablePrimaryTable = this.commonRecordBuildingContext().getSysDictTable(this.parmParamsMailMerge().parmPrimaryTableId());
    
        return sysDictTablePrimaryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDS</Name>
				<Source><![CDATA[
    final protected void initDS()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the data source provider is query based.
    /// </summary>
    /// <returns>
    /// True if the data source provider is query based.
    /// Applicable only for mail-merge flavour.
    /// </returns>
    final public boolean isQueryBased()
    {
        return this.parmParamsMailMerge().parmIsDataSourceQueryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    
        flavour = DocFlavour::MailMerge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryTableId</Name>
				<Source><![CDATA[
    public abstract TableId primaryTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParams</Name>
				<Source><![CDATA[
    final protected boolean validateParams()
    {
        boolean  paramsAreValid;
    
        paramsAreValid = super();
    
        if (this.primaryTableId() != this.parmParamsMailMerge().parmPrimaryTableId())
        {
            DocGlobalHelper::handleError(strFmt('Primary table ID (%1) from the data source class provider (%2) differs from this.parmParams().parmPrimaryTableId() (%3)',
                                                this.primaryTableId(), this.parmParams().parmDsProviderDerivedClassName(),
                                                this.parmParamsMailMerge().parmPrimaryTableId()), true, funcName());
            paramsAreValid = false;
        }
    
        if (!this.parmParamsMailMerge().parmDocuTypeId())
        {
            DocGlobalHelper::handleError('Parameter this.parmParamsMailMerge().parmDocuTypeId() is not set', true, funcName());
            paramsAreValid = false;
        }
        else if (!DocuType::find(this.parmParamsMailMerge().parmDocuTypeId()))
        {
            DocGlobalHelper::handleError(strFmt('Document type with ID %1 does not exist', this.parmParamsMailMerge().parmDocuTypeId()), true, funcName());
            paramsAreValid = false;
        }
    
        if (!this.parmParamsMailMerge().parmPrimaryTableId())
        {
            DocGlobalHelper::handleError('Parameter this.parmParamsMailMerge().parmPrimaryTableId() is not set', true, funcName());
            paramsAreValid = false;
        }
        else if (!tableId2name(this.parmParamsMailMerge().parmPrimaryTableId()))
        {
            DocGlobalHelper::handleError(strFmt('Primary table with ID %1 does not exist', this.parmParamsMailMerge().parmPrimaryTableId()), true, funcName());
            paramsAreValid = false;
        }
    
        if (!this.parmParamsMailMerge().parmTemplateId())
        {
            DocGlobalHelper::handleError('Parameter this.parmParamsMailMerge().parmTemplateId() is not set', true, funcName());
            paramsAreValid = false;
        }
    
        if (this.parmParamsMailMerge().parmTemplateLanguageId() &&
            !LanguageTable::exist(this.parmParamsMailMerge().parmTemplateLanguageId()))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateLanguageNotExist", this.parmParamsMailMerge().parmTemplateLanguageId()), true, funcName());
            paramsAreValid = false;
        }
    
        if (this.isQueryBased() && this.parmParamsMailMerge().parmDsProviderQueryNameList() == null)
        {
            DocGlobalHelper::handleError('Parameter this.parmParamsMailMerge().parmDsProviderQueryNameList() is not set', true, funcName());
            paramsAreValid = false;
        }
    
        if (this.isQueryBased() && this.parmParamsMailMerge().parmDsProviderQueryNameList().empty())
        {
            DocGlobalHelper::handleError('Parameter this.parmParamsMailMerge().parmDsProviderQueryNameList() is empty', true, funcName());
            paramsAreValid = false;
        }
    
        return paramsAreValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>