<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSysQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocSysQuery class is a helper class for handling queries.
/// </summary>
public class DocSysQuery extends SysQuery
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mergeFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the filters from the source query to the target query. If the target datasource is a child datasource in the
    /// target query, the source query filters are converted into target query ranges. 
    /// </summary>
    /// <param name="_sourceQuery">The source query</param>
    /// <param name="_targetQuery">The target query</param>
    /// <param name="_sourceQueryDataSourceIndex">The index of the datasource in the source query</param>
    /// <param name="_targetQueryDataSourceIndex">The index of the datasource in the target query</param>
    /// <param name="_alwaysAddDatasource">A flag that indicates whether to always add the datasource to the target query</param>
    /// <param name="_doNotAddQueryFilterForSameField">
    /// A flag that indicates whether adding a query filter for the same field to the target query should not be done.
    /// </param>
    /// <exception cref="Exception::Error">The source query is null.</exception>
    /// <exception cref="Exception::Error">The source datasource is null.</exception>
    /// <exception cref="Exception::Error">The target query is null.</exception>
    /// <exception cref="Exception::Error">The source datasource was not found on the target query and adding the datasource is not allowed.</exception>
    public static void mergeFilters(
        Query _sourceQuery,
        Query _targetQuery,
        int _sourceQueryDataSourceIndex = 1,
        int _targetQueryDataSourceIndex = 1,
        boolean _alwaysAddDatasource = false,
        boolean _doNotAddQueryFilterForSameField = false)
    {
        if (_sourceQuery == null)
        {
            throw error(strFmt("@SYS23669", funcName()));
        }

        QueryBuildDataSource sourceDataSource = _sourceQuery.dataSourceNo(_sourceQueryDataSourceIndex);

        if (sourceDataSource == null)
        {
            throw error(strFmt("@SYS23667", funcName()));
        }

        if (_targetQuery == null)
        {
            throw error(strFmt("@SYS23669", funcName()));
        }
        
        // Check whether the target query datasource exists and add it if necessary
        QueryBuildDataSource targetDataSource;
        if (_targetQuery.dataSourceCount() >= _sourceQueryDataSourceIndex)
        {
            targetDataSource = _targetQuery.dataSourceNo(_targetQueryDataSourceIndex);
            if (targetDataSource.file() != sourceDataSource.file())
            {
                if (_alwaysAddDatasource)
                {
                    targetDataSource = _targetQuery.addDataSource(sourceDataSource.file());
                }
                else
                {
                    throw error(strFmt("@SYS23668", funcName()));
                }
            }
        }
        else
        {
            targetDataSource = _targetQuery.addDataSource(sourceDataSource.file());
        }

        // Traverse throuugh all the source query filters
        for (int filterIndex = 1; filterIndex <= _sourceQuery.queryFilterCount(); filterIndex++)
        {
            QueryFilter sourceQueryFilter = _sourceQuery.queryFilter(filterIndex);
            Debug::assert(sourceQueryFilter != null);

            if (sourceQueryFilter.dataSource().table() == sourceDataSource.table())
            {
                DictField dictField = new DictField(sourceQueryFilter.dataSource().table(), fieldName2id(sourceDataSource.table(), sourceQueryFilter.field()));
                if (dictField == null)
                {
                    // Skip an invalid field
                    continue;
                }
                DictClass xSysQueryDictClass = new DictClass(classNum(xSysQuery));
                if (xSysQueryDictClass == null)
                {
                    continue;
                }

                // Check whether the target query datasource is a child datasource
                if (_targetQueryDataSourceIndex > _sourceQueryDataSourceIndex)
                {
                    // Search for or create the target query range
                    QueryBuildRange targetRange = xSysQueryDictClass.callStatic(identifierStr(getTargetRange),
                        targetDataSource,
                        dictField,
                        sourceQueryFilter.value());

                    // Merge the source query filter to target query range
                    if (targetRange != null)
                    {
                        DocSysQuery::mergeFilterToRange(targetRange, sourceQueryFilter);
                    }
                }
                else
                {
                    // Search for or create the target query filter
                    QueryFilter targetQueryFilter = xSysQueryDictClass.callStatic(identifierStr(getTargetFilter),
                        _targetQuery,
                        targetDataSource,
                        sourceQueryFilter,
                        dictField,
                        _doNotAddQueryFilterForSameField);

                    // Merge the source query filter to target query filter
                    if (targetQueryFilter != null)
                    {
                        xSysQueryDictClass.callStatic(identifierStr(mergeFilter), targetQueryFilter, sourceQueryFilter);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeFilterToRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the source query filter to the target query range.
    /// </summary>
    /// <param name = "_targetRange">Target query range</param>
    /// <param name = "_sourceQueryFilter">Source query filter</param>
    private static void mergeFilterToRange(QueryBuildRange _targetRange, QueryFilter _sourceQueryFilter)
    {
        _targetRange.enabled(true);

        if (_sourceQueryFilter.value() != xSysQuery::valueUnlimited())
        {
            _targetRange.value(_sourceQueryFilter.value());
        }

        switch (_sourceQueryFilter.status())
        {
            case RangeStatus::Locked:
                if (_targetRange.status() == RangeStatus::Open)
                {
                    // Locked is more restricted than Open
                    _targetRange.status(RangeStatus::Locked);
                }
                break;
            case RangeStatus::Hidden:
                if (_targetRange.status() == RangeStatus::Open || _targetRange.status() == RangeStatus::Locked)
                {
                    // Hidden is more restricted than Open and Locked
                    _targetRange.status(RangeStatus::Hidden);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>