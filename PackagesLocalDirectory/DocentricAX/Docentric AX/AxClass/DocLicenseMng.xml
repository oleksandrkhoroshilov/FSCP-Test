<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLicenseMng</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX;
using Docentric.AX.Licensing;
using DocFS = Docentric.AX.Storage.File;
using System.Net.Mail;
using System.Web;

/// <summary>
/// The DocLicenseMng class is used for license management.
/// </summary>
public class DocLicenseMng
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFullEditionFeatureForFeatureName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the .NET DocFullEditionFeature enum value for specified feature name.
    /// </summary>
    /// <param name = "_featureName">Feature name</param>
    /// <returns>The .NET DocFullEditionFeature enum value</returns>
    private static DocFullEditionFeature getFullEditionFeatureForFeatureName(str _featureName)
    {
        DocFullEditionFeature docFullEditionFeature;
        
        switch (_featureName)
        {
            case DocConstant::FeatureEmailAttachments:
                return DocFullEditionFeature::EmailAttachments;
            case DocConstant::FeatureEmailTemplates:
                return DocFullEditionFeature::EmailTemplates;
            case DocConstant::FeaturePdfDocumentProperties:
                return DocFullEditionFeature::PdfProperties;
            case DocConstant::FeaturePdfSecurity:
                return DocFullEditionFeature::PdfSecurity;
            case DocConstant::FeaturePdfACompliance:
                return DocFullEditionFeature::PdfACompliance;
            case DocConstant::FeaturePreviewCBD:
            case DocConstant::FeatureCBD:
                return DocFullEditionFeature::ConfigurableBusinessDocuments;
            case DocConstant::FeatureSavingToExternalAzureBlobStorage:
                return DocFullEditionFeature::AzureExternalBlobStorage;
            case DocConstant::FeatureSavingToExternalAzureFiles:
                return DocFullEditionFeature::AzureFileShare;
            case DocConstant::FeatureSharePointExtendedSecurity:
                return DocFullEditionFeature::SharePointExtendedSecurity;
            case DocConstant::FeatureSharePointMetadataFields:
                return DocFullEditionFeature::SharePointSaveMetadataFields;
            case DocConstant::FeatureUserDefLabels:
                return DocFullEditionFeature::UserDefinedLabels;
            case DocConstant::FeatureUserDefPlaceholders:
                return DocFullEditionFeature::UserDefinedPlaceholders;
            case DocConstant::FeatureWhsLicensePlateLabels:
                return DocFullEditionFeature::WhsLicensePlateLabels;
            case DocConstant::FeatureAlertSummaryEmails:
                return DocFullEditionFeature::AlertSummaryEmails;
            case DocConstant::FeaturePrintMgmtUtilsFullEdition:
                return DocFullEditionFeature::PrintMgmtUtilsFullEdition;
            default:
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:LicenseFeatureNotSupported", _featureName));
        }
        return docFullEditionFeature; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the validity of the license and throws an exception if the license is not found or invalid.
    /// </summary>
    /// <param name = "_featureName">Feature name</param>
    /// <param name = "_errorMsg">Error message</param>
    public static void checkLicense(str _featureName, str _errorMsg)
    {
        // Handle the exception if license check fails
        void handleException()
        {
            str errMsg = _errorMsg;
            if (!errMsg)
            {
                errMsg = "@DocentricAX3:FailedToPrintReport";
            }
            DocGlobalHelper::handleException(funcName(), errMsg, DocConstantDiagnostics::ErrLicenseNotFoundOrInvalid);
        }

        if (_featureName == '')
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSet", identifierStr(_featureName)));
        }

        /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
        /*
           In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
           is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
           the Docentric AX Free Edition product.
           You must keep intact all parts of the source code related to the licensing of the full product version.
           Read more: https://ax.docentric.com/free-edition-license/
                                                                                                                        */
        /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

        try
        {
            if (appl.ttsLevel() == 0)
            {
                DocAxLicenseManager::CheckLicenseFeature(DocLicenseMng::getFullEditionFeatureForFeatureName(_featureName));
            }
            else
            {
                System.String clrErrorMsg = '';
                boolean isFeatureLicensed = DocAxLicenseManager::IsFeatureLicensed(DocLicenseMng::getFullEditionFeatureForFeatureName(_featureName), byref clrErrorMsg);
                if (!isFeatureLicensed)
                {
                    DocGlobalHelper::handleError(clrErrorMsg, true, funcName());
                    handleException();
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName());
            handleException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLicenseUI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the validity of the license and shows the Warning OnceBoxForm if the license is not found or is invalid.
    /// </summary>
    /// <param name = "_featureName">Feature name</param>
    /// <param name = "_callerFormName">Caller form name</param>
    /// <param name = "_isBoxFormOnce">Boolean: true means that BoxFormOnce type of the dialog
    /// should be used, false means that the standard Box type should be used.</param>
    /// <returns>True if the license is valid; otherwise false</returns>
    public static boolean checkLicenseUI(str _featureName, str _callerFormName, boolean _isBoxFormOnce = true)
    {
        boolean isLicenseValid = true;

        if (_featureName == '')
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParameterNotSet", identifierStr(_featureName)));
        }

        try
        {
            DocAxLicenseManager::CheckLicenseFeature(DocLicenseMng::getFullEditionFeatureForFeatureName(_featureName));
        }
        catch (Exception::CLRError)
        {
            isLicenseValid = false;

            str errorMsg = DocGlobalHelper::getLastClrExceptionMessage();

            if (_isBoxFormOnce)
            {
                BoxFormOnce boxFormOnce = BoxFormOnce::construct();
                boxFormOnce.parmDialogBoxType(DialogBoxType::WarnBox);
                boxFormOnce.parmDialogButton(DialogButton::Ok);
                boxFormOnce.parmOwner(strFmt('%1 - %2 - %3', _callerFormName, _featureName, "@DocentricAX3:LicenseNotValidErrMsg"));
                boxFormOnce.parmText(errorMsg);
                boxFormOnce.parmTitle("@DocentricAX3:LicenseErrorTitle");
                boxFormOnce.prompt();
            }
            else
            {
                Box::warning(errorMsg, "@DocentricAX3:LicenseErrorTitle");
            }
        }

        return isLicenseValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicenseValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the valid license exists.
    /// </summary>
    /// <returns>Returns true if the valid license is found, otherwise returns false. Doesn't throw any exception.</returns>
    public static boolean isLicenseValid()
    {
        boolean isLicenseValid = true;
        
        try
        {
            DocAxLicenseManager::CheckLicense();
        }
        catch (Exception::CLRError)
        {
            // Swallow the exception.
            isLicenseValid = false;
        }

        return isLicenseValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a new license from the specified license memory stream.
    /// </summary>
    /// <param name = "_licenseMemoryStream">License memory stream</param>
    public static void setLicense(System.IO.MemoryStream _licenseMemoryStream)
    {
        if (_licenseMemoryStream == null || _licenseMemoryStream.Length == 0)
        {
            DocGlobalHelper::handleError("@DocentricAX:LicenseNotProvided");
            DocGlobalHelper::handleError("@DocentricAX:UnlockingProductFailed", true, '', true);
        }
    
        DocLicenseInfo docLicenseInfo;

        try
        {
            if (_licenseMemoryStream.CanSeek)
            {
                _licenseMemoryStream.Seek(0, System.IO.SeekOrigin::Begin);
            }

            ttsbegin;

            // Set the license in .NET and set the DocInstallation.LicenseContent table field.
            DocAxLicenseManager::SetNewLicense(_licenseMemoryStream);  // This method will invoke DocInstallation::setLicense()

            // The license will be retrieved from .NET (and .NET will read the license from the DocInstallation.LicenseContent table field.)
            docLicenseInfo = DocLicenseInfo::construct();

            if (docLicenseInfo.parmLicenseType() == DocReportParamLicenseType::FreeEdition &&
                (docLicenseInfo.parmLicenseStatus() == DocAxLicenseStatus::NotRetrieved ||
                 docLicenseInfo.parmLicenseStatus() == DocAxLicenseStatus::LicenseInvalid))
            {
                DocGlobalHelper::handleException(funcName(), docLicenseInfo.parmLicenseErrorMessage());
            }

            // Update the DocLicenseParameters table fields and delete the license notification and renewal history.
            DocLicenseParameters::updateLicenseInfo(docLicenseInfo, true);

            ttscommit;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), "@DocentricAX:UnlockingProductFailed");
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:UnlockingProductFailed");
        }

        // Check if the loaded license is valid.
        if (docLicenseInfo.parmLicenseStatus() == DocAxLicenseStatus::LicenseValid)
        {
            // Inform about successful unlocking the product.
            DocGlobalHelper::handleInfo("@DocentricAX:LicenseIsSet");
        }
        else
        {
            // Perpetual license has expired Maintenance, Subscription-based license is expired or Evaluation license is expired.
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:ExpiredLicenseLoadedWarningMsg", docLicenseInfo.parmLicenseErrorMessage()));
        }

        // Log the loading the license to AppInsights.
        DocDiagnosticsManager::logLicenseEvent(DocConstantDiagnostics::LicenseLoad);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the license.
    /// </summary>
    public static void removeLicense()
    {
        try
        {
            ttsbegin;

            // Clear the DocLicenseParameters table fields without deleting the license notification and renewal history.
            DocLicenseParameters::updateLicenseInfo(DocLicenseInfo::constructFreeEditionLicenseType(), false);

            // Remove the license in .NET and clear the DocInstallation.LicenseContent table field.
            DocAxLicenseManager::RemoveLicense();  // This method will invoke DocInstallation::setLicense(null)

            ttscommit;

            DocDiagnosticsManager::logLicenseEvent(DocConstantDiagnostics::LicenseRemove);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX3:ErrorRemovingLicense");
        }

        // Inform about success.
        DocGlobalHelper::handleInfo("@DocentricAX3:SuccessRemovingLicense");
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the license content and sends it to the user.
    /// </summary>
    public static void exportLicense()
    {
        const str licenseFileName = 'DocentricAXLicense_SubscriptionEnd-%1.lic';

        try
        {
            System.Byte[] licenseContent = DocInstallation::getLicense();

            if (licenseContent != null)
            {
                System.DateTime subscriptionEndDate = DocLicenseParameters::find().LicenseSubscriptionEnd;

                DocFileMngHelper::sendFileToUser(DocGlobalHelper::convertBytesToMemoryStream(licenseContent), strFmt(licenseFileName, subscriptionEndDate.ToString('yyyy-MM-dd')));

                DocGlobalHelper::handleInfo("@DocentricAX4:ExportLicenseSuccessMsg");

                DocDiagnosticsManager::logLicenseEvent(DocConstantDiagnostics::LicenseExport);
            }
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:LicenseParametersLicenseExportError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLicenseExpirationNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a license subscription expiration notification.
    /// </summary>
    public static void createLicenseExpirationNotification()
    {
        DocLicenseParameters licenseParameters = DocLicenseParameters::find();

        // Check if license exists. If not (Free Edition), there is no need to send license subscription expiration notifications.
        if (licenseParameters.LicenseType == DocReportParamLicenseType::FreeEdition)
        {
            DocGlobalHelper::handleWarning("@DocentricAX4:SubscriptionExpirationNotificationsNotApplicableOnFreeEditionMsg");
            return;
        }
        
        int noOfDays = 0;
        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        // If there is more than 60 days before license subscription expiration, return.
        noOfDays = intvNo(licenseParameters.LicenseSubscriptionEnd, currentDate, IntvScale::YearMonthDay);
        if (noOfDays > DocLicenseNotificationInterval::SixtyDays)
        {
            DocGlobalHelper::handleInfo("@DocentricAX4:SubscriptionExpirationNotificationsNotStartedMsg");
            return;
        }

        DocLicenseNotificationInterval notificationInterval = DocLicenseMng::getNotificationInterval(noOfDays);
        
        // Check if the license expiration notification already exists for the selected notification interval
        DocLicenseNotificationHistory notificationHistory = DocLicenseNotificationHistory::find(
                licenseParameters.LicenseSerialNo, licenseParameters.LicenseSubscriptionStart, notificationInterval);
        if (notificationHistory)
        {
            // Docentric AX subscription expiration notifications have been already created for the current notification interval (%1). No new notifications will be created until the next interval.
            DocGlobalHelper::handleInfo(strFmt("@DocentricAX4:SubscriptionExpirationNotificationsAlreadyCreatedStartedMsg", notificationInterval));
            return;
        }

        // Prepare a variable used for notifications: noOfDaysStr. It's empty if the license has expired.
        str noOfDaysStr = noOfDays > 0 ? (strFmt('%1 %2', noOfDays, noOfDays > 1 ? "@DocentricAX4:LicenseNotificationNoOfDaysPlural" : "@DocentricAX4:LicenseNotificationNoOfDaysSingular")) : '';
        // Prepare a variable used for infolog: noOfDaysStrInfologMsg.
        str noOfDaysStrInfologMsg = noOfDaysStr ? noOfDaysStr : strFmt('0 %1', "@DocentricAX4:LicenseNotificationNoOfDaysPlural");
        
        try
        {
            // Unpack the container with the stored license notification settings.
            Set notificationSettingsSet = Set::create(licenseParameters.LicenseNotificationSettings);

            // Create a system notification in Action Center.
            DocLicenseNotificationHistoryRecId notificationHistoryRecId = DocLicenseMng::createNotification(
                noOfDaysStr, notificationSettingsSet, licenseParameters.LicenseSerialNo, licenseParameters.LicenseSubscriptionStart, notificationInterval);

            if (!notificationHistoryRecId)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ExpiringSubscriptionNotificationFailedToBeCreatedErrMsg", noOfDaysStrInfologMsg, notificationInterval));
            }

            // The notification is successfully created -> send email notifications if configured so.
            else
            {
                // Create and send notification emails if configured so.
                int emailsToSendCount, sentEmailsCount;
                [emailsToSendCount, sentEmailsCount] = DocLicenseMng::createAndSendNotificationEmails(noOfDaysStr, notificationSettingsSet, notificationHistoryRecId);

                if (emailsToSendCount == 0)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX4:ExpiringSubscriptionNoEmailNotificationInfoMsg", notificationInterval, noOfDaysStrInfologMsg));
                }
                else // if (emailsToSendCount > 0)
                {
                    if (emailsToSendCount == sentEmailsCount)
                    {
                        DocGlobalHelper::handleInfo(
                            strFmt("@DocentricAX4:ExpiringSubscriptionEmailNotificationInfoMsg", noOfDaysStrInfologMsg, notificationInterval, emailsToSendCount));
                    }
                    else // if (emailsToSendCount > sentEmailsCount)
                    {
                        DocGlobalHelper::handleWarning(
                            strFmt("@DocentricAX4:ExpiringSubscriptionEmailNotificationWarningMsg", noOfDaysStrInfologMsg, notificationInterval, sentEmailsCount, emailsToSendCount));
                    }
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotificationInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the notification interval depending on number of days left before the license will expire.
    /// </summary>
    /// <param name = "_noOfDays">Number of days</param>
    /// <returns>A notification interval</returns>
    private static DocLicenseNotificationInterval getNotificationInterval(int _noOfDays)
    {
        DocLicenseNotificationInterval notificationInterval;

        if (_noOfDays <= DocLicenseNotificationInterval::SixtyDays && _noOfDays > DocLicenseNotificationInterval::ThirtyDays)
        {
            notificationInterval = DocLicenseNotificationInterval::SixtyDays;
        }
        else if (_noOfDays <= DocLicenseNotificationInterval::ThirtyDays && _noOfDays > DocLicenseNotificationInterval::FourteenDays)
        {
            notificationInterval = DocLicenseNotificationInterval::ThirtyDays;
        }
        else if (_noOfDays <= DocLicenseNotificationInterval::FourteenDays && _noOfDays > DocLicenseNotificationInterval::SevenDays)
        {
            notificationInterval = DocLicenseNotificationInterval::FourteenDays;
        }
        else if (_noOfDays <= DocLicenseNotificationInterval::SevenDays && _noOfDays > DocLicenseNotificationInterval::ThreeDays)
        {
            notificationInterval = DocLicenseNotificationInterval::SevenDays;
        }
        else if (_noOfDays == DocLicenseNotificationInterval::ThreeDays)
        {
            notificationInterval = DocLicenseNotificationInterval::ThreeDays;
        }
        else if (_noOfDays == DocLicenseNotificationInterval::TwoDays)
        {
            notificationInterval = DocLicenseNotificationInterval::TwoDays;
        }
        else if (_noOfDays == DocLicenseNotificationInterval::OneDay)
        {
            notificationInterval = DocLicenseNotificationInterval::OneDay;
        }
        else if (_noOfDays <= DocLicenseNotificationInterval::ZeroDays)
        {
            notificationInterval = DocLicenseNotificationInterval::ZeroDays;
        }
        return notificationInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a system notification in the SystemNotification table and
    /// logs the information in the DocLicenseNotificationHistory table.
    /// </summary>
    /// <param name = "_noOfDaysStr">Number of days as string</param>
    /// <param name = "_notificationSettingsSet">License notification settings list</param>
    /// <param name = "_licenseSerialNo">License serial number</param>
    /// <param name = "_licenseSubscriptionStart">License subscription start date</param>
    /// <param name = "_notificationInterval">Notification interval</param>
    /// <returns>Record Id of created DocLicenseNotificationHistory record</returns>
    private static DocLicenseNotificationHistoryRecId createNotification(
        str _noOfDaysStr,
        Set _notificationSettingsSet,
        DocReportParamLicenseSerialNo _licenseSerialNo,
        DocReportParamLicenseSubscriptionStart _licenseSubscriptionStart,
        DocLicenseNotificationInterval _notificationInterval)
    {
        SystemNotificationActionDataContract action = new SystemNotificationActionDataContract();
        action.Type(SystemNotificationActionType::AxDisplayMenuFunction);
        SystemNotificationMenuFunctionDataContract actionData = new SystemNotificationMenuFunctionDataContract();

        str notificationMessage = strFmt('%1%2. %3 %4 %5 %6 > %7 %8 %9.', 
            _noOfDaysStr != '' ?  strFmt('%1 ', "@DocentricAX4:LicenseNotificationEmailBody11") : "@DocentricAX4:LicenseNotificationEmailBody12",
            _noOfDaysStr,
            "@DocentricAX4:LicenseNotificationEmailBody3",
            "@DocentricAX4:LicenseNotificationEmailBody4",
            "@DocentricAX4:LicenseNotificationEmailBody5",
            "@DocentricAX:Parameters",
            "@DocentricAX:Licensing",
            "@DocentricAX4:LicenseNotificationEmailBody7",
            DocConstant::LicenseRenewalEmailAddress);

        action.Message(strFmt("@SYS90522", "@DocentricAX:DocentricParameters"));
        actionData.MenuItemName(menuItemDisplayStr(DocParametersLicensing));
        action.Data(FormJsonSerializer::serializeClass(actionData));

        SystemNotificationDataContract notification = new SystemNotificationDataContract();
        notification.Title("@DocentricAX4:LicenseNotificationTitle");
        notification.RuleId(classStr(DocLicenseMng));
        notification.Type(SystemNotificationType::ApplicationNotification);
        notification.Severity(SystemNotificationSeverity::Warning);
        notification.Message(notificationMessage);
        notification.ExpirationDateTime(DateTimeUtil::addDays(DateTimeUtil::utcNow(), 1));

        notification.Actions().value(1, action);

        // Set security roles for the system notification
        SecurityRole securityRole;
        SetEnumerator notificationSettingsSetEnum = _notificationSettingsSet.getEnumerator();
        int i = 0;
        while (notificationSettingsSetEnum.moveNext())
        {
            DocLicenseNotificationSettings notificationSettings = notificationSettingsSetEnum.current();

            str securityRoleAOTName = '';
            switch (notificationSettings.parmNotificationRole())
            {
                case DocLicenseNotificationRole::None:
                    break;
                case DocLicenseNotificationRole::SysAdmin:
                    securityRoleAOTName = DocConstant::SecurityRoleSysAdminAOTName;
                    break;
                default:
                    securityRoleAOTName = enum2Symbol(enumNum(DocLicenseNotificationRole), notificationSettings.parmNotificationRole());
                    break;
            }
            if (securityRoleAOTName)
            {
                select firstonly RecId
                    from securityRole
                    where securityRole.AotName == securityRoleAOTName;

                i++;
                notification.Roles().value(i, securityRole.RecId);
            }
        }

        // Add a system notification.
        DocSystemNotificationRecId notificationRecId = SystemNotificationsManager::AddSystemNotification(notification);

        DocLicenseNotificationHistory notificationHistory;

        // Check if a system notification was created
        if (notificationRecId)
        {
            // Log that the system notification was successfully created
            ttsbegin;

            notificationHistory.selectForUpdate(true);
            notificationHistory.clear();
            notificationHistory.LicenseSerialNo = _licenseSerialNo;
            notificationHistory.LicenseSubscriptionStart = _licenseSubscriptionStart;
            notificationHistory.NotificationInterval = _notificationInterval;
            notificationHistory.NotificationRecId = notificationRecId;
            notificationHistory.insert();

            ttscommit;
        }

        return notificationHistory.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndSendNotificationEmails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and sends the notification emails to the specified email recipients and
    /// logs the information in the DocLicenseNotifciationEmailHistory table.
    /// </summary>
    /// <param name = "_noOfDaysStr">Number of days as string</param>
    /// <param name = "_notificationSettingsSet">License notification settings list</param>
    /// <param name = "_notficationHistoryRecId">Record Id of created DocLicenseNotificationHistory record</param>
    /// <returns>Container: [emailsToSendCount, sentEmailsCount]</returns>
    private static container createAndSendNotificationEmails(
        str _noOfDaysStr,
        Set _notificationSettingsSet,
        DocLicenseNotificationHistoryRecId _notficationHistoryRecId)
    {
        DocLicenseNotificationEmailHistory notificationEmailHistory;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(DocLicenseNotificationEmailHistory));
        int emailsToSendCount = 0;
        int sentEmailsCount = 0;

        SetEnumerator notificationSettingsSetEnum = _notificationSettingsSet.getEnumerator();
        while (notificationSettingsSetEnum.moveNext())
        {
            DocLicenseNotificationSettings notificationSettings = notificationSettingsSetEnum.current();
            if (!notificationSettings.parmNotificationSendEmail())
            {
                continue;
            }
            
            emailsToSendCount++;

            // Set the NotificationEmailFrom address if it is empty
            if (!notificationSettings.parmNotificationEmailFrom())
            {
                notificationSettings.parmNotificationEmailFrom(DocEmailMngHelper::getDefaultEmailProviderEmailAddress());
            }

            // Set the NotificationEmailTo address for the specified security role. 
            // Email addresses for the security roles are not stored in the 
            // LicenseNotificationSettings container field in the table DocLicenseParameters.
            switch (notificationSettings.parmNotificationRole())
            {
                case DocLicenseNotificationRole::None:
                    break;

                case DocLicenseNotificationRole::SysAdmin:
                    notificationSettings.parmNotificationEmailTo(DocEmailMngHelper::getEmailAddressesForRole(DocConstant::SecurityRoleSysAdminAOTName));
                    break;

                default:
                    notificationSettings.parmNotificationEmailTo(DocEmailMngHelper::getEmailAddressesForRole(enum2Symbol(enumNum(DocLicenseNotificationRole), notificationSettings.parmNotificationRole())));
            }

            int infologLine = infologLine();
            boolean notificationEmailSent = false;
            str errorMsg = '';
            try
            {
                // Create a notification email message
                using (MailMessage mailMessage = DocEmailMngHelper::createEmailMessage(
                                                                    notificationSettings.parmNotificationEmailFrom(),
                                                                    "@DocentricAX4:LicenseNotificationEmailAccountDisplayName",
                                                                    notificationSettings.parmNotificationEmailTo(),
                                                                    '',
                                                                    '',
                                                                    _noOfDaysStr != '' ? strFmt("@DocentricAX4:LicenseNotificationEmailSubject11", _noOfDaysStr) : "@DocentricAX4:LicenseNotificationEmailSubject12",
                                                                    DocLicenseMng::getEmailBody(_noOfDaysStr, notificationSettings.parmNotificationRole()),
                                                                    true))
                {
                    // Send mail message using email provider set in Email parameters.
                    DocEmailMngHelper::sendEmailMsgUsingEmailProvider(mailMessage);
                    notificationEmailSent = true;

                    sentEmailsCount++;
                }
            }
            catch (Exception::CLRError)
            {
                errorMsg = DocGlobalHelper::getLastClrExceptionMessage();
            }
            catch
            {
                errorMsg = DocGlobalHelper::getInfoLogMessages(infologLine + 1, '', true);
            }
            finally
            {
                // Create a record and add it to the record insert list
                notificationEmailHistory.clear();
                notificationEmailHistory.NotificationHistoryRecId = _notficationHistoryRecId;
                notificationEmailHistory.NotificationRole = notificationSettings.parmNotificationRole();
                notificationEmailHistory.NotificationEmailTo = notificationSettings.parmNotificationEmailTo();
                notificationEmailHistory.NotificationEmailSent = notificationEmailSent;
                notificationEmailHistory.NotificationEmailErrorMsg = errorMsg;
                recordInsertList.add(notificationEmailHistory);
            }
        }

        // Insert the record insert list to the DocLicenseNotificationEmailHistory table
        recordInsertList.insertDatabase();

        return [emailsToSendCount, sentEmailsCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an email body for notification email.
    /// </summary>
    /// <param name = "_noOfDaysStr">Number of days as string</param>
    /// <param name = "_notificationRole">License notification role</param>
    /// <returns>An email body</returns>
    private static str getEmailBody(str _noOfDaysStr, DocLicenseNotificationRole _notificationRole)
    {
        // Get notification email template from resource file
        ResourceNode node = SysResource::getResourceNode(resourceStr(DocLicenseNotificationEmailBodyHTM));
        if (!node)
        {
            DocGlobalHelper::handleError(strFmt("@SYS332180", identifierStr(DocLicenseNotificationEmailBodyHTM)), false, funcName(), true);
        }
        str emailTemplate = conPeek(SysResource::getResourceNodeData(node), 1);

        // Create a link url to the Docentric parameters
        Map fieldNameValueMap = new Map(Types::String, Types::String);
        fieldNameValueMap.add(fieldStr(DocLicenseParameters, RecId), int642Str(DocLicenseParameters::find().RecId));
        str url = DocGlobalHelper::generateRecordUrl(menuItemDisplayStr(DocParameters), MenuItemType::Display, tableStr(DocLicenseParameters), fieldNameValueMap);

        // Get current user
        UserId curUserId = curUserId();
        UserName curUserName = xUserInfo::find(false, curUserId).Name;
        Name curWorkerName = HcmWorker::findByPerson(DirPersonUser::find(curUserId).PersonParty).name();
        str user = strFmt('%1 (%2)', curUserId, curWorkerName != '' ? curWorkerName : curUserName);

        // Set values for placeholders in notification email template
        str emailBodyTitle = "@DocentricAX4:LicenseNotificationTitle";
        str emailBody1 = _noOfDaysStr != '' ? strFmt('%1 ', "@DocentricAX4:LicenseNotificationEmailBody11") : "@DocentricAX4:LicenseNotificationEmailBody12";
        str emailBody2 = _noOfDaysStr;
        str emailBody3 = strFmt('. %1 ', "@DocentricAX4:LicenseNotificationEmailBody3");
        str emailBody4 = url;
        str emailBody5 = "@DocentricAX4:LicenseNotificationEmailBody4";
        str emailBody6 = strFmt(' %1 ', "@DocentricAX4:LicenseNotificationEmailBody5");
        str emailBody7 = strFmt('%1 > %2', "@DocentricAX:Parameters", "@DocentricAX:Licensing");
        str emailBody8 = strFmt(' %1 ', "@DocentricAX4:LicenseNotificationEmailBody7");
        str emailBody9 = DocConstant::LicenseRenewalEmailAddress;
        str emailBody10 = '.';
        str emailBodyFooter1 = "@DocentricAX4:LicenseNotificationEmailBodyFooter1";
        str emailBodyFooter2 = strFmt(' %1 ', _notificationRole != DocLicenseNotificationRole::None ? strFmt("@DocentricAX4:LicenseNotificationEmailBodyFooter21", enum2Str(_notificationRole)) : "@DocentricAX4:LicenseNotificationEmailBodyFooter22");
        str emailBodyFooter3 = strFmt('%1 %2 > %3 > %4.', "@DocentricAX4:LicenseNotificationEmailBodyFooter3", "@DocentricAX:Parameters", "@DocentricAX:Licensing", "@DocentricAX4:LicenseParametersNotificationSettings");
        str emailBodyEnv = "@DocentricAX4:LicenseNotificationEnv";
        str emailBodyEnvInstallationIdLabel = "@DocentricAX:InstallationId";
        str emailBodyEnvInstallationId = DocInstallation::getInstallationId();
        str emailBodyEnvEnvironmentTypeLabel = "@DocentricAX4:LicenseNotificationEnvEnvironmentType";
        str emailBodyEnvEnvironmentType = strFmt('%1 / %2', DocDiagnosticsManager::deploymentType(), DocDiagnosticsManager::hostingEnvironment());
        str emailBodyEnvTenantLabel = "@DocentricAX4:LicenseNotificationEnvTenant";
        str emailBodyEnvTenant = DocGlobalHelper::getAADTenantId();
        str emailBodyEnvDomainNameLabel = "@DocentricAX4:LicenseNotificationEnvDomainName";
        str emailBodyEnvDomainName = DocDiagnosticsManager::fullyQualifiedDomainName();
        str emailBodyEnvD365FOVersionLabel = "@DocentricAX4:LicenseNotificationEnvD365FOVersion";
        str emailBodyEnvD365FOVersion = DocDiagnosticsManager::d365Version();
        str emailBodyEnvD365FOUserLicenseCountLabel = "@DocentricAX4:LicenseNotificationEnvD365FOUserLicenseCount";
        str emailBodyEnvD365FOUserLicenseCount = DocDiagnosticsManager::d365UserLicenseCount();
        str emailBodyEnvCompanyLabel = "@DocentricAX:Company";
        str emailBodyEnvCompany	= strFmt('%1 (%2)', CompanyInfo::find().name(), curExt());
        str emailBodyEnvUserLabel = "@DocentricAX4:User";
        str emailBodyEnvUser = user;
        str emailBodyEnvServerHostnameLabel = "@DocentricAX4:LicenseNotificationEnvServerHostname";
        str emailBodyEnvServerHostname = DocGlobalHelper::getServerHostname();
        str emailBodyEnvLcsEnvironmentIdLabel = "@DocentricAX4:LicenseNotificationEnvLcsEnvironmentId";
        str emailBodyEnvLcsEnvironmentId = DocGlobalHelper::getLcsEnvironmentId();
        str emailBodyEnvCustomName = DocDiagnosticsManager::getCurrentEnvironmentCustomName();
        DocEnvironmentMode emailBodyEnvMode = DocDiagnosticsManager::getCurrentEnvironmentMode();
        str emailBodyEnvDomainNameAndCustomName = emailBodyEnvCustomName != '' ? strFmt('%1 (%2)', emailBodyEnvDomainName, emailBodyEnvCustomName) : emailBodyEnvDomainName;
        str emailBodyEnvLcsEnvironmentIdAndMode = emailBodyEnvMode != DocEnvironmentMode::NotSet ? strFmt('%1 (%2)', emailBodyEnvLcsEnvironmentId, enum2Str(emailBodyEnvMode)) : emailBodyEnvLcsEnvironmentId;

        // Replace placeholders in notification email template with values
        return strFmt(emailTemplate,
            HttpUtility::HtmlEncode(emailBodyTitle),
            HttpUtility::HtmlEncode(emailBody1),
            HttpUtility::HtmlEncode(emailBody2),
            HttpUtility::HtmlEncode(emailBody3),
            HttpUtility::HtmlEncode(emailBody4),
            HttpUtility::HtmlEncode(emailBody5),
            HttpUtility::HtmlEncode(emailBody6),
            HttpUtility::HtmlEncode(emailBody7),
            HttpUtility::HtmlEncode(emailBody8),
            HttpUtility::HtmlEncode(emailBody9),
            HttpUtility::HtmlEncode(emailBody10),
            HttpUtility::HtmlEncode(emailBodyFooter1),
            HttpUtility::HtmlEncode(emailBodyFooter2),
            HttpUtility::HtmlEncode(emailBodyFooter3),
            HttpUtility::HtmlEncode(emailBodyEnv),
            HttpUtility::HtmlEncode(emailBodyEnvInstallationIdLabel),
            HttpUtility::HtmlEncode(emailBodyEnvInstallationId),
            HttpUtility::HtmlEncode(emailBodyEnvEnvironmentTypeLabel),
            HttpUtility::HtmlEncode(emailBodyEnvEnvironmentType),
            HttpUtility::HtmlEncode(emailBodyEnvTenantLabel),
            HttpUtility::HtmlEncode(emailBodyEnvTenant),
            HttpUtility::HtmlEncode(emailBodyEnvDomainNameLabel),
            HttpUtility::HtmlEncode(emailBodyEnvDomainNameAndCustomName),
            HttpUtility::HtmlEncode(emailBodyEnvD365FOVersionLabel),
            HttpUtility::HtmlEncode(emailBodyEnvD365FOVersion),
            HttpUtility::HtmlEncode(emailBodyEnvD365FOUserLicenseCountLabel),
            HttpUtility::HtmlEncode(emailBodyEnvD365FOUserLicenseCount),
            HttpUtility::HtmlEncode(emailBodyEnvCompanyLabel),
            HttpUtility::HtmlEncode(emailBodyEnvCompany),
            HttpUtility::HtmlEncode(emailBodyEnvUserLabel),
            HttpUtility::HtmlEncode(emailBodyEnvUser),
            HttpUtility::HtmlEncode(emailBodyEnvServerHostnameLabel),
            HttpUtility::HtmlEncode(emailBodyEnvServerHostname),
            HttpUtility::HtmlEncode(emailBodyEnvLcsEnvironmentIdLabel),
            HttpUtility::HtmlEncode(emailBodyEnvLcsEnvironmentIdAndMode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// An entry point of the DocLicenseMng class.
    /// </summary>
    /// <param name = "_args">Args</param>
    public static void main(Args _args)
    {
        System.IO.Stream licenseContent;
        str errMsg = "@DocentricAX:LicenseFileUploadFailed";

        if (DocConstantGlobal::isOnPremEnvironment())
        {
            DocFS.File licenseFile = DocFileUploadOnPremHelper::GetFileFromUser(DocConstantFile::FileExtensionDelimiter + DocConstantFile::DocentricLicenseExt);
            if (licenseFile != null)
            {
                try
                {
                    licenseContent = DocGlobalHelper::convertBytesToMemoryStream(licenseFile.Bytes);
                    if (licenseContent == null)
                    {
                        throw Exception::Error;
                    }
                }
                catch
                {
                    DocGlobalHelper::handleError(errMsg);
                    DocGlobalHelper::handleError("@DocentricAX:UnlockingProductFailed", true, '', true);
                }
            }
        }
        else
        {
            FileUploadResultBase result = File::GetFileFromUser(classStr(DocFileUploadTemporaryProductLicenseStorageStrategy));
            if (result && result.getUploadStatus())
            {
                try
                {
                    licenseContent = result.openResult();
                }
                catch (Exception::CLRError)
                {
                    DocGlobalHelper::handleClrError('', errMsg);
                }
                catch
                {
                    DocGlobalHelper::handleError(errMsg);
                }

                if (licenseContent == null)
                {
                    DocGlobalHelper::handleError("@DocentricAX:UnlockingProductFailed", true, '', true);
                }
            }
        }

        if (licenseContent != null)
        {
            DocLicenseMng::setLicense(licenseContent);

            // Refresh form data source DocLicenseParameters.
            if (_args && _args.record())
            {
                FormDataSource callerDataSource = FormDataUtil::getFormDataSource(_args.record());
                if (callerDataSource)
                {
                    callerDataSource.research(true);
                }
            }
        }
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>