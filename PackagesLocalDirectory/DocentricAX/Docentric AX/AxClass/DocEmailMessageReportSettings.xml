<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailMessageReportSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocEmailMessageReportSettings
{
    DocEmailReplyToAddress               replyToAddress;
    DocEmailBounceToAddress              bounceToAddress;
    DocEmailMsgPriority                  messagePriority;
    DocEmailSendingMode                  sendingMode;
    DocEmailReadReceiptAddress           readReceiptAddress;
    DocEmailDeliveryReceiptCondition     deliveryReceiptCondition;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    public static DocEmailMessageReportSettings newDefault()
    {
        DocEmailMessageReportSettings settings = new DocEmailMessageReportSettings();

        settings.parmReplyToAddress('');
        settings.parmBounceToAddress('');
        settings.parmMessagePriority(DocEmailMsgPriority::Normal);
        settings.parmSendingMode(DocEmailSendingMode::Synchronous);
        settings.parmReadReceiptAddress('');
        settings.parmDeliveryReceiptCondition(DocEmailDeliveryReceiptCondition::ServerDefaults);

        return settings;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailMessageReportSettings</Name>
				<Source><![CDATA[
    public static DocEmailMessageReportSettings getEmailMessageReportSettings(DocReportTable _docReportTable, CompanyId _companyId = curExt())
    {
        DocEmailMessageReportSettings reportSettings = DocEmailMessageReportSettings::newDefault();

        if (_docReportTable.RecId == 0)
        {
            return reportSettings;
        }

        DocReportCompanySetting perCompanySetting;

        // Reply-to address: is there per-company setting or global report setting?
        perCompanySetting = DocReportCompanySetting::findSettingName(_docReportTable.RecId, _companyId, DocConstant::EmailReplyToAddressSettingName);
        if (perCompanySetting)
        {
            reportSettings.parmReplyToAddress(perCompanySetting.SettingValue);
        }
        else if (_docReportTable.EmailReplyToAddress != '')
        {
            reportSettings.parmReplyToAddress(_docReportTable.EmailReplyToAddress);
        }

        // Bounce-to address: is there per-company setting or global report setting?
        perCompanySetting = DocReportCompanySetting::findSettingName(_docReportTable.RecId, _companyId, DocConstant::EmailBounceToAddressSettingName);
        if (perCompanySetting)
        {
            reportSettings.parmBounceToAddress(perCompanySetting.SettingValue);
        }
        else if (_docReportTable.EmailBounceToAddress != '')
        {
            reportSettings.parmBounceToAddress(_docReportTable.EmailBounceToAddress);
        }

        // Message priority: is there per-company setting? Otherwise use global report setting.
        perCompanySetting = DocReportCompanySetting::findSettingName(_docReportTable.RecId, _companyId, DocConstant::EmailMsgPrioritySettingName);
        if (perCompanySetting)
        {
            reportSettings.parmMessagePriority(symbol2Enum(enumNum(DocEmailMsgPriority), perCompanySetting.SettingValue));
        }
        else
        {
            reportSettings.parmMessagePriority(_docReportTable.EmailMsgPriority);
        }

        // Sending mode: is there per-company setting? Otherwise use global report setting.
        perCompanySetting = DocReportCompanySetting::findSettingName(_docReportTable.RecId, _companyId, DocConstant::EmailSendingModeSettingName);
        if (perCompanySetting)
        {
            reportSettings.parmSendingMode(symbol2Enum(enumNum(DocEmailSendingMode), perCompanySetting.SettingValue));
        }
        else
        {
            reportSettings.parmSendingMode(_docReportTable.EmailEmailingMode);
        }

        // Read receipt address: is there per-company setting or global report setting?
        perCompanySetting = DocReportCompanySetting::findSettingName(_docReportTable.RecId, _companyId, DocConstant::EmailReadReceiptAddressSettingName);
        if (perCompanySetting)
        {
            reportSettings.parmReadReceiptAddress(perCompanySetting.SettingValue);
        }
        else
        {
            reportSettings.parmReadReceiptAddress(_docReportTable.EmailReadReceiptAddress);
        }

        // Delivery receipt condition: is there per-company setting? Otherwise use global report setting.
        perCompanySetting = DocReportCompanySetting::findSettingName(_docReportTable.RecId, _companyId, DocConstant::EmailDeliveryReceiptConditionSettingName);
        if (perCompanySetting)
        {
            reportSettings.parmDeliveryReceiptCondition(symbol2Enum(enumNum(DocEmailDeliveryReceiptCondition), perCompanySetting.SettingValue));
        }
        else
        {
            reportSettings.parmDeliveryReceiptCondition(_docReportTable.EmailDeliveryReceiptCondition);
        }

        return reportSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSettingsPriorityToExt</Name>
				<Source><![CDATA[
    public static DocEmailMsgPriorityExt reportSettingsPriorityToExt(DocEmailMsgPriority _mailPriority)
    {
        switch (_mailPriority)
        {
            case DocEmailMsgPriority::High:
                return DocEmailMsgPriorityExt::High;
            
            case DocEmailMsgPriority::Low:
                return DocEmailMsgPriorityExt::Low;
            
            case DocEmailMsgPriority::Normal:
            default:
                return DocEmailMsgPriorityExt::Normal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>msgPriorityFromExt</Name>
				<Source><![CDATA[
    public static eMailPriority msgPriorityFromExt(DocEmailMsgPriorityExt _mailPriorityExt) 
    {
        switch (_mailPriorityExt)
        {
            case DocEmailMsgPriorityExt::High:
                return eMailPriority::High;

            case DocEmailMsgPriorityExt::Low:
                return eMailPriority::Low;

            case DocEmailMsgPriorityExt::UseDefaultOrFromSetup:
            case DocEmailMsgPriorityExt::Normal:
            default:
                return eMailPriority::Normal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendingModeToExt</Name>
				<Source><![CDATA[
    public static DocEmailSendingModeExt sendingModeToExt(DocEmailSendingMode _sendingMode)
    {
        switch (_sendingMode)
        {            
            case DocEmailSendingMode::EmailProcessing:
                return DocEmailSendingModeExt::EmailProcessing;
            
            case DocEmailSendingMode::Synchronous:
            default:
                return DocEmailSendingModeExt::Synchronous;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendingModeFromExt</Name>
				<Source><![CDATA[
    public static DocEmailSendingMode sendingModeFromExt(DocEmailSendingModeExt _sendingModeExt)
    {
        switch (_sendingModeExt)
        {
            case DocEmailSendingModeExt::EmailProcessing:
                return DocEmailSendingMode::EmailProcessing;

            case DocEmailSendingModeExt::UseDefaultOrFromSetup:
            case DocEmailSendingModeExt::Synchronous:
            default:
                return DocEmailSendingMode::Synchronous;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplyToAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets Reply-To address.
    /// </summary>
    /// <param name = "_replyToAddress">Email Reply-To address</param>
    /// <returns>Email Reply-To address</returns>
    public DocEmailReplyToAddress parmReplyToAddress(DocEmailReplyToAddress _replyToAddress = replyToAddress)
    {
        replyToAddress = _replyToAddress;
        return replyToAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBounceToAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets Bounce-To address.
    /// </summary>
    /// <param name = "_bounceToAddress">Email Bounce-To address</param>
    /// <returns>Email Bounce-To address</returns>
    public DocEmailBounceToAddress parmBounceToAddress(DocEmailBounceToAddress _bounceToAddress = bounceToAddress)
    {
        bounceToAddress = _bounceToAddress;
        return bounceToAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessagePriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets email message priority.
    /// </summary>
    /// <param name = "_messagePriority">Email message priority</param>
    /// <returns>Email message priority</returns>
    public DocEmailMsgPriority parmMessagePriority(DocEmailMsgPriority _messagePriority = messagePriority)
    {
        messagePriority = _messagePriority;
        return messagePriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSendingMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets sending mode (Synchronous or Email processing).
    /// </summary>
    /// <param name = "_sendingMode">Sending mode</param>
    /// <returns>Sending mode</returns>
    public DocEmailSendingMode parmSendingMode(DocEmailSendingMode _sendingMode = sendingMode)
    {
        sendingMode = _sendingMode;
        return sendingMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadReceiptAddress</Name>
				<Source><![CDATA[
    public DocEmailReadReceiptAddress parmReadReceiptAddress(DocEmailReadReceiptAddress _readReceiptAddress = readReceiptAddress)
    {
        readReceiptAddress = _readReceiptAddress;
        return readReceiptAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryReceiptCondition</Name>
				<Source><![CDATA[
    public DocEmailDeliveryReceiptCondition parmDeliveryReceiptCondition(DocEmailDeliveryReceiptCondition _deliveryReceiptCondition = deliveryReceiptCondition)
    {
        deliveryReceiptCondition = _deliveryReceiptCondition;
        return deliveryReceiptCondition;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>