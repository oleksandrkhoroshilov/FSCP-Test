<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPlaceholderAttHtmlEditorHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPlaceholderAttHtmlEditorHelper
{
    Set placeholderSet;  // {placeholderName}
    Map placeholderMap;  // (placeholderName, placeholderAttributeObject)
            
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectAttributes</Name>
				<Source><![CDATA[
    public void collectAttributes(str _reportId, PrintMgmtDocumentType _reportType = PrintMgmtDocumentType::BankCheque, boolean _reportTypeProvided = false)
    {
        DocReportTable    report;
        str               dspClassName;    
        
        // If Report ID nor Report Type is not provided,
        // collect the attributes for the Default DSP class and return.
        if (!_reportId && !_reportTypeProvided)
        {
            dspClassName = classStr(DocDataSourceProviderReportingBase);
            this.collectAttributesForClass(dspClassName);
            return;
        }
    
        // Report ID is provided.
        if (_reportId)
        {
            report = DocReportTable::findReportId(_reportId);
            if (report && report.IsActiveSRS)
            {
                // Report is found in Docentric report setup -> use the configured DSP class.
                dspClassName = report.DataSourceProviderClassName;
            }
            else
            {
                // Report is not found in Docentric report setup -> use the Default DSP class.
                dspClassName = classStr(DocDataSourceProviderReportingBase);
            }

            // Collect the attributes.
            this.collectAttributesForClass(dspClassName);

            return;
        }

        // Report ID is not provided, but report type is provided.
        container reportRecIDs = DocReportTypeHelper::getReportsForType(_reportType);
        for (int i = 1; i <= conLen(reportRecIDs); i++)
        {
            RecId reportRecId = conPeek(reportRecIDs, i);
            
            report = DocReportTable::find(reportRecId);
            if (report && report.IsActiveSRS)
            {
                // Report is found in Docentric report setup -> use the configured DSP class.
                dspClassName = report.DataSourceProviderClassName;
            }
            else
            {
                // Report is not found in Docentric report setup -> use the Default DSP class.
                dspClassName = classStr(DocDataSourceProviderReportingBase);
            }

            // Collect the attributes.
            this.collectAttributesForClass(dspClassName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectAttributesForClass</Name>
				<Source><![CDATA[
    public void collectAttributesForClass(str _dspClassName)
    {
        if (!_dspClassName)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _dspClassName not provided');
        }
       
        ClassId dspClassId = className2Id(_dspClassName);
        if (!dspClassId)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('DSP class (%1) not found', _dspClassName));
        }

        this.collectAttributesForClassId(dspClassId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectAttributesForClassId</Name>
				<Source><![CDATA[
    private void collectAttributesForClassId(ClassId _classId)
    {
        void addArray(Array _attArray)
        {
            int attCount = _attArray.lastIndex();
            for (int i = 1; i <= attCount; i++)
            {
                Object attAsObject = _attArray.value(i);
                if (attAsObject is DocPlaceholderAttribute)
                {
                    DocPlaceholderAttribute attPlaceholder = attAsObject as DocPlaceholderAttribute;
                    str attCode = attPlaceholder.code();

                    // skip new placeholders with same name
                    if (placeholderSet.add(attCode))
                    {
                        attPlaceholder.isStandardPlaceholder(classNum(DocDataSourceProviderReportingBase) == _classId);
                        attPlaceholder.sourceDspClass(classId2Name(_classId));
                        placeholderMap.insert(attCode, attPlaceholder);
                    }
                }
            }
        }
        ;

        DictClass  dictClass  = new DictClass(_classId);
        DictMethod dictMethod = new DictMethod(UtilElementType::ClassInstanceMethod, _classId, methodStr(DocDataSourceProviderReportingBase, overrideReportRunSettings));

        if (!dictMethod)
        {
            return;
        }

        addArray(dictMethod.getAttributes(classStr(DocPlaceholderAttribute)));
        addArray(dictMethod.getAttributes(classStr(DocPlaceholderImageAttribute)));
        addArray(dictMethod.getAttributes(classStr(DocPlaceholderImageBase64Attribute)));

        // Add attributes from all extensions classes of the given class
        int numOfExtensions = dictClass.getNumberOfExtensions();
        for (int i=0; i<numOfExtensions; i++)
        {
            str extensionClassName = dictClass.getExtensionClassName(i);        // DictClass is .NET class and uses zero based index
            this.collectAttributesForClassId(className2Id(extensionClassName));
        }

        // Add attributes from parent class (if exists)
        ClassId parentClassId = dictClass.extend();
        if (parentClassId)
        {
            this.collectAttributesForClassId(parentClassId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectUserDefinedPlaceholders</Name>
				<Source><![CDATA[
    public void collectUserDefinedPlaceholders(str _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided)
    {
        void collectForReport(DocReportTableRecId _reportRecId)
        {
            DocReportTable reportTable;
            DocReportUserDefinedPlaceholder userDefinedPlaceholder;

            // Collect all User-defined placeholders for the provided report if it is registered and active in Docentric report setup.
            while select userDefinedPlaceholder 
                  exists join reportTable
                  where reportTable.RecId == _reportRecId && reportTable.IsActiveSRS &&
                        userDefinedPlaceholder.Report == _reportRecId && userDefinedPlaceholder.Enabled
            {
                DocPlaceholderAttribute attPlaceholder = new DocPlaceholderAttribute(userDefinedPlaceholder.PlaceholderName, userDefinedPlaceholder.PlaceholderDesc);
                str attCode = attPlaceholder.code();

                // skip new placeholders with same name
                if (placeholderSet.add(attCode))
                {
                    attPlaceholder.isStandardPlaceholder(false);
                    attPlaceholder.sourceDspClass('');
                    placeholderMap.insert(attCode, attPlaceholder);
                }
            }
        }
    
        if (_reportId)
        {
            // Report ID is provided.
            collectForReport(DocReportTable::findReportId(_reportId).RecId);
        }
        else if (_reportTypeProvided)
        {
            // Report ID is not provided, but report type is provided.
            container reportRecIDs = DocReportTypeHelper::getReportsForType(_reportType);
            for (int i = 1; i <= conLen(reportRecIDs); i++)
            {
                RecId reportRecId = conPeek(reportRecIDs, i);

                collectForReport(reportRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholderMap</Name>
				<Source><![CDATA[
    public Map getPlaceholderMap()
    {
        return placeholderMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholdersAsString</Name>
				<Source><![CDATA[
    public str getPlaceholdersAsString()
    {
        SetEnumerator   setEnum = placeholderSet.getEnumerator();
        str             placeholderStrRes = '';
        
        /* [
             { "name": "PlaceholderName1", "description": "Placeholder1 Description" },
             { "name": "PlaceholderName2", "description": "Placeholder2 Description" },
             { "name": "PlaceholderName3", "description": "Placeholder3 Description", "html": "<img src=\"cid:@CompanyLogo@\" style=\"height:50px; width:190px\" \/>" }
             { "name": "PlaceholderName4", "description": "Placeholder4 Description", "html": "strFmt(@'<img src=\"data:image/%1;base64,@%2@\" %3%4\/>', imageBase64Attr.imageFileFormat(), imageBase64Attr.code(), style, widthHeightAttributes)"}
           ] */
    
        while (setEnum.moveNext())
        {
            str     placeholderCode = setEnum.current();
            str     html = '';
            DocPlaceholderAttribute placeholderAttr = placeholderMap.lookup(placeholderCode);
                
            if (placeholderAttr is DocPlaceholderImageBase64Attribute)
            {
                DocPlaceholderImageBase64Attribute imageBase64Attr = placeholderAttr as DocPlaceholderImageBase64Attribute;
                str style = '';
                // We need to add width and height attributes because of Outlook!
                str widthHeightAttributes = '';

                if (imageBase64Attr.defaultHeightInPx())
                {
                    style = strFmt('height:%1px', imageBase64Attr.defaultHeightInPx());
                    widthHeightAttributes = strFmt(@' height=\"%1\"', imageBase64Attr.defaultHeightInPx());
                }

                if (imageBase64Attr.defaultWidthInPx())
                {
                    style += strFmt((style ? '; %1' : ''), strFmt('width:%1px', imageBase64Attr.defaultWidthInPx()));
                    widthHeightAttributes += strFmt(@' width=\"%1\"', imageBase64Attr.defaultWidthInPx());
                }

                if (style)
                {
                    style = strFmt(@' style=\"%1\"', style);    // escaped JSON special characters
                }

                html = strFmt(@'<img src=\"data:image/%1;base64,@%2@\" %3%4\/>', imageBase64Attr.imageFileFormat(), imageBase64Attr.code(), style, widthHeightAttributes);
            }

            else if (placeholderAttr is DocPlaceholderImageAttribute)
            {
                DocPlaceholderImageAttribute imageAttr = placeholderAttr as DocPlaceholderImageAttribute;
                str style = '';
                // We need to add width and height attributes because of Outlook!
                str widthHeightAttributes = '';
                
                if (imageAttr.defaultHeightInPx())
                {
                    style = strFmt('height:%1px', imageAttr.defaultHeightInPx());
                    widthHeightAttributes = strFmt(@' height=\"%1\"', imageAttr.defaultHeightInPx());
                }

                if (imageAttr.defaultWidthInPx())
                {
                    style += strFmt((style ? '; %1' : ''), strFmt('width:%1px', imageAttr.defaultWidthInPx()));
                    widthHeightAttributes += strFmt(@' width=\"%1\"', imageAttr.defaultWidthInPx());
                }

                if (style)
                {
                    style = strFmt(@' style=\"%1\"', style);    // escaped JSON special characters
                }

                html = strFmt(@'<img src=\"cid:@%1@\"%2%3\/>', imageAttr.code(), style, widthHeightAttributes);    // escaped JSON special characters
            }

            str placeholderStr = '{ "name": "' + placeholderAttr.code() + '", ' +
                                   '"description": "' + placeholderAttr.friendlyName() + '"' +
                                   (html ? strFmt(', "html": "%1"', html) : '') +
                                   ' }';
        
            if (placeholderStrRes == '')
            {
                placeholderStrRes = '[' + placeholderStr;
            }
            else
            {
                placeholderStrRes = placeholderStrRes + ', ' + placeholderStr;
            }
        }
    
        if (placeholderStrRes != '')
        {
            placeholderStrRes = placeholderStrRes + ']';
        }
    
        return placeholderStrRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholderSet</Name>
				<Source><![CDATA[
    public Set getPlaceholderSet()
    {
        return placeholderSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        placeholderSet = new Set(Types::String);  // {placeholderName}
        placeholderMap = new Map(Types::String, Types::Class);  // (placeholderName, placeholderAttributeObject)
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholderListStr</Name>
				<Source><![CDATA[
    public static str getPlaceholderListStr(str _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided)
    {
        // Collect user-defined placeholders before standard and custom ones. If several placeholders have the same name only the first one will be added. 
        DocPlaceholderAttHtmlEditorHelper attHelper = new DocPlaceholderAttHtmlEditorHelper();
        attHelper.collectUserDefinedPlaceholders(_reportId, _reportType, _reportTypeProvided);
        attHelper.collectAttributes(_reportId, _reportType, _reportTypeProvided);
    
        str placeholderList = attHelper.getPlaceholdersAsString();

        return placeholderList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>