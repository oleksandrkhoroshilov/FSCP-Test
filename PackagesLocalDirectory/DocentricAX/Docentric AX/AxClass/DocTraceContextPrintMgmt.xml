<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTraceContextPrintMgmt</Name>
	<SourceCode>
		<Declaration><![CDATA[
using UL = Docentric.AX.Framework.Utilities;

/// <summary>
/// This class is used for tracing of Print management settings used when running a report.
/// </summary>
public class DocTraceContextPrintMgmt implements IDocTraceContext
{
    private PrintMgmtReportRun printMgmtReportRun;
    private Common queryTableBuffer;
    private Common referencedTableBuffer;
    private str languageId;
    private str documentKeyValue;
    private str printMgmtSettings;
    private DocTraceContextInfo traceContextInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTraceContextInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new trace context info.
    /// </summary>
    /// <returns>An instance of the DocTraceContextInfo class</returns>
    private DocTraceContextInfo createTraceContextInfo()
    {
        traceContextInfo = new DocTraceContextInfo();
        
        // Get the ReportRunId
        guid reportRunId = UL.ReflectionHelper::GetField(printMgmtReportRun.parmReportRunController(), 'reportRunId', false);

        // Create an instance of the PrintMgmtPrintContext class needed for the method getSetting.
        // This code has been copied from the load method in the PrintMgmtReportRun class.
        PrintMgmtPrintContext printMgmtPrintContext = new PrintMgmtPrintContext();
        // We need to create a new instance of the SRSPrintDestinationSettings class because it is changed in the getSettings method 
        // and we do not want this change to affect the current instance in the current instance of the PrintMgmtReportRun class.
        printMgmtPrintContext.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(printMgmtReportRun.parmDefaultOriginalPrintJobSettings().pack()));
        printMgmtPrintContext.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(printMgmtReportRun.parmDefaultCopyPrintJobSettings().pack()));
        printMgmtPrintContext.parmLanguageId(languageId);
        printMgmtPrintContext.parmQueryTableBuffer(queryTableBuffer);
        printMgmtPrintContext.parmForcePrintJobSettings(printMgmtReportRun.parmForcePrintJobSettings());
        printMgmtPrintContext.setHierarchyContext(printMgmtReportRun.parmHierarchyType(), printMgmtReportRun.parmNodeType(), printMgmtReportRun.parmDocType(), referencedTableBuffer);

        PrintMgmtPrintSetting printMgmtPrintSetting = new PrintMgmtPrintSetting();
        printMgmtPrintSetting = DocTraceContextPrintMgmt::getSettings(printMgmtPrintContext, this);

        // ReportRunId
        traceContextInfo.addEnd(['ReportRunId', guid2StrWithoutBraces(reportRunId)]);
        // ForcePrintJobSettings
        traceContextInfo.addEnd(['ForcePrintJobSettings', printMgmtPrintContext.parmForcePrintJobSettings() ? 'true' : 'false']);
        // PrintMgmtSettings
        traceContextInfo.addEnd(['PrintMgmtSettings', printMgmtSettings]);

        return traceContextInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTraceMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a trace message.
    /// </summary>
    /// <param name = "_message">A trace message</param>
    /// <returns>A trace message</returns>
    private DocMessage createTraceMessage(DocMessage _message)
    {
        // The placeholder %1 will be replaced below with the correct report name
        _message += (_message ? ' | ' : '') + '%1';

        // Get the trace context info needed for getting print managemet settings
        traceContextInfo = this.getTraceContextInfo();

        // Get the print management settings string
        System.String parValue = this.parmPrintMgmtSettings();

        // Split the print management settings string as it may contain more than one print management setting 
        System.String[] parValueDelimiters = new System.String[1]();
        parValueDelimiters.SetValue('| PrintMgmtSettings=', 0);

        System.String[] parValueArray = parValue.Split(parValueDelimiters, System.StringSplitOptions::RemoveEmptyEntries);

        System.Collections.IEnumerator parValueArrayEnumerator = parValueArray.GetEnumerator();

        // Traverse through all print management settings
        str defaultMessage = _message;
        while (parValueArrayEnumerator.MoveNext())
        {
            System.String parValuePrintMgmtSettings = parValueArrayEnumerator.Current;

            // Split the current print management setting string to get all the print management setting parameters
            System.String[] parValuePrintMgmtSettingsDelimiters = new System.String[1]();
            parValuePrintMgmtSettingsDelimiters.SetValue('; ', 0);

            System.String[] parValuePrintMgmtSettingsArray = parValuePrintMgmtSettings.Split(parValuePrintMgmtSettingsDelimiters, System.StringSplitOptions::RemoveEmptyEntries);

            System.Collections.IEnumerator parValuePrintMgmtSettingsArrayEnumerator = parValuePrintMgmtSettingsArray.GetEnumerator();

            // Traverse through all print management setting parameters
            while (parValuePrintMgmtSettingsArrayEnumerator.MoveNext())
            {
                System.String parValuePrintMgmtSetting = parValuePrintMgmtSettingsArrayEnumerator.Current;
                System.String[] parValuePrintMgmtSettingArray = parValuePrintMgmtSetting.Split('=', 2, System.StringSplitOptions::RemoveEmptyEntries);

                // Check if the parameter is 'PrintMgmtSettingRecId'
                if (parValuePrintMgmtSettingArray.GetValue(0) == 'PrintMgmtSettingRecId' && parValuePrintMgmtSettingArray.Length == 2)
                {
                    RecId printMgmtSettingRecId = parValuePrintMgmtSettingArray.GetValue(1);
                    
                    PrintMgmtSettings printMgmtSettingsTable;
                    PrintMgmtDocInstance printMgmtDocInstanceTable;

                    // Get the PrintMgmtSettings and PrintMgmtDocInstance record for the specified print managemet setting record Id
                    select firstonly printMgmtSettingsTable
                        where printMgmtSettingsTable.RecId == printMgmtSettingRecId
                        join printMgmtDocInstanceTable
                            where printMgmtDocInstanceTable.RecId == printMgmtSettingsTable.ParentId;

                    // Get the print type (Original or Copy)
                    str printType = strFmt('%1', printMgmtDocInstanceTable.PrintType);
                    if (printMgmtDocInstanceTable.Name)
                    {
                        printType += strFmt(' (%1)', printMgmtDocInstanceTable.Name);
                    }

                    // Get the level (Module, Account or Document)
                    str level = '';
                    AccountNum accountNum;
                    switch (printMgmtDocInstanceTable.NodeType)
                    {
                        // Account level
                        case PrintMgmtNodeType::CustTable:
                            if (printMgmtDocInstanceTable.ReferencedTableId == tableNum(CustTable))
                            {
                                accountNum = CustTable::findRecId(printMgmtDocInstanceTable.ReferencedRecId).AccountNum;
                            }
                        case PrintMgmtNodeType::VendTable:
                            if (printMgmtDocInstanceTable.ReferencedTableId == tableNum(VendTable))
                            {
                                accountNum = VendTable::findRecId(printMgmtDocInstanceTable.ReferencedRecId).AccountNum;
                            }
                            level = strFmt('%1 (%2: %3)', "@DocentricAX4:DocTraceCotextPrintMgmtLevelAccountOverride", printMgmtDocInstanceTable.NodeType, accountNum);
                            break;
                        // Module level
                        case PrintMgmtNodeType::Sales:
                        case PrintMgmtNodeType::Purch:
                        case PrintMgmtNodeType::Project:
                        case PrintMgmtNodeType::Invent:
                        case PrintMgmtNodeType::Ledger:
                        case PrintMgmtNodeType::Bank:
                        case PrintMgmtNodeType::WHS:
                        case PrintMgmtNodeType::TMS:
                            level = strFmt('%1 (%2)', "@DocentricAX4:DocTraceCotextPrintMgmtLevelModule", printMgmtDocInstanceTable.NodeType);
                            break;
                        // Document level
                        default:
                            level = strFmt('%1 (%2)', "@DocentricAX4:DocTraceCotextPrintMgmtLevelDocumentOverride", printMgmtDocInstanceTable.NodeType);
                            break;
                    }

                    // Get the condition
                    str condition = printMgmtSettingsTable.Description ? strFmt('%1 (%2)', "@DocentricAX4:DocTraceCotextPrintMgmtSettingConditional", printMgmtSettingsTable.Description) : "@DocentricAX4:DocTraceCotextPrintMgmtSettingDefault";

                    // Create the outupt message
                    str additionalMessage = (defaultMessage ? ' | ' : '') + strFmt('%1 | %2 | %3', printType, level, condition);
                    _message += (_message == defaultMessage ? '' : ' *** ' + defaultMessage) + additionalMessage;
                }
                // Check if the parameter is 'ReportFormatName'
                else if (parValuePrintMgmtSettingArray.GetValue(0) == 'ReportFormatName' && parValuePrintMgmtSettingArray.Length == 2)
                {
                    // Replace the placeholder %1 with the correct report name
                    _message = strFmt(_message, parValuePrintMgmtSettingArray.GetValue(1));
                }
            }
        }

        // Replace the placeholder %1 with the correct report name if it was not done before
        SrsReportRunController reportRunController = printMgmtReportRun.parmReportRunController();
        if (reportRunController && reportRunController.parmReportContract())
        {
            _message = strFmt(_message, reportRunController.parmReportContract().parmReportName());
        }
        else
        {
            _message = strFmt(_message, "@DocentricAX:Unknown");
        }

        return _message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocTraceContextPrintMgmt class.
    /// </summary>
    /// <param name = "_printMgmtReportRun">An instance of the PrintMgmtReportRun class</param>
    /// <param name = "_queryTableBuffer">The table used to evaluate conditions for conditional print settings</param>
    /// <param name = "_referencedTableBuffer">The table to which print management information has been related</param>
    /// <param name = "_languageId">The language ID that should be used to identification text</param>
    /// <param name = "_documentKeyValue">A human readable value that uniquely identifies the document to be printed</param>
    protected void new(PrintMgmtReportRun _printMgmtReportRun, Common _queryTableBuffer, Common _referencedTableBuffer, str _languageId, str _documentKeyValue)
    {
        printMgmtReportRun = _printMgmtReportRun;
        queryTableBuffer = _queryTableBuffer;
        referencedTableBuffer = _referencedTableBuffer;
        languageId = _languageId;
        documentKeyValue = _documentKeyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocTraceContextPrintMgmt class.
    /// </summary>
    /// <param name = "_printMgmtReportRun">An instance of the PrintMgmtReportRun class</param>
    /// <param name = "_queryTableBuffer">The table used to evaluate conditions for conditional print settings</param>
    /// <param name = "_referencedTableBuffer">The table to which print management information has been related</param>
    /// <param name = "_languageId">The language ID that should be used to identification text</param>
    /// <param name = "_documentKeyValue">A human readable value that uniquely identifies the document to be printed</param>
    /// <returns>An instance of the DocTraceContextPrintMgmt class</returns>
    public static DocTraceContextPrintMgmt construct(PrintMgmtReportRun _printMgmtReportRun, Common _queryTableBuffer, Common _referencedTableBuffer, str _languageId, str _documentKeyValue)
    {
        return new DocTraceContextPrintMgmt(_printMgmtReportRun, _queryTableBuffer, _referencedTableBuffer, _languageId, _documentKeyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTraceContextInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current instance of the DocTraceContextInfo class.
    /// </summary>
    /// <returns>An instance of the DocTraceContextInfo class</returns>
    public DocTraceContextInfo getTraceContextInfo()
    {
        return (traceContextInfo != null ? traceContextInfo : this.createTraceContextInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTraceMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the trace message.
    /// </summary>
    /// <param name = "_message">A trace message</param>
    /// <returns>A trace message</returns>
    public DocMessage getTraceMessage(DocMessage _message = '')
    {
        return this.createTraceMessage(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMgmtSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the print management settings string.
    /// </summary>
    /// <param name = "_printMgmtSettings">A print management settings string</param>
    /// <returns>A print management settings string</returns>
    private str parmPrintMgmtSettings(str _printMgmtSettings = printMgmtSettings)
    {
        printMgmtSettings = _printMgmtSettings;
        return printMgmtSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the print management settings.
    /// </summary>
    /// <param name = "_traceContextPrintMgmt">An instance of the DocTraceContextPrintMgmt class</param>
    /// <param name = "_settingDetail">An instance of the PrintMgmtPrintSettingDetail class</param>
    /// <param name = "_setupSettings">An instance of the PrintMgmtSetupSettings class</param>
    private static void getPrintMgmtSettings(DocTraceContextPrintMgmt _traceContextPrintMgmt, PrintMgmtPrintSettingDetail _settingDetail, PrintMgmtSetupSettings _setupSettings)
    {
        str printMgmtSettings;

        // Get the <DocTraceContextPrintMgmt> record for the current print management setting.
        // The default print managenet setting is overriden if the fields ReferencedTableId and ReferencedRecId are not empty.
        PrintMgmtDocInstance printMgmtDocInstance = DocTraceContextPrintMgmt::findPrintMgmtDocInstance(_setupSettings.parmParent().parmRecId());
        TableId referencedTableId = printMgmtDocInstance.ReferencedTableId;
        RecId referencedRecId = printMgmtDocInstance.ReferencedRecId;
        
        DocReportTemplateId templateId = DocConstant::BuiltInSsrsDesignPlaceholder;
        if (_setupSettings.parmDestination() && DocSrsReportRunUtil::isDocentricPrintDestination(_setupSettings.parmDestination().printMediumType()))
        {
            if (_setupSettings.parmDestination().printMediumType() == SRSPrintMediumType::GenerateDataSource_DC)
            {
                templateId = '';
            }
            else
            {
                templateId = _settingDetail.parmPrintJobSettings().parmSrsPrintReportSettings_DC().parmTemplateId();
                if (!templateId)
                {
                    templateId = DocConstant::DefaultTemplatePlaceholder;
                }
            }
        }

        if (_setupSettings is PrintMgmtSetupSettingsDefault)
        {
            // Default print management settings
            PrintMgmtSetupSettingsDefault setupSettings = _setupSettings;
            printMgmtSettings += strFmt('%1=%2; ', 'Name', _settingDetail.parmInstanceName() ? _settingDetail.parmInstanceName() : "@SYS108913");
            printMgmtSettings += strFmt('%1=%2; ', 'InstanceType', setupSettings.parmParent().parmType());
            printMgmtSettings += strFmt('%1=%2; ', 'IsLeaf', setupSettings.parmIsLeaf());
            printMgmtSettings += strFmt('%1=%2; ', 'Suppress', setupSettings.parmSuppress());
            printMgmtSettings += strFmt('%1=%2; ', 'Priority', setupSettings.parmPriority());
            printMgmtSettings += strFmt('%1=%2; ', 'UseDefault', setupSettings.parmUseDefault());
            printMgmtSettings += strFmt('%1=%2; ', 'Condition', setupSettings.parmCondition() ? setupSettings.parmCondition().dataSourceNo(1).toString() : '');
            printMgmtSettings += strFmt('%1=%2; ', 'NumOfCopies', setupSettings.parmCopies());
            printMgmtSettings += strFmt('%1=%2; ', 'FooterText', setupSettings.parmIdTextForUser());
            printMgmtSettings += strFmt('%1=%2; ', 'PrintMgmtSettingRecId', setupSettings.parmRecId());
            printMgmtSettings += strFmt('%1=%2; ', 'ReportFormatName', _settingDetail.parmReportFormatName());
            printMgmtSettings += strFmt('%1=%2; ', 'ReferencedTableName', referencedTableId ? tableId2Name(referencedTableId) : '');
            printMgmtSettings += strFmt('%1=%2; ', 'ReferencedRecId', referencedRecId);
            printMgmtSettings += strFmt('%1=%2; ', 'PrintDestination', DocTraceContextPrintMgmt::getDestinationDesc(_settingDetail.parmPrintJobSettings()));
            printMgmtSettings += strFmt('%1=%2; ', 'TemplateId', templateId);
        }
        else if (_setupSettings is PrintMgmtSetupSettingsConditional)
        {
            // Conditional print management settings
            PrintMgmtSetupSettingsConditional setupSettings = _setupSettings;
            printMgmtSettings += strFmt('%1=%2; ', 'Name', setupSettings.parmName());
            printMgmtSettings += strFmt('%1=%2; ', 'InstanceType', setupSettings.parmParent().parmType());
            printMgmtSettings += strFmt('%1=%2; ', 'IsLeaf', setupSettings.parmIsLeaf());
            printMgmtSettings += strFmt('%1=%2; ', 'Suppress', setupSettings.parmSuppress());
            printMgmtSettings += strFmt('%1=%2; ', 'Priority', setupSettings.parmPriority());
            printMgmtSettings += strFmt('%1=%2; ', 'Condition', setupSettings.parmCondition() ? setupSettings.parmCondition().dataSourceNo(1).toString() : '');
            printMgmtSettings += strFmt('%1=%2; ', 'NumOfCopies', setupSettings.parmCopies());
            printMgmtSettings += strFmt('%1=%2; ', 'FooterText', setupSettings.parmIdTextForUser());
            printMgmtSettings += strFmt('%1=%2; ', 'PrintMgmtSettingRecId', setupSettings.parmRecId());
            printMgmtSettings += strFmt('%1=%2; ', 'ReportFormatName', _settingDetail.parmReportFormatName());
            printMgmtSettings += strFmt('%1=%2; ', 'ReferencedTableName', referencedTableId ? tableId2Name(referencedTableId) : '');
            printMgmtSettings += strFmt('%1=%2; ', 'ReferencedRecId', referencedRecId);
            printMgmtSettings += strFmt('%1=%2; ', 'PrintDestination', DocTraceContextPrintMgmt::getDestinationDesc(_settingDetail.parmPrintJobSettings()));
            printMgmtSettings += strFmt('%1=%2; ', 'TemplateId', templateId);
        }

        if (_traceContextPrintMgmt.parmPrintMgmtSettings())
        {
            printMgmtSettings = '| PrintMgmtSettings=' + printMgmtSettings;
        }
        _traceContextPrintMgmt.parmPrintMgmtSettings(_traceContextPrintMgmt.parmPrintMgmtSettings() + printMgmtSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintMgmtDocInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the PrintMgmtDocInstance table.
    /// </summary>
    /// <param name = "_recId">The recId of the record to find.</param>
    /// <returns>A record in the >PrintMgmtDocInstance table; otherwise, an empty record.</returns>
    private static PrintMgmtDocInstance findPrintMgmtDocInstance(RecId _recId)
    {
        PrintMgmtDocInstance printMgmtDocInstance;

        select firstonly printMgmtDocInstance
            where printMgmtDocInstance.RecId == _recId;

        return printMgmtDocInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a descriptive label for the current print destination.
    /// </summary>
    /// <param name = "_destination">A print destination</param>
    /// <returns>A string that contains the destination description.</returns>
    private static str getDestinationDesc(SRSPrintDestinationSettings _destination)
    {
        #PrintMgmtSetup

        str descr = #DefaultDestinationName;

        if(_destination)
        {
            switch(_destination.printMediumType())
            {
                case SRSPrintMediumType::File:
                    descr = strFmt("@SYS109721", _destination.fileName());
                    break;
                case SRSPrintMediumType::Email:
                    descr = strFmt("@SYS109722", _destination.emailTo());
                    break;
                case SRSPrintMediumType::Archive:
                    descr = strFmt("@SYS109723", _destination.printerName());
                    break;
                case SRSPrintMediumType::Printer:
                    descr = strFmt("@SYS109724", _destination.printerName());
                    break;
                case SRSPrintMediumType::Custom:
                    descr = "@SYS20533";
                    break;
                default:
                    descr = enum2str(_destination.printMediumType());
            }
            str docDescr = DocSrsReportRunUtil::getDocentricPrintDestDescription(_destination);
            descr = docDescr == '' ? descr : docDescr;
        }
        return descr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettings</Name>
				<Source><![CDATA[
    /*********************************************************************************************/
    /* NOTE: The method getSettings is a copy of the same method in the PrintMgmt class, because */
    /*       there is no delegate defined to hook on. The method has been changed in the parts   */
    /*       marked with the <Docentric> tag.                                                    */
    /*********************************************************************************************/

    /// <summary>
    /// Retrieves print management settings for the specified context that will be used when a document is
    /// printed.
    /// </summary>
    /// <param name="_printContext">The information to retrieve.</param>
    /// <param name="_traceContextPrintMgmt">An instance of the DocTraceContextPrintMgmt class.</param>
    /// <returns>
    /// An instance of the <c>PrintMgmtPrintSetting</c> class that contains all the print settings for the
    /// specified context.
    /// </returns>
    /// <remarks>
    /// This method should be called when the system is retrieving print settings that should be used when
    /// a document is ready to be printed. For more information about how to set contextual information,
    /// see the <c>PrintMgmtPrintContext</c> class. Exceptions from the <c>PrintMgmtPrintContext</c> class
    /// can be caused if the context passed is incorrect.
    /// </remarks>
    /// <exception cref="M:exception::error">
    /// The <paramref name="_printContext" /> parameter is null.
    /// </exception>
    public static PrintMgmtPrintSetting getSettings(PrintMgmtPrintContext _printContext, DocTraceContextPrintMgmt _traceContextPrintMgmt)
    {
        #PrintMgmtSetup

        PrintMgmt printMgmt = new PrintMgmt();
        PrintMgmtNodeInstance rootInstance;
        PrintMgmtNodeInstance leafInstance;
        PrintMgmtPrintSetting printSetting = new PrintMgmtPrintSetting();
        PrintMgmtPrintSettingDetail settingDetail;
        MapEnumerator setupDocEnumerator;
        PrintMgmtSetupDoc setupDoc;
        PrintMgmtSetupDocInstance instance;
        PrintMgmtSetupSettingsDefault defaultSetting;
        PrintMgmtSetupSettingsConditional conditionalSetting;
        int i;
        int x;
        List hierarchyContextList = new List(Types::Class);

        Common     queryTableBufferTmp;
        DictTable  dictTable;
        boolean    isTmpRecord = false;

        // <GEERU>
        PrintMgmtReportFormat   printMgmtReportFormat;
        #isoCountryRegionCodes
        // </GEERU>

        PrintMgmtPrintSettingDetail makeSettingDetail(PrintMgmtSetupSettings _setupSettings)
        {
            PrintMgmtPrintSettingDetail newSettingDetail = new PrintMgmtPrintSettingDetail();
            PrintMgmtPrintDestinationTokens destinationTokens = SrsPrintDestinationTokens::constructByTokenType(#SRSPrintDestinationTokenPrintMgmt);

            PartyIProvider partyProvider = PartyProviderFactory::getPartyProvider();

            // <GEERU>
            if (partyProvider && partyProvider.isLegalEntityInCountryRegion([#isoRU]))
            {
                printMgmtReportFormat = PrintMgmtReportFormat::findWithSystem(
                    _setupSettings.parmReportFormat(),
                    instance.parmParent().parmDocumentType());

                newSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
                newSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);
            }
            else
            {
                // </GEERU>
                newSettingDetail.parmReportFormatName(PrintMgmtReportFormat::findWithSystem(_setupSettings.parmReportFormat(), instance.parmParent().parmDocumentType()).Name);
                // <GEERU>
            }
            // </GEERU>
            newSettingDetail.parmIdentificationText(_setupSettings.parmIdTextForUser());
            newSettingDetail.parmNumberOfCopies(_setupSettings.parmCopies());
            if (_setupSettings.parmDestination() == null || _printContext.parmForcePrintJobSettings())
            {
                if (instance.parmType() == PrintMgmtDocInstanceType::Copy)
                {
                    newSettingDetail.parmPrintJobSettings(_printContext.parmDefaultCopyPrintJobSettings());
                    newSettingDetail.parmInstanceName(enum2str(PrintMgmtDocInstanceType::Copy));
                }
                else
                {
                    newSettingDetail.parmPrintJobSettings(_printContext.parmDefaultOriginalPrintJobSettings());
                    newSettingDetail.parmInstanceName(enum2str(PrintMgmtDocInstanceType::Original));
                }
            }
            else
            {
                newSettingDetail.parmPrintJobSettings(_setupSettings.parmDestination());
                newSettingDetail.parmInstanceName(instance.parmName());
            }

            destinationTokens.parmPrintContext(_printContext);
            destinationTokens.replace(newSettingDetail.parmPrintJobSettings());

            return newSettingDetail;
        }

        if (_printContext == null)
        {
            throw error(Error::missingParameter(null));
        }

        // Validate input
        _printContext.validate();

        // Retrieve the settings from the database
        hierarchyContextList.addEnd(_printContext.getHierarchyContext());

        // <Docentric>
        // The method getNodeInstances is protected in the class PrintMgmt and needs to be called with reflection.
        System.Object[] paramsGetNodeInstance = new System.Object[2]();
        paramsGetNodeInstance.Set(0, hierarchyContextList);
        paramsGetNodeInstance.Set(1, _printContext.parmLanguageId());
        rootInstance = UL.ReflectionHelper::InvokeInstanceMethod(printMgmt, 'getNodeInstances', paramsGetNodeInstance);
        // </Docentric>

        // Get the leaf instance which has all of the necessary settings
        leafInstance = rootInstance.getLeaf();

        // Evaluate settings to determine if they should be used
        Debug::assert(leafInstance.getSetupDocuments().elements() == 1);
        setupDocEnumerator = leafInstance.getSetupDocuments().getEnumerator();
        while (setupDocEnumerator.moveNext())
        {
            setupDoc = setupDocEnumerator.currentValue();
            for (i = 1; i <= setupDoc.numInstances(); i++)
            {
                instance = setupDoc.getInstanceByPos(i);

                if (instance.parmSuppress() == NoYes::No)
                {
                    settingDetail = null;

                    // <GBR>
                    if (PrintMgmtDelegates::BrazilParametersIsEnabled())
                    {
                        printSetting.parmBlockOverride_BR(printSetting.parmBlockOverride_BR()
                                                            || instance.parmBlockOverride_BR());
                    }
                    // </GBR>

                    if (instance.numConditionalSettings() > 0)
                    {
                        isTmpRecord = printMgmt.checkIsProforma(_printContext.parmQueryTableBuffer()) &&
                                      !(printMgmt.existsInDataBase(_printContext.parmQueryTableBuffer()));

                        if (isTmpRecord)
                        {
                            dictTable = new DictTable(_printContext.parmQueryTableBuffer().TableId);
                            queryTableBufferTmp = dictTable.makeRecord();
                            // BP Deviation Documented
                            queryTableBufferTmp.setTmp();
                            Global::buf2Buf(_printContext.parmQueryTableBuffer(), queryTableBufferTmp);
                            queryTableBufferTmp.doInsert();
                        }

                        // Check to see if any of the conditional settings apply.  Start with
                        // the lowest priority and stop as soon as one is found.
                        for (x = 1; x <= instance.numConditionalSettings(); x++)
                        {
                            conditionalSetting = instance.getConditionalSettingByPos(x);
                            if (!conditionalSetting.parmSuppress())
                            {
                                // <Docentric>
                                // The method doesQueryHaveResults is protected in the class PrintMgmt and needs to be called with reflection.
                                System.Object[] paramsDoesQueryHaveResults = new System.Object[3]();
                                paramsDoesQueryHaveResults.Set(0, isTmpRecord ? queryTableBufferTmp : _printContext.parmQueryTableBuffer());
                                paramsDoesQueryHaveResults.Set(1, conditionalSetting.parmCondition());
                                paramsDoesQueryHaveResults.Set(2, isTmpRecord);

                                // The metood doesQueryHaveResults has more then one overload in .NET and we need to pass an array of parameter types to find the right one.
                                System.Type[] typeParamsDoesQueryHaveResults = new System.Type[3]();
                                typeParamsDoesQueryHaveResults.Set(0, paramsDoesQueryHaveResults.Get(0).GetType());
                                typeParamsDoesQueryHaveResults.Set(1, paramsDoesQueryHaveResults.Get(1).GetType());
                                typeParamsDoesQueryHaveResults.Set(2, paramsDoesQueryHaveResults.Get(2).GetType());
                                boolean doesQueryHaveResults = UL.ReflectionHelper::InvokeInstanceMethod(printMgmt, 'doesQueryHaveResults', paramsDoesQueryHaveResults, typeParamsDoesQueryHaveResults);
                                if (doesQueryHaveResults)
                                // </Docentric>
                                {
                                    settingDetail = makeSettingDetail(conditionalSetting);
                                    // <Docentric>
                                    // Log the print management settings.
                                    DocTraceContextPrintMgmt::getPrintMgmtSettings(_traceContextPrintMgmt, settingDetail, conditionalSetting);
                                    // </Docentric>
                                    break;
                                }
                            }
                        }

                        if (isTmpRecord)
                        {
                            queryTableBufferTmp = null;
                        }
                    }

                    // Add default if no conditional was valid and we are not suppressing the document
                    defaultSetting = instance.parmDefaultSetting();
                    if (!settingDetail && !defaultSetting.parmSuppress())
                    {
                        settingDetail = makeSettingDetail(defaultSetting);
                        // <Docentric>
                        // Log the print management settings.
                        DocTraceContextPrintMgmt::getPrintMgmtSettings(_traceContextPrintMgmt, settingDetail, defaultSetting);
                        // </Docentric>
                    }

                    if (settingDetail)
                    {
                        settingDetail.parmType(instance.parmType());
                        instance.parmName();
                        printSetting.addPrintDetail(settingDetail);
                    }
                }
            }
        }

        return printSetting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>