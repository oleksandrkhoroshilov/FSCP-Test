<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Docentric.AX.Framework.Utilities;
using System.Collections;

class DocReportingHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateOutputFileType_Printer</Name>
				<Source><![CDATA[
    public static void validateOutputFileType_Printer(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsPrinter _printerPrintDestSettings)
    {
        if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Printer)
        {
            return;
        }

        /* Print report using the already provided report content */
        if (_printReportSettings.isPrintedReportProvided())
        {
            // If the report is printed as PDF, check if the output file format is PDF.
            if (_printerPrintDestSettings.parmPrintAsPdf())
            {
                if (_printReportSettings.parmPrintedReport().outputFileFormat() != DocFileFormat::PDF)
                {
                    DocGlobalHelper::handleException(funcName(),
                            strFmt("@DocentricAX:PrintAlreadyPrintedReportToPrintAsPdfError", _printReportSettings.parmPrintedReport().outputFileFormat()));
                }
            }
            else // if (!_printerPrintDestSettings.parmPrintAsPdf())
            {
                if (_printReportSettings.parmPrintedReport().outputFileFormat() != DocFileFormat::EMF)
                {
                    DocGlobalHelper::handleException(funcName(),
                            strFmt("@DocentricAX:PrintAlreadyPrintedReportToPrintAsEmfError", _printReportSettings.parmPrintedReport().outputFileFormat()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutputFileType_Screen</Name>
				<Source><![CDATA[
    public static void validateOutputFileType_Screen(DocPrintReportSettings _printReportSettings)
    {
        if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Screen)
        {
            return;
        }

        /* Print report using the already provided report content */
        if (_printReportSettings.isPrintedReportProvided())
        {
            // Check if the output file format is PDF.
            if (_printReportSettings.parmPrintedReport().outputFileFormat() != DocFileFormat::PDF)
            {
                DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX:PrintAlreadyPrintedReportToScreenError", _printReportSettings.parmPrintedReport().outputFileFormat()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutputFileType_Archive</Name>
				<Source><![CDATA[
    public static void validateOutputFileType_Archive(DocPrintReportSettings _printReportSettings)
    {
        if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Archive && !_printReportSettings.parmSaveToArchive())
        {
            return;
        }

        /* Print report using the already provided report content */
        if (_printReportSettings.isPrintedReportProvided())
        {
            if (_printReportSettings.parmPrintedReport().parmIsDocentricReport())
            {
                // Check if the output file format is PDF.
                if (_printReportSettings.parmPrintedReport().parmDocentricOutputFileFormat() != DocConstant::DocentricArchiveFileFormat)
                {
                    DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX:OutputFormatArchiveDiffersError",
                                _printReportSettings.parmPrintedReport().parmDocentricOutputFileFormat(),
                                DocConstant::DocentricArchiveFileFormat));
                }
            }
            else
            {
                // Check if the output file format is PDF.
                if (DocFileMngHelper::convertSrsFileFormatToFileExtensionStr(_printReportSettings.parmPrintedReport().parmSrsOutputFileFormat()) != 
                    DocFileMngHelper::convertToFileExtensionStr(DocConstant::DocentricArchiveFileFormat))
                {
                    DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX:OutputFormatArchiveDiffersError",
                                _printReportSettings.parmPrintedReport().parmSrsOutputFileFormat(),
                                DocConstant::DocentricArchiveFileFormat));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutputFileType_File</Name>
				<Source><![CDATA[
    public static void validateOutputFileType_File(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings)
    {
        if (_printReportSettings.parmPrintDestination() != DocPrintDestination::File)
        {
            return;
        }

        // Check if the printing of SSRS original design is consistently set with all the settings.
        if (_printReportSettings.printSrsOriginalDesign() != _filePrintDestSettings.parmUseSsrsBuiltInDesign())
        {
            DocGlobalHelper::handleException(funcName(),
                    strFmt('Print destination settings are invalid: _printReportSettings.printSrsOriginalDesign()=%1 differs from _filePrintDestSettings.parmUseSsrsBuiltInDesign()=%2',
                    _printReportSettings.printSrsOriginalDesign(), _filePrintDestSettings.parmUseSsrsBuiltInDesign()));
        }

        /* Print report using the already provided report content */
        if (_printReportSettings.isPrintedReportProvided())
        {
            if (_printReportSettings.parmPrintedReport().parmIsDocentricReport())
            {
                // Check for the output file formats are same.
                if (_printReportSettings.parmPrintedReport().parmDocentricOutputFileFormat() != _filePrintDestSettings.parmOutputFileFormat())
                {
                    DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX:OutputFormatDiffersError",
                                _printReportSettings.parmPrintedReport().parmDocentricOutputFileFormat(),
                                _filePrintDestSettings.parmOutputFileFormat()));
                }
            }
            else
            {
                // Check for the output file formats are same.
                if (_printReportSettings.parmPrintedReport().parmSrsOutputFileFormat() != _filePrintDestSettings.parmOutputFileFormatSrs())
                {
                    DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX:OutputFormatDiffersError",
                                _printReportSettings.parmPrintedReport().parmSrsOutputFileFormat(),
                                _filePrintDestSettings.parmOutputFileFormatSrs()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutputFileType_Email</Name>
				<Source><![CDATA[
    public static void validateOutputFileType_Email(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsEmail _emailPrintDestSettings)
    {
        if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Email)
        {
            return;
        }

        // Check if the printing of SSRS original design is consistently set with all the settings.
        if (_printReportSettings.printSrsOriginalDesign() != _emailPrintDestSettings.parmEmailAttachmentUseSsrsBuiltInDesign())
        {
            DocGlobalHelper::handleException(funcName(),
                    strFmt('Print destination settings are invalid: _printReportSettings.printSrsOriginalDesign()=%1 differs from _emailPrintDestSettings.parmEmailAttachmentUseSsrsBuiltInDesign()=%2',
                    _printReportSettings.printSrsOriginalDesign(), _emailPrintDestSettings.parmEmailAttachmentUseSsrsBuiltInDesign()));
        }

        /* Print report using the already provided report content */
        if (_printReportSettings.isPrintedReportProvided())
        {
            if (_printReportSettings.parmPrintedReport().parmIsDocentricReport())
            {
                // Check for the output file formats are same.
                if (_printReportSettings.parmPrintedReport().parmDocentricOutputFileFormat() != _emailPrintDestSettings.parmEmailAttachmentFileFormat())
                {
                    DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX:OutputFormatDiffersError",
                                _printReportSettings.parmPrintedReport().parmDocentricOutputFileFormat(),
                                _emailPrintDestSettings.parmEmailAttachmentFileFormat()));
                }
            }
            else
            {
                // Check for the output file formats are same.
                if (_printReportSettings.parmPrintedReport().parmSrsOutputFileFormat() != _emailPrintDestSettings.parmEmailAttachmentFileFormatSrs())
                {
                    DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX:OutputFormatDiffersError",
                                _printReportSettings.parmPrintedReport().parmSrsOutputFileFormat(),
                                _emailPrintDestSettings.parmEmailAttachmentFileFormatSrs()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutputFileType_Memory</Name>
				<Source><![CDATA[
    public static void validateOutputFileType_Memory(DocPrintReportSettings _printReportSettings, DocPrintDestSettingsMemory _memoryPrintDestSettings)
    {
        if (_printReportSettings.parmPrintDestination() != DocPrintDestination::Memory)
        {
            return;
        }

        // Check if the printing of SSRS original design is consistently set with all the settings.
        if (_printReportSettings.printSrsOriginalDesign() != _memoryPrintDestSettings.parmUseSsrsBuiltInDesign())
        {
            DocGlobalHelper::handleException(funcName(),
                    strFmt('Print destination settings are invalid: _printReportSettings.printSrsOriginalDesign()=%1 differs from _memoryPrintDestSettings.parmUseSsrsBuiltInDesign()=%2',
                    _printReportSettings.printSrsOriginalDesign(), _memoryPrintDestSettings.parmUseSsrsBuiltInDesign()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultOutputFilename</Name>
				<Source><![CDATA[
    public static Filename getDefaultOutputFilename(DocReportId _reportId, boolean _useOrigSrsReportId,
                                                    DocReportCaption _reportCaption,
                                                    DocOutputFileFormat _outputFileFormat,
                                                    str _fileType = '',
                                                    str _fixedFilename = '', boolean _useGuid = false)
    {
        Filename reportFilename, reportFileType, ssrsReportName;
    
        if (_fileType)
        {
            reportFileType = _fileType;
        }
        else
        {
            reportFileType = DocFileMngHelper::convertToFileExtensionStr(_outputFileFormat);
        }
    
        ssrsReportName = '';
        if (!_useOrigSrsReportId && _reportCaption != '')
        {
            ssrsReportName = DocReportingSetupHelper::getReportName(_reportCaption);
        }
        if (ssrsReportName)
        {
            reportFilename = ssrsReportName + DocConstantFile::FileExtensionDelimiter + reportFileType;
        }
        else
        {
            reportFilename = _reportCaption + DocConstantFile::FileExtensionDelimiter + reportFileType;
        }
        if (!_reportCaption || !DocFileMngHelper::isValidOnlyFilename(reportFilename))
        {
            ssrsReportName = '';
            if (!_useOrigSrsReportId && _reportId != '')
            {
                ssrsReportName = DocReportingSetupHelper::getReportName(_reportId);
            }
            if (ssrsReportName)
            {
                reportFilename = ssrsReportName + DocConstantFile::FileExtensionDelimiter + reportFileType;
            }
            else
            {
                reportFilename = _reportId + DocConstantFile::FileExtensionDelimiter + reportFileType;
            }
            if (!_reportId || !DocFileMngHelper::isValidOnlyFilename(reportFilename))
            {
    
                reportFilename = DocGlobalHelper::escapeString(_reportId, 60) + DocConstantFile::FileExtensionDelimiter + reportFileType;
                if (!_reportId || !DocFileMngHelper::isValidOnlyFilename(reportFilename))
                {
                    if (!_useGuid)
                    {
                        if (_fixedFilename == '')
                        {
                            reportFilename = '';
                        }
                        else
                        {
                            // Get a fixed file name (only file name).
                            reportFilename = _fixedFilename + DocConstantFile::FileExtensionDelimiter + reportFileType;
                        }
                    }
                    else
                    {
                        if (_fixedFilename == '')
                        {
                            // Create report file name from guid.
                            reportFilename = DocGlobalHelper::guid2strWithoutBraces(newGuid()) + DocConstantFile::FileExtensionDelimiter + reportFileType;
                        }
                        else
                        {
                            // Create report file name from guid.
                            reportFilename = _fixedFilename + DocConstantFile::FilenameUndescore +
                                DocGlobalHelper::guid2strWithoutBraces(newGuid()) + DocConstantFile::FileExtensionDelimiter + reportFileType;
                        }
                    }
                }
            }
        }
    
        return reportFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportDsCandidates</Name>
				<Source><![CDATA[
    public static Map getSrsReportDsCandidates(SRSReportName _reportName)
    {
        Map   reportDsCandidates;
        str   reportDsCandidate;
        str   errMsg = strFmt('Error while retrieving the report (%1) metadata', _reportName);
    
        try
        {
            if (!_reportName)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _reportName is not set');
            }
            reportDsCandidates = new Map(Types::String, Types::String);
            AxReport axReport = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetReport(_reportName);
            if (axReport)
            {
                System.Collections.IList rdsList = axReport.DataSets;
                int rdsListCount = ListHelper::Count(rdsList);
                for (int i = 0; i < rdsListCount; i++)
                {
                    AxReportDataSet axReportDataSet = ListHelper::GetItem(rdsList, i);

                    str axReportDataSetQuery = axReportDataSet.Query;
                    int pointPosition = strScan(axReportDataSetQuery, '.', 1, strLen(axReportDataSetQuery));
                    reportDsCandidate = subStr(axReportDataSetQuery, pointPosition + 1, strLen(axReportDataSetQuery) - pointPosition);

                    if (!reportDsCandidates.exists(reportDsCandidate))
                    {
                        reportDsCandidates.insert(reportDsCandidate, '');
                    }
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return reportDsCandidates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SSRS report parameters.
    /// </summary>
    /// <param name = "_reportContract">SrsReportDataContract object</param>
    /// <returns>Map(str parameterName, SrsReportParameter class instance)</returns>
    public static Map getSrsReportParameters(SrsReportDataContract _reportContract)
    {
        Map allReportParameterMap = new Map(Types::String, Types::Class);  // Map(str _parameterName, SrsReportParameter class instance)

        if (_reportContract != null)
        {
            // Add RDL parameters.
            SrsReportRdlDataContract rdlContract = _reportContract.parmRdlContract();
            if (rdlContract != null)
            {
                SrsReportRunUtil::copyToReportParamMap(rdlContract.getParametersMap(), allReportParameterMap);
            }
    
            // Add RDP parameters.
            if (_reportContract.parmReportName())
            {
                SrsReportRunRdlParser rdlParser = SrsReportRunRdlParser::construct(_reportContract.parmReportName());
                if (rdlParser != null)
                {
                    // Running the parser in local mode, means this API will not call the SSRS service to retrieve dynamic values for data bound parameters.
                    // It will only acces the static RDL stored in AX.
                    // We do not resolve data bound parameters for reporting services in Cluster mode - this will result in the not resolved dependence parameter.
                    // Note: The comment is copied from SrsReportRunRdlParser, method: getReportParameters().
                    rdlParser.parmLocalMode(true);
                    rdlParser.parseRdl();
                    Object rdpContract = _reportContract.parmRdpContract();
                    if (rdpContract != null)
                    {
                        Map rdpReportParameterMap = rdlParser.getRdpReportParamsKeyedByFieldAlias();  // Map(str _parameterName, SrsReportParameter class instance)
                        SrsReportRunUtil::setParamValuesFromRdpContract(rdpContract, rdpReportParameterMap);
                        SrsReportRunUtil::copyToReportParamMap(rdpReportParameterMap, allReportParameterMap);
                    }
                }
            }
        }

        return allReportParameterMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SSRS report parameter values.
    /// </summary>
    /// <param name = "_reportContract">SrsReportDataContract object</param>
    /// <param name = "_srsParameterMap">Map(str parameterName, SrsReportParameter class instance)</param>
    /// <returns>Map(str parameterName, anytype SrsReportParameter.getValueTyped() convertible to string)</returns>
    public static Map getSrsReportParameterValues(SrsReportDataContract _reportContract, Map _srsParameterMap = null)
    {
        Map srsReportParameterMap = new Map(Types::String, Types::AnyType);  // Map(str parameterName, anytype parameterValue)

        // Collect parameters from RDP-based but not query-based SSRS reports.
        if (_reportContract && _reportContract.parmRdpName())
        {
            Map srsParameterMap = _srsParameterMap;
            if (!srsParameterMap)
            {
                srsParameterMap = DocReportingHelper::getSrsReportParameters(_reportContract);
            }
        
            DocReportTable reportTable = DocReportTable::findReportId(_reportContract.parmReportName());
            MapEnumerator srsParameterMapEnumerator = srsParameterMap.getEnumerator();
            while (srsParameterMapEnumerator.moveNext())
            {
                SrsReportParameter parameterSrs = srsParameterMapEnumerator.currentValue();
                if (parameterSrs.hidden() && !reportTable.IncludeHiddenParamsInDS)
                {
                    continue;
                }
    
                // Note: An SSRS parameter can be also of type class or other type that is not
                // supported by Docentric data automation framework.
                if (!DocReportingHelper::isSrsReportParameterConvertibleToString(parameterSrs.getValueTyped()))
                {
                    continue;
                }
    
                srsReportParameterMap.insert(parameterSrs.name(), parameterSrs.getValueTyped());  // Map(str parameterName, anytype SrsReportParameter.getValueTyped() convertible to string)
            }
        }

        return srsReportParameterMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsDynamicQueryParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SSRS dynamic query report parameter.
    /// </summary>
    /// <param name = "_reportContract">SrsReportDataContract object</param>
    /// <returns>SSRS Dynamic query report parameter</returns>
    public static Query getSrsDynamicQueryParameter(SrsReportDataContract _reportContract)
    {
        Query dynamicQuery = null;
    
        if (_reportContract != null)
        {
            Map queryContractsMap = _reportContract.parmQueryContracts();
            if (queryContractsMap != null)
            {
                MapEnumerator mapEnum = queryContractsMap.getEnumerator();
                if (mapEnum.moveNext())
                {
                    dynamicQuery = mapEnum.currentValue();
                }
            }
        }
    
        return dynamicQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintedReportFromEmailPrintSettings</Name>
				<Source><![CDATA[
    public static DocPrintedReport createPrintedReportFromEmailPrintSettings(DocPrintDestSettingsEmail _emailPrintDestSettings, container _reportContentContainer)
    {
        DocPrintedReport printedReport;
        if (_emailPrintDestSettings.parmEmailAttachmentUseSsrsBuiltInDesign())
        {
            printedReport = DocPrintedReport::createContainer(_reportContentContainer);
            printedReport.parmSrsOutputFileFormat(_emailPrintDestSettings.parmEmailAttachmentFileFormatSrs());
            printedReport.parmIsDocentricReport(false);
        }
        else
        {
            printedReport = DocPrintedReport::createContainer(_reportContentContainer);
            printedReport.parmDocentricOutputFileFormat(_emailPrintDestSettings.parmEmailAttachmentFileFormat());
            printedReport.parmIsDocentricReport(true);
        }
        return printedReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintedReportFromFilePrintSettings</Name>
				<Source><![CDATA[
    public static DocPrintedReport createPrintedReportFromFilePrintSettings(DocPrintDestSettingsFile _filePrintDestSettings, container _reportContentContainer)
    {
        DocPrintedReport printedReport;
        if (_filePrintDestSettings.parmUseSsrsBuiltInDesign())
        {
            printedReport = DocPrintedReport::createContainer(_reportContentContainer);
            printedReport.parmSrsOutputFileFormat(_filePrintDestSettings.parmOutputFileFormatSrs());
            printedReport.parmIsDocentricReport(false);
        }
        else
        {
            printedReport = DocPrintedReport::createContainer(_reportContentContainer);
            printedReport.parmDocentricOutputFileFormat(_filePrintDestSettings.parmOutputFileFormat());
            printedReport.parmIsDocentricReport(true);
        }
        return printedReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemplateAsStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Docentric template as a stream.
    /// </summary>
    /// <param name="_printReportSettings">
    /// Print report settings.
    /// </param>
    /// <returns>
    /// Template as a memory stream.
    /// </returns>
    public static server System.IO.MemoryStream getTemplateAsStream(DocPrintReportSettings _printReportSettings)
    {
        return DocReportTemplate::getTemplateContent(
            _printReportSettings.parmTemplateId(), _printReportSettings.parmCompanyId(), _printReportSettings.parmLanguageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoLogToExceptionLogIfSetup</Name>
				<Source><![CDATA[
    public server static void infoLogToExceptionLogIfSetup(DocReportId _reportId, DocReportCaption _reportCaption, int _startLine = 1)
    {
        if (DocParameters::find().UseExceptionLogForErrors)
        {
            str infoLogMsgs = DocReportingHelper::getReportErrorsFromInfolog(_reportId, _reportCaption, _startLine);
            if (infoLogMsgs)
            {
                DocGlobalHelper::writeToExceptionLog(infoLogMsgs, Exception::Error);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportErrorsFromInfolog</Name>
				<Source><![CDATA[
    public static str getReportErrorsFromInfolog(DocReportId _reportId, DocReportCaption _reportCaption, int _startLine = 1)
    {
        str infoLogMsgs = DocGlobalHelper::getInfoLogMessages(_startLine);
        if (infoLogMsgs)
        {
            if (infologLine() > 1)
            {
                infoLogMsgs = strFmt("@DocentricAX:ExecutingReportErrors", _reportCaption, _reportId) + ':\n' + infoLogMsgs;
            }
            else
            {
                infoLogMsgs = strFmt("@DocentricAX:ErrorWhileExecutingReport", _reportCaption, _reportId) + ': ' + infoLogMsgs;
            }
        }
        return infoLogMsgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocArchiveReportDocuType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a document type with ID 'SRSReport' (in AX 2012 version 'DOCReport'), which enables
    /// archiving Docentric reports, if it does not exist yet.
    /// </summary>
    public static server void createDocArchiveReportDocuType()
    {
        DocuType docuTypeSSRS;
        //#SRSFramework

        //if (!DocuType::exist(#SRSArchiveDocument))
        if (!DocuType::exist('DocPrintArchive')) // NOTE: We'll have this value from an input paramters, i.e. DocParameters.ArchiveDocuType.
        {
            ttsbegin;
            
            docuTypeSSRS.clear();
            docuTypeSSRS.TypeId = ''; // #SRSArchiveDocument;  // NOTE: We'll have this value from an input paramters, i.e. DocParameters.ArchiveDocuType.
            docuTypeSSRS.Name = DocConstant::SRSReportArchiveDocuTypeName;
            docuTypeSSRS.TypeGroup = DocuTypeGroup::File;
            docuTypeSSRS.FilePlace = DocuFilePlace::Archive;
            docuTypeSSRS.DocuStructureType = DocuStructureType::None;
            docuTypeSSRS.RemoveOption = DocuRemoveOption::DocumentAndFile;
            docuTypeSSRS.FileRemovalConfirmation = NoYes::Yes;
            docuTypeSSRS.ActionClassId = classNum(DocuActionArchive);  // The same as the FILE DocuType.
            
            // check the table method DocuType::createDefaults()

            docuTypeSSRS.doInsert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves a report to the archive.
    /// </summary>
    /// <param name = "_binData">The report content as a container.</param>
    /// <param name = "_fileName">The report filename.</param>
    /// <param name = "_reportCaption">The report caption.</param>
    /// <param name = "_executionNumberOfPages">Number of pages of the report.</param>
    /// <param name = "_isDocentricReport">Is this Docentric report.</param>
    /// <param name = "_swallowWarning">Should the warning, if occurs, be swallowed.</param>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive.</param>
    /// <returns>
    /// RecId of the inserted the PrintJobHeader record, if saving to archive succeded.
    /// Otherwise returns 0.
    /// </returns>
    public static RecId saveToArchive(container _binData, str _fileName, str _reportCaption, 
                                      int _executionNumberOfPages = 0, boolean _isDocentricReport = true,
                                      boolean _swallowWarning = true, 
                                      DocReportPrintArchiveInfo _printArchiveInfo = null)
    {
        str archiveFileName, archiveFriendlyName;
        DocPrintJobHeader docPrintJobHeader;

        void validateParameters()
        {
            if (_binData == conNull() || _binData == [null])
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _binData is not set');
            }

            if (!_fileName)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _fileName is not set');
            }

            if (DocFileMngHelper::getFileExtension(_fileName) != DocFileMngHelper::convertToFileExtensionStr(DocConstant::DocentricArchiveFileFormat))
            {
                DocGlobalHelper::handleException(funcName(), strFmt('Archiving file (%1) is not in the valid archive file format (%2)', _fileName, DocConstant::DocentricArchiveFileFormat));
            }
        }
        

        // Validate parameters.
        validateParameters();
        
        SRSPrintArchiveContract archiveContract = DocSRSPrintArchiveContract::construct(_printArchiveInfo);
        utcdatetime currentDateTime = DateTimeUtil::getSystemDateTime();
        archiveContract.parmExecutionDate(DateTimeUtil::date(currentDateTime));
        archiveContract.parmExecutionTime(DateTimeUtil::time(currentDateTime));
        archiveFileName = DocFileMngHelper::replaceInvalidCharsForFileName(_filename);
        archiveContract.parmFileName(archiveFileName);

        archiveFriendlyName = _reportCaption;
        if (!archiveFriendlyName)
        {
            archiveFriendlyName = DocFileMngHelper::getFileNameWithoutExtension(_fileName);
        }
        archiveContract.parmJobDescription(archiveFriendlyName);

        // NOTE: SSRS uses this property only when report is printed to a printer, otherwise it is set to 0.
        archiveContract.parmExecutionNumberOfPages(_executionNumberOfPages);
        
        // Publish event BeforeSaveToPrintArchive.
        // An event handler can be employed to enable alternate archiving (e.g. saving to DMS) and skipping saving to the built-in Print archive.
        boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToPrintArchive(_binData, archiveContract, _printArchiveInfo);
        if (cancelExecution)
        {
            return -1;
        }

        // Save the file to Print archive.
        RecId printJobHeaderRecId = 0;
        try
        {
            //-- Save to built-in Print archive
            // Save the printed report (PDF) to Attachments of PrintJobHeader, by using DocumentType set up in Docentric setup.
            // This method throws an error if saving to built-in Print Archive failed, and cleans up the saved records in PrintJobHeader and DocuRef if needed.
            printJobHeaderRecId = archiveContract.savePrintArchiveDetails(_binData);
            
            // Get and format the report parameters if configured so. Doesn't throw an exception if it fails but returns the empty string.
            str reportParameters = DocPrintArchiveHelper::getReportParametersAndRanges(_printArchiveInfo);

            // So far, saving to PrintJobHeader succeeded (otherwise an error would be thrown).
            // Now save additional data to DocPrintJobHeader.

            //-- Save to Docentric Print archive
            ttsbegin;
            
            // Insert record in the DocPrintJobHeader table.
            docPrintJobHeader.clear();
            docPrintJobHeader.PrintJobHeaderRecId = printJobHeaderRecId;
            docPrintJobHeader.IsDocentricReport = _isDocentricReport;
            docPrintJobHeader.ReportParameters = reportParameters;

            // Populate the rest of the fields.
            docPrintJobHeader.populateFromPrintArchiveInfo(_printArchiveInfo);

            docPrintJobHeader.doInsert();
            ttscommit;
            
            // Save the printed report content to Attachments of the just inserted DocPrintJobHeader record's if its output format differs from PDF.
            // Also save the email additional attachments (if such exist and if configured so), or the whole outgoing email message (if configured so).
            DocReportingHelper::saveToArchive_ReportAttachments(_printArchiveInfo, docPrintJobHeader, archiveFriendlyName, archiveFileName);
        }
        catch
        {
            // Saving to DocPrintJobHeader or saving to DocPrintJobHeader's Attachments failed, perform the clean-up:
            // (1) Delete the related record in PrintJobHeader. This method will be also delete the DocPrintJobHeader record, if inserted.
            DocPrintJobHeader::deleteRelatedPrintHeaderJob(printJobHeaderRecId);

            // (2) Annul the saved PrintJobHeaderRecId.
            printJobHeaderRecId = 0;
            docPrintJobHeader.clear();
        }
        
        if (printJobHeaderRecId == 0 && !_swallowWarning)
        {
            DocGlobalHelper::handleWarning("@DocentricAX:ArchiveReportFailed");
        }

        // Publish event AfterSaveToPrintArchive. An event handler can be employed to enable additional archiving (e.g. saving to DMS)
        DocOutputManagerPublisher::publishEvent_afterSaveToPrintArchive(docPrintJobHeader, _binData, archiveContract, _printArchiveInfo);

        return printJobHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToArchive_ReportAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the printed report and additional attachments to the Print archive.
    /// </summary>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive.</param>
    /// <param name = "_docPrintJobHeader">The DocPrintJobHeader record</param>
    /// <param name = "_printJobDescription">A description of archived file</param>
    /// <param name = "_archiveFileName">Archived filename</param>
    /// <returns>A reference to the created document attachment if created, otherwise returns null.</returns>
    public static DocuRef saveToArchive_ReportAttachments(
        DocReportPrintArchiveInfo _printArchiveInfo,
        DocPrintJobHeader _docPrintJobHeader,
        str _printJobDescription,
        str _archiveFileName)
    {
        DocuRef printedReportDocuRef; 

        if (_printArchiveInfo == null || _docPrintJobHeader == null)
        {
            return printedReportDocuRef;
        }

        DocPrintReportSettings printReportSettings = _printArchiveInfo.parmPrintReportSettings();

        // Additionally save the printed report to Print archive if its original format is not PDF nor EMF (printed to a network printer),
        // and if the report is configured to enable this option.
        boolean isReportPrintedInFormatDifferentThanPdfAndEmf = printReportSettings.isPrintedReportProvided() && 
            printReportSettings.parmPrintedReport().outputFileFormat() != DocFileFormat::EMF &&  // It's not EMF (printed to a network printer)
            printReportSettings.parmPrintedReport().outputFileFormat() != DocFileFormat::PDF;     // It's not PDF
        if (isReportPrintedInFormatDifferentThanPdfAndEmf && DocReportTable::shouldArchiveReportInOriginalFormat(printReportSettings.parmReportId()))
        {
            // An event handler can be employed to skip archiving of the report file in the original output format, or handle it differently.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToPAReportInOriginalFormat(_printArchiveInfo, _docPrintJobHeader, _printJobDescription, _archiveFileName);
            if (cancelExecution)
            {
                return null;
            }

            // Create a valid archive name by replacing PDF with the right file extension.
            // NOTE: Up to the version 3.3.4 we archived the report in the original file format like this:
            //str origFormatArchiveName = DocConstant::ArchivedInOriginalFormatReportName + '.' + printReportSettings.parmPrintedReport().getOutputFileFormat();
            // From the version 3.3.5 we archive the report using its orignal filename:
            str origFormatArchiveName = DocFileMngHelper::replaceFileExtension(_archiveFileName, printReportSettings.parmPrintedReport().getOutputFileFormat());

            // Save to Attachments of the current DocPrintJobHeader record the printed report using the provided document type.
            printedReportDocuRef = DocReportingHelper::saveToAttachments(
                                                            _docPrintJobHeader.TableId,
                                                            _docPrintJobHeader.RecId,
                                                            _docPrintJobHeader.DataAreaId,
                                                            _printArchiveInfo.getPrintArchiveDocuTypeId(),
                                                            printReportSettings.parmPrintedReport().getReportContentMemoryStream(),
                                                            origFormatArchiveName,
                                                            '',
                                                            '',
                                                            _printJobDescription,
                                                            curUserId(),
                                                            printReportSettings);

            if (printedReportDocuRef == null)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX2:SaveToPrintArchivePrintedReportError", _printArchiveInfo.getPrintArchiveDocuTypeId()));
            }
        }

        // Save additional email attachments to Attachments of the corresponding DocPrintJobHeader using the same document type,
        // and if the report is configured to enable this option.
        if (_printArchiveInfo.getPrintDestination() == DocPrintDestinationArchive::Email &&
            _printArchiveInfo.getEmailPrintDestSettings().parmEmailAdditionalAttachments() != conNull() &&
            DocReportTable::shouldArchiveReportEmailAttachments(printReportSettings.parmReportId()))
        {
            // An event handler can be employed to skip archiving of email additional attachments, or handle them differently.
            boolean cancelExecution = DocOutputManagerPublisher::publishEvent_beforeSaveToPAAdditionalEmailAttachments(_printArchiveInfo, _docPrintJobHeader, _printJobDescription, _archiveFileName);
            if (cancelExecution)
            {
                return null;
            }

            container additionalAttachments = _printArchiveInfo.getEmailPrintDestSettings().parmEmailAdditionalAttachments();
            container additionalAttachment, additionalAttachmentFileContent;
            str additionalAttachmentName, additionalAttachmentPrintJobDesc;

            // [ [attachmentName, [content]], [attachmentName, [content]], ...]
            for (int counter = 1; counter <= conLen(additionalAttachments); counter++)
            {
                try
                {
                    additionalAttachment = conPeek(additionalAttachments, counter);
                    additionalAttachmentName = conPeek(additionalAttachment, 1);
                    additionalAttachmentFileContent = conPeek(additionalAttachment, 2);
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), "@DocentricAX:ParameterAdditionalAttachmentNotProvided");
                }
    
                if (conLen(additionalAttachment) != 2)
                {
                    DocGlobalHelper::handleException(funcName(), "@DocentricAX:ParameterAdditionalAttachmentNotProvided");
                }
    
                if (additionalAttachmentName == '' || additionalAttachmentFileContent == conNull())
                {
                    continue;
                }
    
                str additionalAttachmentWitoutExt = DocFileMngHelper::getFileNameWithoutExtension(additionalAttachmentName);
                str origFormatArchiveNameWithoutExt = DocFileMngHelper::getFileNameWithoutExtension(_archiveFileName);

                additionalAttachmentPrintJobDesc = additionalAttachmentWitoutExt;

                DocuRef additionalAttachmentDocuRef = DocReportingHelper::saveToAttachments(
                                                            _docPrintJobHeader.TableId,
                                                            _docPrintJobHeader.RecId,
                                                            _docPrintJobHeader.DataAreaId,
                                                            _printArchiveInfo.getPrintArchiveDocuTypeId(),
                                                            DocGlobalHelper::convertContainerToMemoryStream(additionalAttachmentFileContent),
                                                            additionalAttachmentName,
                                                            '',
                                                            // If the name of the additional attachment is the same as the name 
                                                            // of the printed report, the name of additional attachment is changed
                                                            additionalAttachmentWitoutExt == origFormatArchiveNameWithoutExt ? strFmt('%1 (%2)', additionalAttachmentWitoutExt, counter) : '',
                                                            additionalAttachmentPrintJobDesc,
                                                            curUserId(),
                                                            printReportSettings);
                if (additionalAttachmentDocuRef == null)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX2:SaveToPrintArchiveEmailAttachmentError", additionalAttachmentName, _printArchiveInfo.getPrintArchiveDocuTypeId()));
                }
            }
        }

        return printedReportDocuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPrintArchiveDocuTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the default Document type used for saving reports to Print archive
    /// </summary>
    /// <returns>The default Print archive Document type ID</returns>
    public static DocuTypeId getDefaultPrintArchiveDocuTypeId()
    {
        return DocuType::typeFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches a file to a record as a new document attachment.
    /// </summary>
    /// <param name="_docuRefTableId">The table ID of the record to attach the document to</param>
    /// <param name="_docuRefRecId">The RecId of the record to attach the document to</param>
    /// <param name="_docuRefDataAreaId">The data area ID of the record to attach the document to</param>
    /// <param name="_docuTypeId">The DocuType to use when attaching the document</param>
    /// <param name="_fileMemoryStream">A stream containing the file to attach</param>
    /// <param name="_fileName">The filename of the file to attach</param>
    /// <param name="_fileContentType">The MIME type of the file</param>
    /// <param name="_attachmentName">The name of the attachment to create</param>
    /// <param name="_notes">Optional. Notes that are provided for the new document attachment record.</param>
    /// <param name="_userId">User who is attaching the document</param>
    /// <param name="_printReportSettings">Print report settings</param>
    /// <param name="_documentRestriction">The restriction type of the attaching document</param>
    /// <returns>A reference to the created document attachment if created, otherwise returns null.</returns>
    public static DocuRef saveToAttachments(TableId _docuRefTableId, RefRecId _docuRefRecId, DataAreaId _docuRefDataAreaId,
                                            DocuTypeId _docuTypeId, System.IO.Stream _fileMemoryStream, str _fileName,
                                            str _fileContentType = '', str _attachmentName = '', str _notes = '',
                                            str _userId = curUserId(), DocPrintReportSettings _printReportSettings = null,
                                            DocDocumentRestriction _documentRestriction = DocDocumentRestriction::Internal)
    {
        DocuType        docuType;
        DocuRef         docuRef;
        boolean         isAttached;
        DocuRestriction docuRestriction;

        boolean validateAndDefaultParameters()
        {
            if (!_docuRefTableId || !_docuRefRecId || !_docuRefDataAreaId)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _docuRefTableId/_docuRefRecId/_docuRefDataAreaId are not set');
            }

            if (_fileMemoryStream == null || !_fileName)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _fileMemoryStream/_fileName are not set');
            }

            if (!_docuTypeId)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _docuTypeId is not set');
            }

            docuType = DocuType::find(_docuTypeId);
            if (!docuType)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DocuTypeDoesNotExistErrorMsg", _docuTypeId));
                return false;
            }
            
            if (!docuType.ActionClassId || !SysDictClass::isEqualOrSuperclass(docuType.ActionClassId, classNum(DocuActionFile)))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DocuTypeInvalidActionClassErrorMsg", _docuTypeId, docuType.getActionClassDescription_DC()));
                return false;
            }
        
            if (!_attachmentName)
            {
                _attachmentName = DocFileMngHelper::getFileNameWithoutExtension(_fileName);
            }

            if (!_attachmentName)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _attachmentName/_fileName are not set');
            }

            if (!_fileContentType)
            {
                _fileContentType = DocFileMngHelper::getMimeType(_fileName);
            }

            if (!_fileContentType)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameters _fileContentType/_fileName are not set');
            }

            switch (_documentRestriction)
            {
                case DocDocumentRestriction::External:
                    docuRestriction = DocuRestriction::External;
                    break;

                case DocDocumentRestriction::Internal:
                    docuRestriction = DocuRestriction::Internal;
                    break;

                default:
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:AttachmentRestrictionValueNotSupported", _documentRestriction));
                    return false;
            }

            return true;
        }


        if (!validateAndDefaultParameters())
        {
            return null;
        }


        isAttached = false;
        try
        {
            ttsbegin;

            docuRef.clear();
            docuRef.RefTableId = DocuRef::GetRootTableID(_docuRefTableId);
            docuRef.RefRecId = _docuRefRecId;
            docuRef.RefCompanyId = _docuRefDataAreaId;
            docuRef.TypeId = _docuTypeId;
            docuRef.Name = _attachmentName;
            docuRef.Notes = _notes;
            docuRef.Author = DirPersonUser::find(_userId).PersonParty;
            docuRef.Restriction = docuRestriction;
            docuRef.insert();

            // Attach the file.
            DocuActionFile act = docuRef.docuAction();

            // Provide the DocuAction class with the report metadata.
            DocDocuActionReportInfoInterface actWithMetadata = act as DocDocuActionReportInfoInterface;
            if (actWithMetadata != null)
            {
                actWithMetadata.setPrintReportSettings(_printReportSettings);
            }

            isAttached = act.attachFile(docuRef, _fileName, _fileContentType, _fileMemoryStream);

            ttscommit;

            if (isAttached)
            {
                // Update SharePoint file's metadata
                docuRef = DocReportingHelper::updateSaveToArchiveSharePointFileMetadata(docuRef, _printReportSettings);
                if (docuRef == null)
                {
                    isAttached = false;
                    throw Exception::Error;
                }
            }
        }
        catch(Exception::CLRError)
        {
            DocGlobalHelper::handleClrException('', strFmt("@DocentricAX:ErrorWhileAttachingFile", _fileName, _docuTypeId), Exception::Warning);
        }
        catch(Exception::Internal)
        {
            DocGlobalHelper::handleClrException('', strFmt("@DocentricAX:ErrorWhileAttachingFile", _fileName, _docuTypeId), Exception::Warning);
        }
        catch
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ErrorWhileAttachingFile", _fileName, _docuTypeId));
        }
       
        // Return.
        if (isAttached)
        {
            return docuRef;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSaveToArchiveSharePointFileMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates SharePoint file's metadata when file is saved to Archive.
    /// </summary>
    /// <param name = "_docuRef">A DocuRef table buffer</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <returns>A DoucRef table buffer or null if it was deleted</returns>
    /// <remarks>
    /// If update of metadata fails then the DocSharePointActionOnError setting
    /// decides what happens:
    /// - UploadFileWithoutMetadataFields - a file is uploaded without metadata
    /// - DoNotUploadFile - a DocuRef table buffer and uploaded file are deleted
    /// </remarks>
    public static DocuRef updateSaveToArchiveSharePointFileMetadata(DocuRef _docuRef, DocPrintReportSettings _printReportSettings)
    {
        if (!_docuRef || _printReportSettings == null
            || !(_printReportSettings.parmSaveToArchive() || _printReportSettings.parmPrintDestination() == DocPrintDestination::Archive)
            || !_printReportSettings.isEnabledSaveToArchiveSharePointMetadata())
        {
            return _docuRef;
        }

        // Update the DocuRef's file stored on SharePoint with the metadata fields configured in Docentric report setup > SharePoint settings
        // when saving the current report to Print archive.
        DocReportSharePointMetadataSettings saveToArchiveSpMetadataSettings = _printReportSettings.parmSaveToArchiveSharePointMetadata();
        return DocReportingHelper::updateSharePointFileMetadata(_docuRef, saveToArchiveSpMetadataSettings, saveToArchiveSpMetadataSettings.parmActionOnError());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSaveToAttachmentsSharePointFileMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates SharePoint file's metadata when file is saved to Attachments if configured so.
    /// </summary>
    /// <param name = "_docuRef">A DocuRef table buffer</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <returns>A DoucRef table buffer or null if it was deleted</returns>
    /// <remarks>
    /// If update of metadata fails then the DocSharePointActionOnError setting
    /// decides what happens:
    /// - UploadFileWithoutMetadataFields - a file is uploaded without metadata
    /// - DoNotUploadFile - a DocuRef table buffer and uploaded file are deleted
    /// </remarks>
    public static DocuRef updateSaveToAttachmentsSharePointFileMetadata(DocuRef _docuRef, DocPrintDestSettingsFile _filePrintDestSettings)
    {
        if (!_docuRef || _filePrintDestSettings == null || !_filePrintDestSettings.parmSaveToAttachments() ||
            !_filePrintDestSettings.isEnabledSaveToAttachmentsSharePointMetadata())
        {
            return _docuRef;
        }

        // Update the DocuRef's file stored on SharePoint with the metadata fields configured in Docentric report setup > SharePoint settings
        // when saving the current report to Attachments.
        DocReportSharePointMetadataSettings saveToAttachmentsSpMetadataSettings = _filePrintDestSettings.parmSaveToAttachmentsSharePointMetadata();
        return DocReportingHelper::updateSharePointFileMetadata(_docuRef, saveToAttachmentsSpMetadataSettings, saveToAttachmentsSpMetadataSettings.parmActionOnError());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSharePointFileMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates SharePoint file's metadata.
    /// </summary>
    /// <param name = "_docuRef">A DocuRef table buffer</param>
    /// <param name = "_spMetadataSettings">SharePoint metada settings</param>
    /// <param name = "_spActionOnError">Action on error</param>
    /// <returns>A DoucRef table buffer or null if it was deleted</returns>
    /// <remarks>
    /// If update of metadata fails then the DocSharePointActionOnError setting 
    /// decides what happens:
    /// - UploadFileWithoutMetadataFields - a file is uploaded without metadata
    /// - DoNotUploadFile - a DocuRef table buffer and uploaded file are deleted
    /// </remarks>
    public static DocuRef updateSharePointFileMetadata(DocuRef _docuRef, DocSharePointMetadataSettings _spMetadataSettings, DocSharePointActionOnError _spActionOnError)
    {
        if (!_docuRef || _spMetadataSettings == null)
        {
            return _docuRef;
        }

        // Check if file was saved to SharePoint
        DocuValue docuValue = DocuValue::find(_docuRef.ValueRecId);
        if (!docuValue || docuValue.StorageProviderId != DocuStorageProviderType::SharePoint || !docuValue.Path)
        {
            return _docuRef;
        }

        str spFilePath = docuValue.Path;
        str spSiteUrl = _spMetadataSettings.parmSharePointSiteUrl();
        str spLibraryUrl = Docentric.AX.Storage.SharePoint.Common.DocSPUrlHelper::GetFullUrl(spSiteUrl, _spMetadataSettings.parmSharePointDocumentLibraryUrl());
        // Check if the file path contains the SharePoint document library from the setting
        if (strScan(spFilePath, spLibraryUrl, 0, strLen(spFilePath)) == 0)
        {
            return _docuRef;
        }

        str spRelativeFilePath = Docentric.AX.Storage.SharePoint.Common.DocSPUrlHelper::GetServerRelativePath(spFilePath, '');
        
        try 
        {
            DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
                spSiteUrl, _spMetadataSettings.parmSharePointDocumentLibraryUrl(), DocSharePointRole::GeneralPurposeUser);

            // Update file's metadata
            DocSharePointHelperV3::updateSharePointFileMetadata(
                                        spRelativeFilePath,
                                        _spMetadataSettings.parmSharePointMetadataFieldMap(),
                                        spSiteUrl,
                                        spCredentials,
                                        true,
                                        _spActionOnError != DocSharePointActionOnError::DoNotUploadFile);
        }
        catch
        {
            switch (_spActionOnError)
            {
                case DocSharePointActionOnError::UploadFileWithoutMetadataFields:
                    break;
                case DocSharePointActionOnError::DoNotUploadFile:
                    ttsbegin;
                    // Delete the docuRef from storage if necessary
                    if (_docuRef && _docuRef.RecId)
                    {
                        // Delete the docuRef record and the document content if configured so.
                        _docuRef.selectForUpdate();
                        _docuRef.delete();
                    }
                    ttscommit;

                    _docuRef = null;
                    break;
            }
        }

        return _docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncludedInDataSet</Name>
				<Source><![CDATA[
    public static boolean isIncludedInDataSet(Map _dsTableFieldsOrMethods, str _tableName, str _fieldOrMethodName)
    {
        // If there is no map created, this is an indicator that we cannot apply this condition.
        if (_dsTableFieldsOrMethods == null)
        {
            return true;
        }

        if (_dsTableFieldsOrMethods.exists(_tableName))
        {
            Map fieldsOrMethods = _dsTableFieldsOrMethods.lookup(_tableName);
            if (fieldsOrMethods && fieldsOrMethods.exists(_fieldOrMethodName))
            {
                return true;
            }
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataSetIncludedFieldsAndMethodsMaps</Name>
				<Source><![CDATA[
    public static boolean fillDataSetIncludedFieldsAndMethodsMaps(str _srsReportDesignName, Map _dsTableFields, Map _dsTableMethods)
    {
        void insertTableFieldOrMethod(Map _dsTableFieldsOrMethods, str _tableName, str _fieldOrMethodName)
        {
            if (_dsTableFieldsOrMethods == null)
            {
                // Don't insert into map if the map is null; this means that we don't need to fill it.
                return;
            }

            Map fieldsOrMethods;
            if (_dsTableFieldsOrMethods.exists(_tableName))
            {
                fieldsOrMethods = _dsTableFieldsOrMethods.lookup(_tableName);
            }
            else
            {
                fieldsOrMethods = new Map(Types::String, Types::String);
                _dsTableFieldsOrMethods.insert(_tableName, fieldsOrMethods);
            }

            if (!fieldsOrMethods.exists(_fieldOrMethodName))
            {
                fieldsOrMethods.insert(_fieldOrMethodName, '');
            }
        }

        
        try
        {
            int dotPos = strScan(_srsReportDesignName, '.', 1, strLen(_srsReportDesignName));
            str srsReportName = subStr(_srsReportDesignName, 1, dotPos - 1);

            AxReport axReport = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetReport(srsReportName);
        
            IEnumerable ssrsReportDataSets = axReport.DataSets;
            IEnumerator enumerator = ssrsReportDataSets.GetEnumerator();
            while (enumerator.moveNext())
            {
                AxReportDataSet srsReportDataSet = enumerator.Current;
                if (srsReportDataSet.DataSourceType != Microsoft.Dynamics.AX.Metadata.Core.MetaModel.DataSourceType::Query)
                {
                    continue;
                }
            
                IEnumerable dataSetFields = srsReportDataSet.Fields;
                IEnumerator enumeratorFields = dataSetFields.GetEnumerator();
                while (enumeratorFields.moveNext())
                {
                    AxReportDataSetField dsField = enumeratorFields.Current;
                    str fieldAlias = dsField.Alias;

                    // Check if this is a data field or a display method
                    // e.g. VendBaseDataView.1.InvoiceAccount or VendBaseDataView.1.bankAccountNum()
                    int pos1 = strScan(fieldAlias, '.', 0, strLen(fieldAlias));
                    if (pos1 <= 0)
                    {
                        return false;
                    }
                    int pos2 = strScan(fieldAlias, '.', pos1 + 1, strLen(fieldAlias));
                    if (pos2 <= 0)
                    {
                        return false;
                    }

                    str dsTableName = subStr(fieldAlias, 1, pos1 - 1);
                    str fieldOrMethodName = subStr(fieldAlias, pos2 + 1, strLen(fieldAlias) - pos2);
                    if (dsTableName == '' || fieldOrMethodName == '')
                    {
                        return false;
                    }

                    // Enum data field: e.g. WHSWorkLine.1.WorkType:LABEL(WHSWorkType) or InventValueReport.1.PrintLedgerValue:NAME(NoYes)
                    int semiColonPos = strScan(fieldOrMethodName, ':', 1, strLen(fieldOrMethodName));
                    if (semiColonPos > 0)
                    {
                        fieldOrMethodName = subStr(fieldOrMethodName, 1, semiColonPos - 1);
                        if (fieldOrMethodName == '')
                        {
                            return false;
                        }

                        insertTableFieldOrMethod(_dsTableFields, dsTableName, fieldOrMethodName);
                    }

                    // Display method: e.g. VendBaseDataView.1.bankAccountNum()
                    else if (strScan(fieldOrMethodName, '()', 1, strLen(fieldOrMethodName)))
                    {
                        fieldOrMethodName = subStr(fieldOrMethodName, 1, strLen(fieldOrMethodName) - 2);
                        if (fieldOrMethodName == '')
                        {
                            return false;
                        }

                        insertTableFieldOrMethod(_dsTableMethods, dsTableName, fieldOrMethodName);
                    }

                    // Data field: e.g. VendBaseDataView.1.InvoiceAccount
                    else
                    {
                        insertTableFieldOrMethod(_dsTableFields, dsTableName, fieldOrMethodName);
                    }
                }
            }
        }
        catch
        {
            // Swallow the exception.
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocuTypeForSavingToPrintArchive</Name>
				<Source><![CDATA[
    public static boolean validateDocuTypeForSavingToPrintArchive(DocuTypeId _saveToArchiveDocuTypeId, boolean _printValidationErrors)
    {
        if (_saveToArchiveDocuTypeId == '')
        {
            // We don't have what to validate, so return.
            return true;
        }

        boolean isValid = true;
        DocuType saveToArchiveDocuType = DocuType::find(_saveToArchiveDocuTypeId);

        // Check if the provided document type exists.
        if (saveToArchiveDocuType.RecId == 0)
        {
            isValid = false;
            if (_printValidationErrors)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:SaveToArchiveDocuTypeNotExist", _saveToArchiveDocuTypeId));
            }
        }
                    
        // Check if the action class is valid.
        else if (!SysDictClass::isEqualOrSuperclass(saveToArchiveDocuType.ActionClassId, classNum(DocuActionFile)))
        {
            isValid = false;
            if (_printValidationErrors)
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:DocuTypeArchiveInvalidActionClass",
                                                      _saveToArchiveDocuTypeId, saveToArchiveDocuType.getActionClassDescription_DC()));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBuiltInDocuTypeForSavingToPrintArchive</Name>
				<Source><![CDATA[
    public static boolean validateBuiltInDocuTypeForSavingToPrintArchive(boolean _printValidationErrors)
    {
        // Find the default 'File' document type.
        DocuTypeId fileDocuTypeId = DocReportingHelper::getDefaultPrintArchiveDocuTypeId();
        if (fileDocuTypeId == '')
        {
            if (_printValidationErrors)
            {
                DocGlobalHelper::handleWarning("@DocentricAX2:SaveToPrintArchiveNoDefaultDocuType");
            }

            // Return, since we have nothing else to validate.
            return false;
        }

        boolean isValid = DocReportingHelper::validateDocuTypeForSavingToPrintArchive(fileDocuTypeId, _printValidationErrors);
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSrsReportParameterConvertibleToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the type of the given value supports conversion to string in the SrsReportParameter class,
    /// i.e. methods value() and anyTypeToStringValue().
    /// NOTE: These two methods are depricated, but alternatives are not yet available.
    /// </summary>
    /// <param name = "_value">Parameter value (<c>Anytype</c>)</param>
    /// <returns>True is the provided value can be converted to str in the SrsReportParameter class</returns>
    public static boolean isSrsReportParameterConvertibleToString(anytype _value)
    {
        switch (typeOf(_value))
        {
            case Types::String:
            case Types::RString:
            case Types::VarString:
            case Types::Guid:
            case Types::Integer:
            case Types::Int64:
            case Types::Real:
            case Types::Date:
            case Types::UtcDateTime:
            case Types::Enum:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSrsReportPreProcessingTempDB</Name>
				<Source><![CDATA[
    public static boolean isSrsReportPreProcessingTempDB(str _dpClassName)
    {
        if (_dpClassName)
        {
            SRSReportProviderMetadata reportProviderMetadata = SRSReportProviderMetadata::constructWithName(_dpClassName);
            return reportProviderMetadata.isPreProcessingTempDB();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSrsReportPreProcessingRegular</Name>
				<Source><![CDATA[
    public static boolean isSrsReportPreProcessingRegular(str _dpClassName)
    {
        if (_dpClassName)
        {
            SRSReportProviderMetadata reportProviderMetadata = SRSReportProviderMetadata::constructWithName(_dpClassName);
            return reportProviderMetadata.isPreProcessingRegular();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSrsReportPreProcessing</Name>
				<Source><![CDATA[
    public static boolean isSrsReportPreProcessing(str _dpClassName)
    {
        if (_dpClassName)
        {
            SRSReportProviderMetadata reportProviderMetadata = SRSReportProviderMetadata::constructWithName(_dpClassName);
            return reportProviderMetadata.isPreProcessingRegular() || reportProviderMetadata.isPreProcessingTempDB();
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>