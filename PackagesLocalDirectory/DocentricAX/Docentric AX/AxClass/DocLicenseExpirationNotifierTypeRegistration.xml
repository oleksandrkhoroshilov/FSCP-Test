<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLicenseExpirationNotifierTypeRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Type registration for the license subscription expiration notifier.
/// </summary>
/// <remarks>
/// This code is executed by SysSetup framework at the end of DB Sync by SyncEngine.exe.
/// </remarks>
[Export(identifierStr(Dynamics.AX.Application.ProcessScheduleITypeRegistration))]
[ExportMetadata(classStr(ProcessScheduleITypeRegistration), classStr(DocLicenseExpirationNotifierTypeRegistration))]
public final class DocLicenseExpirationNotifierTypeRegistration implements ProcessScheduleITypeRegistration
{
    public const ProcessScheduleTypeName TypeName = classStr(DocLicenseExpirationNotifier);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getScheduleTypeRegistrationItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ProcessScheduleTypeRegistrationItem for the type to be registered.
    /// </summary>
    /// <returns>An instance of the ProcessScheduleTypeRegistrationItem class</returns>
    public ProcessScheduleTypeRegistrationItem getScheduleTypeRegistrationItem()
    {
        ProcessScheduleTypeRegistrationItem item = ProcessScheduleTypeRegistrationItem::construct();
        
        item.parmName(TypeName);
        item.parmCompanyScope(ProcessScheduleTypeCompanyScope::Global);
        item.parmLabelId(literalStr("@DocentricAX4:LicenseExpirationNotifierAutomationProcess"));
        item.parmScheduleType(ProcessScheduleProcessType::Polled);
        item.parmProcessAutomationTaskClassName(classStr(DocLicenseExpirationNotifierTask));
        //item.parmIsEnabled(DocLicenseParameters::find().LicenseType != DocReportParamLicenseType::FreeEdition);       // moved to DocStartupManager to be executed outside of DBSync session

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledByLicenseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable/disable the license subscription expiration notifier background automation process depending on the license type
    /// </summary>
    public static void setEnabledByLicenseType()
    {
        ProcessScheduleTypeRegistration::enableOrDisableType(
                                            DocLicenseExpirationNotifierTypeRegistration::TypeName,
                                            DocLicenseParameters::find().LicenseType != DocReportParamLicenseType::FreeEdition);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>