<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSrsReportRunUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Utility class providing various disjoint helper methods.
/// </summary>
public class DocSrsReportRunUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SrsReportRunController_renderingCompleted_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// SSRS report run controller rendering completed event handler.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the SrsReportRunController class</param>
    /// <param name = "_eventArgs">Event args</param>
    [SubscribesTo(classStr(SrsReportRunController), delegateStr(SrsReportRunController, renderingCompleted))]
    public static void SrsReportRunController_renderingCompleted_DC(SrsReportRunController _srsReportRunController, SrsRenderingCompletedEventArgs _eventArgs)
    {
        if (_eventArgs != null)
        {
            DocSrsReportRunUtil::reportExecutionCompleted(_srsReportRunController, _eventArgs.parmReportExecutionInfo());
        }
        else
        {
            DocSrsReportRunUtil::reportExecutionCompleted(_srsReportRunController, null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExecutionCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the code after the report execution is completed.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the SrsReportRunController class</param>
    /// <param name = "_reportExecutionInfo">An instance of the SRSReportExecutionInfo class</param>
    public static void reportExecutionCompleted(SrsReportRunController _srsReportRunController, SRSReportExecutionInfo _reportExecutionInfo)
    {
        // -- Print out the report name.
        DocSrsReportRunUtil::printSsrsReportDesignAotName(_srsReportRunController, _reportExecutionInfo);


        /* So far, we are not going to publish this event because of performance! */
        /*
        // -- Publish Docentric event that the report execution is completed.
        DocReportExecutionInfo docReportExecutionInfo;
        if (_reportExecutionInfo)
        {
            docReportExecutionInfo = _reportExecutionInfo.parmReportExecutionInfo_DC();
        }
        try
        {
            DocReportRunDelegates delegates = DocReportRunDelegates::instance();
            delegates.onReportExecutionCompleted(_srsReportRunController, docReportExecutionInfo);
        }

        // Don't throw any exception.
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error occurred in the reportExecutionCompleted() delegate method', false);
        }
        catch
        {
            DocGlobalHelper::handleError('Error occurred in the reportExecutionCompleted() delegate method', true, funcName(), false);
        }
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSsrsReportDesignAotName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints out SSRS Report Design AOT Name, the used template ID and the report runtime language.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the SrsReportRunController class</param>
    /// <param name = "_reportExecutionInfo">An instance of the SRSReportExecutionInfo class</param>
    public static void printSsrsReportDesignAotName(SrsReportRunController _srsReportRunController, SRSReportExecutionInfo _reportExecutionInfo)
    {
        if (!SysUserInfo::find(curUserId()).PrintSsrsReportAotName_DC)
        {
            return;
        }

        SrsReportDataContract reportContract;

        //-- Get the SSRS report design name.
        str reportDesignAotName = '';

        if (_srsReportRunController != null)
        {
            reportContract = _srsReportRunController.parmReportContract();
            if (reportContract != null)
            {
                reportDesignAotName = reportContract.parmReportName();
            }

            if (!reportDesignAotName)
            {
                reportDesignAotName = _srsReportRunController.parmReportName();
            }
        }

        if (!reportDesignAotName)
        {
            reportDesignAotName = "@DocentricAX3:ReportAotNameUnknown";
        }


        //-- Get the template ID and report runtime language.
        str templateId = '';
        str languageId = '';
        UnknownNoYes isTemplateERBased = UnknownNoYes::Unknown;

        if (reportContract != null)
        {
            try
            {
                if (DocSrsReportRunUtil::isDocentricPrintDestination(reportContract.parmPrintSettings().printMediumType()))
                {
                    // The report is printed using a Docentric print destination.
                    if (_reportExecutionInfo)
                    {
                        DocPrintReportSettings printReportSettings = _reportExecutionInfo.parmReportExecutionInfo_DC().parmPrintReportSettings();

                        // Get the template ID if the target destination is not Generate DS.
                        if (printReportSettings.parmPrintDestination() != DocPrintDestination::GenerateDataSource)
                        {
                            templateId = printReportSettings.printDocentricDefaultTemplate() ?
                                        strFmt('%1 >> %2', DocConstant::DefaultTemplatePlaceholder, printReportSettings.parmTemplateId()) : printReportSettings.parmTemplateId();

                            // If the CBD functionality is enabled, check if the template is ER based.
                            if (DocParameters::find().EnableCbdDs)
                            {
                                if (DocReportTable::findActiveReport(printReportSettings.parmReportId()).isTemplateERBased(
                                    printReportSettings.parmTemplateId(), printReportSettings.parmCompanyId(), printReportSettings.parmLanguageId()))
                                {
                                    isTemplateERBased = UnknownNoYes::Yes;
                                }
                                else
                                {
                                    isTemplateERBased = UnknownNoYes::No;
                                }
                            }

                            // Get the report runtime language.
                            languageId = printReportSettings.parmLanguageId();
                        }
                    }
                }
                else
                {
                    // The report is printed using a SSRS print destination.
                    templateId = DocConstant::BuiltInSsrsDesignPlaceholder;
                    languageId = reportContract.parmRdlContract() ? reportContract.parmRdlContract().parmLabelLanguageId() : '';
                }
            }
            catch
            {
                exceptionTextFallThrough();
            }
        }

        // Print out to infolog:
        // SSRS Report Design AOT Name: <used SSRS report design> | Template ID: <used template> | Is ER: Yes/No | Language ID: <report runtime language>
        str reportInfoMsg = strFmt("@DocentricAX3:ReportAotNameMsg", reportDesignAotName) +
                            (templateId ? strFmt(' | %1: %2', "@DocentricAX:TemplateId", templateId) : '') +
                            (isTemplateERBased != UnknownNoYes::Unknown ? strFmt(' | %1: %2', "@DocentricAX3:IsERTemplate", isTemplateERBased) : '') +
                            (languageId ? strFmt(' | %1: %2', "@DocentricAX:LanguageId", languageId) : '');

        DocGlobalHelper::handleInfo(reportInfoMsg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocentricPrintDestDescriptionExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the container with the print destination type and the Docentric print destination description.
    /// </summary>
    /// <param name = "_pds">An instance of the SRSPrintDestinationSettings class</param>
    /// <param name = "_showPrinterNameOnDestination">Flag indicating whether the printer name should be shown on print destination</param>
    /// <returns>A container with the print destination type and the Docentric print destination description</returns>
    public static container getDocentricPrintDestDescriptionExt(SRSPrintDestinationSettings _pds, boolean _showPrinterNameOnDestination = true)
    {       
        str printerName = '';
        str printerDestination = '';
        boolean saveToPrintArchive;
        DocPrintDestination selectedDocPrintDestination;

        if (_pds != null)
        {
            saveToPrintArchive = _pds.parmSrsPrintReportSettings_DC().parmSaveToArchive();
            switch (_pds.printMediumType())
            {
                case SRSPrintMediumType::Screen_DC:
                    printerName = enum2str(_pds.printMediumType());
                    printerDestination = "@DocentricAX:DocentricScreen";
                    if (saveToPrintArchive)
                    {
                        printerDestination = printerDestination + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::Screen;
                    break;

                case SRSPrintMediumType::Archive_DC:
                    printerName = enum2str(_pds.printMediumType());
                    printerDestination = "@DocentricAX:DocentricPrintArchive";
                    selectedDocPrintDestination = DocPrintDestination::Archive;
                    break;

                case SRSPrintMediumType::GenerateDataSource_DC:
                    printerName = enum2str(_pds.printMediumType());
                    printerDestination = strFmt("@DocentricAX:DdspFile", _pds.parmGenerateDSPrintDestSettings_DC().parmXmlDataSourceFilename());
                    selectedDocPrintDestination = DocPrintDestination::GenerateDataSource;
                    break;

                case SRSPrintMediumType::Email_DC:
                    printerName = enum2str(_pds.printMediumType());
                    printerDestination = strFmt("@DocentricAX:EmailWithName", _pds.parmEmailPrintDestSettings_DC().parmEmailTo());
                    if (saveToPrintArchive)
                    {
                        printerDestination = printerDestination + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::Email;
                    break;

                case SRSPrintMediumType::File_DC:
                    printerName = enum2str(_pds.printMediumType());
                    printerDestination = strFmt("@DocentricAX:FileWithName", _pds.parmFilePrintDestSettings_DC().getSymbolicResolvedOutputFilename());
                    if (saveToPrintArchive)
                    {
                        printerDestination = printerDestination + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::File;
                    break;

                case SRSPrintMediumType::Printer_DC:
                    printerName = _pds.parmPrinterPrintDestSettings_DC().parmSelectedPrinterName();
                    if (_showPrinterNameOnDestination)
                    {
                        printerDestination = strfmt("@DocentricAX:PrinterWithName", printerName);
                    }
                    if (saveToPrintArchive)
                    {
                        printerDestination = printerDestination + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::Printer;
                    break;
            }
        }

        // Adding information about the selected report template when one of the Docentric print destinations is selected.
        if (printerDestination != '')
        {
            printerDestination = DocSrsReportRunUtil::getDocentricPrintDestTemplate(_pds, selectedDocPrintDestination, printerDestination);
        }

        return [printerName, printerDestination];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocentricPrintDestTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding information about the selected report template to configured Docentric print destinations.
    /// </summary>
    /// <param name = "_pds">An instance of the SRSPrintDestinationSettings class</param>
    /// <param name = "_printDestination">Selected Docentric print destination</param>
    /// <param name = "_destinationDescription">Docentric print destination description</param>
    /// <returns>Docentric print destination description with optional additional information</returns>
    [Replaceable(true)]
    protected static str getDocentricPrintDestTemplate(SRSPrintDestinationSettings _pds, DocPrintDestination _printDestination, str _destinationDescription)
    {
        container printDestShowTemplate = DocParameters::find().PrintDestSettingsShowTemplate;
        if (printDestShowTemplate == conNull())
        {
            return _destinationDescription;
        }

        Set printDestShowTemplateSet = Set::create(printDestShowTemplate);

        // Add the selected report template Id if it is so configured for the selected print destination.
        if (printDestShowTemplateSet.in(_printDestination))
        {
            str templateId = _pds.parmSrsPrintReportSettings_DC().parmTemplateId();
            
            if (templateId == '')
            {
                _destinationDescription += strFmt(' | %1: %2', "@DocentricAX:TemplateId", DocConstant::DefaultTemplatePlaceholder);
            }
            else
            {
                _destinationDescription += strFmt(' | %1: %2', "@DocentricAX:TemplateId", templateId);

                if (templateId && DocParameters::find().EnableCbdDs)
                {
                    // Check if the template is ER-based
                    if (DocReportTable::findActiveReport(_pds.parmTmpPrintDestSettings_DC().parmReportId()).isTemplateERBased(templateId, '', ''))
                    {
                        _destinationDescription += strFmt(' (%1)', "@DocentricAX4:ERBasedTemplate");
                    }
                }
            }
        }

        return _destinationDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string that describes the Print destination by combining
    /// the print destination type and target identification. It is presented in the
    /// Print management setting form.
    /// </summary>
    /// <param name = "_pds">SRSPrintDestinationSettings object with packet print destination settings.</param>
    /// <returns>String with the Print destination description.</returns>
    public static str getPrintDestDescription(SRSPrintDestinationSettings _pds)
    {
        str printDestDesc = '';

        if (DocSrsReportRunUtil::isDocentricPrintDestination(_pds.printMediumType()))
        {
            return DocSrsReportRunUtil::getDocentricPrintDestDescription(_pds);
        }
        else
        {
            switch (_pds.printMediumType())
            {
                case SRSPrintMediumType::Screen:
                    printDestDesc = "@DocentricAX:Screen";
                    break;
                    
                case SRSPrintMediumType::Archive:
                    printDestDesc = "@DocentricAX:PrintArchive";
                    break;
                    
                case SRSPrintMediumType::Email:
                    printDestDesc = strFmt("@SYS109722", _pds.emailTo());
                    break;
                    
                case SRSPrintMediumType::File:
                    printDestDesc = strFmt("@SYS109721", _pds.fileName());
                    break;
                    
                case SRSPrintMediumType::Printer:
                    printDestDesc = strFmt("@SYS109724", _pds.printerName());
                    break;
            }

            printDestDesc = 'SSRS ' + printDestDesc;
        }

        return printDestDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocentricPrintDestDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string that describes the Docentric print destination by combining
    /// the print destination type and target identification (for example filename
    /// in case of the Docentric File print destination). It is presented in the
    /// Print management setting form.
    /// </summary>
    /// <param name = "_pds">An instance of the SRSPrintDestinationSettings class</param>
    /// <returns>String with the Docentric print destination description</returns>
    public static str getDocentricPrintDestDescription(SRSPrintDestinationSettings _pds)
    {
        str printDestDesc = '';
        boolean saveToPrintArchive;
        DocPrintDestination selectedDocPrintDestination;

        if (_pds != null)
        {
            saveToPrintArchive = _pds.parmSrsPrintReportSettings_DC().parmSaveToArchive();
            switch (_pds.printMediumType())
            {
                case SRSPrintMediumType::Screen_DC:
                    printDestDesc = "@DocentricAX:DocentricScreen";
                    if (saveToPrintArchive)
                    {
                        printDestDesc = printDestDesc + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::Screen;
                    break;

                case SRSPrintMediumType::Archive_DC:
                    printDestDesc = "@DocentricAX:DocentricPrintArchive";
                    selectedDocPrintDestination = DocPrintDestination::Archive;
                    break;

                case SRSPrintMediumType::GenerateDataSource_DC:
                    printDestDesc = strFmt("@DocentricAX:DdspFile", _pds.parmGenerateDSPrintDestSettings_DC().parmXmlDataSourceFilename());
                    selectedDocPrintDestination = DocPrintDestination::GenerateDataSource;
                    break;

                case SRSPrintMediumType::Email_DC:
                    printDestDesc = strFmt("@DocentricAX:EmailWithName", _pds.parmEmailPrintDestSettings_DC().parmEmailTo());
                    if (saveToPrintArchive)
                    {
                        printDestDesc = printDestDesc + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::Email;
                    break;

                case SRSPrintMediumType::File_DC:
                    printDestDesc = strFmt("@DocentricAX:FileWithName", _pds.parmFilePrintDestSettings_DC().getSymbolicResolvedOutputFilename());
                    if (saveToPrintArchive)
                    {
                        printDestDesc = printDestDesc + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::File;
                    break;

                case SRSPrintMediumType::Printer_DC:
                    printDestDesc = strfmt("@DocentricAX:PrinterWithName", _pds.parmPrinterPrintDestSettings_DC().parmSelectedPrinterName());
                    if (saveToPrintArchive)
                    {
                        printDestDesc = printDestDesc + ' >> ' + "@SYS25739";
                    }
                    selectedDocPrintDestination = DocPrintDestination::Printer;
                    break;
            }
        }

        // Adding information about the selected report template when one of the Docentric print destinations is selected.
        if (printDestDesc != '')
        {
            printDestDesc = DocSrsReportRunUtil::getDocentricPrintDestTemplate(_pds, selectedDocPrintDestination, printDestDesc);
        }

        return printDestDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTargetPrintDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the target print destination to Screen or Screen_DC, depending on the global parameter
    /// DocParameters.PrintDestSettingsFormMode value.
    /// </summary>
    /// <param name = "_pds">An instance of the SRSPrintDestinationSettings class</param>
    /// <returns>True if reset to SSRS Screen occurred; otherwise false</returns>
    public static boolean resetTargetPrintDestination(SRSPrintDestinationSettings _pds)
    {
        boolean resetToSrsScreen = false;

        if (_pds != null)
        {
            DocPrintDestSettingsFormMode printDestMode = DocParameters::find().PrintDestSettingsFormMode;
            if (printDestMode == DocPrintDestSettingsFormMode::UseOnlyDocentric &&
                !DocSrsReportRunUtil::isDocentricPrintDestination(_pds.printMediumType()))
            {
                _pds.printMediumType(SRSPrintMediumType::Screen_DC);
            }
            else if (printDestMode == DocPrintDestSettingsFormMode::UseOnlySsrs &&
                     DocSrsReportRunUtil::isDocentricPrintDestination(_pds.printMediumType()))
            {
                _pds.printMediumType(SRSPrintMediumType::Screen);
                resetToSrsScreen = true;
            }
        }

        return resetToSrsScreen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDocentricPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should both Docentric design and viewer be used.
    /// </summary>
    /// <param name = "_reportContract">An instance of the SrsReportDataContract class</param>
    /// <returns>True if both Docentric previewer and design should be used; otherwise false</returns>
    public static boolean useDocentricPreview(SrsReportDataContract _reportContract)
    {
        // If only SSRS print destinations should be used, return false.
        if (DocParameters::find().PrintDestSettingsFormMode == DocPrintDestSettingsFormMode::UseOnlySsrs)
        {
            return false;
        }

        DocReportTable reportTable = DocReportTable::findReportId(_reportContract.parmReportName());
        // If the report is not registered or if it is deactivated, return false.
        if (!reportTable.IsActiveSRS)
        {
            return false;
        }

        // Otherwise, check the report settings for using both Docentric viewer and Docentric default design.
        boolean useDocentricScreenPrintDest = reportTable.getSettingValue_UseDocentricPreview(_reportContract.parmRdlContract().parmCompanyId());
        return useDocentricScreenPrintDest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suppressRdpExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should RDP execution be suppressed.
    /// </summary>
    /// <param name = "_reportContract">An instance of the SrsReportDataContract class</param>
    /// <returns>True if RDP execution should be suppressed; otherwise false</returns>
    public static boolean suppressRdpExecution(SrsReportDataContract _reportContract)
    {
        DocReportTable reportTable = DocReportTable::findReportId(_reportContract.parmReportName());
        // If report is registered with Docentric report setup but it is deactivated, don't suppress RDP execution.
        if (!reportTable.IsActiveSRS)
        {
            return false;
        }

        if (reportTable.SuppressRDPExecution)
        {
            // Check if the built-in SSRS design is being printed.
            // In this case, the SuppressRDPExecution flag is not applicable.
            SRSPrintDestinationSettings pds = _reportContract.parmPrintSettings();
            if (pds == null)
            {
                return false;
            }

            if (pds.parmSrsPrintReportSettings_DC().printSrsOriginalDesign())
            {
                return false;
            }

            // Check if the print destination will be switched from Screen to Screen_DC and 
            // if Docentric default template will be used instead of the SSRS built-in design.
            if (pds.printMediumType() == SRSPrintMediumType::Screen)
            {
                if (!DocSrsReportRunUtil::useDocentricPreview(_reportContract) &&
                    DocSrsReportRunUtil::useOnlyDocentricPreviewer(_reportContract))
                {
                    // Docentric viewer and the SSRS built-in design should be used -> return false.
                    return false;
                }
            }

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useOnlyDocentricPreviewer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should only Docentric viewer be used.
    /// </summary>
    /// <param name = "_reportContract">An instance of the SrsReportDataContract class</param>
    /// <returns>True if Docentric viewer should be used; otherwise false</returns>
    public static boolean useOnlyDocentricPreviewer(SrsReportDataContract _reportContract)
    {
        // If only SSRS print destinations should be used, return false, i.e. that we will not use Docentric Viewer.
        if (DocParameters::find().PrintDestSettingsFormMode == DocPrintDestSettingsFormMode::UseOnlySsrs)
        {
            return false;
        }

        DocReportTable reportTable = DocReportTable::findReportId(_reportContract.parmReportName());
        // If the report is registered and it is active, check its preview settings.
        if (reportTable.RecId != 0 && reportTable.IsActiveSRS)
        {
            boolean useOnlyDocentricViewer = reportTable.getSettingValue_UseDocentricPreviewer(_reportContract.parmRdlContract().parmCompanyId());
            return useOnlyDocentricViewer;
        }

        // Report is not registered in Docentric report setup, so check if only Docentric print destinations should be used.
        // In this case return true, i.e. that we will use Docentric Viewer.
        if (DocParameters::find().PrintDestSettingsFormMode == DocPrintDestSettingsFormMode::UseOnlyDocentric)
        {
            return true;
        }

        // Otherwise, return false.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocentricSrsReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given SSRS report is used as a Docentric report.
    /// </summary>
    /// <param name="_reportContract">An instance of the SrsReportDataContract class</param>
    /// <returns>True if the given SSRS report is a Docentric report; otherwise false</returns>
    public static boolean isDocentricSrsReport(SrsReportDataContract _reportContract)
    {
        boolean isDocentricSrsReport;
    
        isDocentricSrsReport = DocReportTable::isDocentricSrsReport(_reportContract.parmReportName());
    
        return isDocentricSrsReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocentricPrintDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given print destination is of Docentric kind.
    /// </summary>
    /// <param name="_printMediumType">Print destination type</param>
    /// <returns>True if the given print destination is of Docentric kind; otherwise false</returns>
    public static boolean isDocentricPrintDestination(SRSPrintMediumType _printMediumType)
    {
        switch (_printMediumType)
        {
            case SRSPrintMediumType::Archive_DC:
            case SRSPrintMediumType::Email_DC:
            case SRSPrintMediumType::File_DC:
            case SRSPrintMediumType::Printer_DC:
            case SRSPrintMediumType::Screen_DC:
            case SRSPrintMediumType::GenerateDataSource_DC:
            case SRSPrintMediumType::Memory_DC:
                return true;
    
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocentricSelectedTemplateTokenForSrsPrintDestForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the selected Docentric template token for the SrsPrintDestinationSettingsForm.
    /// </summary>
    /// <param name = "_reportId">Report ID, e.g. SalesInvoice.Report</param>
    /// <param name = "_reportType">Report Type, e.g. PrintMgmtDocumentType::SalesOrderInvoice</param>
    /// <param name = "_reportTypeProvided">Is Report Type provided</param>
    /// <returns>Docentric template token for the SrsPrintDestinationSettingsForm</returns>
    public static str getDocentricSelectedTemplateTokenForSrsPrintDestForm(str _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided)
    {
        // Returns the Docentric default template token if the report is not provided and the report type is not provided as well.
        if (!_reportId && !_reportTypeProvided)
        {
            return DocConstant::DefaultTemplatePlaceholder;
        }
        
        /* Report ID is provided, Report Type can be or not provided */
        if (_reportId)
        {
            // Returns the SSRS original design token if:
            // 1) the report ID is provided but the report is not registered in the Docentric report setup.
            // 2) the report ID is provided, and the report is registered in the Docentric report setup
            //    but the IsActiveSRS flag is set to false (it is not active).
            // 3) the report ID is provided, and the report is registered in the Docentric report setup
            //    but the UseOnlyWithPrintDestinations flag is set to true.
            // 4) the report ID is provided, and the report is registered in the Docentric report setup
            //    but the report has no enabled templates.
            DocReportTable report = DocReportTable::findReportId(_reportId);
            if (report.RecId == 0)
            {
                return DocConstant::BuiltInSsrsDesignPlaceholder;
            }

            if (report.IsActiveSRS == false)
            {
                return DocConstant::BuiltInSsrsDesignPlaceholder;
            }

            if (report.UseOnlyWithPrintDestinations)
            {
                return DocConstant::BuiltInSsrsDesignPlaceholder;
            }

            boolean hasEnabledTemplates = conPeek(report.hasTemplates(), 1);
            if (!hasEnabledTemplates)
            {
                return DocConstant::BuiltInSsrsDesignPlaceholder;
            }

            // Returns the Docentric default template token if the report is provided, registered
            // in the Docentric report setup, and the UseOnlyWithPrintDestinations flag is set to false.
            return DocConstant::DefaultTemplatePlaceholder;
        }


        /* Report ID is not provided, but Report Type is provided */
        
        // Returns the SSRS original design token if:
        // 1) the report type is provided but no belonging report is registered in the Docentric report setup.
        // 2) the report type is provided, but all belonging reports are deactivated.
        // 3) the report type is provided, but all belonging reports has the UseOnlyWithPrintDestinations flag set to true.
        // 4) the report type is provided, but no belonging report has no enabled templates.
        DocReportTable report = DocReportTypeHelper::findFirstReportForType(_reportType);
        if (report.RecId == 0)
        {
            // No report is found for the provided report type.
            return DocConstant::BuiltInSsrsDesignPlaceholder;
        }

        if (DocReportTypeHelper::allReportsDeactivedForType(_reportType))
        {
            // All belonging reports are deactivated.
            return DocConstant::BuiltInSsrsDesignPlaceholder;
        }

        if (DocReportTypeHelper::allReportsUseOnlyWithPDForType(_reportType))
        {
            // All belonging reports are registered to be used only with print destinations.
            return DocConstant::BuiltInSsrsDesignPlaceholder;
        }

        if (!DocReportTypeHelper::existEnabledTemplatesForType(_reportType))
        {
            // No belonging report has enabled templates.
            return DocConstant::BuiltInSsrsDesignPlaceholder;
        }

        // Returns the Docentric default template token if nothing of the above is fulfilled.
        return DocConstant::DefaultTemplatePlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndSetDocentricReportInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Docentric report info (parmTmpPrintDestSettings_DC()) in the print destination settings
    /// and calculate the alternative report name if possible.
    /// </summary>
    /// <param name="_srsPrintDestSettings">An instance of the SRSPrintDestinationSettings class</param>
    /// <param name="_reportInfoStr">
    /// Optional parameter containing a SSRS token and PrintMgmtDocumentType or the report design name
    /// separated by a comma.
    /// </param>
    /// <returns>
    /// Returns the alternative report name that will be used later to default some of the print settings
    /// (e.g. output filename).
    /// </returns>
    public static str checkAndSetDocentricReportInfo(SRSPrintDestinationSettings _srsPrintDestSettings,
                                                     str _reportInfoStr)
    {
        SrsPrintDestinationTokenType            tokenType;
        str                                     additionalParams;
        int                                     tokenTypePos;
        PrintMgmtDocumentType                   printMgmtDocumentType;
        str                                     alternativeReportName;
        #PrintMgmtSetup


        if (_srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmIsReportNameSetInPrintMgmt())
        {
            // The Print destination settings form is opened directly from Print Management Setup.
            // In that case we know exactly which is the underlaying SSRS report design.
            // If no SSRS report design is set in Print Management setup (by any chance), 
            // then we will not calculated the Print Management type and all report templates
            // will be shown in the Select template combobox.
            // Note that when _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmIsReportNameSetInPrintMgmt() is set, 
            // both _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportId() and _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption()
            // are also set, so we are 100% sure that we know which report is the current report.
            // Because of that, we can use this property not only from Print Management Setup but also for some other problematic reports such as PSAQuotations.Report.
            return _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption();
        }

        // The Print destination settings form is not opened directly from Print Management Setup.
        // If the underlying SSRS report design is already set and we don't have any additional info, return.
        if (_srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName()
            && _reportInfoStr == '')
        {
            // Docentric report info is already set and no additional information are available.
            return _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption();
            // (when the report name is set, the report caption is also set)
        }

        if (_reportInfoStr == '')
        {
            // We don't have any info to find out which is the underlaying SSRS report design.
            return '';
        }

        // Up to this point, we have some additional info provided and we might have the info about the underlying SSRS report design.
        // Still, in that case we prefer to check if this info about the underlying SSRS report design is accurate.
        // For some Print Management reports such as PSAProjInvoice or PSAManageInvoice we might need to correct this info.
        // Note that this is relevant only for Print Management reports.

        // Parse additional info.
        tokenType = '';
        additionalParams = '';
        tokenTypePos = strScan(_reportInfoStr, ',', 1, strLen(_reportInfoStr));
        if (tokenTypePos)
        {
            tokenType = subStr(_reportInfoStr, 1, tokenTypePos - 1);
            additionalParams = subStr(_reportInfoStr, tokenTypePos + 1, strLen(_reportInfoStr) - tokenTypePos);
        }
        else
        {
            tokenType = _reportInfoStr;
            additionalParams = '';
        }

        
        alternativeReportName = additionalParams;

        /*** Print Management reports ***/
        // Check the token #SRSPrintDestinationTokenPrintMgmt.
        if (tokenType == #SRSPrintDestinationTokenPrintMgmt && additionalParams != '')
        {
            // Populate the PrintMgmtReportFormat table for the current company.
            DocPrintMgmtHelper::populatePrintMgmtReportFormat();

            boolean found;
            //printMgmtDocumentType = symbol2Enum(enumNum(PrintMgmtDocumentType), additionalParams);
            [found, printMgmtDocumentType] = DocSrsReportRunUtil::getPrintMgmtDocumentType(additionalParams);
            if (found)
            {
                // Store the found PrintMgmtDocumentType.
                _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmPrintMgmtDocumentType(printMgmtDocumentType);
                _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmPrintMgmtDocumentTypeProvided(true);

                // PrintMgmtDocumentType is known, but we cannot determine which SSRS report design to select
                // unless there is the single one in the system.
                int srsReportDesignCountForPrintMgtmType = DocPrintMgmtHelper::getSrsReportCountByDocType(printMgmtDocumentType);
                if (srsReportDesignCountForPrintMgtmType == 1)
                {
                    str srsReportAndDesignName = DocPrintMgmtHelper::getSrsReportName(printMgmtDocumentType);
                    // If SSRS report design hasn't been known yet and we found it using printMgmtDocumentType, we will set it up.
                    // If SSRS report design has been already known, we will check if they differs and if so, we will update it.
                    // (e.g. can happen when switching between PSAProjInvoice and PSAManageInvoice reports)
                    if (srsReportAndDesignName != _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName())  // srsReportAndDesignName is always != ''
                    {
                        if (_srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName() != '')
                        {
                            // This means that the report has already been known but it has changed comparing to the saved print destination settings.
                            // This is possible to happen, e.g. when switching between PSAProjInvoice and PSAManageInvoice reports.
                            // If so, reset the template ID.
                            _srsPrintDestSettings.parmSrsPrintReportSettings_DC().parmTemplateId('');
                        }

                        // Set or update the existing SrsReportName setting.
                        _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName(srsReportAndDesignName);
                        _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption(srsReportAndDesignName);
                    }
                }
                else if (srsReportDesignCountForPrintMgtmType > 1)
                {
                    // In case that we found more than one SSRS report design for the current PrintMgmtDocumentType,
                    // then we have to reset the report name and the caption also in case when this info is already set.
                    _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName('');
                    _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption('');
                }

                // NOTE: If there is no SSRS report design for the current Print Management Document Type, then leave
                // _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName() as is, because it might be set.
            }
        }

        /*** Any other reports ***/
        // Check other tokens (e.g. custom Docentric token 'DocSRSPrintDest', followed by the report and design name).
        if (tokenType == DocConstant::SRSPrintDestinationTokenReportDesignName && additionalParams != '')
        {
            // We assume that in this case a srsReportAndDesignName really represents an SSRS report.
            // NOTE: Call this method with additionalParams == ssrsReportStr(ReportName, ReportDesignName).
            _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName(additionalParams);
            _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption(additionalParams);
        }

        // Note that if we had additional info provided with a token which is not PrintManagement or Docentric token
        // we will not change the existing _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName()
        // and _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption() values.
        

        // In case that alternative report name (i.e. additionalParams) hasn't been found but we know the report,
        // then return the report caption (which is set always when the report name is set).
        if (!alternativeReportName && _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmSrsReportName())
        {
            return _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportCaption();
        }

        // Otherwise return additionalParams as the alternative report name.
        return alternativeReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportAndSelectedDocentricTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified report and selected Docentric template.
    /// </summary>
    /// <param name = "_srsPrintDestinationSettings">An instance of the SRSPrintDestinationSettings class</param>
    /// <param name = "_reportTable">The DocReportTable record</param>
    /// <param name = "_srsReportName">The SSRS report name</param>
    private static void validateReportAndSelectedDocentricTemplate(SRSPrintDestinationSettings _srsPrintDestinationSettings,
                                                                   DocReportTable _reportTable, str _srsReportName)
    {
        // This method is called only if the SSRS built-in design is NOT the selected template.

        void fallbackToPrintSrsOriginalDesign()
        {
            _srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().setProperty_PrintSrsOriginalDesign(true);

            // Do additional setting for Docentric Email, File and Memory print destination.
            switch (_srsPrintDestinationSettings.printMediumType())
            {
                case SRSPrintMediumType::Email_DC:
                    DocPrintDestSettingsEmail emailPds = _srsPrintDestinationSettings.parmEmailPrintDestSettings_DC();
                    emailPds.parmEmailAttachmentUseSsrsBuiltInDesign(true);
                    switch (emailPds.parmEmailAttachmentFileFormat())
                    {
                        case DocOutputFileFormat::PDF:
                            emailPds.parmEmailAttachmentFileFormatSrs(SRSReportFileFormat::PDF);
                            break;
                        case DocOutputFileFormat::TIFF:
                            emailPds.parmEmailAttachmentFileFormatSrs(SRSReportFileFormat::Image);
                            break;
                        case DocOutputFileFormat::DOCX:
                            emailPds.parmEmailAttachmentFileFormatSrs(7); // SRSReportFileFormat::Word
                            emailPds.parmEmailAttachmentName(
                                DocFileMngHelper::replaceFileExtension(emailPds.parmEmailAttachmentName(), DocFileMngHelper::convertSrsFileFormatToFileExtensionStr(emailPds.parmEmailAttachmentFileFormatSrs())));
                            break;
                        default:
                            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:FallbackToPrintSSRSError",
                                _srsPrintDestinationSettings.printMediumType(), emailPds.parmEmailAttachmentFileFormat()));
                    }
                    break;

                case SRSPrintMediumType::File_DC:
                    DocPrintDestSettingsFile filePds = _srsPrintDestinationSettings.parmFilePrintDestSettings_DC();
                    filePds.parmUseSsrsBuiltInDesign(true);
                    switch (filePds.parmOutputFileFormat())
                    {
                        case DocOutputFileFormat::PDF:
                            filePds.parmOutputFileFormatSrs(SRSReportFileFormat::PDF);
                            break;
                        case DocOutputFileFormat::TIFF:
                            filePds.parmOutputFileFormatSrs(SRSReportFileFormat::Image);
                            break;
                        case DocOutputFileFormat::DOCX:
                            filePds.parmOutputFileFormatSrs(7); // SRSReportFileFormat::Word
                            filePds.parmOutputFilename(
                                DocFileMngHelper::replaceFileExtension(filePds.parmOutputFilename(), DocFileMngHelper::convertSrsFileFormatToFileExtensionStr(filePds.parmOutputFileFormatSrs())));
                            break;
                        default:
                            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:FallbackToPrintSSRSError",
                                _srsPrintDestinationSettings.printMediumType(), filePds.parmOutputFileFormat()));
                    }
                    break;
                
                case SRSPrintMediumType::Memory_DC:
                    _srsPrintDestinationSettings.parmMemoryPrintDestSettings_DC().parmUseSsrsBuiltInDesign(true);
                    switch (_srsPrintDestinationSettings.parmMemoryPrintDestSettings_DC().parmOutputFileFormat())
                    {
                        case DocOutputFileFormat::PDF:
                            _srsPrintDestinationSettings.parmMemoryPrintDestSettings_DC().parmOutputFileFormatSrs(SRSReportFileFormat::PDF);
                            break;
                        case DocOutputFileFormat::TIFF:
                            _srsPrintDestinationSettings.parmMemoryPrintDestSettings_DC().parmOutputFileFormatSrs(SRSReportFileFormat::Image);
                            break;
                        case DocOutputFileFormat::DOCX:
                            _srsPrintDestinationSettings.parmMemoryPrintDestSettings_DC().parmOutputFileFormatSrs(7); // SRSReportFileFormat::Word
                            break;
                        default:
                            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:FallbackToPrintSSRSError",
                                _srsPrintDestinationSettings.printMediumType(), _srsPrintDestinationSettings.parmMemoryPrintDestSettings_DC().parmOutputFileFormat()));
                    }
                    break;
            }
        }


        // If the DOCENTRIC DEFAULT TEMPLATE is selected, and this is true if the following condition is fulfilled:
        // '' == _srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmTemplateId()
        // we will change DOCENTRIC DEFAULT TEMPLATE -> SSRS BUILT-IN DESIGN under certain conditions, please check below.

        // -- The selected print destination is Generate DS.
        if (_srsPrintDestinationSettings.printMediumType() == SRSPrintMediumType::GenerateDataSource_DC)
        {
            // Return and let the Data Automation framework to decide if this is a legitimate situation.
            return;
        }

        // -- The selected template is Docentric DEFAULT TEMPLATE --
        if (_srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmTemplateId() == '')
        {
            // 1) SSRS report design is not registered with Docentric Report Setup, or
            // 2) it is not active, or
            // 3) UseOnlyWithPrintDestinations flag is set to true, or
            // 4) it doesn't have any enabled templates.
            if (!_reportTable || !_reportTable.IsActiveSRS || _reportTable.UseOnlyWithPrintDestinations || !_reportTable.hasEnabledTemplates())
            {
                // We will assume that user is using Free Edition or he just wants to use the SSRS built-in report design,
                // but he didn't open the Print destination settings form and select @SSRS_BUILTIN_DESIGN@ as 'Template ID'.
                fallbackToPrintSrsOriginalDesign();
            }

            // Otherwise, the report is registered in Docentric Report Setup, it is active, has UseOnlyWithPrintDestinations = false,
            // and has at least one enabled template, which is then the default Docentric template.
        }

        // -- The selected template is NOT Docentric DEFAULT TEMPLATE --
        else // if (srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmTemplateId() != '')
        {
            str selectedTemplateId = _srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmTemplateId();
            if (!_reportTable)
            {
                // The SSRS report is not registered within Docentric report setup.
                // Tell the use that he needs to register template within Docentric Report Setup.
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SsrsReportNotRegistered", _srsReportName));
                DocGlobalHelper::handleError(strFmt("@DocentricAX:EnableSrsReport", _srsPrintDestinationSettings.printMediumType(), selectedTemplateId), true, '', true);
            }
            else if (!_reportTable.IsActiveSRS)
            {
                // The SSRS report is registered within Docentric report setup but the report is not active.
                DocGlobalHelper::handleError(strFmt("@DocentricAX:ReportShouldBeActivated", _srsReportName, selectedTemplateId), true, '', true);
            }

            // NOTE: We will tolerate here if _reportTable.UseOnlyWithPrintDestinations == false.
        }

        // NOTE: If the selected Docentric template is enabled will be checked in the DocPrintReportSettings.validate() method, called later in the pipeline.
        // If the selected Docentric template is valid (e.g. has attached file) will be checked in DocOutputManager, when the report is generated.
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintManagerFromSrsReportDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocPrintManager class from specified instance of the SrsReportDataContract class.
    /// </summary>
    /// <param name = "_srsReportDataContract">An instance of the SrsReportDataContract class</param>
    /// <returns>An instance of the DocPrintManager class</returns>
    public static DocPrintManager constructPrintManagerFromSrsReportDataContract(SrsReportDataContract _srsReportDataContract)
    {
        DocPrintManager               docPrintManager;
        SRSPrintDestinationSettings   srsPrintDestinationSettings;
        SRSPrintMediumType            srsPrintMediumType;
        DocPrintReportSettings        printReportSettings;
        SRSCatalogItemName            srsReportDesignName;
        DocReportTable                reportTable, reportTableActiveReport;


        // Validate parameters.
        if (_srsReportDataContract == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _srsReportDataContract is not set');
        }

        // SRS print destination settings.
        srsPrintDestinationSettings = _srsReportDataContract.parmPrintSettings();
        // Check if the SRS print destination settings object is set.
        if (srsPrintDestinationSettings == null)
        {
            srsPrintDestinationSettings = new SrsPrintDestinationSettings();
            if (BatchHeader::isExecutingInBatch())
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX:ReportCannotExecute");
            }
            srsPrintDestinationSettings.printMediumType(SRSPrintMediumType::Screen_DC);
            srsPrintDestinationSettings.parmPrintToArchive(false);
        }

        srsReportDesignName = _srsReportDataContract.parmReportName();
        if (!srsReportDesignName)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _srsReportDataContract.parmReportName() is not set');
        }

        // Find the executing report in Docentric report setup.
        reportTable = DocReportTable::findReportSRSReportName(srsReportDesignName);
        if (!srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().printSrsOriginalDesign())
        {
            // Make additional validation only if the selected template is a Docentric template.
            DocSrsReportRunUtil::validateReportAndSelectedDocentricTemplate(srsPrintDestinationSettings, reportTable, srsReportDesignName);
        }

        // If the executing report is found in Docentric report setup but it is not Active, annul the found record to use it in further logic.
        reportTableActiveReport = reportTable;
        if (!reportTableActiveReport.IsActiveSRS)
        {
            reportTableActiveReport = null;
        }

        // Construct DocPrintReportSettings instance from _srsReportDataContract.
        printReportSettings = new DocPrintReportSettings();
                        
        // ReportId.
        printReportSettings.parmReportId(srsReportDesignName); // the same as reportTable.ReportId.

        // Report Menu Item.
        printReportSettings.parmReportMenuItemName(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportMenuItemName());
        printReportSettings.parmReportMenuItemType(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportMenuItemType());
        
        // Set Original/Copy type and Print management setting name - applicable for Print Management report.
        printReportSettings.parmOriginalCopyType(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmOriginalCopyType());
        printReportSettings.parmPrintMgmtSettingName(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmPrintMgmtSettingName());

        // Set Original Document Title.
        printReportSettings.parmDocumentTitleOriginal(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmDocumentTitleOriginal());

        // ReportCaption.
        //-- Try to use Docentric report caption if set.
        if (reportTableActiveReport.ReportDefaultCaption != '')
        {
            // Use Docentric report caption.
            printReportSettings.parmReportCaption(reportTableActiveReport.ReportDefaultCaption);
        }
        //-- If Docentric report caption is not set, use the report menu item caption.
        if (!printReportSettings.parmReportCaption())
        {
            if (_srsReportDataContract.parmReportCaption() != '' &&
                _srsReportDataContract.parmReportCaption() != _srsReportDataContract.parmReportName())
            {
                // Use original SSRS report caption which is the report menu item label.
                printReportSettings.parmReportCaption(_srsReportDataContract.parmReportCaption());
            }
            else if (printReportSettings.parmReportMenuItemName() != '')
            {
                // SSRS framework has reset the original caption. Use the one we stored.
                str reportMenuItemLabel = DocLabelHelper::getLabelForMenuItem(printReportSettings.parmReportMenuItemName(), printReportSettings.parmReportMenuItemType());
                printReportSettings.parmReportCaption(reportMenuItemLabel);
            }
        }
        //-- If the report menu item label is not set, use the report ID.
        if (!printReportSettings.parmReportCaption())
        {
            // Use Report ID.
            printReportSettings.parmReportCaption(srsReportDesignName); // the same as reportTable.ReportId.
        }

        // ReportRunId.
        if (_srsReportDataContract.parmReportExecutionInfo() != null &&
            guid2str(_srsReportDataContract.parmReportExecutionInfo().parmReportRunId()) != Global::nullValueFromType(Types::Guid))
        {
            printReportSettings.setReportRunId(_srsReportDataContract.parmReportExecutionInfo().parmReportRunId());
        }
        else
        {
            printReportSettings.setReportRunId();
            if (_srsReportDataContract.parmReportExecutionInfo() != null)
            {
                _srsReportDataContract.parmReportExecutionInfo().parmReportRunId(printReportSettings.getReportRunId());
            }
        }

        // PrintDestinationRunId.
        printReportSettings.setPrintDestinationRunId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().getPrintDestinationRunId());

        // Create CurrentExecutionId.
        printReportSettings.parmCurrentExecutionId(newGuid());

        // LanguageId.
        if (_srsReportDataContract.parmRdlContract().parmLabelLanguageId())
        {
            printReportSettings.parmLanguageId(_srsReportDataContract.parmRdlContract().parmLabelLanguageId());
        }
        else // if (_srsReportDataContract.parmRdlContract().parmLanguageId())
        {
            // Note that if this language is not set, the current user language will be set and used
            // in the printReportSettings.setDefaultParmValues() method called afterwards.
            printReportSettings.parmLanguageId(_srsReportDataContract.parmRdlContract().parmLanguageId());
        }

        // CompanyId.
        printReportSettings.parmCompanyId(_srsReportDataContract.parmRdlContract().parmCompanyId());
        
        // SrsReportContract.
        printReportSettings.parmSrsReportContract(_srsReportDataContract);
        
        // Report execution context.
        printReportSettings.parmReportExecutionContextTableId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportExecutionContextTableId());
        printReportSettings.parmReportExecutionContextDataAreaId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportExecutionContextDataAreaId());
        printReportSettings.parmReportExecutionContextTableRecId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportExecutionContextTableRecId());
                
        // Save to Print archive.
        printReportSettings.parmSaveToArchive(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveToArchive());
        printReportSettings.parmSaveToArchiveNote(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveToArchiveNote());
        printReportSettings.parmSaveToArchiveDocuTypeId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveToArchiveDocuTypeId());
        if (printReportSettings.parmSaveToArchiveDocuTypeId() == '')
        {
            // Get Print archive document type from Docentric report setup, if such exists.
            reportTableActiveReport.fillPrintReportSettingsWithPrintArchiveSettings(printReportSettings);
        }
        printReportSettings.parmSaveProformaToArchive(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveProformaToArchive());
        printReportSettings.parmArchiveContract(new DocArchiveContract());

        // Suppress Success Message.
        printReportSettings.parmSuppressSuccessMsg(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSuppressSuccessMsg());

        // Execute Only Data.
        printReportSettings.parmExecuteOnlyData(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmExecuteOnlyData());

        // Template ID.
        printReportSettings.parmTemplateId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmTemplateId());

        // Set default values but do not resolve the default template.
        printReportSettings.setDefaultParmValues(false);

        // PDF encryption settings (Password, When to encrypt)
        DocPdfEncryptionSettings::fillPrintReportSettingsWithPdfEncryptionSettings(printReportSettings, reportTableActiveReport);

        // PDF signature settings
        printReportSettings.parmPdfSignatureSettings(DocPdfSignatureSettings::constructWithDefault(reportTableActiveReport.RecId, printReportSettings.parmCompanyId()));

        // PDF/A conformance level.
        printReportSettings.parmPdfAConformanceLevel(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmPdfAConformanceLevel());

        // Document properties (Title, Author, Subject, Keywords)
        reportTableActiveReport.fillPrintReportSettingsWithDocumentProperties(printReportSettings);

        // Preview before print.
        printReportSettings.parmPreviewBeforePrint(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmPreviewBeforePrint());

        // Report attachment list.
        if (srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmAttachmentRuleList() != null)
        {
            printReportSettings.parmAttachmentRuleList(
                List::create(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmAttachmentRuleList().pack()));
        }

        // Custom settings.
        printReportSettings.parmCustomSettings(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmCustomSettings());

        // Set that the report is the printed from SSRS pipeline.
        printReportSettings.parmPrintedFrom(DocReportPrintedFrom::SsrsPipeline);

        // Target Print Destination.
        srsPrintMediumType = srsPrintDestinationSettings.printMediumType();

        switch (srsPrintMediumType)
        {
            case SRSPrintMediumType::Archive_DC:
                printReportSettings.parmPrintDestination(DocPrintDestination::Archive);
                break;

            case SRSPrintMediumType::Email_DC:
                printReportSettings.parmPrintDestination(DocPrintDestination::Email);
                // Populate settings such as email message priority, email sending mode, reply-to, bounce-to, etc.
                reportTableActiveReport.fillEmailPrintDestSettings(srsPrintDestinationSettings.parmEmailPrintDestSettings_DC(), printReportSettings);
                break;

            case SRSPrintMediumType::File_DC:
                printReportSettings.parmPrintDestination(DocPrintDestination::File);
                break;

            case SRSPrintMediumType::GenerateDataSource_DC:
                printReportSettings.parmPrintDestination(DocPrintDestination::GenerateDataSource);
                break;

            case SRSPrintMediumType::Printer_DC:
                printReportSettings.parmPrintDestination(DocPrintDestination::Printer);
                break;

            case SRSPrintMediumType::Screen_DC:
                printReportSettings.parmPrintDestination(DocPrintDestination::Screen);
                // Suppress the 'Preview before print' option, if turned on.
                printReportSettings.parmPreviewBeforePrint(false);
                break;

            case SRSPrintMediumType::Memory_DC:
                printReportSettings.parmPrintDestination(DocPrintDestination::Memory);
                break;

            default:
                if (!DocSrsReportRunUtil::isDocentricPrintDestination(srsPrintMediumType))
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:SelectedPrintDestinationIsNotDocentric", srsPrintMediumType));
                }
                else
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported print medium type %1', srsPrintDestinationSettings.printMediumType()));
                }
        }
        
        // Construct the DocPrintManager class instance.
        // Note that objects with print settings (DocPrintDestSettingsEmail, DocPrintDestSettingsFile, etc.) are not recreated!
        docPrintManager = DocPrintManager::construct(printReportSettings,
            srsPrintDestinationSettings.parmGenerateDSPrintDestSettings_DC(),
            srsPrintDestinationSettings.parmPrinterPrintDestSettings_DC(),
            srsPrintDestinationSettings.parmEmailPrintDestSettings_DC(),
            srsPrintDestinationSettings.parmFilePrintDestSettings_DC(),
            srsPrintDestinationSettings.parmMemoryPrintDestSettings_DC(),
            DocReportType::SRSReport,
            srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmBatchId(),
            srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmBatchJobId());

        return docPrintManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSrsDocentricReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the SSRS Docentric report.
    /// </summary>
    /// <param name = "_srsReportRunPrinter">An instance of the SrsReportRunPrinter class</param>
    /// <param name = "_srsReportDataContract">An instance of the SrsReportDataContract class</param>
    public static void runSrsDocentricReport(SrsReportRunPrinter _srsReportRunPrinter, SrsReportDataContract _srsReportDataContract)
    {
        DocPrintManager                docPrintManager;
        DocReportExecutionInfo         docReportExecutionInfo;
        boolean                        isPrintDestinationUnknown = false;
        int                            infologLineBeforeReportStarts;
        SRSPrintDestinationSettings    origSRSPrintDestinationSettings;
        SRSPrintDestinationSettings    newSRSPrintDestinationSettings;


        DocReportExecutionInfo getAndUpdateDocentricReportExecutionInfo(boolean _isSuccess)
        {
            DocReportExecutionInfo docREI;

            if (docPrintManager != null)
            {
                // Get the Docentric's report execution info which contains all data needed for logging.
                docREI = docPrintManager.getDocReportExecutionInfo();
            }

            // Create Docentric report execution info if null (this can happen only if report execution failed).
            if (docREI == null)
            {
                docREI = new DocReportExecutionInfo();
                isPrintDestinationUnknown = DocSrsReportRunUtil::updateReportExecutionInfo(docREI, _srsReportDataContract);
            }

            // Set the stored number of the last infolog line before report execution.
            docREI.parmInfologLineBeforeReportStarts(infologLineBeforeReportStarts);
            
            // Set the IsSuccess flag and error message if the report execution failed.
            docREI.parmIsSuccess(_isSuccess);
            if (!_isSuccess)
            {
                str errorCode, errorMsg;
                [errorCode, errorMsg] = DocGlobalHelper::getInfoLogMessagesAndErrorCode(infologLineBeforeReportStarts + 1);
                docREI.parmErrorMessage(errorMsg);
                docREI.parmErrorCode(errorCode);
            }
            else
            {
                docREI.parmErrorMessage('');
                docREI.parmErrorCode('');
            }

            return docREI;
        }


        void updateSrsReportExecutionInfo(DocReportExecutionInfo _docREI, boolean _isSuccess)
        {
            // Dispose the referenced objects including the SrsReportContract and DocDataSourceObject objects.
            _docREI.disposePrintReportSettingsReferencedObjects();

            // Update SRS report execution info with Docentric report execution info.
            if (_srsReportRunPrinter != null)
            {
                SRSReportExecutionInfo srsReportExecutionInfo = _srsReportRunPrinter.parmSrsProxy().parmReportExecutionInfo();

                srsReportExecutionInfo.parmReportExecutionInfo_DC(_docREI);
                srsReportExecutionInfo.parmIsSuccessful(_isSuccess);
                if (_isSuccess)
                {
                    srsReportExecutionInfo.parmErrorMessage('');
                }
                else
                {
                    srsReportExecutionInfo.parmErrorMessage(_docREI.parmErrorMessage());
                }
            }
        }
        

        /****** TRACING ******/
        DocTraceContextSsrs traceContext = DocTraceContextSsrs::construct(_srsReportRunPrinter, _srsReportDataContract);

        try
        {
            /****** TRACING ******/
            DocTrace::info(DocConstantDiagnostics::TraceDocentric, DocConstantDiagnostics::TraceStartToken, traceContext.getTraceMessage(), traceContext);

            // Store the original SRSPrintDestinationSettings object from _srsReportDataContract, including all Docentric PDS (Print Destination Settings) added to this class
            // via extension SrsPrintDestinationSettings_DC_Extension, so we can restore it at the end of the Docentric pipeline to enable successive report executions.
            // In the Docentric pipeline, we will use the cloned SRSPrintDestinationSettings instance with the cloned Docentric PDS, which will be changed throughout the pipeline
            // (e.g. placeholders and attachments are resolved) and used as such for saving to Print archive, printing to network printers from Docentric Viewer, validating restricted network printers and various POCs.
            origSRSPrintDestinationSettings = _srsReportDataContract.parmPrintSettings();
            newSRSPrintDestinationSettings = _srsReportDataContract.parmPrintSettings() ? new SRSPrintDestinationSettings(_srsReportDataContract.parmPrintSettings().pack()) : null;
            _srsReportDataContract.parmPrintSettings(newSRSPrintDestinationSettings);

            // Store the number of the last infolog line before report execution.
            infologLineBeforeReportStarts = infologLine();

            // Run the report. DocPrintManager will generate the single-document report and send it to the target print destination.
            docPrintManager = DocSrsReportRunUtil::constructPrintManagerFromSrsReportDataContract(_srsReportDataContract);
            docPrintManager.run();

            // Get and update the Docentric report execution info.
            docReportExecutionInfo = getAndUpdateDocentricReportExecutionInfo(true);

            // Log the report execution success info.
            DocDiagnosticsManager::logReportExecutionSuccess(docReportExecutionInfo);

            // #DOCENTRIC LOG: Log here successful report execution to Docentric Log using docReportExecutionInfo.

            // Publish event that the report execution succeeded.
            DocOutputManagerPublisher::publishEvent_reportExecutionSuccess(docReportExecutionInfo);

            // Update the built-in SSRS report execution info with the Docentric report execution info.
            updateSrsReportExecutionInfo(docReportExecutionInfo, true);

            /****** TRACING ******/
            DocTrace::info(DocConstantDiagnostics::TraceDocentric, DocConstantDiagnostics::TraceEndToken, traceContext.getTraceMessage(), traceContext.setIncludePrintingResult(true));

            if (DocTrace::isTraceCategoryEnabled(DocConstantDiagnostics::TraceReportExecTimes))
            {
                DocTraceContextReportExecTimes traceContextReportExecTimes = DocTraceContextReportExecTimes::construct(_srsReportRunPrinter, _srsReportDataContract);
                DocTrace::info(DocConstantDiagnostics::TraceReportExecTimes, DocConstantDiagnostics::TraceReportExecCompleted, traceContextReportExecTimes.getTraceMessage(), traceContextReportExecTimes);
            }
        }
        catch
        {
            // Get and update the Docentric report execution info.
            docReportExecutionInfo = getAndUpdateDocentricReportExecutionInfo(false);
            
            str reportId = _srsReportDataContract.parmReportName(); // The same as docReportExecutionInfo.parmPrintReportSettings().parmReportId()
            // NOTE: We will use the same report caption we are using in DocOutputManagerMessenger when informing user about printing success/failure.
            str reportCaption = docReportExecutionInfo.parmPrintReportSettings().parmReportCaption(); // Not necessarily the same as _srsReportDataContract.parmReportCaption()

            // Log the report execution failure info.
            DocDiagnosticsManager::logReportExecutionFailure(docReportExecutionInfo, _srsReportDataContract, isPrintDestinationUnknown);

            // Write error(s) to exceptions log, if the flag DocReportParameters.UseExceptionLogForErrors is set.
            DocReportingHelper::infoLogToExceptionLogIfSetup(reportId, reportCaption, infologLineBeforeReportStarts + 1);
            
            // #DOCENTRIC LOG: Log here unsuccessful report execution to Docentric Log using docReportExecutionInfo.

            // Publish event that the report execution failed.
            boolean doNotThrowErrorInBatch = DocOutputManagerPublisher::publishEvent_reportExecutionFailure(docReportExecutionInfo);

            // Update the built-in SSRS report execution info with the Docentric report execution info.
            updateSrsReportExecutionInfo(docReportExecutionInfo, false);

            /****** TRACING ******/
            DocTrace::error(DocConstantDiagnostics::TraceDocentric, DocConstantDiagnostics::TraceEndToken, traceContext.getTraceMessage(), traceContext.setIncludePrintingResult(true));

            // Write the error message to infolog.
            DocGlobalHelper::handleError(strFmt("@DocentricAX:ExecutingReportErrors", reportCaption, reportId));
            
            if (DocGlobalHelper::isNonInteractiveSession())
            {
                // Write the report metadata if exists to infolog.
                if (docReportExecutionInfo.existsReportMetadata())
                {
                    DocGlobalHelper::handleError(strFmt('%1 >> %2', "@DocentricAX3:ReportMetadata", docReportExecutionInfo.getReportMetadata()));
                }

                // If the report execution is canceled, don't throw an exception.
                if (doNotThrowErrorInBatch)
                {
                    return;
                }

                // #BATCH HANDLING: Perform here actions needed according to Batch execution settings in Docentric report setup.

                // Rethrow the exception.
                Message::Add(MessageSeverity::Error, '*******'); // Dummy message which will be removed by SrsReportRunController.displayReportRunException().
                throw Exception::Error;
            }
            else
            {
                // Show the error and don't rethrow the exception.
                str reportIdentifier = reportCaption != '' ? reportCaption : reportId;
                Box::stop(strFmt("@DocentricAX:ExecutingReportErrorsEndUser", reportIdentifier));
            }
        }
        finally
        {
            // Restore the original SRSPrintDestinationSettings object in the report contract _srsReportDataContract at the end of Docentric pipeline.
            _srsReportDataContract.parmPrintSettings(origSRSPrintDestinationSettings);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurePrintDestinationsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures which print destination sets will be visible: only SSRS's, only Docentric's or both.
    /// </summary>
    /// <param name = "_srsPrintDestSettings">An instance of the SRSPrintDestinationSettings class</param>
    public static void configurePrintDestinationsVisibility(SRSPrintDestinationSettings _srsPrintDestSettings)
    {
        DocPrintDestSettingsFormMode pdsMode = DocParameters::find().PrintDestSettingsFormMode;

        switch (pdsMode)
        {
            case DocPrintDestSettingsFormMode::UseBothSsrsAndDocentric:
                // Do nothing.
                return;

            case DocPrintDestSettingsFormMode::UseOnlyDocentric:
                DocSrsReportRunUtil::fillDocentricPrintDestSettingsFromSsrs(_srsPrintDestSettings);
                break;

            case DocPrintDestSettingsFormMode::UseOnlySsrs:
                DocSrsReportRunUtil::fillSrsPrintDestSettingsFromDocentric(_srsPrintDestSettings);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocentricPrintDestSettingsFromSsrs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Docentric print destination settings from SSRS print destination settings.
    /// </summary>
    /// <param name = "_srsPrintDestSettings">An instance of the SRSPrintDestinationSettings class</param>
    public static void fillDocentricPrintDestSettingsFromSsrs(SRSPrintDestinationSettings _srsPrintDestSettings)
    {
        if (_srsPrintDestSettings == null)
        {
            return;
        }

        // Do nothing if a Docentric print destination is already selected.
        if (DocSrsReportRunUtil::isDocentricPrintDestination(_srsPrintDestSettings.printMediumType()))
        {
            return;
        }

        // Common.
        _srsPrintDestSettings.parmSrsPrintReportSettings_DC().parmTemplateId(DocSrsReportRunUtil::getDocentricSelectedTemplateTokenForSrsPrintDestForm(
                                                                                _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmReportId(),
                                                                                _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmPrintMgmtDocumentType(),
                                                                                _srsPrintDestSettings.parmTmpPrintDestSettings_DC().parmPrintMgmtDocumentTypeProvided()));

        // Archive.
        _srsPrintDestSettings.parmSrsPrintReportSettings_DC().parmSaveToArchive(_srsPrintDestSettings.parmPrintToArchive());
        // Set the original PrintToArchive flag to false, to prevent additional saving to Print Archive.
        _srsPrintDestSettings.parmPrintToArchive(false);


        // Screen -> Nothing to do.

        // File.
        _srsPrintDestSettings.parmFilePrintDestSettings_DC().parmOutputFileFormatSrs(_srsPrintDestSettings.fileFormat());
        _srsPrintDestSettings.parmFilePrintDestSettings_DC().parmOutputFilename(_srsPrintDestSettings.fileName());
        _srsPrintDestSettings.parmFilePrintDestSettings_DC().parmUseSsrsBuiltInDesign(true);

        // Email.
        _srsPrintDestSettings.parmEmailPrintDestSettings_DC().parmEmailTo(_srsPrintDestSettings.emailTo());
        _srsPrintDestSettings.parmEmailPrintDestSettings_DC().parmEmailCc(_srsPrintDestSettings.emailCc());
        _srsPrintDestSettings.parmEmailPrintDestSettings_DC().parmEmailSubject(_srsPrintDestSettings.emailSubject());
        _srsPrintDestSettings.parmEmailPrintDestSettings_DC().parmEmailAttachmentFileFormatSrs(_srsPrintDestSettings.emailAttachmentFileFormat());
        _srsPrintDestSettings.parmEmailPrintDestSettings_DC().parmEmailAttachmentUseSsrsBuiltInDesign(true);

        // Printer.
        _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmCollated(_srsPrintDestSettings.collate());
        _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmSelectedPrinterName(_srsPrintDestSettings.printerName());
        _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmNumberOfCopies(_srsPrintDestSettings.numberOfCopies());
        _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmPrintAllPages(_srsPrintDestSettings.printAllPages());
        _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmPrintFromPage(_srsPrintDestSettings.fromPage());
        _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmPrintToPage(_srsPrintDestSettings.toPage());
        
        switch (_srsPrintDestSettings.printOnBothSides())
        {
            case SRSReportDuplexPrintingSetting::FlipOnLongEdge:
                _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmDuplexPrinting(DocReportDuplexPrintingSetting::FlipOnLongEdge);
                break;
            case SRSReportDuplexPrintingSetting::FlipOnShortEdge:
                _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmDuplexPrinting(DocReportDuplexPrintingSetting::FlipOnShortEdge);
                break;
            case SRSReportDuplexPrintingSetting::None:
                _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmDuplexPrinting(DocReportDuplexPrintingSetting::None);
                break;
        }
           
        switch (_srsPrintDestSettings.orientation())
        {
            case SRSReportPrintOrientation::Landscape:
                _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmOrientation(DocReportPrintOrientation::Landscape);
                break;
            case SRSReportPrintOrientation::Portrait:
            case SRSReportPrintOrientation::Potrait:
                _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmOrientation(DocReportPrintOrientation::Portrait);
                break;
            case SRSReportPrintOrientation::Default:
                _srsPrintDestSettings.parmPrinterPrintDestSettings_DC().parmOrientation(DocReportPrintOrientation::Default);
                break;
        }
        
        // Target print destination.
        switch (_srsPrintDestSettings.printMediumType())
        {
            case SRSPrintMediumType::Archive:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Archive_DC);
                break;

            case SRSPrintMediumType::Screen:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Screen_DC);
                break;

            case SRSPrintMediumType::Email:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Email_DC);
                break;

            case SRSPrintMediumType::File:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::File_DC);
                break;

            case SRSPrintMediumType::Printer:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Printer_DC);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSrsPrintDestSettingsFromDocentric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the SSRS print destination settings from Docentric print destination settings.
    /// </summary>
    /// <param name = "_srsPrintDestSettings">An instance of the SRSPrintDestinationSettings class</param>
    public static void fillSrsPrintDestSettingsFromDocentric(SRSPrintDestinationSettings _srsPrintDestSettings)
    {
        if (_srsPrintDestSettings == null)
        {
            return;
        }

        // Do nothing if an SSRS print destination is already selected.
        if (!DocSrsReportRunUtil::isDocentricPrintDestination(_srsPrintDestSettings.printMediumType()))
        {
            return;
        }


        // Archive.
        _srsPrintDestSettings.parmPrintToArchive(_srsPrintDestSettings.parmSrsPrintReportSettings_DC().parmSaveToArchive());
        // Set the original PrintToArchive flag to false, to prevent additional saving to Print Archive.
        _srsPrintDestSettings.parmSrsPrintReportSettings_DC().parmSaveToArchive(false);


        // Target print destination.
        switch (_srsPrintDestSettings.printMediumType())
        {
            case SRSPrintMediumType::Archive_DC:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Archive);
                break;

            case SRSPrintMediumType::Screen_DC:
            case SRSPrintMediumType::GenerateDataSource_DC:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Screen);
                break;

            case SRSPrintMediumType::Email_DC:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Email);
                break;

            case SRSPrintMediumType::File_DC:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::File);
                break;

            case SRSPrintMediumType::Printer_DC:
                _srsPrintDestSettings.printMediumType(SRSPrintMediumType::Printer);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print management document type for the specified symbol value.
    /// </summary>
    /// <param name = "_symbol">Symbol value</param>
    /// <returns>A container with a flag indicating whether the symbol value was found and the related PrintMgmtDocumentType enum value</returns>
    public static container getPrintMgmtDocumentType(str _symbol)
    {
        PrintMgmtDocumentType  pmdt;
        boolean found = false;

        switch (_symbol)
        {
            case 'SalesOrderInvoice':
                pmdt = PrintMgmtDocumentType::SalesOrderInvoice;
                found = true;
                break;
            
            case 'SalesOrderConfirmation':
                pmdt = PrintMgmtDocumentType::SalesOrderConfirmation;
                found = true;
                break;

            case 'SalesOrderPackingSlip':
                pmdt = PrintMgmtDocumentType::SalesOrderPackingSlip;
                found = true;
                break;

            case 'InventPickList':
                pmdt = PrintMgmtDocumentType::InventPickList;
                found = true;
                break;

            case 'SalesFreeTextInvoice':
                pmdt = PrintMgmtDocumentType::SalesFreeTextInvoice;
                found = true;
                break;

            case 'Confirmation':
                pmdt = PrintMgmtDocumentType::Confirmation;
                found = true;
                break;

            case 'Quotation':
                pmdt = PrintMgmtDocumentType::Quotation;
                found = true;
                break;

            case 'PurchaseOrderInvoice':
                pmdt = PrintMgmtDocumentType::PurchaseOrderInvoice;
                found = true;
                break;

            case 'PurchaseOrderPackingSlip':
                pmdt = PrintMgmtDocumentType::PurchaseOrderPackingSlip;
                found = true;
                break;

            case 'PurchaseOrderReceiptsList':
                pmdt = PrintMgmtDocumentType::PurchaseOrderReceiptsList;
                found = true;
                break;

            case 'PurchaseOrderRequisition':
                pmdt = PrintMgmtDocumentType::PurchaseOrderRequisition;
                found = true;
                break;
            
            case 'ProjectInvoice':
                pmdt = PrintMgmtDocumentType::ProjectInvoice;
                found = true;
                break;

            case 'PurchRFQ':
                pmdt = PrintMgmtDocumentType::PurchRFQ;
                found = true;
                break;
            
            case 'PurchRFQReject':
                pmdt = PrintMgmtDocumentType::PurchRFQReject;
                found = true;
                break;
            
            case 'PurchRFQAccept':
                pmdt = PrintMgmtDocumentType::PurchRFQAccept;
                found = true;
                break;
            
            case 'PurchRFQReturn':
                pmdt = PrintMgmtDocumentType::PurchRFQReturn;
                found = true;
                break;
            
            case 'CustInterestNote':
                pmdt = PrintMgmtDocumentType::CustInterestNote;
                found = true;
                break;
            
            case 'CustCollectionLetter':
                pmdt = PrintMgmtDocumentType::CustCollectionLetter;
                found = true;
                break;

            case 'CustAccountStatement':
                pmdt = PrintMgmtDocumentType::CustAccountStatement;
                found = true;
                break;
            
            case 'SalesAgreementConfirmation':
                pmdt = PrintMgmtDocumentType::SalesAgreementConfirmation;
                found = true;
                break;
            
            case 'PurchAgreementConfirmation':
                pmdt = PrintMgmtDocumentType::PurchAgreementConfirmation;
                found = true;
                break;
            
            case 'SalesOrderInvoice4Paym_RU':
                pmdt = PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU;
                found = true;
                break;
            
            case 'PurchOrderInvoice4Paym_RU':
                pmdt = PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU;
                found = true;
                break;

            case 'SalesFreeTextInvoice4Paym_RU':
                pmdt = PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU;
                found = true;
                break;
            
            case 'TaxFiscalDocument_BR':
                pmdt = PrintMgmtDocumentType::TaxFiscalDocument_BR;
                found = true;
                break;
            
            case 'TaxReimburstmentSlip_HU':
                pmdt = PrintMgmtDocumentType::TaxReimburstmentSlip_HU;
                found = true;
                break;
            
            case 'BankCheque':
                pmdt = PrintMgmtDocumentType::BankCheque;
                found = true;
                break;
            
            case 'ComplementaryInvoice_BR':
                pmdt = PrintMgmtDocumentType::ComplementaryInvoice_BR;
                found = true;
                break;
            
            case 'SalesOrderFacture':
                pmdt = PrintMgmtDocumentType::SalesOrderFacture;
                found = true;
                break;
            
            case 'PurchaseOrderFacture':
                pmdt = PrintMgmtDocumentType::PurchaseOrderFacture;
                found = true;
                break;

            case 'SalesFreeTextFacture':
                pmdt = PrintMgmtDocumentType::SalesFreeTextFacture;
                found = true;
                break;

            case 'SalesAdvanceInvoice':
                pmdt = PrintMgmtDocumentType::SalesAdvanceInvoice;
                found = true;
                break;
            
            case 'PurchaseOrderBailee':
                pmdt = PrintMgmtDocumentType::PurchaseOrderBailee;
                found = true;
                break;
            
            case 'SalesOrderBailee':
                pmdt = PrintMgmtDocumentType::SalesOrderBailee;
                found = true;
                break;

            case 'PurchaseAdvanceInvoice':
                pmdt = PrintMgmtDocumentType::PurchaseAdvanceInvoice;
                found = true;
                break;
            
            case 'ProjectQuotation':
                pmdt = PrintMgmtDocumentType::ProjectQuotation;
                found = true;
                break;
            
            case 'SIProjInvoice':
                pmdt = PrintMgmtDocumentType::SIProjInvoice;
                found = true;
                break;
            
            case 'SIProjInvoiceWithBR':
                pmdt = PrintMgmtDocumentType::SIProjInvoiceWithBR;
                found = true;
                break;
            
            case 'SIManagedProjInvoice':
                pmdt = PrintMgmtDocumentType::SIManagedProjInvoice;
                found = true;
                break;
            
            case 'SIManagedProjInvoiceWithBR':
                pmdt = PrintMgmtDocumentType::SIManagedProjInvoiceWithBR;
                found = true;
                break;
            
            case 'ProjCustRetentionReleaseInvoice':
                pmdt = PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice;
                found = true;
                break;
            
            case 'PurchaseOrderConfirmationRequest':
                pmdt = PrintMgmtDocumentType::PurchaseOrderConfirmationRequest;
                found = true;
                break;
            
            case 'TransferOrderFiscalDoc_BR':
                pmdt = PrintMgmtDocumentType::TransferOrderFiscalDoc_BR;
                found = true;
                break;
            
            case 'ProjDebitNote_BR':
                pmdt = PrintMgmtDocumentType::ProjDebitNote_BR;
                found = true;
                break;
            
            case 'WMSBillOfLading_RU':
                pmdt = PrintMgmtDocumentType::WMSBillOfLading_RU;
                found = true;
                break;
            
            case 'WMSBilOfLadingTranspDocument_RU':
                pmdt = PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU;
                found = true;
                break;
            
            case 'WHSPickListShippingWave':
                pmdt = PrintMgmtDocumentType::WHSPickListShippingWave;
                found = true;
                break;
            
            case 'WHSPickListShippingLoad':
                pmdt = PrintMgmtDocumentType::WHSPickListShippingLoad;
                found = true;
                break;
            
            case 'WHSPickListShippingShipment':
                pmdt = PrintMgmtDocumentType::WHSPickListShippingShipment;
                found = true;
                break;
            
            case 'WHSPickListProd':
                pmdt = PrintMgmtDocumentType::WHSPickListProd;
                found = true;
                break;
            
            case 'WHSLoadList':
                pmdt = PrintMgmtDocumentType::WHSLoadList;
                found = true;
                break;

            case 'WHSBOL':
                pmdt = PrintMgmtDocumentType::WHSBOL;
                found = true;
                break;
            
            case 'WHSContainerContents':
                pmdt = PrintMgmtDocumentType::WHSContainerContents;
                found = true;
                break;
            
            case 'WHSSalesInvoiceByLoad':
                pmdt = PrintMgmtDocumentType::WHSSalesInvoiceByLoad;
                found = true;
                break;

            case 'WHSSalesConfirmByLoad':
                pmdt = PrintMgmtDocumentType::WHSSalesConfirmByLoad;
                found = true;
                break;
            
            case 'TMSCommercialInvoice':
                pmdt = PrintMgmtDocumentType::TMSCommercialInvoice;
                found = true;
                break;
            
            case 'TMSCertificateOfOrigin':
                pmdt = PrintMgmtDocumentType::TMSCertificateOfOrigin;
                found = true;
                break;
            
            case 'TMSRoute':
                pmdt = PrintMgmtDocumentType::TMSRoute;
                found = true;
                break;
            
            case 'TMSLoadTender':
                pmdt = PrintMgmtDocumentType::TMSLoadTender;
                found = true;
                break;
            
            case 'VendPaymAdvice':
                pmdt = PrintMgmtDocumentType::VendPaymAdvice;
                found = true;
                break;
            
            case 'CustPaymAdvice':
                pmdt = PrintMgmtDocumentType::CustPaymAdvice;
                found = true;
                break;
        }

        return [found, pmdt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportExecutionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the report execution info.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">An instance of the DocReportExecutionInfo class</param>
    /// <param name = "_srsReportDataContract">An instance of the SrsReportDataContract class</param>
    /// <returns>True if the print destination is unknown; otherwise false</returns>
    public static boolean updateReportExecutionInfo(DocReportExecutionInfo _docReportExecutionInfo, SrsReportDataContract _srsReportDataContract)
    {
        SRSPrintDestinationSettings   srsPrintDestinationSettings;
        DocPrintReportSettings        printReportSettings;
        str                           srsReportName;
        boolean                       isPrintDestinationUnknown = false;

        if (_docReportExecutionInfo == null)
        {
            return true;
        }

        // Construct a DocPrintReportSettings instance.
        printReportSettings = new DocPrintReportSettings();

        // Set that the report is the printed from SSRS pipeline.
        printReportSettings.parmPrintedFrom(DocReportPrintedFrom::SsrsPipeline);

        try
        {
            // SRS print destination settings.
            srsPrintDestinationSettings = _srsReportDataContract.parmPrintSettings();
        
            // Check if the SRS print destination settings object is set.
            if (srsPrintDestinationSettings == null)
            {
                // Create it in case if it wasn't set.
                srsPrintDestinationSettings = new SrsPrintDestinationSettings();
                srsPrintDestinationSettings.parmPrintToArchive(false);
                isPrintDestinationUnknown = true;
            }

            srsReportName = _srsReportDataContract.parmReportName();

            // Fill printReportSettings from _srsReportDataContract.
            // -- ReportId.
            printReportSettings.parmReportId(srsReportName); // the same as reportTable.ReportId.

            // -- ReportRunId.
            if (_srsReportDataContract.parmReportExecutionInfo() != null &&
                guid2str(_srsReportDataContract.parmReportExecutionInfo().parmReportRunId()) != Global::nullValueFromType(Types::Guid))
            {
                printReportSettings.setReportRunId(_srsReportDataContract.parmReportExecutionInfo().parmReportRunId());
            }
            else
            {
                printReportSettings.setReportRunId();
            }

            // -- PrintDestinationRunId.
            printReportSettings.setPrintDestinationRunId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().getPrintDestinationRunId());

            // -- LanguageId.
            printReportSettings.parmLanguageId(_srsReportDataContract.parmRdlContract().parmLanguageId());

            // -- CompanyId.
            printReportSettings.parmCompanyId(_srsReportDataContract.parmRdlContract().parmCompanyId());

            // -- SaveToArchive.
            printReportSettings.parmSaveToArchive(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveToArchive());
            printReportSettings.parmSaveToArchiveNote(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveToArchiveNote());
            printReportSettings.parmSaveToArchiveDocuTypeId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveToArchiveDocuTypeId());
            printReportSettings.parmSaveProformaToArchive(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmSaveProformaToArchive());

            // -- Template ID.
            printReportSettings.parmTemplateId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmTemplateId());

            // -- Preview before print.
            printReportSettings.parmPreviewBeforePrint(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmPreviewBeforePrint());

            // -- PDF/A conformance level.
            printReportSettings.parmPdfAConformanceLevel(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmPdfAConformanceLevel());

            // -- Report Menu Item.
            printReportSettings.parmReportMenuItemName(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportMenuItemName());
            printReportSettings.parmReportMenuItemType(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportMenuItemType());
        
            // -- Set Original/Copy type, Print management setting name and Original Document Title - applicable for Print Management report.
            printReportSettings.parmOriginalCopyType(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmOriginalCopyType());
            printReportSettings.parmPrintMgmtSettingName(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmPrintMgmtSettingName());
            printReportSettings.parmDocumentTitleOriginal(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmDocumentTitleOriginal());
        
            // -- Report execution context.
            printReportSettings.parmReportExecutionContextTableId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportExecutionContextTableId());
            printReportSettings.parmReportExecutionContextDataAreaId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportExecutionContextDataAreaId());
            printReportSettings.parmReportExecutionContextTableRecId(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmReportExecutionContextTableRecId());
     
            // Custom settings.
            printReportSettings.parmCustomSettings(srsPrintDestinationSettings.parmSrsPrintReportSettings_DC().parmCustomSettings());

            // Set default values but don't resolve the default template.
            printReportSettings.setDefaultParmValues(false);

            // -- PrintDestination.
            SRSPrintMediumType srsPrintMediumType = srsPrintDestinationSettings.printMediumType();
            switch (srsPrintMediumType)
            {
                case SRSPrintMediumType::Archive_DC:
                    printReportSettings.parmPrintDestination(DocPrintDestination::Archive);
                    break;

                case SRSPrintMediumType::Email_DC:
                    printReportSettings.parmPrintDestination(DocPrintDestination::Email);
                    break;

                case SRSPrintMediumType::File_DC:
                    printReportSettings.parmPrintDestination(DocPrintDestination::File);
                    break;

                case SRSPrintMediumType::GenerateDataSource_DC:
                    printReportSettings.parmPrintDestination(DocPrintDestination::GenerateDataSource);
                    break;

                case SRSPrintMediumType::Printer_DC:
                    printReportSettings.parmPrintDestination(DocPrintDestination::Printer);
                    break;

                case SRSPrintMediumType::Screen_DC:
                    printReportSettings.parmPrintDestination(DocPrintDestination::Screen);
                    break;

                case SRSPrintMediumType::Memory_DC:
                    printReportSettings.parmPrintDestination(DocPrintDestination::Memory);
                    break;

                //default: Unsupported print destination type! But we will swallow this error.
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }
        
        _docReportExecutionInfo.parmPrintReportSettingsOrig(printReportSettings);

        // Resolve the default template if needed.
        printReportSettings.setDefaultParmValues(true);
        _docReportExecutionInfo.parmPrintReportSettings(printReportSettings);

        return isPrintDestinationUnknown;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>