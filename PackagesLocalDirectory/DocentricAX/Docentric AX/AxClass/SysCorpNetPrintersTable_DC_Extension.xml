<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysCorpNetPrintersTable_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SysCorpNetPrintersTable_DC_Extension is an extension of the table SysCorpNetPrintersTable.
/// </summary>
[ExtensionOf(tableStr(SysCorpNetPrinters))]
final class SysCorpNetPrintersTable_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current table buffer to the table.
    ///
    /// When new printer is inserted in SysCorpNetPrinters, we will insert a new record
    /// into DocRestrictedPrinter table for every ReportId having the flag
    /// RestrictedPrinterNewPrinters set to YES.
    /// In cloud environments when a new printer is registered in DRA,
    /// a new record will be added to SysCorpNetPrinters for each legal entity.
    /// Therefore, this method will be invoked once for each legal entity
    /// and we don't need to switch company here.
    /// </summary>
    public void insert()
    {
        next insert();

        DocReportTable reportTable;
        PrinterName printerName = this.PrinterName;
        
        try
        {
            // On database copy SysCorpNetPrinters table is deleted while Docentric printers tables are not.
            // Therefore we should support scenario where DocRestrictedPrinter records already exist.
            while select ReportId from reportTable where reportTable.RestrictForNewPrinters == NoYes::Yes
            {
                DocRestrictedPrinter restrictedPrinter = DocRestrictedPrinter::findPrinterAndReport(printerName, reportTable.ReportId);

                if (!restrictedPrinter.RecId)
                {
                    restrictedPrinter.clear();
                    restrictedPrinter.PrinterName = printerName;
                    restrictedPrinter.ReportId = reportTable.ReportId;
                    restrictedPrinter.insert();
                }
            }                
        }
        catch
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:ErrorRestrictingNewPrinter", printerName, this.DataAreaId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>