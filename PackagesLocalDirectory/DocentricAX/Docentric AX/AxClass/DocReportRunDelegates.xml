<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportRunDelegates</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocReportRunDelegates class contains all available delegates in the report execution pipeline.
/// </summary>
public class DocReportRunDelegates
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    public static DocReportRunDelegates instance()
    {
        DocReportRunDelegates instance;
        SysGlobalCache  globalCache = appl.globalCache();

        if (globalCache.isSet(classStr(DocReportRunDelegates), 0))
        {
            instance = globalCache.get(classStr(DocReportRunDelegates), 0);
        }
        else
        {
            instance = new DocReportRunDelegates();
            appl.globalCache().set(classStr(DocReportRunDelegates), 0, instance);
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExecutionCompleted</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------*/
    /*             SrsReportRunController                          */
    /*-------------------------------------------------------------*/
    /// <summary>
    /// Delegate that is activated when a report is executed (success or failure).
    /// </summary>
    /// <param name = "_srsReportRunController">SSRS report controller</param>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    delegate void reportExecutionCompleted(SrsReportRunController _srsReportRunController, DocReportExecutionInfo _docReportExecutionInfo)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportExecutionCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher when a report is executed (success or failure).
    /// </summary>
    /// <param name = "_srsReportRunController">SSRS report controller</param>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    public void onReportExecutionCompleted(SrsReportRunController _srsReportRunController, DocReportExecutionInfo _docReportExecutionInfo)
    {
        this.reportExecutionCompleted(_srsReportRunController, _docReportExecutionInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>savingEInvoiceAttachment</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------*/
    /*             DocumentAttachment_DC_Extension                 */
    /*-------------------------------------------------------------*/
    
    /// <summary>
    /// Delegate before a report is saved to eInvoice attachment.
    /// </summary>
    /// <param name = "_journal">Journal record where the eInvoice attachment is being saved to</param>
    /// <param name = "_srsReportDataContract">SrsReportDataContract object of the executing report</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    delegate void savingEInvoiceAttachment(Common _journal, SrsReportDataContract _srsReportDataContract,
                                           DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSavingEInvoiceAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher before a report is saved to eInvoice attachment.
    /// </summary>
    /// <param name = "_journal">Journal record where the eInvoice attachment is being saved to</param>
    /// <param name = "_srsReportDataContract">SrsReportDataContract object of the executing report</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    public void onSavingEInvoiceAttachment(Common _journal, SrsReportDataContract _srsReportDataContract,
                                           DocPrintReportSettings _printReportSettings, DocPrintDestSettingsFile _filePrintDestSettings)
    {
        try
        {
            this.savingEInvoiceAttachment(_journal, _srsReportDataContract, _printReportSettings, _filePrintDestSettings);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the savingEInvoiceAttachment() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the savingEInvoiceAttachment() delegate method');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExecutionSuccess</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------*/
    /*             DocSrsReportRunUtil                             */
    /*-------------------------------------------------------------*/
    /// <summary>
    /// Delegate that is activated when a report is successfully executed.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void reportExecutionSuccess(DocReportExecutionInfo _docReportExecutionInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportExecutionSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher when a report is successfully executed.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onReportExecutionSuccess(DocReportExecutionInfo _docReportExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.reportExecutionSuccess(_docReportExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExecutionFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate that is activated when a report failed to execute.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <param name = "_result">Set _result.cancelExecution(true) to prevent throwing an error in batch.</param>
    delegate void reportExecutionFailure(DocReportExecutionInfo _docReportExecutionInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportExecutionFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher when a report execution fails.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <returns>Set result.cancelExecution(true) to prevent throwing an error in batch.</returns>
    public DocEventHandlerResult onReportExecutionFailure(DocReportExecutionInfo _docReportExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.reportExecutionFailure(_docReportExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExecutionBegin</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------*/
    /*             DocPrintManager                                 */
    /*-------------------------------------------------------------*/

    /// <summary>
    /// Delegate for running report, this is the point before the report execution begins.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void reportExecutionBegin(DocReportExecutionInfo _docReportExecutionInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportExecutionBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for running report, this is the point before the report execution begins.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onReportExecutionBegin(DocReportExecutionInfo _docReportExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        try
        {
            this.reportExecutionBegin(_docReportExecutionInfo, result);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the reportExecutionBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the reportExecutionBegin() delegate method');
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportPrintBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for running report, this is the point before the report generation and distribution begins and after the report DSP class's run() method completes.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void reportPrintBegin(DocReportExecutionInfo _docReportExecutionInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportPrintBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for running report, this is the point before the report generation and distribution begin and after the report DSP class's run() method completes.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onReportPrintBegin(DocReportExecutionInfo _docReportExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        try
        {
            this.reportPrintBegin(_docReportExecutionInfo, result);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the reportPrintBegin() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the reportPrintBegin() delegate method');
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportDataSourceGenerated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for running report, this is the point after the report data source generation completed.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void reportDataSourceGenerated(DocReportExecutionInfo _docReportExecutionInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportDataSourceGenerated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for running report, this is the point after the report data source generation completed.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onReportDataSourceGenerated(DocReportExecutionInfo _docReportExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        try
        {
            this.reportDataSourceGenerated(_docReportExecutionInfo, result);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the reportDataSourceGenerated() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the reportDataSourceGenerated() delegate method');
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExecutionEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for running report, this is the point after the report execution completed.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void reportExecutionEnd(DocReportExecutionInfo _docReportExecutionInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onReportExecutionEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for running report, this is the point after the report execution completed.
    /// </summary>
    /// <param name = "_docReportExecutionInfo">Report execution info including all print destination settings</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onReportExecutionEnd(DocReportExecutionInfo _docReportExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        try
        {
            this.reportExecutionEnd(_docReportExecutionInfo, result);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the reportExecutionEnd() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the reportExecutionEnd() delegate method');
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingRestrictedPrinter</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------*/
    /*             DocPrinterManager                               */
    /*-------------------------------------------------------------*/
    
    /// <summary>
    /// Delegate for applying additional Printer restriction conditions (e.g. per user and location),
    /// once the printer is validated and determined as restricted or allowed.
    /// The event will be published when a report is being printed to a selected network printer by using:
    /// - Docentric Printer print destination, if DocPrinterManager::getRestrictPrinters() == DocRestrictPrinters::Docentric.
    /// - Both SSRS and Docentric Printer print destination, if DocPrinterManager::getRestrictPrinters() == DocRestrictPrinters::DocentricAndSSRS.
    /// - Will not be published, if if DocPrinterManager::getRestrictPrinters() == DocRestrictPrinters::None.
    /// Additionally, the event will NOT be published in all above cases if the selected printer is not active.
    /// </summary>
    /// <param name = "_restrictedPrinterResult">Check the help of the DocEventHandlerRestrictedPrinterResult object methods to understand how to use it.</param>
    delegate void validatingRestrictedPrinter(DocEventHandlerRestrictedPrinterResult _restrictedPrinterResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValidatingRestrictedPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher method invoked from DocPrinterManager::isPrinterActiveAndAllowed(),
    /// for applying additional Printer restriction conditions (e.g. per user and location),
    /// once the printer is validated and determined as restricted or allowed.
    /// The event will be published when printing a report using:
    /// - Docentric Printer print destination, if DocPrinterManager::getRestrictPrinters() == DocRestrictPrinters::Docentric.
    /// - Both SSRS and Docentric Printer print destination, if DocPrinterManager::getRestrictPrinters() == DocRestrictPrinters::DocentricAndSSRS.
    /// - Will not be published, if DocPrinterManager::getRestrictPrinters() == DocRestrictPrinters::None.
    /// Additionally, the event will not be published in all above cases if the selected printer is not active.
    /// </summary>
    /// <param name = "_selectedPrinterName">Selected printer name; it can contain a printer token, e.g. @DEFAULT_PRINTER@</param>
    /// <param name = "_resolvedPrinterName">Resolved selected printer name - without any tokens; if the selected printer name doesn't contain any token, then the selected and resolved printer names are equal.</param>
    /// <param name = "_printValidationErrors">True, if the validation error will be printed to Infolog. In this case, you can also print your custom validation errors.</param>
    /// <param name = "_reportId">Report ID. Consider this parameter if you need to apply restriction only for particular reports.</param>
    /// <param name = "_reportContextInfo">Contains the report context information - DocPrintReportSettings or SrsReportDataContract object.</param>
    /// <param name = "_restrictedPrinter">
    /// If _restrictedPrinter.RecId != 0 -> the printer (_resolvedPrinterName) is restricted for the given report.
    /// If _restrictedPrinter.RecId == 0 -> the printer (_resolvedPrinterName) is allowed for the given report.
    /// We will set _restrictedPrinter.RecId to 1, in case that the selected printer should be restricted according to your custom restriction rules.
    /// </param>
    public void onValidatingRestrictedPrinter(str _selectedPrinterName, str _resolvedPrinterName, boolean _printValidationErrors,
                                              DocReportId _reportId, Object _reportContextInfo, DocRestrictedPrinter _restrictedPrinter)
    {
        try
        {
            DocEventHandlerRestrictedPrinterResult restrictedPrinterResult = new DocEventHandlerRestrictedPrinterResult(_selectedPrinterName, _resolvedPrinterName,
                _printValidationErrors, _reportId, _reportContextInfo, _restrictedPrinter);
            
            this.validatingRestrictedPrinter(restrictedPrinterResult);

            // If subscribers decided to restrict the printer, apply restriction (if there is no restriction yet).
            if (restrictedPrinterResult.parmRestrictPrinter())
            {
                if (_restrictedPrinter.RecId == 0)
                {
                    _restrictedPrinter.RecId = 1;
                }
            }
        }

        // Don't throw any exception.
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error occurred in the validatingRestrictedPrinter() delegate method', false);
        }
        catch
        {
            DocGlobalHelper::handleError('Error occurred in the validatingRestrictedPrinter() delegate method', true, funcName(), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePrinterCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for applying additional Printer restriction conditions (e.g. per user and location),
    /// once _activeAndAllowedPrinterSet is filled. The printers from this set will appear in the printer combo.
    /// Add printers to _printersToRestrictSet which you want addtitionally to remove from the printer combo.
    /// By implementing the delegate you will affect only the printer combo in Docentric Printer print destination.
    /// </summary>
    /// <param name = "_printerCombo">
    /// Printer combo; if null, it means that is invoked from the SSRS print destination settings form > Docentric Printer print destination,
    /// where from 3.4.0 the custom lookup with DocPrinterSelectorTmp is used for printer selection.
    /// </param>
    /// <param name = "_reportId">Report ID. Consider this parameter if you need to apply restriction only for particular reports.</param>
    /// <param name = "_reportType">Print management document type. Important when posting a Print management report, because then Report ID might be unknown.</param>
    /// <param name = "_reportTypeProvided">Is Print management document type provided.</param>
    /// <param name = "_addUserDefaultPrinter">Is the @DEFAULT_PRINTER@ token already added in the printer combo</param>
    /// <param name = "_activeAndAllowedPrinterSet">
    /// Set(Types::String) with the names of active and allowed printers in regard to the Restricted printers setup.
    /// Note that if both _reportId and _reportType are not provided, the set will contain all active printers for the current company.
    /// </param>
    /// <param name = "_printersToRestrictSet">
    /// Set(Types::String) with the names of the printers to be additionally restricted.
    /// Add all those printers to this set that you don't want to appear in the printer combo.
    /// </param>
    delegate void populatePrinterCombo(FormComboBoxControl _printerCombo, DocReportId _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided,
        boolean _addUserDefaultPrinter, Set _activeAndAllowedPrinterSet, Set _printersToRestrictSet)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPopulatePrinterCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher method invoked from DocPrinterManager::populatePrinterCombo(), for applying additional Printer restriction conditions (e.g. per user and location),
    /// once _activeAndAllowedPrinterSet is filled. The printers from this set will appear in the printer combo.
    /// Add printers to _printersToRestrictSet which you want addtitionally to remove from the printer combo.
    /// By implementing the delegate you will affect only the printer combo in Docentric Printer print destination.
    /// </summary>
    /// <param name = "_printerCombo">
    /// Printer combo; if null, it means that is invoked from the SSRS print destination settings form > Docentric Printer print destination,
    /// where from 3.4.0 the custom lookup with DocPrinterSelectorTmp is used for printer selection.
    /// </param>
    /// <param name = "_reportId">Report ID. Consider this parameter if you need to apply restriction only for particular reports.</param>
    /// <param name = "_reportType">Print management document type. Important when posting a Print management report, because then Report ID might be unknown.</param>
    /// <param name = "_reportTypeProvided">Is Print management document type provided.</param>
    /// <param name = "_addUserDefaultPrinter">Is the @DEFAULT_PRINTER@ token already added in the printer combo</param>
    /// <param name = "_activeAndAllowedPrinterSet">
    /// Set(Types::String) with the names of active and allowed printers. The printers from this set will appear in the printer combo.
    /// Note that if both _reportId and _reportType are not provided, the set will contain all active printers for the current company.
    /// </param>
    public void onPopulatePrinterCombo(FormComboBoxControl _printerCombo,
        DocReportId _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided, boolean _addUserDefaultPrinter, Set _activeAndAllowedPrinterSet)
    {
        try
        {
            Set printersToRestrictSet = new Set(Types::String);

            // Apply custom printer restriction.
            this.populatePrinterCombo(_printerCombo, _reportId, _reportType, _reportTypeProvided, _addUserDefaultPrinter, _activeAndAllowedPrinterSet, printersToRestrictSet);

            // Remove all the printers added via delegate from the set _activeAndAllowedPrinterSet.
            SetEnumerator printersToRestrictSetEnum = printersToRestrictSet.getEnumerator();
            while (printersToRestrictSetEnum.moveNext())
            {
                str printerName = printersToRestrictSetEnum.current();
                _activeAndAllowedPrinterSet.remove(printerName);
            }
        }

        // Don't throw any exception.
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error occurred in the populatePrinterCombo() delegate method', false);
        }
        catch
        {
            DocGlobalHelper::handleError('Error occurred in the populatePrinterCombo() delegate method', true, funcName(), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePrinterComboList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method invoked when the printer list is populated with all active and allowed printers per report and user.
    /// This is an extension point where for example, you can add printer placeholders to this list.
    /// </summary>
    /// <param name = "_reportId">Report ID. Consider this parameter if you need to apply restriction only for particular reports.</param>
    /// <param name = "_reportType">Print management document type. Important when posting a Print management report, because then Report ID might be unknown.</param>
    /// <param name = "_reportTypeProvided">Is Print management document type provided.</param>
    /// <param name = "_userId">User ID</param>
    /// <param name = "_shouldAddPlaceholders">Should printer placeholders be added</param>
    /// <param name = "_activeAndAllowedPrinterList">Active and allowed printer list for the given report/report type and user</param>
    delegate void populatePrinterComboList(DocReportId _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided, 
                                           UserId _userId, boolean _shouldAddPlaceholders, List _activeAndAllowedPrinterList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPopulatePrinterComboList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher method invoked when the printer list is populated with all active and allowed printers per report and user.
    /// This is an extension point where for example, you can add printer placeholders to this list.
    /// </summary>
    /// <param name = "_reportId">Report ID.</param>
    /// <param name = "_reportType">Print management document type. Important when posting a Print management report, because then Report ID might be unknown.</param>
    /// <param name = "_reportTypeProvided">Is Print management document type provided.</param>
    /// <param name = "_userId">User ID</param>
    /// <param name = "_shouldAddPlaceholders">Should printer placeholders be added</param>
    /// <param name = "_activeAndAllowedPrinterList">Active and allowed printer list for the given report/report type and user</param>
    public void onPopulatePrinterComboList(DocReportId _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided, 
                                           UserId _userId, boolean _shouldAddPlaceholders, List _activeAndAllowedPrinterList)
    {
        try
        {
            this.populatePrinterComboList(_reportId, _reportType, _reportTypeProvided, _userId, _shouldAddPlaceholders, _activeAndAllowedPrinterList);
        }
        // Don't throw any exception.
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), 'Error occurred in the populatePrinterComboList() delegate method', false);
        }
        catch
        {
            DocGlobalHelper::handleError('Error occurred in the populatePrinterComboList() delegate method', true, funcName(), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReportContent</Name>
				<Source><![CDATA[
    /*-------------------------------------------------------------*/
    /*             DocOutputManager                                */
    /*-------------------------------------------------------------*/
    /****************** GENERATE REPORT CONTENT ******************/
    
    /// <summary>
    /// Delegate for generating report content, this is the point after the report is generated.
    /// This delegate is used for the Screen, File, Email and Archive print destinations.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void generateReportContent(DocPrintReportSettings _printReportSettings,
                                        DocPrintedReport _printedReport,
                                        DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGenerateReportContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for generating report content, this is the point after the report is generated.
    /// This method is used for the Screen, File, Email and Archive print destinations.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onGenerateReportContent(DocPrintReportSettings _printReportSettings,
                                                         DocPrintedReport _printedReport)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.generateReportContent(_printReportSettings, _printedReport, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tranformReportXmlOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for generating report content in XML output format, invoked only for Docentric XML output fomrat.
    /// This method is used with the File and Email print destinations if a Docentric template is selected.
    /// Apply data transformation to _outputXmlStr (string) or _outputXmlBytes (System.Byte[])
    /// and store the resulting System.Byte[] into _eventHandlerResult.result().
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_outputXmlStr">Report data source as a string containing output XML</param>
    /// <param name = "_outputXmlBytes">Report data source as a byte array containing output XML</param>
    /// <param name = "_eventHandlerResult">Event handler result</param>
    delegate void tranformReportXmlOutput(DocPrintReportSettings _printReportSettings,
                                          str _outputXmlStr,
                                          System.Byte[] _outputXmlBytes,
                                          DocEventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTranformReportXmlOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for generating report content in XML output format, invoked only for Docentric XML output fomrat.
    /// This method is used with the File and Email print destinations if a Docentric template is selected.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_outputXmlBytes">Report data source as a byte array containing output XML</param>
    /// <returns>Transformed XML as a byte array if a transformation is applied, otherwise _outputXmlBytes</returns>
    public System.Byte[] onTranformReportXmlOutput(DocPrintReportSettings _printReportSettings, System.Byte[] _outputXmlBytes)
    {
        DocEventHandlerResult eventHandlerResult = new DocEventHandlerResult();
        eventHandlerResult.result(_outputXmlBytes);

        try
        {
            this.tranformReportXmlOutput(_printReportSettings, _printReportSettings.parmXmlDataSourceStr(), _outputXmlBytes, eventHandlerResult);
            if (eventHandlerResult.result().GetType().get_Name() != 'Byte[]')
            {
                DocGlobalHelper::handleException(funcName(), 'eventHandlerResult.result() does not contain an object of type System.Byte[]');
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), 'Error occurred in the tranformReportXmlOutput() delegate method');
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), 'Error occurred in the tranformReportXmlOutput() delegate method');
        }

        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToMemoryBegin</Name>
				<Source><![CDATA[
    /****************** MEMORY ******************/
    /// <summary>
    /// Delegate for printing report to memory, this is the point after the printing report to memory begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_memoryPrintDestSettings">Memory print destination settings</param>
    /// <param name = "_memoryExecutionInfo">Print report to memory execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToMemoryBegin(DocPrintReportSettings _printReportSettings,
                                     DocPrintDestSettingsMemory _memoryPrintDestSettings,
                                     DocPrintReportToMemoryExecutionInfo _memoryExecutionInfo,
                                     DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToMemoryBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to memory, this is the point after the printing report to memory begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_memoryPrintDestSettings">Memory print destination settings</param>
    /// <param name = "_memoryExecutionInfo">Print report to memory execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToMemoryBegin(DocPrintReportSettings _printReportSettings,
                                                      DocPrintDestSettingsMemory _memoryPrintDestSettings,
                                                      DocPrintReportToMemoryExecutionInfo _memoryExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToMemoryBegin(_printReportSettings, _memoryPrintDestSettings, _memoryExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToMemoryEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to memory, this is the point after the printing report to memory is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_memoryPrintDestSettings">Memory print destination settings</param>
    /// <param name = "_memoryExecutionInfo">Print report to memory execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToMemoryEnd(DocPrintReportSettings _printReportSettings,
                                   DocPrintDestSettingsMemory _memoryPrintDestSettings,
                                   DocPrintReportToMemoryExecutionInfo _memoryExecutionInfo,
                                   DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToMemoryEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to memory, this is the point after the printing report to memory is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_memoryPrintDestSettings">Memory print destination settings</param>
    /// <param name = "_memoryExecutionInfo">Print report to memory execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToMemoryEnd(DocPrintReportSettings _printReportSettings,
                                                    DocPrintDestSettingsMemory _memoryPrintDestSettings,
                                                    DocPrintReportToMemoryExecutionInfo _memoryExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToMemoryEnd(_printReportSettings, _memoryPrintDestSettings, _memoryExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToArchiveBegin</Name>
				<Source><![CDATA[
    /****************** ARCHIVE ******************/
    /// <summary>
    /// Delegate for printing report to archive, this is the point after the printing report to archive begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_archiveExecutionInfo">Print report to archive execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToArchiveBegin(DocPrintReportSettings _printReportSettings,
                                      DocPrintReportToArchiveExecutionInfo _archiveExecutionInfo,
                                      DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToArchiveBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to archive, this is the point after the printing report to archive begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_archiveExecutionInfo">Print report to archive execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToArchiveBegin(DocPrintReportSettings _printReportSettings, DocPrintReportToArchiveExecutionInfo _archiveExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToArchiveBegin(_printReportSettings, _archiveExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToArchiveEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to archive, this is the point after the printing report to archive is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_archiveExecutionInfo">Print report to archive execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToArchiveEnd(DocPrintReportSettings _printReportSettings,
                                    DocPrintReportToArchiveExecutionInfo _archiveExecutionInfo,
                                    DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToArchiveEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to archive, this is the point after the printing report to archive is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_archiveExecutionInfo">Print report to archive execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToArchiveEnd(DocPrintReportSettings _printReportSettings,
                                                     DocPrintReportToArchiveExecutionInfo _archiveExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToArchiveEnd(_printReportSettings, _archiveExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToArchiveChangeArchiveFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to archive, this is the point after the archive filename is resolved.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToArchiveChangeArchiveFilename(DocPrintReportSettings _printReportSettings,
                                                      DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToArchiveChangeArchiveFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to archive, this is the point after the arhive filename is resolved.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_archiveFilename">Resolved archive filename. The new name should be in the form 'NewFilename.pdf'.</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToArchiveChangeArchiveFilename(DocPrintReportSettings _printReportSettings,
                                                                       str _archiveFilename)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        result.result(_archiveFilename);
        
        this.printToArchiveChangeArchiveFilename(_printReportSettings, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToArchiveChangeArchiveDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to archive, this is the point after the archive description is resolved.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToArchiveChangeArchiveDescription(DocPrintReportSettings _printReportSettings,
                                                         DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToArchiveChangeArchiveDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to archive, this is the point after the arhive description is resolved.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_archiveDescription">Resolved archive description.</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToArchiveChangeArchiveDescription(DocPrintReportSettings _printReportSettings,
                                                                          str _archiveDescription)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        result.result(_archiveDescription);
        
        this.printToArchiveChangeArchiveDescription(_printReportSettings, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToPrintArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving report to archive, this is the point after Docentric's extension fields
    /// of Print Archive are filled and before they are saved to the database.
    /// </summary>
    /// <param name = "_printJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive.</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void saveToPrintArchive(DocPrintJobHeader _printJobHeader, DocReportPrintArchiveInfo _printArchiveInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSaveToPrintArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving report to archive, this is the point after Docentric's extension fields
    /// of Print Archive are filled and before they are saved to the database.
    /// </summary>
    /// <param name = "_printJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive.</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onSaveToPrintArchive(DocPrintJobHeader _printJobHeader, DocReportPrintArchiveInfo _printArchiveInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        this.saveToPrintArchive(_printJobHeader, _printArchiveInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToPrintArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate on before saving report to archive, this is the point where archiving can be done
    /// in a different way, and saving to the built-in Print archive can be skipped.
    /// </summary>
    /// <param name = "_reportContent">Report binary content.</param>
    /// <param name = "_archiveContract">The built-in archive contract.</param>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeSaveToPrintArchive(container _reportContent, SRSPrintArchiveContract _archiveContract,
                                           DocReportPrintArchiveInfo _printArchiveInfo, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToPrintArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate on before saving report to archive, this is the point where archiving can be done
    /// in a different way, and saving to the built-in Print archive can be skipped.
    /// </summary>
    /// <param name = "_reportContent">Report binary content.</param>
    /// <param name = "_archiveContract">The built-in archive contract.</param>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToPrintArchive(container _reportContent, SRSPrintArchiveContract _archiveContract, DocReportPrintArchiveInfo _printArchiveInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        this.beforeSaveToPrintArchive(_reportContent, _archiveContract, _printArchiveInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSaveToPrintArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate after saving report to the built-in Print archive, this is the point where additional archiving can be done.
    /// </summary>
    /// <param name = "_printJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_reportContent">Report binary content.</param>
    /// <param name = "_archiveContract">The built-in archive contract.</param>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void afterSaveToPrintArchive(DocPrintJobHeader _printJobHeader, container _reportContent,
                                          SRSPrintArchiveContract _archiveContract, DocReportPrintArchiveInfo _printArchiveInfo,
                                          DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAfterSaveToPrintArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate after saving report to the built-in Print archive, this is the point where additional archiving can be done.
    /// </summary>
    /// <param name = "_printJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_reportContent">Report binary content.</param>
    /// <param name = "_archiveContract">The built-in archive contract.</param>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onAfterSaveToPrintArchive(DocPrintJobHeader _printJobHeader, container _reportContent,
                                                           SRSPrintArchiveContract _archiveContract, DocReportPrintArchiveInfo _printArchiveInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        this.afterSaveToPrintArchive(_printJobHeader, _reportContent, _archiveContract, _printArchiveInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToPAReportInOriginalFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate on before saving the report in its original output format to archive, this is the point where archiving can be done
    /// in a different way, and/or saving to the built-in Print archive can be skipped.
    /// </summary>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <param name = "_docPrintJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_printJobDescription">Print archive description</param>
    /// <param name = "_archiveFileName">Print archive filename</param>
    /// <param name = "_result">he handler result that can break the execution flow.</param>
    delegate void beforeSaveToPAReportInOriginalFormat(DocReportPrintArchiveInfo _printArchiveInfo, DocPrintJobHeader _docPrintJobHeader,
                                                       str _printJobDescription, str _archiveFileName, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToPAReportInOriginalFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate on before saving the report in its original output format to archive, this is the point where archiving can be done
    /// in a different way, and/or saving to the built-in Print archive can be skipped.
    /// </summary>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <param name = "_docPrintJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_printJobDescription">Print archive description</param>
    /// <param name = "_archiveFileName">Print archive filename</param>
    /// <returns>he handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToPAReportInOriginalFormat(DocReportPrintArchiveInfo _printArchiveInfo, DocPrintJobHeader _docPrintJobHeader,
                                                                        str _printJobDescription, str _archiveFileName)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        this.beforeSaveToPAReportInOriginalFormat(_printArchiveInfo, _docPrintJobHeader, _printJobDescription, _archiveFileName, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToPAAdditionalEmailAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate on before saving the additional email attachments to archive, this is the point where archiving can be done
    /// in a different way, and/or saving to the built-in Print archive can be skipped.
    /// </summary>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <param name = "_docPrintJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_printJobDescription">Print archive description</param>
    /// <param name = "_archiveFileName">Print archive filename</param>
    /// <param name = "_result">he handler result that can break the execution flow.</param>
    delegate void beforeSaveToPAAdditionalEmailAttachments(DocReportPrintArchiveInfo _printArchiveInfo, DocPrintJobHeader _docPrintJobHeader,
                                                           str _printJobDescription, str _archiveFileName, DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToPAAdditionalEmailAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate on before saving the additional email attachments to archive, this is the point where archiving can be done
    /// in a different way, and/or saving to the built-in Print archive can be skipped.
    /// </summary>
    /// <param name = "_printArchiveInfo">Report execution info used when saving to Print archive, including Docentric's archive contract.</param>
    /// <param name = "_docPrintJobHeader">Extended Print Archive table buffer.</param>
    /// <param name = "_printJobDescription">Print archive description</param>
    /// <param name = "_archiveFileName">Print archive filename</param>
    /// <returns>he handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToPAAdditionalEmailAttachments(DocReportPrintArchiveInfo _printArchiveInfo, DocPrintJobHeader _docPrintJobHeader,
                                                                            str _printJobDescription, str _archiveFileName)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);

        this.beforeSaveToPAAdditionalEmailAttachments(_printArchiveInfo, _docPrintJobHeader, _printJobDescription, _archiveFileName, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToScreenBegin</Name>
				<Source><![CDATA[
    /****************** SCREEN ******************/
    /// <summary>
    /// Delegate for printing report to screen, this is the point after the printing report to screen begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_screenExecutionInfo">Print report to screen execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToScreenBegin(DocPrintReportSettings _printReportSettings,
                                     DocPrintReportToScreenExecutionInfo _screenExecutionInfo,
                                     DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToScreenBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to screen, this is the point after the printing report to screen begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_screenExecutionInfo">Print report to screen execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToScreenBegin(DocPrintReportSettings _printReportSettings, DocPrintReportToScreenExecutionInfo _screenExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToScreenBegin(_printReportSettings, _screenExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToScreenEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to screen, this is the point after the printing report to screen is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_screenExecutionInfo">Print report to screen execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToScreenEnd(DocPrintReportSettings _printReportSettings,
                                   DocPrintReportToScreenExecutionInfo _screenExecutionInfo,
                                   DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToScreenEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to screen, this is the point after the printing report to screen is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_screenExecutionInfo">Print report to screen execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToScreenEnd(DocPrintReportSettings _printReportSettings,
                                                    DocPrintReportToScreenExecutionInfo _screenExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToScreenEnd(_printReportSettings, _screenExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToPrinterBegin</Name>
				<Source><![CDATA[
    /****************** PRINTER ******************/
    /// <summary>
    /// Delegate for printing report to printer, this is the point after the printing report to printer begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_printerExecutionInfo">Print report to printer execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToPrinterBegin(DocPrintReportSettings _printReportSettings,
                                      DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                      DocPrintReportToPrinterExecutionInfo _printerExecutionInfo,
                                      DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToPrinterBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to printer, this is the point after the printing report to printer begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_printerExecutionInfo">Print report to printer execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToPrinterBegin(DocPrintReportSettings _printReportSettings,
                                                       DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                       DocPrintReportToPrinterExecutionInfo _printerExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToPrinterBegin(_printReportSettings, _printerPrintDestSettings, _printerExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToPrinterResolvePrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to printer, this is the point before the printer is resolved.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_printerExecutionInfo">Print report to printer execution info</param>
    /// <param name = "_selectedPrinterName">The selected printer name</param>
    /// <param name = "_selectedPrinterPath">The selected printer path</param>
    /// <param name = "_result">The handler result that contains a new selected printer name and can break the execution flow</param>
    [SysObsoleteAttribute('Use the DocReportRunDelegates.printToPrinterBegin() delegate instead.', false, 19\08\2021)]
    delegate void printToPrinterResolvePrinter(DocPrintReportSettings _printReportSettings,
                                               DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                               DocPrintReportToPrinterExecutionInfo _printerExecutionInfo,
                                               str _selectedPrinterName,
                                               str _selectedPrinterPath,
                                               DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printingToPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to printer, this is the point after the printing report to printer begins, printer name is resolved and printer settings are validated.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_printerExecutionInfo">Print report to printer execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printingToPrinter(DocPrintReportSettings _printReportSettings,
                                    DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                    DocPrintReportToPrinterExecutionInfo _printerExecutionInfo,
                                    DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintingToPrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to printer, this is the point after the printing report to printer begins, printer name is resolved and printer settings are validated.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_printerExecutionInfo">Print report to printer execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintingToPrinter(DocPrintReportSettings _printReportSettings,
                                                     DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                     DocPrintReportToPrinterExecutionInfo _printerExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printingToPrinter(_printReportSettings, _printerPrintDestSettings, _printerExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToPrinterEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to printer, this is the point after the printing report to printer is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_printerExecutionInfo">Print report to printer execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToPrinterEnd(DocPrintReportSettings _printReportSettings,
                                    DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                    DocPrintReportToPrinterExecutionInfo _printerExecutionInfo,
                                    DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToPrinterEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to printer, this is the point after the printing report to printer is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_printerPrintDestSettings">Printer print destination settings</param>
    /// <param name = "_printerExecutionInfo">Print report to printer execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToPrinterEnd(DocPrintReportSettings _printReportSettings,
                                                     DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                     DocPrintReportToPrinterExecutionInfo _printerExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToPrinterEnd(_printReportSettings, _printerPrintDestSettings, _printerExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToFileBegin</Name>
				<Source><![CDATA[
    /****************** FILE ******************/
   
    /// <summary>
    /// Delegate for printing report to file, this is the point after the printing report to file begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToFileBegin(DocPrintReportSettings _printReportSettings,
                                   DocPrintDestSettingsFile _filePrintDestSettings,
                                   DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                   DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToFileBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to file, this is the point after the printing report to file begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToFileBegin(DocPrintReportSettings _printReportSettings,
                                                    DocPrintDestSettingsFile _filePrintDestSettings,
                                                    DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToFileBegin(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToFileResolveOutputFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to file, this is the point after the report output filename is resolved.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_resolvedOutputFilename">Resolved report output filename</param>
    /// <param name = "_result">The handler result that contains a new output filename and can break the execution flow.</param>
    [SysObsoleteAttribute('Use the DocReportRunDelegates.printingToFile() delegate instead.', false, 19\08\2021)]
    delegate void printToFileResolveOutputFilename(DocPrintReportSettings _printReportSettings,
                                                   DocPrintDestSettingsFile _filePrintDestSettings,
                                                   str _resolvedOutputFilename,
                                                   DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printingToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to File, this is the point after the printing report to File begins, output filename is resolved and the file print settings are validated.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printingToFile(DocPrintReportSettings _printReportSettings,
                                 DocPrintDestSettingsFile _filePrintDestSettings,
                                 DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                 DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintingToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to File, this is the point after the printing report to File begins, output filename is resolved and the file print settings are validated.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintingToFile(DocPrintReportSettings _printReportSettings,
                                                  DocPrintDestSettingsFile _filePrintDestSettings,
                                                  DocPrintReportToFileExecutionInfo _fileExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printingToFile(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToFileSendFileToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to file, this is the point before generated file is being sent to user.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_resolvedOutputFilename">Resolved report output filename</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToFileSendFileToUser(DocPrintReportSettings _printReportSettings,
                                            DocPrintDestSettingsFile _filePrintDestSettings,
                                            str _resolvedOutputFilename,
                                            DocPrintedReport _printedReport,
                                            DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToFileSendFileToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to file, this is the point before generated file is being sent to user.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_resolvedOutputFilename">Resolved report output filename</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToFileSendFileToUser(DocPrintReportSettings _printReportSettings,
                                                             DocPrintDestSettingsFile _filePrintDestSettings,
                                                             str _resolvedOutputFilename,
                                                             DocPrintedReport _printedReport)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToFileSendFileToUser(_printReportSettings, _filePrintDestSettings, _resolvedOutputFilename, _printedReport, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToFileEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to file, this is the point after the printing report to file is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToFileEnd(DocPrintReportSettings _printReportSettings,
                                 DocPrintDestSettingsFile _filePrintDestSettings,
                                 DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                 DocPrintedReport _printedReport,
                                 DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToFileEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to file, this is the point after the printing report to file is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToFileEnd(DocPrintReportSettings _printReportSettings,
                                                  DocPrintDestSettingsFile _filePrintDestSettings,
                                                  DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                                  DocPrintedReport _printedReport)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToFileEnd(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to SharePoint, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeSaveToSharePoint(DocPrintReportSettings _printReportSettings,
                                         DocPrintDestSettingsFile _filePrintDestSettings,
                                         DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                         DocPrintedReport _printedReport,
                                         str _outputFilename,
                                         DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to SharePoint, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToSharePoint(DocPrintReportSettings _printReportSettings,
                                                          DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                                          DocPrintedReport _printedReport,
                                                          str _outputFilename)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.beforeSaveToSharePoint(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSaveToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to SharePoint, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    delegate void afterSaveToSharePoint(DocPrintReportSettings _printReportSettings,
                                        DocPrintDestSettingsFile _filePrintDestSettings,
                                        DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                        DocPrintedReport _printedReport,
                                        str _outputFilename,
                                        boolean _isFileSuccessfullySaved)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAfterSaveToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to SharePoint, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    public void onAfterSaveToSharePoint(DocPrintReportSettings _printReportSettings,
                                        DocPrintDestSettingsFile _filePrintDestSettings,
                                        DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                        DocPrintedReport _printedReport,
                                        str _outputFilename,
                                        boolean _isFileSuccessfullySaved)
    {
        this.afterSaveToSharePoint(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, _isFileSuccessfullySaved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to Attachments, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_attachmentName">Attachment name</param>
    /// <param name = "_saveToAttachmentsRecord">Save to attachments record</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeSaveToAttachments(DocPrintReportSettings _printReportSettings,
                                          DocPrintDestSettingsFile _filePrintDestSettings,
                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                          DocPrintedReport _printedReport,
                                          str _outputFilename,
                                          str _attachmentName,
                                          Common _saveToAttachmentsRecord,
                                          DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to Attachments, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_attachmentName">Attachment name</param>
    /// <param name = "_saveToAttachmentsRecord">Save to attachments record</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToAttachments(DocPrintReportSettings _printReportSettings,
                                                           DocPrintDestSettingsFile _filePrintDestSettings,
                                                           DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                                           DocPrintedReport _printedReport,
                                                           str _outputFilename,
                                                           str _attachmentName,
                                                           Common _saveToAttachmentsRecord)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.beforeSaveToAttachments(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport,
                                     _outputFilename, _attachmentName, _saveToAttachmentsRecord, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSaveToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to Attachments, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_attachmentName">Attachment name</param>
    /// <param name = "_saveToAttachmentsRecord">Save to attachments record</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    delegate void afterSaveToAttachments(DocPrintReportSettings _printReportSettings,
                                         DocPrintDestSettingsFile _filePrintDestSettings,
                                         DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                         DocPrintedReport _printedReport,
                                         str _outputFilename,
                                         str _attachmentName,
                                         Common _saveToAttachmentsRecord,
                                         boolean _isFileSuccessfullySaved)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAfterSaveToAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to Attachments, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_attachmentName">Attachment name</param>
    /// <param name = "_saveToAttachmentsRecord">Save to attachments record</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    public void onAfterSaveToAttachments(DocPrintReportSettings _printReportSettings,
                                         DocPrintDestSettingsFile _filePrintDestSettings,
                                         DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                         DocPrintedReport _printedReport,
                                         str _outputFilename,
                                         str _attachmentName,
                                         Common _saveToAttachmentsRecord,
                                         boolean _isFileSuccessfullySaved)
    {
        this.afterSaveToAttachments(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport,
                                    _outputFilename, _attachmentName, _saveToAttachmentsRecord, _isFileSuccessfullySaved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToAzureStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to AzureStorage, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeSaveToAzureStorage(DocPrintReportSettings _printReportSettings,
                                           DocPrintDestSettingsFile _filePrintDestSettings,
                                           DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                           DocPrintedReport _printedReport,
                                           str _outputFilename,
                                           DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToAzureStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to AzureStorage, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToAzureStorage(DocPrintReportSettings _printReportSettings,
                                                            DocPrintDestSettingsFile _filePrintDestSettings,
                                                            DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                                            DocPrintedReport _printedReport,
                                                            str _outputFilename)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.beforeSaveToAzureStorage(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSaveToAzureStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to AzureStorage, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    delegate void afterSaveToAzureStorage(DocPrintReportSettings _printReportSettings,
                                          DocPrintDestSettingsFile _filePrintDestSettings,
                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                          DocPrintedReport _printedReport,
                                          str _outputFilename,
                                          boolean _isFileSuccessfullySaved)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAfterSaveToAzureStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to AzureStorage, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    public void onAfterSaveToAzureStorage(DocPrintReportSettings _printReportSettings,
                                          DocPrintDestSettingsFile _filePrintDestSettings,
                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                          DocPrintedReport _printedReport,
                                          str _outputFilename,
                                          boolean _isFileSuccessfullySaved)
    {
        this.afterSaveToAzureStorage(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, _isFileSuccessfullySaved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToAzureFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to AzureFiles, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeSaveToAzureFiles(DocPrintReportSettings _printReportSettings,
                                         DocPrintDestSettingsFile _filePrintDestSettings,
                                         DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                         DocPrintedReport _printedReport,
                                         str _outputFilename,
                                         DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToAzureFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to AzureFiles, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToAzureFiles(DocPrintReportSettings _printReportSettings,
                                                          DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                                          DocPrintedReport _printedReport,
                                                          str _outputFilename)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.beforeSaveToAzureFiles(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSaveToAzureFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to AzureFiles, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    delegate void afterSaveToAzureFiles(DocPrintReportSettings _printReportSettings,
                                        DocPrintDestSettingsFile _filePrintDestSettings,
                                        DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                        DocPrintedReport _printedReport,
                                        str _outputFilename,
                                        boolean _isFileSuccessfullySaved)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAfterSaveToAzureFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to AzureFiles, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    public void onAfterSaveToAzureFiles(DocPrintReportSettings _printReportSettings,
                                        DocPrintDestSettingsFile _filePrintDestSettings,
                                        DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                        DocPrintedReport _printedReport,
                                        str _outputFilename,
                                        boolean _isFileSuccessfullySaved)
    {
        this.afterSaveToAzureFiles(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, _isFileSuccessfullySaved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToFileSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to FileSystem, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeSaveToFileSystem(DocPrintReportSettings _printReportSettings,
                                         DocPrintDestSettingsFile _filePrintDestSettings,
                                         DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                         DocPrintedReport _printedReport,
                                         str _outputFilename,
                                         DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToFileSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to FileSystem, this is the point before saving the file is started.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToFileSystem(DocPrintReportSettings _printReportSettings,
                                                          DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                                          DocPrintedReport _printedReport,
                                                          str _outputFilename)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.beforeSaveToFileSystem(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSaveToFileSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for saving reports to FileSystem, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    delegate void afterSaveToFileSystem(DocPrintReportSettings _printReportSettings,
                                        DocPrintDestSettingsFile _filePrintDestSettings,
                                        DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                        DocPrintedReport _printedReport,
                                        str _outputFilename,
                                        boolean _isFileSuccessfullySaved)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAfterSaveToFileSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for saving reports to FileSystem, this is the point after saving the file is completed (successfully or unsuccessfully).
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_filePrintDestSettings">File print destination settings</param>
    /// <param name = "_fileExecutionInfo">Print report to file execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_outputFilename">Output filename</param>
    /// <param name = "_isFileSuccessfullySaved">Is the output file successfully saved</param>
    public void onAfterSaveToFileSystem(DocPrintReportSettings _printReportSettings,
                                        DocPrintDestSettingsFile _filePrintDestSettings,
                                        DocPrintReportToFileExecutionInfo _fileExecutionInfo,
                                        DocPrintedReport _printedReport,
                                        str _outputFilename,
                                        boolean _isFileSuccessfullySaved)
    {
        this.afterSaveToFileSystem(_printReportSettings, _filePrintDestSettings, _fileExecutionInfo, _printedReport, _outputFilename, _isFileSuccessfullySaved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToEmailBegin</Name>
				<Source><![CDATA[
    /****************** EMAIL ******************/
  
    /// <summary>
    /// Delegate for printing report to email, this is the point after the printing report to email begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToEmailBegin(DocPrintReportSettings _printReportSettings,
                                    DocPrintDestSettingsEmail _emailPrintDestSettings,
                                    DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                    DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToEmailBegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to email, this is the point after the printing report to email begins.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToEmailBegin(DocPrintReportSettings _printReportSettings,
                                                     DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                     DocPrintReportToEmailExecutionInfo _emailExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToEmailBegin(_printReportSettings, _emailPrintDestSettings, _emailExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printingToEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to Email, this is the point after the printing report to Email begins and the email print settings are validated.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printingToEmail(DocPrintReportSettings _printReportSettings,
                                  DocPrintDestSettingsEmail _emailPrintDestSettings,
                                  DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                  DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintingToEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to Email, this is the point after the printing report to Email begins and the email print settings are validated.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintingToEmail(DocPrintReportSettings _printReportSettings,
                                                   DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                   DocPrintReportToEmailExecutionInfo _emailExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printingToEmail(_printReportSettings, _emailPrintDestSettings, _emailExecutionInfo, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeEmailMessageCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to email, this is the point before the mail message has been created.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_printedReport">Printed report content that is the email attachment</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeEmailMessageCreated(DocPrintReportSettings _printReportSettings,
                                            DocPrintDestSettingsEmail _emailPrintDestSettings,
                                            DocPrintedReport _printedReport,
                                            DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeEmailMessageCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to email, this is the point before the mail message has been created.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_printedReport">Printed report content that is the email attachment</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeEmailMessageCreated(DocPrintReportSettings _printReportSettings,
                                                             DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                             DocPrintedReport _printedReport)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.beforeEmailMessageCreated(_printReportSettings, _emailPrintDestSettings, _printedReport, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailMessageCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to email, this is the point after the mail message has been created.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_senderEmailAccountDisplayName">Sender display name</param>
    /// <param name = "_printedReport">Printed report content that is the email attachment</param>
    /// <param name = "_mailPriority">Email message priority</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void emailMessageCreated(System.Net.Mail.MailMessage _mailMessage,
                                      DocPrintReportSettings _printReportSettings,
                                      DocPrintDestSettingsEmail _emailPrintDestSettings,
                                      str _senderEmailAccountDisplayName,
                                      DocPrintedReport _printedReport,
                                      eMailPriority _mailPriority,
                                      DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEmailMessageCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to email, this is the point after the mail message has been created.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_senderEmailAccountDisplayName">Sender display name</param>
    /// <param name = "_printedReport">Printed report content that is the email attachment</param>
    /// <param name = "_mailPriority">Email message priority</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onEmailMessageCreated(System.Net.Mail.MailMessage _mailMessage,
                                                       DocPrintReportSettings _printReportSettings,
                                                       DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                       str _senderEmailAccountDisplayName,
                                                       DocPrintedReport _printedReport,
                                                       eMailPriority _mailPriority)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.emailMessageCreated(_mailMessage, _printReportSettings, _emailPrintDestSettings, _senderEmailAccountDisplayName, _printedReport, _mailPriority, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeDownloadEmailMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to email, this is the point before the mail message is downloaded.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_printedReport">Printed report content that is the email attachment</param>
    /// <param name = "_result">Change result.result() to contain the filename without extension of the downloading email message (eml file). By default, it contains the mail message subject.</param>
    delegate void beforeDownloadEmailMessage(System.Net.Mail.MailMessage _mailMessage,
                                             DocPrintReportSettings _printReportSettings,
                                             DocPrintDestSettingsEmail _emailPrintDestSettings,
                                             DocPrintedReport _printedReport,
                                             DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeDownloadEmailMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to email, this is the point before the mail message is downloaded.
    /// </summary>
    /// <param name = "_mailMessage">Mail message available for modifying</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_printedReport">Printed report content that is the email attachment</param>
    /// <returns>The handler result.result() contains the filename without extension of the downloading email message (eml file).</returns>
    public DocEventHandlerResult onBeforeDownloadEmailMessage(System.Net.Mail.MailMessage _mailMessage,
                                                              DocPrintReportSettings _printReportSettings,
                                                              DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                              DocPrintedReport _printedReport)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.result(_mailMessage.Subject);
        
        this.beforeDownloadEmailMessage(_mailMessage, _printReportSettings, _emailPrintDestSettings, _printedReport, result);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeSaveToOutgoingEmailTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for emailing reports using Email processor, this is the point before the mail message with the attached report to SysOutgoingEmailTable is saved.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The SysOutgoingEmailTable record</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void beforeSaveToOutgoingEmailTable(SysOutgoingEmailTable _outgoingEmailTable,
                                                 DocPrintReportSettings _printReportSettings,
                                                 DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                 DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                                 DocPrintedReport _printedReport,
                                                 DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBeforeSaveToOutgoingEmailTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for emailing reports using Email processor, this is the point before the mail message with the attached report to SysOutgoingEmailTable is saved.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The SysOutgoingEmailTable record</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onBeforeSaveToOutgoingEmailTable(SysOutgoingEmailTable _outgoingEmailTable,
                                                                  DocPrintReportSettings _printReportSettings,
                                                                  DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                                  DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                                                  DocPrintedReport _printedReport)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.beforeSaveToOutgoingEmailTable(_outgoingEmailTable, _printReportSettings, _emailPrintDestSettings, _emailExecutionInfo, _printedReport, result);
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSaveToOutgoingEmailTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for emailing reports using Email processor, this is the point after the mail message with the attached report to SysOutgoingEmailTable is saved.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The SysOutgoingEmailTable record</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void afterSaveToOutgoingEmailTable(SysOutgoingEmailTable _outgoingEmailTable,
                                                DocPrintReportSettings _printReportSettings,
                                                DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                                DocPrintedReport _printedReport,
                                                DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAfterSaveToOutgoingEmailTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for emailing reports using Email processor, this is the point after the mail message with the attached report to SysOutgoingEmailTable is saved.
    /// </summary>
    /// <param name = "_outgoingEmailTable">The SysOutgoingEmailTable record</param>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onAfterSaveToOutgoingEmailTable(SysOutgoingEmailTable _outgoingEmailTable,
                                                                 DocPrintReportSettings _printReportSettings,
                                                                 DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                                 DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                                                 DocPrintedReport _printedReport)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.afterSaveToOutgoingEmailTable(_outgoingEmailTable, _printReportSettings, _emailPrintDestSettings, _emailExecutionInfo, _printedReport, result);
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToEmailEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for printing report to email, this is the point after the printing report to email is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <param name = "_printedReport">Printed report content</param>
    /// <param name = "_result">The handler result that can break the execution flow.</param>
    delegate void printToEmailEnd(DocPrintReportSettings _printReportSettings,
                                  DocPrintDestSettingsEmail _emailPrintDestSettings,
                                  DocPrintReportToEmailExecutionInfo _emailExecutionInfo,
                                  DocPrintedReport _printedReport,
                                  DocEventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintToEmailEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for printing report to email, this is the point after the printing report to email is completed.
    /// </summary>
    /// <param name = "_printReportSettings">Print report settings</param>
    /// <param name = "_emailPrintDestSettings">Email print destination settings</param>
    /// <param name = "_emailExecutionInfo">Print report to email execution info</param>
    /// <returns>The handler result that can break the execution flow.</returns>
    public DocEventHandlerResult onPrintToEmailEnd(DocPrintReportSettings _printReportSettings,
                                                   DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                   DocPrintReportToEmailExecutionInfo _emailExecutionInfo)
    {
        DocEventHandlerResult result = new DocEventHandlerResult();
        result.cancelExecution(false);
        
        this.printToEmailEnd(_printReportSettings, _emailPrintDestSettings, _emailExecutionInfo, _printReportSettings.parmPrintedReport(), result);
        
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>