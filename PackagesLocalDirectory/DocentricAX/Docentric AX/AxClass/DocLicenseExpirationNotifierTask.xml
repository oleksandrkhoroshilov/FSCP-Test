<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLicenseExpirationNotifierTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Automation task for the license subscription expiration notifier service.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.AX.Application.ProcessAutomationTask))]
[ExportMetadata(classStr(ProcessAutomationTask), classStr(DocLicenseExpirationNotifierTask))]
public final class DocLicenseExpirationNotifierTask extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether this process automation task is enabled in the system.
    /// </summary>
    /// <returns>True if the process automation is turned on for this task; otherwise false.</returns>
    [Hookable(false)]
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    /// <summary>
    /// The list of service actions that will be performed.
    /// </summary>
    /// <returns>A list of SysOperationController objects which will be executed by execution engine as batch job.</returns>
    [Hookable(false)]
    protected List getListOfWorkToBePerformed()
    {
        List tasks = new List(Types::Class);

        DocLicenseExpirationNotifier serviceController = DocLicenseExpirationNotifier::construct();

        ProcessScheduleWorkItem processScheduleWorkItemContract = serviceController.getDataContractObject() as ProcessScheduleWorkItem;
        processScheduleWorkItemContract.initializeFromScheduleWorkItem(this.parmProcessScheduleWorkItem());

        tasks.addEnd(serviceController);

        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the batch job caption that will be used by the batch job scheduled to execute this process.
    /// </summary>
    /// <returns>Batch caption that will be used for the batch job that will perform the task.</returns>
    [Hookable(false)]
    protected BatchCaption batchJobCaption()
    {
        return "@DocentricAX4:SendNoficationBeforeLicenseExpires";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>True if the batch task is retryable; otherwise false.</returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>