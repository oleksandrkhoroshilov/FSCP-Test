<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocAotResourceInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Docentric.AX.Reporting;
using Docentric.AX.Reporting.TemplateManagement;

/// <summary>
/// The class DocAotResourceInfocontains information about the AOT resource.
/// </summary>
public class DocAotResourceInfo
{
    private str m_resourceName;
    private str m_fileName;
    private str m_tags;
    private str m_reportId;
    private str m_dspClassName;
    private str m_reportGroupId;
    private str m_templateId;
    private str m_companyId;
    private str m_languageId;
    private str m_erModelMappingGuid;
    private str m_erModelMappingName;
    private str m_erDataModelGuid;
    private str m_erDataModelName;
    private str m_erSolutionGuid;
    private str m_erSolutionName;
    private str m_dataSourceType;
    private str m_skipLoadSystem;
    private str m_nextGen;
    private SysDictEnum dataSourceTypeEnum = new SysDictEnum(enumNum(DocTemplateDataSourceType));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file name.
    /// </summary>
    /// <returns>File name</returns>
    public str fileName()
    {
        return m_fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tags.
    /// </summary>
    /// <returns>Tags</returns>
    public str tags()
    {
        return m_tags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource name.
    /// </summary>
    /// <returns>Resource name</returns>
    public str resourceName()
    {
        return m_resourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report Id.
    /// </summary>
    /// <returns>Report Id</returns>
    public str reportId()
    {
        return m_reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dspClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DSP class name.
    /// </summary>
    /// <returns>DSP class name</returns>
    public str dspClassName()
    {
        return m_dspClassName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report group Id.
    /// </summary>
    /// <returns>Report group Id</returns>
    public str reportGroupId()
    {
        return m_reportGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the template Id.
    /// </summary>
    /// <returns>Template Id</returns>
    public str templateId()
    {
        return m_templateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company Id.
    /// </summary>
    /// <returns>Company Id</returns>
    public str companyId()
    {
        return m_companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the language Id.
    /// </summary>
    /// <returns>Language Id</returns>
    public str languageId()
    {
        return m_languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erModelMappingGuid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ER model mapping GUID.
    /// </summary>
    /// <returns>ER model mapping GUID</returns>
    public guid erModelMappingGuid()
    {
        return str2Guid(m_erModelMappingGuid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>erModelMappingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ER model mapping name.
    /// </summary>
    /// <returns>ER model mapping name</returns>
    public str erModelMappingName()
    {
        return m_erModelMappingName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erDataModelGuid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ER data model GUID.
    /// </summary>
    /// <returns>ER data model GUID</returns>
    public guid erDataModelGuid()
    {
        return str2Guid(m_erDataModelGuid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>erDataModelName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ER data model name.
    /// </summary>
    /// <returns>ER data model name</returns>
    public str erDataModelName()
    {
        return m_erDataModelName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erSolutionGuid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ER solution GUID.
    /// </summary>
    /// <returns>ER solution GUID</returns>
    public guid erSolutionGuid()
    {
        return str2Guid(m_erSolutionGuid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>erSolutionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ER solution name.
    /// </summary>
    /// <returns>ER solution name</returns>
    public str erSolutionName()
    {
        return m_erSolutionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source type.
    /// </summary>
    /// <returns>Data source type</returns>
    public DocTemplateDataSourceType dataSourceType()
    {
        if (m_dataSourceType == '')
        {
            // These are legacy templates, so they are SSRS based for sure.
            return DocTemplateDataSourceType::SSRS;
        }

        return dataSourceTypeEnum.symbol2Value(m_dataSourceType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLoadAsSystemTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the system template can be loaded from the AOT resources or not.
    /// </summary>
    /// <returns>True if the loading of the system template should be skipped; otherwise false</returns>
    public boolean skipLoadAsSystemTemplate()
    {
        // If the template is marked with the tag SkipLoadSystem=true, skip loading the template.
        if (this.skipLoadSystem())
        {
            return true;
        }

        // Skip loading ER based templates if CBD data sources are not enabled
        if (this.dataSourceType() == DocTemplateDataSourceType::ERDataModel && !DocParameters::find().EnableCbdDs)
        {
            return true;
        }

        // Get Docentric engine configured in Docentric AX parameters if the feature NextGen is enabled in Preview mode or released.
        DocDocentricEngine configuredDocentricEngine = DocConstantGlobal::defaultDocentricEngine();  // Currently: DocDocentricEngine::Standard
        if (DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewNextGen))
        {
            configuredDocentricEngine = DocParameters::find().DocentricEngine;
        }

        // If the template is marked with the tag NextGen=true, skip loading the template if Docentric Engine
        // configured in Docentric AX parameters is Standard (i.e. don't skip if it is NextGen or Both).
        if (this.nextGen())
        {
            return configuredDocentricEngine == DocDocentricEngine::Standard;
        }
        else
        {
            // If the template is XPath based, skip loading the template if Docentric Engine
            // configured in Docentric AX parameters is NextGen (i.e. don't skip if it is Standard or Both).
            return configuredDocentricEngine == DocDocentricEngine::NextGen;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLoadSystem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether to skip loading the system template.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean skipLoadSystem()
    {
        if (m_skipLoadSystem == 'true' || m_skipLoadSystem == 'yes')
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextGen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the system template is marked as NextGen.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean nextGen()
    {
        if (m_nextGen == 'true' || m_nextGen == 'yes')
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocAotResourceInfo class.
    /// </summary>
    /// <param name = "_resource">An instance of the AxResource class</param>
    /// <param name = "_resourceContent">A resource content as memory stream</param>
    /// <returns>An instance of the DocAotResourceInfo class</returns>
    public static DocAotResourceInfo construct(AxResource _resource, System.IO.MemoryStream _resourceContent)
    {
        if (_resource == null || _resourceContent == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameters _resource and/or _resourceContent are not set');
        }

        if (!TemplateHelper::IsTemplateDocument(_resourceContent))
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Resource (%1, filename: %2) is not a Docentric AX template', _resource.Name, _resource.FileName));
        }

        DocAotResourceInfo resourceInfo = new DocAotResourceInfo(_resource, _resourceContent);
        return resourceInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the new instance of the DocAotResourceInfo class.
    /// </summary>
    /// <param name = "_resource">An instance of the AxResource class</param>
    /// <param name = "_resourceContent">A resource content as memory stream</param>
    protected void new(AxResource _resource, System.IO.MemoryStream _resourceContent)
    {
        TemplateResourceTag trt;

        m_resourceName = _resource.Name;
        m_fileName = _resource.FileName;
        m_tags = _resource.Tags;
        
        try
        {
            // Infer from the template file itself.
            TemplateHelper::IsTemplateDocument(_resourceContent, byref m_reportId, byref m_reportGroupId, byref m_dspClassName,
                                               byref m_erModelMappingGuid, byref m_erModelMappingName,
                                               byref m_erDataModelGuid, byref m_erDataModelName,
                                               byref m_erSolutionGuid, byref m_erSolutionName,
                                               byref m_dataSourceType);

            // Infer from the Tags property.
            trt = new TemplateResourceTag(_resource.Tags);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt('Failed to construct DocAotResourceInfo object for the report (%1) and resource name (%2)', m_reportId, m_resourceName));
        }

        // Report ID.
        if (m_reportId == '')
        {
            // Legacy reports.
            m_reportId = trt.ReportId;
        }
        else
        {
            // Check if the ReportId is set in Tags, and warn if there is a discrepancy.
            if (trt.ReportId != '' && m_reportId != trt.ReportId)
            {
                DocGlobalHelper::handleWarning(
                    strFmt('Report ID (%1) inferred from the template file differs from Report ID (%2) set in the Tags property (%3) of the AOT resource (%4). Report ID (%5) is used.',
                           m_reportId, trt.ReportId, m_tags, m_resourceName, m_reportId));
            }
        }

        // Report Group ID.
        if (trt.ReportGroupId != '')
        {
            // If the report group is set in the Tags property, it takes precedence over the info which (might be) is embedded in the template.
            m_reportGroupId = trt.ReportGroupId;
        }
        
        // DSP class name.
        if (m_dspClassName == '')
        {
            // Legacy reports
            m_dspClassName = trt.DspClassName;
        }
        else
        {
            // Check if the DSP class is set in Tags, and warn if there is a discrepancy.
            if (trt.DspClassName != '' && m_dspClassName != trt.DspClassName)
            {
                DocGlobalHelper::handleWarning(
                    strFmt('DSP class name (%1) inferred from the template file differs from the DSP class name (%2) set in the Tags property (%3) of the AOT resource (%4). DSP class name (%5) is used. Report ID: %6.',
                           m_dspClassName, trt.DspClassName, m_tags, m_resourceName, m_dspClassName, m_reportId));
            }
        }

        // Template Id, Company ID, Language ID.
        m_templateId = trt.TemplateId;
        m_companyId = trt.CompanyId;
        m_languageId = trt.LanguageId;
        m_skipLoadSystem = trt.SkipLoadSystem;
        m_nextGen = trt.NextGen;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>