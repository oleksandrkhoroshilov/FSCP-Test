<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSharePointCredentials</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Storage.SharePoint.Common;
using Docentric.AX.Storage.SharePoint.Credentials;

/// <summary>
/// The DocSharePointCredentials class contains the information about the SharePoint credentials.
/// </summary>
public class DocSharePointCredentials
{
    private IDocSPCredentials spCredentials;
    private DocSharePointAuthorizationType spAuthorizationType;
    private DocSharePointRole spRole;
    private str spSiteUrl;
    private str spFolderPath;
    private UserId userId;
    private str extUserId;
    private DocSharePointUserName userName;
    private DocSharePointPassword password;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the new instance of the DocSharePointCredentials class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field values of an instance of the class in a string.
    /// </summary>
    /// <returns>The field values of an instance of the class in a string</returns>
    public str toString()
    {
        str credentials = strFmt("@DocentricAX4:SharePointCredentialsToString", enum2Str(spAuthorizationType));
        switch (spAuthorizationType)
        {
            case DocSharePointAuthorizationType::Integrated:
                credentials += ', ' + strFmt("@DocentricAX4:SharePointCredentialsIntegratedToString", userId, extUserId);
                break;
            case DocSharePointAuthorizationType::Online:
            case DocSharePointAuthorizationType::OnPremise:
                credentials += ', ' + strFmt("@DocentricAX4:SharePointCredentialsOnLineOnPremToString", userName);
                break;
        }

        return credentials;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSPCredentials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint credentials.
    /// </summary>
    /// <returns>The SharePoint credentials</returns>
    public IDocSPCredentials getSPCredentials()
    {
        return spCredentials;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSPCredentials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SharePoint crednetials.
    /// </summary>
    protected void setSPCredentials()
    {
        // SharePoint D365FO internal credentials
        spCredentials = null;

        try
        {
            switch (spAuthorizationType)
            {
                // SharePoint D365FO internal credentials
                case DocSharePointAuthorizationType::Integrated:
                    spCredentials = new DocSPDynamicsInternalCredentials(DocSPUrlHelper::GetFullUrl(spSiteUrl, spFolderPath), extUserId);
                    break;
                // SharePoint on line credentials
                case DocSharePointAuthorizationType::Online:
                    spCredentials = new DocSPOnlineCredentials(userName, password);
                    break;
                // SharePoint on premise credentials
                case DocSharePointAuthorizationType::OnPremise:
                    spCredentials = new DocSPOnPremiseCredentials(username, password);
                    break;
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), strFmt("@DocentricAX4:SharePointCredentialsCreateError", this.toString(), spSiteUrl), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSPCredentialsFromSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SharePoint credentials from the setup in the Docentric parameters.
    /// </summary>
    protected void setSPCredentialsFromSetup()
    {
        DocSharePointSecuritySettingsMap spSecuritySettingsMap = this.getSPExtendedCredentials();
        spAuthorizationType = spSecuritySettingsMap.SharePointAuthorizationType;

        switch (spAuthorizationType)
        {
            // SharePoint D365FO internal credentials
            case DocSharePointAuthorizationType::Integrated:
                switch (spRole)
                {
                    case DocSharePointRole::GeneralPurposeUser:
                        this.setUserId(curUserId());
                        break;
                    case DocSharePointRole::TemplateReader:
                        this.setUserId(spSecuritySettingsMap.SharePointUserReader ? spSecuritySettingsMap.SharePointUserReader : curUserId());
                        break;
                    case DocSharePointRole::TemplateWriter:
                        this.setUserId(spSecuritySettingsMap.SharePointUserWriter ? spSecuritySettingsMap.SharePointUserWriter : curUserId());
                        break;
                    case DocSharePointRole::ReportUser:
                        this.setUserId(spSecuritySettingsMap.SharePointReportUser ? spSecuritySettingsMap.SharePointReportUser : curUserId());
                        break;
                    case DocSharePointRole::BrowserUser:
                        this.setUserId(DocParameters::getSharePointBrowserUser());
                        break;
                }
                break;

            // SharePoint on line credentials
            case DocSharePointAuthorizationType::Online:
            // SharePoint on premise credentials
            case DocSharePointAuthorizationType::OnPremise:
                userName = spSecuritySettingsMap.SharePointUsername;
                password = spSecuritySettingsMap.getSharePointPassword();
                break;
        }

        this.setSPCredentials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSPExtendedCredentials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the DocSharePointSecuritySettings table and attempts to retrieve the credentials 
    /// to be used for SharePoint access. If the search is unsuccessful, the default credentials
    /// from the DocParameters table are returned.
    /// </summary>
    /// <returns>The DocSharePointSecuritySettings record if a match is found, otherwise the DocParameters record</returns>
    private DocSharePointSecuritySettingsMap getSPExtendedCredentials()
    {
        DocSharePointSecuritySettings spSecuritySettings;

        if (DocSharePointSecuritySettings::exist())
        {
            // If the SharePoint extended security is used, check the license. This feature cannot be used with Free Edition!
            // This call will throw an exception if the license is not found or if the license is invalid.
            DocLicenseMng::checkLicense(DocConstant::FeatureSharePointExtendedSecurity, strFmt("@DocentricAX4:SharePointCredentialsCreateError", this.toString(), spSiteUrl));
        }

        // Prepare the supplied site URL and folder path for comparison in the following form: hostname/site/folder
        str spHostName = DocSharePointHelperV3::getSharePointHostNameFromUrl(spSiteUrl);
        str spRelativePath = DocSPUrlHelper::GetServerRelativePath(spSiteUrl, spFolderPath);
        System.String inputUrl = DocSPUrlHelper::CombineUrlPath(spHostName, spRelativePath);

        // Get all enabled records for the specified hostname and arrange them by site and document library in descending order
        while select spSecuritySettings
            order by spSecuritySettings.SharePointSite desc, spSecuritySettings.SharePointDocumentLibrary desc
                where spSecuritySettings.SharePointServer == spHostName
                    && spSecuritySettings.IsEnabled == NoYes::Yes
        {
            // Combine the hostname, site and document library into a URL path for comparison in the following form: hostname/site/library
            System.String settingUrl = DocSPUrlHelper::CombineUrlPath(spSecuritySettings.SharePointServer, spSecuritySettings.SharePointSite, spSecuritySettings.SharePointDocumentLibrary);
            // Check if the setting URL is included in the input URL
            if (inputUrl.StartsWith(settingUrl))
            {
                // If a match is found, return the DocSharePointSecuritySettings record
                return spSecuritySettings;
            }
        }
        // If no match is found, return the DocParameters record (fallback to default credentials)
        return DocParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSPAuthorizationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint authorization type.
    /// </summary>
    /// <returns>The SharePoint authorization type</returns>
    public DocSharePointAuthorizationType getSPAuthorizationType()
    {
        return spAuthorizationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSPAuthorizationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SharePoint authorization type.
    /// </summary>
    /// <param name = "_spAuthorizationType">The SharePoint authorization type</param>
    protected void setSPAuthorizationType(DocSharePointAuthorizationType _spAuthorizationType)
    {
        spAuthorizationType = _spAuthorizationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSPRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint role.
    /// </summary>
    /// <returns>The SharePoint role</returns>
    public DocSharePointRole getSPRole()
    {
        return spRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSPRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SharePoint role.
    /// </summary>
    /// <param name = "_spRole">The SharePointRole</param>
    protected void setSPRole(DocSharePointRole _spRole)
    {
        spRole = _spRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSPSiteUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the site hostname or url.
    /// </summary>
    /// <param name = "_spSiteUrl">The site hostname or url</param>
    protected void setSPSiteUrl(str _spSiteUrl)
    {
        spSiteUrl = _spSiteUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSPFolderPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SharePoint folder path.
    /// </summary>
    /// <param name = "_spFolderPath">The SharePoint folder path</param>
    protected void setSPFolderPath(str _spFolderPath)
    {
        spFolderPath = _spFolderPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user Id.
    /// </summary>
    /// <returns>The user Id</returns>
    /// <remarks>
    /// The user Id is set when the SharePoint authorization type is set to Integrated.
    /// </remarks>
    public UserId getUserId()
    {
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user Id.
    /// </summary>
    /// <param name = "_userId">The user Id</param>
    /// <remarks>
    /// The user Id must be set when the SharePoint authorization type is set to Integrated.
    /// </remarks>
    protected void setUserId(UserId _userId)
    {
        userId = _userId;
        extUserId = DocGlobalHelper::getExternalId(userId);
        if (!extUserId)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:SharePointCredentialsExternalUserIdNotSetError", userId), false, '', true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the external user Id.
    /// </summary>
    /// <returns>The external user Id</returns>
    public str getExtUserId()
    {
        return extUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the username.
    /// </summary>
    /// <returns>The username</returns>
    /// <remarks>
    /// The username is set when the SharePoint authorization type is set to OnLine or On-Premises.
    /// </remarks>
    public DocSharePointUserName getUserName()
    {
        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the username.
    /// </summary>
    /// <param name = "_userName">The username</param>
    /// <remarks>
    /// The username must be set when the SharePoint authorization type is set to OnLine or On-Premises.
    /// </remarks>
    protected void setUserName(DocSharePointUserName _userName)
    {
        userName = _userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the password.
    /// </summary>
    /// <param name = "_password">The password</param>
    /// <remarks>
    /// The password must be set when the SharePoint authorization type is set to OnLine or On-Premises.
    /// </remarks>
    public void setPassword(DocSharePointPassword _password)
    {
        password = _password;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCredentialSettingsFromSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the credential settings from the setup in Docentric parameters.
    /// </summary>
    /// <returns>The DocSharePointSecuritySettingsMap record</returns>
    public DocSharePointSecuritySettingsMap getCredentialSettingsFromSetup()
    {
        return this.getSPExtendedCredentials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the DocSharePointCredentials class from the setup in Docentric parameters.
    /// </summary>
    /// <param name = "_spSiteUrl">The site hostname or url</param>
    /// <param name = "_spFolderPath">The absolute or relative SharePoint folder path</param>
    /// <param name = "_spRole">The SharePoint role</param>
    /// <returns>An instance of the DocSharePointCredentials class</returns>
    public static DocSharePointCredentials constructFromSetup(str _spSiteUrl, str _spFolderPath = '', DocSharePointRole _spRole = DocSharePointRole::GeneralPurposeUser)
    {
        DocSharePointCredentials docSharePointCredentials = new DocSharePointCredentials();
        docSharePointCredentials.setSPSiteUrl(_spSiteUrl);
        docSharePointCredentials.setSPFolderPath(DocSPUrlHelper::GetResourceAbsolutePath(_spSiteUrl, _spFolderPath).TrimStart('/'));
        docSharePointCredentials.setSPRole(_spRole);
        docSharePointCredentials.setSPCredentialsFromSetup();
        return docSharePointCredentials;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSPAuthTypeIntegrated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the DocSharePointCredentials class for integrated SharePoint.
    /// </summary>
    /// <param name = "_spSiteUrl">The site hostname or url</param>
    /// <param name = "_userId">User Id</param>
    /// <returns>An instance of the DocSharePointCredentials class</returns>
    public static DocSharePointCredentials constructForSPAuthTypeIntegrated(str _spSiteUrl, UserId _userId = curUserId())
    {
        DocSharePointCredentials docSharePointCredentials = new DocSharePointCredentials();
        docSharePointCredentials.setSPAuthorizationType(DocSharePointAuthorizationType::Integrated);
        docSharePointCredentials.setSPSiteUrl(_spSiteUrl);
        docSharePointCredentials.setUserId(_userId);
        docSharePointCredentials.setSPCredentials();
        return docSharePointCredentials;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSPAuthTypeOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the DocSharePointCredentials class for SharePoint Online.
    /// </summary>
    /// <param name = "_userName">The username</param>
    /// <param name = "_password">The password</param>
    /// <returns>An instance of the DocSharePointCredentials class</returns>
    public static DocSharePointCredentials constructForSPAuthTypeOnLine(DocSharePointUserName _userName, DocSharePointPassword _password)
    {
        DocSharePointCredentials docSharePointCredentials = new DocSharePointCredentials();
        docSharePointCredentials.setSPAuthorizationType(DocSharePointAuthorizationType::Online);
        docSharePointCredentials.setUserName(_userName);
        docSharePointCredentials.setPassword(_password);
        docSharePointCredentials.setSPCredentials();
        return docSharePointCredentials;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSPAuthTypeOnPremises</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the DocSharePointCredentials class for SharePoint On-Premises.
    /// </summary>
    /// <param name = "_userName">The username</param>
    /// <param name = "_password">The password</param>
    /// <returns>An instance of the DocSharePointCredentials class</returns>
    public static DocSharePointCredentials constructForSPAuthTypeOnPremises(DocSharePointUserName _userName, DocSharePointPassword _password)
    {
        DocSharePointCredentials docSharePointCredentials = new DocSharePointCredentials();
        docSharePointCredentials.setSPAuthorizationType(DocSharePointAuthorizationType::OnPremise);
        docSharePointCredentials.setUserName(_userName);
        docSharePointCredentials.setPassword(_password);
        docSharePointCredentials.setSPCredentials();
        return docSharePointCredentials;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>