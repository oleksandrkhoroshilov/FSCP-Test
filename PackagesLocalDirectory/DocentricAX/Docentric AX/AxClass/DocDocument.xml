<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;
using Docentric.AX.Documents.Pdf.Properties;
using Docentric.AX.Documents.Pdf.DigitalSignature;

public class DocDocument
{
    System.Byte[]                   documentContentByteArray;
    container                       documentContentContainer;
    DocFileFormat                   fileFormat = DocFileFormat::Unknown;
    System.Collections.IList        documentContentImageList;
    UnknownNoYes                    isPdfDocumentContentSigned = UnknownNoYes::Unknown;
    int                             numOfPages = 0;
    str                             filename;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentContentImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document content as image list.
    /// </summary>
    /// <returns>Document content image list</returns>
    public System.Collections.IList getDocumentContentImageList()
    {
        return documentContentImageList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentContentImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document content as image list.
    /// </summary>
    /// <param name = "_documentContentImageList">Document content image list</param>
    public void setDocumentContentImageList(System.Collections.IList _documentContentImageList)
    {
        documentContentImageList = _documentContentImageList;
        isPdfDocumentContentSigned = UnknownNoYes::No;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentContentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document content as memory stream.
    /// </summary>
    /// <param name = "_documentContentMemoryStream">Document content memory stream</param>
    public void setDocumentContentMemoryStream(System.IO.MemoryStream _documentContentMemoryStream)
    {
        documentContentByteArray = _documentContentMemoryStream.ToArray();
        documentContentContainer = conNull();
        isPdfDocumentContentSigned = UnknownNoYes::Unknown;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentContentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document content as container.
    /// </summary>
    /// <param name = "_documentContentContainer">Document content as container</param>
    public void setDocumentContentContainer(container _documentContentContainer)
    {
        documentContentContainer = _documentContentContainer;
        documentContentByteArray = null;
        isPdfDocumentContentSigned = UnknownNoYes::Unknown;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentContentByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document content as byte array.
    /// </summary>
    /// <param name = "_documentContentByteArray">Document content as byte array</param>
    public void setDocumentContentByteArray(System.Byte[] _documentContentByteArray)
    {
        documentContentByteArray = _documentContentByteArray;
        documentContentContainer = conNull();
        isPdfDocumentContentSigned = UnknownNoYes::Unknown;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentContentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the document content as memory stream.
    /// </summary>
    /// <returns>Document content memory stream</returns>
    public System.IO.MemoryStream getDocumentContentMemoryStream()
    {
        System.IO.MemoryStream documentContentMemoryStream;

        if (documentContentByteArray != null)
        {
            documentContentMemoryStream = DocGlobalHelper::convertBytesToMemoryStream(documentContentByteArray);
        }
        else if (documentContentContainer != conNull())
        {
            documentContentMemoryStream = DocGlobalHelper::convertContainerToMemoryStream(documentContentContainer);
        }
        
        return documentContentMemoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentContentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document content as container.
    /// </summary>
    /// <returns>Document content as container</returns>
    public container getDocumentContentContainer()
    {
        if (documentContentContainer != conNull())
        {
            return documentContentContainer;
        }

        if (documentContentByteArray != null)
        {
            documentContentContainer = DocGlobalHelper::convertBytesToContainer(documentContentByteArray);
        }

        return documentContentContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentContentByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document content as byte array.
    /// </summary>
    /// <returns>Document content as byte array</returns>
    public System.Byte[] getDocumentContentByteArray()
    {
        if (documentContentByteArray != null)
        {
            return documentContentByteArray;
        }

        if (documentContentContainer != conNull())
        {
            documentContentByteArray = DocGlobalHelper::convertContainerToBytes(documentContentContainer);
        }

        return documentContentByteArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the filename.
    /// </summary>
    /// <param name = "_filename">Filename including file extension</param>
    /// <returns>Filename</returns>
    public str parmFileName(str _filename = filename)
    {
        if (!prmIsDefault(_filename))
        {
            filename = _filename;
            fileFormat = DocFileFormat::Unknown;
        }
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file format as a string.
    /// </summary>
    /// <returns>File format</returns>
    public str getFileFormatStr()
    {
        return DocFileMngHelper::fileFormat2str(this.fileFormat());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file format.
    /// </summary>
    /// <param name = "recalculate">Should recalculate the file format</param>
    /// <returns>File format</returns>
    public DocFileFormat fileFormat(boolean recalculate = false)
    {
        if (fileFormat == DocFileFormat::Unknown || recalculate)
        {
            if (this.getDocumentContentImageList() != null)
            {
                fileFormat = DocFileFormat::EMF;
            }
            else
            {
                str fileExtension = DocFileMngHelper::getFileExtension(filename);
                switch (fileExtension)
                {
                    case '':
                        break;
                    case DocConstantFile::FileExtCsv:
                        fileFormat = DocFileFormat::CSV;
                        break;
                    case DocConstantFile::FileExtDocx:
                        fileFormat = DocFileFormat::DOCX;
                        break;
                    case DocConstantFile::FileExtMhtml:
                    case DocConstantFile::FileExtMhtmlLong:
                        fileFormat = DocFileFormat::MHTML;
                        break;
                    case DocConstantFile::FileExtPdf:
                        fileFormat = DocFileFormat::PDF;
                        break;
                    case DocConstantFile::FileExtXlsx:
                        fileFormat = DocFileFormat::XLSX;
                        break;
                    case DocConstantFile::FileExtXml:
                        fileFormat = DocFileFormat::XML;
                        break;
                    case DocConstantFile::FileExtXps:
                        fileFormat = DocFileFormat::XPS;
                        break;
                    case DocConstantFile::FileExtTiff:
                        fileFormat = DocFileFormat::TIFF;
                        break;
                    default:
                        DocGlobalHelper::handleException(funcName(), strFmt('Unsupported file format %1', fileExtension));
                }

                if (fileFormat == DocFileFormat::Unknown)
                {
                    // If the filename is not provided, try to get out the file format from the document content.
                    // NOTE: Not all file extensions are supported, e.g. XML or TXT.
                    using (System.IO.MemoryStream documentContent = this.getDocumentContentMemoryStream())
                    {
                        DocFileType fileType = DocFileDetection::GetKnownFileType(documentContent);
                        if (fileType == DocFileType::Pdf)
                        {
                            fileFormat = DocFileFormat::Pdf;
                        }
                        else if (fileType == DocFileType::Docx)
                        {
                            fileFormat = DocFileFormat::DOCX;
                        }
                        else if (fileType == DocFileType::Xlsx)
                        {
                            fileFormat = DocFileFormat::XLSX;
                        }
                        else if (fileType == DocFileType::Xps)
                        {
                            fileFormat = DocFileFormat::XPS;
                        }
                        else if (fileType == DocFileType::Tif)
                        {
                            fileFormat = DocFileFormat::TIFF;
                        }
                    }

                    /************************************************************************************************************/
                    /*   NOTE: When adding new file formats to the DocFileFormat enum, we also need to introduce new constants  */
                    /*   in DocConstantFile as well as to support them in the DocFileMngHelper::fileFormat2str() method.        */
                    /************************************************************************************************************/
                }
            }
        }

        return fileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of pages for the generated document.
    /// </summary>
    /// <returns>Number of pages</returns>
    public int getNumberOfPages()
    {
        if (numOfPages == 0)
        {
            if (this.fileFormat() == DocFileFormat::PDF)
            {
                // Get the number of pages for the PDF document.
                using (System.IO.MemoryStream pdfDocumentContentMemoryStream = this.getDocumentContentMemoryStream())
                {
                    IDocPdfInformation pdfProperties = DocPdfPropertyManager::GetProperties(pdfDocumentContentMemoryStream);
                    numOfPages = pdfProperties.PageCount;
                }
            }
            else if (this.fileFormat() == DocFileFormat::EMF)
            {
                // Document is printed as a collection of EMF images (i.e. it is printed to a network printer).
                // Number of pages is the count of the rendered EMF images.
                if (this.getDocumentContentImageList() != null)
                {
                    numOfPages = this.getDocumentContentImageList().get_Count();
                }
            }
        }
        return numOfPages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfDocumentContentSigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicationg if PDF document content is signed.
    /// </summary>
    /// <returns>True/False</returns>
    public UnknownNoYes isPdfDocumentContentSigned()
    {
        if (isPdfDocumentContentSigned == UnknownNoYes::Unknown &&
            this.fileFormat() == DocFileFormat::PDF)
        {
            using (System.IO.MemoryStream documentContentMemoryStream = this.getDocumentContentMemoryStream())
            {
                if (documentContentMemoryStream != null)
                {
                    boolean isSigned = DocPdfSigner::IsSigned(documentContentMemoryStream);
                    isPdfDocumentContentSigned = isSigned ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
            }
        }
        return isPdfDocumentContentSigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document object as image list.
    /// </summary>
    /// <param name = "_documentContentImageList">Document content as image list</param>
    /// <param name = "_fileName">Document filename including file extension</param>
    /// <returns>Printed document object as image list</returns>
    public static DocDocument createImageList(System.Collections.IList _documentContentImageList, str _fileName = '')
    {
        DocDocument document;

        if (_documentContentImageList == null || _documentContentImageList.get_Count() == 0)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _srsDocumentContentImageList is not set');
        }

        str errMsg = 'Error while creating the DocDocument object';
        try
        {
            document = new DocDocument();
            document.setDocumentContentImageList(_documentContentImageList);
            document.parmFileName(_fileName);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document object as container.
    /// </summary>
    /// <param name = "_documentContentContainer">Document content as conbtainer</param>
    /// <param name = "_fileName">Document filename including file extension</param>
    /// <returns>Printed document object as container</returns>
    public static DocDocument createContainer(container _documentContentContainer, str _fileName = '')
    {
        DocDocument document;

        if (_documentContentContainer == conNull())
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _documentContentContainer is not set');
        }

        str errMsg = 'Error while creating the DocDocument object';
        try
        {
            document = new DocDocument();
            document.setDocumentContentContainer(_documentContentContainer);
            document.parmFileName(_fileName);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document object as memory stream.
    /// </summary>
    /// <param name = "_documentContentMemoryStream">Report content as memory stream</param>
    /// <param name = "_fileName">Document filename including file extension</param>
    /// <returns>Printed document object as memory stream</returns>
    public static DocDocument createMemoryStream(System.IO.MemoryStream _documentContentMemoryStream, str _fileName = '')
    {
        DocDocument document;

        if (_documentContentMemoryStream == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _documentContentMemoryStream is not set');
        }

        str errMsg = 'Error while creating the DocDocument object';
        try
        {
            document = new DocDocument();
            document.setDocumentContentMemoryStream(_documentContentMemoryStream);
            document.parmFileName(_fileName);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document object as byte array.
    /// </summary>
    /// <param name = "_documentContentByteArray">Document content as byte array</param>
    /// <param name = "_fileName">Document filename including file extension</param>
    /// <returns>Printed document object as byte array</returns>
    public static DocDocument createByteArray(System.Byte[] _documentContentByteArray, str _fileName = '')
    {
        DocDocument document;

        if (_documentContentByteArray == null || _documentContentByteArray.Length == 0)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _documentContentByteArray is not set');
        }

        str errMsg = 'Error while creating the DocDocument object';
        try
        {
            document = new DocDocument();
            container documentContentContainer = DocGlobalHelper::convertBytesToContainer(_documentContentByteArray);
            document.setDocumentContentContainer(documentContentContainer);
            document.parmFileName(_fileName);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return document;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>