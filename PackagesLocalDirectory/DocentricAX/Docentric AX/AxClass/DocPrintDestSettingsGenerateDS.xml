<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintDestSettingsGenerateDS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPrintDestSettingsGenerateDS implements SysPackable
{
    DocDdspFileName               ddspFilename;
    LanguageId                    languageId;
    str                           previewLanguages;
    DocSelectedDocentricEngine    selectedEngine;
    boolean                       isGeneratedAlongsideReport;

    #define.currentPackVersion(3)
    #localmacro.currentList  // Added isGeneratedAlongsideReport.
        version,
        ddspFilename,
        languageId,
        previewLanguages,
        selectedEngine,
        isGeneratedAlongsideReport
    #endMacro

    #define.packVersion2(2)
    #localmacro.listVersion2  // Added selectedEngine.
        version,
        ddspFilename,
        languageId,
        previewLanguages,
        selectedEngine
    #endMacro

    #define.packVersion1(1)
    #localmacro.listVersion1
        version,
        ddspFilename,
        languageId,
        previewLanguages
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultXmlDataSourceFilename</Name>
				<Source><![CDATA[
    public Filename getDefaultXmlDataSourceFilename(DocReportId _reportId)
    {
        str filenameOnly, type, defaultFilenameWithType;
       
        filenameOnly = '';
        if (ddspFilename)
        {
            [filenameOnly, type] = Docu::splitFilename(ddspFilename);
        }
    
        // Filename with type.
        if (!filenameOnly)
        {
            defaultFilenameWithType = DocReportingHelper::getDefaultOutputFilename(
                _reportId, true, '', 0, DocConstantFile::FileExtDdsp, DocConstantFile::ReportDsFixedFilename, false);
        }
        else
        {
            defaultFilenameWithType = filenameOnly + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtDdsp;
        }
    
        return defaultFilenameWithType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int version = #currentPackVersion;
    
        return [#currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the DDSP Language ID.
    /// </summary>
    /// <param name = "_languageId">Language ID</param>
    /// <returns>Language ID</returns>
    public LanguageId parmLanguageId(LanguageId _languageId = languageId)
    {
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviewLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets preview language IDs in a string separated by commas, e.g. "en-us,da,de,de-ch,fi".
    /// That means it can be converted to container by using the con2str() method.
    /// </summary>
    /// <param name="_previewLanguages">
    /// Preview language ID list.
    /// </param>
    /// <returns>
    /// Preview language ID list.
    /// </returns>
    public str parmPreviewLanguages(str _previewLanguages = previewLanguages)
    {
        previewLanguages = _previewLanguages;
        return previewLanguages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlDataSourceFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the output DDSP filename.
    /// </summary>
    /// <param name = "_ddspFilename">The output DDSP filename</param>
    /// <returns>The DDSP filename</returns>
    public DocDdspFilename parmXmlDataSourceFilename(DocDdspFilename _ddspFilename = ddspFilename)
    {
        ddspFilename = _ddspFilename;
        return ddspFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the Docentric Engine.
    /// </summary>
    /// <param name = "_selectedEngine">DocSelectedDocentricEngine enum value</param>
    /// <returns>Selected Docentric Engine</returns>
    public DocSelectedDocentricEngine parmSelectedEngine(DocSelectedDocentricEngine _selectedEngine = selectedEngine)
    {
        selectedEngine = _selectedEngine;
        return selectedEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsGeneratedAlongsideReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets the isGeneratedAlongsideReport flag.
    /// </summary>
    /// <param name = "_isGeneratedAlongsideReport">True if the DDSP is generated alongside report execution</param>
    /// <returns>True/False</returns>
    public boolean parmIsGeneratedAlongsideReport(boolean _isGeneratedAlongsideReport = isGeneratedAlongsideReport)
    {
        isGeneratedAlongsideReport = _isGeneratedAlongsideReport;
        return isGeneratedAlongsideReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultParmValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values for the DDSP output filename and Language ID.
    /// </summary>
    /// <param name = "_reportId">Docentric report ID</param>
    public void setDefaultParmValues(DocReportId _reportId)
    {
        if (!ddspFilename)
        {
            ddspFilename = this.getDefaultXmlDataSourceFilename(_reportId);
        }
    
        if (!languageId)
        {
            languageId = currentUserLanguage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>escapeDdspFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans the DDSP filename from invalid characters.
    /// </summary>
    public void escapeDdspFilename()
    {
        ddspFilename = DocFileMngHelper::replaceInvalidCharsForFileName(ddspFilename);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean    ret = false;
        int        version;

        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);

            if (version == #currentPackVersion)
            {
                [#currentList] = _pack;
                ret = true;
            }
            else if (version == #packVersion1)
            {
                [#listVersion1] = _pack;
                ret = true;
            }
            else if (version == #packVersion2)
            {
                [#listVersion2] = _pack;
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(boolean _printValidationErrors = true)
    {
        Filename        fileNameOnly, fileType, filePath;
        boolean         isValid;
        container       previewLanguagesContainer;
        int             i;
        str             previewLanguageCandidate;
    
    
        isValid = true;
    
        if (ddspFilename)
        {
            [fileNameOnly, fileType, filePath] = Docu::splitFilename(ddspFilename);
            
            // File name is not set.
            if (!fileType || !fileNameOnly)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX:DdspFilenameNotSet");
                }
            }

            // File type is not valid.
            if (fileType && fileType != DocConstantFile::FileExtDdsp)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:InvalidDDSPFilenameExt", fileType, DocConstantFile::FileExtDdsp));
                }
            }
    
            // Filename is not valid.
            if (fileNameOnly && !DocFileMngHelper::isValidOnlyFilename(fileNameOnly))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:InvalidDDSPFilename", ddspFilename));
                }
            }
        }
    
        if (this.parmLanguageId())
        {
            if (!LanguageTable::exist(this.parmLanguageId()))
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:LangNotExist", this.parmLanguageId()));
                }
            }
        }
    
        if (this.parmPreviewLanguages())
        {
            previewLanguagesContainer = str2con(this.parmPreviewLanguages(), ',');
            for (i = 1; i <= conLen(previewLanguagesContainer); i++)
            {
                previewLanguageCandidate = conPeek(previewLanguagesContainer, i);
                if (!previewLanguageCandidate)
                {
                    continue;
                }
    
                previewLanguageCandidate = strLTrim(strRTrim(previewLanguageCandidate));
    
                if (!LanguageTable::exist(previewLanguageCandidate))
                {
                    isValid = false;
                    if (_printValidationErrors)
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:PreviewLangNotExist", previewLanguageCandidate, this.parmPreviewLanguages()));
                    }
                }
            }
        }

        // Check if Docentric Engine is selected and if this selection is valid 
        // but only if Docentric AX parameters > Product the Docentric Engine field is set to 'Standard + NextGen'.
        if (DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewNextGen) && DocParameters::find().DocentricEngine == DocDocentricEngine::Both)
        {
            if (this.parmSelectedEngine() == DocSelectedDocentricEngine::NotSelected)
            {
                isValid = false;
                if (_printValidationErrors)
                {
                    DocGlobalHelper::handleWarning("@DocentricAX3:DocentricEngineSelectWarningMsg");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocentricEngine</Name>
				<Source><![CDATA[
    public str getDocentricEngine()
    {
        DocDocentricEngine configuredDocentricEngine = DocConstantGlobal::defaultDocentricEngine();  // Currently: DocDocentricEngine::Standard
        // If the feature NextGen is enabled in Preview mode or released, read it from the setup.
        if (DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewNextGen))
        {
            configuredDocentricEngine = DocParameters::find().DocentricEngine;
        }

        switch (configuredDocentricEngine)
        {
            case DocDocentricEngine::Standard:
                return DocConstantDSP::ScriptEngineXpath;

            case DocDocentricEngine::NextGen:
                return DocConstantDSP::ScriptEngineCSharp;

            case DocDocentricEngine::Both:
                switch (selectedEngine)
                {
                    case DocSelectedDocentricEngine::Standard:
                        return DocConstantDSP::ScriptEngineXpath;

                    case DocSelectedDocentricEngine::NextGen:
                        return DocConstantDSP::ScriptEngineCSharp;

                    case DocSelectedDocentricEngine::NotSelected:  // Should not happen due to the previous validation via the validate() method.
                        DocGlobalHelper::handleException(funcName(), "@DocentricAX3:DocentricEngineSelectWarningMsg");
                }
        }

        throw error(strFmt('Unsupported Docentric engine (%1)', selectedEngine));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>