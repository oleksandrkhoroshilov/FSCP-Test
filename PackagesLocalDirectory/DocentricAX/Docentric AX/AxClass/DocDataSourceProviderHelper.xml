<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocDataSourceProviderHelper
{
    #define.XmlAttrLedgerDimensionDisplayValueLabel("@DocentricAX:LedgerDimDisplayValue")
    #define.XmlElemDimensionDynamicAccountsLabel("@DocentricAX:DynamicAccounts")
    #define.XmlAttrDimensionDisplayValueLabel("@DocentricAX:DimensionValue")
    #define.XmlAttrDimensionDescriptionLabel("@DocentricAX:DimensionDescription")
    #define.XmlAttrEnumTextLabel("@DocentricAX:EnumElementText")
    #define.XmlAttrEnumValueLabel("@DocentricAX:EnumElementValue")
    #define.XmlAttrEnumNameLabel("@DocentricAX:EnumElementName")
    #define.XmlAttrEnumLabelLabel("@DocentricAX:EnumElementLabel")


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAndAppendDimensionComplexTypes</Name>
				<Source><![CDATA[
    public static void createAndAppendDimensionComplexTypes(XmlDocument _parentXmlDoc, XmlElement _xsdMainElement,
                                                            LanguageId _languageId, DocXmlRecordBuildingContext _recordBuildingContext)
    {
        _xsdMainElement.appendChild(DocDataSourceProviderHelper::createDynamicLedgerAccountsXsdElement(_parentXmlDoc, _languageId, _recordBuildingContext));
        _xsdMainElement.appendChild(DocDataSourceProviderHelper::createDimensionAttributeXsdElement(_parentXmlDoc, _languageId));
        _xsdMainElement.appendChild(DocDataSourceProviderHelper::createDefaultDimensionXsdElement(_parentXmlDoc, _languageId, _recordBuildingContext));
        _xsdMainElement.appendChild(DocDataSourceProviderHelper::createLedgerDimensionXsdElement(_parentXmlDoc, _languageId, _recordBuildingContext));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultDimensionXsdElement</Name>
				<Source><![CDATA[
    // Helping method for XSD serialization.
    private static XmlElement createDefaultDimensionXsdElement(XmlDocument _parentXmlDoc, LanguageId _languageId,
                                                               DocXmlRecordBuildingContext _recordBuildingContext)
    {
        XmlElement                      xsdComplexType, xsdAnnotation;
        XmlElement                      xsdElementDimensionAttr, xsdChoiceDimensionAttr;
        XmlAttribute                    xsdElementNameAttr, xsdElementTypeAttr, xsdComplexTypeNameAttr;
        RefRecId                        dimAttrSetRecId;
        DimensionAttributeSetItem       dimAttrSetItem;
        DimensionAttribute              dimAttr;
        SysDictTable                    dictTableBackingEntity;
    
    
        void createAndAppendXsdElementDimensionAttr(XmlElement _xsdChoiceDimensionAttr, DimensionAttribute _dimAttr)
        {
            // Create XML element for the current dimension attribute.
            xsdElementDimensionAttr = _parentXmlDoc.createElement2('xs:element', DocConstantDSP::XmlShemaNamespaceUri);
    
            xsdElementNameAttr = _parentXmlDoc.createAttribute('name');
            xsdElementNameAttr.value(_dimAttr.Name);
            xsdElementDimensionAttr.setAttributeNode(xsdElementNameAttr);
            _xsdChoiceDimensionAttr.appendChild(xsdElementDimensionAttr);
    
            xsdElementTypeAttr = _parentXmlDoc.createAttribute('type');
            xsdElementTypeAttr.value(DocConstantDSP::ComplexTypeDimension);
            xsdElementDimensionAttr.setAttributeNode(xsdElementTypeAttr);
    
            // Annotation.
            dictTableBackingEntity = _recordBuildingContext.getSysDictTable(_dimAttr.BackingEntityType);
            if (dictTableBackingEntity && dictTableBackingEntity.labelDefined())
            {
                xsdAnnotation = DocDataSourceProviderHelper::createXsdAnnotationLabel(
                    _parentXmlDoc, dictTableBackingEntity.labelDefined(),
                    DocLabelHelper::resolveSysLabel(dictTableBackingEntity.labelDefined(), _languageId));
                xsdElementDimensionAttr.appendChild(xsdAnnotation);
            }
        }
    
    
        // Add a complex type.
        xsdComplexType = _parentXmlDoc.createElement2('xs:complexType', DocConstantDSP::XmlShemaNamespaceUri);
    
        xsdComplexTypeNameAttr = _parentXmlDoc.createAttribute('name');
        xsdComplexTypeNameAttr.value(DocConstantDSP::ComplexTypeDefaultDimension);
        xsdComplexType.setAttributeNode(xsdComplexTypeNameAttr);
    
        // Create xs:choice element.
        xsdChoiceDimensionAttr = DocDataSourceProviderHelper::createXsdChoiceElement(_parentXmlDoc);
        xsdComplexType.appendChild(xsdChoiceDimensionAttr);
    
        // Create an XML element for the each of dimension attribute.
        // For each dimension add new child element 'Name' with attributes 'DisplayValue' and 'Description'.
        dimAttrSetRecId = DimensionCache::getDimensionAttributeSetForLedger();
        while select Name, BackingEntityType from dimAttr
              where dimAttr.Type != DimensionAttributeType::MainAccount
                  join RecId from dimAttrSetItem
                  where dimAttrSetItem.DimensionAttribute == dimAttr.RecId &&
                        dimAttrSetItem.DimensionAttributeSet == dimAttrSetRecId
        {
            createAndAppendXsdElementDimensionAttr(xsdChoiceDimensionAttr, dimAttr);
        }
    
        return xsdComplexType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensionAttributeXsdElement</Name>
				<Source><![CDATA[
    // Helping method for XSD serialization.
    private static XmlElement createDimensionAttributeXsdElement(XmlDocument _parentXmlDoc, LanguageId _languageId)
    {
        XmlElement      xsdComplexType, xsdAtrrDim;
        XmlAttribute    xsdComplexTypeNameAttr;
    
    
        xsdComplexType = _parentXmlDoc.createElement2('xs:complexType', DocConstantDSP::XmlShemaNamespaceUri);
        xsdComplexTypeNameAttr = _parentXmlDoc.createAttribute('name');
        xsdComplexTypeNameAttr.value(DocConstantDSP::ComplexTypeDimension);
        xsdComplexType.setAttributeNode(xsdComplexTypeNameAttr);
    
        // Create XSD attribute for the field 'DisplayValue'
        xsdAtrrDim = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
                        _parentXmlDoc, DocConstantDSP::XmlAttrDimensionDisplayValue, 'abc', 0,
                        literalStr(#XmlAttrDimensionDisplayValueLabel),
                        DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrDimensionDisplayValueLabel), _languageId));
        xsdComplexType.appendChild(xsdAtrrDim);
    
        // Create XSD attribute for the field 'Description'
        xsdAtrrDim = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
                        _parentXmlDoc, DocConstantDSP::XmlAttrDimensionDescription, 'abc', 0,
                        literalStr(#XmlAttrDimensionDescriptionLabel),
                        DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrDimensionDescriptionLabel), _languageId));
        xsdComplexType.appendChild(xsdAtrrDim);
    
        return xsdComplexType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDsPackageDataSection</Name>
				<Source><![CDATA[
    public static XmlElement createDsPackageDataSection(XmlDocument _xmlDocument, str _dataSectionType)
    {
        XmlElement     xmlElementDataSection;
        XmlAttribute   xmlAttributeDataSectionType;
    
    
        if (_dataSectionType == DocConstantDSP::XmlGeneralDataType)
        {
            /*  <dsp:dataSection dsp:type="GeneralData">
                <dsp:data>
                    <GeneralData/>
                </dsp:data>
                <dsp:schema/>
            </dsp:dataSection> */
    
            // dsp:dataSection
            xmlElementDataSection =
                _xmlDocument.createElement2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSection,
                                            DocConstantDSP::XmlDsPackageNamespaceUrl);
    
            xmlAttributeDataSectionType =
                _xmlDocument.createAttribute2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSectionAttrType,
                                              DocConstantDSP::XmlDsPackageNamespaceUrl);
            xmlAttributeDataSectionType.value(DocConstantDSP::XmlGeneralDataType);
            xmlElementDataSection.setAttributeNode(xmlAttributeDataSectionType);
        }
        else if (_dataSectionType == DocConstantDSP::XmlMainDataType)
        {
            /*  <dsp:dataSection dsp:type="MainData">
                <dsp:data>
                    <ReportData/>
                </dsp:data>
                <dsp:schema/>
            </dsp:dataSection> */
    
            xmlElementDataSection =
                _xmlDocument.createElement2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSection,
                                            DocConstantDSP::XmlDsPackageNamespaceUrl);
    
            xmlAttributeDataSectionType =
                _xmlDocument.createAttribute2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSectionAttrType,
                                              DocConstantDSP::XmlDsPackageNamespaceUrl);
            xmlAttributeDataSectionType.value(DocConstantDSP::XmlMainDataType);
            xmlElementDataSection.setAttributeNode(xmlAttributeDataSectionType);
        }
        else if (_dataSectionType == DocConstantDSP::XmlParametersType)
        {
            /*  <dsp:dataSection dsp:type="Parameters">
                <dsp:data>
                    <Parameters/>
                </dsp:data>
                <dsp:schema/>
            </dsp:dataSection> */
    
            xmlElementDataSection =
                _xmlDocument.createElement2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSection,
                                            DocConstantDSP::XmlDsPackageNamespaceUrl);
    
            xmlAttributeDataSectionType =
                _xmlDocument.createAttribute2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSectionAttrType,
                                              DocConstantDSP::XmlDsPackageNamespaceUrl);
            xmlAttributeDataSectionType.value(DocConstantDSP::XmlParametersType);
            xmlElementDataSection.setAttributeNode(xmlAttributeDataSectionType);
        }
    
        return xmlElementDataSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDsPackageDataSectionDataSchema</Name>
				<Source><![CDATA[
    public static XmlElement createDsPackageDataSectionDataSchema(XmlDocument _xmlDocument, XmlElement _xmlElementDataSection,
                                                                  boolean _isSchemaElement)
    {
        XmlElement xmlElement;
    
        /*  <dsp:dataSection dsp:type="GeneralData">
                <dsp:data>
                    <GeneralData/> or <ReportData/> or <Parameters/>
                </dsp:data>
                <dsp:schema/>
            </dsp:dataSection> */
    
        if (!_isSchemaElement)
        {
            // dsp:data
            xmlElement =
               _xmlDocument.createElement2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSectionData,
                                           DocConstantDSP::XmlDsPackageNamespaceUrl);
            _xmlElementDataSection.appendChild(xmlElement);
        }
        else
        {
            // dsp:schema.
            xmlElement =
               _xmlDocument.createElement2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageDataSectionSchema,
                                           DocConstantDSP::XmlDsPackageNamespaceUrl);
            _xmlElementDataSection.appendChild(xmlElement);
        }
    
        return xmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDsPackageXmlAttribute</Name>
				<Source><![CDATA[
    public static XmlAttribute createDsPackageXmlAttribute(XmlDocument _xmlDocument, str _attrName)
    {
        return _xmlDocument.createAttribute2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + _attrName,
                                             DocConstantDSP::XmlDsPackageNamespaceUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDsPackageXmlElement</Name>
				<Source><![CDATA[
    public static XmlElement createDsPackageXmlElement(XmlDocument _xmlDocument, str _elementName)
    {
        return _xmlDocument.createElement2(DocConstantDSP::XmlDsPackageNamespacePrefix + ':' + _elementName,
                                           DocConstantDSP::XmlDsPackageNamespaceUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDynamicLedgerAccountsXsdElement</Name>
				<Source><![CDATA[
    // Helping method for XSD serialization.
    private static XmlElement createDynamicLedgerAccountsXsdElement(XmlDocument _parentXmlDoc, LanguageId _languageId,
                                                                    DocXmlRecordBuildingContext _recordBuildingContext)
    {
        XmlElement                      xsdComplexType, xsdChoiceDimensionAttr;
        XmlAttribute                    xsdComplexTypeNameAttr;
        DimensionAttribute              dimAttr;
    
    
        void createAndAppendXsdElementDimensionAttr(XmlElement _xsdChoiceDimensionAttr, DimensionAttribute _dimAttr)
        {
            str                dynamicAccountName;
            XmlAttribute       xsdElementNameAttr, xsdElementTypeAttr;
            XmlElement         xsdElementDimensionAttr, xsdAnnotation;
            SysDictTable       dictTableBackingEntity;
    
    
            // Create XML element for the current dimension attribute.
            xsdElementDimensionAttr = _parentXmlDoc.createElement2('xs:element', DocConstantDSP::XmlShemaNamespaceUri);
    
            xsdElementNameAttr = _parentXmlDoc.createAttribute('name');
            dynamicAccountName = _dimAttr.Name;
            if (strStartsWith(_dimAttr.Name, DocConstantDSP::SystemGeneratedAttribute))
            {
                dynamicAccountName = subStr(_dimAttr.Name, strLen(DocConstantDSP::SystemGeneratedAttribute) + 1, strLen(_dimAttr.Name) - strLen(DocConstantDSP::SystemGeneratedAttribute));
            }
            xsdElementNameAttr.value(dynamicAccountName);
            xsdElementDimensionAttr.setAttributeNode(xsdElementNameAttr);
    
            xsdElementTypeAttr = _parentXmlDoc.createAttribute('type');
            xsdElementTypeAttr.value(DocConstantDSP::ComplexTypeDimension);
            xsdElementDimensionAttr.setAttributeNode(xsdElementTypeAttr);
    
            _xsdChoiceDimensionAttr.appendChild(xsdElementDimensionAttr);
    
            // Annotation.
            dictTableBackingEntity = _recordBuildingContext.getSysDictTable(_dimAttr.BackingEntityType);
            if (dictTableBackingEntity && dictTableBackingEntity.labelDefined())
            {
                xsdAnnotation = DocDataSourceProviderHelper::createXsdAnnotationLabel(
                    _parentXmlDoc, dictTableBackingEntity.labelDefined(),
                    DocLabelHelper::resolveSysLabel(dictTableBackingEntity.labelDefined(), _languageId));
                xsdElementDimensionAttr.appendChild(xsdAnnotation);
            }
        }
    
        xsdComplexType = _parentXmlDoc.createElement2('xs:complexType', DocConstantDSP::XmlShemaNamespaceUri);
        xsdComplexTypeNameAttr = _parentXmlDoc.createAttribute('name');
        xsdComplexTypeNameAttr.value(DocConstantDSP::ComplexTypeDynamicAccounts);
        xsdComplexType.setAttributeNode(xsdComplexTypeNameAttr);
    
        // Create xs:choice element.
        xsdChoiceDimensionAttr = DocDataSourceProviderHelper::createXsdChoiceElement(_parentXmlDoc);
        xsdComplexType.appendChild(xsdChoiceDimensionAttr);
    
        while select Name, BackingEntityType from dimAttr
              where dimAttr.Type == DimensionAttributeType::DynamicAccount
        {
            createAndAppendXsdElementDimensionAttr(xsdChoiceDimensionAttr, dimAttr);
        }
    
        return xsdComplexType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEnumXsdElement</Name>
				<Source><![CDATA[
    // Helping method for XSD serialization.
    public static XmlElement createEnumXsdElement(XmlDocument _parentXmlDoc, LanguageId _languageId)
    {
        XmlElement      xsdComplexType, xsdAttrElement;
        XmlAttribute    xsdComplexTypeNameAttr;
    
        xsdComplexType = _parentXmlDoc.createElement2('xs:complexType', DocConstantDSP::XmlShemaNamespaceUri);
        xsdComplexTypeNameAttr = _parentXmlDoc.createAttribute('name');
        xsdComplexTypeNameAttr.value(DocConstantDSP::ComplexTypeEnum);
        xsdComplexType.setAttributeNode(xsdComplexTypeNameAttr);
    
        // 1) Create XSD attribute for the field 'Value'
        xsdAttrElement = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
                            _parentXmlDoc, DocConstantDSP::XmlAttrEnumValue, 123, 0,
                            literalStr(#XmlAttrEnumValueLabel),
                            DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrEnumValueLabel), _languageId));
        xsdComplexType.appendChild(xsdAttrElement);
    
        // 2) Create XSD attribute for the field 'Name'
        xsdAttrElement = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
                            _parentXmlDoc, DocConstantDSP::XmlAttrEnumName, 'abc', 0,
                            literalStr(#XmlAttrEnumNameLabel),
                            DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrEnumNameLabel), _languageId));
        xsdComplexType.appendChild(xsdAttrElement);
    
        // 3) Create XSD attribute for the field 'Text'
        xsdAttrElement = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
                            _parentXmlDoc, DocConstantDSP::XmlAttrEnumText, 'abc', 0,
                            literalStr(#XmlAttrEnumTextLabel),
                            DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrEnumTextLabel), _languageId));
        xsdComplexType.appendChild(xsdAttrElement);
    
        return xsdComplexType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUserDefEnumXsdElement</Name>
				<Source><![CDATA[
    public static XmlElement createUserDefEnumXsdElement(XmlDocument _parentXmlDoc, LanguageId _languageId)
    {
        XmlElement      xsdComplexType, xsdAttrElement;
        XmlAttribute    xsdComplexTypeNameAttr;
    
        xsdComplexType = _parentXmlDoc.createElement2('xs:complexType', DocConstantDSP::XmlShemaNamespaceUri);
        xsdComplexTypeNameAttr = _parentXmlDoc.createAttribute('name');
        xsdComplexTypeNameAttr.value(DocConstantDSP::ComplexTypeUserDefEnum);
        xsdComplexType.setAttributeNode(xsdComplexTypeNameAttr);
    
        // 1) Create XSD attribute for the field 'Name'
        xsdAttrElement = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
                            _parentXmlDoc, DocConstantDSP::XmlAttrUserDefEnumName, 'abc', 0,
                            literalStr(#XmlAttrEnumNameLabel),
                            DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrEnumNameLabel), _languageId));
        xsdComplexType.appendChild(xsdAttrElement);
    
        // 2) Create XSD attribute for the field 'Label'
        xsdAttrElement = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
                            _parentXmlDoc, DocConstantDSP::XmlAttrUserDefEnumLabel, 'abc', 0,
                            literalStr(#XmlAttrEnumLabelLabel),
                            DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrEnumLabelLabel), _languageId));
        xsdComplexType.appendChild(xsdAttrElement);
    
        return xsdComplexType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionXsdElement</Name>
				<Source><![CDATA[
    // Helping method for XSD serialization.
    private static XmlElement createLedgerDimensionXsdElement(XmlDocument _parentXmlDoc, LanguageId _languageId,
                                                              DocXmlRecordBuildingContext _recordBuildingContext)
    {
        XmlElement                      xsdAtrrDim;
        XmlElement                      xsdComplexType, xsdAnnotation;
        XmlElement                      xsdElementDimensionAttr, xsdChoiceDimensionAttr;
        XmlAttribute                    xsdElementNameAttr, xsdElementTypeAttr, xsdComplexTypeNameAttr;
        RefRecId                        dimAttrSetRecId;
        DimensionAttributeSetItem       dimAttrSetItem;
        DimensionAttribute              dimAttr;
        SysDictTable                    dictTableBackingEntity;
    
    
        void createAndAppendXsdElementDimensionAttr(XmlElement _xsdChoiceDimensionAttr, DimensionAttribute _dimAttr)
        {
            // Create XML element for the current dimension attribute.
            xsdElementDimensionAttr = _parentXmlDoc.createElement2('xs:element', DocConstantDSP::XmlShemaNamespaceUri);
    
            xsdElementNameAttr = _parentXmlDoc.createAttribute('name');
            xsdElementNameAttr.value(_dimAttr.Name);
            xsdElementDimensionAttr.setAttributeNode(xsdElementNameAttr);
            _xsdChoiceDimensionAttr.appendChild(xsdElementDimensionAttr);
    
            xsdElementTypeAttr = _parentXmlDoc.createAttribute('type');
            xsdElementTypeAttr.value(DocConstantDSP::ComplexTypeDimension);
            xsdElementDimensionAttr.setAttributeNode(xsdElementTypeAttr);
    
            // Annotation.
            dictTableBackingEntity = _recordBuildingContext.getSysDictTable(_dimAttr.BackingEntityType);
            if (dictTableBackingEntity && dictTableBackingEntity.labelDefined())
            {
                xsdAnnotation = DocDataSourceProviderHelper::createXsdAnnotationLabel(
                    _parentXmlDoc, dictTableBackingEntity.labelDefined(),
                    DocLabelHelper::resolveSysLabel(dictTableBackingEntity.labelDefined(), _languageId));
                xsdElementDimensionAttr.appendChild(xsdAnnotation);
            }
        }
    
    
        // Add a complex type.
        xsdComplexType = _parentXmlDoc.createElement2('xs:complexType', DocConstantDSP::XmlShemaNamespaceUri);
    
        xsdComplexTypeNameAttr = _parentXmlDoc.createAttribute('name');
        xsdComplexTypeNameAttr.value(DocConstantDSP::ComplexTypeLedgerDimension);
        xsdComplexType.setAttributeNode(xsdComplexTypeNameAttr);
    
        // Create xs:choice element.
        xsdChoiceDimensionAttr = DocDataSourceProviderHelper::createXsdChoiceElement(_parentXmlDoc);
        xsdComplexType.appendChild(xsdChoiceDimensionAttr);
    
        // Create an XML element for the each of dimension attribute.
        // For each dimension add new child element 'Name' with attributes 'DisplayValue' and 'Description'.
        dimAttrSetRecId = DimensionCache::getDimensionAttributeSetForLedger();
        while select Name, BackingEntityType from dimAttr
              where dimAttr.Type != DimensionAttributeType::MainAccount
                  join RecId from dimAttrSetItem
                  where dimAttrSetItem.DimensionAttribute == dimAttr.RecId &&
                        dimAttrSetItem.DimensionAttributeSet == dimAttrSetRecId
        {
            createAndAppendXsdElementDimensionAttr(xsdChoiceDimensionAttr, dimAttr);
        }
    
    
        // Add XSD Element representing the attribute 'DisplayValue'
        // to the ComplexType of the parent XSD element.
        xsdAtrrDim = DocDataSourceProviderHelper::createXsdAttrElementFromValue(
            _parentXmlDoc, DocConstantDSP::XmlAttrLedgerDimensionDisplayValue, 'abc', 0,
            literalStr(#XmlAttrLedgerDimensionDisplayValueLabel),
            DocLabelHelper::resolveSysLabel(literalStr(#XmlAttrLedgerDimensionDisplayValueLabel), _languageId));
        xsdComplexType.appendChild(xsdAtrrDim);
    
        // Add MainAccount.
        select firstOnly Name, BackingEntityType from dimAttr
        where dimAttr.Type == DimensionAttributeType::MainAccount
        join RecId from dimAttrSetItem
        where dimAttrSetItem.DimensionAttribute == dimAttr.RecId &&
                dimAttrSetItem.DimensionAttributeSet == dimAttrSetRecId;
    
        createAndAppendXsdElementDimensionAttr(xsdChoiceDimensionAttr, dimAttr);
    
        // Add Dynamic accounts.
        xsdElementDimensionAttr = _parentXmlDoc.createElement2('xs:element', DocConstantDSP::XmlShemaNamespaceUri);
    
        xsdElementNameAttr = _parentXmlDoc.createAttribute('name');
        xsdElementNameAttr.value(DocConstantDSP::XmlElemDimensionDynamicAccounts);
        xsdElementDimensionAttr.setAttributeNode(xsdElementNameAttr);
        xsdChoiceDimensionAttr.appendChild(xsdElementDimensionAttr);
    
        xsdElementTypeAttr = _parentXmlDoc.createAttribute('type');
        xsdElementTypeAttr.value(DocConstantDSP::ComplexTypeDynamicAccounts);
        xsdElementDimensionAttr.setAttributeNode(xsdElementTypeAttr);
    
        // Annotation.
        xsdAnnotation = DocDataSourceProviderHelper::createXsdAnnotationLabel(
                            _parentXmlDoc, literalStr(#XmlElemDimensionDynamicAccountsLabel),
                            DocLabelHelper::resolveSysLabel(literalStr(#XmlElemDimensionDynamicAccountsLabel), _languageId));
        xsdElementDimensionAttr.appendChild(xsdAnnotation);
    
        return xsdComplexType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlAttrFromEdt</Name>
				<Source><![CDATA[
    public static XmlAttribute createXmlAttrFromEdt(XmlDocument _parentXmlDoc, str _attrName,
                                                    anytype _attrValue, int _edtId,
                                                    DocXmlRecordBuildingContext _recordBuildingContext)
    {
        XmlAttribute    xmlAttr;
        SysDictType     sysDictType;
        boolean         attrValueSuccessfullySet;
    
    
        if (!_attrName)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _attrName is not set');
        }
    
        if (_parentXmlDoc == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _parentXmlDoc is not set');
        }
    
        sysDictType = _recordBuildingContext.getSysDictType(_edtId);
        if (!sysDictType)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Parameter _edtId %1 is not existing EDT type', _edtId));
        }
    
        xmlAttr = _parentXmlDoc.createAttribute(_attrName);
        attrValueSuccessfullySet = DocDataSourceProviderHelper::setXmlAttributeValue(xmlAttr, _attrValue, sysDictType.baseType(), sysDictType.enumId());
    
        if (!attrValueSuccessfullySet)
        {
            return null;
        }
    
        return xmlAttr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlAttrFromValue</Name>
				<Source><![CDATA[
    public static XmlAttribute createXmlAttrFromValue(XmlDocument _parentXmlDoc, str _attrName, anytype _attrValue, int _enumId)
    {
        XmlAttribute    xmlAttr;
        boolean         attrValueSuccessfullySet;
    
    
        if (!_attrName)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _attrName is not set');
        }
    
        if (_parentXmlDoc == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _parentXmlDoc is not set');
        }
    
        xmlAttr = _parentXmlDoc.createAttribute(_attrName);
        attrValueSuccessfullySet = DocDataSourceProviderHelper::setXmlAttributeValue(xmlAttr, _attrValue, typeOf(_attrValue), _enumId);
    
        if (!attrValueSuccessfullySet)
        {
            return null;
        }
    
        return xmlAttr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXsdAnnotation</Name>
				<Source><![CDATA[
    public static XmlElement createXsdAnnotation(XmlDocument _parentXmlDoc, str _annotationName, str _annotationText)
    {
        XmlElement     xsdAnnotation, xsdAppInfo;
        XmlElement     xsdAnnotationNode;
        XmlAttribute   xsdAnnotationTextAttr;
    
        /* <xs:annotation>
            <xs:appinfo>
                <dsp:ANNOTATION_NAME dsp:text="ANNOTATION_TEXT" />
            </xs:appinfo>
        </xs:annotation> */
    
        xsdAnnotation = _parentXmlDoc.createElement2('xs:annotation', DocConstantDSP::XmlShemaNamespaceUri);
        xsdAppInfo    = _parentXmlDoc.createElement2('xs:appinfo', DocConstantDSP::XmlShemaNamespaceUri);
        xsdAnnotation.appendChild(xsdAppInfo);
    
        xsdAnnotationNode = DocDataSourceProviderHelper::createDsPackageXmlElement(_parentXmlDoc, _annotationName);
        xsdAnnotationTextAttr = DocDataSourceProviderHelper::createDsPackageXmlAttribute(_parentXmlDoc, DocConstantDSP::XmlDsPackageAnnotationText);
        xsdAnnotationTextAttr.value(_annotationText);
        xsdAnnotationNode.setAttributeNode(xsdAnnotationTextAttr);
    
        xsdAppInfo.appendChild(xsdAnnotationNode);
    
        return xsdAnnotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXsdAnnotationLabel</Name>
				<Source><![CDATA[
    public static XmlElement createXsdAnnotationLabel(XmlDocument _parentXmlDoc, str _labelId, str _labelValue)
    {
        XmlElement     xsdAnnotation, xsdAppInfo;
        XmlElement     xsdAnnotationNode;
        XmlAttribute   xsdAnnotationTextAttr, xsdAnnotationRefCodeAttr;
    
    
        /* <xs:annotation>
            <xs:appinfo>
                <xse:label xse:refCode="@DOC123" xse:text="Address of the person (label)" />
            </xs:appinfo>
        </xs:annotation> */
    
        xsdAnnotation = _parentXmlDoc.createElement2('xs:annotation', DocConstantDSP::XmlShemaNamespaceUri);
        xsdAppInfo    = _parentXmlDoc.createElement2('xs:appinfo', DocConstantDSP::XmlShemaNamespaceUri);
        xsdAnnotation.appendChild(xsdAppInfo);
    
        xsdAnnotationNode = _parentXmlDoc.createElement2(
            DocConstantDSP::XmlDsPackageDocentricExtNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageAnnotationLabel, DocConstantDSP::XmlDsPackageDocentricExtNamespaceUrl);
    
        xsdAnnotationTextAttr = _parentXmlDoc.createAttribute2(
            DocConstantDSP::XmlDsPackageDocentricExtNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageAnnotationText, DocConstantDSP::XmlDsPackageDocentricExtNamespaceUrl);
        if (_labelValue && !DocLabelHelper::isLabelIdForDsProvider(_labelValue))
        {
            xsdAnnotationTextAttr.value(_labelValue);
        }
        xsdAnnotationNode.setAttributeNode(xsdAnnotationTextAttr);
    
        xsdAnnotationRefCodeAttr = _parentXmlDoc.createAttribute2(
            DocConstantDSP::XmlDsPackageDocentricExtNamespacePrefix + ':' + DocConstantDSP::XmlDsPackageAnnotationRefCode, DocConstantDSP::XmlDsPackageDocentricExtNamespaceUrl);
        if (_labelId && DocLabelHelper::isLabelIdForDsProvider(_labelId))
        {
            xsdAnnotationRefCodeAttr.value(_labelId);
        }
        xsdAnnotationNode.setAttributeNode(xsdAnnotationRefCodeAttr);
    
    
        xsdAppInfo.appendChild(xsdAnnotationNode);
    
        return xsdAnnotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXsdAttrElementFromEdt</Name>
				<Source><![CDATA[
    public static XmlElement createXsdAttrElementFromEdt(XmlDocument _parentXmlDoc, str _fieldName, int _edtId,
                                                         str _fieldLabelId, str _fieldLabelValue,
                                                         DocXmlRecordBuildingContext _recordBuildingContext)
    {
        XmlElement      xsdAttrElement, xsdAnnotation;
        XmlAttribute    xsdAttrElementName, xsdAttrElementType, xsdAttrUse;
        SysDictType     sysDictType;
        boolean         isURL;
    
    
        if (!_fieldName)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _fieldName is not set');
        }
    
        if (_parentXmlDoc == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _parentXmlDoc is not set');
        }
    
        sysDictType = _recordBuildingContext.getSysDictType(_edtId);
        if (!sysDictType)
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Parameter _edtId %1 is not existing EDT type', _edtId));
        }
    
        isURL = false;
        if (_edtId == extendedTypeNum(URLBase) || sysDictType.isExtending(extendedTypeNum(URLBase)))
        {
            isURL = true;
        }
    
        // Build an xml element e.g. <xs:attribute name="Street" type="xs:string" use="optinal"></xs:attribute>
        xsdAttrElement = _parentXmlDoc.createElement2('xs:attribute', DocConstantDSP::XmlShemaNamespaceUri);
    
        // Create attribute 'name'.
        xsdAttrElementName = _parentXmlDoc.createAttribute('name');
        xsdAttrElementName.value(_fieldName);
    
        xsdAttrElement.setAttributeNode(xsdAttrElementName);
        // Create attribute 'type'.
        xsdAttrElementType = _parentXmlDoc.createAttribute('type');
    
        DocDataSourceProviderHelper::setXsdTypeAttributeValue(xsdAttrElementType, sysDictType.baseType(), sysDictType.enumId(), isURL);
        xsdAttrElement.setAttributeNode(xsdAttrElementType);
    
        // Create attribute 'use'.
        xsdAttrUse = _parentXmlDoc.createAttribute('use');
        xsdAttrUse.value('optional');
        xsdAttrElement.setAttributeNode(xsdAttrUse);
    
        // Create annotation for the field label.
        if (_fieldLabelId || _fieldLabelValue)
        {
            xsdAnnotation = DocDataSourceProviderHelper::createXsdAnnotationLabel(_parentXmlDoc, _fieldLabelId, _fieldLabelValue);
            xsdAttrElement.appendChild(xsdAnnotation);
        }
    
        return xsdAttrElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXsdAttrElementFromValue</Name>
				<Source><![CDATA[
    public static XmlElement createXsdAttrElementFromValue(XmlDocument _parentXmlDoc,
                                                           str _fieldName, anytype _fieldValue, int _enumId,
                                                           str _fieldLabelId, str _fieldLabelValue)
    {
        XmlElement      xsdAttrElement, xsdAnnotation;
        XmlAttribute    xsdAttrElementName, xsdAttrElementType, xsdAttrUse;
    
    
        if (!_fieldName)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _fieldName is not set');
        }
    
        if (_parentXmlDoc == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _parentXmlDoc is not set');
        }
    
        // Build an xml element e.g. <xs:attribute name="Street" type="xs:string"></xs:attribute>
        xsdAttrElement = _parentXmlDoc.createElement2('xs:attribute', DocConstantDSP::XmlShemaNamespaceUri);
    
        // Create attribute 'name'.
        xsdAttrElementName = _parentXmlDoc.createAttribute('name');
        xsdAttrElementName.value(_fieldName);
        xsdAttrElement.setAttributeNode(xsdAttrElementName);
    
        // Create attribute 'type'.
        xsdAttrElementType = _parentXmlDoc.createAttribute('type');
        DocDataSourceProviderHelper::setXsdTypeAttributeValue(xsdAttrElementType, typeOf(_fieldValue), _enumId, false);
        xsdAttrElement.setAttributeNode(xsdAttrElementType);
    
        // Create attribute 'use'.
        xsdAttrUse = _parentXmlDoc.createAttribute('use');
        xsdAttrUse.value('optional');
        xsdAttrElement.setAttributeNode(xsdAttrUse);
    
        // Create annotation for the field label.
        if (_fieldLabelId || _fieldLabelValue)
        {
            xsdAnnotation = DocDataSourceProviderHelper::createXsdAnnotationLabel(_parentXmlDoc, _fieldLabelId, _fieldLabelValue);
            xsdAttrElement.appendChild(xsdAnnotation);
        }
    
        return xsdAttrElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXsdChoiceElement</Name>
				<Source><![CDATA[
    public static XmlElement createXsdChoiceElement(XmlDocument _parentXmlDoc)
    {
        XmlElement    xsdChoice;
        XmlAttribute  minOccAttr, maxOccAttr;
    
        // Create xs:choice element.
        xsdChoice = _parentXmlDoc.createElement2('xs:choice', DocConstantDSP::XmlShemaNamespaceUri);
    
        // Create attributes maxOccurs and minOccurs.
        minOccAttr = _parentXmlDoc.createAttribute('minOccurs');
        minOccAttr.value('0');
        xsdChoice.setAttributeNode(minOccAttr);
        maxOccAttr = _parentXmlDoc.createAttribute('maxOccurs');
        maxOccAttr.value('unbounded');
        xsdChoice.setAttributeNode(maxOccAttr);
    
        return xsdChoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldLabelSet</Name>
				<Source><![CDATA[
    public static Set getDimensionFieldLabelSet()
    {
        Set                     labelSet;
        DimensionAttribute      dimAttr;
        SysDictTable            dictTableBackingEntity;
    
        labelSet = new Set(Types::String);
    
        labelSet.add(literalStr(#XmlAttrDimensionDisplayValueLabel));
        labelSet.add(literalStr(#XmlAttrDimensionDescriptionLabel));
        labelSet.add(literalStr(#XmlAttrLedgerDimensionDisplayValueLabel));
        labelSet.add(literalStr(#XmlElemDimensionDynamicAccountsLabel));
        while select BackingEntityType from dimAttr
        {
            dictTableBackingEntity = new SysDictTable(dimAttr.BackingEntityType);
            if (dictTableBackingEntity && dictTableBackingEntity.labelDefined())
            {
                labelSet.add(dictTableBackingEntity.labelDefined());
            }
        }
    
        return labelSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumFieldLabelSet</Name>
				<Source><![CDATA[
    public static Set getEnumFieldLabelSet()
    {
        Set labelSet;
    
        labelSet = new Set(Types::String);
    
        labelSet.add(literalStr(#XmlAttrEnumValueLabel));
        labelSet.add(literalStr(#XmlAttrEnumNameLabel));
        labelSet.add(literalStr(#XmlAttrEnumTextLabel));
        labelSet.add(literalStr(#XmlAttrEnumLabelLabel));
    
        return labelSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDsPackageXmlNode</Name>
				<Source><![CDATA[
    public static XmlNode selectDsPackageXmlNode(XmlDocument _parentXmlDoc, str _xpath)
    {
        XmlNode              dsPackageXmlNode;
        XmlNamespaceManager  xmlNamespaceMng;
    
        xmlNamespaceMng = new XmlNamespaceManager(_parentXmlDoc.nameTable());
        xmlNamespaceMng.addNamespace(DocConstantDSP::XmlDsPackageNamespacePrefix, DocConstantDSP::XmlDsPackageNamespaceUrl);
    
        dsPackageXmlNode = _parentXmlDoc.selectSingleNode(_xpath, xmlNamespaceMng);
    
        return dsPackageXmlNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectXsdElement</Name>
				<Source><![CDATA[
    public static XmlElement selectXsdElement(XmlDocument _parentXmlDoc, XmlElement _xsdParentElement, str _xpath)
    {
        XmlElement           xsdElement;
        XmlNamespaceManager  xmlNamespaceMng;
    
        xmlNamespaceMng = new XmlNamespaceManager(_parentXmlDoc.nameTable());
        xmlNamespaceMng.addNamespace('xs', DocConstantDSP::XmlShemaNamespaceUri);
    
        xsdElement = _xsdParentElement.selectSingleNode(_xpath, xmlNamespaceMng);
    
        return xsdElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setXmlAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an XML attribute value.
    /// </summary>
    /// <param name = "_xmlAttr">XML attribute</param>
    /// <param name = "_attrValue">Attribute value</param>
    /// <param name = "_attrType">Attribute type</param>
    /// <param name = "_enumId">Enum Id</param>
    /// <returns>True if an XML attribute is correctly set, otherwise false</returns>
    private static boolean setXmlAttributeValue(XmlAttribute _xmlAttr, anytype _attrValue, Types _attrType, int _enumId)
    {
        utcDateTime     utcDateTimeValue;
    
    
        if (_enumId && DocGlobalHelper::isEnumBoolean(_enumId))
        {
            DocDataSourceProviderHelper::setXmlAttrValueForBoolean(_xmlAttr, _attrValue);
            return true;
        }
    
        switch (_attrType)
        {
            case Types::Integer:
                _xmlAttr.value(int2str(_attrValue));
                break;
    
            case Types::Int64:
                _xmlAttr.value(int642str(_attrValue));
                break;
    
            case Types::String:
            case Types::VarString:
            case Types::RString:
                _xmlAttr.value(_attrValue);
                break;
    
            case Types::Container:
                if (_attrValue == conNull())
                {
                    _xmlAttr.value('');
                }
                else
                {
                    try
                    {
                        str base64EncodeBinDataStr = DocGlobalHelper::convertToBase64String(DocGlobalHelper::convertContainerToBytes(_attrValue));
                        _xmlAttr.value(base64EncodeBinDataStr);
                    }
                    catch
                    {
                        _xmlAttr.value('');
                        DocGlobalHelper::handleException(
                                            funcName(),
                                            strFmt("@DocentricAX4:OnlyContainersAndBLOBSAreSupported", _xmlAttr.name()));
                    }
                }
                break;
    
            case Types::UtcDateTime:
                if (_attrValue == utcDateTimeNull())
                {
                    return false;
                }
                else
                {
                    utcDateTimeValue = DateTimeUtil::applyTimeZoneOffset(
                                            _attrValue, DateTimeUtil::getUserPreferredTimeZone());
                    _xmlAttr.value(DateTimeUtil::toStr(utcDateTimeValue));
                }
                break;
    
            case Types::Date:
                if (_attrValue == dateNull())
                {
                    return false;
                }
                else
                {
                    _xmlAttr.value(date2str(_attrValue, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None));
                }
                break;
    
            case Types::Time:
                _xmlAttr.value(time2str(_attrValue, TimeSeparator::Colon, TimeSeparator::Dot));
                break;
    
            case Types::Real:
                _xmlAttr.value(num2str(_attrValue, 1, 10, DecimalSeparator::Dot, ThousandSeparator::None));
                break;
    
            case Types::Enum:
                _xmlAttr.value(enum2value(_attrValue));
                break;
    
            case Types::Guid:
                _xmlAttr.value(DocGlobalHelper::guid2strWithoutBraces(_attrValue));
                break;
    
            default:
                // Added because an CIL error related to an empty container.
                if (_attrType == Types::AnyType && _attrValue == conNull())
                {
                    _xmlAttr.value('');
                }
                else
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported base type: %1', _attrType));
                }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setXmlAttrValueForBoolean</Name>
				<Source><![CDATA[
    private static void setXmlAttrValueForBoolean(XmlAttribute _xmlAttr, anytype _attrValue)
    {
        int enumValueInt;
    
        if (typeOf(_attrValue) == Types::Enum)
        {
            enumValueInt = DocGlobalHelper::getEnumValueAsInteger(_attrValue);
        }
        else if (typeOf(_attrValue) == Types::Integer)
        {
            enumValueInt = _attrValue;
        }
        else
        {
            DocGlobalHelper::handleException(funcName(), strFmt('Provided value (%1) is not of type boolean', _attrValue));
        }
    
        if (enumValueInt == 0)
        {
            _xmlAttr.value('false');
        }
        else
        {
            _xmlAttr.value('true');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setXsdTypeAttributeValue</Name>
				<Source><![CDATA[
    public static void setXsdTypeAttributeValue(XmlAttribute _xsdTypeAttr, anytype _attrType, int _enumId, boolean _isURL)
    {
        if (_enumId && DocGlobalHelper::isEnumBoolean(_enumId))
        {
            _xsdTypeAttr.value('xs:boolean');
            return;
        }
    
        switch (_attrType)
        {
            case Types::Integer:
                _xsdTypeAttr.value('xs:integer');
                break;
    
            case Types::Int64:
                _xsdTypeAttr.value('xs:long');
                break;
    
            case Types::String:
            case Types::VarString:
            case Types::RString:
                if (_isURL)
                {
                    _xsdTypeAttr.value('xs:anyURI');
                }
                else
                {
                    _xsdTypeAttr.value('xs:string');
                }
                break;
    
            case Types::Container:
                _xsdTypeAttr.value('xs:base64Binary');
                break;
    
            case Types::UtcDateTime:
                _xsdTypeAttr.value('xs:dateTime');
                break;
    
            case Types::Date:
                _xsdTypeAttr.value('xs:date');
                break;
    
            case Types::Time:
                _xsdTypeAttr.value('xs:time');
                break;
    
            case Types::Real:
                _xsdTypeAttr.value('xs:decimal');
                break;
    
            case Types::Enum:
                _xsdTypeAttr.value('xs:string');
                break;
    
            case Types::Guid:
                _xsdTypeAttr.value('xs:string');
                break;
    
            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported base type %1', _attrType));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>