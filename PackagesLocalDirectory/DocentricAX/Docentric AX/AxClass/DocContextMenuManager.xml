<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocContextMenuManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using SR = System.Reflection;

/// <summary>
/// The DocContextMenuManager class is a manager for the custom context menu options (menu items) on the form controls.
/// </summary>
public class DocContextMenuManager
{
    private FormRun formRun;
    private Array contextMenuDefinitions = new Array(Types::Class);  // Used to store a list of all enabled custom context menu definitions

    // Used to store a mapping between the ID of the context menu option (menu item) defined by this
    // manager and the ID of the context menu option (menu item) defined in the implementation class
    private Map contextMenuOptionsMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocContextMenuManager class.
    /// </summary>
    /// <param name = "_formRun">An instance of the FormRun object</param>
    protected void new(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the custom context menu options (menu items) on the form controls 
    /// for the specified instance of the FormRun object.
    /// </summary>
    /// <param name = "_formRun">An instance of the FormRun object</param>
    public static void process(FormRun _formRun)
    {
        DocContextMenuManager contextMenuManager = new DocContextMenuManager(_formRun);
        contextMenuManager.processControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through all controls of the current form to register the getContextMenuOptions 
    /// and selectedMenuOption override methods for the specified form controls.
    /// </summary>
    private void processControls()
    {
        // Temporarily disable the info log 
        SysInfologLevel currentInfoLogLevel = infolog.infologLevel();
        infolog.setInfoLogLevel(SysInfologLevel::None);

        try
        {
            // Check if the custom context menu framework is disabled or if a form is DocTableBrowser
            if (DocSystemSetting::isDisabledCustomContextMenuFramework() || formRun.name() == formStr(DocTableBrowser))
            {
                return;
            }

            // Get a list of all custom context menu definitions
            Array contextMenuDefinitionsAll = SysPluginFactory::Instances(identifierStr(Dynamics.AX.Application), classStr(DocContextMenuDefinitionBase), new SysPluginMetadataCollection());

            // Check if any custom context menu definition is enabled
            int j = 1;
            for (int i = 1; i <= contextMenuDefinitionsAll.lastIndex(); i++)
            {
                DocContextMenuDefinitionBase contextMenu = contextMenuDefinitionsAll.value(i);
                if (contextMenu.isEnabled())
                {
                    // Add enabled custom context menu definition to the array
                    contextMenuDefinitions.value(j, contextMenu);
                    j++;
                }
            }
            if (!contextMenuDefinitions.lastIndex())
            {
                return;
            }

            // If at least one context menu definition is enabled, iterates through all form controls to register
            // the getContextMenuOptions and selectedMenuOption methods for the specified form controls.
            FormDesign formDesign = formRun.design();
            for (int i = 1; i <= formDesign.controlCount(); i++)
            {
                this.processControlsInternal(formDesign.controlNum(i));
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }
        finally
        {
            // Restore the info log level
            infolog.setInfoLogLevel(currentInfoLogLevel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControlsInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through all controls of the current form to register the getContextMenuOptions 
    /// and selectedMenuOption override methods for the specified form control.
    /// </summary>
    /// <param name = "_formControl">An instance of the FormControl object</param>
    private void processControlsInternal(FormControl _formControl)
    {
        Object formControlObject = _formControl;

        // Check whether a form control is a container
        if (_formControl.build().isContainer())
        {
            // Recursively iterates through all form controls within a container
            for (int i = 1; i <= formControlObject.controlCount(); i++)
            {
                this.processControlsInternal(formControlObject.controlNum(i));
            }
        }
        else
        {
            // Check whether a form control has the registerOverrideMethod method
            SysDictClass dictClass = new SysDictClass(formControlObject.handle());
            if (dictClass && dictClass.hasObjectMethod(identifierStr(registerOverrideMethod)))
            {
                // Check whether the getContextMenuOption method is already implemented for the specified form control
                System.Type type = formControlObject.GetType();
                SR.MethodInfo methodInfo = type.GetMethod(methodStr(FormControl, getContextMenuOptions), SR.BindingFlags::Instance | SR.BindingFlags::Public);
                if (methodInfo && methodInfo.IsHideBySig && ((methodInfo.Attributes & SR.MethodAttributes::VtableLayoutMask) == SR.MethodAttributes::NewSlot))
                {
                    try
                    {
                        // Register override methods for the current form control
                        formControlObject.registerOverrideMethod(methodStr(FormControl, getContextMenuOptions), methodStr(DocContextMenuManager, getContextMenuOptions), this);
                        formControlObject.registerOverrideMethod(methodStr(FormControl, selectedMenuOption), methodStr(DocContextMenuManager, selectedMenuOption), this);
                    }
                    catch
                    {
                        exceptionTextFallThrough();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized context menu for the specified form control.
    /// </summary>
    /// <param name = "_formControl">An instance of the FormControl object</param>
    /// <returns>Serialized context menu for the specified form control</returns>
    protected str getContextMenuOptions(FormControl _formControl)
    {
        ContextMenu contextMenu = new ContextMenu();
        List menuOptions = new List(Types::Class);
        int menuOptionIdNew = 0;  // A menu option (menu item) ID defined by this manager

        // Create a map - (Menu option (menu item) ID defined by this manager, [Index of the implementation class, Menu option (menu item) ID defined in the implementation class])
        contextMenuOptionsMap = new Map(Types::Integer, Types::Container); 

        // Iterate through all the custom context menu definitions
        for (int i = 1; i <= contextMenuDefinitions.lastIndex(); i++)
        {
            // Get an instance of the custom context definition object
            DocContextMenuDefinitionBase contextMenuDefinition = contextMenuDefinitions.value(i);

            // Get the list of custom context menu options (menu items) defined and iterate through all of them
            ListEnumerator menuOptionsEnum = contextMenuDefinition.getContextMenuOptions(_formControl).ContextMenuOptions().getEnumerator();
            while (menuOptionsEnum.moveNext())
            {
                ContextMenuOption menuOption = menuOptionsEnum.current();
                int menuOptionIdOrig = menuOption.MenuOptionId();

                menuOptionIdNew++;
                // Add a mapping between the ID of the context menu option (menu item) defined by this manager 
                // and the ID of the context menu option (menu item) defined in the implementation class
                contextMenuOptionsMap.add(menuOptionIdNew, [i, menuOptionIdOrig]);

                menuOption.MenuOptionId(menuOptionIdNew);
                menuOptions.addEnd(menuOption);
            }
        }

        contextMenu.ContextMenuOptions(menuOptions);

        return contextMenu.Serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedMenuOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs an action specified for the selected menu option (menu item) from the context menu.
    /// </summary>
    /// <param name = "_selectedOption">Selected menu option (menu item) from the context menu</param>
    /// <param name = "_formControl">An instance of the FormControl object</param>
    protected void selectedMenuOption(int _selectedOption, FormControl _formControl)
    {
        // Check if the map contains any custom context menu option (menu item)
        if (!contextMenuOptionsMap || !contextMenuOptionsMap.elements())
        {
            return;
        }

        // Find the selected context menu option (menu item) in the map
        container contextMenuOptionCnt = contextMenuOptionsMap.lookup(_selectedOption);
        if (contextMenuOptionCnt != conNull())
        {
            // Call the action for the specified context menu option (menu item) in the implementation class
            DocContextMenuDefinitionBase contextMenuDefinition = contextMenuDefinitions.value(conPeek(contextMenuOptionCnt, 1));
            contextMenuDefinition.selectedMenuOption(conPeek(contextMenuOptionCnt, 2), _formControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormRun_onFormRunCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the onFormRunCompleted delegate in the FormRun object.
    /// </summary>
    /// <param name="_formRunInstance">An instance of the FormRun object</param>
    [SubscribesTo(classStr(FormRun), staticDelegateStr(FormRun, onFormRunCompleted))]
    public static void FormRun_onFormRunCompleted(FormRun _formRunInstance)
    {
        // Enable adding custom context menu options (menu items) to the context menu for form controls
        DocContextMenuManager::process(_formRunInstance);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>