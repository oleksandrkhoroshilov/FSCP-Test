<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocOutputManagerMessenger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocOutputManagerMessenger class is used to process appropriate messages for various output results.
/// </summary>
public class DocOutputManagerMessenger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayFailureMsgRetrieveTemplate</Name>
				<Source><![CDATA[
    public static void displayFailureMsgRetrieveTemplate(DocPrintReportSettings _printReportSettings, str _errorSource, str _errorCode = '')
    {
        str msg = strFmt("@DocentricAX:RetrievingTemplateError", _printReportSettings.parmTemplateId(), _printReportSettings.parmReportId(),
                         _printReportSettings.parmCompanyId(), _printReportSettings.parmLanguageId());

        DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintToByteArray</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintToByteArray(DocPrintReportSettings _printReportSettings, str _errorSource = '')
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            msg = strFmt("@DocentricAX:PrintingReportToByteArrayFailedReportCaption", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
        }
        else
        {
            msg = strFmt("@DocentricAX:PrintingReportToByteArrayFailed", _printReportSettings.parmReportId());
        }

        DocGlobalHelper::handleError(msg, true, _errorSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintToEmfImages</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintToEmfImages(DocPrintReportSettings _printReportSettings, str _errorSource)
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            msg = strFmt("@DocentricAX:PrintingReportToImagesFailedReportCaption", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
        }
        else
        {
            msg = strFmt("@DocentricAX:PrintingReportToImagesFailed", _printReportSettings.parmReportId());
        }

        DocGlobalHelper::handleError(msg, true, _errorSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintToDocentricTmpFile</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintToDocentricTmpFile(DocPrintReportSettings _printReportSettings, str _errorSource)
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            msg = strFmt("@DocentricAX:PrintingReportToTmpFileFailedReportCaption", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
        }
        else
        {
            msg = strFmt("@DocentricAX:PrintingReportToTmpFileFailed", _printReportSettings.parmReportId());
        }

        DocGlobalHelper::handleError(msg, true, _errorSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintToScreen</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintToScreen(DocPrintReportSettings _printReportSettings, str _errorSource, str _errorCode = '', boolean _isPreviewMode = false)
    {
        str msg;

        if (!_isPreviewMode)
        {
            if (_printReportSettings.parmReportCaption() &&
                _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
            {
                msg = strFmt("@DocentricAX:PrintingReportToScreenFailedReportCaption", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
            }
            else
            {
                msg = strFmt("@DocentricAX:PrintingReportToScreenFailed", _printReportSettings.parmReportId());
            }
        }
        else
        {
            if (_printReportSettings.parmReportCaption() &&
                _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
            {
                msg = strFmt("@DocentricAX2:PreviewBeforePrintErrorWithReportCaption", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(), _printReportSettings.parmPrintDestination());
            }
            else
            {
                msg = strFmt("@DocentricAX2:PreviewBeforePrintError", _printReportSettings.parmReportId(), _printReportSettings.parmPrintDestination());
            }
        }

        DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySuccessMsgPrintToArchive</Name>
				<Source><![CDATA[
    public static void displaySuccessMsgPrintToArchive(DocPrintReportSettings _printReportSettings)
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            msg = strFmt("@DocentricAX:ReportExecutedSuccessfullyToPrintArchive", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
        }
        else
        {
            msg = strFmt("@DocentricAX:ReportIsSuccessfullyExecutedToPrintArchive", _printReportSettings.parmReportId());
        }

        msg += ' ' + DocOutputManagerMessenger::getDocuTypeStorageMsg(_printReportSettings.parmSaveToArchiveDocuTypeId(), _printReportSettings.isEnabledSaveToArchiveSharePointMetadata());

        DocGlobalHelper::handleInfo(msg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintToArchive</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintToArchive(DocPrintReportSettings _printReportSettings, str _errorSource, str _errorCode = '')
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            msg = strFmt("@DocentricAX:SavingToPrintArchiveFailedGenReportCaption", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
        }
        else
        {
            msg = strFmt("@DocentricAX:SavingToPrintArchiveFailedGen", _printReportSettings.parmReportId());
        }

        msg += ' ' + DocOutputManagerMessenger::getDocuTypeStorageMsg(_printReportSettings.parmSaveToArchiveDocuTypeId(), _printReportSettings.isEnabledSaveToArchiveSharePointMetadata());

        DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocuTypeStorageMsg</Name>
				<Source><![CDATA[
    public static str getDocuTypeStorageMsg(str _docuTypeId, boolean _saveToSharePointWithMetadataFields)
    {
        str storageMsgDocuType = '';

        DocuType docuType;
        select firstonly docuType
        where docuType.TypeId == _docuTypeId;
        
        if (docuType)
        {
            if (docuType.FilePlace == DocuFilePlace::SharePoint)
            {
                storageMsgDocuType = _saveToSharePointWithMetadataFields ?
                    strFmt("@DocentricAX4:ViaDocuTypeSharePointWithMetadata", docuType.TypeId, docuType.sharePointUrl()) :
                    strFmt("@DocentricAX4:ViaDocuTypeSharePoint", docuType.TypeId, docuType.sharePointUrl());
            }
            else if (docuType.FilePlace == DocuFilePlace::Archive)
            {
                storageMsgDocuType = strFmt("@DocentricAX4:ViaDocuType", docuType.TypeId);
            }
        }
        return storageMsgDocuType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMsgPrintToArchiveCommon</Name>
				<Source><![CDATA[
    public static void displayMsgPrintToArchiveCommon(DocPrintReportSettings _printReportSettings, boolean _isSuccess)
    {
        str msg;

        if (_isSuccess)
        {
            DocOutputManagerMessenger::displaySuccessMsgPrintToArchive(_printReportSettings);
        }
        else
        {
            if (_printReportSettings.parmReportCaption() &&
                _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
            {
                msg = strFmt("@DocentricAX5:SavingToPrintArchiveFailedReportCaption", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
            }
            else
            {
                msg = strFmt("@DocentricAX:SavingToPrintArchiveFailed", _printReportSettings.parmReportId());
            }
            msg += ' ' + DocOutputManagerMessenger::getDocuTypeStorageMsg(_printReportSettings.parmSaveToArchiveDocuTypeId(), _printReportSettings.isEnabledSaveToArchiveSharePointMetadata());
            
            DocGlobalHelper::handleWarning(msg);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayGeneralSuccessMsg</Name>
				<Source><![CDATA[
    public static void displayGeneralSuccessMsg(DocPrintReportSettings _printReportSettings)
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            msg = strFmt("@DocentricAX:ReportSuccessfullyExecuted", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
        }
        else
        {
            msg = strFmt("@DocentricAX:ReportExecutedSuccess", _printReportSettings.parmReportId());
        }

        DocGlobalHelper::handleInfo(msg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySuccessMsgPrintReportToEmail</Name>
				<Source><![CDATA[
    public static void displaySuccessMsgPrintReportToEmail(DocPrintReportSettings _printReportSettings,
                                                           DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                           DocPrintReportToEmailExecutionInfo _printToEmailExecutionInfo)
    {
        str msg;

        // Display general success message.
        //DocOutputManagerMessenger::displayGeneralSuccessMsg(_printReportSettings);
    
        // Send email manually if the OpenEmailBeforeSending option is turned on and the report is not executing in batch.
        boolean sendEmailManually = _emailPrintDestSettings.parmOpenEmailBeforeSending() && !DocGlobalHelper::isNonInteractiveSession();

        // Print success messages for the Email print destination.
        if (!sendEmailManually)
        {
            if (_emailPrintDestSettings.getEmailingMode() == DocEmailSendingMode::Synchronous) 
            {
                if (_emailPrintDestSettings.parmEmailCc() || _emailPrintDestSettings.parmEmailBcc())
                {
                    msg = strFmt("@DocentricAX:ReportSuccessfullySentToToEmail", _printReportSettings.parmReportCaption(),
                             _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailTo());
                    DocGlobalHelper::handleInfo(msg);

                    if (_emailPrintDestSettings.parmEmailCc())
                    {
                        msg = strFmt("@DocentricAX:ReportSuccessfullySentToCcEmail", _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailCc());
                        DocGlobalHelper::handleInfo(msg);
                    }
                    if (_emailPrintDestSettings.parmEmailBcc())
                    {
                        msg = strFmt("@DocentricAX:ReportSuccessfullySentToBccEmail", _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailBcc());
                        DocGlobalHelper::handleInfo(msg);
                    }
                }
                else
                {
                    msg = strFmt("@DocentricAX:ReportPrintedToEmailSuccess", _printReportSettings.parmReportCaption(),
                             _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailTo());
                    DocGlobalHelper::handleInfo(msg);
                }
            }
            else // EmailingMode == EmailProcessing
            {
                MenuFunction menuFunctionSysOutgoingEmailTable = new MenuFunction(menuItemDisplayStr(SysOutgoingEmailTable), MenuItemType::Display);
                msg = strFmt("@DocentricAX:ReportPrintedToEmailSuccessEmailProcessing", _printReportSettings.parmReportCaption(),
                             _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailTo(), menuFunctionSysOutgoingEmailTable.label());
                DocGlobalHelper::handleInfo(msg);
            }
        }
        else //  if (_emailPrintDestSettings.parmOpenEmailBeforeSending())
        {
            msg = strFmt("@DocentricAX:EmailWithReportIsPrepared", _printReportSettings.getReportCaptionOrId());
            DocGlobalHelper::handleInfo(msg);
        }

        // Save to print archive: print the failure or success message.
        if (_printReportSettings.parmSaveToArchive())
        {
            DocOutputManagerMessenger::displayMsgPrintToArchiveCommon(_printReportSettings, _printToEmailExecutionInfo.parmSaveToArchiveSuccess());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintReportToEmail</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintReportToEmail(DocPrintReportSettings _printReportSettings, 
                                                           DocPrintDestSettingsEmail _emailPrintDestSettings,
                                                           str _errorSource, str _errorCode = '')
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            if (_emailPrintDestSettings.parmEmailTo())
            {
                msg = strFmt("@DocentricAX:PrintingReportToEmailFailedReportCaption",
                             _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailTo());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
            else
            {
                msg = strFmt("@DocentricAX:PrintingReportToEmailFailedGenReportCaption",
                             _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
        }
        else
        {
            if (_emailPrintDestSettings.parmEmailTo())
            {
                msg = strFmt("@DocentricAX:PrintingReportToEmailFailed", _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailTo());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
            else
            {
                msg = strFmt("@DocentricAX:PrintingReportToEmailFailedGen", _printReportSettings.parmReportId());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySuccessMsgPrintReportToPrinter</Name>
				<Source><![CDATA[
    public static void displaySuccessMsgPrintReportToPrinter(DocPrintReportSettings _printReportSettings, 
                                                             DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                             DocPrintReportToPrinterExecutionInfo _printToPrinterExecutionInfo)
    {
        // Display general success message.
        //DocOutputManagerMessenger::displayGeneralSuccessMsg(_printReportSettings);
        
        str resolvedPrinter = DocPrintDestSettingsPrinter::formatPrinterName(
            _printerPrintDestSettings.parmSelectedPrinterName(), _printerPrintDestSettings.getPrinterPath());

        str msg = strFmt("@DocentricAX:ReportPrintedToPrinterSuccess", _printReportSettings.parmReportCaption(),
                         _printReportSettings.parmReportId(), resolvedPrinter);
        if (_printerPrintDestSettings.parmPrintAsPdf())
        {
            msg = msg + ' ' + strFmt("@DocentricAX2:PrintedAsPDFSuccessMsg", _printerPrintDestSettings.parmPrintAsPdfFilename());
        }
        DocGlobalHelper::handleInfo(msg);

        
        if (_printerPrintDestSettings.parmNumberOfCopies() > 1)
        {
            msg = strFmt("@DocentricAX:NumberOfPrintedCopies", _printerPrintDestSettings.parmNumberOfCopies());
            DocGlobalHelper::handleInfo(msg);
        }
        if (!_printerPrintDestSettings.parmPrintAllPages())
        {
            msg = strFmt("@DocentricAX:PrintedPageRange", _printerPrintDestSettings.parmPrintFromPage(), _printerPrintDestSettings.parmPrintToPage());
            DocGlobalHelper::handleInfo(msg);
        }
        
        // Save to print archive: print the failure or success message.
        if (_printReportSettings.parmSaveToArchive())
        {
            DocOutputManagerMessenger::displayMsgPrintToArchiveCommon(_printReportSettings, _printToPrinterExecutionInfo.parmSaveToArchiveSuccess());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintReportToPrinter</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintReportToPrinter(DocPrintReportSettings _printReportSettings, 
                                                             DocPrintDestSettingsPrinter _printerPrintDestSettings,
                                                             DocPrintReportToPrinterExecutionInfo _printToPrinterExecutionInfo,
                                                             str _errorSource, str _errorCode = '')
    {
        str msg;

        str resolvedPrinter = DocPrintDestSettingsPrinter::formatPrinterName(
            _printerPrintDestSettings.parmSelectedPrinterName(), _printerPrintDestSettings.resolvePrinterName());

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            if (resolvedPrinter)
            {
                msg = strFmt("@DocentricAX:PrintingReportToPrinterFailedReportCaption",
                             _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(), resolvedPrinter);
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
            else
            {
                msg = strFmt("@DocentricAX:PrintingReportToPrinterFailedGenReportCaption",
                             _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
        }
        else
        {
            if (resolvedPrinter)
            {
                msg = strFmt("@DocentricAX:PrintingReportToPrinterFailed",
                             _printReportSettings.parmReportId(), resolvedPrinter);
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
            else
            {
                msg = strFmt("@DocentricAX:PrintingReportToPrinterFailedGen", _printReportSettings.parmReportId());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
        }

        if (_printerPrintDestSettings.parmPrintAsPdf())
        {
            msg = strFmt("@DocentricAX2:PrintedAsPDFFailureMsg", _printerPrintDestSettings.parmPrintAsPdfFilename());
            DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
        }
        else if (_printToPrinterExecutionInfo != null && _printToPrinterExecutionInfo.parmPrintJobSettingsXmlStr())
        {
            msg = strFmt("@DocentricAX:PrintJobSettings", _printReportSettings.parmReportId(),
                         resolvedPrinter, _printToPrinterExecutionInfo.parmPrintJobSettingsXmlStr());
            DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySuccessMsgPrintReportToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the appropriate messages for various output results for File print destination.
    /// </summary>
    /// <param name = "_printReportSettings">An instance of the DocPrintReportSettings class</param>
    /// <param name = "_filePrintDestSettings">An instance of the DocPrintDestSettingsFile class</param>
    /// <param name = "_printToFileExecutionInfo">An instance of the DocPrintReportToFileExecutionInfo class</param>
    public static void displaySuccessMsgPrintReportToFile(DocPrintReportSettings _printReportSettings,
                                                          DocPrintDestSettingsFile _filePrintDestSettings,
                                                          DocPrintReportToFileExecutionInfo _printToFileExecutionInfo)
    {
        str entityTableLabel, msg, msgOutputFilename;
        
        // Show general success message.    
        //DocOutputManagerMessenger::displayGeneralSuccessMsg(_printReportSettings);

        if (!_filePrintDestSettings.parmSendOutputFileToUser() && 
            !_filePrintDestSettings.parmSaveToSharePoint() && 
            !_filePrintDestSettings.parmSaveToAttachments() &&
            !_filePrintDestSettings.parmSaveToAzureBlobStorage() &&
            !_filePrintDestSettings.parmSaveToAzureFiles() &&
            !_filePrintDestSettings.parmSaveToFileSystem())
        {
            // Let the user know that he didn't check the option 'Download the output file'.
            msg = strFmt("@DocentricAX:ReportPrintedToFileNoResultWarning", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
            DocGlobalHelper::handleWarning(msg);
        }

        // Output filename.
        msgOutputFilename = '. ' + strFmt("@DocentricAX:ReportOutputFilenameSuccessMsg", _printToFileExecutionInfo.parmReportOutputFilename());

        // Save to attachments message.
        if (_filePrintDestSettings.parmSaveToAttachments())
        {
            entityTableLabel = '';
            Common saveToAttachmentsRecord = _filePrintDestSettings.getSaveToAttachmentsRecord(_printReportSettings);
            if (saveToAttachmentsRecord.TableId && saveToAttachmentsRecord.RecId)
            {
                entityTableLabel = DocLabelHelper::getLabelForTable(saveToAttachmentsRecord.TableId);
                if (!entityTableLabel)
                {
                    entityTableLabel = tableId2name(saveToAttachmentsRecord.TableId);
                }
            }

            str saveToAttachmentsRecordStr = _filePrintDestSettings.getSaveToAttachmentsRecordStr(_printReportSettings);
            if (saveToAttachmentsRecordStr)
            {
                saveToAttachmentsRecordStr = strFmt(', %1', saveToAttachmentsRecordStr);
            }

            str docuTypeStorageMsg = ' ' + DocOutputManagerMessenger::getDocuTypeStorageMsg(_filePrintDestSettings.parmSaveToAttachmentsDocuTypeId(),
                                                                                            _filePrintDestSettings.isEnabledSaveToAttachmentsSharePointMetadata());

            if (_printToFileExecutionInfo.parmSaveToAttachmentsSuccess())
            {
                // Success.
                if (!_printToFileExecutionInfo.parmSaveToAttachments_AttachmentAlreadyExists())
                {
                    // Attachment didn't previosly exist, so we attached it successfully.
                    msg = strFmt("@DocentricAX:ReportSavedToAttachments", _printReportSettings.parmReportCaption(),
                                 _printReportSettings.parmReportId(), entityTableLabel) + saveToAttachmentsRecordStr;
                }
                else
                {
                    // Attachment previously exists, so we attached a new one or replaced the existing one.
                    // Note that if the overriding mode is not to save anything, this cannot be a success.
                    if (_filePrintDestSettings.parmSaveToAttachmentsOverridingMode() == DocAttachmentsOverridingMode::CreateNewAttachment)
                    {
                        msg = strFmt("@DocentricAX:ReportSavedToAttachments", _printReportSettings.parmReportCaption(),
                                     _printReportSettings.parmReportId(), entityTableLabel) + saveToAttachmentsRecordStr;
                    }
                    else // if (_filePrintDestSettings.parmSaveToAttachmentsOverridingMode == DocAttachmentsOverridingMode::ReplaceAttachmentFile)
                    {
                        msg = strFmt("@DocentricAX:ReportReattachedSuccess", _printReportSettings.parmReportCaption(),
                                     _printReportSettings.parmReportId(), entityTableLabel) + saveToAttachmentsRecordStr;
                    }
                }
                msg += docuTypeStorageMsg + msgOutputFilename;
                DocGlobalHelper::handleInfo(msg);
            }
            else
            {
                // Failure.
                // Underlaying record was resolved:
                if (entityTableLabel)
                {
                    if (!_printToFileExecutionInfo.parmSaveToAttachments_AttachmentAlreadyExists())
                    {
                        msg = strFmt("@DocentricAX:SavingToAttachmentFailed", _printReportSettings.parmReportId(), entityTableLabel)
                              + saveToAttachmentsRecordStr + docuTypeStorageMsg;
                    }
                    else
                    {
                        if (_filePrintDestSettings.parmSaveToAttachmentsOverridingMode() == DocAttachmentsOverridingMode::DoNotSave)
                        {
                            msg = strFmt("@DocentricAX:ReportReattachedFailureSkipSaving", _printToFileExecutionInfo.parmReportOutputFilename(), 
                                         entityTableLabel, _printReportSettings.parmReportId(), docuTypeStorageMsg) + saveToAttachmentsRecordStr + '.';
                        }
                        else if (_filePrintDestSettings.parmSaveToAttachmentsOverridingMode() == DocAttachmentsOverridingMode::ReplaceAttachmentFile)
                        {
                            msg = strFmt("@DocentricAX:ReportReattachedFailure", _printToFileExecutionInfo.parmReportOutputFilename(),
                                         entityTableLabel, _printReportSettings.parmReportId(), docuTypeStorageMsg) + saveToAttachmentsRecordStr + '.';
                        }
                        else // if (_filePrintDestSettings.parmSaveToAttachmentsOverridingMode() == DocAttachmentsOverridingMode::CreateNewAttachment)
                        {
                            msg = strFmt("@DocentricAX:SavingToAttachmentFailed", _printReportSettings.parmReportId(), entityTableLabel)
                                  + saveToAttachmentsRecordStr + docuTypeStorageMsg;
                        }
                    }
                }

                // Underlaying record was not resolved:
                else
                {
                    if (_filePrintDestSettings.parmSaveToAttachmentsRecordType() == DocSaveToAttachmentsRecordType::ContextRecord)
                    {
                        msg = strFmt("@DocentricAX:SavingToAttachmentFailedGenCR", _printReportSettings.parmReportId());
                    }
                    else if (_filePrintDestSettings.parmSaveToAttachmentsRecordType() == DocSaveToAttachmentsRecordType::CustomRecord)
                    {
                        msg = strFmt("@DocentricAX:SavingToAttachmentFailedGenCustomRecord", _printReportSettings.parmReportId());
                    }
                    else
                    {
                        msg = strFmt("@DocentricAX:SavingToAttachmentFailedGen", _printReportSettings.parmReportId(), _filePrintDestSettings.parmSaveToAttachmentsRecordType());
                    }
                }
                
                DocGlobalHelper::handleWarning(msg);
            }
        }

        // Save to SharePoint.
        if (_filePrintDestSettings.parmSaveToSharePoint())
        {
            str sharePointHostName = '';
            str sharePointSiteName = '';
            if (_filePrintDestSettings.parmSharePointSiteUrl())
            {
                sharePointHostName = DocSharePointHelperV3::getSharePointHostNameFromUrl(_filePrintDestSettings.parmSharePointSiteUrl());
                sharePointSiteName = DocSharePointHelperV3::getSharePointSiteNameFromUrl(_filePrintDestSettings.parmSharePointSiteUrl());
            }

            str msgSharePointMetadata = _filePrintDestSettings.isEnabledSaveToSharePointMetadata() ? ' ' + "@DocentricAX4:WithMetadataFields" : '';
            if (_printToFileExecutionInfo.parmSaveToSharePointSuccess())
            {
                // Success.
                msg = strFmt("@DocentricAX:ReportSuccessfullySavedToSharePoint", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(),
                             sharePointHostName, sharePointSiteName, _filePrintDestSettings.parmSharePointFolderPath()) + msgSharePointMetadata + msgOutputFilename;
                DocGlobalHelper::handleInfo(msg);

                //msg = strFmt("@DocentricAX:SharePointOutputFileUrl", _printToFileExecutionInfo.parmSaveToSharePointFileUrl());
                //DocGlobalHelper::handleInfo(msg);
            }
            else
            {
                // Failure.
                if (_filePrintDestSettings.parmSharePointSiteUrl() != '' && _filePrintDestSettings.parmSharePointFolderPath() != '')
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToSharePointSiteAndFolder", _printReportSettings.parmReportId(), 
                                 sharePointHostName, sharePointSiteName, _filePrintDestSettings.parmSharePointFolderPath());
                }
                else if (_filePrintDestSettings.parmSharePointSiteUrl() != '')
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToSharePointSite", _printReportSettings.parmReportId(), sharePointHostName, sharePointSiteName);
                }
                else
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToSharePoint", _printReportSettings.parmReportId());
                }
                msg += msgSharePointMetadata;
                DocGlobalHelper::handleWarning(msg);
            }
        }

        // Save to Azure Blob storage.
        if (_filePrintDestSettings.parmSaveToAzureBlobStorage())
        {
            str blobName = _printToFileExecutionInfo.parmSaveToAzureBsBlobName();
            str containerName = _filePrintDestSettings.parmAzureBsContainerName();
         
            str azureStorageId = _filePrintDestSettings.parmAzureBsAccountId();
            str storageAccount = azureStorageId == '' ? '' : ((containerName != '' || blobName != '') ? (strFmt("@DocentricAX3:AzureStorageAccountStorageAccountInfo", azureStorageId) + ', ') : strFmt('(' + "@DocentricAX3:AzureStorageAccountStorageAccountInfo" + ')', azureStorageId));
      
            if (_printToFileExecutionInfo.parmSaveToAzureBlobStorageSuccess())
            {
                // Success.
                msg = strFmt("@DocentricAX:ReportSuccessfullySavedToAzureBlobStorage", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(),
                             storageAccount, containerName, blobName) + msgOutputFilename;
                DocGlobalHelper::handleInfo(msg);
            }
            else
            {
                // Failure.
                if (containerName != '' && blobName != '')
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToAzureBlobStorageConAndBlob", _printReportSettings.parmReportId(), storageAccount, containerName, blobName);
                }
                else if (containerName != '')
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToAzureBlobStorageCon", _printReportSettings.parmReportId(), storageAccount, containerName);
                }
                else
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToAzureBlobStorage", _printReportSettings.parmReportId(), storageAccount);
                }
                DocGlobalHelper::handleWarning(msg);
            }
        }

        // Save to Azure Files.
        if (_filePrintDestSettings.parmSaveToAzureFiles())
        {
            str azureFileShareName = _filePrintDestSettings.parmAzureFilesFileShareName();
            str azureFileDirectoryPath = _filePrintDestSettings.parmAzureFilesDirectoryPath();
         
            str azureStorageId = _filePrintDestSettings.parmAzureFilesAccountId();
            str storageAccount = azureStorageId == '' ? '' : ((azureFileShareName != '' || azureFileDirectoryPath != '') ? (strFmt("@DocentricAX3:AzureStorageAccountStorageAccountInfo", azureStorageId) + ', ') : strFmt('(' + "@DocentricAX3:AzureStorageAccountStorageAccountInfo" + ')', azureStorageId));
      
            if (_printToFileExecutionInfo.parmSaveToAzureFilesSuccess())
            {
                // Success.
                msg = strFmt("@DocentricAX4:ReportSuccessfullySavedToAzureFilesStorage", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(),
                             storageAccount, azureFileShareName, azureFileDirectoryPath) + msgOutputFilename;
                DocGlobalHelper::handleInfo(msg);
            }
            else
            {
                // Failure.
                if (azureFileShareName != '' && azureFileDirectoryPath != '')
                {
                    msg = strFmt("@DocentricAX4:ReportFailedToBeSavedToAzureFilesStorageShareNameAndPath", _printReportSettings.parmReportId(), storageAccount, azureFileShareName, azureFileDirectoryPath);
                }
                else if (azureFileShareName != '')
                {
                    msg = strFmt("@DocentricAX4:ReportFailedToBeSavedToAzureFilesStorageShareName", _printReportSettings.parmReportId(), storageAccount, azureFileShareName);
                }
                else
                {
                    msg = strFmt("@DocentricAX4:ReportFailedToBeSavedToAzureFilesStorage", _printReportSettings.parmReportId(), storageAccount);
                }
                DocGlobalHelper::handleWarning(msg);
            }
        }

        // Save to File system.
        if (_filePrintDestSettings.parmSaveToFileSystem())
        {
            //str fullFileName = _printToFileExecutionInfo.parmSaveToFileSystemFullOutputFilename();
            str folderName = _filePrintDestSettings.parmFileSystemFilePath();

            if (_printToFileExecutionInfo.parmSaveToFileSystemSuccess())
            {
                // Success.
                msg = strFmt("@DocentricAX:ReportSuccessfullySavedToFileSystem", _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(), folderName) 
                      + msgOutputFilename;
                DocGlobalHelper::handleInfo(msg);
            }
            else
            {
                // Failure.
                if (folderName != '')
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToFileSystemFolder", _printReportSettings.parmReportId(), folderName);
                }
                else
                {
                    msg = strFmt("@DocentricAX:ReportFailedToBeSavedToFileSystem", _printReportSettings.parmReportId());
                }
                DocGlobalHelper::handleWarning(msg);
            }
        }

        // Save to print archive: print the failure or success message.
        if (_printReportSettings.parmSaveToArchive())
        {
            DocOutputManagerMessenger::displayMsgPrintToArchiveCommon(_printReportSettings, _printToFileExecutionInfo.parmSaveToArchiveSuccess());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFailureMsgPrintReportToFile</Name>
				<Source><![CDATA[
    public static void displayFailureMsgPrintReportToFile(DocPrintReportSettings _printReportSettings,
                                                          DocPrintReportToFileExecutionInfo _printToFileExecutionInfo,
                                                          str _errorSource, str _errorCode = '')
    {
        str msg;

        if (_printReportSettings.parmReportCaption() &&
            _printReportSettings.parmReportCaption() != _printReportSettings.parmReportId())
        {
            if (_printToFileExecutionInfo.parmReportOutputFilename())
            {
                msg = strFmt("@DocentricAX:PrintingReportToFileFailedReportCaption",
                             _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId(), _printToFileExecutionInfo.parmReportOutputFilename());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
            else
            {
                msg = strFmt("@DocentricAX:PrintingReportToFileFailedGenReportCaption",
                             _printReportSettings.parmReportCaption(), _printReportSettings.parmReportId());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
        }
        else
        {
            if (_printToFileExecutionInfo.parmReportOutputFilename())
            {
                msg = strFmt("@DocentricAX:PrintingReportToFileFailed", _printReportSettings.parmReportId(), _printToFileExecutionInfo.parmReportOutputFilename());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
            else
            {
                msg = strFmt("@DocentricAX:PrintingReportToFileFailedGen", _printReportSettings.parmReportId());
                DocGlobalHelper::handleError(msg, true, _errorSource, false, _errorCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>docGenErrorsToExceptionLogIfSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the document generation errors messages to <c>SysExceptionLog</c> table
    /// if the flag DocReportParameters.UseExceptionLogForDgErrors is set.
    /// </summary>
    /// <param name="_reportId">
    /// Report ID.
    /// </param>
    /// <param name="_reportCaption">
    /// Report caption.
    /// </param>
    /// <param name="_docGenErrorArray">
    /// Array of document generation errors if any.
    /// </param>
    public static void docGenErrorsToExceptionLogIfSetup(DocReportId _reportId, DocReportCaption _reportCaption,
                                                         System.String[] _docGenErrorArray)
    {
        str                docGenErrors;
        int                docGenErrorArrayLength;
        Counter            i;
        str                docGenError;
    
    
        if (_docGenErrorArray == null)
        {
            return;
        }
    
        // Write to the exceptions log document generation errors if any
        // but only if the flag DocReportParameters.UseExceptionLogForDgErrors is set.
        if (DocParameters::find().UseExceptionLogForDgErrors)
        {
            docGenErrors = '';
    
            // Check if there are document generation errors.
            docGenErrorArrayLength = _docGenErrorArray.get_Length();
            if (docGenErrorArrayLength  > 0)
            {
                if (!System.String::IsNullOrEmpty(_docGenErrorArray.get_Item(0)))
                {
                    docGenError = _docGenErrorArray.get_Item(0);
                    docGenErrors = '>> ' + docGenError;
                }
                for (i = 1; i < docGenErrorArrayLength; i++)
                {
                    if (!System.String::IsNullOrEmpty(_docGenErrorArray.get_Item(i)))
                    {
                        docGenError = _docGenErrorArray.get_Item(i);
                        docGenErrors = docGenErrors + '\n' + '>> ' + docGenError;
                    }
                }
    
                if (docGenErrors)
                {
                    docGenErrors = strFmt("@DocentricAX:DocGenError", _reportCaption, _reportId) +
                                   ':\n' + docGenErrors;
                    DocGlobalHelper::writeToExceptionLog(docGenErrors, Exception::Warning);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>