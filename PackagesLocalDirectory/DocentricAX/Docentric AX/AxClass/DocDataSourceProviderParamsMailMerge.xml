<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderParamsMailMerge</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocDataSourceProviderParamsMailMerge implements SysPackable
{
    str                         templateId;
    TableId                     primaryTableId;
    TableName                   primaryTableName;
    RefRecId                    primaryTableRecId;
    DocuTypeId                  docuTypeId;
    LanguageId                  templateLanguageId;
    boolean                     isDataSourceQueryBased;
    List                        dsProviderQueryNameList;  // List(str _queryName)


    #define.packVersion(1)
    #localmacro.currentList
        version,
        templateId,
        primaryTableName,
        primaryTableRecId,
        docuTypeId,
        templateLanguageId,
        isDataSourceQueryBased
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        int version = #packVersion;
        container dsProviderQueryNameListContainer = conNull();
    
        primaryTableName = tableId2name(primaryTableId);
    
        if (dsProviderQueryNameList != null)
        {
            dsProviderQueryNameListContainer = dsProviderQueryNameList.pack();
        }
    
        return [#currentList, dsProviderQueryNameListContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuTypeId</Name>
				<Source><![CDATA[
    public DocuTypeId parmDocuTypeId(DocuTypeId _docuTypeId = docuTypeId)
    {
        docuTypeId = _docuTypeId;
        return docuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDsProviderQueryNameList</Name>
				<Source><![CDATA[
    public List parmDsProviderQueryNameList(List _dsProviderQueryNameList = dsProviderQueryNameList)
    {
        dsProviderQueryNameList = _dsProviderQueryNameList;
        return dsProviderQueryNameList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDataSourceQueryBased</Name>
				<Source><![CDATA[
    public boolean parmIsDataSourceQueryBased(boolean _isDataSourceQueryBased = isDataSourceQueryBased)
    {
        isDataSourceQueryBased = _isDataSourceQueryBased;
        return isDataSourceQueryBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryTableId</Name>
				<Source><![CDATA[
    public TableId parmPrimaryTableId(TableId _primaryTableId = primaryTableId)
    {
        primaryTableId = _primaryTableId;
        primaryTableName = tableId2name(primaryTableId);
        return primaryTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryTableRecId</Name>
				<Source><![CDATA[
    public RefRecId parmPrimaryTableRecId(RefRecId _primaryTableRecId = primaryTableRecId)
    {
        primaryTableRecId = _primaryTableRecId;
        return primaryTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateId</Name>
				<Source><![CDATA[
    public str parmTemplateId(str _templateId = templateId)
    {
        templateId = _templateId;
        return templateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateLanguageId</Name>
				<Source><![CDATA[
    public LanguageId parmTemplateLanguageId(LanguageId _templateLanguageId = templateLanguageId)
    {
        templateLanguageId = _templateLanguageId;
        return templateLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean     ret = false;
        int         version;
        container   dsProviderQueryNameListContainer;
    
    
        if (typeOf(conPeek(_pack, 1)) == Types::Integer)
        {
            version = conPeek(_pack, 1);
    
            if (version == #packVersion)
            {
                [#currentList, dsProviderQueryNameListContainer] = _pack;
                primaryTableId = tableName2id(primaryTableName);
                if (dsProviderQueryNameListContainer != conNull())
                {
                    dsProviderQueryNameList = List::create(dsProviderQueryNameListContainer);
                }
                else
                {
                    dsProviderQueryNameList = null;
                }
                ret = true;
            }
        }
    
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>