<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocAzureFilesHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework.Utilities;
using Docentric.AX.Storage.Azure.FileShare;
using Microsoft.Dynamics.Clx.ServicesWrapper;

/// <summary>
/// Helper class for dealing with Azure files storage.
/// </summary>
public class DocAzureFilesHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isFileShareNameValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given file share name is valid.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <returns>True if the given name is a valid file share name.</returns>
    public static boolean isFileShareNameValid(str _fileShareName)
    {
        str pattern = '^[a-z0-9](?!.*--)[a-z0-9-]{1,61}[a-z0-9]$';

        boolean isMatch = System.Text.RegularExpressions.Regex::IsMatch(_fileShareName, pattern);
     
        return isMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileShareExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given File share exists.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>True if the given file share exists</returns>
    public static boolean fileShareExists(
        str _fileShareName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean fileShareExists = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_fileShareName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_fileShareName)), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return false;
        }

        str errorMsg = strFmt("@DocentricAX4:AzureFileStorageAccountFileShareExistsError", _fileShareName, DocAzureHelper::getStorageAccountInfoExt(_azureStorageId));

        try
        {
            DocAzureStorageAccessType accessType = DocAzureHelper::getStorageAccountAccessType(storageConnectionString, _azureStorageId, _showErrorMsg, _throwError);
            if (accessType == DocAzureAccessType::FullAccess)
            {
                // This operation is only allowed for fully accessible (with account key) storage accounts. 
                fileShareExists = FileShareHelper::FileShareExists(_fileShareName, storageConnectionString);
            }
            else
            {
                // For Role-Based access type the existance of file share cannot be checked.
                fileShareExists = true;
            }
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return fileShareExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given file exists.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_fileName">File name with full path</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>True if the given file exists</returns>
    public static boolean fileExists(
        str _fileShareName,
        str _fileName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean fileExists = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_fileShareName == '' || _fileName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_fileShareName), identifierStr(_fileName))), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return false;
        }

        str errorMsg = strFmt("@DocentricAX4:AzureStorageAccountFileExistsError", _fileName, _fileShareName, DocAzureHelper::getStorageAccountInfoExt(_azureStorageId));

        try
        {
            fileExists = FileShareHelper::FileExists(_fileShareName, _fileName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return fileExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileShare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create file share with the given name.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>
    /// True if the file share is successfully created, otherwise false.
    /// This is the case when file share name is invalid or when file share with a such name already exists
    /// </returns>
    public static boolean createFileShare(
        str _fileShareName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean fileShareCreated = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_fileShareName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_fileShareName)), true, funcName(), _throwError);
            }
            return false;
        }

        if (!DocAzureFilesHelper::isFileShareNameValid(_fileShareName))
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:InvalidAzureFileShareName", _fileShareName), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return false;
        }
        
        // Create file share with the given name.
        str errorMsg = strFmt("@DocentricAX4:AzureFileCreateFileshareError", _fileShareName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));
        
        try
        {
            fileShareCreated = FileShareHelper::CreateFileShare(_fileShareName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return fileShareCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upload the file to the given Azure File share.
    /// If file share does not exist, it will be created.
    /// If the file already exists, it will be overwritten.
    /// If an error occur, an exception is thrown.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_fileName">File name which consists of the file path and file name, e.g. reports/invoices/CIV-0003.pdf</param>
    /// <param name = "_fileContent">File content</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <param name = "_createNonExistingFolders">Should the non-existing folders in the provided folder path be created</param>
    public static void uploadFile(
        str _fileShareName, 
        str _fileName, 
        System.IO.Stream _fileContent, 
        str _azureStorageId = '',
        boolean _createNonExistingFolders = true)
    {
        if (_fileShareName == '' || _fileName == '' || _fileContent == null)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2, %3', identifierStr(_fileShareName), identifierStr(_fileName), identifierStr(_fileContent))));
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return;
        }

        str errorMsg = strFmt("@DocentricAX4:AzureFileUploadFileError", _fileName, _fileShareName, DocAzureHelper::getStorageAccountInfoExt(_azureStorageId));
        
        try
        {
            FileShareHelper::UploadFile(_fileShareName, _fileName, _fileContent, storageConnectionString, _createNonExistingFolders);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the given file.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns true if deletion of the file succeeded</returns>
    public static boolean deleteFile(
        str _fileShareName,
        str _fileName, 
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean fileDeleted = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_fileShareName == '' || _fileName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_fileShareName), identifierStr(_fileName))), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return false;
        }

        str errorMsg = strFmt("@DocentricAX4:AzureFileDeleteFileError", _fileName, _fileShareName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));

        try
        {
            fileDeleted = FileShareHelper::DeleteFile(_fileShareName, _fileName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return fileDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFileShare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the given file share.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns true if deletion of the file share succeeded</returns>
    public static boolean deleteFileShare(
        str _fileShareName,
        boolean _showErrorMsg = true,
        boolean _throwError = true,
        str _azureStorageId = '')
    {
        boolean fileShareDeleted = false;

        if (!_showErrorMsg && _throwError)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:InvalidParameterCombination", identifierStr(_showErrorMsg), _showErrorMsg, identifierStr(_throwError), _throwError));
        }

        if (_fileShareName == '')
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSetOrInvalid", identifierStr(_fileShareName)), true, funcName(), _throwError);
            }
            return false;
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return false;
        }

        str errorMsg = strFmt("@DocentricAX4:AzureFileDeleteFileShareError", _fileShareName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));

        try
        {
            FileShareHelper::DeleteFileShare(_fileShareName, storageConnectionString);
            fileShareDeleted = true;
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return fileShareDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the file content for the given file share and file names.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns file content if the file exists, otherwise returns null</returns>
    public static System.IO.Stream getFileContent(
        str _fileShareName,
        str _fileName,
        str _azureStorageId = '')
    {
        System.IO.Stream fileContent = null;

        if (_fileShareName == '' || _fileName == '')
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_fileShareName), identifierStr(_fileName))));
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return null;
        }

        str errorMsg = strFmt("@DocentricAX4:AzureFileGetFileContentError", _fileName, _fileShareName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));
        
        try
        {
            fileContent = FileShareHelper::DownloadFileContent(_fileShareName, _fileName, storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }

        return fileContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileTemporaryDownloadLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary file link for download.
    /// </summary>
    /// <param name = "_fileShareName">File share name</param>
    /// <param name = "_fileName">File name</param>
    /// <param name = "_expirationTimeInMinutes">Expiration time of the link in minutes</param>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <returns>Returns temporary URL of the file if the file exists, otherwise returns null</returns>
    public static System.String getFileTemporaryDownloadLink(
        str _fileShareName,
        str _fileName,
        System.Double _expirationTimeInMinutes,
        str _azureStorageId = '')
    {
        System.String fileDownloadLink = null;

        if (_fileShareName == '' || _fileName == '' || _expirationTimeInMinutes != 0)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2, %3', identifierStr(_fileShareName), identifierStr(_fileName), identifierStr(_expirationTimeInMinutes))));
        }

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return null;
        }

        str errorMsg = strFmt("@DocentricAX4:AzureFileGetFileTemporaryDownloadLinkError", _fileName, _fileShareName, DocAzureHelper::getStorageAccountInfo(_azureStorageId));
        
        try
        {
            fileDownloadLink = FileShareHelper::GetFileDownloadUrl(_fileShareName, _fileName, System.TimeSpan::FromMinutes(_expirationTimeInMinutes), storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }

        return fileDownloadLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAzureFilesFolderPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Azure files folder path with removed trailing '/' character.
    /// </summary>
    /// <param name = "_azureFilesFolderPath">Azure files folder path</param>
    /// <returns>Azure files folder path</returns>
    public static str getAzureFilesFolderPath(str _azureFilesFolderPath)
    {
        if (_azureFilesFolderPath != '')
        {
            if (strStartsWith(_azureFilesFolderPath, DocConstantFile::AzureFilesDirectoryPathDelimiter) &&
                    !strStartsWith(_azureFilesFolderPath, DocConstantFile::AzureFilesDirectoryPathDelimiter + DocConstantFile::AzureFilesDirectoryPathDelimiter))
            {
                _azureFilesFolderPath = subStr(_azureFilesFolderPath, 2, strLen(_azureFilesFolderPath) - 1);
            }
        }
        return _azureFilesFolderPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the connection parameters that can be used in Azure Storage Explorer to connect to the storage account
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        info('CsuStorageConnectionString = ' + CloudInfrastructure::GetCsuStorageConnectionString());
        info('CsuClientCertificateThumbprint = ' + CloudInfrastructure::GetCsuClientCertificateThumbprint());
    }

]]></Source>
			</Method>
			<Method>
				<Name>testStorageAccountConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the connection to the given Azure account storage.
    /// If Azure account storage is not provided, connection to the internal Azure account storage is checked.
    /// </summary>
    /// <param name = "_azureStorageId">Azure storage account ID</param>
    /// <param name = "_showErrorMsg">Should error be shown</param>
    /// <param name = "_throwError">Should error be thrown if occurs</param>
    /// <returns>Returns true if connection to the Azure storage account succeeded</returns>
    public static boolean testStorageAccountConnection(
        str _azureStorageId = '',
        boolean _showErrorMsg = true,
        boolean _throwError = true)
    {
        boolean validConnection = false;

        System.String storageConnectionString = DocAzureHelper::getStorageAccountConnectionString(_azureStorageId, _showErrorMsg, _throwError);
        if (storageConnectionString != null && storageConnectionString == '')
        {
            return false;
        }

        str errorMsg = strFmt("@DocentricAX3:AzureStorageAccountTestConnectionError", _azureStorageId);
        try
        {
            validConnection = FileShareHelper::TestConnection(storageConnectionString);
        }
        catch (Exception::CLRError)
        {
            if (_showErrorMsg)
            {
                DocGlobalHelper::handleClrError(funcName(), errorMsg, _throwError);
            }
        }

        return validConnection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>