<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderMailMergeQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class DocDataSourceProviderMailMergeQuery extends DocDataSourceProviderMailMerge
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAllFieldsFromQbds</Name>
				<Source><![CDATA[
    final protected void addAllFieldsFromQbds(DocXmlRecord _record, QueryBuildDataSource _qbds,
                                              Map _dataSetIncludedFieldsMap = null, Map _dataSetIncludedMethodsMap = null)
    {
        super(_record, _qbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainDataSectionQuery</Name>
				<Source><![CDATA[
    final protected void addMainDataSectionQuery()
    {
        QueryBuildRange             qbrPrimaryTable;
        TableId                     primaryTableId;
        ListEnumerator              enumerator;
        QueryName                   queryName;
        Query                       query;
        QueryBuildDataSource        qbdsPrimaryTable, qbds;
        int                         dataSetCount, dataSourceCount;
        QueryRun                    queryRun;
        Common                      commonDs;
        int                         currentDsNo, parentDsNo;
        DocXmlRecord                currentRecord, parentRecord;
        Array                       qbdsRecordTypeArray, dsAddedRecordArray, contextRecordArray;
        DocQbdsRecordType           currentQbdsRecordType;
        SysDictTable                sysDictTable;
    
    
        /* Helper methods BEGIN */
        void initializeDsAddedRecordArray()
        {
            int i;
    
            dsAddedRecordArray = new Array(Types::Class);
            for (i = 1; i <= dataSourceCount; i++)
            {
                dsAddedRecordArray.value(i, new Map(Types::Guid, Types::Class));
            }
        }
    
        boolean isRecordAlreadyAdded(int _dsNo, DocXmlRecord _parentRecord, Common _childRecordCommon)
        {
            Set childRecords;
            Map parentToChildRecords = dsAddedRecordArray.value(_dsNo);
            boolean ret = false;
            if (parentToChildRecords.exists(_parentRecord.recordId()))
            {
                childRecords = parentToChildRecords.lookup(_parentRecord.recordId());
                ret = childRecords.in(_childRecordCommon.RecId);
            }
            return ret;
        }
    
        void addRecord(int _dsNo, DocXmlRecord _parentRecord, DocXmlRecord _addedChildRecord)
        {
            Set childRecords;
            Map parentToChildRecords = dsAddedRecordArray.value(_dsNo);
            if (parentToChildRecords.exists(_parentRecord.recordId()))
            {
                childRecords = parentToChildRecords.lookup(_parentRecord.recordId());
            }
            else
            {
                childRecords = new Set(Types::Int64);
                parentToChildRecords.insert(_parentRecord.recordId(), childRecords);
            }
            childRecords.add(_addedChildRecord.recId());
        }
        /* Helper methods END */
    
    
    
        // Start building XML.
        recordBuilderMainData.goToTopRecord();
        primaryTableId = this.primaryTableId();
    
        try
        {
            enumerator = this.parmParamsMailMerge().parmDsProviderQueryNameList().getEnumerator();
            while (enumerator.moveNext())
            {
                queryName = enumerator.current();
                query = new Query(queryName);
                if (query == null)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:DspQueryNotExist", queryName));
                }
    
                try
                {
                    qbdsPrimaryTable = query.dataSourceNo(1);
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:DspQueryDoesNotExist", queryName));
                }
    
                if (qbdsPrimaryTable == null)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:DspQueryNoDataSources", queryName));
                }
    
                // Check if master data source of the query is the primary table.
                if (qbdsPrimaryTable.table() != primaryTableId)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:PrimaryTableDiffers",
                        tableId2name(primaryTableId), tableId2name(qbdsPrimaryTable.table()), queryName));
                }
    
                // Check if the number of data sets are equal to 1.
                dataSetCount = query.childDataSourceCount();
                if (dataSetCount > 1)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:MoreThanOneDataSets", queryName));
                }
                else if (dataSetCount == 0)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:NoDataSetInQuery", queryName));
                }
    
                // Find or create range.
                qbrPrimaryTable = qbdsPrimaryTable.findRange(fieldName2id(primaryTableId, 'RecId'));
                if (qbrPrimaryTable == null)
                {
                    qbrPrimaryTable = qbdsPrimaryTable.addRange(fieldName2id(primaryTableId, 'RecId'));
                }
    
                // Set range.
                qbrPrimaryTable.value(int642str(this.getPrimaryTableRecId()));
    
                // Initialize variables.
                qbdsRecordTypeArray = DocQbdsRecordType::buildQbdsRecordTypeArray(query);
                dataSourceCount = query.dataSourceCount();
                contextRecordArray = new Array(Types::Class);
                initializeDsAddedRecordArray();
    
                // Execute query.
                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    // Add record for each of the data sources to the building record tree
                    // if it has not been already added.
                    for (currentDsNo = 1; currentDsNo <= dataSourceCount; currentDsNo++)
                    {
                        qbds = query.dataSourceNo(currentDsNo);
    
                        // Skip the data source if it is not enabled.
                        if (!qbds.enabled())
                        {
                            continue;
                        }
    
                        // Skip the data source if the join mode is not InnerJoin or OuterJoin.
                        if (qbds.joinMode() == JoinMode::ExistsJoin ||
                            qbds.joinMode() == JoinMode::NoExistsJoin)
                        {
                            continue;
                        }
    
                        // Refresh the underlying table buffer if it's not a view.
                        // This is needed because of potential adding of display methods and additional data.
                        commonDs = queryRun.getNo(currentDsNo);
                        sysDictTable = this.commonRecordBuildingContext().getSysDictTable(commonDs.TableId);
                        if (!sysDictTable.isView())
                        {
                            commonDs.reread();
                        }
    
                        // Add record of the current data source if it is not already added.
                        currentRecord = null;
                        if (currentDsNo == 1)
                        {
                            if (queryRun.changedNo(1))
                            {
                                currentRecord = recordBuilderMainData.currentRecord();
                            }
                        }
                        else
                        {
                            currentQbdsRecordType = qbdsRecordTypeArray.value(currentDsNo);
                            parentDsNo = currentQbdsRecordType.parentDataSourceNo();
                            parentRecord = contextRecordArray.value(parentDsNo);
                            if (!isRecordAlreadyAdded(currentDsNo, parentRecord, commonDs))
                            {
                                currentRecord = parentRecord.addChildRecord(commonDs);
                                addRecord(currentDsNo, parentRecord, currentRecord);
                            }
                        }
    
                        if (currentRecord != null)
                        {
                            // Add all fields (and display methods if the flag is set) defined by qbds.
                            this.addAllFieldsFromQbds(currentRecord, qbds);
    
                            // Store the added record in the context record array.
                            contextRecordArray.value(currentDsNo, currentRecord);
                        }
                    }
                }
    
                // Go to the next query.
                recordBuilderMainData.goToTopRecord();
            }
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt('Error occurred during executing the report query (%1). Query:\n%2', query.name(), query.toString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return "@DocentricAX:MailMergeQueryBasedDsp";
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    final protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryTableId</Name>
				<Source><![CDATA[
    public TableId primaryTableId()
    {
        return this.parmParamsMailMerge().parmPrimaryTableId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>