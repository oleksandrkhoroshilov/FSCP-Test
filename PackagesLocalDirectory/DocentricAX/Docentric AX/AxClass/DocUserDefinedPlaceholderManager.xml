<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocUserDefinedPlaceholderManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using DOCRX = Docentric.AX.Reporting.XPath;

public class DocUserDefinedPlaceholderManager
{
    DocReportRunContext             reportRunContext;
    DocReportTable                  reportTableActiveReport;
    DocPrintDestination             currentPrintDestination;
    DocPrintDestSettingsGenerateDS  generateDSPrintDestSettings;
    DocPrintDestSettingsPrinter     printerPrintDestSettings;
    DocPrintDestSettingsFile        filePrintDestSettings;
    DocPrintDestSettingsEmail       emailPrintDestSettings;

    Map                         placeholders      = new Map(Types::String, Types::Record);      // Map(str _placeholderName, DocReportUserDefinedPlaceholder _record)
    Map                         placeholderValues = new Map(Types::String, Types::String);      // Map(str _placeholderName, str _placeholderValue)

    DOCRX.XPathDdspHelper        xPathDdspHelper = null;
    boolean                     hasLicense = false;

    LanguageId                              labelLanguageId, formatLanguageId;
    DocDataSourceProviderLabelRepository    labelRepository = DocDataSourceProviderLabelRepository::construct();


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocUserDefinedPlaceholderManager class.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    protected void new(DocReportRunContext _reportRunContext)
    {
        reportRunContext = _reportRunContext;

        currentPrintDestination = reportRunContext.parmPrintDestination();
    
        filePrintDestSettings = reportRunContext.filePrintDestSettings();
        generateDSPrintDestSettings = reportRunContext.generateDSPrintDestSettings();
        emailPrintDestSettings = reportRunContext.emailPrintDestSettings();
        printerPrintDestSettings = reportRunContext.printerPrintDestSettings();

        // Find the executing report in Docentric report setup, if it is Active.
        // Note that the report can exists in Docentric report setup but will not be found if the IsActiveSRS field is set to false.
        reportTableActiveReport = DocReportTable::findActiveReport(reportRunContext.reportId());
        
        if (reportTableActiveReport)
        {
            // Fill the map with all placeholders.
            DocReportUserDefinedPlaceholder userDefinedPlaceholder;
            while select userDefinedPlaceholder where userDefinedPlaceholder.Report == reportTableActiveReport.RecId && userDefinedPlaceholder.Enabled
            {
                placeholders.insert(userDefinedPlaceholder.PlaceholderName, userDefinedPlaceholder);
            }
        }

        // use document language for formatting and labels
        labelLanguageId = reportRunContext.parmTemplateLanguageId();
        formatLanguageId = reportRunContext.parmTemplateLanguageId();  // in the future, we might support a different language for formatting numbers and dates.
    }

]]></Source>
			</Method>
			<Method>
				<Name>setXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Xml data source.
    /// </summary>
    /// <param name = "_xmlDataSourceStr">Xml data source as string</param>
    public void setXmlDataSource(str _xmlDataSourceStr)
    {
        try
        {
            DocentricEngine docentricEngine = new DocentricEngine();
            // Use label language for label translations.
            docentricEngine.renderingSettings().parmRenderingLanguageId(labelLanguageId);
            // Use format language for formatting numbers and dates (currently the same as the label language).
            xPathDdspHelper = new DOCRX.XPathDdspHelper(_xmlDataSourceStr, formatLanguageId, docentricEngine);
        }
        catch
        {
            DocGlobalHelper::handleClrError('', "@DocentricAX3:InvalidDDSP");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsPlaceholdersInCurrentPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the currently selected print destination contains some user-defined placeholders.
    /// </summary>
    /// <returns>True if the current print destination contains user-defined placeholders</returns>
    public boolean containsPlaceholdersInCurrentPrintDest()
    {
        // Report caption.
        if (this.findPlaceholders(reportRunContext.parmReportCaption()))
        {
            return true;
        }

        // Print archive note.
        if (this.findPlaceholders(reportRunContext.parmSaveToArchiveNote()))
        {
            return true;
        }

        // Report attachment rules.
        List attachmentRuleList = reportRunContext.attachmentRuleList();
        if (attachmentRuleList != null && !attachmentRuleList.empty())
        {
            ListEnumerator attachmentRuleListEnum = attachmentRuleList.getEnumerator();
            while (attachmentRuleListEnum.moveNext())
            {
                DocReportAttachmentRule attachmentRule = attachmentRuleListEnum.current();
                
                // Attachment rule description.
                if (this.findPlaceholders(attachmentRule.parmName()))
                {
                    return true;
                }

                // Attachment rule display name.
                if (this.findPlaceholders(attachmentRule.parmDisplayName()))
                {
                    return true;
                }
            }
        }

        // PDF encryption password.
        if (this.findPlaceholders(reportRunContext.parmPdfPassword()))
        {
            return true;
        }

        // Document title.
        if (this.findPlaceholders(reportRunContext.parmDocumentTitle()))
        {
            return true;
        }

        // Document author.
        if (this.findPlaceholders(reportRunContext.parmDocumentAuthor()))
        {
            return true;
        }

        // Document subject.
        if (this.findPlaceholders(reportRunContext.parmDocumentSubject()))
        {
            return true;
        }

        // Document keywords.
        if (this.findPlaceholders(reportRunContext.parmDocumentKeywords()))
        {
            return true;
        }

        // PDF signature settings.
        DocPdfSignatureSettings signatureSettings = reportRunContext.parmPdfSignatureSettings();
        if (signatureSettings != null)
        {
            // Signature reason.
            if (this.findPlaceholders(signatureSettings.parmReason()))
            {
                return true;
            }

            // Signature location.
            if (this.findPlaceholders(signatureSettings.parmLocation()))
            {
                return true;
            }

            // Signature contact info.
            if (this.findPlaceholders(signatureSettings.parmContact()))
            {
                return true;
            }
        }

        // Check the File and Email print destinations since only these two can contain placeholders.
        switch (currentPrintDestination)
        {
            case DocPrintDestination::GenerateDataSource:
                // DDSP filename
                if (this.findPlaceholders(generateDSPrintDestSettings.parmXmlDataSourceFilename()))
                {
                    return true;
                }
                break;

            case DocPrintDestination::Printer:
                // PrintAsPdfFilename.
                if (this.findPlaceholders(printerPrintDestSettings.parmPrintAsPdfFilename()))
                {
                    return true;
                }

                // SelectedPrinterName.
                if (this.findPlaceholders(printerPrintDestSettings.parmSelectedPrinterName()))
                {
                    return true;
                }

                break;

            case DocPrintDestination::File:
                // OutputFilename.
                if (this.findPlaceholders(filePrintDestSettings.parmOutputFilename()))
                {
                    return true;
                }

                // Azure container name.
                if (this.findPlaceholders(filePrintDestSettings.parmAzureBsContainerName()))
                {
                    return true;
                }

                // Azure blob path.
                if (this.findPlaceholders(filePrintDestSettings.parmAzureBsBlobPath()))
                {
                    return true;
                }

                // Azure file share name.
                if (this.findPlaceholders(filePrintDestSettings.parmAzureFilesFileShareName()))
                {
                    return true;
                }

                // Azure file path.
                if (this.findPlaceholders(filePrintDestSettings.parmAzureFilesDirectoryPath()))
                {
                    return true;
                }

                // File system file path.
                if (this.findPlaceholders(filePrintDestSettings.parmFileSystemFilePath()))
                {
                    return true;
                }

                // SharePoint site url.
                if (this.findPlaceholders(filePrintDestSettings.parmSharePointSiteUrl()))
                {
                    return true;
                }

                // SharePoint folder path.
                if (this.findPlaceholders(filePrintDestSettings.parmSharePointFolderPath()))
                {
                    return true;
                }

                // Attachment settings - Tags.
                if (this.findPlaceholders(filePrintDestSettings.parmSaveToAttachmentsTags()))
                {
                    return true;
                }

                break;
    
            case DocPrintDestination::Email:
                // EmailAttachmentName.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailAttachmentName()))
                {
                    return true;
                }
    
                // EmailBody.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailBody()))
                {
                    return true;
                }
    
                // EmailSubject.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailSubject()))
                {
                    return true;
                }

                // EmailTo.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailTo()))
                {
                    return true;
                }

                // EmailCc.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailCc()))
                {
                    return true;
                }
      
                // EmailBcc.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailBcc()))
                {
                    return true;
                }

                // EmailFrom.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailFrom()))
                {
                    return true;
                }

                // EmailFromDisplayName.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailFromDisplayName()))
                {
                    return true;
                }

                // EmailReplyTo.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailReplyTo()))
                {
                    return true;
                }

                // EmailBounceTo.
                if (this.findPlaceholders(emailPrintDestSettings.parmEmailBounceTo()))
                {
                    return true;
                }

                // ReadReceiptAddress.
                if (this.findPlaceholders(emailPrintDestSettings.parmReadReceiptAddress()))
                {
                    return true;
                }

                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first user-defined placeholder within given input string.
    /// </summary>
    /// <param name = "_inputStr">An input string</param>
    /// <returns>The first user-defined placeholder in the _inputStr if exists; otherwise, an empty string.</returns>
    public str findPlaceholders(str _inputStr)
    {
        int  position, positionEnd, len = strLen(_inputStr);
        str  placeholderName;
    
        // There is no placeholder in an empty string.
        if (!_inputStr)
        {
            return '';
        }
    
        position = strScan(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol, 1, len);
        while (position)
        {
            positionEnd = strScan(_inputStr, DocConstantPlaceholder::PlaceholderEndSymbol, position + 1, len);
            if (positionEnd)
            {
                placeholderName = subStr(_inputStr, position + 1, positionEnd - position - 1);

                if (placeholders.exists(placeholderName))
                {
                    return placeholderName;
                }
    
                position = positionEnd + 1;
            }
            else
            {
                position++;
            }
    
            position = strScan(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol, position, len);
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholdersInCurrentPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace all occurances of user-defined placeholders with their value in current print destination.
    /// </summary>
    public void replacePlaceholdersInCurrentPrintDest()
    {
        str strWithReplacedPlaceholders;

        // Report caption.
        strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmReportCaption());
        reportRunContext.parmReportCaption(strWithReplacedPlaceholders);
        
        // Print archive note.
        strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmSaveToArchiveNote());
        reportRunContext.parmSaveToArchiveNote(strWithReplacedPlaceholders);

        // Report attachment rules.
        List attachmentRuleList = reportRunContext.attachmentRuleList();
        if (attachmentRuleList != null && !attachmentRuleList.empty())
        {
            ListEnumerator attachmentRuleListEnum = attachmentRuleList.getEnumerator();
            while (attachmentRuleListEnum.moveNext())
            {
                DocReportAttachmentRule attachmentRule = attachmentRuleListEnum.current();
                
                // Attachment rule description.
                strWithReplacedPlaceholders = this.replacePlaceholders(attachmentRule.parmName());
                attachmentRule.parmName(strWithReplacedPlaceholders);

                // Attachment rule display name.
                strWithReplacedPlaceholders = this.replacePlaceholders(attachmentRule.parmDisplayName());
                attachmentRule.parmDisplayName(strWithReplacedPlaceholders);
            }
        }

        // PDF encryption password.
        strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmPdfPassword());
        reportRunContext.parmPdfPassword(strWithReplacedPlaceholders);

        // Document title.
        strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentTitle());
        reportRunContext.parmDocumentTitle(strWithReplacedPlaceholders);

        // Document author.
        strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentAuthor());
        reportRunContext.parmDocumentAuthor(strWithReplacedPlaceholders);

        // Document subject.
        strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentSubject());
        reportRunContext.parmDocumentSubject(strWithReplacedPlaceholders);

        // Document keywords.
        strWithReplacedPlaceholders = this.replacePlaceholders(reportRunContext.parmDocumentKeywords());
        reportRunContext.parmDocumentKeywords(strWithReplacedPlaceholders);

        // PDF signature settings.
        DocPdfSignatureSettings signatureSettings = reportRunContext.parmPdfSignatureSettings();
        if (signatureSettings != null)
        {
            // Signature reason.
            strWithReplacedPlaceholders = this.replacePlaceholders(signatureSettings.parmReason());
            signatureSettings.parmReason(strWithReplacedPlaceholders);

            // Signature location.
            strWithReplacedPlaceholders = this.replacePlaceholders(signatureSettings.parmLocation());
            signatureSettings.parmLocation(strWithReplacedPlaceholders);

            // Signature contact info.
            strWithReplacedPlaceholders = this.replacePlaceholders(signatureSettings.parmContact());
            signatureSettings.parmContact(strWithReplacedPlaceholders);
        }

        // Check the Printer, File and Email print destinations since only these two can contain placeholders.
        switch (currentPrintDestination)
        {
            case DocPrintDestination::GenerateDataSource:
                // DDSP filename
                this.replacePlhInGenerateDSPrintDest();
                break;

            case DocPrintDestination::Printer:
                // PrintAsPdfFilename.
                strWithReplacedPlaceholders = this.replacePlaceholders(printerPrintDestSettings.parmPrintAsPdfFilename());
                printerPrintDestSettings.parmPrintAsPdfFilename(strWithReplacedPlaceholders);

                // SelectedPrinterName.
                strWithReplacedPlaceholders = this.replacePlaceholders(printerPrintDestSettings.parmSelectedPrinterName());
                printerPrintDestSettings.parmSelectedPrinterName(strWithReplacedPlaceholders);

                break;

            case DocPrintDestination::File:
                // OutputFilename.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmOutputFilename());
                filePrintDestSettings.parmOutputFilename(strWithReplacedPlaceholders);

                // Azure container name.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureBsContainerName());
                if (filePrintDestSettings.parmAzureBsContainerName() != strWithReplacedPlaceholders)
                {
                    // Since most of placeholders contains uppercase letters, which are not allowed in Azure container names,
                    // if any placeholder got replaced, convert all letters of the resulting string to lowercase.
                    filePrintDestSettings.parmAzureBsContainerName(strLwr(strWithReplacedPlaceholders));
                }

                // Azure blob path.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureBsBlobPath());
                filePrintDestSettings.parmAzureBsBlobPath(strWithReplacedPlaceholders);

                // Azure file share name.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureFilesFileShareName());
                if (filePrintDestSettings.parmAzureFilesFileShareName() != strWithReplacedPlaceholders)
                {
                    // Since most of placeholders contains uppercase letters, which are not allowed in Azure file share names,
                    // if any placeholder got replaced, convert all letters of the resulting string to lowercase.
                    filePrintDestSettings.parmAzureFilesFileShareName(strLwr(strWithReplacedPlaceholders));
                }

                // Azure file path.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmAzureFilesDirectoryPath());
                filePrintDestSettings.parmAzureFilesDirectoryPath(strWithReplacedPlaceholders);

                // File system file path.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmFileSystemFilePath());
                filePrintDestSettings.parmFileSystemFilePath(strWithReplacedPlaceholders);

                // SharePoint site url.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmSharePointSiteUrl());
                filePrintDestSettings.parmSharePointSiteUrl(strWithReplacedPlaceholders);

                // SharePoint folder path.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmSharePointFolderPath());
                filePrintDestSettings.parmSharePointFolderPath(strWithReplacedPlaceholders);

                // Attachment settings - Tags.
                strWithReplacedPlaceholders = this.replacePlaceholders(filePrintDestSettings.parmSaveToAttachmentsTags());
                filePrintDestSettings.parmSaveToAttachmentsTags(strWithReplacedPlaceholders);

                break;
    
            case DocPrintDestination::Email:
                // EmailAttachmentName.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailAttachmentName());
                emailPrintDestSettings.parmEmailAttachmentName(strWithReplacedPlaceholders);
    
                // EmailBody.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailBody(), true);
                emailPrintDestSettings.parmEmailBody(strWithReplacedPlaceholders);
    
                // EmailSubject.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailSubject());
                emailPrintDestSettings.parmEmailSubject(strWithReplacedPlaceholders);

                // EmailTo.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailTo());
                emailPrintDestSettings.parmEmailTo(strWithReplacedPlaceholders);

                // EmailCc.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailCc());
                emailPrintDestSettings.parmEmailCc(strWithReplacedPlaceholders);
      
                // EmailBcc.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailBcc());
                emailPrintDestSettings.parmEmailBcc(strWithReplacedPlaceholders);

                // EmailFrom.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailFrom());
                emailPrintDestSettings.parmEmailFrom(strWithReplacedPlaceholders);

                // EmailFromDisplayName.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailFromDisplayName());
                emailPrintDestSettings.parmEmailFromDisplayName(strWithReplacedPlaceholders);

                // EmailReplyTo.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailReplyTo());
                emailPrintDestSettings.parmEmailReplyTo(strWithReplacedPlaceholders);

                // EmailBounceTo.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmEmailBounceTo());
                emailPrintDestSettings.parmEmailBounceTo(strWithReplacedPlaceholders);

                // ReadReceiptAddress.
                strWithReplacedPlaceholders = this.replacePlaceholders(emailPrintDestSettings.parmReadReceiptAddress());
                emailPrintDestSettings.parmReadReceiptAddress(strWithReplacedPlaceholders);

                break;
        }

        // Replace user-defined placeholders in Generate DS print destination when DDSP is generated alongside report
        if (generateDSPrintDestSettings.parmIsGeneratedAlongsideReport())
        {
            this.replacePlhInGenerateDSPrintDest();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlhInGenerateDSPrintDest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces user-defined placeholders in Generate DS print destination.
    /// </summary>
    private void replacePlhInGenerateDSPrintDest()
    {
        str strWithReplacedPlaceholders;

        // DDSP filename
        strWithReplacedPlaceholders = this.replacePlaceholders(generateDSPrintDestSettings.parmXmlDataSourceFilename());
        generateDSPrintDestSettings.parmXmlDataSourceFilename(strWithReplacedPlaceholders);
        generateDSPrintDestSettings.escapeDdspFilename();
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace user-defined placeholders and labels in given input string.
    /// </summary>
    /// <param name="_inputStr">The string in which to search for user-defined placeholders and labels.</param>
    /// <param name="_htmlEncode">Should the placeholder/label values be HTML encoded.</param>
    /// <returns>Returns input string with replaced user-defined placeholders and labels.</returns>
    public str replacePlaceholders(str _inputStr,  boolean _htmlEncode = false)
    {
        // There is no placeholder in an empty string.
        if (!_inputStr)
        {
            return '';
        }
            
        // Search for @MyPlaceholder@ or @MyLabel@ and replace it. On first occurrence evaluate the value and reuse it for next occurrences.
        // Term placeholderName and placeholderValue is also used for labels
        int len = strLen(_inputStr);
        int position = strScan(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol, 1, len);
        while (position)
        {
            int positionEnd = strScan(_inputStr, DocConstantPlaceholder::PlaceholderEndSymbol, position + 1, len);
            if (positionEnd)
            {
                str placeholderName = subStr(_inputStr, position + 1, positionEnd - position - 1);
                str placeholderValue;
                boolean isPlaceholderValue = false;     // is placeholder/label found

                if (placeholderValues.exists(placeholderName))
                {
                    placeholderValue = placeholderValues.lookup(placeholderName);
                    isPlaceholderValue = true;
                }
                else
                {
                    boolean isLabel = false;
                    boolean success = false;
                    
                    if (placeholders.exists(placeholderName))
                    {
                        // Placeholders
                        DocReportUserDefinedPlaceholder placeholder = placeholders.lookup(placeholderName);
                        
                        str     errMsg;

                        [success, placeholderValue, errMsg] = placeholder.evaluate(xPathDdspHelper);
                        
                        if (!success)
                        {
                            placeholderValue = strFmt('INVALID_EXPRESSION_IN %1',
                                                        DocConstantPlaceholder::PlaceholderStartSymbol + placeholderName + DocConstantPlaceholder::PlaceholderEndSymbol);
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:ErrorEvaluatingPlaceholder",
                                                        DocConstantPlaceholder::PlaceholderStartSymbol + placeholderName + DocConstantPlaceholder::PlaceholderEndSymbol,
                                                        errMsg));
                        }
                        else
                        {
                            // Add the placeholder to Placeholder map as a User-defined placeholder, if it is not already added to the map.
                            reportRunContext.addPlaceholderToMap(placeholderName, placeholderValue, DocPlaceholderKind::UserDefinedPlaceholder, formatLanguageId, placeholder.FormatString);
                        }

                        isPlaceholderValue = true;      // save the value also in case of error
                    }
                    else
                    {
                        // Labels
                        placeholderValue = labelRepository.resolveDdspLabel(DocConstantPlaceholder::PlaceholderStartSymbol + placeholderName, labelLanguageId);
                        isPlaceholderValue = (placeholderValue != '');
                        success = (placeholderValue != '');
                        isLabel = true;
                    }
                    
                    if (isPlaceholderValue)
                    {
                        /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                        /*
                           In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                           is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                           the Docentric AX Free Edition product.
                           You must keep intact all parts of the source code related to the licensing of the full product version.
                           Read more: https://ax.docentric.com/free-edition-license/
                        */
                        /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                        
                        if (!hasLicense)
                        {
                            // If user-defined placeholders for the executing report exist, check the license. This feature cannot be used with Free Edition!
                            // This call will throw an exception if the license is not found or if the license is invalid.
                            DocLicenseMng::checkLicense((isLabel ? DocConstant::FeatureUserDefLabels : DocConstant::FeatureUserDefPlaceholders),
                                                         strFmt("@DocentricAX3:FailedToPrintReportWithUserDefPlaceholders", placeholderName, reportTableActiveReport.ReportId));
                            
                            hasLicense = true;
                        }
                                           
                        if (success)
                        {
                            // Add placeholder to placeholder values map only if resolving was successful
                            placeholderValues.insert(placeholderName, placeholderValue);
                        }
                    }
                }

                // if placeholder/label is found replace it otherwise skip replacement and continue
                if (isPlaceholderValue)
                {
                    // HTML encode the value.
                    if (_htmlEncode)
                    {
                        placeholderValue = System.Web.HttpUtility::HtmlEncode(placeholderValue);
                        placeholderValue = strReplace(placeholderValue, '\r', '');
                        placeholderValue = strReplace(placeholderValue, '\n', '<br/>');
                    }

                    // Replace the placeholder
                    _inputStr = strReplace(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol + placeholderName + DocConstantPlaceholder::PlaceholderEndSymbol, placeholderValue);
                
                    position += strLen(placeholderValue);
                }
                else
                {
                    position = positionEnd;         // skip replacement, but consider last end @ as potential start @ of the next placeholder or label
                }
            }
            else
            {
                position++;
            }
    
            len = strLen(_inputStr);
            position = strScan(_inputStr, DocConstantPlaceholder::PlaceholderStartSymbol, position, len);
        }
    
        return _inputStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct DocUserDefinedPlaceholderManager object.
    /// </summary>
    /// <param name = "_reportRunContext">DocReportRunContext object</param>
    /// <param name = "_xmlDataSourceStr">DDSP as XML which is used for evaluationg user-defined placeholders' XPath expressions</param>
    /// <returns>DocUserDefinedPlaceholderManager object</returns>
    public static DocUserDefinedPlaceholderManager construct(DocReportRunContext _reportRunContext, str _xmlDataSourceStr)
    {
        if (!_reportRunContext)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportRunContext is not provided');
        }

        if (!_xmlDataSourceStr)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _xmlDataSourceStr is not provided');
        }

        DocUserDefinedPlaceholderManager userDefinedPlaceholderManager = new DocUserDefinedPlaceholderManager(_reportRunContext);
        userDefinedPlaceholderManager.setXmlDataSource(_xmlDataSourceStr);

        return userDefinedPlaceholderManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>