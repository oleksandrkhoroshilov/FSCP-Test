<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintedReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;
using Docentric.AX.Documents.Pdf.Properties;
using Docentric.AX.Documents.Pdf.DigitalSignature;
using DPDFA = Docentric.AX.Documents.Pdf.PdfAConversion;

public class DocPrintedReport
{
    System.Byte[]                   reportContentByteArray;
    container                       reportContentContainer;
    DocOutputFileFormat             outputFileFormatDocentric;
    SRSReportFileFormat             outputFileFormatSrs;
    DocFileFormat                   outputFileFormat = DocFileFormat::Unknown;
    System.Collections.IList        reportContentImageList;
    boolean                         isDocentricReport;
    UnknownNoYes                    isPdfReportContentSigned = UnknownNoYes::Unknown;
    int                             numOfPages = 0;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReportContentImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report content as image list.
    /// </summary>
    /// <returns>Report content image list</returns>
    public System.Collections.IList getReportContentImageList()
    {
        return reportContentImageList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportContentImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report content as image list.
    /// </summary>
    /// <param name = "_reportContentImageList">Report content image list</param>
    public void setReportContentImageList(System.Collections.IList _reportContentImageList)
    {
        reportContentImageList = _reportContentImageList;
        isPdfReportContentSigned = UnknownNoYes::No;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportContentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report content as memory stream.
    /// </summary>
    /// <param name = "_reportContentMemoryStream">Report content memory stream</param>
    public void setReportContentMemoryStream(System.IO.MemoryStream _reportContentMemoryStream)
    {
        reportContentByteArray = _reportContentMemoryStream.ToArray();
        reportContentContainer = conNull();
        isPdfReportContentSigned = UnknownNoYes::Unknown;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportContentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report content as container.
    /// </summary>
    /// <param name = "_reportContentContainer">Report content as container</param>
    public void setReportContentContainer(container _reportContentContainer)
    {
        reportContentContainer = _reportContentContainer;
        reportContentByteArray = null;
        isPdfReportContentSigned = UnknownNoYes::Unknown;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportContentByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report content as byte array.
    /// </summary>
    /// <param name = "_reportContentByteArray">Report content as byte array</param>
    public void setReportContentByteArray(System.Byte[] _reportContentByteArray)
    {
        reportContentByteArray = _reportContentByteArray;
        reportContentContainer = conNull();
        isPdfReportContentSigned = UnknownNoYes::Unknown;
        numOfPages = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportContentMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the report content as memory stream.
    /// </summary>
    /// <returns>Report content memory stream</returns>
    public System.IO.MemoryStream getReportContentMemoryStream()
    {
        System.IO.MemoryStream reportContentMemoryStream;

        if (reportContentByteArray != null)
        {
            reportContentMemoryStream = DocGlobalHelper::convertBytesToMemoryStream(reportContentByteArray);
        }
        else if (reportContentContainer != conNull())
        {
            reportContentMemoryStream = DocGlobalHelper::convertContainerToMemoryStream(reportContentContainer);
        }
        
        return reportContentMemoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportContentContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report content as container.
    /// </summary>
    /// <returns>Report content as container</returns>
    public container getReportContentContainer()
    {
        if (reportContentContainer != conNull())
        {
            return reportContentContainer;
        }

        if (reportContentByteArray != null)
        {
            reportContentContainer = DocGlobalHelper::convertBytesToContainer(reportContentByteArray);
        }

        return reportContentContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportContentByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report content as byte array.
    /// </summary>
    /// <returns>Report content as byte array</returns>
    public System.Byte[] getReportContentByteArray()
    {
        if (reportContentByteArray != null)
        {
            return reportContentByteArray;
        }

        if (reportContentContainer != conNull())
        {
            reportContentByteArray = DocGlobalHelper::convertContainerToBytes(reportContentContainer);
        }

        return reportContentByteArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocentricOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Docentric output file format
    /// </summary>
    /// <param name = "_outputFileFormatDocentric">Docentric output file format</param>
    /// <returns>Docentric output file format</returns>
    public DocOutputFileFormat parmDocentricOutputFileFormat(DocOutputFileFormat _outputFileFormatDocentric = outputFileFormatDocentric)
    {
        outputFileFormatDocentric = _outputFileFormatDocentric;
        return outputFileFormatDocentric;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSrsOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the SSRS output file format.
    /// </summary>
    /// <param name = "_outputFileFormatSrs">SSRS output file format</param>
    /// <returns>SSRS output file format</returns>
    public SRSReportFileFormat parmSrsOutputFileFormat(SRSReportFileFormat _outputFileFormatSrs = outputFileFormatSrs)
    {
        outputFileFormatSrs = _outputFileFormatSrs;
        return outputFileFormatSrs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocentricReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the report is the Docentric report.
    /// </summary>
    /// <param name = "_isDocentricReport">Is the Docentric report</param>
    /// <returns>True/False</returns>
    public boolean parmIsDocentricReport(boolean _isDocentricReport = isDocentricReport)
    {
        isDocentricReport = _isDocentricReport;
        return isDocentricReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the output file format as a string.
    /// </summary>
    /// <returns>Output file format as a string</returns>
    public str getOutputFileFormat()
    {
        return DocFileMngHelper::fileFormat2str(this.outputFileFormat());
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the output file format.
    /// </summary>
    /// <param name = "recalculate">Should recalculate the output file format</param>
    /// <returns>Output file format</returns>
    public DocFileFormat outputFileFormat(boolean recalculate = false)
    {
        if (outputFileFormat == DocFileFormat::Unknown || recalculate)
        {
            if (this.parmIsDocentricReport())
            {
                if (this.getReportContentImageList() != null)
                {
                    outputFileFormat = DocFileFormat::EMF;
                }
                else
                {
                    switch (outputFileFormatDocentric)
                    {
                        case DocOutputFileFormat::PDF:
                            outputFileFormat = DocFileFormat::PDF;
                            break;
                        case DocOutputFileFormat::DOCX:
                            outputFileFormat = DocFileFormat::DOCX;
                            break;
                        case DocOutputFileFormat::XML:
                            outputFileFormat = DocFileFormat::XML;
                            break;
                        case DocOutputFileFormat::XPS:
                            outputFileFormat = DocFileFormat::XPS;
                            break;
                        case DocOutputFileFormat::TIFF:
                            outputFileFormat = DocFileFormat::TIFF;
                            break;
                        default:
                            DocGlobalHelper::handleException(funcName(), strFmt('Unsupported Docentric output format: %1', outputFileFormatDocentric));
                    }
                }
            }
            else // if (!this.parmIsDocentricReport()) -> It's a SSRS report design
            {
                switch (outputFileFormatSrs)
                {
                    case SRSReportFileFormat::PDF:
                        outputFileFormat = DocFileFormat::PDF;
                        break;
                    case SRSReportFileFormat::Excel:
                        outputFileFormat = DocFileFormat::XLSX;
                        break;
                    case SRSReportFileFormat::CSV:
                        outputFileFormat = DocFileFormat::CSV;
                        break;
                    case SRSReportFileFormat::XML:
                        outputFileFormat = DocFileFormat::XML;
                        break;
                    case SRSReportFileFormat::Image:
                        if (this.getReportContentImageList() != null)
                        {
                            // If a SSRS report is printed to Printer -> SRSReportFileFormat::Image represents EMF.
                            outputFileFormat = DocFileFormat::EMF;
                        }
                        else
                        {
                            // If a SSRS report is printed to File or Email -> SRSReportFileFormat::Image represents TIFF.
                            outputFileFormat = DocFileFormat::TIFF;
                        }
                        break;
                    case SRSReportFileFormat::MHTML:
                        outputFileFormat = DocFileFormat::MHTML;
                        break;
                    case SRSReportFileFormat::HTML4_0:
                        outputFileFormat = DocFileFormat::HTML4_0;
                        break;
                    case 7: // SRSReportFileFormat::Word:
                        outputFileFormat = DocFileFormat::DOC;
                        break;

                    default:
                        DocGlobalHelper::handleException(funcName(), strFmt('Unsupported SSRS output format: %1', outputFileFormatSrs));
                }
            }
        }

        return outputFileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of pages for the generated document.
    /// </summary>
    /// <returns>Number of pages</returns>
    public int getNumberOfPages()
    {
        if (numOfPages == 0)
        {
            if (this.outputFileFormat() == DocFileFormat::PDF)
            {
                // Get the number of pages for the PDF document.
                using (System.IO.MemoryStream pdfReportContentMemoryStream = this.getReportContentMemoryStream())
                {
                    IDocPdfInformation pdfProperties = DocPdfPropertyManager::GetProperties(pdfReportContentMemoryStream);
                    numOfPages = pdfProperties.PageCount;
                }
            }
            else if (this.outputFileFormat() == DocFileFormat::EMF)
            {
                // Report is printed as a collection of EMF images (i.e. it is printed to a network printer).
                // Number of pages is the count of the rendered EMF images.
                if (this.getReportContentImageList() != null)
                {
                    numOfPages = this.getReportContentImageList().get_Count();
                }
            }
        }
        return numOfPages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfReportContentSigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicationg if PDF report content is signed.
    /// </summary>
    /// <returns>True/False</returns>
    public UnknownNoYes isPdfReportContentSigned()
    {
        if (isPdfReportContentSigned == UnknownNoYes::Unknown &&
            this.outputFileFormat() == DocFileFormat::PDF)
        {
            using (System.IO.MemoryStream reportContentMemoryStream = this.getReportContentMemoryStream())
            {
                if (reportContentMemoryStream != null)
                {
                    boolean isSigned = DocPdfSigner::IsSigned(reportContentMemoryStream);
                    isPdfReportContentSigned = isSigned ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
            }
        }
        return isPdfReportContentSigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPdfReportContentPdfAConformanceLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PDF/A conformance level indicating whether the PDF report content has been converted to PDF/A.
    /// If the returned PDF/A conformance level is None, the PDF report content has not been converted.
    /// </summary>
    /// <returns>The PDF/A conformance level.</returns>
    public DocPdfAConformanceLevel getPdfReportContentPdfAConformanceLevel()
    {
        DocPdfAConformanceLevel docPdfAConformanceLevel = DocPdfAConformanceLevel::None;

        if (this.outputFileFormat() == DocFileFormat::PDF)
        {
            using (System.IO.MemoryStream reportContentMemoryStream = this.getReportContentMemoryStream())
            {
                if (reportContentMemoryStream != null)
                {
                    DPDFA.DocPdfAConformanceLevel pdfAConformanceLevel = DPDFA.DocPdfAManager::GetPdfAConformanceLevel(reportContentMemoryStream);
                    docPdfAConformanceLevel = symbol2Enum(enumNum(DocPdfAConformanceLevel), Docentric.AX.Framework.Extensions.EnumExtensions::GetName(pdfAConformanceLevel));   
                }
            }
        }
        return docPdfAConformanceLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the printed report object as image list.
    /// </summary>
    /// <param name = "_reportContentImageList">Report content as image list</param>
    /// <returns>Printed report object as image list</returns>
    public static DocPrintedReport createImageList(System.Collections.IList _reportContentImageList)
    {
        DocPrintedReport printedReport;

        if (_reportContentImageList == null || _reportContentImageList.get_Count() == 0)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _srsReportContentImageList is not set');
        }

        str errMsg = 'Error while creating the DocPrintedReport object';
        try
        {
            printedReport = new DocPrintedReport();
            printedReport.setReportContentImageList(_reportContentImageList);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return printedReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the printed report object as container.
    /// </summary>
    /// <param name = "_reportContentContainer">Report content as conbtainer</param>
    /// <returns>Printed report object as container</returns>
    public static DocPrintedReport createContainer(container _reportContentContainer)
    {
        DocPrintedReport printedReport;

        if (_reportContentContainer == conNull())
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportContentContainer is not set');
        }

        str errMsg = 'Error while creating the DocPrintedReport object';
        try
        {
            printedReport = new DocPrintedReport();
            printedReport.setReportContentContainer(_reportContentContainer);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return printedReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMemoryStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the printed report object as memory stream.
    /// </summary>
    /// <param name = "_reportContentMemoryStream">Report content as memory stream</param>
    /// <returns>Printed report object as memory stream</returns>
    public static DocPrintedReport createMemoryStream(System.IO.MemoryStream _reportContentMemoryStream)
    {
        DocPrintedReport printedReport;

        if (_reportContentMemoryStream == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportContentMemoryStream is not set');
        }

        str errMsg = 'Error while creating the DocPrintedReport object';
        try
        {
            printedReport = new DocPrintedReport();
            printedReport.setReportContentMemoryStream(_reportContentMemoryStream);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return printedReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the printed report object as byte array.
    /// </summary>
    /// <param name = "_reportContentByteArray">Report content as byte array</param>
    /// <returns>Printed report object as byte array</returns>
    public static DocPrintedReport createByteArray(System.Byte[] _reportContentByteArray)
    {
        DocPrintedReport printedReport;

        if (_reportContentByteArray == null || _reportContentByteArray.Length == 0)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportContentByteArray is not set');
        }

        str errMsg = 'Error while creating the DocPrintedReport object';
        try
        {
            printedReport = new DocPrintedReport();
            container reportContentContainer = DocGlobalHelper::convertBytesToContainer(_reportContentByteArray);
            printedReport.setReportContentContainer(reportContentContainer);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg);
        }

        return printedReport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>