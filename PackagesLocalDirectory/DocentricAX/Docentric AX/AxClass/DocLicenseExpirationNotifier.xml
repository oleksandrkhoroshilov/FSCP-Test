<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLicenseExpirationNotifier</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service controller for the license subscription expiration notifier service.
/// It daily checks if the license subscription is about to expire and sends the notifications before the expiry.
/// </summary>
public final class DocLicenseExpirationNotifier extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the DocLicenseExpirationNotifier class.
    /// </summary>
    private void new()
    {
        super(classStr(DocLicenseExpirationNotifier), methodStr(DocLicenseExpirationNotifier, processLicenseExpiration), SysOperationExecutionMode::Synchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the DocLicenseExpirationNotifier class.
    /// </summary>
    /// <returns>An instance of the DocLicenseExpirationNotifier class</returns>
    public static DocLicenseExpirationNotifier construct()
    {
        DocLicenseExpirationNotifier controller = new DocLicenseExpirationNotifier();

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLicenseExpiration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the service operation.
    /// Checks if the license subscription is about to expire and sends the notifications before the expiry.
    /// </summary>
    /// <param name = "_contract">The Process automation work item contract</param>
    /// <returns>Messages created during license expiry processing</returns>
    public str processLicenseExpiration(ProcessScheduleWorkItem _contract)
    {
        int infologLine = infologLine();

        DocLicenseMng::createLicenseExpirationNotification();

        return DocGlobalHelper::getInfoLogMessages(infologLine + 1, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after a service operation is executed.
    /// </summary>
    /// <param name="_executionMode">The execution mode of a service operation</param>
    /// <param name="_asyncResult">Asynchronous result structure</param>
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        super(_executionMode, _asyncResult);

        str processMessage = this.operationReturnValue();

        ProcessScheduleWorkItem processScheduleWorkItem = this.getDataContractObject() as ProcessScheduleWorkItem;

        ProcessExecutionSourceLink sourceLink = ProcessExecutionSourceLink::insertSourceLink(this.createExecutionSourceLinkItem(processScheduleWorkItem));
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(sourceLink.RecId, Exception::Info, processMessage);
        ProcessExecutionMessageLog::insertMessage(messageLogItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the execution source link item.
    /// </summary>
    /// <param name = "_contract">The Process automation work item contract</param>
    /// <returns>An instace of the ProcessExecutionSourceLinkItem class</returns>
    private ProcessExecutionSourceLinkItem createExecutionSourceLinkItem(ProcessScheduleWorkItem _contract)
    {
        ProcessExecutionSourceLinkItem linkItem = ProcessExecutionSourceLinkItem::construct();

        linkItem.parmExecutionId(_contract.parmExecutionId());
        linkItem.parmExecutionSourceStatus(ProcessExecutionSourceStatus::Success);
        linkItem.parmHeader("@DocentricAX4:SendNoficationBeforeLicenseExpires");
        linkItem.parmMessage("@DocentricAX4:LicenseExpirationCheckComplete");
        linkItem.parmProcessScheduleSeriesPatternRecId(_contract.parmProcessScheduleSeriesPatternRecId());
        linkItem.parmProcessScheduleOccurrenceRecId(_contract.parmProcessScheduleOccurrenceRecId());
        linkItem.parmSourceRecId(0);
        linkItem.parmSourceTableId(0);

        return linkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether to show the parameter dialog.
    /// </summary>
    /// <param name = "_showDialog">The flag indicating whether to show the parameter dialog</param>
    /// <returns>True if the parameter dialog should be shown; otherwise false.</returns>
    [Hookable(false)]
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadFromSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether to load parameter values from SysLastValue store.
    /// </summary>
    /// <param name = "_loadFromSysLastValue">The flag indicating wheter to load parameter values from SysLastValue store</param>
    /// <returns>True if the parameter values should be loaded from SysLastValue store; otherwise false</returns>
    [Hookable(false)]
    public boolean parmLoadFromSysLastValue(boolean _loadFromSysLastValue = loadFromSysLastValue)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the batch job name.
    /// </summary>
    /// <returns>Batch job name</returns>
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the service operation name.
    /// </summary>
    /// <returns>Service operation name.</returns>
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@DocentricAX4:SendNoficationBeforeLicenseExpires";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the class must run in batch or not.
    /// Forces the slider in the dialog to true.
    /// </summary>
    /// <returns>True since this class must always run in batch.</returns>
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBatchTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the Batch tab should be shown on the parameter dialog.
    /// </summary>
    /// <param name="_showBatchTab">The flag indicating whether the Batch tab should be shown</param>
    /// <returns>True if the Batch tab should be shown; otherwise false.</returns>
    [Hookable(false)]
    public boolean showBatchTab(boolean _showBatchTab = showBatchTab)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBatchRecurrenceButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the recurrence option should be shown on the parameter dialog.
    /// </summary>
    /// <param name = "_showBatchRecurrenceButton">The flag indicating whether the recurrence option should be shown</param>
    /// <returns>True if the recurrence option should be shown; otherwise false.</returns>
    [Hookable(false)]
    public boolean showBatchRecurrenceButton(boolean _showBatchRecurrenceButton = showBatchRecurrenceButton)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>