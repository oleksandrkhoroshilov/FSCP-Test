<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDocumentViewer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the backing class for the document viewer control.
///  NOTE:
///  This class is a copy of original DocumentViewer class. In this class is removed
///  property showScanProcessInfo due backward compatibility.
/// </summary>
[FormControlAttribute("DocumentViewer", "DocumentViewer", classStr(DocDocumentViewerBuild))]
class DocDocumentViewer extends FormControl
{
    FormDataSource          formDataSource;
    FormPropertySet         propertySet;
    FormProperty            documentsProperty;
    FormProperty            referenceValueRecId;
    FormProperty            referencesDocuRefProperty;
    FormProperty            allowDeleteProperty;
    FormProperty            allowUploadProperty;
    DocuManagementOptions   docuMgmtOptions;
    DocuRef                 docuRefRecord = null;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new document viewer control.
    /// </summary>
    /// <param name = "_build">The <c>FormBuildControl</c> for the form.</param>
    /// <param name = "_formRun">The <c>FormRun</c> for the form.</param>
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build, _formRun);
        propertySet = new FormPropertySet(this.changeTracker());

        referenceValueRecId = propertySet.addProperty(methodstr(DocDocumentViewer, parmReferenceValueRecId), Types::Int64);
        documentsProperty = propertySet.addProperty(methodstr(DocDocumentViewer, parmDocuments), Types::Class);
        referencesDocuRefProperty = propertySet.addProperty(methodstr(DocDocumentViewer, referencesDocuRef), Types::Integer);
        allowDeleteProperty = propertySet.addProperty(methodStr(DocDocumentViewer, allowDelete), Types::Enum);
        allowUploadProperty = propertySet.addProperty(methodStr(DocDocumentViewer, allowUpload), Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBinding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the binding from the property set.
    /// </summary>
    /// <param name = "_propertyName">The property set to retrieve the binding for.</param>
    /// <returns>The binding for the property.</returns>
    public FormBinding getBinding(str _propertyName)
    {
        // This method must be overridden in order to return the binding for a DataReference property.
        FormProperty property = propertySet.getProperty(_propertyName);
        return property ? property.parmBinding() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the list of documents
    /// </summary>
    /// <param name = "_value">The value to apply</param>
    /// <returns>The value</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, "Documents"),
        DataCollectionAttribute(Types::Class, classStr(DocumentViewerDocument))]
        public List parmDocuments(List _value = documentsProperty.parmValue())
    {
        if(!prmisDefault(_value))
        {
            documentsProperty.setValueOrBinding(_value);
            return documentsProperty.parmValue();
        }
        else
        {
            return _value;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceValueRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the referenced RecId value
    /// </summary>
    /// <param name = "_valueOrBinding">The value or binding to apply</param>
    /// <returns>The value</returns>
    [FormPropertyAttribute(FormPropertyKind::BindableValue, 'ReferenceValueRecId')]
    public int64 parmReferenceValueRecId(anytype _valueOrBinding = ReferenceValueRecId.parmValue())
    {
        if (!prmisDefault(_valueOrBinding))
        {
            ReferenceValueRecId.setValueOrBinding(_valueOrBinding);
            return ReferenceValueRecId.parmValue();
        }

        return _valueOrBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referencesDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the referenced DocuRef value
    /// </summary>
    /// <param name = "_valueOrBinding">The value or binding to apply</param>
    /// <returns>The value</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'ReferencesDocuRef')]
    public int referencesDocuRef(anytype _valueOrBinding = referencesDocuRefProperty.parmValue())
    {
        if (!prmisDefault(_valueOrBinding))
        {
            referencesDocuRefProperty.setValueOrBinding(_valueOrBinding);
            return referencesDocuRefProperty.parmValue();
        }

        return _valueOrBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets if deletes are allowed
    /// </summary>
    /// <param name = "_value">The value to apply</param>
    /// <returns>The value</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'AllowDelete')]
    public boolean allowDelete(anytype _value = allowDeleteProperty.parmValue())
    {
        if (!prmisDefault(_value))
        {
            allowDeleteProperty.setValueOrBinding(_value);
            return allowDeleteProperty.parmValue();
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpload</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets if upload is allowed
    /// </summary>
    /// <param name = "_value">The value to apply</param>
    /// <returns>The value</returns>
    [FormPropertyAttribute(FormPropertyKind::Value, 'AllowUpload')]
    public boolean allowUpload(anytype _value = allowUploadProperty.parmValue())
    {
        if (!prmisDefault(_value))
        {
            allowUploadProperty.setValueOrBinding(_value);
            return allowUploadProperty.parmValue();
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetDocuManagementInstance</Name>
				<Source><![CDATA[
    private void SetDocuManagementInstance(ClassName docuMgmtOptionsClassName)
    {
        DictClass dictClass;

        if (docuMgmtOptionsClassName)
        {
            dictClass = new DictClass(className2Id(docuMgmtOptionsClassName));
            if(dictClass != null)
            {
                docuMgmtOptions = dictClass.makeObject() as DocuManagementOptions;
            }
        }

        //if they didn't set the property or we can't process the value then use the default options
        if (docuMgmtOptions == null)
        {
            docuMgmtOptions = new DefaultDocuManagementOptions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuMgmtOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the document management options.
    /// </summary>
    /// <returns>The options</returns>
    public DocuManagementOptions parmDocuMgmtOptions()
    {
        return docuMgmtOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddNewDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new document to a form
    /// </summary>
    [FormCommandAttribute('AddNewDocument')]
    public void AddNewDocument()
    {
        if (this.allowUpload())
        {
            Args            args = new args();
            MenuFunction    menuFunction = new MenuFunction(formstr(DocumentUpload), MenuItemType::Display);
            FormRun         formRun;

            args.record(formDataSource.cursor());
            args.caller(this);
            formRun = menuFunction.create(args);
            formRun.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReferencedRecordChangeCommand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the record as selected.
    /// </summary>
    [FormCommandAttribute('ReferencedRecordChange')]
    public void ReferencedRecordChangeCommand()
    {
        this.MarkSelectedDocument(null, this.GetDocumentCollection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>RefreshAddedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the added document as selected
    /// </summary>
    /// <param name = "fileIdAdded">The file Id</param>
    public void RefreshAddedDocument(str fileIdAdded)
    {
        this.MarkSelectedDocument(fileIdAdded, this.GetDocumentCollection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>MarkSelectedDocument</Name>
				<Source><![CDATA[
    private void MarkSelectedDocument(str fileId, List documents)
    {
        ListIterator  enumerator;
        DocumentViewerDocument document;
        anytype instance;
        guid guidFileId;
        boolean selected = false;

        if(documents.elements() > 0)
        {
            if(fileId == '')
            {
                fileId = null;
            }

            enumerator = new ListIterator(documents);

            if(fileId)
            {
                guidFileId = str2guid(fileId);

                while(enumerator.more())
                {
                    instance = enumerator.value();
                    document = instance as DocumentViewerDocument;

                    if(str2guid(document.parmFileId()) == guidFileId)
                    {
                        document.parmSelected(1);
                        selected = true;
                        break;
                    }

                    enumerator.next();
                }
            }

            if(!selected)
            {
                if(enumerator.more())
                {
                    instance = enumerator.value();
                    document = instance as DocumentViewerDocument;
                    if(document)
                    {
                        document.parmSelected(1);
                    }
                }
            }
        }

        this.parmDocuments(documents);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDocumentCollection</Name>
				<Source><![CDATA[
    private List GetDocumentCollection()
    {
        List documents;

        if ((formDataSource != null) || (docuRefRecord != null))
        {
            if (this.referencesDocuRef() == 0)
            {
                documents = this.GetDocuments();
            }
            else
            {
                documents = this.GetDocuRefDocument();
            }
        }
        else
        {
            documents = this.parmDocuments();
        }
        
        if(documents == null)
        {
            documents = new List(Types::Class);
        }

        return documents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDocuRefDocument</Name>
				<Source><![CDATA[
    private List GetDocuRefDocument()
    {
        DocuRef docuRef;
        DocumentViewerDocument viewerDocument;
        List documents = new List(Types::Class);

        if (docuRefRecord == null)
        {
            docuRef = formDataSource.cursor();
        }
        else
        {
            docuRef = docuRefRecord;
        }
        this.parmReferenceValueRecId(docuRef.RecId);

        viewerDocument = this.createDocument(docuRef);

        if(viewerDocument)
        {
            documents.addStart(viewerDocument);
        }

        return documents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDocuments</Name>
				<Source><![CDATA[
    private List GetDocuments()
    {
        DocuRef docuRef;
        DocumentViewerDocument viewerDocument;
        TableId tableId;
        RecId recId;
        List documents = new List(Types::Class);
        str targetDataAreaId = formDataSource.cursor().DataAreaId;

        recId = formDataSource.cursor().RecId;
        tableId = formDataSource.table();

        this.parmReferenceValueRecId(recId);

        if (tableId && recId && targetDataAreaId)
        {
            docuRef = DocumentManagement::findAttachments(tableId, recId, targetDataAreaId);
            
            while (docuRef)
            {
                viewerDocument = this.createDocument(docuRef);
                
                if (viewerDocument)
                {
                    // Add to the start of the list to ensure the most recently added doc is at the start of the list
                    documents.addStart(viewerDocument);
                }

                next docuRef;
            }
        }

        return documents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>DocumentManagement</c> class.
    /// </summary>
    /// <returns>A new instance of the <c>DocumentManagement</c> class.</returns>
    protected DocumentManagement createDocumentManagement()
    {
        return DocumentManagement::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocument</Name>
				<Source><![CDATA[
    private DocumentViewerDocument createDocument(DocuRef docuRef)
    {
        DocumentManagement docMgr = this.createDocumentManagement();
        DocuValue docuValue = docuRef.docuValue();
        
        if (!docuValue)
        {
            return null;
        }

        DocumentViewerDocument viewerDocument = new DocumentViewerDocument();
        // default is that the preview source is untrusted
        viewerDocument.parmTrustedSource(0);
        str renderingUrl = '';
        str fullname = System.IO.Path::ChangeExtension(docuValue.Name, docuValue.FileType);
        str mimeType = System.Web.MimeMapping::GetMimeMapping(fullname);
        viewerDocument.parmMimeType(mimeType);

        // If the type is viewable by the web apps server then build up that url
        // else if it can natively be viewed in a browser provide direct URL to viewer
        // else treat the document as not renderable.
        // Note: PDFs are special cased first because the web apps server returns that
        // they can be rendered but this does not seem to be true. This special case
        // can probably removed at some point in the future.
        if(docuValue.FileType == 'PDF' && DocuFileTypes::isNativelyWebViewable(docuValue.FileType))
        {
            renderingUrl = docMgr.getDisplayUrl(docuRef);
            // PDFs cannot be sandboxed or the plugins required to view them will not work.
            viewerDocument.parmTrustedSource(1);
        }
        else if(docMgr.wopiCanDisplay(docuRef))
        {
            var wopiAction = docMgr.getWopiInfo(docuRef, DocDocumentViewer::GetBaseUrl());
            renderingUrl = docMgr.getWopiRenderingUrl(docuRef, DocDocumentViewer::GetBaseUrl());

            // WOPI content is trusted
            viewerDocument.parmTrustedSource(1);
            viewerDocument.parmWopiAccessToken(wopiAction.AccessToken);
            viewerDocument.parmWopiAccessTokenTtl(wopiAction.AccessTokenTtl);
            viewerDocument.parmWopiActionUrl(wopiAction.ActionUrl);
        }
        else if(DocuFileTypes::isNativelyWebViewable(docuValue.FileType))
        {
            renderingUrl = docMgr.getDisplayUrl(docuRef);
        }

        viewerDocument.parmDocuValueRecId(docuValue.RecId);
        viewerDocument.parmLastModified(docuValue.ModifiedDateTime);
        viewerDocument.parmFriendlyLastModified(docuValue.GetFriendlyTimeSpan());
        viewerDocument.parmName(docuValue.Name);
        viewerDocument.parmDocumentUrl(renderingUrl);
        viewerDocument.parmDownloadUrl(docMgr.getDownloadUrl(docuRef));
        viewerDocument.parmThumbnailImageUrl(docMgr.getPreviewUrl(docuRef));
        viewerDocument.parmFileId(System.Guid::Parse(guid2str(docuValue.FileId)).ToString('D'));

        return viewerDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBaseUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a base URL.
    /// </summary>
    /// <returns>A base URL.</returns>
    public static str GetBaseUrl()
    {
        return DocGlobalHelper::GetDeploymentLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Binds the class with its build class.
    /// </summary>
    public void applyBuild()
    {
        DocDocumentViewerBuild build;
        str ds;

        super();

        build = this.build();
        if(build)
        {
            this.SetDocuManagementInstance(build.parmDocuManagementOptionsClassName());
            this.allowDelete(!build.disableDelete());
            this.allowUpload(!build.disableUpload());
            ds = build.dataSource();
            if(strlen(ds) > 0)
            {

                if (docuRefRecord == null) //This will be null when the control is directly used in form or caller does not set before calling apply build
                {
                    formDataSource = this.formRun().dataSource(ds);

                    if (formDataSource == null)
                    {
                        throw error("@ApplicationFoundation:SpecifiedFormDataSourceNotFoundOnForm");
                    }

                    this.parmReferenceValueRecId(FormBindingUtil::initBinding(ds, 'RecId', this.formRun()));
                    this.referencesDocuRef(formDataSource.table() == tableName2Id(tableStr(DocuRef)) ? 1 : 0);
                }
                else
                {
                    this.parmReferenceValueRecId(docuRefRecord.RecId);
                    this.referencesDocuRef(1);
                }
            }
            else
            {
                this.referencesDocuRef(0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocuRefRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the docuref record assoicated with the control.
    /// </summary>
    /// <param name = "_docuRefRecord">The record to set docuRefRecord varoable.</param>
    public void setDocuRefRecord(DocuRef _docuRefRecord = null)
    {
        docuRefRecord = _docuRefRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>