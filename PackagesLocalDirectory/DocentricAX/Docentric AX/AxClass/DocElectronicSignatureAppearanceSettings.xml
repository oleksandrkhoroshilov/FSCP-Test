<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocElectronicSignatureAppearanceSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System;
using System.Globalization;
using Docentric.AX.Framework;
using Docentric.AX.Documents.Pdf.DigitalSignature;
using Docentric.AX.Framework.Extensions;
using DSA = Docentric.AX.Documents.Pdf.DigitalSignature.SignatureAppearance;

public class DocElectronicSignatureAppearanceSettings
{
    private DocElectronicSignatureAppearanceId signatureAppearanceId;
    private DocSignatureAppearOnPage signatureAppearOnPage;
    private DocSignaturePosition signaturePosition;
    private DocSignatureAppearanceType signatureAppearanceType;
    private DocDocumentUnitOfMeasure unitOfMeasure;
    private DocSignatureAppearanceWidth width;
    private DocSignatureAppearanceHeight height;
    private DocSignatureAppearanceHorizontalOffset horizontalOffset;
    private DocSignatureAppearanceVerticalOffset verticalOffset;
    private WebImage signatureImage;
    private DocSignatureFont signatureFont;
    private FontSize signatureFontSize;
    private DocSignatureLanguageToUse signatureLanguageToUse;
    private LanguageId signatureLanguageId;
    private DocFormatString signatureDateTimeFormat;
    private DocSignatureSealIconShow signatureSealIconShow;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSignatureAppearanceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the signature appearance Id.
    /// </summary>
    /// <param name = "_signatureAppearanceId">Signature appearance Id</param>
    /// <returns>Signature appearance Id</returns>
    public DocElectronicSignatureAppearanceId parmSignatureAppearanceId(DocElectronicSignatureAppearanceId _signatureAppearanceId = signatureAppearanceId)
    {
        signatureAppearanceId = _signatureAppearanceId;
        return signatureAppearanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureAppearOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the position of signature frame on the docuemnt.
    /// </summary>
    /// <param name = "_signatureAppearOnPage">Signature docuemnt position</param>
    /// <returns>Signature document position</returns>
    public DocSignatureAppearOnPage parmSignatureAppearOnPage(DocSignatureAppearOnPage _signatureAppearOnPage = signatureAppearOnPage)
    {
        signatureAppearOnPage = _signatureAppearOnPage;
        return signatureAppearOnPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignaturePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the position of signature frame on page.
    /// </summary>
    /// <param name = "_signaturePosition">Signature page position</param>
    /// <returns>Signature page position</returns>
    public DocSignaturePosition parmSignaturePosition(DocSignaturePosition _signaturePosition = signaturePosition)
    {
        signaturePosition = _signaturePosition;
        return signaturePosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureAppearanceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the signature appearance type.
    /// </summary>
    /// <param name = "_signatureAppearanceType">Signature appearance type</param>
    /// <returns>Signature appearance type</returns>
    public DocSignatureAppearanceType parmSignatureAppearanceType(DocSignatureAppearanceType _signatureAppearanceType = signatureAppearanceType)
    {
        signatureAppearanceType = _signatureAppearanceType;
        return signatureAppearanceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureSealIconShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating if the signature seal icon is displayed in the signature appearance.
    /// </summary>
    /// <param name = "_signatureSealIconShow">Display the signature seal icon</param>
    /// <returns>True, if the signature seal icon is displayed; otherwise false</returns>
    public DocSignatureSealIconShow parmSignatureSealIconShow(DocSignatureSealIconShow _signatureSealIconShow = signatureSealIconShow)
    {
        signatureSealIconShow = _signatureSealIconShow;
        return signatureSealIconShow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the unit of meassure for signature size and offset properties.
    /// </summary>
    /// <param name = "_unitOfMeasure">Unit of meassure</param>
    /// <returns>Unit of meassure</returns>
    public DocDocumentUnitOfMeasure parmUnitOfMeasure(DocDocumentUnitOfMeasure _unitOfMeasure = unitOfMeasure)
    {
        unitOfMeasure = _unitOfMeasure;
        return unitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWidth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the width of signature frame in the unit of meassure.
    /// </summary>
    /// <param name = "_width">Width of signature frame</param>
    /// <returns>Width of signature framne</returns>
    public DocSignatureAppearanceWidth parmWidth(DocSignatureAppearanceWidth _width = width)
    {
        width = _width;
        return width;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the height of signature frame in the unit of meassure.
    /// </summary>
    /// <param name = "_height">Width of signature frame</param>
    /// <returns>Width of signature frame</returns>
    public DocSignatureAppearanceHeight parmHeight(DocSignatureAppearanceHeight _height = height)
    {
        height = _height;
        return height;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHorizontalOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the horizontal offset of signature frame in the unit of meassure.
    /// </summary>
    /// <param name = "_horizontalOffset">Horizontal offset of signature frame</param>
    /// <returns>Horizontal offset of signature frame</returns>
    public DocSignatureAppearanceHorizontalOffset parmHorizontalOffset(DocSignatureAppearanceHorizontalOffset _horizontalOffset = horizontalOffset)
    {
        horizontalOffset = _horizontalOffset;
        return horizontalOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVerticalOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the vertical offset of signature frame in the unit of meassure.
    /// </summary>
    /// <param name = "_verticalOffset">Vertical offset of signature frame</param>
    /// <returns>Vertical offset of signature frame</returns>
    public DocSignatureAppearanceVerticalOffset parmVerticalOffset(DocSignatureAppearanceVerticalOffset _verticalOffset = verticalOffset)
    {
        verticalOffset = _verticalOffset;
        return verticalOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the signature image.
    /// </summary>
    /// <param name = "_signatureImage">Signature image as container</param>
    /// <returns>Signature image as container</returns>
    public WebImage parmSignatureImage(WebImage _signatureImage = signatureImage)
    {
        signatureImage = _signatureImage;
        return signatureImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureFont</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the signature font.
    /// </summary>
    /// <param name = "_signatureFont">Signature font</param>
    /// <returns>Signature font</returns>
    public DocSignatureFont parmSignatureFont(DocSignatureFont _signatureFont = signatureFont)
    {
        signatureFont = _signatureFont;
        return signatureFont;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureFontSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the signature font size.
    /// </summary>
    /// <param name = "_signatureFontSize">Signature font size</param>
    /// <returns>Signature font size</returns>
    public FontSize parmSignatureFontSize(FontSize _signatureFontSize = signatureFontSize)
    {
        signatureFontSize = _signatureFontSize;
        return signatureFontSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureLanguageToUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the language of the labels used in the siganture text.
    /// </summary>
    /// <param name = "_signatureLanguageToUse">Signature language to use</param>
    /// <returns>Signature language to use</returns>
    public DocSignatureLanguageToUse parmSignatureLanguageToUse(DocSignatureLanguageToUse _signatureLanguageToUse = signatureLanguageToUse)
    {
        signatureLanguageToUse = _signatureLanguageToUse;
        return signatureLanguageToUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the langunage Id of the labels in the signature text. 
    /// This setting is ignored if DocSignatureLanguageToUse is not set to ExplictlyDefined.
    /// </summary>
    /// <param name = "_signatureLanguageId">Signature language Id</param>
    /// <returns>Signature language Id</returns>
    public LanguageId parmSignatureLanguageId(LanguageId _signatureLanguageId = signatureLanguageId)
    {
        signatureLanguageId = _signatureLanguageId;
        return signatureLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSignatureDateTimeFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the datetime format of the signature date.
    /// </summary>
    /// <param name = "_signatureDateTimeFormat">Siganture datetime format</param>
    /// <returns>Signature datetime format</returns>
    public DocFormatString parmSignatureDateTimeFormat(DocFormatString _signatureDateTimeFormat = signatureDateTimeFormat)
    {
        signatureDateTimeFormat = _signatureDateTimeFormat;
        return signatureDateTimeFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocElectronicSignatureAppearanceSettings class.
    /// </summary>
    /// <param name = "_signatureAppearanceId">Signature appearace Id</param>
    /// <returns>An instance of DocElectronicSignatureAppearanceSettings class</returns>
    public static DocElectronicSignatureAppearanceSettings construct(DocElectronicSignatureAppearanceId _signatureAppearanceId)
    {
        DocElectronicSignatureAppearanceSettings signatureAppearanceSettings;

        DocElectronicSignatureAppearance signatureAppearance = DocElectronicSignatureAppearance::find(_signatureAppearanceId);
        if (signatureAppearance)
        {
            signatureAppearanceSettings = new DocElectronicSignatureAppearanceSettings();
            signatureAppearanceSettings.parmSignatureAppearanceId(signatureAppearance.SignatureAppearanceId);
            signatureAppearanceSettings.parmSignatureAppearOnPage(signatureAppearance.SignatureAppearOnPage);
            signatureAppearanceSettings.parmSignatureSealIconShow(signatureAppearance.SignatureSealIconShow);
            signatureAppearanceSettings.parmSignaturePosition(signatureAppearance.SignaturePosition);
            signatureAppearanceSettings.parmSignatureAppearanceType(signatureAppearance.SignatureAppearanceType);
            signatureAppearanceSettings.parmUnitOfMeasure(signatureAppearance.UnitOfMeasure);
            signatureAppearanceSettings.parmWidth(signatureAppearance.Width);
            signatureAppearanceSettings.parmHeight(signatureAppearance.Height);
            signatureAppearanceSettings.parmHorizontalOffset(signatureAppearance.HorizontalOffset);
            signatureAppearanceSettings.parmVerticalOffset(signatureAppearance.VerticalOffset);
            signatureAppearanceSettings.parmSignatureImage(signatureAppearance.SignatureImage);
            signatureAppearanceSettings.parmSignatureFont(signatureAppearance.Font);
            signatureAppearanceSettings.parmSignatureFontSize(signatureAppearance.FontSize);
            signatureAppearanceSettings.parmSignatureLanguageToUse(signatureAppearance.SignatureLanguageToUse);
            signatureAppearanceSettings.parmSignatureLanguageId(signatureAppearance.SignatureLanguageId);
            signatureAppearanceSettings.parmSignatureDateTimeFormat(signatureAppearance.SignatureDateTimeFormat);
        }

        return signatureAppearanceSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of DocElectronicSignatureAppearanceSettings class with default values.
    /// </summary>
    /// <returns>An instance of DocElectronicSignatureAppearanceSettings class</returns>>
    public static DocElectronicSignatureAppearanceSettings constructWithDefaults()
    {
        DSA.DocSignatureAppearance signatureAppearance = new DSA.DocSignatureAppearance();

        DocElectronicSignatureAppearanceSettings signatureAppearanceSettings = new DocElectronicSignatureAppearanceSettings();
        signatureAppearanceSettings.parmSignatureAppearOnPage(symbol2Enum(enumNum(DocSignatureAppearOnPage), EnumExtensions::GetName(System.Enum::ToObject(signatureAppearance.AppearOnPage.GetType(), signatureAppearance.AppearOnPage))));
        signatureAppearanceSettings.parmSignaturePosition(symbol2Enum(enumNum(DocSignaturePosition), EnumExtensions::GetName(System.Enum::ToObject(signatureAppearance.SignaturePosition.GetType(), signatureAppearance.SignaturePosition))));
        signatureAppearanceSettings.parmSignatureAppearanceType(symbol2Enum(enumNum(DocSignatureAppearanceType), EnumExtensions::GetName(System.Enum::ToObject(signatureAppearance.SignatureAppearanceType.GetType(), signatureAppearance.SignatureAppearanceType))));
        signatureAppearanceSettings.parmUnitOfMeasure(DocElectronicSignatureAppearanceSettings::getUserRegionInfo().IsMetric ? DocDocumentUnitOfMeasure::Centimeter : DocDocumentUnitOfMeasure::Inch);
        signatureAppearanceSettings.parmSignatureFont(symbol2Enum(enumNum(DocSignatureFont), EnumExtensions::GetName(System.Enum::ToObject(signatureAppearance.SignatureFont.GetType(), signatureAppearance.SignatureFont))));
        signatureAppearanceSettings.parmSignatureFontSize(Convert::ToInt32(signatureAppearance.SignatureFontSize));
        signatureAppearanceSettings.parmSignatureSealIconShow(signatureAppearance.ShowSignatureAppearanceIcon);

        DocDocumentLengthUnit signatureUnitOfMeasure;
        signatureUnitOfMeasure = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                     signatureUnitOfMeasure.GetType(),
                                     enumNum(DocDocumentUnitOfMeasure),
                                     signatureAppearanceSettings.parmUnitOfMeasure());

        signatureAppearanceSettings.parmWidth(DocDocumentLength::Convert(signatureAppearance.SignatureRectangleLengthUnit, signatureAppearance.SignatureRectangleWidth, signatureUnitOfMeasure));
        signatureAppearanceSettings.parmHeight(DocDocumentLength::Convert(signatureAppearance.SignatureRectangleLengthUnit, signatureAppearance.SignatureRectangleHeight, signatureUnitOfMeasure));
        signatureAppearanceSettings.parmHorizontalOffset(DocDocumentLength::Convert(signatureAppearance.SignatureRectangleLengthUnit, signatureAppearance.SignatureRectangleHorizontalOffset, signatureUnitOfMeasure));
        signatureAppearanceSettings.parmVerticalOffset(DocDocumentLength::Convert(signatureAppearance.SignatureRectangleLengthUnit, signatureAppearance.SignatureRectangleVerticalOffset, signatureUnitOfMeasure));

        return signatureAppearanceSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserRegionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the region info for current user language.
    /// </summary>
    /// <returns>Region info</returns>
    private static RegionInfo getUserRegionInfo()
    {
        str userLanguage = new xInfo().language();
        return new RegionInfo(DocGlobalHelper::getCultureInfo(userLanguage).LCID);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>