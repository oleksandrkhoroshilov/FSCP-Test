<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocDataSourceProviderReportingBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class DocDataSourceProviderReportingBase extends DocDataSourceProviderBase implements DocDataSourceProviderReporting
{
    DocReportTable                      reportTableActiveReport, reportTable;
    DocUserDefinedPlaceholderManager    userDefinedPlaceholderManager;
    DocPlaceholderManager               standardAndCustomPlaceholderManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initDS</Name>
				<Source><![CDATA[
    protected void initDS()
    {
        XmlElement xmlElementDataSection;
    
        super();
    
        // Add data section Report parameters.
        xmlElementDataSection =
            DocDataSourceProviderHelper::createDsPackageDataSection(xmlDataSource, DocConstantDSP::XmlParametersType);
        xmlDsPackageDataSectionsElement.appendChild(xmlElementDataSection);
        xmlParametersDataElement =
            DocDataSourceProviderHelper::createDsPackageDataSectionDataSchema(xmlDataSource, xmlElementDataSection, false);
        xmlElementDataSection.appendChild(xmlParametersDataElement);
        xmlParametersSchemaElement =
            DocDataSourceProviderHelper::createDsPackageDataSectionDataSchema(xmlDataSource, xmlElementDataSection, true);
        xmlElementDataSection.appendChild(xmlParametersSchemaElement);
    
        // Find the executing report in Docentric report setup regardless of whether it is Active or not.
        reportTable = DocReportTable::findReportId(this.parmParamsReporting().parmReportId());
        
        // If the executing report is found in Docentric report setup but it is not Active, annul the found record to use it in further logic.
        reportTableActiveReport = reportTable;
        if (!reportTableActiveReport.IsActiveSRS)
        {
            reportTableActiveReport = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSystemInfoSection</Name>
				<Source><![CDATA[
    protected void addSystemInfoSection()
    {
        XmlAttribute     xmlAtt;
        XmlElement       xmlSystemInfoMailMergeElement;
    
        super();
    
        xmlSystemInfoMailMergeElement =
            DocDataSourceProviderHelper::createDsPackageXmlElement(xmlDataSource, DocConstantDSP::XmlSystemInfoMailMergeElementName);
        xmlSystemInfoRootElement.appendChild(xmlSystemInfoMailMergeElement);
    
        /* Not Applicable Attributes - MailMerge flavour */
        // DocuTypeId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'docuTypeId');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // TemplateId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'templateId');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // PrimaryTable
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'primaryTable');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // PrimaryTableRecId
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'primaryTableRecId');
        xmlAtt.value(int2str(DocConstantDSP::ConstIntegerNA));
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // DataSourceProviderQueryNameList
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'dsProviderQueryNameList');
        xmlAtt.value(DocConstantDSP::ConstStringNA);
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // IncludeCompanyLogoInDs
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'includeCompanyLogoInDs');
        xmlAtt.value('false');
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    
        // IncludeDisplayMethodsInDs
        xmlAtt = DocDataSourceProviderHelper::createDsPackageXmlAttribute(xmlDataSource, 'includeDisplayMethodsInDs');
        xmlAtt.value('false');
        xmlSystemInfoMailMergeElement.setAttributeNode(xmlAtt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParametersSection</Name>
				<Source><![CDATA[
    final protected void addParametersSection()
    {
        DocXmlRecord                topRecord;
        XmlElement                  dataXmlElement;
        XmlElement                  dataSchemaXmlElement;
    
        // Set flag to skip fields/swallow errors when adding parameters to the record builder.
        // An error can occur if, e.g. a parameter is of type List (class) in the report data contract,
        // that is not a data type currently supported by Docentric data automation framework.
        commonRecordBuildingContext.skipFieldIfErrorOccurs(true);
    
        // Construct Top record in Parameters data element.
        topRecord = DocXmlRecord::constructCalculatedRecord(DocConstantDSP::XmlParametersElementName, literalStr("@DocentricAX:DdspParameters"),
                                                            this.parmParams().parmDsLanguageId(), commonRecordBuildingContext);
    
        // Construct recordBuilderParameters.
        recordBuilderParameters = DocXmlRecordBuilder::construct(topRecord);
    
        // Build the Parameters data section using record builder.
        this.addParameters(recordBuilderParameters);
    
        // Reset flag to skip fields/swallow errors when adding parameters to the record builder.
        commonRecordBuildingContext.skipFieldIfErrorOccurs(false);
    
        // Serialize to XML.
        dataXmlElement = recordBuilderParameters.serializeToXml(xmlDataSource);
        xmlParametersDataElement.appendChild(dataXmlElement);
    
        // Make XML schema for Data node.
        if (!this.parmParams().parmIsRuntime())
        {
            dataSchemaXmlElement = recordBuilderParameters.makeXmlSchema(xmlDataSource);
            xmlParametersSchemaElement.appendChild(dataSchemaXmlElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name="_recordBuilderParameters">
    /// Record builder for the Parameters data section.
    /// </param>
    abstract protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameters</Name>
				<Source><![CDATA[
    abstract public Map getParameters()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralDataSectionBaseMiscInfo</Name>
				<Source><![CDATA[
    protected void addGeneralDataSectionBaseMiscInfo(DocXmlRecord _miscDataRecord)
    {
        super(_miscDataRecord);

        // Add the target print destination.
        _miscDataRecord.addCalculatedFieldFromEnum('PrintDestination', enumStr(DocPrintDestination),
            this.parmParamsReporting().parmTargetPrintDestination(), literalStr("@DocentricAX:SelectedPrintDestination"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainDataSectionPre</Name>
				<Source><![CDATA[
    final protected void addMainDataSectionPre()
    {
        DocXmlRecord  topRecord;
    
        // Construct Top record in Parameters data element.
        topRecord = DocXmlRecord::constructCalculatedRecord(DocConstantDSP::XmlMainDataElementName, literalStr("@DocentricAX:ReportData"),
                                                            this.parmParams().parmDsLanguageId(), commonRecordBuildingContext);
    
        // Construct RecordBuilderMainData.
        recordBuilderMainData = DocXmlRecordBuilder::construct(topRecord);
        
        // Add report caption.
        recordBuilderMainData.addCalculatedField(
            'ReportCaption', this.parmParamsReporting().parmReportCaption(), literalStr("@DocentricAX:ReportCaption"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional labels to the report/document data source.
    /// </summary>
    /// <param name="_labelMap">
    /// Label map.
    /// </param>
    protected void addCustomLabels(Map _labelMap)
    {
        DocReportLabel::fillCustomLabels(_labelMap, this.parmParamsReporting().parmReportId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportExecutionContextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report execution context table buffer.
    /// </summary>
    /// <returns>
    /// Report execution context table buffer, if set.
    /// </returns>
    /// <remarks>
    /// Report execution context is usually a data source of the
    /// action menu item which runs a report.
    /// </remarks>
    final public Common getReportExecutionContextRecord()
    {
        Common reportExecutionContextRecord = null;
    
        if (this.parmParamsReporting().parmReportExecutionContextTableId() && this.parmParamsReporting().parmReportExecutionContextTableRecId())
        {
            reportExecutionContextRecord = DocGlobalHelper::getTableRecord(
                                            this.parmParamsReporting().parmReportExecutionContextTableId(),
                                            this.parmParamsReporting().parmReportExecutionContextTableRecId(),
                                            this.parmParamsReporting().parmReportExecutionContextDataAreaId());
        }

        return reportExecutionContextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportExecutionContextTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report execution context table buffer TableId.
    /// </summary>
    /// <returns>
    /// Report execution context table buffer TableId, if set.
    /// </returns>
    /// <remarks>
    /// Report execution context is usually a data source of the
    /// action menu item which runs a report.
    /// </remarks>
    final public TableId getReportExecutionContextTableId()
    {
        return this.parmParamsReporting().parmReportExecutionContextTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportExecutionContextTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report execution context table buffer RecId.
    /// </summary>
    /// <returns>
    /// Report execution context table buffer RecId, if set.
    /// </returns>
    /// <remarks>
    /// Report execution context is usually a data source of the
    /// action menu item which runs a report.
    /// </remarks>
    final public RefRecId getReportExecutionContextTableRecId()
    {
        return this.parmParamsReporting().parmReportExecutionContextTableRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>userDefinedPlaceholderManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets User-defined placeholder manager.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_reinstance">Should DocUserDefinedPlaceholderManager be re-instanced</param>
    /// <returns>The instance of the DocUserDefinedPlaceholderManager object</returns>
    final public DocUserDefinedPlaceholderManager userDefinedPlaceholderManager(DocReportRunContext _reportRunContext = this.parmParamsReporting().parmReportRunContext(), 
                                                                                boolean _reinstance = false)
    {
        if (userDefinedPlaceholderManager == null || _reinstance)
        {
            if (_reportRunContext && this.getXmlDataSourceStr())
            {
                userDefinedPlaceholderManager = DocUserDefinedPlaceholderManager::construct(_reportRunContext, this.getXmlDataSourceStr());
            }
        }

        return userDefinedPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceUserDefinedPlaceholdersInText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces user-defined placeholders and labels in the given input string.
    /// </summary>
    /// <param name="_inputStr">The string in which to search for user-defined placeholders and labels.</param>
    /// <param name="_htmlEncode">Should the placeholder/label values be HTML encoded.</param>
    /// <returns>
    /// The input string with replaced user-defined placeholders and labels,
    /// if the DocUserDefinedPlaceholderManager object can be instanced; otherwise returns _inputStr.
    /// </returns>
    public str replaceUserDefinedPlaceholdersInText(str _inputStr,  boolean _htmlEncode = false)
    {
        if (this.userDefinedPlaceholderManager())
        {
            return userDefinedPlaceholderManager.replacePlaceholders(_inputStr, _htmlEncode);
        }
        return _inputStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>placeholderManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Placeholder manager for Standard and Custom placeholders.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_reinstance">Should DocPlaceholderManager be re-instanced</param>
    /// <returns>The instance of the DocPlaceholderManager object</returns>
    /// <remarks>
    /// This class is overridden by its sub-class DocDataSourceProviderSrsReporting because of how parameters are provided to DocPlaceholderManager.
    /// </remarks>
    public DocPlaceholderManager placeholderManager(DocReportRunContext _reportRunContext = this.parmParamsReporting().parmReportRunContext(),
                                                    boolean _reinstance = false)
    {
        if (standardAndCustomPlaceholderManager == null || _reinstance)
        {
            if (_reportRunContext)
            {
                standardAndCustomPlaceholderManager = DocPlaceholderManager::construct(_reportRunContext, this.getParameters());
            }
        }

        return standardAndCustomPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    [
    DocPlaceholderAttribute('FIELD_xxx', "@DocentricAX:ContextRecordField"), // DocConstantPlaceholder::PlaceholderFieldStartToken
    DocPlaceholderAttribute('METHOD_xxx', "@DocentricAX:ContextRecordDisplayMethod"), // DocConstantPlaceholder::PlaceholderMethodStartToken
    DocPlaceholderAttribute('PARAMETER_xxx', "@DocentricAX:ReportParameter"), // DocConstantPlaceholder::PlaceholderParameterStartToken
    DocPlaceholderAttribute('REPORTID', "@DocentricAX:ReportId"), // DocConstantPlaceholder::PlaceholderReportId
    DocPlaceholderAttribute('REPORTCAPTION', "@DocentricAX:ReportCaption"), // DocConstantPlaceholder::PlaceholderReportCaption
    DocPlaceholderAttribute('COMPANYID', "@DocentricAX:CompanyId"), // DocConstantPlaceholder::PlaceholderCompanyId
    DocPlaceholderAttribute('COMPANYNAME', "@DocentricAX:CompanyName"), // DocConstantPlaceholder::PlaceholderCompanyName
    DocPlaceholderImageAttribute('COMPANYLOGO', "@DocentricAX:CompanyLogo", 80, 180), // DocConstantPlaceholder::PlaceholderCompanyLogo
    DocPlaceholderImageBase64Attribute('COMPANYLOGO_BASE64', "@DocentricAX4:CompanyLogoBase64", 'png', 80, 180), // DocConstantPlaceholder::PlaceholderCompanyLogoBase64
    DocPlaceholderAttribute('USERID', "@DocentricAX:UserId"), // DocConstantPlaceholder::PlaceholderUserId
    DocPlaceholderAttribute('USERNAME', "@DocentricAX:Username"), // DocConstantPlaceholder::PlaceholderUserName
    DocPlaceholderAttribute('USERALIAS', "@DocentricAX:UserAlias"), // DocConstantPlaceholder::PlaceholderUserAlias
    DocPlaceholderAttribute('USEREMAIL', "@DocentricAX:UserEmail"), // DocConstantPlaceholder::PlaceholderUserEmail
    DocPlaceholderAttribute('WORKER', "@DocentricAX:Worker"), // DocConstantPlaceholder::PlaceholderWorker
    DocPlaceholderAttribute('WORKERTITLE', "@DocentricAX:WorkerTitle"), // DocConstantPlaceholder::PlaceholderWorkerTitle
    DocPlaceholderAttribute('WORKERDEPARTMENT', "@DocentricAX:WorkerDepartment"), // DocConstantPlaceholder::PlaceholderWorkerDepartment
    DocPlaceholderAttribute('WORKEREMAIL', "@DocentricAX:WorkerEmail"), // DocConstantPlaceholder::PlaceholderWorkerEmail
    DocPlaceholderImageAttribute('WORKERIMAGE', "@DocentricAX2:WorkerImage", 80, 80), // DocConstantPlaceholder::PlaceholderWorkerImage
    DocPlaceholderAttribute('LANGUAGEID', "@DocentricAX:LanguageId"), // DocConstantPlaceholder::PlaceholderLanguageId
    DocPlaceholderAttribute('TIMESTAMP', "@DocentricAX:Timestamp"), // DocConstantPlaceholder::PlaceholderTimestamp
    DocPlaceholderAttribute('CURRENTDATE', "@DocentricAX:CurrentDate"), // DocConstantPlaceholder::PlaceholderCurrentDate
    DocPlaceholderAttribute('CURRENTDATETIME', "@DocentricAX:CurrentDateAndTime"), // DocConstantPlaceholder::PlaceholderCurrentDatetime
    DocPlaceholderAttribute('CURRENTDAY', "@DocentricAX:CurrentDay"), // DocConstantPlaceholder::PlaceholderCurrentDay
    DocPlaceholderAttribute('CURRENTMONTH', "@DocentricAX:CurrentMonth"), // DocConstantPlaceholder::PlaceholderCurrentMonth
    DocPlaceholderAttribute('CURRENTYEAR', "@DocentricAX:CurrentYear"), // DocConstantPlaceholder::PlaceholderCurrentYear
    DocPlaceholderAttribute('GUID', "@DocentricAX:Guid"), // DocConstantPlaceholder::PlaceholderGuid
    DocPlaceholderAttribute('BATCHJOBID', "@DocentricAX:BatchJobID"), // DocConstantPlaceholder::PlaceholderBatchJobId
    DocPlaceholderAttribute('BATCHJOB_SCHEDULED_STARTDATETIME', "@DocentricAX:BatchJobSchedStartDatetime"), // DocConstantPlaceholder::PlhBatchJobSchedStartDateTime
    DocPlaceholderAttribute('BATCHJOB_ACTUAL_STARTDATETIME', "@DocentricAX:BatchJobActualStartDatetime"), // DocConstantPlaceholder::PlhBatchJobActualStartDateTime
    DocPlaceholderAttribute('ENVNAME', "@DocentricAX4:EnvironmentName"), // DocConstantPlaceholder::PlaceholderEnvironmentName
    DocPlaceholderAttribute('ENVDOMAINNAME', "@DocentricAX4:EnvironmentDomainName"), // DocConstantPlaceholder::PlaceholderEnvironmentDomainName
    DocPlaceholderAttribute('ENVTYPE', "@DocentricAX4:EnvironmentType"), // DocConstantPlaceholder::PlaceholderEnvironmentType
    DocPlaceholderAttribute('ENVMODE', "@DocentricAX4:EnvironmentMode") // DocConstantPlaceholder::PlaceholderEnvironmentMode
    ]
    /// <summary>
    /// Replaces all standard placeholders if any is presented.
    /// </summary>
    /// <param name="_reportRunContext">
    /// Report run context.
    /// </param>
    /// <param name="_replaceStandardPlaceholders">
    /// Should be standard placeholders replaced.
    /// </param>
    /// <returns>
    /// DocPlaceholderManager instance to enable replacing of custom placeholders
    /// if the method is overridden.
    /// </returns>
    /// <remarks>
    /// Extend this method in order to change report run settings
    /// e.g. file output name, mail subject, To email addresses etc.
    /// and to replace standard and custom placeholders if any.
    /// </remarks>
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext,
                                                           boolean _replaceStandardPlaceholders = true)
    {
        standardAndCustomPlaceholderManager = this.placeholderManager(_reportRunContext);
        
        if (_replaceStandardPlaceholders)
        {
            standardAndCustomPlaceholderManager.replaceStdPlaceholdersInCurrentPrintDest();
        }
    
        return standardAndCustomPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettingsPostActions</Name>
				<Source><![CDATA[
    public void overrideReportRunSettingsPostActions(DocReportRunContext _reportRunContext)
    {
        // Process placeholders in Form notes.
        // Process Customer-based and Vendor-based placeholders in Advanced notes.
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReportAttachments</Name>
				<Source><![CDATA[
    /********************************************************************************************/
    /*                         LOAD REPORT ATTACHMENTS METHODS                                  */
    /********************************************************************************************/

    /// <summary>
    /// Load report attachments if any report attachment rule is provided.
    /// </summary>
    /// <param name = "_reportRunContext">Object you can use to modify print destination settings including report attachments</param>
    /// <remarks>
    /// Extend/Override this method in order to change the default implementation of loading report attachments.
    /// </remarks>
    public void loadReportAttachments(DocReportRunContext _reportRunContext)
    {
        /* So far, we support report attachments only for Email print destination */
        if (this.parmParamsReporting().parmReportRunContext().parmPrintDestination() != DocPrintDestination::Email)
        {
            return;
        }

        // Return if there is no attachment rule
        List attachmentRuleList = _reportRunContext.attachmentRuleList();
        if (attachmentRuleList == null || attachmentRuleList.elements() == 0)
        {
            return;
        }
        
        DocReportAttachmentRule currentAttachmentRule;
        DocValidationResult validationResult;

        // Create set of the attached DocuRef RecIds. This set is needed to avoid loading of identical attachments.
        Set attachedDocuRefRecIdSet = new Set(Types::Int64); // Set(int64 _DocuRefRecId)

        // Iterate through the list of attachment rules and load the corresponding 0, 1 or more attachments.
        ListEnumerator le = attachmentRuleList.getEnumerator();
        while (le.moveNext())
        {
            currentAttachmentRule = le.current();
            
            // Validate this attachment definition
            validationResult = currentAttachmentRule.validate(true);
            if (!validationResult.parmIsValid())
            {
                DocGlobalHelper::handleException(
                        funcName(),
                        strFmt("@DocentricAX2:ErrorValidatingAttachmentDefinition",
                                currentAttachmentRule.toString(), validationResult.parmMessage()));
            }

            // Load attachments based on this attachment rule
            try
            {
                this.loadReportAttachmentsForAttachmentRule(_reportRunContext, currentAttachmentRule, attachedDocuRefRecIdSet);
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX2:ErrorLoadingAttachmentsForDefinition", currentAttachmentRule.toString()));
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:ErrorLoadingAttachmentsForDefinition", currentAttachmentRule.toString()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReportAttachmentsForAttachmentRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all report attachments for the provided attachment rule and handle them accordingly,
    /// i.e. depending of the target print destination.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_attachmentRule">Report attachment rule</param>
    /// <param name = "_attachedDocuRefRecIdSet">Set of already attached DocuRef RecIds</param>
    private void loadReportAttachmentsForAttachmentRule(DocReportRunContext _reportRunContext, DocReportAttachmentRule _attachmentRule,
                                                        Set _attachedDocuRefRecIdSet /* Set(int64 _DocuRefRecId) */)
    {
        // One _attachmentRule can lead to zero or more attachments.
        // Get the list of the resolved attachments: List<DocReportAttachmentResolved>
        List resolvedAttachmentList = this.resolveAttachmentList(_reportRunContext, _attachmentRule, _attachedDocuRefRecIdSet);
        if (resolvedAttachmentList == null || resolvedAttachmentList.elements() == 0)
        {
            // If 'No warning' or 'Warning', just return and the caller method will continue to the next attachment definition.
            // If 'Don't print', then this method will throw the exception and we will end up in the most inner catch.
            DocReportAttachmentManager::handleNotFoundCondition(_reportRunContext, _attachmentRule, null);
            return;
        }

        // Here we have list of 1 or more resolved attachments based on the provided _attachmentRule.
        // Iterate through it, try to get the document and attach it to the report.
        ListEnumerator resolvedAttachmentListEnum = resolvedAttachmentList.getEnumerator();
        while (resolvedAttachmentListEnum.moveNext())
        {
            DocReportAttachmentResolved currentResolvedAttachment = resolvedAttachmentListEnum.current();
            if (currentResolvedAttachment.parmContent() == connull())
            {
                // If 'No warning' or 'Warning', just continue to the next resolved attachment.
                // If 'Don't print', then this method will throw the exception and we will end up in the most inner catch.
                DocReportAttachmentManager::handleNotFoundCondition(_reportRunContext, null, currentResolvedAttachment);
                continue;
            }

            // Handle resolved report attachment depending on the target print destination. So far only Email is supported.
            try
            {
                this.handleAttachmentForTargetPrintDestination(_reportRunContext, currentResolvedAttachment);
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX2:ErrorWhileHandlingAttachment",
                    currentResolvedAttachment.toString(), currentResolvedAttachment.parmAttachmentRule().toString()));
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:ErrorWhileHandlingAttachment",
                    currentResolvedAttachment.toString(), currentResolvedAttachment.parmAttachmentRule().toString()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAttachmentList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve all report attachments for the provided attachment definition.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_attachmentRule">Report attachment rule</param>
    /// <param name = "_attachedDocuRefRecIdSet">Set of already attached DocuRef RecIds</param>
    /// <returns>List of resolved report attachments: List(DocReportAttachmentResolved)</returns>
    private List resolveAttachmentList(DocReportRunContext _reportRunContext, DocReportAttachmentRule _attachmentRule,
                                       Set _attachedDocuRefRecIdSet /* Set(int64 _DocuRefRecId) */)
    {
        List resolvedAttachmentList;  // List<DocReportAttachmentResolved>

        if (_attachmentRule.parmLoadFrom() == DocReportAttachmentLoadFrom::GlobalAttachments)
        {
            // Check if user has access rights for the global attachments
            if (!DocReportAttachmentManager::hasUserAccessToGlobalAttachments())
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:UserHasNoPrivilegeForGlobalAttachments", curUserId()));
            }
            resolvedAttachmentList = DocReportAttachmentManager::getFromGlobalAttachment(_reportRunContext, _attachmentRule, _attachedDocuRefRecIdSet);
        }
        else
        {
            Common underlyingAttachmentRecord;
            try
            {
                underlyingAttachmentRecord = this.resolveReportAttachmentRecord(_reportRunContext, _attachmentRule);
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), DocReportAttachmentManager::getUnresolvedUnderlyingRecordErrorMessage(_reportRunContext, _attachmentRule));
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), DocReportAttachmentManager::getUnresolvedUnderlyingRecordErrorMessage(_reportRunContext, _attachmentRule));
            }
      
            // Throw an exception if the underlying table record cannot be resolved for all Attachment sources except Source table lines, Journal lines and Items.
            // For those Attachment sources we will handle unresolved underlying table record considering the 'If not found' condition of the attachment rule.
            // Note that the same condition will apply for other Attachment sources if the underlying record is resolved but none of its Attachments matches the attachment rule.
            if (underlyingAttachmentRecord.RecId == 0 && DocReportAttachmentManager::isRecordRequired(_attachmentRule.parmLoadFrom()))
            {
                DocGlobalHelper::handleException(funcName(), DocReportAttachmentManager::getUnresolvedUnderlyingRecordErrorMessage(_reportRunContext, _attachmentRule));
            }

            // Check if user has access rights for the underlying table record.
            if (underlyingAttachmentRecord.RecId != 0 && !DocReportAttachmentManager::hasUserAccessToRecord(underlyingAttachmentRecord))
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:UserHasNoPrivilegeForRecord", curUserId(), tableId2PName(underlyingAttachmentRecord.TableId)));
            }
            
            // Collect the attachments from the resolved underlying table record.
            if (underlyingAttachmentRecord.RecId != 0)
            {
                resolvedAttachmentList = DocReportAttachmentManager::getFromDynamicAttachment(_reportRunContext, _attachmentRule, _attachedDocuRefRecIdSet, underlyingAttachmentRecord);
            }
        }

        return resolvedAttachmentList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReportAttachmentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve the underlying attachment record according to the provided _currentAttachmentDefinition.parmLoadFrom().
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_currentAttachmentRule">Report attachment rule</param>
    /// <returns>Underlying attachment record</returns>
    /// <remarks>
    /// Override this method in order to implement the case when _currentAttachmentDefinition.parmLoadFrom() == DocReportAttachmentLoadFrom::CustomSource
    /// or to change the default implementation for other DocReportAttachmentLoadFrom options.
    /// </remarks>
    protected Common resolveReportAttachmentRecord(DocReportRunContext _reportRunContext, DocReportAttachmentRule _currentAttachmentRule)
    {
        return DocReportAttachmentManager::resolveReportAttachmentRecord(_reportRunContext, _currentAttachmentRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAttachmentForTargetPrintDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles resolved and valid report attachment according to the currently selected print destination.
    /// </summary>
    /// <param name = "_reportRunContext">Report run context</param>
    /// <param name = "_attachment">Resolved and valid report attachment with the loaded content</param>
    protected void handleAttachmentForTargetPrintDestination(DocReportRunContext _reportRunContext, DocReportAttachmentResolved _attachment)
    {
        // Handle provided report attachment depending on the target print destination. So far only Email is supported.
        switch (_reportRunContext.parmPrintDestination())
        {
            case DocPrintDestination::Email:
                if (_attachment.parmAttachmentRule().parmPrintAs() == DocReportAttachmentPrintAs::SeparateAttachment)
                {
                    _reportRunContext.emailPrintDestSettings().addAdditionalAttachment(_attachment.parmFullFilename(), _attachment.parmContent());
                }
                break;

            default:
                // Do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadExternalFiles</Name>
				<Source><![CDATA[
    /********************************************************************************************/
    /*                         LOAD EXTERNAL FILES METHODS                                      */
    /********************************************************************************************/

    /// <summary>
    /// Load external files (if provided) and set the email print settings so that afterwards they get attached to the outgoing emails.
    /// </summary>
    /// <param name = "_reportRunContext">Object you can use to modify print destination settings including the attaching external files</param>
    /// <remarks>
    /// Extend/Override this method in order to change the default implementation of loading external files.
    /// </remarks>
    public void loadExternalFiles(DocReportRunContext _reportRunContext)
    {
        // NOTE: In version 3.3.6 we will provide at least two additional protected methods:
        // one, which fetches a single external file, and second, which attaches it.
        // Also, we will introduce a new helper class that actually loads an external file content depending of the file location.

        // If there is no External file rule defined, return.
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceUserDefinedPlaceholders</Name>
				<Source><![CDATA[
    /********************************************************************************************/
    /*                         REPLACE USER-DEFINED PLACEHOLDERS                                */
    /********************************************************************************************/
    public void replaceUserDefinedPlaceholders(DocReportRunContext _reportRunContext)
    {
        if (this.userDefinedPlaceholderManager(_reportRunContext))
        {
            userDefinedPlaceholderManager.replacePlaceholdersInCurrentPrintDest();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSharePointMetadata</Name>
				<Source><![CDATA[
    /********************************************************************************************/
    /*                         PROCESS SHAREPOINT METADATA                                      */
    /********************************************************************************************/
    public void processSharePointMetadata(DocReportRunContext _reportRunContext)
    {
        // When to load the metadata for the SharePoint library:
        // (1) File print destination > Save to SharePoint: the target document library is found in Docentric report setup.
        // (2) File print destination > Save to Attachments: the target Document type's document library is found in Docentric report setup.
        // (3) Any print destination > Save to Print archive: the Print archive Document type's document library is found in Docentric report setup.
        // (4) Archive print destination: the Print archive Document type's document library is found in Docentric report setup.
        
        // After loading the metadata fields for the target SharePoint library from Docentric report setup,
        // we will process the used placeholders if any. We will use:
        // (1) _reportRunContext.placeholderMap() for all Standard and User-defined placeholders which are processed so far.
        // (2) _reportRunContext.placeholderMap() for any Custom placeholder, since it always contains ALL Custom placeholders.
        // (3) DocUserDefinedPlaceholderManager for User-defined placeholders that are being processed for the first time.
        // (4) DocPlaceholderManager for Standard placeholders that are being processed for the first time.
        
        // Afterwards, we will fill _reportRunContext.parmSharePointMetadata() to have it afterwards at our disposal in the pipeline
        // when saving to SharePoint, Attachments, Print archive (in the DocOutputManager class).

        if (DocReportSharePointSettings::existsForReport(reportTableActiveReport.RecId))
        {
            DocReportSharePointMetadataProcessor spMetadataProcessor = 
                DocReportSharePointMetadataProcessor::construct(_reportRunContext, this.userDefinedPlaceholderManager(), this.placeholderManager());
            spMetadataProcessor.processSharePointMetadata();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>