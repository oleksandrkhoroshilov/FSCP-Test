<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPlaceholderExpressionDesignerSourceTreeManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using DOCRX = Docentric.AX.Reporting.XPath;
using XML = System.Xml;
using XSD = System.Xml.Schema;
using System.IO;
using System.Collections;

/// <summary>
/// Manages a source tree view in the DocReportUserDefinedPlaceholderExpressionDesigner form.
/// </summary>
public class DocPlaceholderExpressionDesignerSourceTreeManager
{
    private FormTreeControl formTreeControl;
    private List searchNextTreeItems;  // A tree item index list in ascending order
    private List searchPrevTreeItems;  // A tree item index list in descending order
    private boolean showDetails;
    private Map schemaItemRefTypes = new Map(Types::String, Types::AnyType);  // A map of reference types in XSD schema
    private Map schemaItemLabelInfo = new Map(Types::String, Types::String);


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmShowDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets a showDetails flag indicating if a tree item node name contain additional information.
    /// </summary>
    /// <param name = "_showDetails">Should a node name contain additional information</param>
    /// <returns>True/False</returns>
    public boolean parmShowDetails(boolean _showDetails = showDetails)
    {
        showDetails = _showDetails;
        return showDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchTreeItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proper item index list depending on search direction.
    /// </summary>
    /// <param name = "_findPrev">Find the previous search direction</param>
    /// <returns>The item index list</returns>
    public List getSearchTreeItems(boolean _findPrev = false)
    {
        return _findPrev ? searchPrevTreeItems : searchNextTreeItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an expression designer tree manager.
    /// </summary>
    /// <param name = "_formTreeControl">An instance of a <c>FormTreeControl</c> object</param>
    /// <returns>An instance of a <c>DocPlaceholderExpressionDesignerSourceTreeManager</c> object</returns>
    public static DocPlaceholderExpressionDesignerSourceTreeManager construct(FormTreeControl _formTreeControl)
    {
        return new DocPlaceholderExpressionDesignerSourceTreeManager(_formTreeControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// A constructor.
    /// </summary>
    /// <param name = "_formTreeControl">An instance of a <c>FormTreeControl</c> object</param>
    protected void new(FormTreeControl _formTreeControl)
    {
        formTreeControl = _formTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTreeForAllDataSections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the form tree control from XSD schema for all DDSP data sections.
    /// </summary>
    /// <param name = "_xPathDdspHelper">An instance of the XPathDdspHelper object</param>
    public void buildTreeForAllDataSections(DOCRX.XPathDdspHelper _xPathDdspHelper)
    {
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(DocDdspDataSection));

        for (int i = 0; i < sysDictEnum.values(); i++)
        {
            str dataSectionName = sysDictEnum.index2Symbol(i);

            this.buildTree(symbol2Enum(enumNum(DocDdspDataSection), dataSectionName), _xPathDdspHelper, (i == 0 ? true : false), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the form tree control from XSD schema for the selected DDSP data section.
    /// </summary>
    /// <param name = "_docDdspDataSection">DDSP data section</param>
    /// <param name = "_xPathDdspHelper">An instance of the XPathDdspHelper object</param>
    /// <param name = "_initializeTree">Initialze the form tree control</param>
    /// <param name = "_expandTree">Expand the form tree control</param>
    public void buildTree(DocDdspDataSection _docDdspDataSection, DOCRX.XPathDdspHelper _xPathDdspHelper, boolean _initializeTree = true, boolean _expandTree = true)
    {
        str dataSectionName = enum2Symbol(enumNum(DocDdspDataSection), _docDdspDataSection);

        if (!dataSectionName)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:PlaceholderExpressionDesignerNoDDSPDataSectionSelected");
            return;
        }

        // Get XSD schema for selected DDSP data section
        XML.XmlNode dataSectionNode = _xPathDdspHelper.getDataSectionSchema(dataSectionName);

        System.Exception ex;
        using (StringReader stringReader = new StringReader(dataSectionNode.InnerXml))
        {
            using (XML.XmlTextReader reader = new XML.XmlTextReader(stringReader))
            {
                try
                {
                    XSD.XmlSchema dataSectionSchema = XSD.XmlSchema::Read(reader, null);

                    if (_initializeTree)
                    {
                        // Initialize the form tree control
                        formTreeControl.deleteAll();
                        formTreeControl.lock();

                        // Initialize the search lists
                        searchPrevTreeItems = new List(Types::Integer);
                        searchNextTreeItems = new List(Types::Integer);
                    }

                    // Create tree item nodes from parsed XSD schema items and add them to the form tree control
                    this.parseSchemaItems(dataSectionSchema.Items, 0);

                    TreeItemIdx treeItemIdx = formTreeControl.getRoot();
                    formTreeControl.select(treeItemIdx);

                    if (_expandTree)
                    {
                        DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(formTreeControl, treeItemIdx, 1);
                    }

                    formTreeControl.unLock(true);
                }
                catch (ex)
                {
                    if (ex is XSD.XmlSchemaException)
                    {
                        var exs = ex as XSD.XmlSchemaException;

                        DocGlobalHelper::handleError(strFmt('(%1:%2) %3', exs.LineNumber, exs.LinePosition, exs.Message));
                    }
                    else
                    {
                        DocGlobalHelper::handleError(ex.Message);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tree item node and adds it to the form tree control.
    /// </summary>
    /// <param name = "_parentTreeItemIdx">A parent tree item index</param>
    /// <param name = "_nodeName">A node name</param>
    /// <param name = "_nodeType">A node type</param>
    /// <param name = "_labelCode">A label code</param>
    /// <param name = "_labelValue">A label value</param>
    /// <param name = "_maxOccurs">A max occurs value</param>
    /// <param name = "_hasChildren">Has an item node children</param>
    /// <returns>An index of the created tree item node</returns>
    private TreeItemIdx createNode(
        TreeItemIdx _parentTreeItemIdx,
        str _nodeName,
        str _nodeType = '',
        str _labelCode = '',
        str _labelValue = '',
        real _maxOccurs = 0,
        boolean _hasChildren = false)
    {
        FormTreeItem parentTreeItem = formTreeControl.getItem(_parentTreeItemIdx);

        // Generate xPath string
        str xPath = '';
        if (parentTreeItem)
        {
            xPath = parentTreeItem.data().parmXPathString();
        }
        xPath += (xPath == '' ? '' : '/') + (_hasChildren ? '' : '@') + (_parentTreeItemIdx == 0 ? '' : _nodeName);

        // Create a tree item data
        DocPlaceholderExpressionDesignerSourceTreeItemData data = new DocPlaceholderExpressionDesignerSourceTreeItemData();
        data.parmName(_nodeName);
        data.parmDataType(_nodeType);
        data.parmXPathString(xPath);
        data.parmLabelCode(_labelCode);
        data.parmLabelValue(_labelValue);
        data.parmMaxOccurs(_maxOccurs);

        // Create a tree item node name
        str nodeName = DocPlaceholderExpressionDesignerSourceTreeManager::createNodeName(data, showDetails);

        // Add a tree item to the form tree control
        TreeItemIdx treeItemIdx = SysFormTreeControl::addTreeItem(
            formTreeControl,
            nodeName,
            _parentTreeItemIdx,
            data,
            0,
            _hasChildren);

        // Add a tree item index to the search lists
        searchPrevTreeItems.addStart(treeItemIdx);
        searchNextTreeItems.addEnd(treeItemIdx);

        // Set a tree item text to Bold if tree item node has children
        if (_hasChildren)
        {
            FormTreeItem formTreeItem = formTreeControl.getItem(treeItemIdx);
            formTreeItem.stateBold(true);
            formTreeControl.setItem(formTreeItem);
        }

        return treeItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSchemaItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses an XSD schema items.
    /// </summary>
    /// <param name = "_schemaItems">An XSD schema items</param>
    /// <param name = "_parentTreeItemIdx">A parent tree item index</param>
    private void parseSchemaItems(anytype _schemaItems, TreeItemIdx _parentTreeItemIdx)
    {
        IEnumerator schemaItemsEnum = _schemaItems.GetEnumerator();

        while (schemaItemsEnum.MoveNext())
        {
            var schemaItem = schemaItemsEnum.Current;
            this.parseSchemaItem(schemaItem, false, _parentTreeItemIdx);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSchemaItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a single XSD schema item.
    /// </summary>
    /// <param name = "_schemaItem">An XSD schema item</param>
    /// <param name = "_isRefSchemaItem">Is an XSD schema item a reference item</param>
    /// <param name = "_parentTreeItemIdx">A parent tree item index</param>
    private void parseSchemaItem(anytype _schemaItem, boolean _isRefSchemaItem, TreeItemIdx _parentTreeItemIdx)
    {
        TreeItemIdx treeItemIdx;

        if (_schemaItem is XSD.XmlSchemaAnnotation)
        {
            var itemAnnotation = _schemaItem as XSD.XmlSchemaAnnotation;
            if (itemAnnotation.Items != null)
            {
                this.parseSchemaItems(itemAnnotation.Items, _parentTreeItemIdx);
            }
        }
        else if (_schemaItem is XSD.XmlSchemaAttribute)
        {
            schemaItemLabelInfo = DocPlaceholderExpressionDesignerSourceTreeManager::clearMap(schemaItemLabelInfo);

            var itemAttribute = _schemaItem as XSD.XmlSchemaAttribute;
            if (itemAttribute.Annotation != null)
            {
                this.parseSchemaItem(itemAttribute.Annotation, _isRefSchemaItem, _parentTreeItemIdx);
            }

            str labelCode = '';
            str labelValue = '';
            if (!schemaItemLabelInfo.empty())
            {
                labelCode = schemaItemLabelInfo.exists('xse:refCode') ? schemaItemLabelInfo.lookup('xse:refCode') : '';
                labelValue = schemaItemLabelInfo.exists('xse:text') ? schemaItemLabelInfo.lookup('xse:text') : '';
            }
            treeItemIdx = this.createNode(_parentTreeItemIdx, itemAttribute.Name, itemAttribute.SchemaTypeName.Name, labelCode, labelValue);
        }
        else if (_schemaItem is XSD.XmlSchemaAttributeGroup)
        {
            var itemAttributeGroup = _schemaItem as XSD.XmlSchemaAttributeGroup;
            if (itemAttributeGroup.Attributes != null)
            {
                this.parseSchemaItems(itemAttributeGroup.Attributes, _parentTreeItemIdx);
            }
        }
        else if (_schemaItem is XSD.XmlSchemaComplexType)
        {
            var itemComplexType = _schemaItem as XSD.XmlSchemaComplexType;

            if (itemComplexType.Particle != null)
            {
                if (itemComplexType.Name == null || _isRefSchemaItem)
                {
                    this.parseSchemaItemParticle(itemComplexType.Particle, _parentTreeItemIdx);
                }
                else
                {
                    schemaItemRefTypes.insert(itemComplexType.Name, itemComplexType);
                }
            }
            if (itemComplexType.Attributes != null)
            {
                if (itemComplexType.Name == null || _isRefSchemaItem)
                {
                    this.parseSchemaItems(itemComplexType.Attributes, _parentTreeItemIdx);
                }
                else
                {
                    schemaItemRefTypes.insert(itemComplexType.Name, itemComplexType);
                }
            }
        }
        else if (_schemaItem is XSD.XmlSchemaSimpleType)
        {
            var itemSimpleType = _schemaItem as XSD.XmlSchemaSimpleType;
        }
        else if (_schemaItem is XSD.XmlSchemaElement)
        {
            schemaItemLabelInfo = DocPlaceholderExpressionDesignerSourceTreeManager::clearMap(schemaItemLabelInfo);

            var itemElement = _schemaItem as XSD.XmlSchemaElement;
            if (itemElement.Annotation != null)
            {
                this.parseSchemaItem(itemElement.Annotation, _isRefSchemaItem, _parentTreeItemIdx);
            }

            str labelCode = '';
            str labelValue = '';
            if (!schemaItemLabelInfo.empty())
            {
                labelCode = schemaItemLabelInfo.exists('xse:refCode') ? schemaItemLabelInfo.lookup('xse:refCode') : '';
                labelValue = schemaItemLabelInfo.exists('xse:text') ? schemaItemLabelInfo.lookup('xse:text') : '';
            }

            str nodeType = itemElement.SchemaTypeName.Name ? itemElement.SchemaTypeName.Name : (itemElement.maxOccurs > 1 ? 'Record list' : 'Record');
            switch (itemElement.Name)
            {
                // Create a root tree item node if XSD element is one of the selected DDSP data section
                case enum2Symbol(enumNum(DocDdspDataSection), DocDdspDataSection::GeneralData):
                case enum2Symbol(enumNum(DocDdspDataSection), DocDdspDataSection::Parameters):
                case 'ReportData':
                    if (itemElement.Parent is XSD.XmlSchema)
                    {
                        treeItemIdx = this.createNode(FormTreeAdd::Root, itemElement.Name, nodeType, labelCode, labelValue, itemElement.maxOccurs, true);
                        break;
                    }
                default:
                    treeItemIdx = this.createNode(_parentTreeItemIdx, itemElement.Name, nodeType, labelCode, labelValue, itemElement.maxOccurs, true);
            }

            if (itemElement.SchemaTypeName != null)
            {
                if (schemaItemRefTypes.exists(itemElement.SchemaTypeName.Name))
                {
                    var schemaItemType = schemaItemRefTypes.lookup(itemElement.SchemaTypeName.Name);
                    this.parseSchemaItem(schemaItemType, true, treeItemIdx);
                }
            }
            this.parseSchemaItem(itemElement.SchemaType, false, treeItemIdx);
        }
        else if (_schemaItem is XSD.XmlSchemaGroup)
        {
            var itemGroup = _schemaItem as XSD.XmlSchemaGroup;
        }
        else if (_schemaItem is XSD.XmlSchemaNotation)
        {
            var itemNotation = _schemaItem as XSD.XmlSchemaNotation;
        }
        else if (_schemaItem is XSD.XmlSchemaAppInfo)
        {
            var itemAppInfo = _schemaItem as XSD.XmlSchemaAppInfo;
            if (itemAppInfo.Markup != null)
            {
                var itemAppInfoMarkup = itemAppInfo.Markup;
                for (int i = 0; i < itemAppInfoMarkup.get_Length(); i++)
                {
                    var itemAppInfoMarkupNode = itemAppInfoMarkup.GetValue(i);
                    this.parseSchemaItem(itemAppInfoMarkupNode, _isRefSchemaItem, _parentTreeItemIdx);
                }
            }
        }
        else if (_schemaItem is XML.XmlElement)
        {
            var itemElement = _schemaItem as XML.XmlElement;
            if (itemElement.HasAttributes && itemElement.Name == 'xse:label')
            {
                this.parseSchemaItems(itemElement.Attributes, _parentTreeItemIdx);
            }
        }
        else if (_schemaItem is XML.XmlAttribute)
        {
            var itemAttribute = _schemaItem as XML.XmlAttribute;
            schemaItemLabelInfo.insert(itemAttribute.Name, itemAttribute.Value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSchemaItemParticle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a single XSD schema item particle.
    /// </summary>
    /// <param name = "_schemaItemParticle">An XSD schema item particle</param>
    /// <param name = "_parentTreeItemIdx">>A parent tree item index</param>
    private void parseSchemaItemParticle(anytype _schemaItemParticle, TreeItemIdx _parentTreeItemIdx)
    {
        if (_schemaItemParticle is XSD.XmlSchemaGroupRef)
        {
            var itemGroupRef = _schemaItemParticle as XSD.XmlSchemaGroupRef;
            if (itemGroupRef.Particle != null)
            {
                this.parseSchemaItemParticle(itemGroupRef.Particle, _parentTreeItemIdx);
            }
        }
        else if (_schemaItemParticle is XSD.XmlSchemaChoice)
        {
            var itemChoice = _schemaItemParticle as XSD.XmlSchemaChoice;
            if (itemChoice.Items != null)
            {
                this.parseSchemaItems(itemChoice.Items, _parentTreeItemIdx);
            }
        }
        else if (_schemaItemParticle is XSD.XmlSchemaAll)
        {
            var itemAll = _schemaItemParticle as XSD.XmlSchemaAll;
            if (itemAll.Items != null)
            {
                this.parseSchemaItems(itemAll.Items, _parentTreeItemIdx);
            }
        }
        else if (_schemaItemParticle is XSD.XmlSchemaSequence)
        {
            var itemSequence = _schemaItemParticle as XSD.XmlSchemaSequence;
            if (itemSequence.Items != null)
            {
                this.parseSchemaItems(itemSequence.Items, _parentTreeItemIdx);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a tree item node name. 
    /// </summary>
    /// <param name = "_data">A data object</param>
    /// <param name = "_showDetails">Should a node name contain additional information</param>
    /// <returns>A tree item node name</returns>
    private static str createNodeName(anytype _data, boolean _showDetails = false)
    {
        str nodeName = strFmt('%1%2', _data.parmName(), _data.parmMaxOccurs() > 1 ? ' [0..n]' : '');
        if (_showDetails)
        {
            if (_data.parmLabelValue())
            {
                // Add a label value to the node name
                nodeName += strFmt(' (%1)', _data.parmLabelValue());
            }
            if (_data.parmDataType())
            {
                // Add a data type to the node name
                nodeName += strFmt(' : %1', _data.parmDataType());
            }
        }
        return nodeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all items from a map.
    /// </summary>
    /// <param name = "_map">A map</param>
    /// <returns>An empty map</returns>
    private static Map clearMap(Map _map)
    {
        Set mapKeys = _map.keySet();
        SetEnumerator mapKeysEnum = mapKeys.getEnumerator();
        while (mapKeysEnum.moveNext())
        {
            _map.remove(mapKeysEnum.current());
        }
        return _map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows/Hides the additional information in the tree item node name.
    /// </summary>
    public void showDetails()
    {
        ListEnumerator searchTreeItemsEnum = this.getSearchTreeItems().getEnumerator();

        formTreeControl.lock();
        while (searchTreeItemsEnum.moveNext())
        {
            TreeItemIdx treeItemIdx = searchTreeItemsEnum.current();

            FormTreeItem formTreeItem = formTreeControl.getItem(treeItemIdx);
            str nodeName = DocPlaceholderExpressionDesignerSourceTreeManager::createNodeName(formTreeItem.data(), showDetails);
            formTreeItem.text(nodeName);
            formTreeControl.setItem(formTreeItem);
        }
        formTreeControl.unLock(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTreeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the selected search string in a form tree control and returns a found tree item index 
    /// if search was successful.
    /// </summary>
    /// <param name = "_formTreeControl">An instance of a <c>FormTreeControl</c> object</param>
    /// <param name = "_searchTreeItems">A tree item index list</param>
    /// <param name = "_treeItemIdx">A current start position for the search</param>
    /// <param name = "_searchString">A search string</param>
    /// <returns>A found tree item index if search was successful, otherwise 0</returns>
    public static TreeItemIdx findTreeItem(FormTreeControl _formTreeControl, List _searchTreeItems, TreeItemIdx _treeItemIdx, str _searchString)
    {
        TreeItemIdx foundItemIdx;

        ListEnumerator searchTreeItemsEnum = _searchTreeItems.getEnumerator();

        boolean startSearch = false;
        while (searchTreeItemsEnum.moveNext())
        {
            TreeItemIdx treeItemIdx = searchTreeItemsEnum.current();
            if (!startSearch && treeItemIdx != _treeItemIdx)
            {
                continue;
            }
            startSearch = true;
            if (match(_searchString, _formTreeControl.getItem(treeItemIdx).text()))
            {
                foundItemIdx = treeItemIdx;
                break;
            }
        }

        return foundItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands a form tree nodes in a form tree control to a desired level.
    /// </summary>
    /// <param name = "_formTreeControl">An instance of a <c>FormTreeControl</c> object</param>
    /// <param name = "_treeItemIdx">A current position in a form tree control</param>
    /// <param name = "_toLevel">A level position to expand to in a form tree control</param>
    /// <param name = "_level">A current level position in a form tree control</param>
    public static void expandTree(FormTreeControl _formTreeControl, TreeItemIdx _treeItemIdx, int _toLevel = 0, int _level = 0)
    {
        FormTreeItem formTreeItem;
        TreeItemIdx treeItemIdx = _treeItemIdx;
        int level = _level;

        while (treeItemIdx)
        {
            formTreeItem = _formTreeControl.getItem(treeItemIdx);
            level++;

            _formTreeControl.expand(formTreeItem.idx());

            if (_formTreeControl.getChild(formTreeItem.idx()))
            {
                if (!formTreeItem.children())
                {
                    formTreeItem.children(true);
                    _formTreeControl.setItem(formTreeItem);
                    _formTreeControl.expand(formTreeItem.idx());
                }

                if (!_toLevel ||
                    _toLevel > level)
                {
                    DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(_formTreeControl,_formTreeControl.getChild(formTreeItem.idx()), _toLevel, level);
                }
            }
            else
            {
                if (formTreeItem.children())
                {
                    formTreeItem.children(false);
                    _formTreeControl.setItem(formTreeItem);
                }
            }

            treeItemIdx = _formTreeControl.getNextSibling(formTreeItem.idx());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>