<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocQbdsRecordType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocQbdsRecordType
{
    str                  qbdsName;
    int                  dsNo;
    int                  parentDataSourceNo;
    TableName            qbdsTableName;
    container            childDataSourceNos; // only direct childes.
    container            allChildDataSourceNos;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allChildDataSourceNos</Name>
				<Source><![CDATA[
    public container allChildDataSourceNos(Array _qbdsRecordTypeArray)
    {
        int                   childDsCounter;
        DocQbdsRecordType     childRecordType;
    
        if (allChildDataSourceNos != conNull())
        {
            return allChildDataSourceNos;
        }
    
        allChildDataSourceNos = childDataSourceNos;
        for (childDsCounter = 1; childDsCounter <= conLen(childDataSourceNos); childDsCounter++)
        {
            childRecordType = _qbdsRecordTypeArray.value(conPeek(childDataSourceNos, childDsCounter));
            allChildDataSourceNos += childRecordType.allChildDataSourceNos(_qbdsRecordTypeArray);
        }
    
        return allChildDataSourceNos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childDataSourceNos</Name>
				<Source><![CDATA[
    public container childDataSourceNos()
    {
        return childDataSourceNos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(str _qbdsName, int _dsNo, int _parentDataSourceNo, TableName _qbdsTableName, container _childDataSourceNos)
    {
        qbdsName = _qbdsName;
        dsNo = _dsNo;
        parentDataSourceNo = _parentDataSourceNo;
        qbdsTableName = _qbdsTableName;
        childDataSourceNos = _childDataSourceNos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentDataSourceNo</Name>
				<Source><![CDATA[
    public int parentDataSourceNo()
    {
        return parentDataSourceNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qbdsName</Name>
				<Source><![CDATA[
    public str qbdsName()
    {
        return qbdsName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qbdsTableName</Name>
				<Source><![CDATA[
    public TableName qbdsTableName()
    {
        return qbdsTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQbdsRecordTypeArray</Name>
				<Source><![CDATA[
    public static Array buildQbdsRecordTypeArray(Query _query)
    {
        int                     dataSourceCount, currentDsNo;
        QueryBuildDataSource    qbds;
        Array                   qbdsRecordTypeArray;
        DocQbdsRecordType       qbdsRecordType;
        int                     parentDataSourceNo;
        int                     childDsCounter;
        container               childDataSourceNos;
    
    
        dataSourceCount = _query.dataSourceCount();
        qbdsRecordTypeArray = new Array(Types::Class);
    
        for (currentDsNo = 1; currentDsNo <= dataSourceCount; currentDsNo++)
        {
            qbds = _query.dataSourceNo(currentDsNo);
            parentDataSourceNo = 0;
            if (qbds.embedded())
            {
                parentDataSourceNo = qbds.parentDataSource().id();
            }
    
            childDataSourceNos = conNull();
            for (childDsCounter = 1 ; childDsCounter <= qbds.childDataSourceCount(); childDsCounter++)
            {
                childDataSourceNos = childDataSourceNos + [qbds.childDataSourceNo(childDsCounter).id()];
            }
    
            qbdsRecordType = new DocQbdsRecordType(qbds.name(), currentDsNo, parentDataSourceNo,
                                                   tableId2name(qbds.table()), childDataSourceNos);
    
            qbdsRecordTypeArray.value(currentDsNo, qbdsRecordType);
        }
    
        return qbdsRecordTypeArray;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>