<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintMgmtSetupHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocPrintMgmtSetupHelper class is a helper class for the PrintMgmtSetupUIMain form.
/// </summary>
public class DocPrintMgmtSetupHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>selectRelatedTreeNodeForPrintMgmtUtils</Name>
				<Source><![CDATA[
    /// <summary>
    /// If Print management setup form is called from the Print management utilities form by
    /// clicking the "Open for document" menu item, then expand the node for the matching 
    /// document type and select one of its child nodes that matches the caller record.
    /// </summary>
    /// <param name = "_callerFormRun">FormRun: caller form run. We expect that it is one of our forms.</param>
    /// <param name = "_tree">FormTreeControl: tree object on the left part of the Print management setting form.</param>
    /// <param name = "_printInfo">boolean: used for printing some debug information</param>
    private static void selectRelatedTreeNodeForPrintMgmtUtils(FormRun _callerFormRun, FormTreeControl _tree, boolean _printInfo = false)
    {        
        // Get the relevant RecIds from the caller record
        if (!formHasMethod(_callerFormRun, formMethodStr(DocPrintMgmtUtils, parmDocInstanceRecId)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(parmDocInstanceRecId)));
        }
        if (!formHasMethod(_callerFormRun, formMethodStr(DocPrintMgmtUtils, parmPrintSettingsRecId)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(parmPrintSettingsRecId)));
        }
        RecId docInstanceRecId = _callerFormRun.parmDocInstanceRecId();
        RecId printSettingsRecId = _callerFormRun.parmPrintSettingsRecId();

        if (_printInfo)
        {
            info(strFmt('DocInstance.RecId: %1, PrintSetting.RecId: %2', docInstanceRecId, printSettingsRecId));
        }        
        
        
        // Traverse through the tree and for each of its nodes get its attached object (by calling item.data()).
        // Node data is an object of one of these 3 types:
        //  - PrintMgmtSetupDoc: document type to which the setup is applied, i.e. Customer invoice
        //  - PrintMgmtSetupDocInstance: Original or Copy instance of document
        //  - PrintMgmtSetupSettingsConditional: Conditional setting under the Original or Copy instance
        // On DocInstance and SettingsConditional we have a parm() method to retrieve the related RecId.
        // We compare that RecId to the above fetched docInstanceRecId and printSettingsRecId values.
        // If we find a match, that is a node we want to select and we want to expand its document type
        // (last processed PrintMgmtSetupDoc).

        PrintMgmtSetupDoc setupDoc; 
        PrintMgmtSetupDocInstance docInstance;  
        PrintMgmtSetupSettingsConditional condSettings; 
            
        TreeItemIdx docInstanceIdx = 0;
        TreeItemIdx printSettingsIdx = 0;
        TreeItemIdx setupDocIdx = 0, lastSetupDocIdx = 0;

        TreeItemIdx selectedIdx = _tree.getFirstVisible();
        while (_tree.getItem(selectedIdx))
        {
            FormTreeItem item = _tree.getItem(selectedIdx);
            Object data = item.data();
            if (_printInfo)
            {
                info(strFmt('Idx: %1, Item text: %2', selectedIdx, item.text()));
            }
            
            switch(classIdGet(data))
            {
                case classNum(PrintMgmtSetupDoc):
                    setupDoc = data;
                    lastSetupDocIdx = selectedIdx;
                    if (_printInfo)
                    {
                        info(strFmt('SetupDoc --- lastSetupDocIdx: %1, Name: %2', lastSetupDocIdx, setupDoc.parmName()));
                    }
                    break;

                case classNum(PrintMgmtSetupDocInstance):
                    docInstance = data;
                    if (docInstance.parmRecId() == docInstanceRecId)
                    {
                        // Matching DocInstance found
                        docInstanceIdx = selectedIdx;
                        setupDocIdx = lastSetupDocIdx;
                        if (_printInfo)
                        {
                            info(strFmt('DocInstance --- docInstanceIdx: %1, Name: %2, Priority: %3, Type: %4',
                                docInstanceIdx, docInstance.parmName(), docInstance.parmPriority(), docInstance.parmType()));
                        }
                    }
                    break;

                case classNum(PrintMgmtSetupSettingsConditional):
                    condSettings = data;
                    if (condSettings.parmRecId() == printSettingsRecId)
                    {
                        // Matching PrintSetting found
                        printSettingsIdx = selectedIdx;
                        setupDocIdx = lastSetupDocIdx;
                        if (_printInfo)
                        {
                            info(strFmt('ConditionalPrintSetting --- printSettingsIdx: %1, setupDocIdx: %2, Name: %3Priority: %4, ReportFormat: %5',
                                printSettingsIdx, setupDocIdx, condSettings.parmName(), condSettings.parmPriority(), condSettings.parmReportFormat()));
                        }
                    }
                    break;

                default:
                    if (_printInfo)
                    {
                        info(strFmt(('selectedIdx: %1, class name: %2'), selectedIdx, classId2Name(classIdGet(data))));
                    }
            }

            selectedIdx++;
        }
        
        // Expand all for the matching document type
        DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(_tree, setupDocIdx + 1);
        
        // Position to the matching setting
        if (printSettingsIdx > 0)
        {
            _tree.select(printSettingsIdx);
        }
        else if (docInstanceIdx > 0)
        {
            _tree.select(docInstanceIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRelatedTreeNodeForReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// If Print management setup form is called from the Docentric report setup form (by
    /// clicking the "Print management" menu item, then:
    ///   - If there is only one document type related to the report from the caller record,
    ///     then we want to select the tree node related to that document instance. We will
    ///     also expand this node, to show all of its sub-nodes.
    ///   - If there are more document types related to the caller report, then we want
    ///     to stay at the top-level node in the module ("Documents" node, which is
    ///     anyway initially selected). One example is PurchPurchaseOrder.Report,
    ///     which is related to Purchase order and Purchase order purchase inquiry document
    ///     types.
    /// </summary>
    /// <param name = "_tree">FormTreeControl: tree object on the left part of the Print 
    /// management setting form.</param>
    private static void selectRelatedTreeNodeForReportSetup(FormTreeControl _tree)
    {
        // Select the top-level node, it is the one named "Documents"
        TreeItemIdx selectedIdx = _tree.getFirstVisible() + 1;  // "Documents" node
        FormTreeItem item = _tree.getItem(selectedIdx); 

        // Is there one or more child nodes on the "Documents" node?
        boolean hasOneChild = true;
        if (item.children())
        {
            if (_tree.getNextSibling(selectedIdx + 1))
            {
                hasOneChild = false;
            }            
        }

        // If there is only one child to the "Documents" node, get positioned to that child and expand it.
        if (hasOneChild)
        {
            selectedIdx++;
            DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(_tree, selectedIdx);
            _tree.select(selectedIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRelatedTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the Print management setting form is opened. If it is opened
    /// from our Report setup form or Print mgmt utils form, we want to select the exact node
    /// in its tree on the left side that matches the caller record.
    /// </summary>
    /// <param name = "_args">Args: arguments passed from the caller. We expect that the caller
    /// is one of our forms.</param>
    /// <param name = "_tree">FormTreeControl: tree object on the left part of the Print management 
    /// setting form. We want to select one of its nodes.</param>
    public static void selectRelatedTreeNode(Args _args, FormTreeControl _tree)
    {
        if (_args && _args.caller() && (_args.caller() is FormRun))
        {
            FormRun callerFormRun = _args.caller();

            switch (callerFormRun.name())
            {
                case formStr(DocReportTable):                    
                    DocPrintMgmtSetupHelper::selectRelatedTreeNodeForReportSetup(_tree);
                    break;

                case formStr(DocPrintMgmtUtils):
                    DocPrintMgmtSetupHelper::selectRelatedTreeNodeForPrintMgmtUtils(callerFormRun, _tree);
                    break;

                default:
                    return;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>