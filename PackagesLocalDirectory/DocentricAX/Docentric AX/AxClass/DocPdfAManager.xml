<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPdfAManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;
using DPDFA = Docentric.AX.Documents.Pdf.PdfAConversion;

/// <summary>
/// The DocPdfAManager class is a manager for converting PDFs to PDF/A format for long-term archiving.
/// </summary>
public class DocPdfAManager
{
    private DocPdfAConformanceLevel pdfAConformanceLevel;
    private str pdfOwnerPassword;
    private System.IO.MemoryStream sourceDocument = null;
    protected UnknownNoYes isPdfOutputFormat = UnknownNoYes::Unknown;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPdfAConformanceLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the PDF/A conformance level.
    /// </summary>
    /// <param name = "_pdfAConformanceLevel">PDF/A conformance level</param>
    public void setPdfAConformanceLevel(DocPdfAConformanceLevel _pdfAConformanceLevel)
    {
        pdfAConformanceLevel = _pdfAConformanceLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdfOwnerPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the password used to add or change PDF restrictions for the PDF document.
    /// </summary>
    /// <param name = "_pdfOwnerPassword">Password</param>
    /// <remarks>
    /// The owner password must be set if the provided encrypted PDF document 
    /// is intended for conversion to PDF/A.
    /// </remarks>
    public void setPdfOwnerPassword(str _pdfOwnerPassword = '')
    {
        pdfOwnerPassword = _pdfOwnerPassword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the source document.
    /// </summary>
    /// <param name = "_sourceDocument">Source document</param>
    public void setSourceDocument(System.IO.MemoryStream _sourceDocument)
    {
        sourceDocument = _sourceDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target document as memory stream.
    /// </summary>
    /// <returns>Target document as memory stream</returns>
    /// <remarks>
    /// The returned target document is:
    /// - PDF/A complient, if canConvert is true
    /// - unchanged, if canConvert is false
    /// </remarks>
    public System.IO.MemoryStream getTargetDocument()
    {
        System.IO.MemoryStream targetDocument = sourceDocument;

        if (this.canConvert())
        {
            targetDocument = this.convertDocumentInternal();
        }

        // Reset the cached variables.
        isPdfOutputFormat = UnknownNoYes::Unknown;

        return targetDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfOutputFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the source document file format is PDF.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isPdfOutputFileFormat()
    {
        if (isPdfOutputFormat == UnknownNoYes::Unknown)
        {
            sourceDocument.Position = 0;
            DocFileType docFileType = DocFileDetection::GetKnownFileType(sourceDocument);
            sourceDocument.Position = 0;
            isPdfOutputFormat = docFileType == DocFileType::Pdf ? UnknownNoYes::Yes : UnknownNoYes::No;
        }
        return isPdfOutputFormat == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the conversion of the source document to PDF/A can be done.
    /// The conversion can be done when:
    /// - the source document is PDF
    /// - the PDF/A conformance level is set
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canConvert()
    {
        return (this.isPdfOutputFileFormat()
                    && pdfAConformanceLevel != DocPdfAConformanceLevel::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDocumentInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the PDF source document content to PDF/A.
    /// </summary>
    /// <returns>Converted PDF source document content to PDF/A</returns>
    private System.IO.MemoryStream convertDocumentInternal()
    {
        System.IO.MemoryStream sourceContentCoverted = new System.IO.MemoryStream();

        str errMsg = "@DocentricAX4:PdfToPdfAConversionConvertDocumentError";
        try
        {
            using (System.IO.MemoryStream sourceContent = sourceDocument)
            {
                // Create the conversion options
                DPDFA.DocPdfAConversionProperties conversionProperties = new DPDFA.DocPdfAConversionProperties();
                
                DPDFA.DocPdfAConformanceLevel docPdfAConformanceLevel;
                conversionProperties.PdfAConformanceLevel = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(docPdfAConformanceLevel.GetType(), enumNum(DocPdfAConformanceLevel), pdfAConformanceLevel);
                conversionProperties.OwnerPassword = pdfOwnerPassword;

                // Convert the PDF document to the PDF/A document
                DPDFA.DocPdfAManager::ConvertToPdfA(sourceContent, sourceContentCoverted, conversionProperties);
            }

            // Reset the position of the returned stream to the beggining
            sourceContentCoverted.Position = 0;
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrPdfToPdfAConversion);
        }
        catch (Exception::Internal)
        {
            DocGlobalHelper::handleClrException(funcName(), errMsg, Exception::Error, DocConstantDiagnostics::ErrPdfToPdfAConversion);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), errMsg, DocConstantDiagnostics::ErrPdfToPdfAConversion);
        }
        return sourceContentCoverted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the provided PDF source document to PDF/A.
    /// If the provided PDF source document is encrypted, the PDF owner password must be set 
    /// to successfully convert the PDF document to PDF/A.
    /// </summary>
    /// <param name = "_sourceDocument">PDF source document</param>
    /// <param name = "_pdfAConformanceLevel">PDF/A conformance level</param>
    /// <param name = "_pdfOwnerPassword">PDF owner password</param>
    /// <returns>Document content as memory stream</returns>
    /// <remarks>
    /// The returned document content is:
    /// - PDF/A complient, if canConvert is true
    /// - unchanged, if canConvert is false
    /// </remarks>
    public static System.IO.MemoryStream convertDocument(
        System.IO.MemoryStream _sourceDocument,
        DocPdfAConformanceLevel _pdfAConformanceLevel,
        str _pdfOwnerPassword = '')
    {
        if (_sourceDocument == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The source document cannot be converted to PDF/A due to invalid parameters: _sourceDocument is null');
        }

        DocPdfAManager docPdfAManager = new DocPdfAManager();
        docPdfAManager.setSourceDocument(_sourceDocument);
        docPdfAManager.setPdfAConformanceLevel(_pdfAConformanceLevel);
        docPdfAManager.setPdfOwnerPassword(_pdfOwnerPassword);

        return docPdfAManager.getTargetDocument();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>