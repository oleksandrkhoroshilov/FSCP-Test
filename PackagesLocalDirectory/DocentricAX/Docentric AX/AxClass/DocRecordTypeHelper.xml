<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocRecordTypeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

/// <summary>
/// The class DocRecordTypeHelper is a helper class for dealing with different record types.
/// </summary>
public class DocRecordTypeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account table record for specified account number and account role.
    /// </summary>
    /// <param name = "_accountNum">Account number</param>
    /// <param name = "_accountRole">Account role</param>
    /// <returns>Account table record</returns>
    public static Common getAccountTableRecord(str _accountNum, DocAccountRole _accountRole)
    {
        Common accountTableRecord = null;

        if (_accountNum)
        {
            if (_accountRole == DocAccountRole::Customer)
            {
                CustTable custTable = CustTable::find(_accountNum);
                accountTableRecord = custTable;
            }
            else if (_accountRole == DocAccountRole::Vendor)
            {
                VendTable vendTable = VendTable::find(_accountNum);
                accountTableRecord = vendTable;
            }
        }

        return accountTableRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account table name for specified account number and account role.
    /// </summary>
    /// <param name = "_accountNum">Account number</param>
    /// <param name = "_accountRole">Account role</param>
    /// <returns>Account table name</returns>
    public static str getAccountTableName(str _accountNum, DocAccountRole _accountRole)
    {
        str tableName = '';

        if (_accountNum)
        {
            if (_accountRole == DocAccountRole::Customer)
            {
                tableName = tableId2PName(tableNum(CustTable));
            }
            else if (_accountRole == DocAccountRole::Vendor)
            {
                tableName = tableId2PName(tableNum(VendTable));
            }
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table name for specified source table Id and source table type.
    /// </summary>
    /// <param name = "_sourceTableId">Source table Id</param>
    /// <param name = "_sourceTableType">Source table type</param>
    /// <returns>Source table name</returns>
    public static str getSourceTableName(str _sourceTableId, DocSourceTableType _sourceTableType)
    {
        str tableName = '';

        if (_sourceTableId)
        {
            switch (_sourceTableType)
            {
                case DocSourceTableType::LedgerJournalTable:
                    tableName = tableId2PName(tableNum(LedgerJournalTable));
                    break;

                case DocSourceTableType::ProdTable:
                    tableName = tableId2PName(tableNum(ProdTable));
                    break;

                case DocSourceTableType::ProjInvoiceTable:
                    tableName = tableId2PName(tableNum(ProjProposalJour));
                    break;

                case DocSourceTableType::PurchRFQCaseTable:
                    tableName = tableId2PName(tableNum(PurchRFQCaseTable));
                    break;

                case DocSourceTableType::PurchTable:
                    tableName = tableId2PName(tableNum(PurchTable));
                    break;

                case DocSourceTableType::SalesQuotationTable:
                    tableName = tableId2PName(tableNum(SalesQuotationTable));
                    break;

                case DocSourceTableType::SalesTable:
                    tableName = tableId2PName(tableNum(SalesTable));
                    break;

                case DocSourceTableType::WHSLoadTable:
                    tableName = tableId2PName(tableNum(WHSLoadTable));
                    break;

                case DocSourceTableType::WHSShipmentTable:
                    tableName = tableId2PName(tableNum(WHSShipmentTable));
                    break;

                case DocSourceTableType::WMSShipment:
                    tableName = tableId2PName(tableNum(WMSShipment));
                    break;

                case DocSourceTableType::CustInvoiceTable:
                    tableName = tableId2PName(tableNum(CustInvoiceTable));
                    break;

                default:
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedSourceTableType", _sourceTableType));
            }
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table record for specified source table Id and source table type.
    /// </summary>
    /// <param name = "_sourceTableId">Source table Id</param>
    /// <param name = "_sourceTableType">Source table type</param>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <returns>Source table record</returns>
    public static Common getSourceTableRecord(str _sourceTableId, DocSourceTableType _sourceTableType, RecId _journalRecId = 0)
    {
        Common sourceTableRecord = null;

        if (_sourceTableId)
        {
            switch (_sourceTableType)
            {
                case DocSourceTableType::LedgerJournalTable:
                    LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(_sourceTableId);
                    sourceTableRecord = LedgerJournalTable;
                    break;

                case DocSourceTableType::ProdTable:
                    ProdTable prodTable = ProdTable::find(_sourceTableId);
                    sourceTableRecord = prodTable;
                    break;

                case DocSourceTableType::ProjInvoiceTable:
                    ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::findRecId(_journalRecId);
                    ProjProposalJour projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);
                    sourceTableRecord = projProposalJour;
                    break;

                case DocSourceTableType::PurchRFQCaseTable:
                    PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::find(_sourceTableId);
                    sourceTableRecord = purchRFQCaseTable;
                    break;

                case DocSourceTableType::PurchTable:
                    PurchTable purchTable = PurchTable::find(_sourceTableId);
                    sourceTableRecord = purchTable;
                    break;

                case DocSourceTableType::SalesQuotationTable:
                    SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(_sourceTableId);
                    sourceTableRecord = salesQuotationTable;
                    break;

                case DocSourceTableType::SalesTable:
                    SalesTable salesTable = SalesTable::find(_sourceTableId);
                    sourceTableRecord = SalesTable;
                    break;

                case DocSourceTableType::WHSLoadTable:
                    WHSLoadTable whsLoadTable = WHSLoadTable::find(_sourceTableId);
                    sourceTableRecord = whsLoadTable;
                    break;

                case DocSourceTableType::WHSShipmentTable:
                    WHSShipmentTable whsShipmentTable = WHSShipmentTable::find(_sourceTableId);
                    sourceTableRecord = whsShipmentTable;
                    break;

                case DocSourceTableType::WMSShipment:
                    WMSShipment wmsShipment = WMSShipment::find(_sourceTableId);
                    sourceTableRecord = wmsShipment;
                    break;

                case DocSourceTableType::CustInvoiceTable:
                    CustInvoiceTable custInvoiceTable;
                    select firstonly custInvoiceTable where custInvoiceTable.InvoiceId == _sourceTableId;
                    
                    if (!custInvoiceTable)
                    {
                        // Proforma
                        CustInvoiceJour custInvoiceJour;
                        if (_journalRecId)
                        {
                            custInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, DocJournalType::CustInvoiceJour) as CustInvoiceJour;
    
                            // When printing a proforma Free Text Invoice ID,
                            // the custInvoiceJour.InvoiceId is a concatenation of # and the custInvoiceJour.RecId
                            // (see FreeTextInvoiceController.invoiceId2RecID())
                            select firstOnly custInvoiceTable
                                where custInvoiceTable.RecId == str2int64(subStr(custInvoiceJour.InvoiceId, 2, strLen(custInvoiceJour.InvoiceId)));
                        }
                    }

                    sourceTableRecord = custInvoiceTable;
                    break;

                default:
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedSourceTableType", _sourceTableType));
            }
        }

        return sourceTableRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line table name for specified source table Id and source table type.
    /// </summary>
    /// <param name = "_sourceTableId">Source table Id</param>
    /// <param name = "_sourceTableType">Source table type</param>
    /// <returns>Source line table name</returns>
    public static str getSourceLineTableName(str _sourceTableId, DocSourceTableType _sourceTableType)
    {
        str tableName;

        if (_sourceTableId)
        {
            switch (_sourceTableType)
            {
                //case DocSourceTableType::LedgerJournalTable:
                //    LedgerJournalTable ledgerJournalTable = this.getSourceTableRecord() as LedgerJournalTable;
                //    break;

                //case DocSourceTableType::ProdTable:
                //    ProdTable prodTable = this.getSourceTableRecord() as ProdTable;
                //    break;

                //case DocSourceTableType::ProjInvoiceTable:
                //    ProjInvoiceTable projInvoiceTable = this.getSourceTableRecord() as ProjInvoiceTable;
                //    break;

                case DocSourceTableType::PurchRFQCaseTable:                    
                    tableName = tableId2PName(tableNum(PurchRFQCaseLine));
                    break;

                case DocSourceTableType::PurchTable:
                    tableName = tableId2PName(tableNum(PurchLine));
                    break;

                case DocSourceTableType::SalesQuotationTable:
                    tableName = tableId2PName(tableNum(SalesQuotationLine));
                    break;

                case DocSourceTableType::SalesTable:
                    tableName = tableId2PName(tableNum(SalesLine));
                    break;

                case DocSourceTableType::WHSLoadTable:
                    tableName = tableId2PName(tableNum(WHSLoadLine));
                    break;

                case DocSourceTableType::WHSShipmentTable:
                    tableName = tableId2PName(tableNum(WHSLoadLine));
                    break;

                case DocSourceTableType::WMSShipment:
                    tableName = tableId2PName(tableNum(WMSOrderTrans));
                    break;

                case DocSourceTableType::CustInvoiceTable:
                    tableName = tableId2PName(tableNum(CustInvoiceLine));
                    break;

                default:
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedSourceTableType", _sourceTableType));
            }
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line records for specified source table Id and source table type.
    /// </summary>
    /// <param name = "_sourceTableId">Source table Id</param>
    /// <param name = "_sourceTableType">Source table type</param>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <returns>Source line records</returns>
    public static Common getSourceLineRecords(str _sourceTableId, DocSourceTableType _sourceTableType, RecId _journalRecId = 0)
    {
        Common sourceLineRecords = null;

        if (_sourceTableId)
        {
            switch (_sourceTableType)
            {
                //case DocSourceTableType::LedgerJournalTable:
                //    LedgerJournalTable ledgerJournalTable = this.getSourceTableRecord() as LedgerJournalTable;

                //    LedgerJournalTrans ledgerJournalTrans;
                //    select ledgerJournalTrans where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;
                //    sourceLineRecords = ledgerJournalTrans;
                //    break;

                //case DocSourceTableType::ProdTable:
                //    Not implemented;
                //    break;

                case DocSourceTableType::ProjInvoiceTable:
                    ProjProposalJour projProposalJour = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType, _journalRecId) as ProjProposalJour;
             
                    DocProjProposalAllLinesView projProposalLines;
                    select projProposalLines where projProposalLines.ProposalId == projProposalJour.ProposalId;
                    sourceLineRecords = projProposalLines;

                    break;

                case DocSourceTableType::PurchRFQCaseTable:
                    PurchRFQCaseTable purchRFQCaseTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as PurchRFQCaseTable;

                    PurchRFQCaseLine purchRFQCaseLine;
                    select purchRFQCaseLine where purchRFQCaseLine.RFQCaseId == purchRFQCaseTable.RFQCaseId;
                    sourceLineRecords = purchRFQCaseLine;
                    break;

                case DocSourceTableType::PurchTable:
                    PurchTable purchTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as PurchTable;

                    PurchLine purchLine;
                    select purchLine where purchLine.PurchId == purchTable.PurchId;
                    sourceLineRecords = purchLine;
                    break;

                case DocSourceTableType::SalesQuotationTable:
                    SalesQuotationTable salesQuotationTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as SalesQuotationTable;

                    SalesQuotationLine salesQuotationLine;
                    select salesQuotationLine where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId;
                    sourceLineRecords = salesQuotationLine;
                    break;

                case DocSourceTableType::SalesTable:                    
                    SalesLine salesLine;
                    CustInvoiceJour custInvoiceJour;
                    if (_journalRecId)
                    {
                        custInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, DocJournalType::CustInvoiceJour) as CustInvoiceJour;
                    }

                    if (custInvoiceJour)
                    {
                        // Not proforma, get the related sales lines through the posted journal transactions
                        CustInvoiceTrans custInvoiceTrans;
                        select salesLine
                            exists join custInvoiceTrans
                                where custInvoiceTrans.InventTransId == salesLine.InventTransId
                                    && custInvoiceTrans.ParentRecId == custInvoiceJour.RecId;
                    }
                    else
                    {
                        // Proforma scenario.
                        // First find the related Sales Order and then return all the lines linked to it.
                        // This won't return the correct result in case where the lines from different sales orders 
                        // are selected for one invoice.
                        SalesTable salesTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as SalesTable;

                        select salesLine where salesLine.SalesId == salesTable.SalesId;
                    }
                    
                    sourceLineRecords = salesLine;

                    break;

                case DocSourceTableType::WHSLoadTable:
                    WHSLoadTable whsLoadTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as WHSLoadTable;

                    WHSLoadLine whsLoadLine;
                    select whsLoadLine where whsLoadLine.LoadId == whsLoadTable.LoadId;
                    sourceLineRecords = whsLoadLine;
                    break;

                case DocSourceTableType::WHSShipmentTable:
                    WHSShipmentTable whsShipmentTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as WHSShipmentTable;

                    WHSLoadLine whsLoadLineShipment;
                    select whsLoadLineShipment where whsLoadLineShipment.ShipmentId == whsShipmentTable.ShipmentId;
                    sourceLineRecords = whsLoadLineShipment;
                    break;

                case DocSourceTableType::WMSShipment:
                    WMSShipment wmsShipment = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as WMSShipment;

                    WMSOrderTrans wmsOrderTrans;
                    select wmsOrderTrans where wmsOrderTrans.shipmentId == wmsShipment.shipmentId;
                    sourceLineRecords = wmsOrderTrans;
                    break;

                case DocSourceTableType::CustInvoiceTable:
                    CustInvoiceTable custInvoiceTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType, _journalRecId) as CustInvoiceTable;                    
                    CustInvoiceLine custInvoiceLine;
                    select custInvoiceLine where custInvoiceLine.ParentRecId == custInvoiceTable.RecId;
                    sourceLineRecords = custInvoiceLine;

                    break;

                default:
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedSourceTableType", _sourceTableType));
            }
        }

        return sourceLineRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal table name for specified journal record Id and journal type.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <param name = "_journalType">Journal type</param>
    /// <returns>Journal table name</returns>
    public static str getJournalTableName(RecId _journalRecId, DocJournalType _journalType)
    {
        str tableName = '';

        if (_journalRecId)
        {
            switch (_journalType)
            {
                case DocJournalType::CustCollectionLetterJour:
                    tableName = tableId2PName(tableNum(CustCollectionLetterJour));
                    break;

                case DocJournalType::CustConfirmJour:
                    tableName = tableId2PName(tableNum(CustConfirmJour));
                    break;

                case DocJournalType::CustInterestJour:
                    tableName = tableId2PName(tableNum(CustInterestJour));
                    break;

                case DocJournalType::CustInvoiceJour:
                    tableName = tableId2PName(tableNum(CustInvoiceJour));
                    break;

                case DocJournalType::CustPackingSlipJour:
                    tableName = tableId2PName(tableNum(CustPackingSlipJour));
                    break;

                case DocJournalType::CustQuotationConfirmJour:
                    tableName = tableId2PName(tableNum(CustQuotationConfirmJour));
                    break;

                case DocJournalType::CustQuotationJour:
                    tableName = tableId2PName(tableNum(CustQuotationJour));
                    break;

                case DocJournalType::ProjInvoiceJour:
                    tableName = tableId2PName(tableNum(ProjInvoiceJour));
                    break;

                case DocJournalType::PurchConfirmationRequestJour:
                    tableName = tableId2PName(tableNum(PurchConfirmationRequestJour));
                    break;

                case DocJournalType::VendInvoiceJour:
                    tableName = tableId2PName(tableNum(VendInvoiceJour));
                    break;

                case DocJournalType::VendPackingSlipJour:
                    tableName = tableId2PName(tableNum(VendPackingSlipJour));
                    break;

                case DocJournalType::VendPurchOrderJour:
                    tableName = tableId2PName(tableNum(VendPurchOrderJour));
                    break;

                case DocJournalType::VendReceiptsListJour:
                    tableName = tableId2PName(tableNum(VendReceiptsListJour));
                    break;

                case DocJournalType::VendRFQJour:
                    tableName = tableId2PName(tableNum(VendRFQJour));
                    break;

                case DocJournalType::WMSPickingRoute:
                    tableName = tableId2PName(tableNum(WMSPickingRoute));
                    break;

                default:

                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedJournalType", _journalType));
            }
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal table record for specified journal record Id and journal type.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <param name = "_journalType">Journal type</param>
    /// <returns>Journal table record</returns>
    public static Common getJournalTableRecord(RecId _journalRecId, DocJournalType _journalType)
    {
        Common journalTableRecord = null;

        if (_journalRecId)
        {
            switch (_journalType)
            {
                case DocJournalType::CustCollectionLetterJour:
                    CustCollectionLetterJour custCollectionLetterJour = CustCollectionLetterJour::findRecId(_journalRecId);
                    journalTableRecord = custCollectionLetterJour;
                    break;

                case DocJournalType::CustConfirmJour:
                    CustConfirmJour custConfirmJour = CustConfirmJour::findRecId(_journalRecId);
                    journalTableRecord = custConfirmJour;
                    break;

                case DocJournalType::CustInterestJour:
                    CustInterestJour custInterestJour = CustInterestJour::findRecId(_journalRecId);
                    journalTableRecord = custInterestJour;
                    break;

                case DocJournalType::CustInvoiceJour:
                    CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(_journalRecId);
                    journalTableRecord = custInvoiceJour;
                    break;

                case DocJournalType::CustPackingSlipJour:
                    CustPackingSlipJour custPackingSlipJour = CustPackingSlipJour::findRecId(_journalRecId);
                    journalTableRecord = custPackingSlipJour;
                    break;

                case DocJournalType::CustQuotationConfirmJour:
                    CustQuotationConfirmJour custQuotationConfirmJour = CustQuotationConfirmJour::findRecId(_journalRecId);
                    journalTableRecord = custQuotationConfirmJour;
                    break;

                case DocJournalType::CustQuotationJour:
                    CustQuotationJour custQuotationJour = CustQuotationJour::findRecId(_journalRecId);
                    journalTableRecord = custQuotationJour;
                    break;

                case DocJournalType::ProjInvoiceJour:
                    ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::findRecId(_journalRecId);
                    journalTableRecord = projInvoiceJour;
                    break;

                case DocJournalType::PurchConfirmationRequestJour:
                    PurchConfirmationRequestJour purchConfirmationRequestJour;
                    select firstonly purchConfirmationRequestJour where purchConfirmationRequestJour.RecId == _journalRecId;
                    journalTableRecord = purchConfirmationRequestJour;
                    break;

                case DocJournalType::VendInvoiceJour:
                    VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findRecId(_journalRecId);
                    journalTableRecord = vendInvoiceJour;
                    break;

                case DocJournalType::VendPackingSlipJour:
                    VendPackingSlipJour vendPackingSlipJour = VendPackingSlipJour::findRecId(_journalRecId);
                    journalTableRecord = vendPackingSlipJour;
                    break;

                case DocJournalType::VendPurchOrderJour:
                    VendPurchOrderJour vendPurchOrderJour = VendPurchOrderJour::findRecId(_journalRecId);
                    journalTableRecord = vendPurchOrderJour;
                    break;

                case DocJournalType::VendReceiptsListJour:
                    VendReceiptsListJour vendReceiptsListJour = VendReceiptsListJour::findRecId(_journalRecId);
                    journalTableRecord = vendReceiptsListJour;
                    break;

                case DocJournalType::VendRFQJour:
                    VendRFQJour vendRFQJour;
                    select firstonly vendRFQJour where vendRFQJour.RecId == _journalRecId;
                    journalTableRecord = vendRFQJour;
                    break;

                case DocJournalType::WMSPickingRoute:
                    WMSPickingRoute wmsPickingRoute;
                    select firstonly wmsPickingRoute where wmsPickingRoute.RecId == _journalRecId;
                    journalTableRecord = wmsPickingRoute;
                    break;
                
                default:

                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedJournalType", _journalType));
            }
        }

        return journalTableRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalLineTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal line table name for specified journal record Id and journal type.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <param name = "_journalType">Journal type</param>
    /// <returns>Journal line table name</returns>
    public static str getJournalLineTableName(RecId _journalRecId, DocJournalType _journalType)
    {
        str tableName;

        if (_journalRecId)
        {
            switch (_journalType)
            {
                case DocJournalType::CustCollectionLetterJour:
                    tableName = tableId2PName(tableNum(CustCollectionLetterTrans));
                    break;

                case DocJournalType::CustConfirmJour:
                    tableName = tableId2PName(tableNum(CustConfirmTrans));
                    break;

                case DocJournalType::CustInterestJour:
                    tableName = tableId2PName(tableNum(CustInterestTrans));
                    break;

                case DocJournalType::CustInvoiceJour:
                    tableName = tableId2PName(tableNum(CustInvoiceTrans));
                    break;

                case DocJournalType::CustPackingSlipJour:
                    tableName = tableId2PName(tableNum(CustPackingSlipTrans));
                    break;

                case DocJournalType::CustQuotationConfirmJour:
                    tableName = tableId2PName(tableNum(CustQuotationConfirmTrans));
                    break;

                case DocJournalType::CustQuotationJour:
                    tableName = tableId2PName(tableNum(CustQuotationTrans));
                    break;

                case DocJournalType::ProjInvoiceJour:
                    tableName = tableId2PName(tableNum(ProjTransPosting));
                    break;

                case DocJournalType::PurchConfirmationRequestJour:
                    tableName = tableId2PName(tableNum(PurchLineAllVersions));
                    break;

                case DocJournalType::VendInvoiceJour:
                    tableName = tableId2PName(tableNum(VendInvoiceTrans));
                    break;

                case DocJournalType::VendPackingSlipJour:
                    tableName = tableId2PName(tableNum(VendPackingSlipTrans));
                    break;

                case DocJournalType::VendPurchOrderJour:
                    tableName = tableId2PName(tableNum(PurchLineAllVersions));
                    break;

                case DocJournalType::VendReceiptsListJour:
                    tableName = tableId2PName(tableNum(VendReceiptsListTrans));
                    break;

                case DocJournalType::VendRFQJour:
                    tableName = tableId2PName(tableNum(VendRFQTrans));
                    break;

                case DocJournalType::WMSPickingRoute:
                    tableName = tableId2PName(tableNum(WMSOrderTrans));
                    break;

                default:

                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedJournalType", _journalType));
            }
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalLineRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal line records.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <param name = "_journalType">Journal type</param>
    /// <returns>Journal line records</returns>
    public static Common getJournalLineRecords(RecId _journalRecId, DocJournalType _journalType)
    {
        Common journalLineRecords = null;

        if (_journalRecId)
        {
            switch (_journalType)
            {
                case DocJournalType::CustCollectionLetterJour:
                    CustCollectionLetterJour custCollectionLetterJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustCollectionLetterJour;
                    
                    CustCollectionLetterTrans custCollectionLetterTrans;
                    select custCollectionLetterTrans 
                        where custCollectionLetterTrans.AccountNum == custCollectionLetterJour.AccountNum
                            && custCollectionLetterTrans.CollectionLetterNum == custCollectionLetterJour.CollectionLetterNum;
                    journalLineRecords = custCollectionLetterTrans;

                    break;

                case DocJournalType::CustConfirmJour:
                    CustConfirmJour custConfirmJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustConfirmJour;

                    CustConfirmTrans custConfirmTrans;
                    select custConfirmTrans
                        where custConfirmTrans.SalesId == custConfirmJour.SalesId
                            && custConfirmTrans.ConfirmId == custConfirmJour.ConfirmId
                            && custConfirmTrans.ConfirmDate == custConfirmJour.ConfirmDate;
                    journalLineRecords = custConfirmTrans;

                    break;

                case DocJournalType::CustInterestJour:
                    CustInterestJour custInterestJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustInterestJour;

                    CustInterestTrans custInterestTrans;
                    select custInterestTrans
                        where custInterestTrans.InterestNote == custInterestJour.InterestNote;
                    journalLineRecords = custInterestTrans;

                    break;

                case DocJournalType::CustInvoiceJour:

                    CustInvoiceTrans custInvoiceTrans;
                    select custInvoiceTrans 
                        where custInvoiceTrans.ParentRecId == _journalRecId;
                    journalLineRecords = custInvoiceTrans;

                    break;

                case DocJournalType::CustPackingSlipJour:
                    CustPackingSlipJour custPackingSlipJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustPackingSlipJour;

                    CustPackingSlipTrans custPackingSlipTrans;
                    select custPackingSlipTrans
                        where custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId
                            && custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                            && custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate;
                    journalLineRecords = custPackingSlipTrans;

                    break;

                case DocJournalType::CustQuotationConfirmJour:
                    CustQuotationConfirmJour custQuotationConfirmJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustQuotationConfirmJour;

                    CustQuotationConfirmTrans custQuotationConfirmTrans;
                    select custQuotationConfirmTrans
                        where custQuotationConfirmTrans.QuotationDate == custQuotationConfirmJour.QuotationDate
                            && custQuotationConfirmTrans.QuotationConfirmId == custQuotationConfirmJour.QuotationConfirmId
                            && custQuotationConfirmTrans.SalesId == custQuotationConfirmJour.SalesId;
                    journalLineRecords = custQuotationConfirmTrans;

                    break;

                case DocJournalType::CustQuotationJour:
                    CustQuotationJour custQuotationJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustQuotationJour;

                    CustQuotationTrans custQuotationTrans;
                    select custQuotationTrans
                        where custQuotationTrans.SalesId == custQuotationJour.SalesId
                            && custQuotationTrans.QuotationId == custQuotationJour.QuotationId
                            && custQuotationTrans.QuotationDate == custQuotationJour.QuotationDate;
                    journalLineRecords = custQuotationTrans;

                    break;

                case DocJournalType::ProjInvoiceJour:
                    ProjInvoiceJour projInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as ProjInvoiceJour;

                    ProjInvoiceTransUnion projInvoiceTransUnion;

                    select projInvoiceTransUnion
                        where projInvoiceTransUnion.ProjInvoiceId == projInvoiceJour.ProjInvoiceId;
                    journalLineRecords = projInvoiceTransUnion;

                    break;

                case DocJournalType::PurchConfirmationRequestJour:
                    PurchConfirmationRequestJour purchConfirmationRequestJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as PurchConfirmationRequestJour;
                    
                    PurchLineAllVersions purchLineAllVersionsCR;
                    PurchTableVersion purchTableVersionCR;
                    InventDim inventDimCR;
                    select purchLineAllVersionsCR
                        where purchLineAllVersionsCR.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
                        exists join inventDimCR
                            where inventDimCR.inventDimId == purchLineAllVersionsCR.InventDimId
                        exists join purchTableVersionCR
                            where purchTableVersionCR.PurchId == purchLineAllVersionsCR.PurchId
                                && purchTableVersionCR.RecId == purchConfirmationRequestJour.PurchTableVersion;
                    journalLineRecords = purchLineAllVersionsCR;
                    
                    break;

                case DocJournalType::VendInvoiceJour:
                    VendInvoiceJour vendInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendInvoiceJour;

                    VendInvoiceTrans vendInvoiceTrans;
                    select vendInvoiceTrans
                        where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                            && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId;
                    journalLineRecords = vendInvoiceTrans;

                    break;

                case DocJournalType::VendPackingSlipJour:
                    VendPackingSlipJour vendPackingSlipJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendPackingSlipJour;

                    VendPackingSlipTrans vendPackingSlipTrans;
                    select vendPackingSlipTrans
                        where vendPackingSlipTrans.VendPackingSlipJour == vendPackingSlipJour.RecId;
                    journalLineRecords = vendPackingSlipTrans;

                    break;

                case DocJournalType::VendPurchOrderJour:
                    VendPurchOrderJour vendPurchOrderJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendPurchOrderJour;
                    
                    PurchLineAllVersions purchLineAllVersionsPO;
                    PurchTableVersion purchTableVersionPO;
                    InventDim inventDimPO;
                    select purchLineAllVersionsPO
                        where purchLineAllVersionsPO.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
                        exists join inventDimPO
                            where inventDimPO.inventDimId == purchLineAllVersionsPO.InventDimId
                        exists join purchTableVersionPO
                            where purchTableVersionPO.PurchId == purchLineAllVersionsPO.PurchId
                                && purchTableVersionPO.RecId == vendPurchOrderJour.PurchTableVersion;
                    journalLineRecords = purchLineAllVersionsPO;

                    break;

                case DocJournalType::VendReceiptsListJour:
                    VendReceiptsListJour vendReceiptsListJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendReceiptsListJour;

                    VendReceiptsListTrans vendReceiptsListTrans;
                    select vendReceiptsListTrans
                        where vendReceiptsListTrans.PurchId == vendReceiptsListJour.PurchId
                            && vendReceiptsListTrans.ReceiptsListId == vendReceiptsListJour.ReceiptsListId
                            && vendReceiptsListTrans.ReceiptsListDate == vendReceiptsListJour.ReceiptsListDate;
                    journalLineRecords = vendReceiptsListTrans;

                    break;

                case DocJournalType::VendRFQJour:
                    VendRFQJour vendRFQJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendRFQJour;

                    VendRFQTrans vendRFQTrans;
                    select vendRFQTrans
                        where vendRFQTrans.RFQId == vendRFQJour.RFQId
                            && vendRFQTrans.InternalRFQId == vendRFQJour.InternalRFQId
                            && vendRFQTrans.RFQDate == vendRFQJour.RFQDate;
                    journalLineRecords = vendRFQTrans;

                    break;

                case DocJournalType::WMSPickingRoute:
                    WMSPickingRoute wmsPickingRoute = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as WMSPickingRoute;

                    WMSOrderTrans wmsOrderTrans;
                    select wmsOrderTrans 
                        where wmsOrderTrans.fullPallet == 0
                        && wmsOrderTrans.routeId == wmsPickingRoute.pickingRouteID;
                    journalLineRecords = wmsOrderTrans;

                    break;

                default:

                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedJournalTypeForLoadFromJournalLines", 
                        _journalType, enum2Str(DocReportAttachmentLoadFrom::JournalLines)));
            }
        }

        return journalLineRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineItemRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line records with items.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <param name = "_journalType">Journal type</param>
    /// <param name = "_sourceTableId">Source table Id</param>
    /// <param name = "_sourceTableType">Source table type</param>
    /// <returns>Line records with items</returns>
    public static Common getLineItemRecords(RecId _journalRecId, DocJournalType _journalType, str _sourceTableId, DocSourceTableType _sourceTableType)
    {
        InventTable inventTable = null;

        if (_journalRecId)
        {
            switch (_journalType)
            {
                case DocJournalType::CustConfirmJour:
                    CustConfirmJour custConfirmJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustConfirmJour;

                    CustConfirmTrans custConfirmTrans;
                    select inventTable
                        exists join custConfirmTrans
                            where custConfirmTrans.ItemId == inventTable.ItemId
                                && custConfirmTrans.SalesId == custConfirmJour.SalesId
                                && custConfirmTrans.ConfirmId == custConfirmJour.ConfirmId
                                && custConfirmTrans.ConfirmDate == custConfirmJour.ConfirmDate;

                    break;

                case DocJournalType::CustInvoiceJour:
                    CustInvoiceJour custInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustInvoiceJour;

                    if (custInvoiceJour)                    
                    {
                        // Not proforma, get related journal transactions and the items on them
                        CustInvoiceTrans custInvoiceTrans;
                        select inventTable
                            exists join custInvoiceTrans
                                where custInvoiceTrans.ItemId == inventTable.ItemId
                                    && custInvoiceTrans.ParentRecId == custInvoiceJour.RecId;
                    }
                    else
                    {
                        // Proforma, get the related Sales Order, then its lines, then the items on them.
                        // This won't be correct in case lines from different orders were used for the invoice.     
                        SalesLine salesLine;                   
                        SalesTable salesTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as SalesTable;
                        select inventTable
                            exists join salesLine
                                where salesLine.ItemId == inventTable.ItemId
                                    && salesLine.SalesId == salesTable.SalesId;
                    }                  

                    break;

                case DocJournalType::CustPackingSlipJour:
                    CustPackingSlipJour custPackingSlipJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustPackingSlipJour;

                    CustPackingSlipTrans custPackingSlipTrans;
                    select inventTable
                        exists join custPackingSlipTrans
                            where custPackingSlipTrans.ItemId == inventTable.ItemId
                                && custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId
                                && custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                                && custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate;

                    break;

                case DocJournalType::CustQuotationConfirmJour:
                    CustQuotationConfirmJour custQuotationConfirmJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustQuotationConfirmJour;

                    CustQuotationConfirmTrans custQuotationConfirmTrans;
                    select inventTable
                        exists join custQuotationConfirmTrans
                        where custQuotationConfirmTrans.ItemId == inventTable.ItemId
                            && custQuotationConfirmTrans.QuotationDate == custQuotationConfirmJour.QuotationDate
                            && custQuotationConfirmTrans.QuotationConfirmId == custQuotationConfirmJour.QuotationConfirmId
                            && custQuotationConfirmTrans.SalesId == custQuotationConfirmJour.SalesId;

                    break;

                case DocJournalType::CustQuotationJour:
                    CustQuotationJour custQuotationJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustQuotationJour;

                    CustQuotationTrans custQuotationTrans;
                    select inventTable
                        exists join custQuotationTrans
                        where custQuotationTrans.ItemId == inventTable.ItemId
                            && custQuotationTrans.SalesId == custQuotationJour.SalesId
                            && custQuotationTrans.QuotationId == custQuotationJour.QuotationId
                            && custQuotationTrans.QuotationDate == custQuotationJour.QuotationDate;

                    break;

                case DocJournalType::PurchConfirmationRequestJour:
                    PurchConfirmationRequestJour purchConfirmationRequestJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as PurchConfirmationRequestJour;
                    
                    PurchLineAllVersions purchLineAllVersionsCR;
                    PurchTableVersion purchTableVersionCR;
                    select inventTable
                        exists join purchLineAllVersionsCR
                            where purchLineAllVersionsCR.ItemId == inventTable.ItemId
                        exists join purchTableVersionCR
                            where purchTableVersionCR.PurchId == purchLineAllVersionsCR.PurchId
                                && purchTableVersionCR.RecId == purchConfirmationRequestJour.PurchTableVersion;

                    break;

                case DocJournalType::VendInvoiceJour:
                    VendInvoiceJour vendInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendInvoiceJour;

                    VendInvoiceTrans vendInvoiceTrans;
                    select inventTable
                        exists join vendInvoiceTrans
                        where vendInvoiceTrans.ItemId == inventTable.ItemId
                            && vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                            && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId;

                    break;

                case DocJournalType::VendPackingSlipJour:
                    VendPackingSlipJour vendPackingSlipJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendPackingSlipJour;

                    VendPackingSlipTrans vendPackingSlipTrans;
                    select inventTable
                        exists join vendPackingSlipTrans
                        where vendPackingSlipTrans.ItemId == inventTable.ItemId
                            && vendPackingSlipTrans.VendPackingSlipJour == vendPackingSlipJour.RecId;

                    break;

                case DocJournalType::VendPurchOrderJour:
                    VendPurchOrderJour vendPurchOrderJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendPurchOrderJour;
                
                    PurchLineAllVersions purchLineAllVersionsPO;
                    PurchTableVersion purchTableVersionPO;

                    select inventTable
                        exists join purchLineAllVersionsPO
                            where purchLineAllVersionsPO.ItemId == inventTable.ItemId
                        exists join purchTableVersionPO
                            where purchTableVersionPO.PurchId == purchLineAllVersionsPO.PurchId
                                && purchTableVersionPO.RecId == vendPurchOrderJour.PurchTableVersion;

                    break;

                case DocJournalType::VendReceiptsListJour:
                    VendReceiptsListJour vendReceiptsListJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendReceiptsListJour;

                    VendReceiptsListTrans vendReceiptsListTrans;
                    select inventTable
                        exists join vendReceiptsListTrans
                        where vendReceiptsListTrans.ItemId == inventTable.ItemId
                            && vendReceiptsListTrans.PurchId == vendReceiptsListJour.PurchId
                            && vendReceiptsListTrans.ReceiptsListId == vendReceiptsListJour.ReceiptsListId
                            && vendReceiptsListTrans.ReceiptsListDate == vendReceiptsListJour.ReceiptsListDate;

                    break;

                case DocJournalType::VendRFQJour:
                    VendRFQJour vendRFQJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendRFQJour;

                    VendRFQTrans vendRFQTrans;
                    select inventTable
                        exists join vendRFQTrans
                        where vendRFQTrans.ItemId == inventTable.ItemId
                            && vendRFQTrans.RFQId == vendRFQJour.RFQId
                            && vendRFQTrans.InternalRFQId == vendRFQJour.InternalRFQId
                            && vendRFQTrans.RFQDate == vendRFQJour.RFQDate;

                    break;                

                case DocJournalType::WMSPickingRoute:
                    WMSPickingRoute wmsPickingRoute = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as WMSPickingRoute;

                    WMSOrderTrans wmsOrderTrans;
                    select inventTable
                        exists join wmsOrderTrans
                            where wmsOrderTrans.itemId == inventTable.ItemId
                                && wmsOrderTrans.fullPallet == 0
                                && wmsOrderTrans.routeId == wmsPickingRoute.pickingRouteID;

                    break;

                default:

                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedJournalTypeForLoadFromItem",
                        _journalType, enum2Str(DocReportAttachmentLoadFrom::Items)));
            }
        }

        return inventTable as Common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineItemVariantRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line records with item variants.
    /// </summary>
    /// <param name = "_journalRecId">Journal record Id</param>
    /// <param name = "_journalType">Journal type</param>
    /// <param name = "_sourceTableId">Source table Id</param>
    /// <param name = "_sourceTableType">Source table type</param>
    /// <returns>Line records with item variants</returns>
    public static Common getLineItemVariantRecords(RecId _journalRecId, DocJournalType _journalType, str _sourceTableId, DocSourceTableType _sourceTableType)
    {
        InventDimCombination releasedProductVariant;
        
        SalesLine salesLine;
        SalesQuotationLine salesQuotationLine;

        PurchLine purchLine;

        InventDim inventDim, productInventDim;

        if (_journalRecId)
        {
            switch (_journalType)
            {
                // Sales order confirmation.
                case DocJournalType::CustConfirmJour:
                    CustConfirmJour custConfirmJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustConfirmJour;

                    CustConfirmTrans custConfirmTrans;
                    
                    select releasedProductVariant
                        exists join salesLine
                            where salesLine.RetailVariantId == releasedProductVariant.RetailVariantId
                        exists join custConfirmTrans
                            where custConfirmTrans.InventTransId == salesLine.InventTransId
                               && custConfirmTrans.SalesId == custConfirmJour.SalesId
                               && custConfirmTrans.ConfirmId == custConfirmJour.ConfirmId
                               && custConfirmTrans.ConfirmDate == custConfirmJour.ConfirmDate;

                    break;

                // Customer invoice journal.
                case DocJournalType::CustInvoiceJour:
                    CustInvoiceJour custInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustInvoiceJour;

                    if (custInvoiceJour)
                    {
                        // Not proforma, get related journal transactions and the items on them
                        CustInvoiceTrans custInvoiceTrans;

                        select releasedProductVariant
                            exists join salesLine
                                where salesLine.RetailVariantId == releasedProductVariant.RetailVariantId
                            exists join custInvoiceTrans
                                where custInvoiceTrans.InventTransId == salesLine.InventTransId
                                   && custInvoiceTrans.ParentRecId == custInvoiceJour.RecId;
                    }
                    else
                    {
                        // Proforma, get the related Sales Order, then its lines, then the item variants on them.
                        // This won't be correct in case lines from different orders were used for the invoice.
                        SalesTable salesTable = DocRecordTypeHelper::getSourceTableRecord(_sourceTableId, _sourceTableType) as SalesTable;
                        
                        select releasedProductVariant
                            exists join salesLine
                                where salesLine.RetailVariantId == releasedProductVariant.RetailVariantId
                                   && salesLine.SalesId == salesTable.SalesId;
                    }

                    break;

                // Customer packing slip.
                case DocJournalType::CustPackingSlipJour:
                    CustPackingSlipJour custPackingSlipJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustPackingSlipJour;

                    CustPackingSlipTrans custPackingSlipTrans;

                    select releasedProductVariant
                        exists join salesLine
                            where salesLine.RetailVariantId == releasedProductVariant.RetailVariantId
                        exists join custPackingSlipTrans
                            where custPackingSlipTrans.InventTransId == salesLine.InventTransId
                               && custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId
                               && custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                               && custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate;

                    break;

                // Quotation confirmation.
                case DocJournalType::CustQuotationConfirmJour:
                    CustQuotationConfirmJour custQuotationConfirmJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustQuotationConfirmJour;

                    CustQuotationConfirmTrans custQuotationConfirmTrans;
                    
                    select releasedProductVariant
                        exists join salesQuotationLine
                            where salesQuotationLine.RetailVariantId == releasedProductVariant.RetailVariantId
                        exists join custQuotationConfirmTrans
                            where custQuotationConfirmTrans.InventTransId == salesQuotationLine.InventTransId
                               && custQuotationConfirmTrans.QuotationDate == custQuotationConfirmJour.QuotationDate
                               && custQuotationConfirmTrans.QuotationConfirmId == custQuotationConfirmJour.QuotationConfirmId
                               && custQuotationConfirmTrans.SalesId == custQuotationConfirmJour.SalesId;

                    break;

                // Quotation journal.
                case DocJournalType::CustQuotationJour:
                    CustQuotationJour custQuotationJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as CustQuotationJour;

                    CustQuotationTrans custQuotationTrans;

                    select releasedProductVariant
                        exists join salesQuotationLine
                            where salesQuotationLine.RetailVariantId == releasedProductVariant.RetailVariantId
                        exists join custQuotationTrans
                            where custQuotationTrans.InventTransId == salesQuotationLine.InventTransId
                               && custQuotationTrans.SalesId == custQuotationJour.SalesId
                               && custQuotationTrans.QuotationId == custQuotationJour.QuotationId
                               && custQuotationTrans.QuotationDate == custQuotationJour.QuotationDate;

                    break;

                // Purchase inquiry.
                case DocJournalType::PurchConfirmationRequestJour:
                    PurchConfirmationRequestJour purchConfirmationRequestJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as PurchConfirmationRequestJour;

                    PurchLineAllVersions purchLineAllVersionsCR;
                    PurchTableVersion purchTableVersionCR;

                    select releasedProductVariant
                        exists join purchLine
                            where purchLine.VariantId == releasedProductVariant.RetailVariantId
                        exists join purchLineAllVersionsCR
                            where purchLineAllVersionsCR.InventTransId == purchLine.InventTransId
                        exists join purchTableVersionCR
                            where purchTableVersionCR.PurchId == purchLineAllVersionsCR.PurchId
                               && purchTableVersionCR.RecId == purchConfirmationRequestJour.PurchTableVersion;

                    break;

                // Vendor invoice journal.
                case DocJournalType::VendInvoiceJour:
                    VendInvoiceJour vendInvoiceJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendInvoiceJour;

                    VendInvoiceTrans vendInvoiceTrans;

                    select releasedProductVariant
                        exists join vendInvoiceTrans
                            where vendInvoiceTrans.ItemId == releasedProductVariant.ItemId
                               && vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                               && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                               && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                               && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                               && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                        exists join inventDim
                            where inventDim.inventDimId == vendInvoiceTrans.InventDimId
                        exists join productInventDim
                            where productInventDim.inventDimId == releasedProductVariant.InventDimId
                               && productInventDim.DataAreaId == inventDim.DataAreaId
                               && productInventDim.configId == inventDim.configId
                               && productInventDim.InventColorId == inventDim.InventColorId
                               && productInventDim.InventSizeId == inventDim.InventSizeId
                               && productInventDim.InventStyleId == inventDim.InventStyleId
                               && productInventDim.InventVersionId == inventDim.InventVersionId
                               && productInventDim.inventBatchId == null
                               && productInventDim.InventGtdId_RU == null
                               && productInventDim.InventLocationId == null
                               && productInventDim.InventOwnerId_RU == null
                               && productInventDim.InventProfileId_RU == null
                               && productInventDim.inventSerialId == null
                               && productInventDim.InventSiteId == null
                               && productInventDim.InventStatusId == null
                               && productInventDim.LicensePlateId == null
                               && productInventDim.wMSLocationId == null
                               && productInventDim.wMSPalletId == null;

                    break;

                // Vendor product receipts.
                case DocJournalType::VendPackingSlipJour:
                    VendPackingSlipJour vendPackingSlipJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendPackingSlipJour;

                    VendPackingSlipTrans vendPackingSlipTrans;

                    select releasedProductVariant
                        exists join purchLine
                            where purchLine.VariantId == releasedProductVariant.RetailVariantId
                        exists join vendPackingSlipTrans
                            where vendPackingSlipTrans.InventTransId == purchLine.InventTransId
                               && vendPackingSlipTrans.VendPackingSlipJour == vendPackingSlipJour.RecId;

                    break;

                // Purchase order confirmation.
                case DocJournalType::VendPurchOrderJour:
                    VendPurchOrderJour vendPurchOrderJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendPurchOrderJour;

                    PurchLineAllVersions purchLineAllVersionsPO;
                    PurchTableVersion purchTableVersionPO;

                    select releasedProductVariant
                        exists join purchLine
                            where purchLine.VariantId == releasedProductVariant.RetailVariantId
                        exists join purchLineAllVersionsPO
                            where purchLineAllVersionsPO.InventTransId == purchLine.InventTransId
                        exists join purchTableVersionPO
                            where purchTableVersionPO.PurchId == purchLineAllVersionsPO.PurchId
                               && purchTableVersionPO.RecId == vendPurchOrderJour.PurchTableVersion;

                    break;

                // Receipts list journal.
                case DocJournalType::VendReceiptsListJour:
                    VendReceiptsListJour vendReceiptsListJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendReceiptsListJour;

                    VendReceiptsListTrans vendReceiptsListTrans;

                    select releasedProductVariant
                        exists join purchLine
                            where purchLine.VariantId == releasedProductVariant.RetailVariantId
                        exists join vendReceiptsListTrans
                            where vendReceiptsListTrans.InventTransId == purchLine.InventTransId
                               && vendReceiptsListTrans.PurchId == vendReceiptsListJour.PurchId
                               && vendReceiptsListTrans.ReceiptsListId == vendReceiptsListJour.ReceiptsListId
                               && vendReceiptsListTrans.ReceiptsListDate == vendReceiptsListJour.ReceiptsListDate;

                    break;

                // Request for quotation journal.
                case DocJournalType::VendRFQJour:
                    VendRFQJour vendRFQJour = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as VendRFQJour;

                    VendRFQTrans vendRFQTrans;
                    
                    select releasedProductVariant
                        exists join vendRFQTrans
                            where vendRFQTrans.ItemId == releasedProductVariant.ItemId
                               && vendRFQTrans.RFQId == vendRFQJour.RFQId
                               && vendRFQTrans.InternalRFQId == vendRFQJour.InternalRFQId
                               && vendRFQTrans.RFQDate == vendRFQJour.RFQDate
                        exists join inventDim
                            where inventDim.inventDimId == vendRFQTrans.InventDimId
                        exists join productInventDim
                            where productInventDim.inventDimId == releasedProductVariant.InventDimId
                               && productInventDim.DataAreaId == inventDim.DataAreaId
                               && productInventDim.configId == inventDim.configId
                               && productInventDim.InventColorId == inventDim.InventColorId
                               && productInventDim.InventSizeId == inventDim.InventSizeId
                               && productInventDim.InventStyleId == inventDim.InventStyleId
                               && productInventDim.InventVersionId == inventDim.InventVersionId
                               && productInventDim.inventBatchId == null
                               && productInventDim.InventGtdId_RU == null
                               && productInventDim.InventLocationId == null
                               && productInventDim.InventOwnerId_RU == null
                               && productInventDim.InventProfileId_RU == null
                               && productInventDim.inventSerialId == null
                               && productInventDim.InventSiteId == null
                               && productInventDim.InventStatusId == null
                               && productInventDim.LicensePlateId == null
                               && productInventDim.wMSLocationId == null
                               && productInventDim.wMSPalletId == null;

                    break;

                // Picking route.
                case DocJournalType::WMSPickingRoute:
                    WMSPickingRoute wmsPickingRoute = DocRecordTypeHelper::getJournalTableRecord(_journalRecId, _journalType) as WMSPickingRoute;

                    WMSOrderTrans wmsOrderTrans;

                    select releasedProductVariant
                        exists join salesLine
                            where salesLine.RetailVariantId == releasedProductVariant.RetailVariantId
                        exists join wmsOrderTrans
                            where wmsOrderTrans.InventTransId == salesLine.InventTransId
                               && wmsOrderTrans.fullPallet == 0
                               && wmsOrderTrans.routeId == wmsPickingRoute.pickingRouteID;

                    break;

                default:

                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:UnsupportedJournalTypeForLoadFromItemVariants",
                        _journalType, enum2Str(DocReportAttachmentLoadFrom::ItemVariants)));
            }
        }

        return releasedProductVariant as Common;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>