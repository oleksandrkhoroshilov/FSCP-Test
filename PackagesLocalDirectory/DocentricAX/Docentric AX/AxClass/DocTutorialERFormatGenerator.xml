<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTutorialERFormatGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Tutorial class as an example how to use DocERFormatGenerator class to run any ER format configuration
/// and get the generated document as memory stream. The genrated document can be also converted to PDF.
/// 
/// This tutorial executes the ER format configuration for Fixed asset roll forward report and downloads 
/// the generated document as memory stream. It also converts the generated document to PDF and donwloads
/// the generated PDF.
/// 
/// Requirements:
/// - imported ER configuration Fixed assets model (Fixed assets model.version.1.xml)
/// - imported ER configuration Fixed asset roll forward format (Fixed asset roll forward.version.1.6.xml)
/// - call the static method DocTutorialERFormatGenerator::main() from created runnable class to run the tutorial
/// </summary>
public class DocTutorialERFormatGenerator extends DocERFormatGenerator
{
    private const str ERModelDataSourceName = 'model';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setFormatMappingGUID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ER format mapping GUID.
    /// </summary>
    public void setFormatMappingGUID()
    {
        AssetRollForwardContract dataContract = this.getContract();
        this.parmFormatMappingGUID(ERFormatMappingTable::getGuidByRecId(dataContract.parmFormatMapping()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instantiated controller or data contact class from args.
    /// </summary>
    /// <param name = "_args">An instance of Args object</param>
    public void initFromArgs(Args _args)
    {
        AssetRollForwardContract assetRollForwardParams = _args.object() as AssetRollForwardContract;

        AssetRollForwardContract dataContract = this.getContract();
        dataContract.parmFromDate(assetRollForwardParams.parmFromDate());
        dataContract.parmToDate(assetRollForwardParams.parmToDate());
        dataContract.parmFormatMapping(assetRollForwardParams.parmFormatMapping());
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateER</Name>
				<Source><![CDATA[
    /// <summary>
    /// The service method for Fixed asset roll forward report.
    /// </summary>
    /// <param name = "_contract">The Fixed asset roll forward contract</param>
    /// <returns>An instance of DocTutorialERFormatGenerator class</returns>
    public DocTutorialERFormatGenerator generateER(AssetRollForwardContract _contract)
    {
        // Call ER to generate the report
        this.generateERReport(_contract);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameters for ER format.
    /// </summary>
    /// <param name = "_formatMappingRun">An instance of ERFormatMappingRun class</param>
    public void setParameters(ERIFormatMappingRun _formatMappingRun)
    {
        AssetRollForwardContract dataContract = this.getContract();

        Query query = new Query(SysOperationHelper::base64Decode(dataContract.parmQuery()));
        AssetRollForwardDP dataProvider = AssetRollForwardDP::construct();
        AssetRollForwardTmp assetRollForwardTmp = dataProvider.getAssetRollForwardTmp(dataContract, query);
        this.getERModelName(_formatMappingRun);

        ERIModelDefinitionParamsAction params = new ERModelDefinitionParamsUIActionComposite()
            .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(assetRollForwardTmp))
            .add(new ERModelDefinitionObjectParameterAction(ERModelDataSourceName, 'MyParameters', dataContract, true));

        _formatMappingRun.withParameter(params);
        _formatMappingRun.withFileDestination(dataContract.getFileDestination());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ER format sample for Fixed asset roll forward report.
    /// </summary>
    public static void main()
    {
        // Set parameters for Fixed asset roll forward report
        AssetRollForwardContract dataContract = new AssetRollForwardContract();
        dataContract.parmFromDate(mkDate(1, 1, 2000));
        dataContract.parmToDate(mkDate(31, 12, 2021));
        dataContract.parmFormatMapping(ERFormatMappingTable::findByGUID(str2Guid('{1BD90DB1-B189-4E65-9557-D833FA526DD2}')).RecId);

        Args args = new Args();
        args.object(dataContract);

        // Create the ER format generator object with provided parameters
        DocTutorialERFormatGenerator erFormatGenerator = new DocTutorialERFormatGenerator(
            classStr(AssetRollForwardController),
            classStr(DocTutorialERFormatGenerator),
            methodStr(DocTutorialERFormatGenerator, generateER));
        if (erFormatGenerator)
        {
            // Initialize the ER format generator object
            erFormatGenerator.initFromArgs(args);
            // Run the ER format generator
            erFormatGenerator.run();
            // Get generated document as memory stream
            using (System.IO.MemoryStream documentContent = erFormatGenerator.getDocumentContentMemoryStream())
            {
                // Check if the document was generated
                if (documentContent != null)
                {
                    // Download the generated document
                    documentContent.Position = 0;
                    DocFileMngHelper::sendFileToUser(documentContent, erFormatGenerator.parmGeneratedDocument().parmFileName(), '', '', '', '', true, true);
                }
            }
            // Get generated document as PDF memory stream
            using (System.IO.MemoryStream pdfDocumentContent = erFormatGenerator.getPdfDocumentContentMemoryStream(DocReportPrintOrientation::Landscape))
            {
                // Check if the source document was successfuly converted to PDF memory stream
                if (pdfDocumentContent != null)
                {
                    // Download the generated PDF document
                    pdfDocumentContent.Position = 0;
                    DocFileMngHelper::sendFileToUser(pdfDocumentContent, System.IO.Path::ChangeExtension(erFormatGenerator.parmGeneratedDocument().parmFileName(), DocConstantFile::FileExtPdf), '', '', '', '', true, true);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>