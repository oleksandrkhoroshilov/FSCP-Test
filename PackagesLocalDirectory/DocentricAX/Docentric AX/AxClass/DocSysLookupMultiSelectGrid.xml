<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSysLookupMultiSelectGrid</Name>
	<SourceCode>
		<Declaration><![CDATA[
using UL = Docentric.AX.Framework.Utilities;

/// <summary>
/// The <c>DocSysLookupMultiSelect</c> class extends the <c>SysLookupMultiSelect</c> that is used to create 
/// a multi-select lookup based on a query object. The extended class supports the use of multi-select lookup
/// on a form string control bind to a data field or a data method.
/// </summary>
public class DocSysLookupMultiSelectGrid extends SysLookupMultiSelectGrid
{
    #Characters

    private str delimiter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a lookup form.
    /// </summary>
    /// <param name = "_wait">Should the process to be paused</param>
    public void run(boolean _wait = true)
    {
        Args lookupArgs = new Args();
        lookupArgs.name(formstr(SysLookupMultiSelectGrid));
        lookupArgs.caller(callingControl);
        Object formRunObject = classfactory.formRunClass(lookupArgs);
        Form lookupForm = formRunObject.form();

        System.Object[] parameters = new System.Object[1]();
        parameters.SetValue(lookupForm, 0);
        UL.ReflectionHelper::InvokeInstanceMethod(this, 'buildDesign', parameters);

        Args args = new Args();
        args.object(lookupForm);
        args.parmObject(this);
        formRunObject = classfactory.formRunClass(args);
        formRun = formRunObject;
        formRun.init();

        formDS = formRun.dataSource();
       
        callingControl.performFormLookup(formRunObject);
        
        this.markSelectedValues();

        FormGridControl formGridControl = formRun.control(idx);
        formGridControl.autoSizeColumns(false);
        formRun.detach();

        if (_wait)
        {
            formRun.wait();
        }

        if (formRun.closedOk())
        {
            this.getSelected();
            this.setSelected();
        }
        else if (formRun.closedCancel()) // Clear
        {
            selectedId = connull();
            selectedStr = connull();
            this.setSelected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markSelectedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the selected values in a lookup form.
    /// </summary>
    private void markSelectedValues()
    {
        int i, conLength;

        // The first 'if' will be hit for cases where drop down was shown and then value was selected.
        // We also need to address the case where control is shown first time and string control has value
        // loaded from SysLastValue, in this case, when user clicks on drop down, the fields shoud the checked automatically.
        // For loading from SysLastValue to work for temp table based query, user will be required to provide selectField container.
        if (selectedId != connull())
        {
            conLength = conlen(selectedId);
            for (i = 1; i <= conLength; i++)
            {
                RecId recId = conpeek(selectedId, i);
                formDS.positionToRecordByValue(fieldnum(Common, RecId), queryValue(recId));
                formDS.mark(true);
            }
        }
        else if(selectField != conNull())
        {
            if (selectedStr != conNull())
            {
                conLength = conlen(selectedStr);
                for (i = 1; i <= conLength; i++)
                {
                    // Find the record matching a value by the selectField ID; it's possible that
                    // there is no match, if the valid values (QueryRun values) have been updated due to calls to refreshQueryRun
                    formDS.positionToRecordByValue(conPeek(selectField, 2), queryValue(conPeek(selectedStr, i)));
                    formDS.mark(true);
                }

                // Some values in the control could no longer be valid, reset the selected control values
                this.getSelected();
                this.setSelected();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ID and the <c>FormStringControl</c> class of all the selected records based on the
    /// container.
    /// </summary>
    public void setSelected()
    {
        Common currentDSRecord;

        callingControlId.text(SysOperationHelper::convertMultiSelectedValueString(selectedId));

        FormDataSource formDataSource = callingControlStr.dataSourceObject();
        if (formDataSource && callingControlStr.dataField())
        {
            // Form string control is bind to a data field. Setting the text property of the form string control is ignored.
            DictField dictfield = new DictField(formDataSource.table(), callingControlStr.dataField());
            currentDSRecord = formDataSource.cursor();
            currentDSRecord.(dictfield.id()) = con2Str(selectedStr, delimiter);
            callingControlStr.update();
        }
        else if (formDataSource && callingControlStr.dataMethod())
        {
            // Form string control is bind to a data method. Setting the text property of the form string control is ignored.
            DictTable dictTable = new DictTable(formDataSource.table());
            currentDSRecord = formDataSource.cursor();
            dictTable.callObject(callingControlStr.dataMethod(), currentDSRecord, NoYes::Yes, con2Str(selectedStr, delimiter));
            callingControlStr.update();
        }
        else
        {
            // Form string control is not bind.
            callingControlStr.text(con2Str(selectedStr, delimiter));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDelimiter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the delimiter used to create a list of selected values.
    /// </summary>
    /// <param name = "_delimiter">A delimiter</param>
    /// <returns>A delimiter</returns>
    public str parmDelimiter(str _delimiter = delimiter)
    {
        delimiter = _delimiter;
        return delimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingControlStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets the <c>FormStringControl</c> that keeps track of the selected record values for the calling control.
    /// </summary>
    /// <param name="_callingControlStr">The <c>FormStringControl</c> to set.</param>
    /// <returns>The <c>FormStringControl</c> to get.</returns>
    public FormControl parmCallingControlStr(FormControl _callingControlStr = callingControlStr)
    {
        callingControlStr = _callingControlStr;
        selectedStr = callingControlStr.text() == '' ? conNull() : str2con_RU(callingControlStr.text(), delimiter);
        return callingControlStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>DocSysLookupMultiSelect</c> class that is used to create a multi-select lookup based on a query
    /// object.
    /// </summary>
    /// <param name = "_ctrlId">The <c>FormStringControl</c> that keeps tracks of the selected RecIDs for the calling control</param>
    /// <param name = "_ctrlStr">The <c>FormStringControl</c> that keeps track of the selected record values for the calling control</param>
    /// <param name = "_delimiter">A delimiter used to create a list of selected values</param>
    /// <returns>A new isntance of the <c>DocSysLookupMultiSelect</c> class.</returns>
    public static DocSysLookupMultiSelectGrid construct(FormStringControl _ctrlId, FormStringControl _ctrlStr, str _delimiter = #SEMICOLON)
    {
        DocSysLookupMultiSelectGrid lookupMultiSelect = new DocSysLookupMultiSelectGrid();
        lookupMultiSelect.parmDelimiter(_delimiter);
        lookupMultiSelect.parmCallingControlId(_ctrlId);
        lookupMultiSelect.parmCallingControlStr(_ctrlStr);
        return lookupMultiSelect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>