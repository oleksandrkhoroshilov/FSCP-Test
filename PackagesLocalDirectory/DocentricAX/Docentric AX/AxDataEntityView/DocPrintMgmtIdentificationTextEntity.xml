<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintMgmtIdentificationTextEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrintMgmtIdentificationTextEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked by the framework as a first step both during Export and Import.
    /// </summary>
    public void postLoad()
    {
        super();

        // We want to unpack the settings only when exporting. When importing,
        // postLoad() is the very first method in the framework pipeline to be executed,
        // so all data entity fields will be empty. PrintMgmtDocInstance.PriorityId field
        // may not be empty, so we can use it to distinguish between the export
        // (it will have some non-zero value) and Import (it will be zero).
        if (this.DocInstancePriorityId)
        {
            this.setNodeSpecificValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked by the framework during Import.
    /// The order of execution of the methods implemented in this entity is:
    ///     1. defaultRow()
    ///     2. persistEntity()
    ///         2.1. mapEntityDataSource()
    /// The standard data entities typically implement the import-related logic
    /// in this method. Method is executed once for each entity data source.
    /// It is first executed for the top-level data source (PrintMgmtIdentificationText)
    /// and then for the related data sources (PrintMgmtSettings and PrintMgmtDocInstance).
    /// </summary>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DocPrintMgmtIdentificationTextEntity entity = _entityCtx.getEntityRecord() as DocPrintMgmtIdentificationTextEntity;
        DataEntityDatabaseOperation dbOperation = _dataSourceCtx.getDatabaseOperation();
                  
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(DocPrintMgmtIdentificationTextEntity, PrintMgmtIdentificationText):
                if (entity.ParentId)
                {
                    changecompany(entity.DataArea)
                    {
                        // We have set this field in defaultRow() method, which means that the correct
                        // PrintMgmSettings record exists in the target company.
                        // Try to find the existing PrintMgmtIdentificationText which has relation to this PrintMgmSettings.
                        PrintMgmtIdentificationText existingIdentificationText = PrintMgmtIdentificationText::find(entity.ParentId, entity.LanguageId, true);
                        if (existingIdentificationText)
                        {
                            // Record exists, no need to insert the PrintMgmtIdentificationText record,
                            // but we might need to update it.
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);

                            PrintMgmtIdentificationText identificationText = _dataSourceCtx.getBuffer();
                            existingIdentificationText.LanguageId = identificationText.LanguageId;
                            existingIdentificationText.IdentificationText = identificationText.IdentificationText;

                            _dataSourceCtx.setBuffer(existingIdentificationText);
                        }
                        else
                        {
                            // We couldn't find the matching PrintMgmtIdentificationText record during the defaultRow() method,
                            // which means we need to add a new record.
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                        }
                    }
                }
                break;    
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
        
        DocPrintMgmtIdentificationTextEntity entity = _entityCtx.getEntityRecord() as DocPrintMgmtIdentificationTextEntity;
    
        changecompany(entity.DataArea)
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNodeSpecificValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets node specific values.
    /// </summary>
    private void setNodeSpecificValues()
    {            
        // Node-specific values
        // We export them, but during the import we handle only the Customer- and Vendor-specific
        // Print Mgmt setting.
        if (this.DocInstanceReferencedTableId)
        {
            switch (this.DocInstanceReferencedTableId)
            {
                case tableNum(CustTable):
                    this.NodeSpecificId = CustTable::findRecId(this.DocInstanceReferencedRecId).AccountNum;
                    break;

                case tableNum(SalesTable):
                    this.NodeSpecificId = SalesTable::findRecId(this.DocInstanceReferencedRecId).SalesId;
                    break;

                case tableNum(SalesQuotationTable):
                    this.NodeSpecificId = SalesQuotationTable::findRec(this.DocInstanceReferencedRecId).QuotationId;
                    break;

                case tableNum(CustInvoiceTable):
                    this.NodeSpecificId = CustInvoiceTable::findRecId(this.DocInstanceReferencedRecId).InvoiceAccount;
                    break;
                    
                case tableNum(VendTable):
                    this.NodeSpecificId = VendTable::findRecId(this.DocInstanceReferencedRecId).AccountNum;
                    break;
                    
                case tableNum(PurchTable):
                    this.NodeSpecificId = PurchTable::findRecId(this.DocInstanceReferencedRecId).PurchId;
                    break;
                    
                case tableNum(ProjInvoiceTable):
                    this.NodeSpecificId = DocPrintMgmtIdentificationTextEntity::getNodeSpecificIdForProjInvoiceTable(this.DocInstanceReferencedRecId);
                    break;
                    
                case tableNum(ProjTable):
                    this.NodeSpecificId = ProjTable::findRecId(this.DocInstanceReferencedRecId).ProjId;
                    break;
                    
                case tableNum(InventTransferTable):
                    this.NodeSpecificId = DocPrintMgmtIdentificationTextEntity::getNodeSpecificIdForInventTransferTable(this.DocInstanceReferencedRecId);
                    break;
                    
                case tableNum(PurchRFQTable):
                    this.NodeSpecificId = PurchRFQTable::findRecId(this.DocInstanceReferencedRecId).RFQId;
                    break;
                    
                case tableNum(PurchRFQVendLink):
                    this.NodeSpecificId = DocPrintMgmtIdentificationTextEntity::getNodeSpecificIdForPurchRFQVendLink(this.DocInstanceReferencedRecId);
                    break;
                    
                case tableNum(InventTable):
                    this.NodeSpecificId = InventTable::findRecId(this.DocInstanceReferencedRecId).ItemId;
                    break;
                    
                case tableNum(SalesAgreementHeader):
                    this.NodeSpecificId = SalesAgreementHeader::find(this.DocInstanceReferencedRecId).CustAccount;
                    break;
                    
                case tableNum(PurchAgreementHeader):
                    this.NodeSpecificId = PurchAgreementHeader::find(this.DocInstanceReferencedRecId).VendAccount;
                    break;
                    
                case tableNum(ProjProposalJour):
                    this.NodeSpecificId = ProjProposalJour::findRecid(this.DocInstanceReferencedRecId).ProposalId;
                    break;
                    
                case tableNum(BankAccountTable):
                    this.NodeSpecificId = DocPrintMgmtIdentificationTextEntity::getNodeSpecificIdForBankAccountTable(this.DocInstanceReferencedRecId);
                    break;

                default:
                    // Skipped node types: Sales, Purch, Ledger, Bank,
                    // SalesAdvanceInvoice, PurchaseAdvanceInvoice, WHS, TMS
                    this.NodeSpecificId = strFmt('RefTable: %1, RefRecId: %2',
                                                    tableId2Name(this.DocInstanceReferencedTableId),
                                                    this.DocInstanceReferencedRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is the first method that framework calls during import.
    /// (Actually, it first calls postLoad(), but we took care that nothing is done there
    /// during the import).
    /// Here the framework has already copied the content from staging, so we fix some keys
    /// and transform the base64str type fields into containers.
    /// </summary>
    public void defaultRow()
    {
        changecompany(this.DataArea)
        {
            // Based on the node type (i.e. Customer, Vendor, AR module, ...) and node specific ID
            // (i.e. Account number, Invoice number, ...) identify the referenced table and record
            // in the target company.
            // For example, if we want to identify one customer, we can't transfer the referenced
            // TableId and RecId, because we won't be able to find the customer in the target
            // legal entity based on these values. Instead, we transfer the NodeType (Customer) and
            // NodeSpecificId (Account number). We calculate them during the export process.
            // While importing (this point in the code) we resolve the referenced TableId and RecId
            // in the target legal entity.
            RefTableId  refTableId;
            RefRecId    refRecId;
            boolean     isFound;
            [refTableId, refRecId, isFound] = DocPrintMgmtIdentificationTextEntity::resolveReferenceData(this.DocInstanceNodeType, this.NodeSpecificId);
            if (isFound)
            {
                this.DocInstanceReferencedTableId = refTableId;
                this.DocInstanceReferencedRecId = refRecId;
            }
            else
            {
                throw error(strFmt('Node-specific ID (%1) for node type (%2) could not be found.',
                            this.NodeSpecificId, enum2Str(this.DocInstanceNodeType)));
            }
    
   
            // Find the relevant PrintMgmtDocInstance based on the newly resolved reference TableId and RecId,
            // and the remaining fields we could directly transfer from source to target.
            // If the corresponding DocInstance record is found, set it.
            PrintMgmtDocInstance docInstance = PrintMgmtDocInstance::find(this.DocInstanceReferencedRecId,
                                                                        this.DocInstanceReferencedTableId,
                                                                        this.DocInstanceNodeType,
                                                                        this.DocInstanceDocumentType,
                                                                        this.DocInstancePriorityId);
            if (docInstance)
            {
                this.PrintSettingsParentId = docInstance.RecId;
            }
            else
            {
                this.PrintSettingsParentId = 0;
            }


            // Set the correct reference for PrintMgmtSettings.
            PrintMgmtSettings settings = PrintMgmtSettings::find(this.PrintSettingsParentId, this.PrintSettingPriorityId);
            if (settings)
            {
                this.ParentId = settings.RecId;
            }
            else
            {
                this.ParentId = 0;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method resolves the reference TableId and RecId which identify
    /// the node in the target environment, based on the node type and node-specific ID.
    /// For example, in case of Customer, node type is Customer and node-specific ID
    /// is Account number.
    /// In this version we handle only Customer and Vendor.
    /// In future versions we will support the less important (i.e. less common)
    /// nodes.
    /// </summary>
    /// <param name = "_nodeType">PrintMgmtNodeType enum. For example: CustTable and
    /// VendTable for Customer and Vendor, Sales for Accounts receivable module, etc.</param>
    /// <param name = "_nodeSpecificId">ID by which the record in a given node can
    /// be identified. For example: Account number for Customer and Vendor nodes.</param>
    /// <returns>Container with reference TableId and RecId, and flag if
    /// the record is found based on the provided parameters.</returns>
    private static container resolveReferenceData(PrintMgmtNodeType _nodeType, Num _nodeSpecificId)
    {
        RefTableId  refTableId = 0;
        RefRecId    refRecId = 0;
        boolean     isFound = true;
        
        if (_nodeSpecificId)
        {
            isFound = false;

            switch (_nodeType)
            {
                case PrintMgmtNodeType::CustTable:
                    CustTable custTable = CustTable::find(_nodeSpecificId);
                    if (custTable)
                    {
                        refTableId = tableNum(CustTable);
                        refRecId = custTable.RecId;
                        isFound = true;
                    }
                    break;
                    
                case PrintMgmtNodeType::VendTable:
                    VendTable vendTable = VendTable::find(_nodeSpecificId);
                    if (vendTable)
                    {
                        refTableId = tableNum(VendTable);
                        refRecId = vendTable.RecId;
                        isFound = true;
                    }
                    break;

                default:
                    refTableId = 0;
                    refRecId = 0;
            }
        }

        container con = [RefTableId, refRecId, isFound];

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeSpecificIdForProjInvoiceTable</Name>
				<Source><![CDATA[
    private static ProjInvoiceProjId getNodeSpecificIdForProjInvoiceTable(RefRecId _recId)
    {
        ProjInvoiceTable projInvoiceTable;

        select firstonly projInvoiceTable where projInvoiceTable.RecId == _recId;

        return projInvoiceTable.ProjInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeSpecificIdForInventTransferTable</Name>
				<Source><![CDATA[
    private static InventTransferId getNodeSpecificIdForInventTransferTable(RefRecId _recId)
    {
        InventTransferTable inventTransferTable;

        select firstonly inventTransferTable where inventTransferTable.RecId == _recId;

        return inventTransferTable.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeSpecificIdForPurchRFQVendLink</Name>
				<Source><![CDATA[
    private static PurchRFQCaseId getNodeSpecificIdForPurchRFQVendLink(RefRecId _recId)
    {
        PurchRFQVendLink purchRFQVendLink;

        select firstonly purchRFQVendLink where purchRFQVendLink.RecId == _recId;

        return purchRFQVendLink.RFQCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeSpecificIdForBankAccountTable</Name>
				<Source><![CDATA[
    private static CompanyBankAccountId getNodeSpecificIdForBankAccountTable(RefRecId _recId)
    {
        BankAccountTable bankAccountTable;

        select firstonly bankAccountTable where bankAccountTable.RecId == _recId;

        return bankAccountTable.AccountID;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:PrintMgmtIdenitficationTextDataEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>PrintMgmtSetupUIIdText</FormRef>
	<Label>@DocentricAX3:PrintMgmtIdenitficationTextDataEntityCaption</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DocPrintMgmtIdentificationTextStaging</DataManagementStagingTable>
	<EntityCategory>Parameters</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DocentricPrintMgmtIdentificationText</PublicCollectionName>
	<PublicEntityName>DocentricPrintMgmtIdentificationText</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationText</Name>
			<Label>@SYS108939</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataArea</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdentificationText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintSettings</Name>
			<Label>@SYS108933</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintSettingsParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingPriorityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocInstance</Name>
			<Label>@SYS108932</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocInstanceDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstancePriorityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceReferencedRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceReferencedTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NodeSpecificId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@DocentricAX3:TranslationFilterShowAll</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataArea</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdentificationText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingsParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingPriorityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NodeSpecificId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceReferencedRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceReferencedTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceNodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstancePriorityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DataArea</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DataAreaId</DataField>
			<DataSource>PrintMgmtIdentificationText</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IdentificationText</Name>
			<DataField>IdentificationText</DataField>
			<DataSource>PrintMgmtIdentificationText</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LanguageId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>LanguageId</DataField>
			<DataSource>PrintMgmtIdentificationText</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ParentId</DataField>
			<DataSource>PrintMgmtIdentificationText</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingsParentId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Reference to DocInstance</Label>
			<Mandatory>No</Mandatory>
			<DataField>ParentId</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingPriorityId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PriorityId</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>NodeSpecificId</Name>
			<Label>@DocentricAX2:NodeSpecificId</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>Num</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceReferencedRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ReferencedRecId</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceReferencedTableId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ReferencedTableId</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceNodeType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>NodeType</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceDocumentType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>DocumentType</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstancePriorityId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PriorityId</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DataArea</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>NodeSpecificId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocInstanceNodeType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocInstanceDocumentType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocInstancePriorityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>PrintSettingPriorityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LanguageId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PrintMgmtIdentificationText</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PrintMgmtIdentificationText</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrintMgmtSettings</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PrintMgmtSettings</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>PrintMgmtDocInstance</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>PrintMgmtDocInstance</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ParentId</Field>
										<JoinDataSource>PrintMgmtSettings</JoinDataSource>
										<JoinRelationName>PrintMgmtDocInstance</JoinRelationName>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ParentId</Field>
								<JoinDataSource>PrintMgmtIdentificationText</JoinDataSource>
								<JoinRelationName>PrintMgmtSettings</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>