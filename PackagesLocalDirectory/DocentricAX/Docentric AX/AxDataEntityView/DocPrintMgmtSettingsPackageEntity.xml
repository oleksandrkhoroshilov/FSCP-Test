<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintMgmtSettingsPackageEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrintMgmtSettingsPackageEntity extends Common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked by the framework as a first step both during Export and Import.
    /// </summary>
    public void postLoad()
    {
        super(); 

        // We want to unpack the settings only when exporting. When importing, 
        // postLoad() is the very first method in the framework pipeline to be executed, 
        // so all data entity fields will be empty. PrintMgmtDocInstance.PriorityId field 
        // may not be empty, so we can use it to distinguish between the export 
        // (it will have some non-zero value) and Import (it will be zero).
        if (this.DocInstancePriorityId)
        {
            this.unpackSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked by the framework during Import.
    /// The order of execution of the methods implemented in this entity is:
    ///     1. defaultRow()
    ///     2. persistEntity()
    ///         2.1. mapEntityDataSource()
    /// The standard data entities typically implement the import-related logic
    /// in this method. Method is executed once for each entity data source.
    /// It is first executed for the top-level data source (PrintMgmtSettings)
    /// and then for the related data sources (PrintMgmtDocInstance and PrintmgmtReportFormat).
    /// </summary>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DocPrintMgmtSettingsPackageEntity entity = _entityCtx.getEntityRecord() as DocPrintMgmtSettingsPackageEntity;           
        DataEntityDatabaseOperation dbOperation = _dataSourceCtx.getDatabaseOperation();
                  
        switch (_dataSourceCtx.name())
        {
                
            case dataEntityDataSourceStr(DocPrintMgmtSettingsPackageEntity, PrintMgmtSettings):

                if (entity.PrintSettingsParentId)
                {
                    changecompany(entity.DataArea)
                    {
                        // We have set this field in defaultRow() method, which means that the correct
                        // DocInstance record exists in the target company.
                        // Try to find the existing print mgmt settings which has relation to is DocInstance.
                        PrintMgmtSettings existingSettings = PrintMgmtSettings::find(entity.PrintSettingsParentId, entity.PrintSettingPriorityId, true);
                        if (existingSettings)
                        {
                            // Record exists, no need to insert the print mgmt settings,
                            // but we might need to update it (different report format and/or print destination setting provided).
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);

                            // Copy the values from the "working" buffer (created from import data)
                            // into the buffer representing the existing settings.
                            // At the end set the "working" buffer to the updated settings.
                            PrintMgmtSettings settings = _dataSourceCtx.getBuffer();
                        
                            existingSettings.Description = settings.Description;
                            existingSettings.NumberOfCopies = settings.NumberOfCopies;
                            existingSettings.PrintJobSettings = settings.PrintJobSettings;
                            existingSettings.QueryPacked = settings.QueryPacked;
                            existingSettings.ReportFormat = settings.ReportFormat;
                            existingSettings.Suppress = settings.Suppress;
                        
                            _dataSourceCtx.setBuffer(existingSettings);
                        }
                        else
                        {
                            // We couldn't find the matching DocInstance record during the defaultRow() method,
                            // which means we will need to add a new DocInstance record and the corresponding new
                            // print mgmt record. Here we request adding a new print mgmt record
                            // and in the block of code dealing with DocInstance we request inserting
                            // a new DocInstance record.
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                        }
                    }
                }
                else
                {
                    // We couldn't find the matching DocInstance record during the defaultRow() method,
                    // which means we will need to add a new DocInstance record and the corresponding new
                    // print mgmt record. Here we request adding a new print mgmt record
                    // and in the block of code dealing with DocInstance we request inserting
                    // a new DocInstance record.
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                }

                break;

            case dataEntityDataSourceStr(DocPrintMgmtSettingsPackageEntity, PrintMgmtDocInstance):

                if (entity.PrintSettingsParentId)
                {                    
                    // We have set this field in defaultRow() method, which means that the correct
                    // DocInstance record exist.
                    // The only field that can be updated is the Name field.
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);

                    PrintMgmtDocInstance existingDocInstance = _dataSourceCtx.getBuffer();
                    existingDocInstance.Name = entity.DocInstanceName;
                    changecompany(entity.DataArea)
                    {
                        _dataSourceCtx.setBuffer(existingDocInstance);
                    }
                }
                else
                {
                    // We couldn't find the matching DocInstance record during the defaultRow() method,
                    // which means we need to add a new record.
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                }

                break;
                
            case dataEntityDataSourceStr(DocPrintMgmtSettingsPackageEntity, PrintMgmtReportFormat):

                if (entity.PrintSettingsReportFormatRecId)
                {
                    // We have set this field in defaultRow() method.
                    // Record exists, no need to insert/update the reportFormat.
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                else
                {
                    // We couldn't find the matching ReportFormat record during the defaultRow() method,
                    // which means we need to add a new record.
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
                }

                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrintMgmtSettingsDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// We call this validation from the defaultRow() method, when all values needed for the validation
    /// are already set in the row.
    /// </summary>
    /// <returns></returns>
    private boolean validatePrintMgmtSettingsDataSource()
    {
        boolean isValid = true;
        str errMessage = '';

        //// Verify that PrintJobSettings matches its checksum.
        str checksum = DocGlobalHelper::computeChecksum(con2base64str(this.PrintJobSettingsV2), this.ChecksumAlgorithm);
        if (checksum != this.PrintJobSettingsV2Checksum)
        {
            isValid = false;
            errMessage += (errMessage == '' ? '' : '\n')
                            + strFmt('Calculated Print job settings checksum (%1) does not match the stored checksum (%2).', checksum, this.PrintJobSettingsV2Checksum);
        }

        //// Try to unpack the container with the print job settings.
        //// In the defaultRow() method we already transformed the base64str field into the container,
        //// now we want to verify that it can be unpacked into an object of SRSPrintDestinationSettings type.
        //// Note: even if PrintJobSettingsStr is heavily modified (for example: truncated), the unpack() below
        //// doesn't throw exception, but perhpas it would recognize the error in some scenarios, so we will
        //// leave it here.
        SRSPrintDestinationSettings pds = new SRSPrintDestinationSettings();
        try
        {
            pds.unpack(this.PrintJobSettingsV2);
        }
        catch
        {
            isValid = false;
            errMessage += (errMessage == '' ? '' : '\n') + 'Print job settings container is corrupted.';
        }

        // If PrintSetting has priority > 1, then the setting must have query and description.
        // Validate that query exists, verify that it matches its checksum and try to unpack it.
        if (this.PrintSettingPriorityId > 1)
        {
            if (this.PrintSettingsQueryPackedV2 == conNull())
            {
                // Query not provided
                isValid = false;
                errMessage += (errMessage == '' ? '' : '\n') + 'Conditional setting (document instance Priority > 1) has no query.';
            }
            else
            {
                // Container for Query provided, verify the checksum.
                checksum = DocGlobalHelper::computeChecksum(con2base64str(this.PrintSettingsQueryPackedV2), this.ChecksumAlgorithm);
                if (checksum != this.QueryPackedV2Checksum)
                {
                    isValid = false;
                    errMessage += (errMessage == '' ? '' : '\n') +
                                strFmt('Calculated Packed query checksum (%1) does not match the stored checksum (%2).', checksum, this.QueryPackedV2Checksum);
                }
                else
                {
                    // try to unpack into Query
                    try
                    {
                        Query query = new Query(this.PrintSettingsQueryPackedV2);
                    }
                    catch
                    {
                        isValid = false;
                        errMessage += (errMessage == '' ? '' : '\n') + 'Query container is corrupted.';
                    }
                }
            }

            if (this.PrintSettingDescription == '')
            {
                // Standard code requires that conditional setting has description
                isValid = false;
                errMessage += (errMessage == '' ? '' : '\n') + 'Conditional setting (document instance Priority > 1) has no description.';
            }
        }

        // If PrintSettings has priority = 1 (default setting), then Query should not exist
        if (this.PrintSettingPriorityId == 1 && this.PrintSettingsQueryPackedV2 != conNull())
        {
            // Query not provided
            isValid = false;
            errMessage += (errMessage == '' ? '' : '\n') + 'Default setting may not have query.';
        }

        // Document types on DocInstance and ReportFormat must be the same.
        // Exception is the situation when Report format isn't specified on the setup (example: Sales advance invoice),
        // which we recognize by empty FormatName. In that case FormatDocumentType is always 0,
        // (equals to PrintMgmtDocumentType::SalesOrderInvoice), so we shouldn't compare it to DocInstanceDocumentType.
        if (this.FormatName != '' && this.DocInstanceDocumentType != this.FormatDocumentType)
        {
            isValid = false;
            errMessage += (errMessage == '' ? '' : '\n') + 'Different document types on DocInstance and ReportFormat.';
        }


        if (isValid)
        {
            return isValid;
        }
        else
        {
            throw error(errMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the entity datasource.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context</param>
    /// <param name = "_dataSourceCtx">Data source runtime context</param>
    /// <returns></returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
        
        DocPrintMgmtSettingsPackageEntity entity = _entityCtx.getEntityRecord() as DocPrintMgmtSettingsPackageEntity;
    
        changecompany(entity.DataArea)
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked by the framework after defaultRow().
    /// From its super() the mapEntityDataSource() method will be executed, so this is
    /// the top-level place to prevent some validations.
    /// Probably all these validation skipping can be removed, but in some moments they seemed
    /// to help. We should try to remove them and perform the detailed testing again.
    /// </summary>
    /// <param name = "_entityCtx"></param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {        
        // Without this line, validation fails due to the PrintSettingsDescription field
        // (even though we skipped its validation, see below). D365 usually leaves
        // this field blank, even though it is mandatory.
        this.skipDataSourceValidateWrite(true); 

        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, PrintSettingsParentId), true);
        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, PrintSettingsReportFormatRecId), true);
        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, PrintSettingDescription), true);  
        
        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, DocInstanceReferencedRecId), true);
        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, DocInstanceReferencedTableId), true);
        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, DocInstanceNodeType), true);
        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, DocInstanceName), true);

        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, FormatDescription), true);
        this.skipDataSourceValidateField(fieldnum(DocPrintMgmtSettingsPackageEntity, FormatName), true);

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is the first method that framework calls during import.
    /// (Actually, it first calls postLoad(), but we took care that nothing is done there 
    /// during the import).
    /// Here the framework has already copied the content from staging, so we fix some keys
    /// and transform the base64str type fields into containers. 
    /// </summary>
    public void defaultRow()
    {
        changecompany(this.DataArea)
        {
            // Based on the node type (i.e. Customer, Vendor, AR module, ...) and node specific ID
            // (i.e. Account number, Invoice number, ...) identify the referenced table and record
            // in the target company.
            // For example, if we want to identify one customer, we can't transfer the referenced
            // TableId and RecId, because we won't be able to find the customer in the target
            // legal entity based on these values. Instead, we transfer the NodeType (Customer) and
            // NodeSpecificId (Account number). We calculate them during the export process.
            // While importing (this point in the code) we resolve the referenced TableId and RecId
            // in the target legal entity.
            RefTableId  refTableId;
            RefRecId    refRecId;
            boolean     isFound;
            [refTableId, refRecId, isFound] = DocPrintMgmtHelper::resolveNodeReferenceData(this.DocInstanceNodeType, this.NodeSpecificId); 
            if (isFound)
            {
                this.DocInstanceReferencedTableId = refTableId;
                this.DocInstanceReferencedRecId = refRecId;
            }
            else
            {
                throw error(strFmt('Node-specific ID (%1) for node type (%2) could not be found.',
                            this.NodeSpecificId, enum2Str(this.DocInstanceNodeType)));
            }
    
   
            // Find the relevant PrintMgmtDocInstance based on the newly resolved reference TableId and RecId,
            // and the remaining fields we could directly transfer from source to target.
            // If the corresponding DocInstance record is found, set it.
            PrintMgmtDocInstance docInstance = PrintMgmtDocInstance::find(this.DocInstanceReferencedRecId,
                                                                        this.DocInstanceReferencedTableId,
                                                                        this.DocInstanceNodeType,
                                                                        this.DocInstanceDocumentType,
                                                                        this.DocInstancePriorityId);
            if (docInstance)
            {
                this.PrintSettingsParentId = docInstance.RecId;
            }
            else
            {
                this.PrintSettingsParentId = 0;
            }


            // Set the correct reference to Print Mgmt Format.
            PrintMgmtReportFormat format;
            if (this.HasReportFormat)
            {
                // Use the format-related fields to find the report format record
                format = PrintMgmtReportFormat::findByType(this.FormatDocumentType, this.FormatName, this.FormatCountryRegionId);
            }
            if (format)
            {
                // We found the corresponding report format based on its unique key fields
                // transferred from the source.
                this.PrintSettingsReportFormatRecId = format.RecId;
            }
            else
            {
                // If the unique key fields were empty or HasReportFormat flag informed us that
                // we shouldn't use them (because they were resolved during the export in a same
                // way that we will do below), we need to identify the report format in another way.
                // This can happen if this setting has a parent setting or the system format should be used.
                format = this.resolveReportFormat();
                this.PrintSettingsReportFormatRecId = format.RecId;
            }

            this.validatePrintMgmtSettingsDataSource();
        }       

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// For each field visible in all print destination forms we created a maching calculated field
    /// (unmapped field, Is Computed Field = No). During the export procedure we unpack the
    /// print destination settings into these fields, so that we can present them to the user.
    /// User can see them in the exported file, and if needed modify them and import as new setting.
    /// This method performs the unpacking from the print destination container into the
    /// calculated fields.
    /// </summary>
    private void unpackSettings()
    {
        this.ChecksumAlgorithm = DocChecksumAlgorithmAX::SHA1;  // default

        // PrintJobSettings is a container with packed print destination settings.
        // If it is not null, unpack it and process it.
        this.PrintJobSettingsV2Checksum = DocGlobalHelper::computeChecksum(con2base64str(this.PrintJobSettingsV2), this.ChecksumAlgorithm);
        
        // Setting has the condition Query, transform it from the container into the base64 string
        // and also get its SQL string
        this.QueryPackedV2Checksum = DocGlobalHelper::computeChecksum(con2base64str(this.PrintSettingsQueryPackedV2), this.ChecksumAlgorithm);
            
        // Node-specific values
        // We export them, but during the import we handle only the Customer- and Vendor-specific
        // Print Mgmt setting.
        this.NodeSpecificId = DocPrintMgmtUtilsHelper::getNodeInfo(this.DocInstanceReferencedTableId, this.DocInstanceReferencedRecId, this.DataArea).parmNodeSpecificId();
        
        // Report format
        if (this.PrintSettingsReportFormatRecId)
        {                   
            this.HasReportFormat = NoYes::Yes;
        }
        else
        {            
            // If this setting doesn't have report format explicitly assigned,
            // we anyway try to resolve it so that we can export the related
            // information. In that case we set the HasReportFormat flag,
            // to inform the user that the format-related information didn't 
            // come from the print management setting, but from the export procedure.            
            this.HasReportFormat = NoYes::No;

            PrintMgmtReportFormat format = this.resolveReportFormat();

            this.FormatCountryRegionId = format.CountryRegionId;
            this.FormatDescription = format.Description;
            this.FormatDocumentType = format.DocumentType;
            this.FormatName = format.Name;
            this.FormatSystem = format.System;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReportFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is utility method.
    /// Its purpose is to figure out the correct report format in case it is not provided
    /// during the export. PrintMgmtSettings.ReportFormat isn't a mandatory field, so it
    /// can happen that it isn't set (note that PrintMgmtReportFormat table is outer joined).
    /// This field can be empty in following situations:
    ///     1. This is a child setting, which inherits the settings from its parent,
    ///        including the ReportFormat.
    ///     2. The setting has been added as the only (default) node and nothing was modified
    ///        afterwards. In that case d365 doesn't set the reference to the system format.
    /// </summary>
    /// <returns>Resolved PrintMgmtReportFormat record.</returns>
    private PrintMgmtReportFormat resolveReportFormat()
    {
        PrintMgmtSettings settings;

        if (this.PrintSettingPriorityId > 1)
        {
            // Find another settings with the same parent, get format from there
            settings = PrintMgmtSettings::find(this.PrintSettingsParentId, this.DocInstancePriorityId);
        }
        else if (this.DocInstancePriorityId > 1)
        {
            // Find docInstance with the same parameters and priority 1, then get the corresponding
            // settings and finally get the format from there
            PrintMgmtDocInstance docInstance = PrintMgmtDocInstance::find(this.DocInstanceReferencedRecId,
                                                                        this.DocInstanceReferencedTableId,
                                                                        this.DocInstanceNodeType,
                                                                        this.DocInstanceDocumentType,
                                                                        1);
            settings = PrintMgmtSettings::find(docInstance.Recid, 1);
        }

        PrintMgmtReportFormat format;
        if (settings != null)
        {
            // Case 1. above.
            // Parent found and we will take the reference to report format from the parent.
            format = PrintMgmtReportFormat::find(settings.ReportFormat);
        }
        else
        {
            // Case 2. above.
            // This is a brand-new setting without the reference to report format,
            // which means that it uses the system report format.
            format = PrintMgmtReportFormat::findSystem(this.DocInstanceDocumentType);
        }

        return format;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:PrintMgmtISettingsPackageDataEntityDeveloperDocumentation</DeveloperDocumentation>
	<Label>@DocentricAX4:PrintMgmtSettingsPackageDataEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>DocPrintMgmtSettingsPackageStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PrintMgmtSettingsPackage</PublicCollectionName>
	<PublicEntityName>PrintMgmtSettingsPackage</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintSettings</Name>
			<Label>@SYS108933</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintSettingDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingsNumberOfCopies</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingsParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintJobSettingsV2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingPriorityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingsQueryPackedV2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingsReportFormatRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintSettingsSuppress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocInstance</Name>
			<Label>@SYS108932</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocInstanceDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceNodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstancePrintType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstancePriorityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceReferencedRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceReferencedTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocInstanceSuppress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NodeSpecificId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportFormat</Name>
			<Label>@SYS326917</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FormatCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatSystem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReportFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DataArea</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DataAreaId</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingDescription</Name>
			<Mandatory>No</Mandatory>
			<DataField>Description</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingsNumberOfCopies</Name>
			<DataField>NumberOfCopies</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingsParentId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Reference to DocInstance</Label>
			<Mandatory>No</Mandatory>
			<DataField>ParentId</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintJobSettingsV2</Name>
			<DataField>PrintJobSettings</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingPriorityId</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>PriorityId</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingsQueryPackedV2</Name>
			<DataField>QueryPacked</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingsReportFormatRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Reference to ReportFormat</Label>
			<Mandatory>No</Mandatory>
			<DataField>ReportFormat</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintSettingsSuppress</Name>
			<DataField>Suppress</DataField>
			<DataSource>PrintMgmtSettings</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceDocumentType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>DocumentType</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceNodeType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>NodeType</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstancePrintType</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>PrintType</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstancePriorityId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PriorityId</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceReferencedRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ReferencedRecId</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceReferencedTableId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ReferencedTableId</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocInstanceSuppress</Name>
			<DataField>Suppress</DataField>
			<DataSource>PrintMgmtDocInstance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>NodeSpecificId</Name>
			<Label>@DocentricAX2:NodeSpecificId</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>Num</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormatCountryRegionId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>PrintMgmtReportFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormatDescription</Name>
			<Mandatory>No</Mandatory>
			<DataField>Description</DataField>
			<DataSource>PrintMgmtReportFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormatDocumentType</Name>
			<DataField>DocumentType</DataField>
			<DataSource>PrintMgmtReportFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormatName</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>PrintMgmtReportFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormatSystem</Name>
			<DataField>System</DataField>
			<DataSource>PrintMgmtReportFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>HasReportFormat</Name>
			<Label>@DocentricAX:Valid</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>PrintJobSettingsV2Checksum</Name>
			<Label>@DocentricAX4:PrintJobSettingsChecksum</Label>
			<ExtendedDataType>DocChecksum</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>QueryPackedV2Checksum</Name>
			<Label>@DocentricAX4:QueryPackedChecksum</Label>
			<ExtendedDataType>DocChecksum</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>ChecksumAlgorithm</Name>
			<IsComputedField>No</IsComputedField>
			<EnumType>DocChecksumAlgorithmAX</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DataArea</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>NodeSpecificId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocInstanceNodeType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocInstanceDocumentType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocInstancePriorityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>PrintSettingPriorityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FormatDocumentType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FormatName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FormatCountryRegionId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PrintMgmtSettings</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PrintMgmtSettings</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrintMgmtDocInstance</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>PrintMgmtDocInstance</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ParentId</Field>
								<JoinDataSource>PrintMgmtSettings</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrintMgmtReportFormat</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>PrintMgmtReportFormat</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ReportFormat</Field>
								<JoinDataSource>PrintMgmtSettings</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>