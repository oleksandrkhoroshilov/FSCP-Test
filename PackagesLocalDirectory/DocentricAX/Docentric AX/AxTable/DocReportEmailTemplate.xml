<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportEmailTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportEmailTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the email template body specified.
    /// </summary>
    /// <returns>True/False</returns>
    public display DocReportEmailTemplateHasBody hasBody()
    {
        return this.HtmlBody != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field values of the DocReportEmailTemplate record.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateWrite()
    {
        DocReportEmailTemplate existingEmailTemplateId;
        DocReportTable existingEmailTemplateIdReport;
        DocReportEmailTemplate existingEmailTemplateCompanyLang;

        boolean ret;

        ret = super();

        select firstonly RecId, Report 
            from existingEmailTemplateId
            where existingEmailTemplateId.EmailTemplateId == this.EmailTemplateId
               && existingEmailTemplateId.Report != this.Report
               && existingEmailTemplateId.RecId != this.RecId;

        if (existingEmailTemplateId)
        {
            existingEmailTemplateIdReport = DocReportTable::find(existingEmailTemplateId.Report);
            DocGlobalHelper::handleWarning("@DocentricAX3:EmailTemplateIdHasToBeUnique");
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:EmailTemplateWithIdAlreadyExists", this.EmailTemplateId, existingEmailTemplateIdReport.ReportId));

            ret = false;
        }

        select firstonly RecId 
            from existingEmailTemplateCompanyLang
            where existingEmailTemplateCompanyLang.EmailTemplateId == this.EmailTemplateId 
               && existingEmailTemplateCompanyLang.CompanyId == this.CompanyId
               && existingEmailTemplateCompanyLang.LanguageID == this.LanguageID 
               && existingEmailTemplateCompanyLang.Report == this.Report
               && existingEmailTemplateCompanyLang.RecId != this.RecId;

        if (existingEmailTemplateCompanyLang)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:IdenticalEmailTemplateIdsCanBeUsed");
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:EmailTemplateWithIdAlreadyExistsForLang", this.EmailTemplateId, this.CompanyId, this.LanguageID));

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEmailTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets email template with provided email template ID, company ID and language ID.
    /// </summary>
    /// <param name="_emailTemplateId">Email template ID.</param>
    /// <param name="_companyId">Company ID.</param>
    /// <param name="_languageId">Language ID.</param>
    /// <param name="_forUpdate">Should email template be selected for updating.</param>
    /// <returns>DocReportEmailTemplate record if found.</returns>
    public static DocReportEmailTemplate findEmailTemplateId(
        DocReportEmailTemplateId _emailTemplateId,
        CompanyId _companyId,
        LanguageId _languageId,
        boolean _forUpdate = false)
    {
        DocReportEmailTemplate emailTemplate;
    
        if (!_emailTemplateId)
        {
            return emailTemplate;
        }
    
        select firstonly emailTemplate
            where emailTemplate.EmailTemplateId == _emailTemplateId
               && emailTemplate.CompanyId == _companyId 
               && emailTemplate.LanguageId == _languageId;
    
        if (emailTemplate)
        {
            emailTemplate.selectForUpdate(_forUpdate);
        }
    
        return emailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEmailTemplateIdUsingRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets email template with provided email template ID, company ID and language ID,
    /// using business rules for company- and language- neutral templates.
    /// </summary>
    /// <param name="_emailTemplateId">Email template ID.</param>
    /// <param name="_companyId">Company ID.</param>
    /// <param name="_languageId">Language ID.</param>
    /// <param name="_considerDisabledTemplates">Should disabled templates be considered.</param>
    /// <param name="_forUpdate">Should template be selected for updating.</param>
    /// <returns>A record in the DocReportEmailTemplate table; otherwise, an empty record.</returns>
    public static DocReportEmailTemplate findEmailTemplateIdUsingRules(DocReportEmailTemplateId _emailTemplateId, CompanyId _companyId, LanguageId _languageId,
                                                                       boolean _considerDisabledTemplates = true, boolean _forUpdate = false)
    {
        DocReportEmailTemplate emailTemplate;
    
        if (!_emailTemplateId)
        {
            return emailTemplate;
        }
    
        // _companyId != '' && _languageId != ''
        if (_companyId != '' && _languageId != '')
        {
            // CompanyId == _companyId, LanguageId == _languageId
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == _companyId 
                   && emailTemplate.LanguageId == _languageId
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == _companyId, LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == _companyId
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == '', LanguageId == _languageId
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId
                   && emailTemplate.CompanyId == ''
                   && emailTemplate.LanguageId == _languageId
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == ''
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
        }
    
        // _companyId == '' && _languageId != ''
        if (_companyId == '' && _languageId != '')
        {
            // CompanyId == '', LanguageId == _languageId
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId
                   && emailTemplate.CompanyId == ''
                   && emailTemplate.LanguageId == _languageId
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == ''
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == _languageId
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == curext() 
                   && emailTemplate.LanguageId == _languageId
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == curext()
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
        }
    
        // _companyId != '' && _languageId == ''
        if (_companyId != '' && _languageId == '')
        {
            // CompanyId == _companyId, LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId
                   && emailTemplate.CompanyId == _companyId
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId
                   && emailTemplate.CompanyId == ''
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == _companyId, LanguageId == currentUserLanguage()
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId
                   && emailTemplate.CompanyId == _companyId
                   && emailTemplate.LanguageId == currentUserLanguage()
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == '' 
                   && emailTemplate.LanguageId == currentUserLanguage()
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
        }
    
        // _companyId == '' && _languageId == ''
        if (_companyId == '' && _languageId == '')
        {
            // CompanyId == '', LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == ''
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId
                   && emailTemplate.CompanyId == curext()
                   && emailTemplate.LanguageId == ''
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId 
                   && emailTemplate.CompanyId == ''
                   && emailTemplate.LanguageId == currentUserLanguage()
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == currentUserLanguage()
            select firstonly emailTemplate
                where emailTemplate.EmailTemplateId == _emailTemplateId
                   && emailTemplate.CompanyId == curext()
                   && emailTemplate.LanguageId == currentUserLanguage()
                   && (_considerDisabledTemplates || emailTemplate.IsEnabled == true);
    
            if (emailTemplate)
            {
                emailTemplate.selectForUpdate(_forUpdate);
                return emailTemplate;
            }
        }
    
        return emailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateSnippet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email template as a snippet.
    /// </summary>
    /// <param name="_emailTemplateId">Email template ID.</param>
    /// <param name="_companyId">Company ID. Leave empty if the template is company neutral.</param>
    /// <param name="_languageId">Language ID. Leave empty if the template is language neutral.</param>
    /// <returns>Returns email template as a snippet. If the email template does not exist, an exception is thrown.</returns>
    public static DocReportEmailTemplate getEmailTemplateSnippet(DocReportEmailTemplateId _emailTemplateId, CompanyId _companyId, LanguageId _languageId)
    {
        // Validate parameters.
        if (!_emailTemplateId || _emailTemplateId == DocConstant::DefaultEmailTemplatePlaceholder)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _emailTemplateId is not set or it is set to @EMAIL_DEFAULT_TEMPLATE@');
        }
        // Set languageId to language neutral if it is 'ANY'
        _languageId = _languageId == DocConstant::AnyLabel ? '' : _languageId;
        
        DocReportEmailTemplate emailTemplate = DocReportEmailTemplate::findEmailTemplateIdUsingRules(_emailTemplateId, _companyId, _languageId, false);
        if (emailTemplate.RecId == 0)
        {
            str errorMsg = strFmt("@DocentricAX3:EmailTemplateWithIdNotExist", _emailTemplateId, _companyId, _languageId);
            
            // Check if the given email template exists but it's disabled.
            DocReportEmailTemplate emailTemplate2 = DocReportEmailTemplate::findEmailTemplateIdUsingRules(_emailTemplateId, _companyId, _languageId, true);
            if (emailTemplate2.RecId != 0 && emailTemplate2.IsEnabled == false)
            {
                errorMsg = strFmt("@DocentricAX3:EmailTemplateWithIdNotEnabled", _emailTemplateId, _companyId, _languageId);
            }
         
            throw error(strFmt('%1, %2. %3', errorMsg, "@DocentricAX3:EmailTemplatesInsertSnippetPleaseCheckTheSetup", "@DocentricAX3:EmailTemplateSnippetCannotBeInserted"));
        }

        return emailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryGetEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Try to get Email template for the provided arguments.
    /// </summary>
    /// <param name="_reportId">Report ID.</param>
    /// <param name="_emailTemplateId">Email template ID.</param>
    /// <param name="_companyId">Company ID. Leave empty if the template is company neutral.</param>
    /// <param name="_languageId">Language ID. Leave empty if the template is language neutral.</param>
    /// <returns>The DocReportEmailTemplate record.</returns>
    public static DocReportEmailTemplate tryGetEmailTemplate(DocReportId _reportId, DocReportEmailTemplateId _emailTemplateId, CompanyId _companyId, LanguageId _languageId)
    {
        DocReportEmailTemplate emailTemplate;

        if (_emailTemplateId == DocConstant::DefaultEmailTemplatePlaceholder && _reportId)
        {
            // Default email template can be found only if report ID is provided.
            emailTemplate = DocReportEmailTemplate::findDefaultEmailTemplateReportId(_reportId, _companyId, _languageId, false);
        }
        else if (_emailTemplateId && _emailTemplateId != DocConstant::DefaultEmailTemplatePlaceholder)
        {
            // Regardless if report ID is provided or not, we can find Email template by ID, since it is unique across all reports.
            emailTemplate = DocReportEmailTemplate::findEmailTemplateIdUsingRules(_emailTemplateId, _companyId, _languageId, false);
        }

        // Return 'PREVIEW NOT AVAILABLE' as the email body, if the email template hasn't been found,
        // or it has but it doesn't have HTML body specified.
        if (emailTemplate.RecId == 0)
        {
            emailTemplate.HtmlBody = "@DocentricAX3:EmailTemplatesPreviewNotAvailable";
            emailTemplate.IsSubjectEnabled = false;
        }
        else if (!emailTemplate.hasBody())
        {
            emailTemplate.HtmlBody = "@DocentricAX3:EmailTemplatesPreviewNotAvailable";
        }

        return emailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables/Disables email template.
    /// </summary>
    /// <param name = "_emailTemplateRecId">Email template ID.</param>
    /// <param name = "_enabled">Is email template enabled.</param>
    public static void enableEmailTemplate(RecId _emailTemplateRecId, boolean _enabled)
    {    
        if (!_emailTemplateRecId)
        {
            return;
        }
    
        DocReportEmailTemplate emailTemplate = DocReportEmailTemplate::find(_emailTemplateRecId, true);
        if (!emailTemplate)
        {
            return;
        }
    
        ttsBegin;
    
        emailTemplate.IsEnabled = _enabled;
        emailTemplate.doUpdate();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocReportEmailTemplate table.
    /// </summary>
    /// <param name = "_emailTemplateRecId">The record ID of the DocReportEmailTemplate record to find.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the DocReportEmailTemplate table; otherwise, an empty record.</returns>
    public static DocReportEmailTemplate find(RecId _emailTemplateRecId, boolean _forUpdate = false)
    {
        DocReportEmailTemplate emailTemplate;
    
        if (_emailTemplateRecId)
        {
            emailTemplate.selectForUpdate(_forUpdate);
    
            select firstonly emailTemplate
                where emailTemplate.RecId == _emailTemplateRecId;
        }
    
        return emailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEmailTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the information if the report has defined any email templates.
    /// </summary>
    /// <param name = "_reportRecId">Report Id</param>
    /// <returns>A container [hasEnabledEmailTemplates, validationMsg]</returns>
    public static container hasEmailTemplates(DocReportTableRecId _reportRecId)
    {
        boolean hasEnabledEmailTemplates;
        str validationMsg;
        DocReportEmailTemplate reportEmailTemplate;    
    
        select count(RecId) 
            from reportEmailTemplate
            where reportEmailTemplate.Report == _reportRecId
               && reportEmailTemplate.IsEnabled == true;
    
        int enabledEmailTemplateCount = int642int(reportEmailTemplate.RecId);
    
        if (enabledEmailTemplateCount > 0)
        {
            hasEnabledEmailTemplates = true;
            validationMsg = '';
        }
        else
        {
            hasEnabledEmailTemplates = false;
    
            select count(RecId) 
                from reportEmailTemplate
                where reportEmailTemplate.Report == _reportRecId;
    
            int allEmailTemplateCount = int642int(reportEmailTemplate.RecId);
    
            if (allEmailTemplateCount == 0)
            {
                validationMsg = "@DocentricAX3:TheReportHasNoEmailTemplateAssigned";
            }
            else
            {
                validationMsg = "@DocentricAX3:TheReportHasNoEmailTemplateEnabled";
            }
        }
    
        return [hasEnabledEmailTemplates, validationMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a provided email template as default.
    /// </summary>
    /// <param name = "_emailTemplateRecId">Email template ID.</param>
    public static void setDefaultEmailTemplate(RecId _emailTemplateRecId)
    {
        if (!_emailTemplateRecId)
        {
            return;
        }
    
        DocReportEmailTemplate docReportEmailTemplate = DocReportEmailTemplate::find(_emailTemplateRecId);
        if (!docReportEmailTemplate)
        {
            return;
        }
    
        DocReportEmailTemplateId emailTemplateId = docReportEmailTemplate.EmailTemplateId;
        DocReportTableRecId reportRecId = docReportEmailTemplate.Report;
    
        ttsBegin;
    
        docReportEmailTemplate.skipDataMethods(true);

        update_recordSet docReportEmailTemplate
            setting IsDefaultTemplate = true
              where docReportEmailTemplate.EmailTemplateId == emailTemplateId
                 && docReportEmailTemplate.Report == reportRecId;
    
        update_recordSet docReportEmailTemplate
            setting IsDefaultTemplate = false
              where docReportEmailTemplate.EmailTemplateId != emailTemplateId
                 && docReportEmailTemplate.Report == reportRecId;
    
        docReportEmailTemplate.skipDataMethods(false);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record from the table.
    /// </summary>
    public void delete()
    {
        ttsBegin;
    
        super();
    
        DocReportEmailTemplate::defaultDefaultEmailTemplateForReport(this.Report);
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the new record to the table.
    /// </summary>
    public void insert()
    {
        DocReportEmailTemplate  defaultEmailTemplate;
    
        ttsBegin;
    
        // Check if current Email Template ID is a default email template for the report.
        select firstonly RecId 
            from defaultEmailTemplate
            where defaultEmailTemplate.Report == this.Report
               && defaultEmailTemplate.EmailTemplateId == this.EmailTemplateId
               && defaultEmailTemplate.IsDefaultTemplate == true;

        // If so, the inserting email template has to default too.
        if (defaultEmailTemplate)
        {
            this.IsDefaultTemplate = true;
        }
        else
        {
            this.IsDefaultTemplate = false;
        }

        // Inserted email template is enabled by default.
        this.IsEnabled = true;

        super();
    
        // Set the default email template.
        DocReportEmailTemplate::defaultDefaultEmailTemplateForReport(this.Report);
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current record in the table.
    /// </summary>
    public void update()
    {
        DocReportEmailTemplate defaultEmailTemplate;

        ttsBegin;
    
        if (this.orig().EmailTemplateId != this.EmailTemplateId)
        {
            DocReportEmailTemplateId newEmailTemplateId = this.EmailTemplateId;

            // Check if newEmailTemplateId is an ID of default email templates for this report.
            select firstonly RecId 
                from defaultEmailTemplate
                where defaultEmailTemplate.Report == this.Report
                   && defaultEmailTemplate.EmailTemplateId == newEmailTemplateId
                   && defaultEmailTemplate.IsDefaultTemplate == true;
    
            if (defaultEmailTemplate)
            {
                // Set this email template to be default too.
                this.IsDefaultTemplate = true;
            }
            else
            {
                // The newEmailTemplateId is NOT an ID of default email templates for this report.
                // This means that this email template should not be default except in the case 
                // that there is no other default email template.
    
                // Check if there is a default email template with some other Email Template ID
                // but skip the current updating email template.
                select firstonly RecId 
                    from defaultEmailTemplate
                    where defaultEmailTemplate.Report == this.Report
                       && defaultEmailTemplate.RecId != this.RecId
                       && defaultEmailTemplate.IsDefaultTemplate == true;
    
                if (defaultEmailTemplate)
                {
                    // Yes, there is a default email template with the different Email Template ID
                    // so this email template automatically becomes non-default, regardless if it 
                    // has or hasn't been default so far.
                    this.IsDefaultTemplate = false;
                }
                else
                {
                    // No, there is no default email template with the different Email Template ID.
                    // So, if this email template has been default email template, and Email Template ID
                    // has just been changed, there is a chance that there are other email templates with 
                    // the same newEmailTemplateId.
                    if (this.IsDefaultTemplate)
                    {
                        defaultEmailTemplate.skipDataMethods(true);
                        update_recordSet defaultEmailTemplate
                            setting IsDefaultTemplate = true
                            where defaultEmailTemplate.EmailTemplateId == newEmailTemplateId
                               && defaultEmailTemplate.Report == this.Report;
                        defaultEmailTemplate.skipDataMethods(false);
                    }
                }
            }
        }

        super();

        // Set the default email template.
        DocReportEmailTemplate::defaultDefaultEmailTemplateForReport(this.Report);
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDefaultEmailTemplateForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if exists default email template for provided report.
    /// </summary>
    /// <param name = "_reportRecId">Report Id.</param>
    /// <returns>True/False</returns>
    public static boolean existsDefaultEmailTemplateForReport(DocReportTableRecId _reportRecId)
    {
        DocReportEmailTemplate emailTemplate;
    
        select firstOnly RecId 
            from emailTemplate
            where emailTemplate.Report == _reportRecId
               && emailTemplate.IsDefaultTemplate == true;
    
        return emailTemplate ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDefaultEmailTemplateForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the proper email template and makes it default.
    /// </summary>
    /// <param name = "_reportRecId">Report Id.</param>
    public static void defaultDefaultEmailTemplateForReport(DocReportTableRecId _reportRecId)
    {
        DocReportEmailTemplate docReportEmailTemplate;
    
        // Check if there is no default email template for the given report.
        if (DocReportEmailTemplate::existsDefaultEmailTemplateForReport(_reportRecId))
        {
            return;
        }
    
        // Check if there is at least one email template for the given report.
        select firstOnly RecId 
            from docReportEmailTemplate 
            where docReportEmailTemplate.Report == _reportRecId;
        if (!docReportEmailTemplate)
        {
            return;
        }
    
        // Find the first email template which does not have language and company set, is enabled and make it default.
        select firstOnly RecId 
            from docReportEmailTemplate
            where docReportEmailTemplate.Report == _reportRecId
               && docReportEmailTemplate.IsEnabled == true
               && docReportEmailTemplate.LanguageID == ''
               && docReportEmailTemplate.CompanyId == '';
    
        if (!docReportEmailTemplate)
        {
            // Find the first email template that is company neutral and enabled, and make it default.
            select firstOnly RecId 
                from docReportEmailTemplate
                where docReportEmailTemplate.Report == _reportRecId
                   && docReportEmailTemplate.IsEnabled == true
                   && docReportEmailTemplate.CompanyId == '';
    
            if (!docReportEmailTemplate)
            {
                // Find the first email template that is language neutral and enabled, and make it default.
                select firstOnly RecId 
                    from docReportEmailTemplate
                    where docReportEmailTemplate.Report == _reportRecId
                       && docReportEmailTemplate.IsEnabled == true
                       && docReportEmailTemplate.LanguageID == '';
    
                // Find the first email enabled template with current company and language and make it default.
                if (!docReportEmailTemplate)
                {
                    select firstOnly RecId 
                        from docReportEmailTemplate
                        where docReportEmailTemplate.Report == _reportRecId
                           && docReportEmailTemplate.IsEnabled == true
                           && docReportEmailTemplate.LanguageID == currentUserLanguage()
                           && docReportEmailTemplate.CompanyId == curext();
    
                    // Find the first email enabled template with current company or language and make it default.
                    if (!docReportEmailTemplate)
                    {
                        select firstOnly RecId 
                            from docReportEmailTemplate
                            where docReportEmailTemplate.Report == _reportRecId
                               && docReportEmailTemplate.IsEnabled == true
                               && (docReportEmailTemplate.LanguageID == currentUserLanguage() || docReportEmailTemplate.CompanyId == curext());
    
                        if (!docReportEmailTemplate)
                        {
                            // Find any enabled emnail template and make it default.
                            select firstOnly RecId 
                                from docReportEmailTemplate
                                where docReportEmailTemplate.Report == _reportRecId
                                   && docReportEmailTemplate.IsEnabled == true;
    
                            // Find any email template which is company and language neutral.
                            if (!docReportEmailTemplate)
                            {
                                select firstOnly RecId 
                                    from docReportEmailTemplate
                                    where docReportEmailTemplate.Report == _reportRecId
                                       && docReportEmailTemplate.LanguageID == ''
                                       && docReportEmailTemplate.CompanyId == '';
    
                                // Find any email template which is company or language neutral.
                                if (!docReportEmailTemplate)
                                {
                                    select firstOnly RecId 
                                        from docReportEmailTemplate
                                        where docReportEmailTemplate.Report == _reportRecId
                                           && (docReportEmailTemplate.LanguageID == '' || docReportEmailTemplate.CompanyId == '');
    
                                    // Find the first email template with current company and language and make it default.
                                    if (!docReportEmailTemplate)
                                    {
                                        select firstOnly RecId 
                                            from docReportEmailTemplate
                                            where docReportEmailTemplate.Report == _reportRecId
                                               && docReportEmailTemplate.LanguageID == currentUserLanguage()
                                               && docReportEmailTemplate.CompanyId == curext();
    
                                        // Find the first email template with current company or language and make it default.
                                        if (!docReportEmailTemplate)
                                        {
                                            select firstOnly RecId 
                                                from docReportEmailTemplate
                                                where docReportEmailTemplate.Report == _reportRecId
                                                   && (docReportEmailTemplate.LanguageID == currentUserLanguage() || docReportEmailTemplate.CompanyId == curext());
    
                                            // Find any email template and make it default.
                                            if (!docReportEmailTemplate)
                                            {
                                                select firstOnly RecId 
                                                    from docReportEmailTemplate
                                                    where docReportEmailTemplate.Report == _reportRecId;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    
        if (!docReportEmailTemplate)
        {
            return;
        }
    
        // Set default email template.
        DocReportEmailTemplate::setDefaultEmailTemplate(docReportEmailTemplate.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultEmailTemplateReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds default email template for provided report ID, company ID and language Id.
    /// </summary>
    /// <param name = "_reportId">Report Id.</param>
    /// <param name = "_companyId">Company Id.</param>
    /// <param name = "_languageId">Language Id.</param>
    /// <param name="_considerDisabledTemplates">Should disabled templates be considered.</param>
    /// <returns>DocReportEmailTemplate record if found.</returns>
    public static DocReportEmailTemplate findDefaultEmailTemplateReportId(DocReportId _reportId, CompanyId _companyId, LanguageId _languageId, boolean _considerDisabledTemplates = true)
    {
        DocReportEmailTemplate defaultEmailTemplate;
        DocReportTableRecId reportRecId;
    
        if (_reportId)
        {
            reportRecId = DocReportTable::findReportId(_reportId).RecId;
        }
    
        if (!reportRecId)
        {
            return defaultEmailTemplate;
        }
    
        /* _companyId != '' && _languageId != '' */
        if (_companyId != '' && _languageId != '')
        {
            // CompanyId == _companyId, LanguageId == _languageId
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == _languageId
                   && defaultEmailTemplate.CompanyId == _companyId
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == _companyId, LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == _companyId
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == '', LanguageId == _languageId
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == _languageId
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
        }
    
        /* _companyId == '' && _languageId != '' */
        if (_companyId == '' && _languageId != '')
        {
            // CompanyId == '', LanguageId == _languageId
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == _languageId
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == _languageId
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == _languageId
                   && defaultEmailTemplate.CompanyId == curext()
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == curext()
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
        }
    
        /* _companyId != '' && _languageId == '' */
        if (_companyId != '' && _languageId == '')
        {
            // CompanyId == _companyId, LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == _companyId
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == _companyId, LanguageId == currentUserLanguage()
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == currentUserLanguage()
                   && defaultEmailTemplate.CompanyId == _companyId
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == currentUserLanguage()
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
        }
    
        /* _companyId == '' && _languageId == '' */
        if (_companyId == '' && _languageId == '')
        {
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == ''
                   && defaultEmailTemplate.CompanyId == curext()
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == currentUserLanguage()
                   && defaultEmailTemplate.CompanyId == ''
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
    
            // CompanyId == curext(), LanguageId == currentUserLanguage()
            select firstOnly defaultEmailTemplate
                where defaultEmailTemplate.Report == reportRecId
                   && defaultEmailTemplate.IsDefaultTemplate == true
                   && defaultEmailTemplate.LanguageId == currentUserLanguage()
                   && defaultEmailTemplate.CompanyId == curext()
                   && (_considerDisabledTemplates || defaultEmailTemplate.IsEnabled == true);
    
            if (defaultEmailTemplate)
            {
                return defaultEmailTemplate;
            }
        }
    
        return defaultEmailTemplate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:EmailTemplatesDevDoc</DeveloperDocumentation>
	<FormRef>DocReportEmailTemplate</FormRef>
	<Label>@DocentricAX3:EmailTemplates</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>EmailTemplateId</TitleField1>
	<TitleField2>CompanyId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>TemplateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tags</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HtmlBody</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tags</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HtmlBody</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSubjectEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SenderAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSenderAddressEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SenderName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSenderNameEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hasBody</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSubjectEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SenderAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSenderAddressEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SenderName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSenderNameEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subject</Name>
			<Label>@DocentricAX4:Subject</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsSubjectEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Subject</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SenderAddress</Name>
			<Label>@DocentricAX4:SenderAddress</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsSenderAddressEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SenderAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SenderName</Name>
			<Label>@DocentricAX4:SenderName</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsSenderNameEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SenderName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailTemplateId</Name>
			<ExtendedDataType>DocReportEmailTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>DocReportTemplateCompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageID</Name>
			<ExtendedDataType>DocReportTemplateLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnabled</Name>
			<ExtendedDataType>DocReportIsTemplateEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Title</Name>
			<ExtendedDataType>DocReportTemplateTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>DocReportTemplateComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tags</Name>
			<ExtendedDataType>DocReportTemlateTags</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HtmlBody</Name>
			<ExtendedDataType>DocReportEmailTemplateHtmlBody</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Report</Name>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefaultTemplate</Name>
			<ExtendedDataType>DocReportIsDefaultTemplate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Subject</Name>
			<ExtendedDataType>DocReportEmailTemplateSubject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSubjectEnabled</Name>
			<ExtendedDataType>DocReportEmailTemplateIsSubjectEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SenderAddress</Name>
			<ExtendedDataType>DocEmailFrom</ExtendedDataType>
			<HelpText>@DocentricAX4:SenderAddressHelpText</HelpText>
			<Label>@DocentricAX4:SenderAddress</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSenderAddressEnabled</Name>
			<ExtendedDataType>DocEmailTemplateIsSenderAddressEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SenderName</Name>
			<ExtendedDataType>DocAosEmailAccountDisplayName</ExtendedDataType>
			<HelpText>@DocentricAX4:SenderNameHelpText</HelpText>
			<Label>@DocentricAX4:SenderName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSenderNameEnabled</Name>
			<ExtendedDataType>DocEmailTemplateIsSenderNameEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EmailTemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DocReportEmailTemplate</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual</Name>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageID</Name>
					<SourceEDT>DocReportTemplateLanguageId</SourceEDT>
					<Field>LanguageID</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile</Name>
					<SourceEDT>DocReportTemplateLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Report</Name>
					<Field>Report</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>