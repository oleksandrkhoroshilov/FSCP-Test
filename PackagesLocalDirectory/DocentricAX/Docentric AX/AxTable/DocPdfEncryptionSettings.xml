<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPdfEncryptionSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
using UL = Docentric.AX.Framework.Utilities;

public class DocPdfEncryptionSettings extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>DocPdfEncryptionSettings</c> table.
    /// Values for the <c>_validFrom</c> and <c>_validTo</c> values limit the table selection in the following way:
    /// - If no values are supplied for the parameters, the current date is used. Therefore, the
    ///   method searches for only active records and returns either an empty or a valid record.
    /// - If only the first parameter value is supplied, the second parameter is set to the
    ///   first parameter. The method searches for active records as of the supplied date and time value and
    ///   returns either an empty or a valid record.
    /// - If both parameters are supplied with values, the method searches for records whose <c>validFrom</c>
    ///    and <c>ValidTo</c> values fall in that interval. The method can return multiple records.
    /// </summary>
    /// <param name = "_recId">The record ID of the <c>DocPdfEncryptionSettings</c> record to find.</param>
    /// <param name="_validFrom">A <c>ValidFrom</c> field value.</param>
    /// <param name="_validTo">A <c>ValidTo</c> field value.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the <c>DocPdfEncryptionSettings</c> table; otherwise, an empty record.</returns>
    public static DocPdfEncryptionSettings find(
        RecId _recId,
        utcdatetime _validFrom = DateTimeUtil::utcNow(),
        utcdatetime _validTo = _validFrom,
        boolean _forUpdate = false)
    {
        DocPdfEncryptionSettings docPdfEncryptionSettings;

        docPdfEncryptionSettings.selectForUpdate(_forUpdate);

        if (_recid)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly docPdfEncryptionSettings 
                    where docPdfEncryptionSettings.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) docPdfEncryptionSettings
                    where docPdfEncryptionSettings.RecId == _recId;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) docPdfEncryptionSettings
                    where docPdfEncryptionSettings.RecId == _recId;
            }
        }
        
        return docPdfEncryptionSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReportAndCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>DocPdfEncryptionSettings</c> record specified by the <c>DocReportTable</c> and <c>Company</c> values.
    /// Values for the <c>_validFrom</c> and <c>_validTo</c> values limit the table selection in the following way:
    /// - If no values are supplied for the parameters, the current date is used. Therefore, the
    ///   method searches for only active records and returns either an empty or a valid record.
    /// - If only the first parameter value is supplied, the second parameter is set to the
    ///   first parameter. The method searches for active records as of the supplied date and time value and
    ///   returns either an empty or a valid record.
    /// - If both parameters are supplied with values, the method searches for records whose <c>validFrom</c>
    ///    and <c>ValidTo</c> values fall in that interval. The method can return multiple records.
    /// </summary>
    /// <param name = "_reportTable">The report table record ID</param>
    /// <param name = "_companyId">The company ID</param>
    /// <param name="_validFrom">A <c>ValidFrom</c> field value.</param>
    /// <param name="_validTo">A <c>ValidTo</c> field value.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the <c>DocPdfEncryptionSettings</c> table; otherwise, an empty record.</returns>
    public static DocPdfEncryptionSettings findByReportAndCompany(
        DocReportTableRecId _reportTable,
        SelectableDataArea _companyId,
        utcdatetime _validFrom = DateTimeUtil::utcNow(),
        utcdatetime _validTo = _validFrom,
        boolean _forUpdate = false)
    {
        DocPdfEncryptionSettings docPdfEncryptionSettings;

        docPdfEncryptionSettings.selectForUpdate(_forUpdate);

        if (_reportTable && _companyId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly docPdfEncryptionSettings
                    where docPdfEncryptionSettings.ReportTable == _reportTable
                       && docPdfEncryptionSettings.CompanyId == _companyId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) docPdfEncryptionSettings
                    where docPdfEncryptionSettings.ReportTable == _reportTable
                       && docPdfEncryptionSettings.CompanyId == _companyId;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) docPdfEncryptionSettings
                    where docPdfEncryptionSettings.ReportTable == _reportTable
                       && docPdfEncryptionSettings.CompanyId == _companyId;
            }
        }
        
        // If no company-specific redirection rule was found, check if there exists
        // global rule (DAT company)
        if (!docPdfEncryptionSettings)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly docPdfEncryptionSettings
                    where docPdfEncryptionSettings.ReportTable == _reportTable
                       && docPdfEncryptionSettings.CompanyId == 'DAT';
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) docPdfEncryptionSettings
                    where docPdfEncryptionSettings.ReportTable == _reportTable
                       && docPdfEncryptionSettings.CompanyId == 'DAT';
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) docPdfEncryptionSettings
                    where docPdfEncryptionSettings.ReportTable == _reportTable
                       && docPdfEncryptionSettings.CompanyId == 'DAT';
            }
        }
        
        return docPdfEncryptionSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>passwordEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for the password field. By default the returned value is masked.
    /// If the current table instance is a form data source and the form has the method
    /// getShowPasswordSet implemented then a check is made if the current record exists 
    /// in the set returned by the implemented method. If it exists then the returned 
    /// value is NOT masked.
    /// </summary>
    /// <param name = "_set"><c>true</c> if the field is being updated; otherwise, <c>false</c>.</param>
    /// <param name = "_value">The value to set.</param>
    /// <returns>Value of the encrypted field.</returns>
    public edit DocPdfEcryptionPassword passwordEdit(boolean _set, DocPdfEcryptionPassword _value)
    {
        // Initiliazes the set of records with the shown password
        Set showPasswordSet = new Set(Types::Int64);
        // Checks if current table instance is a form data source
        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataSource fds = FormDataUtil::getFormDataSource(this);
            if (fds)
            {
                FormRun fr = fds.formRun();
                // Checks if the method getShowPassword exists on the current form
                if (fr && formHasMethod(fr, identifierStr(getShowPasswordSet)))
                {
                    // Gets the set of records with the shown password
                    DictClass frDictClass = new DictClass(classNum(FormRun));
                    if (frDictClass)
                    {
                        showPasswordSet = frDictClass.callObject(identifierStr(getShowPasswordSet), fr);
                    }
                }
            }
        }

        _value = Global::editEncryptedField(this, _value, fieldNum(DocPdfEncryptionSettings, Password), _set);
        // If password is empty set When to encrypt field to empty
        if (_value == '')
        {
            this.conditionEdit(true, '');
        }

        // If the current record does not exist in the set the password is masked
        return (showPasswordSet.in(this.RecId) || !_value) ? _value : strRep('*', 10);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the decrypted password.
    /// </summary>
    /// <returns>Decrypted password.</returns>
    public DocPdfEcryptionPassword getPassword()
    {
        return Global::editEncryptedField(this, '', fieldNum(DocPdfEncryptionSettings, Password), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>conditionEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for the condition field.
    /// </summary>
    /// <param name = "_set"><c>true</c> if the field is being updated; otherwise, <c>false</c>.</param>
    /// <param name = "_value">The value to set.</param>
    /// <returns>Value of the container field.</returns>
    public edit DocPdfEncryptionCondition conditionEdit(boolean _set, DocPdfEncryptionCondition _value)
    {
        const str delimiter = '; ';
        Set conditionSet = new Set(Types::Enum);
        List conditionList = new List(Types::String);
        DocPdfEncryptionConditionEnum docPdfEncryptionConditionEnum;
        if (_set)
        {
            // Convert string delimited with semicolon to the list object
            conditionList = DocGlobalHelper::strSplit(_value, delimiter, DocStringSplitOptions::RemoveEmptyEntries | DocStringSplitOptions::TrimEntries);
            if (!conditionList.empty())
            {
                // Add items from the list object to the created set object
                ListEnumerator conditionListEnum = conditionList.getEnumerator();
                while (conditionListEnum.moveNext())
                {
                    docPdfEncryptionConditionEnum = any2Enum(symbol2Enum(enumNum(DocPdfEncryptionConditionEnum), strLRTrim(conditionListEnum.current())));
                    // If the conversion to the enum value does not succeed the value 255 is returned
                    if (docPdfEncryptionConditionEnum == 255)
                    {
                        continue;
                    }
                    conditionSet.add(docPdfEncryptionConditionEnum);
                }
            }
            // Store packed set object to the container field 
            this.Condition = conditionSet.pack();
        }
        else
        {
            if (conLen(this.Condition) > 0)
            {
                // Create new set object from the packed set in container field
                conditionSet = Set::create(this.Condition);
                if (!conditionSet.empty())
                {
                    // Addd items for the set object to the created list object
                    SetEnumerator conditionSetEnum = conditionSet.getEnumerator();
                    while (conditionSetEnum.moveNext())
                    {
                        docPdfEncryptionConditionEnum = conditionSetEnum.current();
                        conditionList.addEnd(enum2Symbol(enumNum(DocPdfEncryptionConditionEnum), docPdfEncryptionConditionEnum));
                    }
                }
                // Convert list oject to the string delimited with semicolon
                _value = strList2str(conditionList, delimiter);
            }
        }
        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>DocPdfEncryptionSettings</c> table.
    /// </summary>
    public void insert()
    {
        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>DocPdfEncryptionSettings</c> table.
    /// </summary>
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the multi-select lookup control for the field Condition.
    /// </summary>
    /// <param name = "_callingCtrl">The calling <c>FormStringControl</c>. This is the control that spawned the MultiSelectGridLookup.</param>
    /// <param name = "_ctrlIds">The <c>FormStringControl</c> that keeps tracks of the selected RecIDs for the calling control.</param>
    public static void lookupCondition(FormStringControl _callingCtrl, FormStringControl _ctrlIds)
    {
        // Populate a temporary table with the enum values
        DocPdfEncryptionConditionLookupTmp docPdfEncryptionConditionLookupTmp = DocPdfEncryptionConditionLookupTmp::fill();

        // Prepare a queryRun to work with the temporary table
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(DocPdfEncryptionConditionLookupTmp));
        qbds.addSelectionField(fieldNum(DocPdfEncryptionConditionLookupTmp, ConditionId));
        qbds.addSelectionField(fieldNum(DocPdfEncryptionConditionLookupTmp, Description));

        QueryRun qr = new QueryRun(q);
        qr.setCursor(docPdfEncryptionConditionLookupTmp);

        // The field to select from the temporary table
        container selectField = [tableNum(DocPdfEncryptionConditionLookupTmp), fieldNum(DocPdfEncryptionConditionLookupTmp, ConditionId)];

        // This form string control is used to store the list of the selected RecIds from the multi-select lookup control.
        // It is mandatory for proper working of the multi-select lookup control.
        _ctrlIds.text('');

        // Call the multi-select lookup control
        DocSysLookupMultiSelectGrid lookupMS = DocSysLookupMultiSelectGrid::construct(_ctrlIds, _callingCtrl, '; ');
        lookupMS.parmCallingControl(_callingCtrl);
        lookupMS.parmQuery(q);
        lookupMS.parmQueryRun(qr);
        lookupMS.parmSelectField(selectField);
        lookupMS.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPrintReportSettingsWithPdfEncryptionSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the instance of <c>DocPrintReportSettings</c> object with the PDF encryption settings.
    /// </summary>
    /// <param name = "_printReportSettings">Instance of <c>DocPrintReportSettings</c> object</param>
    /// <param name = "_reportTable"><c>DoReportTable</c> record</param>
    public static void fillPrintReportSettingsWithPdfEncryptionSettings(DocPrintReportSettings _printReportSettings, DocReportTable _reportTable)
    {
        if (_reportTable.RecId == 0)
        {
            return;
        }

        CompanyId companyId = _printReportSettings.parmCompanyId() == '' ? curExt() : _printReportSettings.parmCompanyId();

        DocPdfEncryptionSettings docPdfEncryptionSettings = DocPdfEncryptionSettings::findByReportAndCompany(_reportTable.RecId, companyId);
        if (docPdfEncryptionSettings)
        {
            // PDF encyption password
            _printReportSettings.parmPdfPassword(docPdfEncryptionSettings.getPassword());
            _printReportSettings.parmPdfEncryptionAlgorithm(docPdfEncryptionSettings.EncryptionAlgorithm);

            // PDF encryption condition
            if (docPdfEncryptionSettings.Condition != conNull())
            {
                _printReportSettings.parmPdfEncryptionConditionSet(Set::create(docPdfEncryptionSettings.Condition));
            }
            else
            {
                _printReportSettings.parmPdfEncryptionConditionSet(null);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a company name.
    /// </summary>
    /// <returns>A company name</returns>
    public display DocCompanyName companyName()
    {
        return CompanyInfo::findDataArea(this.CompanyId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the password policy. If the password is empty or contains placeholders the check should not be done.
    /// A password must meet the following conditions:
    /// - minimum length: 6 characters
    /// - maximum length: 64 characters
    /// </summary>
    /// <param name = "_password">A password to check</param>
    /// <param name = "_checkPlaceholders">Check if password contains placeholders</param>
    /// <param name = "_throwError">Throw error if check is not successful</param>
    /// <returns>True/False</returns>
    public static boolean validatePassword(DocPdfEcryptionPassword _password, boolean _checkPlaceholders = false, boolean _throwError = false)
    {
        boolean ret = true;

        // Check if the password is empty
        if (!_password)
        {
            return ret;
        }

        // Check if the password contains placeholders
        if (_checkPlaceholders)
        {
            const str placeholderRegEx = @'@\w+@';
            if (System.Text.RegularExpressions.Regex::IsMatch(_password, placeholderRegEx))
            {
                return ret;
            }
        }

        // Check the password length
        const int minPasswordLenght = 6;
        const int maxPasswordLength = 64;
        str message = '';
        if (strLen(_password) < minPasswordLenght)
        {
            message = "@DocentricAX3:PDFEncryptionMinPasswordLenghtError";
        }
        if (strLen(_password) > maxPasswordLength)
        {
            message = "@DocentricAX3:PDFEncryptionMaxPasswordLengthError";
        }
        if (message)
        {
            message += ' ' + strFmt("@DocentricAX3:PDFEncryptionPasswordLengthError", minPasswordLenght, maxPasswordLength);
            ret = true;  // display only a warning
            DocGlobalHelper::handleWarning(message, false, '', _throwError);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearEncryptedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears encrypted fields (Password).
    /// </summary>
    /// <returns>Description od changed fields if some records were changed; otherwise empty string.</returns>
    public static str clearEncryptedFields()
    {
        DocPdfEncryptionSettings settings;
        boolean changed = false;
        utcdatetime dateTimeMin = DateTimeUtil::minValue();
        utcdatetime dateTimeMax = DateTimeUtil::maxValue();
        
        ttsBegin;

        // check all records
        while select forupdate validTimeState(dateTimeMin, dateTimeMax) settings
        {
            // clear invalid Password fields (exception thrown at decryption)
            str value;
            if (!UL.ReflectionHelper::TryInvokeInstanceMethod(byref value, settings, tableMethodStr(DocPdfEncryptionSettings, getPassword)))
            {
                settings.passwordEdit(true, '');
                settings.ValidTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                settings.update();
                changed = true;
            }
        }

        ttsCommit;

        return (changed ? 'PDF encryption settings (DocPdfEncryptionSettings) passwords' : '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:PDFEncryptionSettingsDD</DeveloperDocumentation>
	<Label>@DocentricAX3:PDFEnryptionSettings</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ReportTable</TitleField1>
	<TitleField2>CompanyId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ReportCompanyIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>ReportCompanyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Password</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Condition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>companyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>passwordEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>conditionEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Password</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptionAlgorithm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Condition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidTimeState</Name>
			<Label>@SYS8280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReportTable</Name>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<HelpText>@DocentricAX2:CompanyPDRedirectionHelp</HelpText>
			<Label>@DocentricAX:CompanyId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Password</Name>
			<ExtendedDataType>EncryptedField</ExtendedDataType>
			<HelpText>@DocentricAX3:PDFEncryptionPasswordHelp</HelpText>
			<Label>@DocentricAX3:PDFEncryptionPassword</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EncryptionAlgorithm</Name>
			<EnumType>DocEncryptionAlgorithm</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Condition</Name>
			<ExtendedDataType>SysContainer</ExtendedDataType>
			<HelpText>@DocentricAX3:PDFEncryptionConditionHelp</HelpText>
			<Label>@DocentricAX3:PDFEncryptionCondition</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>DocPdfEncryptionComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportCompanyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>ReportTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReportTable</Name>
					<SourceEDT>DocReportTableRecId</SourceEDT>
					<Field>ReportTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Company</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>