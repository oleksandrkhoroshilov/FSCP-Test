<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSharePointSecuritySettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
using UL = Docentric.AX.Framework.Utilities;

public class DocSharePointSecuritySettings extends common
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sharePointPasswordEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets SharePoint user's password string encrypted or decrypted value.
    /// </summary>
    /// <param name = "_set">Indicates if to set the password or not.</param>
    /// <param name = "_value">The password string value.</param>
    /// <returns>Decrypted password string.</returns>
    public edit DocSharePointPassword sharePointPasswordEdit(boolean _set, DocSharePointPassword _value)
    {
        _value = Global::editEncryptedField(this, _value, fieldNum(DocSharePointSecuritySettings, SharePointPassword), _set);
        return _value ? strRep('*', 10) : _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint user's password decrypted value.
    /// </summary>
    /// <returns>Decrypted password string.</returns>
    public DocSharePointPassword getSharePointPassword()
    {
        return Global::editEncryptedField(this, '', fieldNum(DocSharePointSecuritySettings, SharePointPassword), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a DocSharePointSecuritySettings record.
    /// </summary>
    /// <param name = "_spHostName">The SharePoint host name.</param>
    /// <param name = "_spSite">The SharePoint site.</param>
    /// <param name = "_spDocumentLibrary">The SharePoint document library.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocSharePointSecuritySettings table</returns>
    public static DocSharePointSecuritySettings find(str _spHostName, str _spSite, str _spDocumentLibrary, boolean _forUpdate = false)
    {
        DocSharePointSecuritySettings spSecuritySettings;

        spSecuritySettings.selectForUpdate(_forUpdate);

        select firstonly spSecuritySettings 
            where spSecuritySettings.SharePointServer == _spHostName
               && spSecuritySettings.SharePointSite == _spSite
               && spSecuritySettings.SharePointDocumentLibrary == _spDocumentLibrary;

        return spSecuritySettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether at least one enabled record exists in the DocSharePOintSecuritySettings table.
    /// </summary>
    /// <returns>True if a record exists; otherwise false</returns>
    public static boolean exist()
    {
        return ((select firstonly RecId from DocSharePointSecuritySettings where DocSharePointSecuritySettings.IsEnabled == NoYes::Yes).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field values in current record.
    /// </summary>
    /// <param name = "_fieldIdToCheck">The field to check</param>
    /// <returns>True/False</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(DocSharePointSecuritySettings, SharePointServer):
                    str hostname = this.extractServerHostName();
                    if (this.SharePointServer != hostName)
                    {
                        if (hostName)
                        {
                            this.SharePointServer = hostname;
                        }
                        else
                        {
                            ret = checkFailed(strFmt("@SYS32810", fieldId2PName(this.TableId, _fieldIdToCheck))) && false;
                        }
                    }
                    break;

                case fieldNum(DocSharePointSecuritySettings, SharePointSite):
                    System.String spSite = this.SharePointSite;
                    spSite = spSite.Replace('\\', DocConstantFile::UrlDelimiter);
                    spSite = spSite.TrimStart(DocConstantFile::UrlDelimiter).TrimEnd(DocConstantFile::UrlDelimiter);
                    if (this.SharePointSite != spSite)
                    {
                        this.SharePointSite = spSite;
                    }
                    break;

                case fieldNum(DocSharePointSecuritySettings, SharePointDocumentLibrary):
                    System.String spDocumentLibrary = this.SharePointDocumentLibrary;
                    spDocumentLibrary = spDocumentLibrary.Replace('\\', DocConstantFile::UrlDelimiter);
                    spDocumentLibrary = spDocumentLibrary.TrimStart(DocConstantFile::UrlDelimiter);
                    if (spDocumentLibrary)
                    {
                        int deleteFromPos = spDocumentLibrary.IndexOf(DocConstantFile::UrlDelimiter);
                        if (deleteFromPos > 0)
                        {
                            spDocumentLibrary = spDocumentLibrary.Remove(deleteFromPos);
                        }
                    }
                    if (this.SharePointDocumentLibrary != spDocumentLibrary)
                    {
                        this.SharePointDocumentLibrary = spDocumentLibrary;
                    }
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractServerHostName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts the hostname from the specified SharePoint server url.
    /// </summary>
    /// <returns>The hostname</returns>
    private str extractServerHostName()
    {
        str hostname = '';
        str src = this.SharePointServer;
        if (src)
        {
            try
            {
                System.UriBuilder builder = new System.UriBuilder(src);
                hostName = builder.Host;
            }
            catch(Exception::CLRError)
            {
                exceptionTextFallThrough();
            }
        }

        return hostname;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values with default values in a new record.
    /// </summary>
    public void initValue()
    {
        super();
        
        this.IsEnabled = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearEncryptedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears encrypted fields (SharePointPassword).
    /// </summary>
    /// <returns>Description od changed fields if some records were changed; otherwise empty string.</returns>
    public static str clearEncryptedFields()
    {
        DocSharePointSecuritySettings settings;
        boolean changed = false;
        
        ttsBegin;

        while select forupdate settings
        {
            // clear invalid SharePointPassword fields (exception thrown at decryption)
            str value;
            if (!UL.ReflectionHelper::TryInvokeInstanceMethod(byref value, settings, tableMethodStr(DocSharePointSecuritySettings, getSharePointPassword)))
            {
                settings.sharePointPasswordEdit(true, '');
                settings.update();
                changed = true;
            }
        }

        ttsCommit;

        return (changed ? 'SharePoint fine-grained security (DocSharePointSecuritySettings) passwords' : '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:SharePointFineGrainedSecurityTableDeveloperDocumentation</DeveloperDocumentation>
	<Label>@DocentricAX4:DocParametersSecuritySharePointFineGrainedSecurity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>SharePointAuthorizationType</TitleField1>
	<TitleField2>SharePointServer</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>SharePointSecuritySettingsIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SharePointServer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointSite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointDocumentLibrary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointAuthorizationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUserReader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUserWriter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointReportUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUsername</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointPassword</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SharePointServer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointSite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointDocumentLibrary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointServer</Name>
			<ExtendedDataType>DocSharePointSiteUrl</ExtendedDataType>
			<HelpText>@DocentricAX4:SharePointServerHelp</HelpText>
			<Label>@DocentricAX4:SharePointServer</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointSite</Name>
			<ExtendedDataType>DocSharePointSiteName</ExtendedDataType>
			<HelpText>@DocentricAX4:SharePointSiteHelp</HelpText>
			<Label>@DocentricAX:SharePointSite</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointDocumentLibrary</Name>
			<ExtendedDataType>DocSharePointDocumentLibraryUrl</ExtendedDataType>
			<HelpText>@DocentricAX4:SharePointDocumentLibraryHelp</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SharePointAuthorizationType</Name>
			<EnumType>DocSharePointAuthorizationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointUserReader</Name>
			<ExtendedDataType>DocSharePointUserReader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointUserWriter</Name>
			<ExtendedDataType>DocSharePointUserWriter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointReportUser</Name>
			<ExtendedDataType>DocSharePointReportUser</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointUsername</Name>
			<ExtendedDataType>DocSharePointUsername</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>SharePointPassword</Name>
			<ExtendedDataType>EncryptedField</ExtendedDataType>
			<HelpText>@DocentricAX4:SharePointPasswordDesc</HelpText>
			<Label>@DocentricAX4:SharePointPassword</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnabled</Name>
			<ExtendedDataType>DocSharePointSecuritySettingIsEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SharePointSecuritySettingsIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SharePointServer</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SharePointSite</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SharePointDocumentLibrary</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>