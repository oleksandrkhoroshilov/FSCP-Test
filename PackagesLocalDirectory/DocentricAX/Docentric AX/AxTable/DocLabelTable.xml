<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLabelTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocLabelTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocLabelTable table.
    /// </summary>
    /// <param name = "_recId">Record Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocLabelTable table; otherwise, an empty record</returns>
    public static DocLabelTable find(RecId _recId, boolean _forUpdate = false)
    {
        DocLabelTable labelTable;

        labelTable.selectForUpdate(_forUpdate);

        if (_recid)
        {
            select firstonly labelTable where labelTable.RecId == _recId;
        }
        
        return labelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocLabelTable table for provided global label Id.
    /// </summary>
    /// <param name = "_globalLabelId">Global label Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocLabelTable table; otherwise, an empty record</returns>
    public static DocLabelTable findByLabelId(DocReportLabelId _globalLabelId, boolean _forUpdate = false)
    {
        DocLabelTable labelTable;

        labelTable.selectForUpdate(_forUpdate);

        if (_globalLabelId)
        {
            select firstonly labelTable where labelTable.GlobalLabelId == _globalLabelId;
        }
        
        return labelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows number of non-empty translations for the currently selected label.
    /// </summary>
    /// <returns>Number of non-empty translations for this label</returns>
    display str numberOfTranslations()
    {
        str retVal;
        DocLabelTranslation labelTranslation;
        DocLabelLanguage labelLanguage;
        int64 cntTranslatedRecords, cntBlankTranslatedRecords, cntLabelLanguages;

        select count(RecId) from labelTranslation 
            where labelTranslation.GlobalLabelId == this.GlobalLabelId
                && labelTranslation.Translation != '';
        cntTranslatedRecords = labelTranslation.RecId;

        select count(RecId) from labelTranslation
            where labelTranslation.GlobalLabelId == this.GlobalLabelId
                && labelTranslation.Translation == '';
        cntBlankTranslatedRecords = labelTranslation.RecId;

        select count(RecId) from labelLanguage;
        cntLabelLanguages = labelLanguage.RecId;

        retVal = strFmt("@DocentricAX3:NumOfTranslatedLabels", cntTranslatedRecords, cntBlankTranslatedRecords, cntLabelLanguages);

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTranslationsWithSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows number of non-empty translations
    /// and total number of translation records for the currently
    /// selected label.
    /// </summary>
    /// <returns>Number of translations and number of translation records for this label</returns>
    display str numberOfTranslationsWithSuffix()
    {
        str retVal;
        DocLabelTranslation labelTranslation;
        int64 cntAllRecords, cntTranslatedRecords;

        select count(RecId) from labelTranslation
            where labelTranslation.GlobalLabelId == this.GlobalLabelId
                && labelTranslation.Translation != '';
        cntTranslatedRecords = labelTranslation.RecId;

        select count(RecId) from labelTranslation
            where labelTranslation.GlobalLabelId == this.GlobalLabelId;
        cntAllRecords = labelTranslation.RecId;

        retVal = strFmt('%1 %2 / %3', strLwr("@DocentricAX3:TranslationFilterShowTranslated"), cntTranslatedRecords, cntAllRecords);

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translatedInLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows comma-separated list of languages in which the
    /// translations for the current label exist.
    /// </summary>
    /// <returns>Comma-separated list of languages in which this label is translated</returns>
    display str translatedInLanguages()
    {
        str retVal;
        DocLabelTranslation labelTranslation;
        DocLabelLanguage labelLanguage;

        while select LanguageId from labelTranslation
            order by labelLanguage.LineNum
            where labelTranslation.Translation != ''
                && labelTranslation.GlobalLabelId == this.GlobalLabelId
            join RecId from labelLanguage
                where labelLanguage.LanguageId == labelTranslation.LanguageId
        {
            retVal += (retVal == '' ? '' : ', ') + labelTranslation.LanguageId;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notTranslatedInLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows comma-separated list of languages in which the
    /// translations for the current label doesn't exist.
    /// </summary>
    /// <returns>Comma-separated list of languages in which this label isn't translated</returns>
    display str notTranslatedInLanguages()
    {
        str retVal;
        DocLabelTranslation labelTranslation;
        DocLabelLanguage labelLanguage;

        while select LanguageId from labelLanguage
            order by labelLanguage.LineNum
            outer join RecId, Translation from labelTranslation
                where labelTranslation.LanguageId == labelLanguage.LanguageId
                    && labelTranslation.GlobalLabelId == this.GlobalLabelId
        {
            if (!labelTranslation.RecId || labelTranslation.Translation == '')
            {
                retVal += (retVal == '' ? '' : ', ') + labelLanguage.LanguageId;
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfRelatedReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of reports where the current label is used.
    /// </summary>
    /// <returns>Number of reports where the current label is used</returns>
    public int getNumberOfRelatedReports()
    {
        DocReportLabel docReportLabel;
        DocReportTable docReportTable;

        select count(RecId) from docReportTable
            exists join docReportLabel
                where docReportLabel.Report == docReportTable.RecId
                    && docReportLabel.LabelId == this.GlobalLabelId;

        return int642int(docReportTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the value of the specified field is changed.
    /// </summary>
    /// <param name = "_fieldId">Field Id</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(DocLabelTable, LabelId):
                this.GlobalLabelId = DocConstantDSP::DOC_LABEL_PREFIX + this.LabelId;
                break;

            case fieldNum(DocLabelTable, BasedOnSysLabelId):
                if (this.BasedOnSysLabelId)
                {
                    this.FallbackTranslation = this.BasedOnSysLabelId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record before deleting.
    /// </summary>
    /// <returns>True if the record can be deleted; otherwise false.</returns>
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        // Check if this label is used in any report setup.
        int numberOfRrelatedReports = this.getNumberOfRelatedReports();
        if (numberOfRrelatedReports > 0)
        {
            // Label is used in some report setup --> give warning 
            // that the related labels in the report setup
            // will be deleted, ask for the confirmation.
            if (!Box::confirm(strFmt("@DocentricAX3:DeleteLabelWarningUsedInReports", this.GlobalLabelId, numberOfRrelatedReports)))
            {
                ret = false;
            }
        }
        else
        {
            // Label isn't used in any report setup, 
            // but we don't know if it is used in some template, without being
            // referenced in the report setup. Give warning about it: 
            // if that is the case, there will be errors in such templates. 
            // Ask for the confirmation to continue.
            if (!Box::confirm(strFmt("@DocentricAX3:DeleteLabelWarningNotUsedInReports", this.GlobalLabelId)))
            {
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record.
    /// </summary>
    public void delete()
    {
        ttsbegin;        
        
        // Delete will automatically delete the related translations,
        // due to the cascade delete relation setup.

        // Delete related labels in report setup.        
        DocReportLabel docReportLabel;
        delete_from docReportLabel where docReportLabel.LabelId == this.GlobalLabelId;

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the specified field in the current record.
    /// </summary>
    /// <param name = "_fieldIdToCheck">Field Id</param>
    /// <returns>True if the field value is ok; otherwise false</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
        
        switch (_fieldIdToCheck)
        {
            case fieldNum(DocLabelTable, LabelId):
                // The same rules for formatting as in case of the system labels should apply.
                boolean validationResult;
                str validationErrorTxt;
                [validationResult, validationErrorTxt] = DocUserDefinedLabelHelper::validateLabelFormat(this.LabelId);
                if (!validationResult)
                {
                    ret = ret && checkFailed(strFmt('%1 %2',
                            strFmt("@DocentricAX4:FieldIncorrectlyFormatted", fieldId2PName(tableNum(DocLabelTable), fieldNum(DocLabelTable, LabelId))),
                            validationErrorTxt));
                }

                break;

            case fieldNum(DocLabelTable, BasedOnSysLabelId):
                // If it is not empty then it must represent system LabelId.
                if (this.BasedOnSysLabelId != '' && !DocLabelHelper::existsSystemLabel(this.BasedOnSysLabelId, true))
                {
                    ret = ret && checkFailed(strFmt("@DocentricAX4:ValueIsNotSystemLabelId", fieldId2PName(tableNum(DocLabelTable), fieldNum(DocLabelTable, BasedOnSysLabelId))));
                }

                break;

            case fieldNum(DocLabelTable, FallbackTranslation) :
                // It cannot refer to this label.
                if (this.FallbackTranslation == this.GlobalLabelId)
                {
                    ret = ret && checkFailed(strFmt("@DocentricAX4:FieldHasReferenceToCurrentLabel", fieldId2PName(tableNum(DocLabelTable), fieldNum(DocLabelTable, FallbackTranslation))));
                }

                // Check if the FallbackTranslation field contains only static text, system label ID or user-defined label ID.
                if (ret && this.FallbackTranslation != '')
                {
                    List fallBackTranslationWords = DocGlobalHelper::strSplit(strReplace(this.FallbackTranslation, '\n', ' '), ' ', DocStringSplitOptions::RemoveEmptyEntries | DocStringSplitOptions::TrimEntries);
                    ListEnumerator fallBackTranslationWordsEnum = fallBackTranslationWords.getEnumerator();
                    int cntLabels = 0;
                    while (fallBackTranslationWordsEnum.moveNext())
                    {
                        str translationWord = strLRTrim(fallBackTranslationWordsEnum.current());

                        // Check if a traslation word is a valid user-defined or system label Id
                        if (DocUserDefinedLabelHelper::isUserDefinedLabelId(translationWord) || DocLabelHelper::isLabelId(translationWord))
                        {
                            cntLabels++;
                        }
                    }
                    // Check if the field contains more then one label Id or a combination of label IDs and static text
                    if (cntLabels > 1 || (cntLabels > 0 && cntLabels != fallBackTranslationWords.elements()))
                    {
                        ret = ret && checkFailed(strFmt("@DocentricAX4:FieldHasInvalidValue", fieldId2PName(tableNum(DocLabelTable), fieldNum(DocLabelTable, FallbackTranslation))));
                    }
                }

                // If the FallbackTranslation field contains a User-defined label Id, check if this creates a circular dependency.
                if (DocUserDefinedLabelHelper::isUserDefinedLabelId(this.FallbackTranslation))
                {
                    ret = ret && DocUserDefinedLabelHelper::checkUserDefinedLabelsCircularDependency(this.GlobalLabelId, this.FallbackTranslation);
                }
                
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromSysLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new User-defined label having a name as the provided label ID,
    /// creates the related translation records for all configured languages and populates
    /// them from the matching system label translations.
    /// </summary>
    /// <param name = "_systemLabelId">The ID of the system label from which to take the translations.</param>
    /// <param name = "_userDefinedLabelId">The ID of the newly created user-defined label.</param>
    /// <returns>Record ID of the created User-defined label.</returns>
    public static RecId insertFromSysLabel(str _systemLabelId, str _userDefinedLabelId)
    {
        DocLabelTable labelTable;

        // Check if system label Id exists
        if (!DocLabelHelper::existsSystemLabel(_systemLabelId, true))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotValidSysLabelId", _systemLabelId));
            return 0;
        }

        // Validate the user-defined label Id
        boolean validationResult;
        str validationErrorTxt;
        [validationResult, validationErrorTxt] = DocUserDefinedLabelHelper::validateLabelFormat(_userDefinedLabelId);
        if (!validationResult)
        {
            DocGlobalHelper::handleError(strFmt('%1 %2', strFmt("@DocentricAX4:ParameterIncorrectlyFormatted", identifierStr(_userDefinedLabelId)), validationErrorTxt));
            return 0;
        }

        // Create a user-defined label for selected system label and add all existing transaltions
        ttsbegin;

        labelTable.clear();
        labelTable.LabelId = _userDefinedLabelId;
        labelTable.GlobalLabelId = DocConstantDSP::DOC_LABEL_PREFIX + _userDefinedLabelId;
        labelTable.BasedOnSysLabelId = _systemLabelId;
        labelTable.UseFallbackTranslation = NoYes::Yes;
        labelTable.FallbackTranslation = _systemLabelId;
        labelTable.insert();

        DocLabelTranslation::addForSysLabel(_systemLabelId, _userDefinedLabelId);

        ttscommit;

        return labelTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in DocLabelTable table.
    /// </summary>
    public void update()
    {
        // Check if the field value has changed
        boolean updateTranslations = this.orig().BasedOnSysLabelId != this.BasedOnSysLabelId;

        super();

        if (updateTranslations && this.BasedOnSysLabelId)
        {
            // Update of label translations is done only if the update method is called from form
            if (FormDataUtil::isFormDataSource(this))
            {
                // Replace the existing translations with the translations of the new system label if the user confirms this
                if (Box::confirm(strFmt("@DocentricAX4:SystemLabelChangedConfirmTranslationUpdate", this.GlobalLabelId)))
                {
                    DocLabelTranslation::updateForSysLabel(this.BasedOnSysLabelId, this.LabelId);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:DocLabelTableDD</DeveloperDocumentation>
	<FormRef>DocLabelTable</FormRef>
	<Label>@DocentricAX3:GlobalLabels</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>GlobalLabelId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>GlobalLabelIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LabelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GlobalLabelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FallbackTranslation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseFallbackTranslation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasedOnSysLabelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GlobalLabelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LabelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GlobalLabelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FallbackTranslation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseFallbackTranslation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasedOnSysLabelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LabelId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocReportLabelId</ExtendedDataType>
			<HelpText>@DocentricAX4:UserDefinedLabelId</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GlobalLabelId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportLabelId</ExtendedDataType>
			<HelpText>@DocentricAX3:GlobalLabelIdHelp</HelpText>
			<Label>@DocentricAX3:GlobalLabelId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>DocLabelDescription</ExtendedDataType>
			<HelpText>@DocentricAX3:LabelDescriptionHelp</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>DocLabelDescription</ExtendedDataType>
			<HelpText>@DocentricAX3:GlobalLabelCommentHelp</HelpText>
			<Label>@DocentricAX3:GlobalLabelComment</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BasedOnSysLabelId</Name>
			<ExtendedDataType>DocSysLabelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FallbackTranslation</Name>
			<ExtendedDataType>DocLabelTranslationInLanguage</ExtendedDataType>
			<HelpText>@DocentricAX3:FallbackTranslationHelp</HelpText>
			<Label>@DocentricAX3:FallbackTranslation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseFallbackTranslation</Name>
			<ExtendedDataType>DocLabelUseFallbackTranslation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<ExtendedDataType>DocLabelGroupId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GlobalLabelIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GlobalLabelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocLabelGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocLabelGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupId</Name>
					<Field>GroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>