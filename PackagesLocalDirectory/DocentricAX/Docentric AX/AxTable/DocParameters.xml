<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
using UL = Docentric.AX.Framework.Utilities;

public class DocParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSharePointReportUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint report user.
    /// </summary>
    /// <returns>The SharePoint report user</returns>
    public static str getSharePointReportUser()
    {
        str sharePointWriter = DocParameters::find().SharePointReportUser;
        if (!sharePointWriter)
        {
            sharePointWriter = curUserId();
        }
        return sharePointWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointTemplateUserWriter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint temmplate writer user.
    /// </summary>
    /// <returns>The SharePoint temmplate writer user</returns>
    public static str getSharePointTemplateUserWriter()
    {
        str sharePointWriter = DocParameters::find().SharePointUserWriter;
        if (!sharePointWriter)
        {
            sharePointWriter = curUserId();
        }
        return sharePointWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointTemplateUserReader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint template reader user.
    /// </summary>
    /// <returns>The SharePoint template reader user</returns>
    public static str getSharePointTemplateUserReader()
    {
        str sharePointReader = DocParameters::find().SharePointUserReader;
        if (!sharePointReader)
        {
            sharePointReader = curUserId();
        }
        return sharePointReader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointBrowserUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SharePoint browser user.
    /// </summary>
    /// <returns>The SharePoint browser user</returns>
    public static str getSharePointBrowserUser()
    {
        str sharePointBrowser = DocParameters::find().SharePointBrowserUser;
        if (!sharePointBrowser)
        {
            sharePointBrowser = curUserId();
        }
        return sharePointBrowser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the table.
    /// </summary>
    void delete()
    {
        throw error("@SYS23721");
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values with default values in a new record.
    /// </summary>
    public void initValue()
    {
        // Email parameters.
        this.EmailAccountDisplayName = DocConstant::EmailSenderDisplayNameCurrentUserPlaceholder;

        // Email distributor batch.
        this.UseDocentricEmailDistributorBatch = true;
        this.EnableOutgoingEmailLog = true;

        // Emailing general settings.
        this.SuppressOutgoingEmails = DocSuppressOutgoingEmails::No;
            
        // Smtp settings.
        this.SmtpSettingsSmtpClientTimeout = 60000; // in ms
        this.SmtpDeliveryFormat = DocSmtpDeliveryFormat::International;
        this.SmtpMailMsgBodyTransferEncoding = DocTransferEncoding::SevenBit;
        this.SmtpMailMsgBodyAndSubjectEncoding = DocEncoding::UTF8;
                
        // Azure settings.
        this.TempFileBlobLinkExpiration = 1800; // 30 minutes.
        this.ReportTemplateStorageAzureContainer = DocConstant::AzureStorageReportTemplatesContainer;
        this.DefaultTargetAzureContainer = DocConstant::DefaultDestinationAzureContainer;

        // Report template custom fonts settings.
        this.UseCustomBlobStorageFonts = false;
        this.CustomFontsBlobStorageContainer = DocConstant::CustomBlobStorageFontsContainer;

        // On-premises settings.
        this.TempFileOnPremExpiration = 900; // 15 minutes.

        // Security settings.
        this.GenerateDsVisible = true;
        this.PrintDestSettingsFormMode = DocPrintDestSettingsFormMode::UseBothSsrsAndDocentric;
        this.SelectTemplateMode = DocSelectTemplateMode::ShowAllTemplates;
        this.SharePointAuthorizationType = DocSharePointAuthorizationType::Integrated;

        // Diagnostic.
        this.ShowDocGenErrorsOnReport = false;
        this.UseExceptionLogForDgErrors = false;
        this.UseExceptionLogForErrors = false;
        this.UseAppInsight = true;

        // Viewer.
        this.ReportViewerChoice = DocReportViewerChoice::DocentricPdfViewer;
        this.MaxNumOfReportsOpenInViewer = 3;

        // Data security.
        this.ApplyCustomDataConstraints = false;
        this.ApplyLegalEntityConstraint = false;

        // Default printer.
        this.AllowUserSetDefaultPrinter = true;

        // Restrict printers.
        this.RestrictPrinters = DocRestrictPrinters::None;

        // Archive settings.
        this.ArchivingReportsOption = DocArchivingReportsOption::ArchiveInPdfAndOriginalFormat;
        this.ArchivingEmailAttachmentsOption = DocArchivingEmailAttachmentsOption::ArchiveEmailAttachments;
        this.ArchivingReportParamsOption = DocArchiveReportParamsOption::DoNotArchive;

        // Product configuration.
        this.EnableCbdDs = false;
        this.EnableWhsLicensePlateLabels = DocGlobalHelper::isModelInstalled(DocConstant::DocentricAXWarehouseLabelsModelName);
        this.DocentricEngine = DocConstantGlobal::defaultDocentricEngine();  // Currently: DocDocentricEngine::Standard

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record exists in the table.
    /// </summary>
    /// <returns>True if exists; otherwise false</returns>
    public static boolean exist()
    {
        return (select firstonly RecId from docParameters).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocParameters table.
    /// </summary>
    /// <param name = "_forupdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocParameters table</returns>
    public static client server DocParameters find(boolean _forupdate = false)
    {
        DocParameters parameter;
    
        // Code taken from BankParameters::find()
        parameter.selectForUpdate(_forupdate);

        select firstonly parameter
            index Key
            where parameter.Key == 0;

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record values.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        // Validate template custom fonts blob storage container name if set and usage of custom blob storage template fonts is enabled.
        if (this.UseCustomBlobStorageFonts == NoYes::Yes)
        {
            if (this.CustomFontsBlobStorageContainer != '' &&
            !DocAzureBlobHelper::isContainerNameValid(this.CustomFontsBlobStorageContainer))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:InvalidContainerName", this.CustomFontsBlobStorageContainer));
                ret = false;
            }
        }

        // Validate Azure storage container name if set.
        if (this.ReportTemplateStorageAzureContainer != '' &&
            !DocAzureBlobHelper::isContainerNameValid(this.ReportTemplateStorageAzureContainer))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX:InvalidContainerName", this.ReportTemplateStorageAzureContainer));
            ret = false;
        }

        // Validate SharePoint storage fields if set.
        // Validate site URL.
        if (this.ReportTemplateStorageSharePointSiteUrl != '')
        {
            if (!DocGlobalHelper::validateURL(this.ReportTemplateStorageSharePointSiteUrl))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointSiteUrlInvalid", this.ReportTemplateStorageSharePointSiteUrl));
                ret = false;
            }
        }
        // Validate folder path.
        if (this.ReportTemplateStorageSharePointFolderPath != '')
        {
            // Folder path should not start with '/'.
            if (strStartsWith(this.ReportTemplateStorageSharePointFolderPath, DocConstantFile::SharePointFolderPathDelimiter))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointFolderPathInvalidStart", this.ReportTemplateStorageSharePointFolderPath));
                ret = false;
            }
            if (!DocSharePointHelperV3::isValidSharePointFolderPath(this.ReportTemplateStorageSharePointFolderPath))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointFolderPathInvalid", this.ReportTemplateStorageSharePointFolderPath));
                ret = false;
            }
        }

        // Validate File system folder path if set.
        if (this.ReportTemplateStorageFileSystemFolderPath != '')
        {
            // Check if file path is a UNC path.
            if (!DocFileMngHelper::isUncFilePath(this.ReportTemplateStorageFileSystemFolderPath))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:DefaultFolderIsNotUncPath", this.ReportTemplateStorageFileSystemFolderPath));
                ret = false;
            }
            // Validate file path characters.
            if (!DocFileMngHelper::isValidFilePath(this.ReportTemplateStorageFileSystemFolderPath))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:DefaultFolderInvalidChars", this.ReportTemplateStorageFileSystemFolderPath));
                ret = false;
            }
        }

        // Validate default target Azure Blob storage container name if set.
        if (this.DefaultTargetAzureContainer != '' &&
            !DocAzureBlobHelper::isContainerNameValid(this.DefaultTargetAzureContainer))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX:InvalidContainerName", this.DefaultTargetAzureContainer));
            ret = false;
        }

        // Validate default target Azure File share name if set.
        if (this.DefaultTargetAzureFileShareName != '' &&
            !DocAzureFilesHelper::isFileShareNameValid(this.DefaultTargetAzureFileShareName))
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:AzureFileShareInvalidName", this.DefaultTargetAzureFileShareName));
            ret = false;
        }

        // Validate default target File system folder path if set.
        if (this.DefaultTargetFsFolder != '')
        {
            // Check if file path is a UNC path.
            if (!DocFileMngHelper::isUncFilePath(this.DefaultTargetFsFolder))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:DefaultFolderIsNotUncPath", this.DefaultTargetFsFolder));
                ret = false;
            }
            // Validate file path characters.
            if (!DocFileMngHelper::isValidFilePath(this.DefaultTargetFsFolder))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:DefaultFolderInvalidChars", this.DefaultTargetFsFolder));
                ret = false;
            }
        }

        // SharePoint validations
        if (this.SharePointAuthorizationType != DocSharePointAuthorizationType::Integrated)
        {
            str sharePointPassword = Global::editEncryptedStringField(this, this.SharePointPassword, fieldNum(DocParameters, SharePointPassword), false);

            if (this.SharePointUsername == '')
            {
                DocGlobalHelper::handleError("@DocentricAX4:SharePointUsernameEmptyError");
                ret = false;
            }

            if (sharePointPassword == '')
            {
                DocGlobalHelper::handleError("@DocentricAX4:SharePointPasswordEmptyError");
                ret = false;
            }

            if (strLen(this.SharePointUsername) > 256)
            {
                DocGlobalHelper::handleError("@DocentricAX4:SharePointUsernameExceedsMaxLenghtError");
                ret = false;
            }

            if (strLen(sharePointPassword) > 256)
            {
                DocGlobalHelper::handleError("@DocentricAX4:SharePointPasswordExceedsMaxLengthError");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in the table.
    /// </summary>
    public void update()
    {
        // added to prepare the encrypted fields update in this table
        Global::handleEncryptedTablePreUpdate(this);

        boolean useAppInsightFlagChanged = this.orig().UseAppInsight != this.UseAppInsight;
        boolean showSelectedTemplateCondChanged = this.orig().PrintDestSettingsShowTemplate != this.PrintDestSettingsShowTemplate;

        super();
        
        if (useAppInsightFlagChanged)
        {
            // Log the
            if (this.UseAppInsight)
            {
                DocDiagnosticsManager::logDiagnosticsTurnedOn();
            }
            else
            {
                DocDiagnosticsManager::logDiagnosticsTurnedOff();
            }
        }

        // If the conditions for displaying the selected template ID have changed,
        // we need to update the print destination descriptions for email tokens and printing redirections.
        if (showSelectedTemplateCondChanged)
        {
            DocEmailTokensPDRedirection::updatePrintDestinationDescription();
        }

        // added to finilize the encrypted fields update in this table
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the specified field.
    /// </summary>
    /// <param name = "_fieldIdToCheck">The field to check</param>
    /// <returns>True/False</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
        
        switch (_fieldIdToCheck)
        {
            case fieldNum(DocParameters, DocentricEngine):
                if (!DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewNextGen) && 
                    this.DocentricEngine != DocConstantGlobal::defaultDocentricEngine() /* Currently: DocDocentricEngine::Standard */ )
                {
                    DocGlobalHelper::handleError("@DocentricAX3:DocentricEngineUnsupportedErrorMsg");
                    ret = false;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForRestrictPrinters</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a flag indicating whether the company setting for restricted printers is set.
    /// </summary>
    /// <returns>True/False</returns>
    public display DocHasPerCompanySetting hasCompanySettingForRestrictPrinters()
    {
        DocParametersCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.SettingName == DocConstant::ParameterRestrictPrintersSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForUserPrintersMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a flag indicating whether the company setting for user printer mode is set.
    /// </summary>
    /// <returns>True/False</returns>
    public display DocHasPerCompanySetting hasCompanySettingForUserPrintersMode()
    {
        DocParametersCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.SettingName == DocConstant::ParameterUserPrintersModeSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sharePointPasswordEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets SharePoint user's password string encrypted or decrypted value.
    /// </summary>
    /// <param name = "_set">Indicates if to set the password or not.</param>
    /// <param name = "_value">The password string value.</param>
    /// <returns>Decrypted password string.</returns>
    public edit DocSharePointPassword sharePointPasswordEdit(boolean _set, DocSharePointPassword _value)
    {
        return Global::editEncryptedStringField(this, _value, fieldNum(DocParameters, SharePointPassword), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharePointPassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets decrypted SharePoint password string.
    /// </summary>
    /// <returns>Decrypted password string.</returns>
    public DocSharePointPassword getSharePointPassword()
    {
        return Global::editEncryptedStringField(this, this.SharePointPassword, fieldNum(DocParameters, SharePointPassword), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFeatureToFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies feature (add-on) to the selected form. 
    /// Hides the form controls and form data source fields belonging to the selected feature
    /// if the feature is not installed or it is disabled.
    /// </summary>
    /// <param name = "_formRun">An instance of the FormRun object</param>
    public static void applyFeatureToFormRun(FormRun _formRun)
    {
        container controlsToHide = conNull();  // form controls [controlName]
        container fieldsToHide = conNull();  // form data source fields [fieldId, formDataSourceName]

        // Form: DocParameters (Docentric AX parameters)
        if (_formRun.name() == formStr(DocParameters))
        {
            // Check if the DocentricAXWarehouseLabels model is installled (feature License Plate Labels)
            if (!DocGlobalHelper::isModelInstalled(DocConstant::DocentricAXWarehouseLabelsModelName))
            {
                fieldsToHide = [
                        fieldNum(DocParameters, EnableWhsLicensePlateLabels), formDataSourceStr(DocParameters, DocParameters)
                    ];
            }
        }

        // Hide all marked form controls.
        for (int i = 1; i <= conLen(controlsToHide); i++)
        {
            str controlName = conPeek(controlsToHide, i);
            FormControl formControl = _formRun.control(_formRun.controlId(controlName));
            if (formControl)
            {
                formControl.visible(false);
            }
        }

        // Hide all marked form data source fields.
        for (int i = 1; i <= conLen(fieldsToHide); i += 2)
        {
            int fieldId = conPeek(fieldsToHide, i);
            str formDatasourceName = conPeek(fieldsToHide, i+1);
            FormDataObject formDataObject = _formRun.dataSource(formDatasourceName).object(fieldId);
            if (formDataObject)
            {
                formDataObject.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearEncryptedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears encrypted fields (SharePointPassword)).
    /// </summary>
    /// <returns>Description od changed fields if some records were changed; otherwise empty string.</returns>
    public static str clearEncryptedFields()
    {
        DocParameters   params;
        boolean         changed = false;
        
        ttsBegin;

        while select forupdate params
        {
            // clear invalid SharePointPassword fields (exception thrown at decryption)
            str value;

            // DocParameters.getSharePointPassword() throws X++ exception that aborts the transaction,
            // so we use direct method Application.DecryptFromStringForPurpose() to test EncyptedString field.
            System.Object[] paramsDecryptFromStringForPurpose = new System.Object[2]();
            paramsDecryptFromStringForPurpose.Set(0, params.SharePointPassword);
            paramsDecryptFromStringForPurpose.Set(1, params.encryptionPurpose(fieldNum(DocParameters, SharePointPassword)));

            if (!UL.ReflectionHelper::TryInvokeInstanceMethod(byref value, appl, 'DecryptFromStringForPurpose', paramsDecryptFromStringForPurpose))
            {
                params.sharePointPasswordEdit(true, '');
                params.update();
                changed = true;
            }
        }

        ttsCommit;

        return (changed ? "@DocentricAX4:SharePointPassword" : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPrintDestShowTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the multi-select lookup control for the field PrintDestSettingsShowTemplate.
    /// </summary>
    /// <param name = "_callingCtrl">The calling FormStringControl. This is the control that spawned the MultiSelectCtrlLookup.</param>
    public static void lookupPrintDestShowTemplate(FormStringControl _callingCtrl)
    {
        // Populate a temporary table with the enum values
        DocPrintDestinationLookupTmp docPrintDestinationLookupTmp = DocPrintDestinationLookupTmp::fill();

        // Prepare a queryRun to work with the temporary table
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(DocPrintDestinationLookupTmp));
        qbds.addSelectionField(fieldNum(DocPrintDestinationLookupTmp, PrintDestinationId));

        QueryRun qr = new QueryRun(q);
        qr.setCursor(DocPrintDestinationLookupTmp);

        // The field to select from the temporary table
        container selectPDS = [tableNum(DocPrintDestinationLookupTmp), fieldNum(DocPrintDestinationLookupTmp, PrintDestinationId)];
        
        DocSysLookupMultiSelectCtrl::constructWithQueryRun(_callingCtrl.formRun(), _callingCtrl, qr, false, selectPDS, '; ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDestShowTemplateEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for the PrintDestSettingsShowTemplate field.
    /// </summary>
    /// <param name = "_set">True if the field is being updated; otherwise false.</param>
    /// <param name = "_value">The value to set.</param>
    /// <returns>Value of the container field.</returns>
    public edit str printDestShowTemplateEdit(boolean _set, str _value)
    {
        const str delimiter = '; ';
        Set printDestShowTemplateSet = new Set(Types::Enum);
        List printDestShowTemplateList = new List(Types::String);
        DocPrintDestination docPrintDestination;

        if (_set)
        {
            // Convert string delimited with semicolon to the list object
            printDestShowTemplateList = DocGlobalHelper::strSplit(_value, delimiter, DocStringSplitOptions::RemoveEmptyEntries | DocStringSplitOptions::TrimEntries);
            if (!printDestShowTemplateList.empty())
            {
                // Add items from the list object to the created set object
                ListEnumerator le = printDestShowTemplateList.getEnumerator();
                while (le.moveNext())
                {
                    docPrintDestination = any2Enum(symbol2Enum(enumNum(DocPrintDestination), strLRTrim(le.current())));
                    // If the conversion to the enum value does not succeed the value 255 is returned
                    if (docPrintDestination == 255)
                    {
                        continue;
                    }
                    printDestShowTemplateSet.add(docPrintDestination);
                }
            }
            // Store packed set object to the container field
            this.PrintDestSettingsShowTemplate = printDestShowTemplateSet.pack();
        }
        else
        {
            if (conLen(this.PrintDestSettingsShowTemplate) > 0)
            {
                // Create new set object from the packed set in container field
                printDestShowTemplateSet = Set::create(this.PrintDestSettingsShowTemplate);
                if (!printDestShowTemplateSet.empty())
                {
                    // Addd items for the set object to the created list object
                    SetEnumerator se = printDestShowTemplateSet.getEnumerator();
                    while (se.moveNext())
                    {
                        docPrintDestination = se.current();
                        printDestShowTemplateList.addEnd(enum2Symbol(enumNum(DocPrintDestination), docPrintDestination));
                    }
                }
                // Convert list oject to the string delimited with semicolon
                _value = strList2str(printDestShowTemplateList, delimiter);
            }
        }
        return _value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:ReportingParametersTableDesc</DeveloperDocumentation>
	<Label>@DocentricAX:DocentricParameters</Label>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>Key</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>Key</PrimaryIndex>
	<ReplacementKey>Key</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmtpDeliveryFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmtpMailMsgBodyAndSubjectEncoding</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmtpMailMsgBodyTransferEncoding</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmtpSettingsSmtpClientTimeout</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseExceptionLogForDgErrors</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseExceptionLogForErrors</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowDocGenErrorsOnReport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateDsVisible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableCbdDs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUserReader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUserWriter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointReportUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TempFileBlobLinkExpiration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageAzureContainer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageSharePointSiteUrl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageSharePointFolderPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageFileSystemFolderPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestSettingsFormMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectTemplateMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseAppInsight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportViewerChoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxNumOfReportsOpenInViewer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyLegalEntityConstraint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyCustomDataConstraints</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TempFileOnPremExpiration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultTargetAzureContainer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultTargetFsFolder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailAccountDisplayName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDocentricEmailDistributorBatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableOutgoingEmailLog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingEmailAttachmentsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportParamsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuppressOutgoingEmails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocentricEngine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointBrowserUser</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultTemplateStorageAzureBlobStorage</Name>
			<Label>@DocentricAX:DefaultAzureTemplateStorage</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageAzureContainer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultTemplateStorageSharePoint</Name>
			<Label>@DocentricAX:DefaultSharePointTemplateStorage</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageSharePointSiteUrl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageSharePointFolderPath</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultTemplateStorageFileSystem</Name>
			<Label>@DocentricAX:DefaultFileSystemTemplateStorage</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTemplateStorageFileSystemFolderPath</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TemplateFonts</Name>
			<Label>@DocentricAX3:ReportTemplateFonts</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseCustomBlobStorageFonts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomFontsBlobStorageContainer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmailParameters</Name>
			<Label>@DocentricAX:EmailParameters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailAccountDisplayName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExceptionLog</Name>
			<Label>@DocentricAX:ExceptionsLog</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseExceptionLogForDgErrors</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseExceptionLogForErrors</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SmtpSettings</Name>
			<Label>@DocentricAX:SmtpSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SmtpSettingsSmtpClientTimeout</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmtpMailMsgBodyTransferEncoding</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmtpDeliveryFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmtpMailMsgBodyAndSubjectEncoding</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintDestinationFormSettings</Name>
			<Label>@DocentricAX:PrintDestSettingsForm</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GenerateDsVisible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestSettingsFormMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectTemplateMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestSettingsShowTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentRenderingFlags</Name>
			<Label>@DocentricAX:DocRenderingFlags</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShowDocGenErrorsOnReport</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AzureStorageSettings</Name>
			<Label>@DocentricAX:AzureStorageSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TempFileBlobLinkExpiration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SharePointAccess</Name>
			<Label>@DocentricAX:SharePointAccess</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SharePointAuthorizationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUserReader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUserWriter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointReportUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointBrowserUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointUsername</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharePointPassword</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SendingDiagnosticsData</Name>
			<Label>@DocentricAX:DiagnosticsData</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseAppInsight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintDestinationSettings</Name>
			<Label>@DocentricAX:PrintDestSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportViewerChoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxNumOfReportsOpenInViewer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultTargetAzureContainer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultTargetAzureFileShareName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultTargetFsFolder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AzureFileSharesCreatePermission</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DataSecurity</Name>
			<Label>@DocentricAX:DataSecurity</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApplyLegalEntityConstraint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyCustomDataConstraints</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OnPremiseSecuritySettings</Name>
			<Label>@DocentricAX:OnPremisesSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TempFileOnPremExpiration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultPrinter</Name>
			<Label>@DocentricAX2:DefaultPrinter</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowUserSetDefaultPrinter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmailDistributorBatch</Name>
			<Label>@DocentricAX2:EmailDistributorBatch</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseDocentricEmailDistributorBatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableOutgoingEmailLog</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintArchiveSettings</Name>
			<Label>@DocentricAX2:PrintArchiveSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ArchivingEmailAttachmentsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportParamsOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmailingGeneralSettings</Name>
			<Label>@DocentricAX3:EmailingGeneralSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SuppressOutgoingEmails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductConfiguration</Name>
			<Label>@DocentricAX3:ProductConfiguration</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EnableCbdDs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableWhsLicensePlateLabels</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocentricEngine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RestrictedPrinters</Name>
			<Label>@DocentricAX3:RestrictedPrinters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RestrictPrinters</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UserPrinters</Name>
			<Label>@DocentricAX4:UserPrinter</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserPrinterMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocentricEngine</Name>
			<Visible>No</Visible>
			<EnumType>DocDocentricEngine</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableCbdDs</Name>
			<ExtendedDataType>DocReportGenerateXmlDsCBD</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableWhsLicensePlateLabels</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DocentricAX4:DocParametersEnableLicensePlateLabelsHelp</HelpText>
			<Label>@DocentricAX4:DocParametersEnableLicensePlateLabels</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SmtpDeliveryFormat</Name>
			<EnumType>DocSmtpDeliveryFormat</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SmtpMailMsgBodyAndSubjectEncoding</Name>
			<HelpText>@DocentricAX:BodySubjectEncodingDesc</HelpText>
			<Label>@DocentricAX:BodySubjectEncoding</Label>
			<EnumType>DocEncoding</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SmtpMailMsgBodyTransferEncoding</Name>
			<HelpText>@DocentricAX:BodyTransferEncodingDesc</HelpText>
			<Label>@DocentricAX:BodyTransferEncoding</Label>
			<EnumType>DocTransferEncoding</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SmtpSettingsSmtpClientTimeout</Name>
			<ExtendedDataType>DocSmtpClientTimeout</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseExceptionLogForDgErrors</Name>
			<ExtendedDataType>DocReportUseExceptionLogForDgErrors</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseExceptionLogForErrors</Name>
			<ExtendedDataType>DocReportUseExceptionLogForErrors</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseAppInsight</Name>
			<ExtendedDataType>DocUseAppInsight</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowDocGenErrorsOnReport</Name>
			<ExtendedDataType>DocReportShowDocGenErrorsOnReport</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenerateDsVisible</Name>
			<ExtendedDataType>DocReportGenerateXmlDs</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintDestSettingsFormMode</Name>
			<EnumType>DocPrintDestSettingsFormMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelectTemplateMode</Name>
			<EnumType>DocSelectTemplateMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SharePointAuthorizationType</Name>
			<EnumType>DocSharePointAuthorizationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointUserReader</Name>
			<ExtendedDataType>DocSharePointUserReader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointUserWriter</Name>
			<ExtendedDataType>DocSharePointUserWriter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointReportUser</Name>
			<ExtendedDataType>DocSharePointReportUser</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointBrowserUser</Name>
			<ExtendedDataType>DocSharePointBrowserUser</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointUsername</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocSharePointUsername</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SharePointPassword</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EncryptedString</ExtendedDataType>
			<HelpText>@DocentricAX4:SharePointPasswordDesc</HelpText>
			<Label>@DocentricAX4:SharePointPassword</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TempFileBlobLinkExpiration</Name>
			<ExtendedDataType>DocTempFileBlobLinkExpiration</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TempFileOnPremExpiration</Name>
			<ExtendedDataType>DocTempFileOnPremExpiration</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportTemplateStorageAzureContainer</Name>
			<ExtendedDataType>DocAzureStorageContainerReportTemplates</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportTemplateStorageSharePointSiteUrl</Name>
			<ExtendedDataType>DocSharePointSiteUrl</ExtendedDataType>
			<HelpText>@DocentricAX:DefaultSpSiteTemplateStorage</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportTemplateStorageSharePointFolderPath</Name>
			<ExtendedDataType>DocSharePointFolderPath</ExtendedDataType>
			<HelpText>@DocentricAX:DefaultSpFolderPathTemplateStorage</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportTemplateStorageFileSystemFolderPath</Name>
			<ExtendedDataType>DocFileSystemFolderPathDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseCustomBlobStorageFonts</Name>
			<ExtendedDataType>DocUseCustomBlobStorageFonts</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomFontsBlobStorageContainer</Name>
			<ExtendedDataType>DocCustomFontsBlobStorageContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportViewerChoice</Name>
			<EnumType>DocReportViewerChoice</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxNumOfReportsOpenInViewer</Name>
			<ExtendedDataType>DocMaxNumOfReportsOpenInViewer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultTargetAzureContainer</Name>
			<ExtendedDataType>DocReportDefaultTargetAzureContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultTargetAzureFileShareName</Name>
			<ExtendedDataType>DocAzureFileShareName</ExtendedDataType>
			<HelpText>@DocentricAX4:DefaultAzureFileShareNameHelp</HelpText>
			<Label>@DocentricAX4:DefaultAzureFileShareName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultTargetFsFolder</Name>
			<ExtendedDataType>DocReportDefaultTargetFsFolder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AzureFileSharesCreatePermission</Name>
			<EnumType>DocAzureFileSharesCreatePermission</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyLegalEntityConstraint</Name>
			<ExtendedDataType>DocApplyLegalEntityConstraint</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyCustomDataConstraints</Name>
			<ExtendedDataType>DocApplyCustomDataConstraints</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowUserSetDefaultPrinter</Name>
			<ExtendedDataType>DocAllowUserSetDefaultPrinter</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailAccountDisplayName</Name>
			<ExtendedDataType>DocAosEmailAccountDisplayName</ExtendedDataType>
			<HelpText>@DocentricAX:EmailDisplayName</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseDocentricEmailDistributorBatch</Name>
			<ExtendedDataType>DocUseDocentricEmailDistributorBatch</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableOutgoingEmailLog</Name>
			<ExtendedDataType>DocEnableOutgoingEmailLog</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SuppressOutgoingEmails</Name>
			<EnumType>DocSuppressOutgoingEmails</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ArchivingReportsOption</Name>
			<EnumType>DocArchivingReportsOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ArchivingEmailAttachmentsOption</Name>
			<EnumType>DocArchivingEmailAttachmentsOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ArchivingReportParamsOption</Name>
			<EnumType>DocArchiveReportParamsOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictPrinters</Name>
			<EnumType>DocRestrictPrinters</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UserPrinterMode</Name>
			<EnumType>DocUserPrinterMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PrintDestSettingsShowTemplate</Name>
			<ExtendedDataType>SysContainer</ExtendedDataType>
			<HelpText>@DocentricAX4:DocParametersPrintDestSettingsDisplayTemplateConditionEditHelp</HelpText>
			<Label>@DocentricAX4:DocParametersPrintDestSettingsDisplayTemplateConditionEdit</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>