<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocentricEngineSetting</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;
using Docentric.AX.Framework.Utilities; 

/// <summary>
/// Generic table for Docentric rendering engine settings (Docentric.Documents.ObjectModel.EngineSettings properties)
/// </summary>
/// <remarks>
/// Currently supported:
///  - DefaultEmfImageGenerator: DocentricGenerator(default), SystemDrawingBasedGenerator
///  - DefaultPrintEngine: Default, Xps, GdiPlus
///  - DocumentConversionTimeout: timeout in seconds for ConvertWordDocumentToOutputFormat (does not affect printing and custom document conversion) (default 180)
/// </remarks>
public class DocentricEngineSetting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
               
        if (!ReportEngineHelper::HasProperty(this.PropertyName))
        {
            return checkFailed(strFmt('Invalid property name %1.', this.PropertyName));
        }

        if (!ReportEngineHelper::SetProperty(this.PropertyName, this.PropertyValue))
        {
            return checkFailed(strFmt('Invalid property value %1.', this.PropertyValue));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        DocGlobalChangePropagationHelper::changeVersion(tableStr(DocentricEngineSetting));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        DocGlobalChangePropagationHelper::changeVersion(tableStr(DocentricEngineSetting));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        DocGlobalChangePropagationHelper::changeVersion(tableStr(DocentricEngineSetting));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEnginePropertiesIfConfigurationChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Docentric engine properties (DefaultEmfImageGenerator, DefaultPrintEngine, DocumentConversionTimeout) 
    /// to the DocentricEngineSetting table field values if they have been changed since the last execution of this method.
    /// </summary>
    public static void updateEnginePropertiesIfConfigurationChanged()
    {                
        const str DocumentConversionTimeout = 'DocumentConversionTimeout';
   
        // Returns new propertiesVersion if reload is required and null otherwise
        guid reloadChanges()
        {   
            DocGlobalChangePropagationMethod changePropagationMethod = DocSystemSetting::getChangePropagationMethod();
            switch (changePropagationMethod)
            {
                case DocGlobalChangePropagationMethod::SysGlobalObjectCache:
                    guid propertiesVersion = DocGlobalChangePropagationHelper::getLastVersion(tableStr(DocentricEngineSetting), ReportEngineHelper::PropertiesVersion);
                
                    if (propertiesVersion == ReportEngineHelper::PropertiesVersion)
                    {
                        return System.Guid::Empty;
                    }
                    else
                    {
                        return propertiesVersion;
                    }

                case DocGlobalChangePropagationMethod::Local:
                    if (ReportEngineHelper::PropertiesVersion)
                    {
                        return System.Guid::Empty;
                    }
                    else
                    {
                        return newGuid();
                    }
                case DocGlobalChangePropagationMethod::AlwaysReload:
                    return newGuid();
                
                default:
                    DocGlobalHelper::handleWarning(strFmt('Unsupported %1 setting value %2.', DocConstantSystemSetting::ChangePropagationMethod, changePropagationMethod));
                    return newGuid();
            }
        }
        
        DocTraceEvent traceEvent;
        DocTraceContextEngineSettings traceContext = new DocTraceContextEngineSettings();

        if (reloadChanges())
        {
            // replacement for C# lock(ReportEngineHelper::engineSettingsLock)
            using (DocDisposableLock lock = new DocDisposableLock(ReportEngineHelper::engineSettingsLock))
            {           
                guid propertiesVersion = reloadChanges();

                if (!propertiesVersion)
                {
                    return;
                }

                // set Docentric AX defaults
                ReportEngineHelper::ResetDefaultEngineSettings();
        
                // then overwrite them with settings from database
                DocentricEngineSetting engineSetting;

                while select engineSetting
                {
                    ReportEngineHelper::SetProperty(engineSetting.PropertyName, engineSetting.PropertyValue);
                    traceContext.addSetting(engineSetting.PropertyName, engineSetting.PropertyValue);
                }

                ReportEngineHelper::PropertiesVersion = propertiesVersion;

                traceEvent = DocConstantDiagnostics::TraceEngineSettingsReloaded;
            }
        }
        else
        {
            traceEvent = DocConstantDiagnostics::TraceEngineSettingsNoChange;
            traceContext.addSetting(DocumentConversionTimeout, ReportEngineHelper::GetProperty(DocumentConversionTimeout));
        }

        /****** TRACING ******/
        if (DocTrace::isTraceCategoryEnabled(DocConstantDiagnostics::TraceEngineSettings))
        {
            DocTrace::info(DocConstantDiagnostics::TraceEngineSettings, traceEvent, DocGlobalHelper::getAOSInstanceName(), traceContext);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:EngineSettingsDesc</DeveloperDocumentation>
	<Label>@DocentricAX3:EngineSettings</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>PropertyName</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PropertyNameIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>PropertyNameIdx</PrimaryIndex>
	<ReplacementKey>PropertyNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocParamName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocParamValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PropertyNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PropertyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>