<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportTemplateSelectorTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportTemplateSelectorTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTableForReport</Name>
				<Source><![CDATA[
    public static boolean fillTableForReport(DocReportTemplateSelectorTmp _templateTmp, str _reportId,
                                             boolean _includeTemplateTokens, boolean _includeDocentricTemplates)
    {
        DocReportTemplate               templateOrig;
        RecId                           reportRecId;
        DocReportTable                  reportTable;
        str                             templateIdCurrent;
        const str                       TITLE_PREFIX_DEFAULT_TEMPLATE = '(DEFAULT) ';
        DocSelectTemplateMode           selectTemplateMode = DocParameters::find().SelectTemplateMode;
        boolean                         hasERTemplates = false;


        boolean includeTemplateConsideringCompany(DocReportTemplate _template)
        {
            // For this mode include all templates.
            if (selectTemplateMode == DocSelectTemplateMode::ShowAllTemplates)
            {
                return true;
            }

            // Company neutral templates should be always included.
            if (_template.CompanyId == '')
            {
                return true;
            }

            // Check if the template belongs to the current company.
            if (_template.CompanyId == curExt())
            {
                return true;
            }

            return false;
        }

        void doInsertIntoTemplateTmpTable()
        {
            _templateTmp.doInsert();
        }

        void insertNonDefaultTemplates(str _currentTemplateId)
        {
            while select templateOrig where templateOrig.TemplateId == _currentTemplateId
            {
                if (!includeTemplateConsideringCompany(templateOrig))
                {
                    continue;
                }

                templateIdCurrent = templateOrig.TemplateId;
                if (!templateIdCurrent)
                {
                    templateIdCurrent = DocConstant::NotSetLabel;
                }

                // Insert a non-default template record.
                _templateTmp.ReportId = reportTable.ReportId;
                _templateTmp.TemplateId = templateIdCurrent;
                _templateTmp.CompanyId = templateOrig.CompanyId ? templateOrig.CompanyId : DocConstant::AnyLabel;
                _templateTmp.LanguageID = templateOrig.LanguageID ? templateOrig.LanguageID : DocConstant::AnyLabel;
                _templateTmp.IsDefaultTemplate = false;
                _templateTmp.TemplateTitle = templateOrig.Title;
                _templateTmp.IsERTemplate = templateOrig.DataSourceType == DocTemplateDataSourceType::ERDataModel ? DocIsERTemplate::Yes : DocIsERTemplate::No;
                doInsertIntoTemplateTmpTable();

                if (_templateTmp.IsERTemplate == DocIsERTemplate::Yes)
                {
                    hasERTemplates = true;
                }
            }
        }


        reportRecId = 0;
        if (_reportId)
        {
            reportTable = DocReportTable::findReportId(_reportId);
            reportRecId = reportTable.RecId;
        }

        // Begin transaction.
        ttsBegin;

        if (_includeDocentricTemplates)
        {
            // 1) Insert non-default templates.
            Set nonDefaultTemplateIds = new Set(Types::String);
            while select templateOrig
              order by templateOrig.TemplateId asc
              where templateOrig.Report == reportRecId && templateOrig.IsEnabled == true && 
                    templateOrig.IsDefaultTemplate != true
            {
                nonDefaultTemplateIds.add(templateOrig.TemplateId);
            }

            SetEnumerator setEnum = nonDefaultTemplateIds.getEnumerator();
            while (setEnum.moveNext())
            {
                insertNonDefaultTemplates(setEnum.current());
            }
        }

        // 2) Insert the built-in SSRS design template.
        if (_includeTemplateTokens)
        {
            _templateTmp.ReportId = '';
            _templateTmp.TemplateId = DocConstant::BuiltInSsrsDesignPlaceholder;
            _templateTmp.CompanyId = DocConstant::AnyLabel;
            _templateTmp.LanguageID = DocConstant::AnyLabel;
            _templateTmp.IsDefaultTemplate = false;
            _templateTmp.TemplateTitle = '';
            _templateTmp.IsERTemplate = DocIsERTemplate::No;
            doInsertIntoTemplateTmpTable();
        }

        // 3) Insert the default template(s).
        if (_includeDocentricTemplates)
        {
            while select templateOrig 
                  where templateOrig.Report == reportRecId && templateOrig.IsEnabled == true &&
                        templateOrig.IsDefaultTemplate == true
            {
                if (!includeTemplateConsideringCompany(templateOrig))
                {
                    continue;
                }

                templateIdCurrent = templateOrig.TemplateId;
                if (!templateIdCurrent)
                {
                    templateIdCurrent = DocConstant::NotSetLabel;
                }

                _templateTmp.ReportId = _reportId;
                /* NOTE: From 3.3.1 we changed way of showing DEFAULTS templates in the Select temlate combobox. */
                //_templateTmp.TemplateId = DocConstant::DefaultTemplatePlaceholder + ' (' + templateIdCurrent + ')';
                _templateTmp.TemplateId = templateIdCurrent;
                _templateTmp.CompanyId = templateOrig.CompanyId ? templateOrig.CompanyId : DocConstant::AnyLabel;
                _templateTmp.LanguageID = templateOrig.LanguageID ? templateOrig.LanguageID : DocConstant::AnyLabel;
                _templateTmp.IsDefaultTemplate = true;
                _templateTmp.TemplateTitle = TITLE_PREFIX_DEFAULT_TEMPLATE + templateOrig.Title;
                _templateTmp.IsERTemplate = templateOrig.DataSourceType == DocTemplateDataSourceType::ERDataModel ? DocIsERTemplate::Yes : DocIsERTemplate::No;

                // Insert the default template record.
                doInsertIntoTemplateTmpTable();

                if (_templateTmp.IsERTemplate == DocIsERTemplate::Yes)
                {
                    hasERTemplates = true;
                }
            }

            // Add the default template token.
            if (_includeTemplateTokens)
            {
                _templateTmp.ReportId = '';
                _templateTmp.TemplateId = DocConstant::DefaultTemplatePlaceholder;
                _templateTmp.CompanyId = DocConstant::AnyLabel;
                _templateTmp.LanguageID = DocConstant::AnyLabel;
                _templateTmp.IsDefaultTemplate = true;
                _templateTmp.TemplateTitle = '';
                _templateTmp.IsERTemplate = DocIsERTemplate::No;
                doInsertIntoTemplateTmpTable();
            }
        }

        // Commit transaction.
        ttsCommit;

        return hasERTemplates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableForAllReports</Name>
				<Source><![CDATA[
    public static container fillTableForAllReports(DocReportTemplateSelectorTmp _templateTmp)
    {
        DocReportTable       reportTable;
        DocReportTemplate    reportTemplate;
        boolean              firstReport = true;
        boolean              showERColumnCurrentReport, showReportColumn = true;
        boolean              showERColumn = false;

        while select reportTable
              where reportTable.IsActiveSRS == true &&  // consider only active reports
                    reportTable.UseOnlyWithPrintDestinations == false  // consider only those reports with the UseOnlyWithPrintDestinations flag set to false
              exists join reportTemplate  // consider only those reports with at least one enabled template
                   where reportTemplate.Report == reportTable.RecId &&
                         reportTemplate.IsEnabled == true
        {
            showERColumnCurrentReport = DocReportTemplateSelectorTmp::fillTableForReport(_templateTmp, reportTable.ReportId, firstReport, true);
            showERColumn = showERColumn || showERColumnCurrentReport;
            firstReport = false;
        }

        if (firstReport)
        {
            // No report is registered, active, has flag UseOnlyWithPrintDestinations set to false or has enabled templates.
            DocReportTemplateSelectorTmp::fillTableForReport(_templateTmp, '', true, false);
            showReportColumn = false;
            showERColumn = false;
        }

        return [showReportColumn, showERColumn];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableForReportType</Name>
				<Source><![CDATA[
    public static container fillTableForReportType(DocReportTemplateSelectorTmp _templateTmp, PrintMgmtDocumentType _reportType)
    {
        DocReportTable          reportTable;
        DocReportTemplate       reportTemplate;
        PrintMgmtReportFormat   printMgmtReports;
        boolean                 firstReport = true;
        boolean                 showReportColumn = true;
        boolean                 showERColumnCurrentReport, showERColumn = false;
        int                     numberOfReports = 0;
    
        while select reportTable
              where reportTable.IsActiveSRS == true &&  // consider only active reports
                    reportTable.UseOnlyWithPrintDestinations == false // consider only those reports with the UseOnlyWithPrintDestinations flag set to false
              exists join printMgmtReports  // consider only reports belonging to the provided report type
                   where printMgmtReports.Name == reportTable.SRSReportName &&
                         printMgmtReports.DocumentType == _reportType 
              exists join reportTemplate    // consider only those reports with at least one enabled template
                   where reportTemplate.Report == reportTable.RecId &&
                         reportTemplate.IsEnabled == true
        {
            showERColumnCurrentReport = DocReportTemplateSelectorTmp::fillTableForReport(_templateTmp, reportTable.ReportId, firstReport, true);
            showERColumn = showERColumn || showERColumnCurrentReport;
            firstReport = false;
            numberOfReports++;
        }

        if (numberOfReports == 0)
        {
            // No report is registered, active, has flag UseOnlyWithPrintDestinations set to false or has enabled templates.
            DocReportTemplateSelectorTmp::fillTableForReport(_templateTmp, '', true, false);
            showReportColumn = false;
            showERColumn = false;
        }
        else if (numberOfReports == 1)
        {
            // Only one report is registered, active, has flag UseOnlyWithPrintDestinations set to false or has enabled templates.
            showReportColumn = false;
        }

        return [showReportColumn, showERColumn];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable</Name>
				<Source><![CDATA[
    public static container fillTable(DocReportTemplateSelectorTmp _templateTmp, str _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided)
    {
        boolean showReportColumn;
        boolean showERColumn;

        ttsbegin;

        delete_from _templateTmp;

        if (_reportId)
        {
            /* Report ID is provided */
            // Don't include Docentric templates, if:
            // 1) the report is not registered in the Docentric report setup.
            // 2) the report is registered in the Docentric report setup but the IsActiveSRS flag is set to false (it is not active).
            // 3) the report is registered in the Docentric report setup but the UseOnlyWithPrintDestinations flag is set to true.
            // 4) the report is registered in the Docentric report setup but it has no enabled templates.
            boolean includeDocentricTemplates = true;
            DocReportTable report = DocReportTable::findReportId(_reportId);
            boolean hasEnabledTemplates = conPeek(report.hasTemplates(), 1);

            if (report.RecId == 0 || report.IsActiveSRS == false ||
                report.UseOnlyWithPrintDestinations == true || !hasEnabledTemplates)
            {
                includeDocentricTemplates = false;
            }

            showERColumn = DocReportTemplateSelectorTmp::fillTableForReport(_templateTmp, _reportId, true, includeDocentricTemplates);

            showReportColumn = false;
        }
        else if (_reportTypeProvided)
        {
            /* At least report type is provided */
            [showReportColumn, showERColumn] = DocReportTemplateSelectorTmp::fillTableForReportType(_templateTmp, _reportType);
        }
        else
        {
            /* Neither report ID nor report type are provider */
            [showReportColumn, showERColumn] = DocReportTemplateSelectorTmp::fillTableForAllReports(_templateTmp);
        }

        ttscommit;

        return [showReportColumn, showERColumn];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:ReportTemplatesTableDesc</DeveloperDocumentation>
	<FormRef>DocReportTemplate</FormRef>
	<Label>@DocentricAX:ReportTemplates</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TemplateId</TitleField1>
	<TitleField2>CompanyId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>TemplateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@DocentricAX:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsERTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@DocentricAX:Company</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefaultTemplate</Name>
			<ExtendedDataType>DocReportIsDefaultTemplate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageID</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@DocentricAX:Language</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateId</Name>
			<ExtendedDataType>DocReportTemplateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateTitle</Name>
			<ExtendedDataType>DocReportTemplateTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsERTemplate</Name>
			<EnumType>DocIsERTemplate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportId</Name>
			<ExtendedDataType>DocReportId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReportId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>