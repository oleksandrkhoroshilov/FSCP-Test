<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocUserPrinterSelectorTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocUserPrinterSelectorTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertOnePrinter</Name>
				<Source><![CDATA[
    private static void insertOnePrinter(DocUserPrinterSelectorTmp _tmpTable, SysCorpNetPrinters _networkPrinters)
    {
        _tmpTable.clear();
        _tmpTable.PrinterName = _networkPrinters.PrinterName;
        _tmpTable.Description = _networkPrinters.Description;
        _tmpTable.PrinterPath = _networkPrinters.PrinterPath;
        _tmpTable.Active = _networkPrinters.Active;
        _tmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithUnassignedPrintersForUser</Name>
				<Source><![CDATA[
    public static int fillTableWithUnassignedPrintersForUser(DocUserPrinterSelectorTmp _tmpTable, UserId _userId)
    {
        SysCorpNetPrinters networkPrinters;
        DocUserPrinter userPrinter;
        int cnt = 0;

        ttsbegin;

        if (!DocConstantGlobal::isOnPremEnvironment())
        {            
            DocumentRoutingPrinterAppAssociation appAssociation;
            
            while select networkPrinters order by networkPrinters.PrinterName
                exists join appAssociation 
                    where appAssociation.Printer == networkPrinters.RecId
                notexists join userPrinter
                    where userPrinter.PrinterName == networkPrinters.PrinterName
                        && userPrinter.UserId == _userId
            {
                DocUserPrinterSelectorTmp::insertOnePrinter(_tmpTable, networkPrinters);
                cnt++;
            }
        }
        else
        {
            while select networkPrinters order by networkPrinters.PrinterName
                notexists join userPrinter
                    where userPrinter.PrinterName == networkPrinters.PrinterName
                        && userPrinter.UserId == _userId
            {
                DocUserPrinterSelectorTmp::insertOnePrinter(_tmpTable, networkPrinters);
                cnt++;
            }
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithAssignedPrintersForUser</Name>
				<Source><![CDATA[
    public static int fillTableWithAssignedPrintersForUser(DocUserPrinterSelectorTmp _tmpTable, UserId _userId)
    {
        SysCorpNetPrinters networkPrinters;
        DocUserPrinter userPrinter;
        int cnt = 0;

        ttsbegin;

        while select networkPrinters order by networkPrinters.PrinterName
            exists join userPrinter
                where userPrinter.PrinterName == networkPrinters.PrinterName
                    && userPrinter.UserId == _userId
        {
            DocUserPrinterSelectorTmp::insertOnePrinter(_tmpTable, networkPrinters);
            cnt++;
        }

        ttscommit;
        
        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithAllPrinters</Name>
				<Source><![CDATA[
    public static int fillTableWithAllPrinters(DocUserPrinterSelectorTmp _tmpTable)
    {
        SysCorpNetPrinters networkPrinters;
        int cnt = 0;

        ttsbegin;        

        if (!DocConstantGlobal::isOnPremEnvironment())
        {
            DocumentRoutingPrinterAppAssociation appAssociation;

            while select networkPrinters order by networkPrinters.PrinterName
                exists join appAssociation
                    where appAssociation.Printer == networkPrinters.RecId
            {
                DocUserPrinterSelectorTmp::insertOnePrinter(_tmpTable, networkPrinters);
                cnt++;
            }
        }
        else
        {
            while select networkPrinters order by networkPrinters.PrinterName
            {
                DocUserPrinterSelectorTmp::insertOnePrinter(_tmpTable, networkPrinters);
                cnt++;
            }
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOneUser</Name>
				<Source><![CDATA[
    private static void insertOneUser(DocUserPrinterSelectorTmp _tmpTable, UserInfo _userInfo)
    {
        _tmpTable.clear();
        _tmpTable.UserId = _userInfo.id;
        _tmpTable.UserName = _userInfo.name;
        _tmpTable.UserNetworkAlias = _userInfo.NetworkAlias;
        _tmpTable.UserPersonName = DirPersonUser::userId2Name(_userInfo.id);
        _tmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithUnassignedUsersForPrinter</Name>
				<Source><![CDATA[
    public static int fillTableWithUnassignedUsersForPrinter(DocUserPrinterSelectorTmp _tmpTable, PrinterName _printerName)
    {
        UserInfo userInfo;
        DocUserPrinter userPrinter;
        int cnt = 0;

        ttsbegin;

        while select userInfo order by userInfo.id
            where userInfo.enable == NoYes::Yes
                && userInfo.accountType != UserAccountType::ClaimsGroup
                && userInfo.isMicrosoftAccount == NoYes::No                
            notexists join userPrinter
                where userPrinter.UserId == userInfo.id
                    && userPrinter.PrinterName == _printerName
        {
            DocUserPrinterSelectorTmp::insertOneUser(_tmpTable, userInfo);
            cnt++;
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithAssignedUsersForPrinter</Name>
				<Source><![CDATA[
    public static int fillTableWithAssignedUsersForPrinter(DocUserPrinterSelectorTmp _tmpTable, PrinterName _printerName)
    {
        UserInfo userInfo;
        DocUserPrinter userPrinter;
        int cnt = 0;

        ttsbegin;

        while select userInfo order by userInfo.id
            where userInfo.enable == NoYes::Yes
                && userInfo.accountType != UserAccountType::ClaimsGroup
                && userInfo.isMicrosoftAccount == NoYes::No
            exists join userPrinter
                where userPrinter.UserId == userInfo.id
                    && userPrinter.PrinterName == _printerName
        {
            DocUserPrinterSelectorTmp::insertOneUser(_tmpTable, userInfo);
            cnt++;
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithAllUsers</Name>
				<Source><![CDATA[
    public static int fillTableWithAllUsers(DocUserPrinterSelectorTmp _tmpTable)
    {
        UserInfo userInfo;
        int cnt = 0;

        ttsbegin;

        while select userInfo order by userInfo.id
            where userInfo.enable == NoYes::Yes
                && userInfo.accountType != UserAccountType::ClaimsGroup
                && userInfo.isMicrosoftAccount == NoYes::No
        {
            DocUserPrinterSelectorTmp::insertOneUser(_tmpTable, userInfo);
            cnt++;
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithAllUserRoles</Name>
				<Source><![CDATA[
    public static int fillTableWithAllUserRoles(DocUserPrinterSelectorTmp _tmpTable)
    {
        SecurityRole securityRole;
        int cnt = 0;

        ttsbegin;

        while select Name, Description from securityRole order by securityRole.Name
        {
            _tmpTable.clear();
            _tmpTable.SecurityRoleName = securityRole.Name;
            _tmpTable.Description = securityRole.Description;
            _tmpTable.insert();

            cnt++;
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithPrintersActiveAndAllowedForUser</Name>
				<Source><![CDATA[
    public static int fillTableWithPrintersActiveAndAllowedForUser(DocUserPrinterSelectorTmp _tmpTable, UserId _userId)
    {
        SysCorpNetPrinters networkPrinters;
        int cnt = 0;

        // Get all active and allowed printers for the current company and provided user.
        Set validPrinters = DocPrinterManager::getActiveAndAllowedPrintersForUser(_userId);
        
        // Apply the logic for user-favorite printers and convert the set of the active and allowed printers
        // to a list that reflects user-favorite setup.
        // Note that after returning from this method, input set (validPrinters) will be empty.
        List validPrintersList = DocPrinterManager::applyOrderFromUserPrinterSetup(validPrinters, _userId);

        ttsbegin;
        
        // Populate the tmp table based on the printer names in validPrintersList
        if (validPrintersList.elements() > 0)
        {
            ListEnumerator le = validPrintersList.getEnumerator();
            le.reset();

            while (le.moveNext())
            {
                select firstonly PrinterName, Description, PrinterPath, Active from networkPrinters
                    where networkPrinters.PrinterName == le.current();

                DocUserPrinterSelectorTmp::insertOnePrinter(_tmpTable, networkPrinters);
                cnt++;
            }
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:DocPrinterSelectorTmpDD</DeveloperDocumentation>
	<Label>@DocentricAX4:PrinterSelection</Label>
	<TitleField1>PrinterName</TitleField1>
	<TitleField2>Active</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrinterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrinterPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserNetworkAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SecurityRoleName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrinterName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS62708</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrinterPath</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FilePath</ExtendedDataType>
			<Label>@SYS7406</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24676</Label>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<ExtendedDataType>SysUserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserName</Name>
			<ExtendedDataType>UserIdStr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserNetworkAlias</Name>
			<ExtendedDataType>NetworkAlias</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserPersonName</Name>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
			<Label>@SYS330910</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SecurityRoleName</Name>
			<ExtendedDataType>SecurityRoleName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>