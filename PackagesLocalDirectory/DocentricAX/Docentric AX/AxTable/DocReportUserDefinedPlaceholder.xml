<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportUserDefinedPlaceholder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using DOCRX = Docentric.AX.Reporting.XPath;

public class DocReportUserDefinedPlaceholder extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Enabled = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    // if Enabled=No validate just the PlaceholderName
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.Enabled)
        {
            ret = this.checkConditionalMandatoryFields() && ret;

            DocReportUserDefinedPlaceholder placeholder;
            
            select firstOnly placeholder where
                placeholder.Report == this.Report &&
                placeholder.PlaceholderDesc == this.PlaceholderDesc &&
                placeholder.Enabled &&
                placeholder.RecId != this.RecId;

            if (placeholder.RecId)
            {
                ret = checkFailed(strFmt("@DocentricAX3:PlaceholderDescriptionAlreadyExists", this.PlaceholderDesc));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(DocReportUserDefinedPlaceholder, PlaceholderName))
        {
            if (!DocReportUserDefinedPlaceholder::validatePlaceholderName(this.PlaceholderName))
            {
                ret = checkFailed("@DocentricAX3:PlaceholderNameInvalid");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlaceholderName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the placeholder name.
    /// </summary>
    /// <param name = "_placeholderName">A placeholder name</param>
    /// <returns>True/False</returns>
    public static boolean validatePlaceholderName(str _placeholderName)
    {
        const str identifierRegularExpression = @'^[_a-zA-Z0-9]*$';

        boolean ret = System.Text.RegularExpressions.Regex::IsMatch(_placeholderName, identifierRegularExpression);

        ret = ret && (strLen(_placeholderName) >= 3);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(DocReportUserDefinedPlaceholder, Enabled))
        {
            this.setConditionalMandatoryFields();
        }
        else if ( (_fieldId == fieldNum(DocReportUserDefinedPlaceholder, DdspDataSection)) ||
                  (_fieldId == fieldNum(DocReportUserDefinedPlaceholder, Expression))      ||
                  (_fieldId == fieldNum(DocReportUserDefinedPlaceholder, FormatString)) )
        {
            object ds = FormDataUtil::getFormDataSource(this);

            if (ds && formDataSourceHasMethod(ds, identifierStr(updateResult)))
            {
                ds.updateResult();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConditionalMandatoryFields</Name>
				<Source><![CDATA[
    public void setConditionalMandatoryFields()
    {
        container fields = [fieldNum(DocReportUserDefinedPlaceholder, PlaceholderDesc), fieldNum(DocReportUserDefinedPlaceholder, Expression)];
        FormDataSource ds = FormDataUtil::getFormDataSource(this);

        if (ds)
        {
            for (int i=1 ; i<=conLen(fields); i++)
            {
                ds.object(conPeek(fields, i)).mandatory(this.Enabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConditionalMandatoryFields</Name>
				<Source><![CDATA[
    public boolean checkConditionalMandatoryFields()
    {
        container fields = [fieldNum(DocReportUserDefinedPlaceholder, PlaceholderDesc), fieldNum(DocReportUserDefinedPlaceholder, Expression)];
        boolean ret = true;
        
        if (this.Enabled)
        {
            for (int i=1 ; i<=conLen(fields); i++)
            {
                FieldId fieldId = conPeek(fields, i);

                if (!this.(fieldId))
                {
                    ret = checkFailed(strFmt("@SYS84753", fieldId2PName(this.TableId, fieldId)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluate</Name>
				<Source><![CDATA[
    container/*[success, result, errMsg]*/ evaluate(DOCRX.XPathDdspHelper _xPathDdspHelper)
    {
        DocGlobalHelper::assert(_xPathDdspHelper != null);

        DocPlaceholderExpressionResult result;
        str     errMsg;
        boolean success = _xPathDdspHelper.TryEvaluate(enum2Symbol(enumNum(DocDdspDataSection), this.DdspDataSection), this.Expression, byref result, byref errMsg);
        
        if (success && (!System.String::IsNullOrWhiteSpace(this.FormatString)))
        {
            success = _xPathDdspHelper.TryEvaluate(enum2Symbol(enumNum(DocDdspDataSection), this.DdspDataSection), strFmt('format(%1, "%2")', this.Expression, this.FormatString),
                                                   byref result, byref errMsg);
        }
        return [success, result, errMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocReportUserDefinedPlaceholder find(DocReportTableRecId _report, DocPlaceholderName _placeholderName, boolean _forUpdate = false)
    {
        DocReportUserDefinedPlaceholder userDefinedPlaceholder;

        userDefinedPlaceholder.selectForUpdate(_forUpdate);

        select firstonly userDefinedPlaceholder where userDefinedPlaceholder.Report == _report && userDefinedPlaceholder.PlaceholderName == _placeholderName;

        return userDefinedPlaceholder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:UserDefinedPlaceholdersHelp</DeveloperDocumentation>
	<FormRef>DocReportUserDefinedPlaceholder</FormRef>
	<Label>@DocentricAX3:UserDefinedPlaceholders</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlaceholderName</TitleField1>
	<TitleField2>PlaceholderDesc</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ReportPlaceholderNameIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ReportPlaceholderNameIdx</PrimaryIndex>
	<ReplacementKey>ReportPlaceholderNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DdspDataSection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Expression</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Placeholder</Name>
			<Label>@DocentricAX2:Placeholder</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlaceholderName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Expression</Name>
			<Label>@DocentricAX3:PlaceholderExpression</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DdspDataSection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Expression</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatString</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlaceholderName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaceholderGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DdspDataSection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Expression</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormatString</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Report</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlaceholderName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocPlaceholderName</ExtendedDataType>
			<HelpText>@DocentricAX2:PlaceholderNameHelp</HelpText>
			<Label>@DocentricAX2:PlaceholderName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlaceholderDesc</Name>
			<ExtendedDataType>DocPlaceholderDescription</ExtendedDataType>
			<Label>@DocentricAX2:PlaceholderDescription</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Enabled</Name>
			<HelpText>@DocentricAX3:PlaceholderEnabledHelp</HelpText>
			<Label>@DocentricAX3:PlaceholderEnabled</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DdspDataSection</Name>
			<EnumType>DocDdspDataSection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Expression</Name>
			<ExtendedDataType>DocPlaceholderExpression</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormatString</Name>
			<ExtendedDataType>DocFormatString</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlaceholderGroup</Name>
			<ExtendedDataType>DocReportPlaceholderGroupRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportPlaceholderNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Report</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PlaceholderName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReportPlaceholderDescIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Report</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PlaceholderDesc</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Report</Name>
					<Field>Report</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportPlaceholderGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocReportPlaceholderGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlaceholderGroup</Name>
					<Field>PlaceholderGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>