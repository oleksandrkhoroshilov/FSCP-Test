<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocEmailTokensPDRedirection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocEmailTokensPDRedirection extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocEmailTokensPDRedirection find(RecId _recId, boolean _forUpdate = false)
    {
        DocEmailTokensPDRedirection settings;

        settings.selectForUpdate(_forUpdate);

        if (_recid)
        {
            select firstonly settings where settings.RecId == _recId;
        }
        
        return settings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReportAndCompany</Name>
				<Source><![CDATA[
    public static DocEmailTokensPDRedirection findByReportAndCompany(DocReportTableRecId _reportTable, SelectableDataArea _companyId, boolean _forUpdate = false)
    {
        DocEmailTokensPDRedirection settings;

        settings.selectForUpdate(_forUpdate);

        if (_reportTable && _companyId)
        {
            select firstonly settings 
                where settings.ReportTable == _reportTable
                    && settings.CompanyId == _companyId;
        }
        
        // If no company-specific redirection rule was found, check if there exists
        // global rule (DAT company)
        if (!settings)
        {
            select firstonly settings
                where settings.ReportTable == _reportTable
                    && settings.CompanyId == 'DAT';
        }
        
        return settings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        
        this.RedirectIf = DocEmailTokensPDRedirectCondition::ToFieldEmpty;
        this.ShowInfoMessage = NoYes::Yes;
        this.ShowErrorMessageIf = DocEmailTokensShowWarningMessage::ForAllFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReportTable</Name>
				<Source><![CDATA[
    public void initFromReportTable(DocReportTableRecId _reportTableRecId)
    {
        this.initValue();

        this.ReportTable = _reportTableRecId;    
        
        DocReportTable reportTable = DocReportTable::find(_reportTableRecId);
        SRSPrintDestinationSettings pds = new SRSPrintDestinationSettings();
        
        pds.printMediumType(SRSPrintMediumType::Printer_DC);
        pds.parmTmpPrintDestSettings_DC().parmReportId(reportTable.ReportId);
        pds.parmTmpPrintDestSettings_DC().parmReportCaption(reportTable.ReportDefaultCaption);
        pds.parmPrinterPrintDestSettings_DC().parmSelectedPrinterName(DocConstant::DefaultPrinterPlaceholder);
                      
        this.PrintJobSettings = pds.pack();
        this.PrintDestinationDescription = DocSrsReportRunUtil::getDocentricPrintDestDescription(pds);                           
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        
        SRSPrintDestinationSettings pds;
        switch (_fieldId)
        {
            case fieldNum(DocEmailTokensPDRedirection, PrintJobSettings):
                pds = new SRSPrintDestinationSettings();
                pds.unpack(this.PrintJobSettings);
                this.PrintDestinationDescription = DocSrsReportRunUtil::getDocentricPrintDestDescription(pds); 
                break;

            case fieldNum(DocEmailTokensPDRedirection, RedirectIf):
                if (this.RedirectIf == DocEmailTokensPDRedirectCondition::Never)
                {                    
                    this.PrintJobSettings = conNull();
                    this.PrintDestinationDescription = '';
                    this.ShowInfoMessage = NoYes::No;
                    this.ShowErrorMessageIf = DocEmailTokensShowWarningMessage::ForAllFields;
                }
                else if (this.PrintJobSettings == conNull()) 
                {
                    DocReportTable reportTable = DocReportTable::find(this.ReportTable);
                    pds = new SRSPrintDestinationSettings();

                    pds.printMediumType(SRSPrintMediumType::Printer_DC);
                    pds.parmTmpPrintDestSettings_DC().parmReportId(reportTable.ReportId);
                    pds.parmTmpPrintDestSettings_DC().parmReportCaption(reportTable.ReportDefaultCaption);
                    pds.parmPrinterPrintDestSettings_DC().parmSelectedPrinterName(DocConstant::DefaultPrinterPlaceholder);
                      
                    this.PrintJobSettings = pds.pack();
                    this.PrintDestinationDescription = DocSrsReportRunUtil::getDocentricPrintDestDescription(pds);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {            
            case fieldNum(DocEmailTokensPDRedirection, CompanyId):
                DocEmailTokensPDRedirection settings;
                select firstonly RecId from settings
                    where settings.RecId != this.RecId
                        && settings.CompanyId == this.CompanyId
                    && settings.ReportTable == this.ReportTable;
                if (settings.RecId)
                {
                    ret = checkFailed(strFmt("@DocentricAX2:EmailTokensDuplicateCompanyWarning",
                        tableId2PName(tableNum(DocEmailTokensPDRedirection)), 
                        fieldId2PName(tableNum(DocEmailTokensPDRedirection), fieldNum(DocEmailTokensPDRedirection, CompanyId)),
                        this.CompanyId));
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrintDestinationDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the description of the alternative print destination.
    /// </summary>
    public static void updatePrintDestinationDescription()
    {
        DocEmailTokensPDRedirection emailTokensPDRedirection;
        SRSPrintDestinationSettings pds;

        ttsbegin;

        while select forupdate emailTokensPDRedirection
        {
            pds = new SRSPrintDestinationSettings();
            pds.unpack(emailTokensPDRedirection.PrintJobSettings);
            emailTokensPDRedirection.PrintDestinationDescription = DocSrsReportRunUtil::getDocentricPrintDestDescription(pds);
            emailTokensPDRedirection.update();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX2:DocEmailTokensPDRedirectionDD</DeveloperDocumentation>
	<Label>@DocentricAX2:EmailTokensRedirection</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>CompanyId</TitleField1>
	<TitleField2>PrintDestinationDescription</TitleField2>
	<ReplacementKey>ReportCompIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestinationDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RedirectIf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowInfoMessage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowErrorMessageIf</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<HelpText>@DocentricAX2:CompanyPDRedirectionHelp</HelpText>
			<Label>@DocentricAX:CompanyId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PrintJobSettings</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PrintJobSettingsPacked</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RedirectIf</Name>
			<EnumType>DocEmailTokensPDRedirectCondition</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowInfoMessage</Name>
			<ExtendedDataType>DocEmailTokensShowInfoMessage</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintDestinationDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PrintMgmtSetupDestinationDesc</ExtendedDataType>
			<HelpText>@DocentricAX2:RedirectToHelp</HelpText>
			<Label>@DocentricAX2:RedirectTo</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReportTable</Name>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowErrorMessageIf</Name>
			<EnumType>DocEmailTokensShowWarningMessage</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportCompIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReportTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReportTable</Name>
					<SourceEDT>DocReportTableRecId</SourceEDT>
					<Field>ReportTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Company</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>