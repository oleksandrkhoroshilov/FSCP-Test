<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSystemSetting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generic table for Docentric (hidden) system settings.
/// </summary>
/// <remarks>
/// Currently supported:
///  - ChangePropagationMethod: SysGlobalObjectCache (default), Local, AlwaysReload
///  - SmtpMailClientLibrary: MailKit (default), DotNet
///  - DisableParentLangFallbackForUDLabels: No (default), Yes
///  - DisableCustomContextMenuFramework: No (default), Yes
/// </remarks>
public class DocSystemSetting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values with default values in a new record.
    /// </summary>
    public void initValue()
    {
        // Add here new system settings.
        container systemSettings = [
            DocConstantSystemSetting::ChangePropagationMethod,
            DocConstantSystemSetting::SmtpMailClientLibrary,
            DocConstantSystemSetting::DisableParentLangFallbackForUDLabels,
            DocConstantSystemSetting::DisableCustomContextMenuFramework,
            DocConstantSystemSetting::DisableDocentricReportViewerNativePdfPrinting
        ];
        
        for (int i = 1; i <= conLen(systemSettings); i++)
        {
            DocParamName currentSetting = conPeek(systemSettings, i);
            if (!DocSystemSetting::exist(currentSetting))
            {
                this.Name = currentSetting;
                // Set default values for each system setting
                switch (this.Name)
                {
                    case DocConstantSystemSetting::ChangePropagationMethod:
                        this.Value = enum2Symbol(enumNum(DocGlobalChangePropagationMethod), DocGlobalChangePropagationMethod::SysGlobalObjectCache);
                        break;

                    case DocConstantSystemSetting::SmtpMailClientLibrary:
                        this.Value = enum2Symbol(enumNum(DocSmtpMailClientLibrary), DocSmtpMailClientLibrary::MailKit);
                        break;

                    case DocConstantSystemSetting::DisableParentLangFallbackForUDLabels:
                        this.Value = enum2Symbol(enumNum(NoYes), NoYes::No);
                        break;

                    case DocConstantSystemSetting::DisableCustomContextMenuFramework:
                        this.Value = enum2Symbol(enumNum(NoYes), NoYes::No);
                        break;

                    case DocConstantSystemSetting::DisableDocentricReportViewerNativePdfPrinting:
                        this.Value = enum2Symbol(enumNum(NoYes), NoYes::No);
                        break;
                }
                break;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the DocSystemSetting table.
    /// </summary>
    /// <param name = "_name">System setting</param>
    /// <param name = "_forUpdate">A boolean value that specifies whether to read the record for update</param>
    /// <returns>A record in the DocSystemSetting table; otherwise an empty record</returns>
    public static DocSystemSetting find(DocParamName _name, boolean _forUpdate = false)
    {
        DocSystemSetting docSystemSetting;
        
        docSystemSetting.selectForUpdate(_forUpdate);

        select firstOnly docSystemSetting 
            where docSystemSetting.Name == _name;

        return docSystemSetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the DocSystemSetting table.
    /// </summary>
    /// <param name="_name">System setting</param>
    /// <returns>True if the specified record exists; otherwise, false.</returns>
    public static boolean exist(DocParamName _name)
    {
        return _name && (select firstonly DocSystemSetting 
            where DocSystemSetting.Name == _name).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record before the records is written to the table.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateWrite()
    {
        // Check the field value against the specified enum values
        boolean checkEnumStr(str _s, EnumId _enumId)
        {
            SysDictEnum sysDictEnum = new SysDictEnum(_enumId);
            int enumValue = sysDictEnum.symbol2Value(_s);

            if (sysDictEnum.value2Symbol(enumValue) != _s || enumValue == 255)
            {
                return checkFailed(strFmt("@DocentricAX4:DocSystemSettingInvalidSettingValue", _s, sysDictEnum.name()));
            }
            
            return true;
        }

        boolean ret = super();
    
        switch (this.Name)
        {
            case DocConstantSystemSetting::ChangePropagationMethod:
                ret = ret && checkEnumStr(this.Value, enumNum(DocGlobalChangePropagationMethod));
                break;

            case DocConstantSystemSetting::SmtpMailClientLibrary:
                ret = ret && checkEnumStr(this.Value, enumNum(DocSmtpMailClientLibrary));
                break;

            case DocConstantSystemSetting::DisableParentLangFallbackForUDLabels:
                ret = ret && checkEnumStr(this.Value, enumNum(NoYes));
                break;

            case DocConstantSystemSetting::DisableCustomContextMenuFramework:
                ret = ret && checkEnumStr(this.Value, enumNum(NoYes));
                break;

            case DocConstantSystemSetting::DisableDocentricReportViewerNativePdfPrinting:
                ret = ret && checkEnumStr(this.Value, enumNum(NoYes));
                break;

            default:
                return checkFailed(strFmt("@DocentricAX4:DocSystemSettingUnsupportedSetting", this.Name));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChangePropagationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the change propagation method.
    /// </summary>
    /// <returns>Change propagation method</returns>
    public static DocGlobalChangePropagationMethod getChangePropagationMethod()
    {
        DocSystemSetting docSystemSetting = DocSystemSetting::find(DocConstantSystemSetting::ChangePropagationMethod);
        if (docSystemSetting)
        {
            return symbol2Enum(enumNum(DocGlobalChangePropagationMethod), docSystemSetting.Value);
        }
        return DocGlobalChangePropagationMethod::SysGlobalObjectCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSmtpMailClientLibrary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SMTP client library.
    /// </summary>
    /// <returns>SMTP client library</returns>
    public static DocSmtpMailClientLibrary getSmtpMailClientLibrary()
    {
        DocSystemSetting docSystemSetting = DocSystemSetting::find(DocConstantSystemSetting::SmtpMailClientLibrary);
        if (docSystemSetting)
        {
            return symbol2Enum(enumNum(DocSmtpMailClientLibrary), docSystemSetting.Value);
        }
        return DocSmtpMailClientLibrary::MailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisabledParentLangFallbackForUDLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the parent language fallback for user-defined labels is disabled.
    /// </summary>
    /// <returns>True, if the parent language fallback is disabled; otherwise false</returns>
    public static boolean isDisabledParentLangFallbackForUDLabels()
    {
        return DocSystemSetting::find(DocConstantSystemSetting::DisableParentLangFallbackForUDLabels).Value == enum2Symbol(enumNum(NoYes), NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisabledCustomContextMenuFramework</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the custom context menu framework is disabled.
    /// </summary>
    /// <returns>True, if the custom context menu is disabled; otherwise false</returns>
    public static boolean isDisabledCustomContextMenuFramework()
    {
        return DocSystemSetting::find(DocConstantSystemSetting::DisableCustomContextMenuFramework).Value == enum2Symbol(enumNum(NoYes), NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisableDocentricReportViewerNativePdfPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the native PDF printing in Docentric Report Viewer is disabled.
    /// </summary>
    /// <returns>True, if native PDF printing is is disabled; otherwise false</returns>
    public static boolean isDisableDocentricReportViewerNativePdfPrinting()
    {
        return DocSystemSetting::find(DocConstantSystemSetting::DisableDocentricReportViewerNativePdfPrinting).Value == enum2Symbol(enumNum(NoYes), NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:SystemSettingsDesc</DeveloperDocumentation>
	<Label>@DocentricAX4:SystemSettings</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Name</TitleField1>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>NameIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>NameIdx</PrimaryIndex>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocParamName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocParamValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>