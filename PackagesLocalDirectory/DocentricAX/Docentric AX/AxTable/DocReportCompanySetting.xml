<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportCompanySetting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportCompanySetting extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    public display DocCompanyName companyName()
    {
        return CompanyInfo::findDataArea(this.CompanyId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocReportCompanySetting find(RecId _recId, boolean _forUpdate = false)
    {
        DocReportCompanySetting reportCompanySetting;
    
        if (_recId)
        {
            reportCompanySetting.selectForUpdate(_forUpdate);
    
            select firstonly reportCompanySetting
                where reportCompanySetting.RecId == _recId;
        }
    
        return reportCompanySetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSettingName</Name>
				<Source><![CDATA[
    public static DocReportCompanySetting findSettingName(RecId _reportRecId, str _companyId, str _settingName, boolean _forUpdate = false)
    {
        DocReportCompanySetting reportCompanySetting;
    
        if (_reportRecId && _companyId && _settingName)
        {
            reportCompanySetting.selectForUpdate(_forUpdate);
    
            select firstonly reportCompanySetting
            where reportCompanySetting.Report == _reportRecId &&
                  reportCompanySetting.CompanyId == _companyId &&
                  reportCompanySetting.SettingName == _settingName;
        }
    
        return reportCompanySetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEmailSendingMode</Name>
				<Source><![CDATA[
    public edit DocEmailSendingMode editEmailSendingMode(boolean _set, DocEmailSendingMode _emailSendingMode)
    {
        DocEmailSendingMode retval = DocEmailSendingMode::Synchronous;

        if (_set)
        {
            this.SettingValue = enum2Symbol(enumNum(DocEmailSendingMode), _emailSendingMode);
        }
        else
        {
            retval = symbol2Enum(enumNum(DocEmailSendingMode), this.SettingValue);
        }
        
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEmailMsgPriority</Name>
				<Source><![CDATA[
    public edit eMailPriority editEmailMsgPriority(boolean _set, eMailPriority _emailMsgPriority)
    {
        eMailPriority retval = eMailPriority::Normal;

        if (_set)
        {
            this.SettingValue = enum2Symbol(enumNum(eMailPriority), _emailMsgPriority);
        }
            
        retval = symbol2Enum(enumNum(eMailPriority), this.SettingValue);
        
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEmailDeliveryReceiptCondition</Name>
				<Source><![CDATA[
    public edit DocEmailDeliveryReceiptCondition editEmailDeliveryReceiptCondition(boolean _set, DocEmailDeliveryReceiptCondition _emailDeliveryReceiptCondition)
    {
        DocEmailDeliveryReceiptCondition retval = DocEmailDeliveryReceiptCondition::ServerDefaults;

        if (_set)
        {
            this.SettingValue = enum2Symbol(enumNum(DocEmailDeliveryReceiptCondition), _emailDeliveryReceiptCondition);
        }
        
        retval = symbol2Enum(enumNum(DocEmailDeliveryReceiptCondition), this.SettingValue);
        
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(DocReportCompanySetting, SettingValue):

                if (this.SettingValue
                    && (this.SettingName == DocConstant::EmailBounceToAddressSettingName
                        || this.SettingName == DocConstant::EmailReplyToAddressSettingName
                        || this.SettingName == DocConstant::EmailReadReceiptAddressSettingName
                        || this.SettingName == DocConstant::DocuTypeForArchiveSettingName))
                {
                    // Non-empty Reply-to, Bounce-to address or Email read receipt address: check its validity
                    if (!DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(this.SettingValue, false))
                    {
                        // No placeholder found.
                        // Check if Reply-to represents a valid email list.
                        if (this.SettingName == DocConstant::EmailReplyToAddressSettingName)
                        {
                            if (!DocGlobalHelper::validateEmailList(this.SettingValue))
                            {
                                ret = false;
                                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReplyToEmailAddressesNotValid", this.SettingValue));
                            }
                        }
                        // Check if Bounce-to represents a valid email address.
                        else if (this.SettingName == DocConstant::EmailBounceToAddressSettingName)
                        {
                            if (!DocGlobalHelper::validateEmail(this.SettingValue))
                            {
                                ret = false;
                                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:BounceToEmailAddressesNotValid", this.SettingValue));
                            }
                        }
                        // Check if Email read receipt address represents a valid email address.
                        else if (this.SettingName == DocConstant::EmailReadReceiptAddressSettingName)
                        {
                            if (!DocGlobalHelper::validateEmail(this.SettingValue))
                            {
                                ret = false;
                                DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:ReadReceiptEmailAddressNotValid", this.SettingValue));
                            }
                        }
                        // Check if Document type for archiving is valid in the given company.
                        else if (this.SettingName == DocConstant::DocuTypeForArchiveSettingName)
                        {
                            if (this.CompanyId && this.SettingName)
                            {
                                changeCompany(this.CompanyId)
                                {
                                    // fix value if needed (standard logic)
                                    this.SettingValue = strRTrim(this.SettingValue);
                                    DocuType docuType = DocuType::find(this.SettingValue);
                                    if (docuType.RecId)
                                    {
                                        this.SettingValue = DocuType.TypeId;
                                    }
                                    
                                    return DocuType::validateDocuTypeForDocuActionFile_DC(this.SettingValue, true);
                                }
                            }
                        }
                    }
                    // Placeholders found: Validate those Reply-to addresses which are not placeholders.
                    else
                    {
                        // Check if Reply-to represents a valid email list but ignore placeholders.
                        if (this.SettingName == DocConstant::EmailReplyToAddressSettingName)
                        {
                            if (!DocGlobalHelper::validateEmailListSkipPlaceholders(this.SettingValue))
                            {
                                ret = false;
                                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReplyToEmailAddressesNotValid", this.SettingValue));
                            }
                        }
                    }
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        ret = ret && this.validateField(fieldNum(DocReportCompanySetting, SettingName));
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:DocReportCompanySettingDesc</DeveloperDocumentation>
	<FormRef>DocReportTable</FormRef>
	<Label>@DocentricAX:DocReportCompanySetting</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Report</TitleField1>
	<TitleField2>SettingName</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>ReportCompanySettingx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettingName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettingValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettingName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@DocentricAX:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettingName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettingValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Report</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Label>@DocentricAX:CompanyId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SettingName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocSettingName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SettingValue</Name>
			<ExtendedDataType>DocSettingValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportCompanySettingx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Report</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettingName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Company</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Report</Name>
					<Field>Report</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>