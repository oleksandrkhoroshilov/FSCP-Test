<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting.TemplateManagement;
using System.Xml.Linq;

public class DocReportTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initTemplateStorageFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsBegin;
    
        super();
    
        DocReportTemplate::defaultDefaultTemplateForReport(this.Report);
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        DocReportTemplate  defaultTemplate;

        // Check data security.
        if (!DocDataSecurityManager::checkDataSecurity(DocDataSecurityTemplateAction::Add, DocReportTable::find(this.Report).ReportId,
                                                       this.TemplateId, this.CompanyId, this.LanguageID, true))
        {
            throw Exception::Error;
        }
    
        ttsBegin;
    
        // (1) Check if this.TemplateID is a default template for the report.
        select firstonly RecId from defaultTemplate
        where defaultTemplate.Report == this.Report &&
              defaultTemplate.TemplateId == this.TemplateId &&
              defaultTemplate.IsDefaultTemplate == true;

        // If so, the inserting template has to default too.
        if (defaultTemplate)
        {
            this.IsDefaultTemplate = true;
        }
        else
        {
            this.IsDefaultTemplate = false;
        }

        // (2) Inserted template is enabled by default.
        this.IsEnabled = true;

        // (3) Update original template storage field.
        this.updateOriginalTemplateStorage();
    
        super();
    
        // (4) Set the default template.
        DocReportTemplate::defaultDefaultTemplateForReport(this.Report);
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        DocReportTemplate       defaultTemplate;
        DocReportTemplateId     newTemplateId;


        // Check data security for the old value for the CompanyId field.
        DocDataSecurityManager docDataSecurityManager = new DocDataSecurityManager();
        str reportId = DocReportTable::find(this.Report).ReportId;
        if (!docDataSecurityManager.checkDataSecurityConstraints(DocDataSecurityTemplateAction::Edit, reportId,
                                                                 this.orig().TemplateId, this.orig().CompanyId, this.orig().LanguageID, true))
        {
            throw Exception::Error;
        }

        // Check data security for the new value for the CompanyId field.
        if (!docDataSecurityManager.checkDataSecurityConstraints(DocDataSecurityTemplateAction::Edit, reportId,
                                                                 this.TemplateId, this.CompanyId, this.LanguageID, true))
        {
            throw Exception::Error;
        }


        ttsBegin;
    
        if (this.orig().TemplateId != this.TemplateId)
        {
            newTemplateId = this.TemplateId;

            // (1) Check if newTemplateId is an ID of default templates for this report.
            select firstonly RecId from defaultTemplate
            where defaultTemplate.Report == this.Report &&
                  defaultTemplate.TemplateId == newTemplateId &&
                  defaultTemplate.IsDefaultTemplate == true;
    
            if (defaultTemplate)
            {
                // Yes, it is -> Set this template to be default too.
                this.IsDefaultTemplate = true;
            }
            else
            {
                // The newTemplateId is NOT an ID of default templates for this report.
                // This means that this template should not be default
                // except in the case that there is no other default template.
    
                // Check if there is a default template with some other Template ID
                // but skip the current updating template.
                select firstonly RecId from defaultTemplate
                where defaultTemplate.Report == this.Report &&
                      defaultTemplate.RecId != this.RecId &&
                      defaultTemplate.IsDefaultTemplate == true;
    
                if (defaultTemplate)
                {
                    // Yes, there is a default template with the different Template ID
                    // so this template automatically becomes non-default,
                    // regardless if it has or hasn't been default so far.
                    this.IsDefaultTemplate = false;
                }
                else
                {
                    // No, there is no default template with the different Template ID.
                    // So, if this template has been default template, and Template ID
                    // has just been changed, there is a chance that there are other
                    // templates with the same newTemplateId.
                    if (this.IsDefaultTemplate)
                    {
                        defaultTemplate.skipDataMethods(true);
                        update_recordSet defaultTemplate
                        setting IsDefaultTemplate = true
                        where defaultTemplate.TemplateId == newTemplateId &&
                              defaultTemplate.Report == this.Report;
                        defaultTemplate.skipDataMethods(false);
                    }
                }
            }
        }
    
        // (2) Update original template storage field.
        this.updateOriginalTemplateStorage();

        super();

        // (3) Set the default template.
        DocReportTemplate::defaultDefaultTemplateForReport(this.Report);
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        DocReportTemplate  existingTemplateId;
        DocReportTable     existingTemplateIdReport;
        DocReportTemplate  existingTemplateCompanyLang;
    
        boolean ret;
    
        ret = super();
    
        select firstonly RecId, Report from existingTemplateId
        where  existingTemplateId.TemplateId == this.TemplateId &&
               existingTemplateId.Report != this.Report &&
               existingTemplateId.RecId != this.RecId;
    
        if (existingTemplateId)
        {
            existingTemplateIdReport = DocReportTable::find(existingTemplateId.Report);
            DocGlobalHelper::handleWarning("@DocentricAX:TemplateIdHasToBeUnique");
            DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateWithIdAlreadyExists", this.TemplateId, existingTemplateIdReport.ReportId));
    
            ret = false;
        }
    
        select firstonly RecId from existingTemplateCompanyLang
        where  existingTemplateCompanyLang.TemplateId == this.TemplateId &&
               existingTemplateCompanyLang.CompanyId == this.CompanyId &&
               existingTemplateCompanyLang.LanguageID == this.LanguageID &&
               existingTemplateCompanyLang.Report == this.Report &&
               existingTemplateCompanyLang.RecId != this.RecId;
    
        if (existingTemplateCompanyLang)
        {
            DocGlobalHelper::handleWarning("@DocentricAX:IdenticalTemplateIdsCanBeUsed");
            DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateWithIdAlreadyExistsForLang", this.TemplateId, this.CompanyId, this.LanguageID));
    
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDefaultTemplateForReport</Name>
				<Source><![CDATA[
    public static void defaultDefaultTemplateForReport(RecId _reportRecId)
    {
        DocReportTemplate docReportTemplate;
    
        // Check if there is no default template for the given report.
        if (DocReportTemplate::existsDefaultTemplateForReport(_reportRecId))
        {
            return;
        }
    
        // Check if there is at least one template for the given report.
        select firstOnly RecId from docReportTemplate where docReportTemplate.Report == _reportRecId;
        if (!docReportTemplate)
        {
            return;
        }
    
        // Find the first template which does not have language and company set, is enabled and make it default.
        select firstOnly RecId from docReportTemplate
        where docReportTemplate.Report == _reportRecId &&
              docReportTemplate.IsEnabled &&
              docReportTemplate.LanguageID == '' &&
              docReportTemplate.CompanyId == '';
    
        if (!docReportTemplate)
        {
            // Find the first template that is company neutral and enabled, and make it default.
            select firstOnly RecId from docReportTemplate
            where docReportTemplate.Report == _reportRecId &&
                  docReportTemplate.IsEnabled &&
                  docReportTemplate.CompanyId == '';
    
            if (!docReportTemplate)
            {
                // Find the first template that is language neutral and enabled, and make it default.
                select firstOnly RecId from docReportTemplate
                where docReportTemplate.Report == _reportRecId &&
                      docReportTemplate.IsEnabled &&
                      docReportTemplate.LanguageID == '';
    
                // Find the first enabled template with current company and language and make it default.
                if (!docReportTemplate)
                {
                    select firstOnly RecId from docReportTemplate
                    where docReportTemplate.Report == _reportRecId &&
                          docReportTemplate.IsEnabled &&
                          docReportTemplate.LanguageID == currentUserLanguage() &&
                          docReportTemplate.CompanyId == curext();
    
                    // Find the first enabled template with current company or language and make it default.
                    if (!docReportTemplate)
                    {
                        select firstOnly RecId from docReportTemplate
                        where docReportTemplate.Report == _reportRecId &&
                              docReportTemplate.IsEnabled &&
                              (docReportTemplate.LanguageID == currentUserLanguage() ||
                               docReportTemplate.CompanyId == curext());
    
                        if (!docReportTemplate)
                        {
                            // Find any enabled template and make it default.
                            select firstOnly RecId from docReportTemplate
                            where docReportTemplate.Report == _reportRecId &&
                                  docReportTemplate.IsEnabled;
    
                            // Find any template which is company and language neutral.
                            if (!docReportTemplate)
                            {
                                select firstOnly RecId from docReportTemplate
                                where docReportTemplate.Report == _reportRecId &&
                                      docReportTemplate.LanguageID == '' &&
                                      docReportTemplate.CompanyId == '';
    
                                // Find any template which is company or language neutral.
                                if (!docReportTemplate)
                                {
                                    select firstOnly RecId from docReportTemplate
                                    where docReportTemplate.Report == _reportRecId &&
                                          (docReportTemplate.LanguageID == '' ||
                                           docReportTemplate.CompanyId == '');
    
                                    // Find the first template with current company and language and make it default.
                                    if (!docReportTemplate)
                                    {
                                        select firstOnly RecId from docReportTemplate
                                        where docReportTemplate.Report == _reportRecId &&
                                              docReportTemplate.LanguageID == currentUserLanguage() &&
                                              docReportTemplate.CompanyId == curext();
    
                                        // Find the first template with current company or language and make it default.
                                        if (!docReportTemplate)
                                        {
                                            select firstOnly RecId from docReportTemplate
                                            where docReportTemplate.Report == _reportRecId &&
                                                  (docReportTemplate.LanguageID == currentUserLanguage() ||
                                                   docReportTemplate.CompanyId == curext());
    
                                            // Find any template and make it default.
                                            if (!docReportTemplate)
                                            {
                                                select firstOnly RecId from docReportTemplate
                                                where docReportTemplate.Report == _reportRecId;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    
        if (!docReportTemplate)
        {
            return;
        }
    
        // Set default template.
        DocReportTemplate::setDefaultTemplate(docReportTemplate.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableTemplate</Name>
				<Source><![CDATA[
    public static void enableTemplate(RecId _templateRecId, boolean _enabled)
    {
        DocReportTemplate      docReportTemplate;
    
        if (!_templateRecId)
        {
            return;
        }
    
        docReportTemplate = DocReportTemplate::find(_templateRecId, true);
        if (!docReportTemplate)
        {
            return;
        }
    
        ttsBegin;
    
        docReportTemplate.IsEnabled = _enabled;
        docReportTemplate.doUpdate();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDefaultTemplateForReport</Name>
				<Source><![CDATA[
    public static boolean existsDefaultTemplateForReport(RecId _reportRecId)
    {
        DocReportTemplate template;
    
        select firstOnly RecId from template
        where template.Report == _reportRecId &&
              template.IsDefaultTemplate == true;
    
        if (template)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocReportTemplate find(DocReportTemplateRecId _templateRecId, boolean _forUpdate = false)
    {
        DocReportTemplate template;
    
        if (_templateRecId)
        {
            template.selectForUpdate(_forUpdate);
    
            select firstonly template
            where template.RecId == _templateRecId;
        }
    
        return template;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets template with provided template ID, company ID and language ID.
    /// </summary>
    /// <param name="_templateId">
    /// Template ID.
    /// </param>
    /// <param name="_companyId">
    /// Company ID.
    /// </param>
    /// <param name="_languageId">
    /// Language ID.
    /// </param>
    /// <param name="_forUpdate">
    /// Should template be selected for updating.
    /// </param>
    /// <returns>
    /// DocReportTemplate record if found.
    /// </returns>
    public static DocReportTemplate findTemplateId(DocReportTemplateId _templateId, CompanyId _companyId,
                                                   LanguageId _languageId, boolean _forUpdate = false)
    {
        DocReportTemplate   template;
    
        if (!_templateId)
        {
            return template;
        }
    
        select firstonly template
        where template.TemplateId == _templateId &&
                template.CompanyId == _companyId &&
                template.LanguageId == _languageId;
    
        if (template)
        {
            template.selectForUpdate(_forUpdate);
        }
    
        return template;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTemplateIdUsingRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets template with provided template ID, company ID and language ID,
    /// using business rules for company- and language- neutral templates.
    /// </summary>
    /// <param name="_templateId">Template ID</param>
    /// <param name="_companyId">Company ID</param>
    /// <param name="_languageId">Language ID</param>
    /// <param name="_considerDisabledTemplates">Should disabled templates be considered.</param>
    /// <param name="_forUpdate">Should template be selected for updating.</param>
    /// <returns>DocReportTemplate record if found.</returns>
    public static DocReportTemplate findTemplateIdUsingRules(DocReportTemplateId _templateId, CompanyId _companyId, LanguageId _languageId,
                                                             boolean _considerDisabledTemplates = true, boolean _forUpdate = false)
    {
        DocReportTemplate   template;
    
        if (!_templateId)
        {
            return template;
        }
    
        /* _companyId != '' && _languageId != '' */
        if (_companyId != '' && _languageId != '')
        {
            // CompanyId == _companyId, LanguageId == _languageId
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == _companyId &&
                  template.LanguageId == _languageId &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == _companyId, LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == _companyId &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == '', LanguageId == _languageId
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == _languageId &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
        }
    
        /* _companyId == '' && _languageId != '' */
        if (_companyId == '' && _languageId != '')
        {
            // CompanyId == '', LanguageId == _languageId
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == _languageId &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == curext(), LanguageId == _languageId
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == curext() &&
                  template.LanguageId == _languageId &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == curext() &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
        }
    
        /* _companyId != '' && _languageId == '' */
        if (_companyId != '' && _languageId == '')
        {
            // CompanyId == _companyId, LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == _companyId &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == _companyId, LanguageId == currentUserLanguage()
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == _companyId &&
                  template.LanguageId == currentUserLanguage() &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == currentUserLanguage() &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
        }
    
        /* _companyId == '' && _languageId == '' */
        if (_companyId == '' && _languageId == '')
        {
            // CompanyId == '', LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == curext() &&
                  template.LanguageId == '' &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == '' &&
                  template.LanguageId == currentUserLanguage() &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
    
            // CompanyId == curext(), LanguageId == currentUserLanguage()
            select firstonly template
            where template.TemplateId == _templateId &&
                  template.CompanyId == curext() &&
                  template.LanguageId == currentUserLanguage() &&
                  (_considerDisabledTemplates || template.IsEnabled == true);
    
            if (template)
            {
                template.selectForUpdate(_forUpdate);
                return template;
            }
        }
    
        return template;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultTemplate</Name>
				<Source><![CDATA[
    public static void setDefaultTemplate(RecId _templateRecId)
    {
        DocReportTemplate      docReportTemplate;
        DocReportTemplateId    templateId;
        RecId                  reportRecId;
    
        if (!_templateRecId)
        {
            return;
        }
    
        docReportTemplate = DocReportTemplate::find(_templateRecId);
        if (!docReportTemplate)
        {
            return;
        }
    
        templateId = docReportTemplate.TemplateId;
        reportRecId = docReportTemplate.Report;
    
        ttsBegin;
    
        docReportTemplate.skipDataMethods(true);

        update_recordSet docReportTemplate
        setting IsDefaultTemplate = true
        where docReportTemplate.TemplateId == templateId &&
              docReportTemplate.Report == reportRecId;
    
        update_recordSet docReportTemplate
        setting IsDefaultTemplate = false
        where docReportTemplate.TemplateId != templateId &&
              docReportTemplate.Report == reportRecId;
    
        docReportTemplate.skipDataMethods(false);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateFileExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the template file exists and optionally, the error message in case that the template does not exist.
    /// </summary>
    /// <param name = "_constructErrMsgTemplateNotExist">Should error message be created</param>
    /// <returns>Returns [boolean templateExists, str templateNotExistMsg] </returns>
    public container templateFileExists(boolean _constructErrMsgTemplateNotExist = true)
    {
        boolean templateExists = false;
        str templateNotExistMsg = '';

        switch (this.CurrentStorageType)
        {
            case DocTemplateStorageType::AOT:
                if (this.StorageResourceName)
                {
                    try
                    {
                        templateExists = DocGlobalHelper::aotResourceExists(this.StorageResourceName);
                        if (!templateExists && _constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:FileNotFoundAotResources",
                                                         this.FileNameAot, this.StorageResourceName);
                        }
                    }
                    catch
                    {
                        if (_constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:ErrorCheckingFileExistsAotResources",
                                                         this.FileNameAot, this.StorageResourceName);
                        }
                    }
                }
                break;

            case DocTemplateStorageType::AzureBlobStorage:
                if (this.StorageAzureContainer && this.blobName())
                {
                    try
                    {
                        templateExists = DocAzureBlobHelper::blobExists(this.StorageAzureContainer, this.blobName(), true, true);
                        if (!templateExists && _constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:FileNotFoundOnAzureStorage",
                                                         this.FileNameAzure, this.StorageAzureContainer, this.blobName());
                        }
                    }
                    catch
                    {
                        if (_constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:ErrorCheckingIfFileExistsOnAzureStorage",
                                                         this.FileNameAzure, this.StorageAzureContainer, this.blobName());
                        }
                    }
                }
                break;

            case DocTemplateStorageType::SharePoint:
                if (this.StorageSharePointSiteUrl && this.StorageSharePointFolderPath && this.FileNameSp)
                {
                    try
                    {
                        DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
                            this.StorageSharePointSiteUrl, this.StorageSharePointFolderPath, DocSharePointRole::TemplateReader);

                        templateExists = DocSharePointHelperV3::fileExistsByUrl(this.sharePointFileUrl(), this.StorageSharePointSiteUrl, spCredentials, true, true);
                        if (!templateExists && _constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:FileNotFoundOnSharePoint",
                                                     this.FileNameSp, this.sharePointHostName(),
                                                     this.sharePointSiteName(), this.StorageSharePointFolderPath);
                        }
                    }
                    catch
                    {
                        if (_constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:ErrorCheckingFileExistsOnSharePoint",
                                                         this.FileNameSp, this.sharePointHostName(),
                                                         this.sharePointSiteName(), this.StorageSharePointFolderPath);
                        }
                    }
                }
                break;

            case DocTemplateStorageType::FileSystem:
                if (this.StorageFileSystemFolderPath && this.FileNameFs)
                {
                    str fullFilename = this.fileSystemFullFilename();
                    if (DocFileSystemMngHelper::aosHaveReadPermissionForFile(fullFilename) == NoYesError::No)
                    {
                        if (_constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:ErrorNoReadPermissionForFileOnFileSystem", fullFilename);
                        }
                    }
                    else // if (DocFileSystemMngHelper::aosHaveReadPermissionForFile(fullFilename) == NoYesError::Yes or NoYesError::Error)
                    {
                        templateExists = DocFileSystemMngHelper::fileExistsOnFileSystem(fullFilename);
                        if (!templateExists && _constructErrMsgTemplateNotExist)
                        {
                            templateNotExistMsg = strFmt("@DocentricAX:TemplateFileNotFoundOnFileSystem", this.FileNameFs, this.StorageFileSystemFolderPath);
                        }
                    }
                }
                break;


            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported template storage type (%1)', this.CurrentStorageType));
        }
    
        return [templateExists, templateNotExistMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTemplateWithSameStorageLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if another template exists with exactly the same storage location,
    /// i.e. with the same filename, SharePoint site and folder path, Azure blob storage container, etc.
    /// </summary>
    /// <param name = "_accrossAllTemplates">Should templates for all reports be considered.</param>
    /// <returns>Container [templateWithSameStorageLocationId, existsTemplateMessage]</returns>
    public container existsTemplateWithSameStorageLocation(boolean _accrossAllTemplates)
    {
        str existsTemplateMessage = '';
        str templateWithSameStorageLocationId = '';

        if (this.CurrentStorageType == DocTemplateStorageType::AOT)
        {
            return [templateWithSameStorageLocationId, existsTemplateMessage];
        }

        DocReportTemplate templateWithSameStorageLocation;
        boolean templateWithSameStorageLocationExists = false;

        while select templateWithSameStorageLocation
              where templateWithSameStorageLocation.CurrentStorageType != DocTemplateStorageType::AOT &&
                    templateWithSameStorageLocation.CurrentStorageType == this.CurrentStorageType &&
                    templateWithSameStorageLocation.RecId != this.RecId &&
                    (_accrossAllTemplates || templateWithSameStorageLocation.Report == this.Report)
        {
            if (!templateWithSameStorageLocation.isFileAttached())
            {
                continue;
            }

            str templateWithSameStorageLocationIdentifier = strFmt("@DocentricAX3:TemplateIdentifier", templateWithSameStorageLocation.TemplateId,
                                                                   templateWithSameStorageLocation.CompanyId ? templateWithSameStorageLocation.CompanyId : "@DocentricAX3:Any",
                                                                   templateWithSameStorageLocation.LanguageID ? templateWithSameStorageLocation.LanguageID : "@DocentricAX3:Any");

            if (_accrossAllTemplates)
            {
                templateWithSameStorageLocationIdentifier += strFmt(' %1 ', "@DocentricAX3:And") + strFmt("@DocentricAX3:ReportIdentifier", DocReportTable::find(templateWithSameStorageLocation.Report).ReportId);
            }

            switch (templateWithSameStorageLocation.CurrentStorageType)
            {
                case DocTemplateStorageType::AOT:
                    // Do nothing.
                    break;

                case DocTemplateStorageType::AzureBlobStorage:
                    if (this.StorageAzureContainer && this.FileNameAzure &&
                        this.StorageAzureContainer == templateWithSameStorageLocation.StorageAzureContainer &&
                        this.FileNameAzure == templateWithSameStorageLocation.FileNameAzure &&
                        this.blobName() == templateWithSameStorageLocation.blobName())
                    {
                        templateWithSameStorageLocationExists = true;
                        existsTemplateMessage = strFmt("@DocentricAX3:FileFoundOnAzureStorage", templateWithSameStorageLocation.FileNameAzure,
                                                        templateWithSameStorageLocation.StorageAzureContainer, templateWithSameStorageLocation.blobName())
                                              + strFmt(' %1 ', "@DocentricAX3:For") + templateWithSameStorageLocationIdentifier;
                    }
                    break;

                case DocTemplateStorageType::SharePoint:
                    if (this.StorageSharePointSiteUrl && this.StorageSharePointFolderPath && this.FileNameSp &&
                        this.FileNameSp == templateWithSameStorageLocation.FileNameSp &&
                        this.StorageSharePointSiteUrl == templateWithSameStorageLocation.StorageSharePointSiteUrl && 
                        this.StorageSharePointFolderPath == templateWithSameStorageLocation.StorageSharePointFolderPath)
                    {
                        templateWithSameStorageLocationExists = true;
                        existsTemplateMessage = strFmt("@DocentricAX3:FileFoundOnSharePoint",
                                                        templateWithSameStorageLocation.FileNameSp, templateWithSameStorageLocation.sharePointHostName(),
                                                        templateWithSameStorageLocation.sharePointSiteName(), templateWithSameStorageLocation.StorageSharePointFolderPath)
                                              + strFmt(' %1 ', "@DocentricAX3:For") + templateWithSameStorageLocationIdentifier;
                    }
                    break;

                case DocTemplateStorageType::FileSystem:
                    if (this.StorageFileSystemFolderPath && this.FileNameFs &&
                        this.FileNameFs == templateWithSameStorageLocation.FileNameFs &&
                        this.StorageFileSystemFolderPath == templateWithSameStorageLocation.StorageFileSystemFolderPath)
                    {
                        templateWithSameStorageLocationExists = true;
                        existsTemplateMessage = strFmt("@DocentricAX3:TemplateFileFoundOnFileSystem",
                                                       templateWithSameStorageLocation.FileNameFs, templateWithSameStorageLocation.StorageFileSystemFolderPath)
                                              + strFmt(' %1 ', "@DocentricAX3:For") + templateWithSameStorageLocationIdentifier;
                    }
                    break;


                default:
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported template storage type (%1)', templateWithSameStorageLocation.CurrentStorageType));
            }

            if (templateWithSameStorageLocationExists)
            {
                templateWithSameStorageLocationId = strFmt("@DocentricAX3:TemplateIdentifier2", templateWithSameStorageLocation.TemplateId,
                                                           templateWithSameStorageLocation.CompanyId ? templateWithSameStorageLocation.CompanyId : "@DocentricAX3:Any",
                                                           templateWithSameStorageLocation.LanguageID ? templateWithSameStorageLocation.LanguageID : "@DocentricAX3:Any");
                break;
            }
        }

        return [templateWithSameStorageLocationId, existsTemplateMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemplateContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the template content as memory stream.
    /// </summary>
    /// <param name="_templateId">
    /// Template ID.
    /// </param>
    /// <param name="_companyId">
    /// Company ID. Leave empty if the template is company neutral.
    /// </param>
    /// <param name="_languageId">
    /// Language ID. Leave empty if the template is language neutral.
    /// </param>
    /// <param name="_considerDisabledTemplates">
    /// Should disabled templates be considered.
    /// </param>
    /// <returns>Returns template content. If the report template file does not exist, an exception is thrown.</returns>
    public static System.IO.MemoryStream getTemplateContent(DocReportTemplateId _templateId, CompanyId _companyId, LanguageId _languageId, boolean _considerDisabledTemplates = false)
    {
        DocReportTemplate           template;
        System.IO.MemoryStream      reportContent;


        void validateParameters()
        {
            // Validate parameters.
            if (!_templateId)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _templateId is not set');
            }
    
            template = DocReportTemplate::findTemplateIdUsingRules(_templateId, _companyId, _languageId, _considerDisabledTemplates);
            if (!template)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:TemplateWithIdNotExistOrDisabled", _templateId, _companyId, _languageId));
            }

            DocReportTable report = DocReportTable::find(template.Report);
            if (!report)
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:ReportForTheTemplateNotExist", _templateId));
            }

            if (!template.validateStorageFields())
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:TemplateHasInvalidStorageFields", _templateId));
            }
        }

        validateParameters();

        switch (template.CurrentStorageType)
        {
            case DocTemplateStorageType::AOT:
                reportContent = DocGlobalHelper::getAotResourceContent(template.StorageResourceName);
                if (reportContent == null)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateDoesNotExistsInAot",
                        _templateId, _companyId, _languageId, template.FileNameAot, template.StorageResourceName), true, '', true);
                }
                break;

            case DocTemplateStorageType::AzureBlobStorage:
                reportContent = DocAzureBlobHelper::getBlobContent(template.StorageAzureContainer, template.blobName());
                if (reportContent == null)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateDoesNotExistsOnAzure",
                        _templateId, _companyId, _languageId, template.FileNameAzure, template.StorageAzureContainer, template.blobName()), true, '', true);
                }
                break;

            case DocTemplateStorageType::SharePoint:
                DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
                    template.StorageSharePointSiteUrl, template.StorageSharePointFolderPath, DocSharePointRole::TemplateReader);
                using(System.IO.Stream reportContentSp = DocSharePointHelperV3::getFileContentByUrl(template.sharePointFileUrl(), template.StorageSharePointSiteUrl, spCredentials))
                {
                    if (reportContentSp == null)
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateDoesNotExistsOnSharePoint",
                            _templateId, _companyId, _languageId, template.FileNameSp, template.sharePointHostName(),
                            template.sharePointSiteName(), template.StorageSharePointFolderPath), true, '', true);
                    }
                    reportContent = new System.IO.MemoryStream();
                    try
                    {
                        reportContentSp.CopyTo(reportContent);
                        reportContent.Position = 0;
                    }
                    catch(Exception::CLRError)
                    {
                        DocGlobalHelper::handleClrException(funcName(), 'Error while handling System.Net.ConnectStream containing template downloaded from SharePoint');
                    }
                }
                break;

            case DocTemplateStorageType::FileSystem:
                reportContent = DocFileSystemMngHelper::getFileContentAsMemoryStream(template.fileSystemFullFilename(), false);
                if (reportContent == null)
                {
                    // We don't now yet if file doesn't exist, or there is some problem with permissions.
                    boolean templateFileExists;
                    str templateFileDoesNotExistErrMsg;
                    [templateFileExists, templateFileDoesNotExistErrMsg] = template.templateFileExists(true);
                    if (!templateFileExists)
                    {
                        // Template file does not exist.
                        DocGlobalHelper::handleError(templateFileDoesNotExistErrMsg, true, '', true);
                    }
                    else
                    {
                        // Template file exists but there is some other problem.
                        reportContent = DocFileSystemMngHelper::getFileContentAsMemoryStream(template.fileSystemFullFilename(), true);
                        throw Exception::Error;
                    }
                }
                break;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt('Unsupported template storage type (%1)', template.CurrentStorageType));
        }
        
        return reportContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUploadingTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to this delegate to validate the uploading template file,
    /// for example to scan it for viruses and malicious code.
    /// </summary>
    /// <param name = "_reportTemplate">DocReportTemplate table record</param>
    /// <param name = "_stream">Uploading template file</param>
    /// <param name = "_rejectUploadingTemplate">Invoke the _rejectUploadingTemplate.reject() method to cancel the upload of the template file</param>
    /// <remarks>
    /// In order to scan each uploading file into D365FO, please subscribe to the FileUploadResultBase.delegateScanStream() delegate.
    /// </remarks>
    delegate void onUploadingTemplate(DocReportTemplate _reportTemplate, System.IO.Stream _stream, EventHandlerRejectResult _rejectUploadingTemplate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadTemplateFileToStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the provided template file content to the template storage.
    /// </summary>
    /// <param name = "_stream">File content</param>
    /// <returns>SharePoint url of the uploaded file if applicable. Exception is thrown if an error occurs.</returns>
    public str uploadTemplateFileToStorage(System.IO.Stream _stream)
    {
        void validateParameters()
        {
            if (_stream == null)
            {
                DocGlobalHelper::handleException(funcName(), 'Parameter _stream is not set');
            }

            if (!DocFileMngHelper::isFileWordDocument(this.fileName()))
            {
                DocGlobalHelper::handleError("@DocentricAX:DocTemplateIsWordDoc", true, '', true);
            }
            
            if (this.CurrentStorageType == DocTemplateStorageType::SharePoint ||
                this.CurrentStorageType == DocTemplateStorageType::AzureBlobStorage ||
                this.CurrentStorageType == DocTemplateStorageType::FileSystem)
            {
                if (!this.validateStorageFields(true, null))
                {
                    throw Exception::Error;
                }
            }
            else // if (this.CurrentStorageType == DocTemplateStorageType::AOT)
            {
                throw Exception::Error;
            }

            // Give a chance to a single subscriber to cancel the upload.
            // This delegate can be used for scanning for viruses and malicious code.
            EventHandlerRejectResult rejectUploadingTemplate = EventHandlerRejectResult::newSingleResponse();
            this.onUploadingTemplate(this, _stream, rejectUploadingTemplate);
            if (rejectUploadingTemplate.isRejected())
            {
                DocGlobalHelper::handleException(
                    funcName(), strFmt("@DocentricAX4:UploadingTemplateCanceledByEventHandler", 'DocReportTemplate.onUploadingTemplate'));
            }
        }
        

        boolean isUploadSuccess = false;
        str sharePointFileUrl, blobName, errMsg;

        try
        {
            // Set the error message.
            switch (this.CurrentStorageType)
            {
                case DocTemplateStorageType::SharePoint:
                    errMsg = strFmt("@DocentricAX:ErrorUploadingFileToSharePoint", this.FileNameSp, this.StorageSharePointSiteUrl, this.StorageSharePointFolderPath);
                    break;

                case DocTemplateStorageType::AzureBlobStorage:
                    blobName = this.blobName();
                    errMsg = strFmt("@DocentricAX:ErrorUploadingFileToBlobStorage", this.FileNameAzure, this.StorageAzureContainer, blobName);
                    break;

                case DocTemplateStorageType::FileSystem:
                    errMsg = strFmt("@DocentricAX:ErrorUploadingFileToFileSystem", this.FileNameFs, this.StorageFileSystemFolderPath);
                    break;

                case DocTemplateStorageType::AOT:
                    errMsg = 'Cannot upload template to AOT Resources';
                    break;

                default:
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported element (%1) of enum (%2)', enumStr(DocTemplateStorageType), this.CurrentStorageType));
            }

            // Validate parameters.
            validateParameters();

            if (_stream.CanSeek)
            {
                _stream.Seek(0, System.IO.SeekOrigin::Begin);
            }

            switch (this.CurrentStorageType)
            {
                case DocTemplateStorageType::SharePoint:
                    DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
                        this.StorageSharePointSiteUrl, this.StorageSharePointFolderPath, DocSharePointRole::TemplateWriter);
                    sharePointFileUrl = DocSharePointHelperV3::uploadToSharePoint(
                        _stream, this.FileNameSp, this.StorageSharePointSiteUrl, this.StorageSharePointFolderPath, spCredentials, true, true);
                    isUploadSuccess = true;
                    break;

                case DocTemplateStorageType::AzureBlobStorage:
                    DocAzureBlobHelper::uploadBlob(this.StorageAzureContainer, blobName, _stream);
                    isUploadSuccess = true;
                    break;

                case DocTemplateStorageType::FileSystem:
                    DocFileSystemMngHelper::createFolderAndSaveToFileSystem(_stream, this.StorageFileSystemFolderPath, this.fileSystemFullFilename());
                    isUploadSuccess = true;
                    break;
            }
        }
        catch
        {
            DocGlobalHelper::handleError(errMsg);
        }

        if (!isUploadSuccess)
        {
            // Throw exception if the template file has not been uploaded to the template storage.
            DocGlobalHelper::handleError("@DocentricAX:TemplateFileUploadFailed", true, '', true);
        }

        // Return SharePoint url of the uploaded file (if applicable).
        return sharePointFileUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStorageFields</Name>
				<Source><![CDATA[
    public boolean validateStorageFields(boolean _showErrors = true, List _errorList = null)
    {
        str errMsg, templateFilename;
        boolean isValid = true;


        void logErrorMsg(str _errMsg)
        {
            if (_showErrors)
            {
                DocGlobalHelper::handleError(_errMsg);
            }
            if (_errorList != null)
            {
                _errorList.addEnd(_errMsg);
            }
        }

        templateFilename = this.fileName();
        if (templateFilename == '')
        {
            isValid = false;
            errMsg = "@DocentricAX:TemplateFilenameNotSet";
            logErrorMsg(errMsg);
        }
        else
        {
            if (!DocFileMngHelper::isValidOnlyFilename(templateFilename))
            {
                isValid = false;
                errMsg = strFmt("@DocentricAX:FilenameInvalid", templateFilename);
                logErrorMsg(errMsg);
            }
            if (!DocFileMngHelper::isFileWordDocument(templateFilename))
            {
                isValid = false;
                errMsg = strFmt("@DocentricAX:TemplateIsNotWordDoc", templateFilename);
                logErrorMsg(errMsg);
            }
        
            switch (this.CurrentStorageType)
            {
                case DocTemplateStorageType::AOT:
                    // Check if the resource name is set.
                    if (this.StorageResourceName == '')
                    {
                        isValid = false;
                        errMsg = "@DocentricAX:ResourceNotSet";
                        logErrorMsg(errMsg);
                    }

                    // Check if resource exists.
                    if (this.StorageResourceName && !DocGlobalHelper::aotResourceExists(this.StorageResourceName))
                    {
                        isValid = false;
                        errMsg = strFmt("@DocentricAX:ResourceNotExist", this.StorageResourceName);
                        logErrorMsg(errMsg);
                    }
                    break;

                case DocTemplateStorageType::AzureBlobStorage:
                    if (this.StorageAzureContainer == '')
                    {
                        isValid = false;
                        errMsg = "@DocentricAX:AzureReportTemplateContainerNotSet";
                        logErrorMsg(errMsg);
                    }
                    if (this.StorageAzureContainer && !DocAzureBlobHelper::isContainerNameValid(this.StorageAzureContainer))
                    {
                        isValid = false;
                        errMsg = strFmt("@DocentricAX:InvalidContainerName", this.StorageAzureContainer);
                        logErrorMsg(errMsg);
                        errMsg = "@DocentricAX:CorrectContainerName";
                        logErrorMsg(errMsg);
                    }
                    break;

                case DocTemplateStorageType::SharePoint:
                    if (this.StorageSharePointSiteUrl == '')
                    {
                        isValid = false;
                        errMsg = "@DocentricAX:SharePointSiteUrlNotSet";
                        logErrorMsg(errMsg);
                    }
                    if (this.StorageSharePointFolderPath == '')
                    {
                        isValid = false;
                        errMsg = "@DocentricAX:SharePointFolderPathNotSet";
                        logErrorMsg(errMsg);
                    }
                
                    // Validate site URL.
                    if (this.StorageSharePointSiteUrl != '')
                    {
                        if (!DocGlobalHelper::validateURL(this.StorageSharePointSiteUrl))
                        {
                            isValid = false;
                            errMsg = strFmt("@DocentricAX:SharePointSiteUrlInvalid", this.StorageSharePointSiteUrl);
                            logErrorMsg(errMsg);
                        }
                    }
                    // Validate folder path.
                    if (this.StorageSharePointFolderPath != '')
                    {
                        // Folder path should not start with '/'.
                        if (strStartsWith(this.StorageSharePointFolderPath, DocConstantFile::SharePointFolderPathDelimiter))
                        {
                            isValid = false;
                            errMsg = strFmt("@DocentricAX:SharePointFolderPathInvalidStart", this.StorageSharePointFolderPath);
                            logErrorMsg(errMsg);
                        }
                        if (!DocSharePointHelperV3::isValidSharePointFolderPath(this.StorageSharePointFolderPath))
                        {
                            isValid = false;
                            errMsg = strFmt("@DocentricAX:SharePointFolderPathInvalid", this.StorageSharePointFolderPath);
                            logErrorMsg(errMsg);
                        }
                    }
                    // Validate template file URL.
                    str templateFileUrl = this.sharePointFileUrl();
                    if (templateFileUrl != '')
                    {
                        if (!DocGlobalHelper::validateURL(templateFileUrl))
                        {
                            isValid = false;
                            errMsg = strFmt("@DocentricAX:SharePointTemplateFileUrlInvalid", templateFileUrl);
                            logErrorMsg(errMsg);
                        }
                    }
                    break;

                case DocTemplateStorageType::FileSystem:
                    if (this.StorageFileSystemFolderPath == '')
                    {
                        isValid = false;
                        errMsg = "@DocentricAX:FileSystemReportTemplateFolderNotSet";
                        logErrorMsg(errMsg);
                    }
                    if (this.StorageFileSystemFolderPath != '')
                    {
                        // Check if file path is a UNC path.
                        if (!DocFileMngHelper::isUncFilePath(this.StorageFileSystemFolderPath))
                        {
                            isValid = false;
                            errMsg = strFmt("@DocentricAX:DefaultFolderIsNotUncPath", this.StorageFileSystemFolderPath);
                            logErrorMsg(errMsg);
                        }
                        // Validate file path characters.
                        if (!DocFileMngHelper::isValidFilePath(this.StorageFileSystemFolderPath))
                        {
                            isValid = false;
                            errMsg = strFmt("@DocentricAX:DefaultFolderInvalidChars", this.StorageFileSystemFolderPath);
                            logErrorMsg(errMsg);
                        }
                    }
                    break;

                default:
                    DocGlobalHelper::handleException(funcName(), strFmt('Unsupported template storage type (%1)', this.CurrentStorageType));
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalResourceFilename</Name>
				<Source><![CDATA[
    public display DocOriginalResourceFilename originalResourceFilename()
    {
        str originalResourceFilename = '';

        if (this.OriginalStorageResourceName)
        {
            originalResourceFilename = DocReportingSetupHelper::getAotResourceFilename(this.OriginalStorageResourceName);
        }

        return originalResourceFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    public display DocReportTemplateFileName fileName()
    {
        str filename = '';

        switch (this.CurrentStorageType)
        {
            case DocTemplateStorageType::AOT:
                filename = this.FileNameAot;
                break;
            case DocTemplateStorageType::SharePoint:
                filename = this.FileNameSp;
                break;
            case DocTemplateStorageType::AzureBlobStorage:
                filename = this.FileNameAzure;
                break;
            case DocTemplateStorageType::FileSystem:
                filename = this.FileNameFs;
                break;
        }

        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFileAttached</Name>
				<Source><![CDATA[
    public display DocReportTemplateIsFileAttached isFileAttached()
    {
        boolean isFileAttached = this.fileName() != '';
        return isFileAttached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blobName</Name>
				<Source><![CDATA[
    public display DocReportTemplateBlobName blobName()
    {
        str blobName = '';
        DocReportTable reportTable = DocReportTable::find(this.Report);

        if (this.FileNameAzure)
        {
            blobName = reportTable.ReportId + DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter + this.FileNameAzure;
        }

        return blobName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>azureBlobStoragePath</Name>
				<Source><![CDATA[
    public display DocAzureStoragePath azureBlobStoragePath()
    {
        str azureStoragePath = '';
        
        if (this.CurrentStorageType != DocTemplateStorageType::AzureBlobStorage)
        {
            return '';
        }
        else
        {
            str containerName = this.StorageAzureContainer;
            str blobName = this.blobName();

            if (blobName && containerName)
            {
                azureStoragePath = containerName + DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter + blobName;
            }
        }

        return azureStoragePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>spFolderPath</Name>
				<Source><![CDATA[
    public display DocSharePointFolderPath spFolderPath()
    {
        if (this.CurrentStorageType != DocTemplateStorageType::SharePoint)
        {
            return '';
        }
        else
        {
            return this.StorageSharePointFolderPath;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sharePointSiteName</Name>
				<Source><![CDATA[
    public display DocSharePointSiteName sharePointSiteName()
    {
        str siteName = '';
        str siteUrl = this.StorageSharePointSiteUrl;

        if (siteUrl != '')
        {
            // Site url should end with '/'.
            if (!strEndsWith(siteUrl, DocConstantFile::UrlDelimiter))
            {
                siteUrl = siteUrl + DocConstantFile::UrlDelimiter;
            }
        
            siteName = DocSharePointHelperV3::getSharePointSiteNameFromUrl(siteUrl);
        }

        return siteName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>spSiteName</Name>
				<Source><![CDATA[
    public display DocSharePointSiteName spSiteName()
    {
        if (this.CurrentStorageType != DocTemplateStorageType::SharePoint)
        {
            return '';
        }
        else
        {
            return this.sharePointSiteName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sharePointHostName</Name>
				<Source><![CDATA[
    public DocSharePointHostName sharePointHostName()
    {
        str sharePointHostName = '';
        str siteUrl = this.StorageSharePointSiteUrl;

        if (siteUrl != '')
        {
            // Site url should end with '/'.
            if (!strEndsWith(siteUrl, DocConstantFile::UrlDelimiter))
            {
                siteUrl = siteUrl + DocConstantFile::UrlDelimiter;
            }
            
            sharePointHostName = DocSharePointHelperV3::getSharePointHostNameFromUrl(siteUrl);
        }

        return sharePointHostName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>spHostName</Name>
				<Source><![CDATA[
    public display DocSharePointHostName spHostName()
    {
        if (this.CurrentStorageType != DocTemplateStorageType::SharePoint)
        {
            return '';
        }
        else
        {
            return this.sharePointHostName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sharePointFileUrl</Name>
				<Source><![CDATA[
    public str sharePointFileUrl()
    {
        if (this.CurrentStorageType != DocTemplateStorageType::SharePoint)
        {
            return '';
        }
        else
        {
            if (this.StorageSharePointSiteUrl == '' || this.StorageSharePointFolderPath == '' ||
                this.FileNameSp == '')
            {
                return '';
            }

            str sharePointFileUrl = DocFileMngHelper::addUrlDelimiter(this.StorageSharePointSiteUrl) +
                                    DocFileMngHelper::addUrlDelimiter(this.StorageSharePointFolderPath) +
                                    this.FileNameSp;

            return sharePointFileUrl;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileSystemFullFilename</Name>
				<Source><![CDATA[
    public display DocFileSystemFullFilename fileSystemFullFilename()
    {
        if (this.CurrentStorageType != DocTemplateStorageType::FileSystem)
        {
            return '';
        }

        
        if (this.FileNameFs == '')
        {
            return '';
        }

        str filePath = this.StorageFileSystemFolderPath;
        if (filePath != '')
        {
            if (!strEndsWith(filePath, DocConstantFile::FilePathDelimiter))
            {
                filePath = filePath + DocConstantFile::FilePathDelimiter;
            }
        }
        if (filePath == DocConstantFile::FilePathDelimiter)
        {
            filePath = '';
        }

        if (filePath == '')
        {
            return '';
        }
        
        str fullFilename = filePath + this.FileNameFs;
        return fullFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizationLevel</Name>
				<Source><![CDATA[
    public display DocReportTemplateCustomizationLevel customizationLevel()
    {
        if (this.OriginalStorageType == DocTemplateStorageType::AOT &&
            this.CurrentStorageType == DocTemplateStorageType::AOT)
        {
            return DocReportTemplateCustomizationLevel::System;
        }

        if (this.OriginalStorageType == DocTemplateStorageType::AOT &&
            this.CurrentStorageType != DocTemplateStorageType::AOT)
        {
            return DocReportTemplateCustomizationLevel::CustomizedSystem;
        }

        if (this.OriginalStorageType != DocTemplateStorageType::AOT &&
            this.CurrentStorageType != DocTemplateStorageType::AOT)
        {
            return DocReportTemplateCustomizationLevel::Custom;
        }

        DocGlobalHelper::handleError('Inconsistent state of the Original and Current Storage Type', true, funcName());
        throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginallySystemTemplate</Name>
				<Source><![CDATA[
    public boolean isOriginallySystemTemplate()
    {
        if (this.OriginalStorageType == DocTemplateStorageType::AOT)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomTemplate</Name>
				<Source><![CDATA[
    public boolean isCustomTemplate()
    {
        if (this.OriginalStorageType != DocTemplateStorageType::AOT)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTemplateStorageFields</Name>
				<Source><![CDATA[
    public void initTemplateStorageFields()
    {
        DocParameters docParams = DocParameters::find();
        if (this.StorageSharePointSiteUrl == '' && this.StorageSharePointFolderPath == '')
        {
            this.StorageSharePointSiteUrl = docParams.ReportTemplateStorageSharePointSiteUrl;
            this.StorageSharePointFolderPath = docParams.ReportTemplateStorageSharePointFolderPath;
        }
        if (this.StorageAzureContainer == '')
        {
            this.StorageAzureContainer = docParams.ReportTemplateStorageAzureContainer;
        }
        if (this.StorageFileSystemFolderPath == '')
        {
            this.StorageFileSystemFolderPath = docParams.ReportTemplateStorageFileSystemFolderPath;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalTemplateStorage</Name>
				<Source><![CDATA[
    public void updateOriginalTemplateStorage()
    {
        if (this.CurrentStorageType == DocTemplateStorageType::AOT)
        {
            if (this.OriginalStorageType == DocTemplateStorageType::AOT)
            {
                this.updateStorageFields_AotResource(this.OriginalStorageResourceName);
            }
            else // if (this.OriginalStorageType != DocTemplateStorageType::AOT)
            {
                this.OriginalStorageType = DocTemplateStorageType::AOT;
                this.updateStorageFields_AotResource('');
            }
        }

        else // this.CurrentStorageType != DocTemplateStorageType::AOT
        {
            if (this.OriginalStorageType == DocTemplateStorageType::AOT)
            {
                if (this.OriginalStorageResourceName == '')
                {
                    this.OriginalStorageType = this.CurrentStorageType;
                }
            }
            else // if (this.OriginalStorageType != DocTemplateStorageType::AOT)
            {
                this.OriginalStorageType = this.CurrentStorageType;
                this.OriginalStorageResourceName = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateDataSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the DataSourceType field of the template.
    /// </summary>
    /// <param name = "_showError">Should error be shown</param>
    /// <returns>True, if the template's DataSourceType is updated; otherwise false.</returns>
    public boolean updateTemplateDataSourceType(boolean _showError = false)
    {
        boolean setNewDataSoureType(DocTemplateDataSourceType _newDsType)
        {
            if (this.DataSourceType != _newDsType)
            {
                this.DataSourceType = _newDsType;
                return true;
            }
            return false;
        }


        // If CBD feature is not enabled or the parent report is not of the SSRS type, return.
        if (!DocReportingSetupHelper::isTemplateDsTypeApplicable(this.Report))
        {
            return false;
        }

        boolean shouldUpdate = false;
        if (!this.isFileAttached())
        {
            shouldUpdate = setNewDataSoureType(DocTemplateDataSourceType::SSRS);
        }
        else
        {
            // Check the content of the attached file:
            // -- Turn off the infolog messaging.
            SysInfologLevel currentInfoLogLevel = infolog.infologLevel();
            if (!_showError)
            {
                infolog.setInfoLogLevel(SysInfologLevel::None);
            }

            // -- Try to fetch the template content as a memory stream in order to get DataSourceType.
            try
            {
                // If succeeded, set the DataSourceType to detected DataSourceType.
                // If failed, set the DataSourceType to SSRS.
                using (System.IO.MemoryStream templateContent = DocReportTemplate::getTemplateContent(this.TemplateId, this.CompanyId, this.LanguageId))
                {
                    if (templateContent != null && TemplateHelper::IsTemplateDocumentERBased(templateContent))
                    {
                        shouldUpdate = setNewDataSoureType(DocTemplateDataSourceType::ERDataModel);
                    }
                    else
                    {
                        shouldUpdate = setNewDataSoureType(DocTemplateDataSourceType::SSRS);
                    }
                }
            }
            catch
            {
                shouldUpdate = setNewDataSoureType(DocTemplateDataSourceType::SSRS);
                if (_showError)
                {
                    str templateIdMsg = this.TemplateId + (this.CompanyId ? ', ' + this.CompanyId : '') + (this.LanguageId ? ', ' + this.LanguageId : '');
                    DocGlobalHelper::handleError(strFmt("@DocentricAX3:DSTypeRecheckError", templateIdMsg));
                }
            }

            // --Revert the infolog messaging.
            if (!_showError)
            {
                infolog.setInfoLogLevel(currentInfoLogLevel);
            }
        }

        return shouldUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStorageFields_ResetAll</Name>
				<Source><![CDATA[
    public void updateStorageFields_ResetAll(boolean _includeSystemTemplateFields = true)
    {
        // Reset the template metadata.
        if (_includeSystemTemplateFields)
        {
            this.OriginalStorageType = DocTemplateStorageType::AOT;
            this.OriginalStorageResourceName = '';
            this.CurrentStorageType = DocTemplateStorageType::AOT;
        }

        // AOT Resource storage type.
        this.StorageResourceName = '';
        this.FileNameAot = '';

        // SharePoint storage type.
        this.FileNameSp = '';
        this.StorageSharePointFolderPath = '';
        this.StorageSharePointSiteUrl = '';
                        
        // Azure storage type.
        this.FileNameAzure = '';
        this.StorageAzureContainer = '';

        // Azure storage type.
        this.FileNameFs = '';
        this.StorageFileSystemFolderPath = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStorageFields_AotResource</Name>
				<Source><![CDATA[
    public void updateStorageFields_AotResource(str _resourceName)
    {
        str resourceFilename = '';
        if (_resourceName)
        {
            resourceFilename = DocReportingSetupHelper::getAotResourceFilename(_resourceName);
        }

        this.FileNameAot = resourceFilename;
        this.StorageResourceName = _resourceName;
        this.OriginalStorageResourceName = _resourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachTemplateFile</Name>
				<Source><![CDATA[
    public static void detachTemplateFile(RecId _templateRecId)
    {
        if (_templateRecId)
        {
            DocReportTemplate template = DocReportTemplate::find(_templateRecId, true);
            if (template)
            {
                template.updateStorageFields_ResetAll(false);
                template.OriginalStorageType = DocTemplateStorageType::AOT;
                template.CurrentStorageType = DocTemplateStorageType::AOT;
                
                // Update the DataSourceType field, if this field is applicable.
                template.updateTemplateDataSourceType(false);
                                
                // Update.
                ttsbegin;
                template.doUpdate();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplateFile_AzureBlobStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the template file from Azure Blob storage.
    /// </summary>
    /// <param name = "_templateRecId">Template RecId</param>
    /// <param name = "_suppressSuccessMsg">Should a success message be supressed</param>
    /// <param name = "_suppressFailureMsg">Should a failure message be supressed</param>
    /// <returns>True if the template file is successfully deleted, otherwise false</returns>
    public static boolean deleteTemplateFile_AzureBlobStorage(RecId _templateRecId, boolean _suppressSuccessMsg = false, boolean _suppressFailureMsg = false)
    {
        boolean deleted = false;
        DocReportTemplate template;

        if (_templateRecId)
        {
            template = DocReportTemplate::find(_templateRecId);
            if (template &&
                template.CurrentStorageType == DocTemplateStorageType::AzureBlobStorage &&
                template.StorageAzureContainer != '' &&
                template.FileNameAzure != '')
            {
                deleted = DocAzureBlobHelper::deleteBlob(template.StorageAzureContainer, template.blobName(), true, false);

                if (deleted && !_suppressSuccessMsg)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateFileDeletedSuccess", template.FileNameAzure, template.StorageAzureContainer, template.blobName()));
                }

                if (!deleted && !_suppressFailureMsg)
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateNotFoundOnAzure",
                                                 template.FileNameAzure, template.StorageAzureContainer, template.blobName()));
                }
            }
            else
            {
                if (!_suppressFailureMsg)
                {
                    if (template.RecId == 0)
                    {
                        DocGlobalHelper::handleException(funcName(), strFmt('Template with RecId (%1) cannot be found', _templateRecId));
                    }
                    else
                    {
                        DocGlobalHelper::handleException(funcName(), strFmt('Template with RecId (%1) does not have valid Azure storage settings', _templateRecId));
                    }
                }
            }
        }

        return deleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplateFile_FileSystem</Name>
				<Source><![CDATA[
    public static boolean deleteTemplateFile_FileSystem(RecId _templateRecId, boolean _suppressSuccessMsg = false, boolean _suppressFailureMsg = false)
    {
        boolean deleted = false;
        DocReportTemplate template;

        if (_templateRecId)
        {
            template = DocReportTemplate::find(_templateRecId);
            if (template &&
                template.CurrentStorageType == DocTemplateStorageType::FileSystem &&
                template.StorageFileSystemFolderPath != '' &&
                template.FileNameFs != '')
            {
                str templateFullFilename = template.fileSystemFullFilename();
                if (DocFileSystemMngHelper::fileExistsOnFileSystem(templateFullFilename))
                {
                    deleted = DocFileSystemMngHelper::deleteFileOnFileSystem(templateFullFilename, false);
                }
                
                if (deleted && !_suppressSuccessMsg)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateFileDeletedSuccessFs", template.FileNameFs, template.StorageFileSystemFolderPath));
                }

                if (!deleted && !_suppressFailureMsg)
                {
                    // Check if the file can be accessed at all.
                    if (DocFileSystemMngHelper::aosHaveReadPermissionForFile(templateFullFilename) == NoYesError::No)
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:ErrorNoPermissionForFileOnFileSystem", templateFullFilename));
                    }
                    else if (!DocFileSystemMngHelper::fileExistsOnFileSystem(templateFullFilename))
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:TemplateFileNotFoundOnFileSystem", template.FileNameFs, template.StorageFileSystemFolderPath));
                    }
                    else // The template file exists on file system but there is a problem with deletion.
                    {
                        // Try to delete the file again in order to get the real exception message.
                        DocFileSystemMngHelper::deleteFileOnFileSystem(template.fileSystemFullFilename(), true);
                        DocGlobalHelper::handleError(strFmt("@DocentricAX:FailedToDeleteFileOnFileSystem", template.FileNameFs, template.StorageFileSystemFolderPath));
                    }
                }
            }
            else
            {
                if (!_suppressFailureMsg)
                {
                    if (template.RecId == 0)
                    {
                        DocGlobalHelper::handleException(funcName(), strFmt('Template with RecId (%1) cannot be found', _templateRecId));
                    }
                    else
                    {
                        DocGlobalHelper::handleException(funcName(), strFmt('Template with RecId (%1) does not have valid File system storage settings', _templateRecId));
                    }
                }
            }
        }

        return deleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplate</Name>
				<Source><![CDATA[
    public static void deleteTemplate(DocDataSecurityManager _dataSecurityManager, RecId _templateRecId,
                                      boolean _deleteTemplateFileOnAzure = false, boolean _deleteTemplateFileOnFileSystem = false)
    {
        boolean deletedTemplateFileOnAzure = false;
        boolean deletedTemplateFileOnFileSystem = false;
        boolean shouldReallyDeleteTemplateFileOnAzure = false;
        boolean shouldReallyDeleteTemplateFileOnFileSystem = false;
        str templateId, containerName, blobName;
        

        if (_templateRecId)
        {
            DocReportTemplate template = DocReportTemplate::find(_templateRecId);
            templateId = template.TemplateId;

            if (template)
            {
                // Check data security.
                if (!_dataSecurityManager.checkDataSecurityConstraints(DocDataSecurityTemplateAction::Delete, DocReportTable::find(template.Report).ReportId,
                                                                       template.TemplateId, template.CompanyId, template.LanguageID, true))
                {
                    return;
                }

                // Delete the template file on Azure.
                if (_deleteTemplateFileOnAzure &&
                    template.CurrentStorageType == DocTemplateStorageType::AzureBlobStorage &&
                    template.FileNameAzure != '')
                {
                    shouldReallyDeleteTemplateFileOnAzure = true;
                    containerName = template.StorageAzureContainer;
                    blobName = template.blobName();
                    deletedTemplateFileOnAzure = DocAzureBlobHelper::deleteBlob(containerName, blobName, true, false);
                }

                // Delete the template file on File system.
                if (_deleteTemplateFileOnFileSystem &&
                    template.CurrentStorageType == DocTemplateStorageType::FileSystem &&
                    template.FileNameFs != '')
                {
                    shouldReallyDeleteTemplateFileOnFileSystem = true;
                    str fullFilename = template.fileSystemFullFilename();
                    if (DocFileSystemMngHelper::fileExistsOnFileSystem(fullFileName))
                    {
                        DocFileSystemMngHelper::deleteFileOnFileSystem(fullFileName);
                        deletedTemplateFileOnFileSystem = true;
                    }
                    else
                    {
                        deletedTemplateFileOnFileSystem = false;
                    }
                }

                // Delete the template.
                ttsbegin;
                template.selectForUpdate(true);
                template.delete();
                ttscommit;

                // Show the warning if deletion of the template file on Azure failed.
                if (shouldReallyDeleteTemplateFileOnAzure && !deletedTemplateFileOnAzure)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DeletionTemplateSuccededWithWarning", templateId, containerName, blobName));
                }

                // Show the warning if deletion of the template file on Azure failed.
                if (shouldReallyDeleteTemplateFileOnFileSystem && !deletedTemplateFileOnFileSystem)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DeletionTemplateSuccededWithWarningFs",
                                                   templateId, template.StorageFileSystemFolderPath, template.FileNameFs));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company Id. If company Id is empty 'DAT' value is returned.
    /// </summary>
    /// <returns>Company Id</returns>
    public CompanyId getCompanyId()
    {
        return this.CompanyId ? this.CompanyId : 'DAT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureAppearanceTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for template signature appearance.
    /// </summary>
    /// <returns>Signature appearance Id</returns>
    [SysClientCacheDataMethodAttribute]
    public display DocElectronicSignatureAppearanceId signatureAppearanceTemplate()
    {
        if (this.SignatureAppearanceOverride)
        {
            return this.SignatureAppearanceId;
        }
        // Check if at least one PDF signature setting exists for the report
        if (!DocReportPdfSignatureSettings::existForReport(this.Report))
        {
            return '';
        }
        // The template is company neutral, so we do not know which PDF signature setting will be used at runtime
        if (this.getCompanyId() == 'DAT')
        {
            return "@DocentricAX3:ReportTemplateSignatureAppearanceDefaultForRuntimeCompany";
        }
        return DocReportPdfSignatureSettings::findByReportAndCompany(this.Report, this.getCompanyId()).SignatureAppearanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureSettingsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for PDF signature settings status.
    /// </summary>
    /// <returns>PDF signature settings status</returns>
    [SysClientCacheDataMethodAttribute]
    public display DocReportPdfSignatureSettingsStatus signatureSettingsStatus()
    {
        // Check if at least one PDF signature setting exists for the report
        if (DocReportPdfSignatureSettings::existForReport(this.Report))
        {
            // The template is company neutral, so we do not know which PDF signature setting will be used at runtime
            if (this.getCompanyId() == 'DAT')
            {
                // Check if exists any enabled PDF signature setting for the report
                if (!DocReportPdfSignatureSettings::enabledForReport(this.Report))
                {
                    return DocReportPdfSignatureSettingsStatus::Disabled;
                }
                return DocReportPdfSignatureSettingsStatus::ResolvedAtRuntime;
            }

            DocReportPdfSignatureSettings reportPdfSignatureSettings = DocReportPdfSignatureSettings::findByReportAndCompany(this.Report, this.getCompanyId());
            if (reportPdfSignatureSettings)
            {
                return reportPdfSignatureSettings.IsEnabled ? DocReportPdfSignatureSettingsStatus::Enabled : DocReportPdfSignatureSettingsStatus::Disabled;
            }
        }
        return DocReportPdfSignatureSettingsStatus::NotSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureAppearanceDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for default signature appearance.
    /// </summary>
    /// <returns>Signature appearance Id</returns>
    [SysClientCacheDataMethodAttribute]
    public display DocElectronicSignatureAppearanceId signatureAppearanceDefault()
    {
        // Check if at least one PDF signature setting exists for the report
        if (!DocReportPdfSignatureSettings::existForReport(this.Report))
        {
            return '';
        }
        // The template is company neutral, so we do not know which PDF signature setting will be used at runtime
        if (this.getCompanyId() == 'DAT')
        {
            return "@DocentricAX3:ReportTemplateSignatureAppearanceDefaultForRuntimeCompany";
        }
        return DocReportPdfSignatureSettings::findByReportAndCompany(this.Report, this.getCompanyId()).SignatureAppearanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the value of the field is changed.
    /// </summary>
    /// <param name = "_fieldId">Field Id</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(DocReportTemplate, SignatureAppearanceOverride):
                if (!this.SignatureAppearanceOverride)
                {
                    this.SignatureAppearanceId = '';
                }
                break;
        }
           
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a report template preview as PDF.
    /// </summary>
    /// <param name = "_previewCompanyId">The company for certificate data</param>
    /// <param name = "_previewLanguageId">Desired preview language</param>
    public void createPreview(str _previewCompanyId, str _previewLanguageId)
    {
        XNamespace dspNamespace = DocConstantDSP::XmlDsPackageNamespaceUrl;            
        
        XElement getElement(XContainer _xmlContainer, str _elementName)
        {
            XElement ret = _xmlContainer.Element(dspNamespace.GetName(_elementName));
            DocGlobalHelper::assert(ret != null, strFmt('Extracted DDSP does not contain %1 element', _elementName));
            return ret;
        }
        ;
        
        try
        {
            DocReportingSetupHelper::recheckTemplateDataSourceType(this.RecId, false);
            DocReportTemplateLanguageId languageID = _previewLanguageId ? _previewLanguageId : Global::currentUserLanguage();
            DocReportTemplateCompanyId signatureCompanyId = _previewCompanyId ? _previewCompanyId : curext();

            System.IO.MemoryStream templateContent = DocReportTemplate::getTemplateContent(
                    this.TemplateId,
                    this.CompanyId,
                    languageID);

            // extract DDSP from template, change systemInfo\language and remove labels element
            XDocument xDocument = Docentric.AX.Reporting.ReportEngineHelper::ExtractSampleDataSource(templateContent);

            XElement xmlDsPackageRootElement  = getElement(xDocument, DocConstantDSP::XmlDsPackageRootElementName);
            XElement xmlSystemInfoRootElement = getElement(xmlDsPackageRootElement, DocConstantDSP::XmlSystemInfoRootElementName);
            xmlSystemInfoRootElement.Attribute(dspNamespace.GetName('language')).Value = languageID;

            // We will remove all label translations from the DDSP because we want to show the latest translations
            // if they changed in the meantime, which might happen especially for User-defined labels.
            // Otherwise, there is no need to remove them from DDSP since Report engine would fetch the missing translations at the runtime,
            // please see Dynamic labels: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
            // However, if this is an ER-based template, it might use GER labels which currently cannot act as Dynamic labels, but their translations need
            // to be collected either for all preview languages when generating design-time DDSP or for the runtime language when generating the report,
            // so we will not remove the label node for ER-based templates for the sake of basic preview.
            if (this.DataSourceType != DocTemplateDataSourceType::ERDataModel)
            {
                XElement xmlLabelsRootElement = getElement(xmlDsPackageRootElement, DocConstantDSP::XmlLabelsRootElementName);
                xmlLabelsRootElement.Remove();
            }

            // Filename: Preview_<TemplateID>_<CompanyID>_<LanguageID>.pdf
            // Example filename: 'Preview_Invoice_USFM_en-us.pdf'
            Filename filename = strFmt('%1', strLRTrim(this.TemplateId));
            if (_previewCompanyId)
            {
                filename += strFmt('_%1', strLRTrim(_previewCompanyId));
            }
            if (_previewLanguageId)
            {
                filename += strFmt('_%1', strLRTrim(_previewLanguageId));
            }
            filename += strFmt('.%1', DocConstantFile::FileExtPdf);

            SysGuidString newReportRunIdStr = guid2Str(newGuid());
            Docentric.AX.Documents.DocSaveOptions saveOptions = Docentric.AX.Documents.DocSaveOptions::SaveAsPdf();

            // Generate the report template
            DocentricEngine docentricEngine = new DocentricEngine();
            docentricEngine.renderingSettings().parmRenderingLanguageId(languageID);

            Docentric.AX.Reporting.DocumentGenerationResult documentGenerationResult = Docentric.AX.Reporting.ReportEngineHelper::GenerateDocument(
                    newReportRunIdStr,
                    templateContent.ToArray(),
                    xDocument.ToString(),
                    saveOptions,
                    docentricEngine);

            // Electronic signature certificate and appearance
            using (System.IO.MemoryStream templateMemoryStream = DocGlobalHelper::convertBytesToMemoryStream(documentGenerationResult.ResultAsGeneratedDocumentByteArray))
            {
                if (_previewCompanyId == '')
                {
                    DocFileMngHelper::sendFileToUser(templateMemoryStream, filename, DocConstantFile::MimeTypePdf, DocConstantFile::FileExtPdf, '', null, false, false, false);
                    return;
                }

                // Create PDF singature settings
                DocPdfSignatureSettings signatureSettings = DocPdfSignatureSettings::constructWithOverride(
                        this.Report,
                        this.TemplateId,
                        signatureCompanyId,
                        languageID,
                        true);

                // Sign the provided PDF document with PDF signature settings
                using (System.IO.MemoryStream signaturePreviewSignedStream = DocPdfSecurityManager::signDocument(templateMemoryStream, signatureSettings))
                {
                    DocFileMngHelper::sendFileToUser(signaturePreviewSignedStream, filename, DocConstantFile::MimeTypePdf, DocConstantFile::FileExtPdf, '', null, false, false, false);
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError(funcName(), "@DocentricAX4:ErrorWhilePreviewingTemplate");
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX4:ErrorWhilePreviewingTemplate");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:ReportTemplatesTableDesc</DeveloperDocumentation>
	<FormRef>DocReportTemplate</FormRef>
	<Label>@DocentricAX:ReportTemplates</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TemplateId</TitleField1>
	<TitleField2>CompanyId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>TemplateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileNameAot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNameAzure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNameSp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNameFs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalStorageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentStorageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tags</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageAzureContainer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageSharePointFolderPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageSharePointSiteUrl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageFileSystemFolderPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageResourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalStorageResourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataSourceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@DocentricAX:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNameAot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNameAzure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNameSp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNameFs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalStorageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tags</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageSharePointFolderPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageSharePointSiteUrl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalStorageResourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageResourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageAzureContainer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageFileSystemFolderPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataSourceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ListOverview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataSourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isFileAttached</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentStorageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customizationLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalStorageResourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>azureBlobStoragePath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>spHostName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>spSiteName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>spFolderPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fileSystemFullFilename</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>signatureSettingsStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>signatureAppearanceTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Report</Name>
			<Label>@DocentricAX:Report</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SignatureSettingsStatus</Name>
			<Label>@DocentricAX3:ReportTemplateSignatureSettingsStatusGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>signatureSettingsStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>signatureAppearanceDefault</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SignatureAppearanceOverride</Name>
			<Label>@DocentricAX3:ReportTemplateSignatureAppearanceOverrideGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceOverride</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>DocReportTemplateComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>DocReportTemplateCompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileNameAot</Name>
			<ExtendedDataType>DocReportTemplateFileName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileNameAzure</Name>
			<ExtendedDataType>DocReportTemplateFileName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileNameSp</Name>
			<ExtendedDataType>DocReportTemplateFileName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileNameFs</Name>
			<ExtendedDataType>DocReportTemplateFileName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefaultTemplate</Name>
			<ExtendedDataType>DocReportIsDefaultTemplate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnabled</Name>
			<ExtendedDataType>DocReportIsTemplateEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageID</Name>
			<ExtendedDataType>DocReportTemplateLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Report</Name>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateId</Name>
			<ExtendedDataType>DocReportTemplateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Title</Name>
			<ExtendedDataType>DocReportTemplateTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OriginalStorageType</Name>
			<Label>@DocentricAX:OriginalStorageType</Label>
			<EnumType>DocTemplateStorageType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrentStorageType</Name>
			<Label>@DocentricAX:CurrentStorageType</Label>
			<EnumType>DocTemplateStorageType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tags</Name>
			<ExtendedDataType>DocReportTemlateTags</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StorageAzureContainer</Name>
			<ExtendedDataType>DocAzureStorageContainerReportTemplates</ExtendedDataType>
			<HelpText>@DocentricAX:AzureContainerTemplateDesc</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StorageSharePointFolderPath</Name>
			<ExtendedDataType>DocSharePointFolderPath</ExtendedDataType>
			<HelpText>@DocentricAX:TemplateSpFolderPath</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StorageSharePointSiteUrl</Name>
			<ExtendedDataType>DocSharePointSiteUrl</ExtendedDataType>
			<HelpText>@DocentricAX:TemplateSpSiteUrl</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StorageFileSystemFolderPath</Name>
			<ExtendedDataType>DocFileSystemFolderPath</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StorageResourceName</Name>
			<ExtendedDataType>DocAotResourceName</ExtendedDataType>
			<HelpText>@DocentricAX:ResourceNameReportTemplate</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalStorageResourceName</Name>
			<ExtendedDataType>DocAotResourceName</ExtendedDataType>
			<HelpText>@DocentricAX:ResourceNameReportTemplate</HelpText>
			<Label>@DocentricAX:OriginalResourceName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataSourceType</Name>
			<EnumType>DocTemplateDataSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignatureAppearanceOverride</Name>
			<ExtendedDataType>DocReportTemplateSignatureAppearanceOverride</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SignatureAppearanceId</Name>
			<ExtendedDataType>DocElectronicSignatureAppearanceId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DocReportTemplate</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual</Name>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Report</Name>
					<Field>Report</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageID</Name>
					<SourceEDT>DocReportTemplateLanguageId</SourceEDT>
					<Field>LanguageID</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile</Name>
					<SourceEDT>DocReportTemplateLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocElectronicSignatureAppearance</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocElectronicSignatureAppearance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SignatureAppearanceId</Name>
					<Field>SignatureAppearanceId</Field>
					<RelatedField>SignatureAppearanceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AppearanceIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>