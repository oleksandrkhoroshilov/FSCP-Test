<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportLabel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportLabel extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>labelDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label description/comment for the label code stored in the LabelId field.
    /// </summary>
    /// <returns>The label description/comment for the label code stored in the LabelId field.</returns>
    public display DocLabelDescription labelDescription()
    {
        if (DocUserDefinedLabelHelper::isUserDefinedLabelId(this.LabelId))
        {
            // It's user-defined label.
            return DocUserDefinedLabelHelper::resolveUserDefinedLabelDescription(this.LabelId);
        }
        else
        {
            // It's D365FO label.
            return DocLabelHelper::resolveSysLabelDescription(this.LabelId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label value for the label code stored in the LabelId field.
    /// </summary>
    /// <returns>The label value for the label code stored in the LabelId field.</returns>
    public display DocLabelType labelType()
    {
        str labelType = '';
    
        if (this.LabelId)
        {
            DocDataSourceProviderLabelRepository docDSPLabelRepository = DocDataSourceProviderLabelRepository::construct(DocLabelResolutionStrategy::Default);
            labelType = docDSPLabelRepository.resolveDdspLabel(this.LabelId, this.languageId());
            if (labelType == this.LabelId)
            {
                labelType = '';
            }

            if (!labelType)
            {
                // No translation --> use the #TRANSLATION_MISSING# token.
                labelType = strFmt('%1 %2#', DocConstant::TranslationMissingPrefix, currentUserLanguage());
            }
        }
    
        return labelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for the current user language.
    /// </summary>
    /// <returns>Language Id</returns>
    public display LanguageId languageId()
    {
        return currentUserLanguage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current record before it is written to the table.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        setPrefix(DocConstant::Docentric);
    
        ret = true;
        if (this.LabelId)
        {
            // Check if the label ID is valid.
            if (!DocLabelHelper::isLabelId(this.LabelId))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:ProvidedValueIsNotValidLabelId", this.LabelId));
                ret = false;
            }
        }
    
        ret = super() && ret;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the custom labels in a map (labelId, labelName) for the given report.
    /// </summary>
    /// <param name="_labelMap">Custom label map.</param>
    /// <param name="_reportId">Report ID.</param>
    public static void fillCustomLabels(Map _labelMap, DocReportId _reportId)
    {
        DocReportLabel    reportLabel;
        RefRecId          reportRecId;
    
        if (_labelMap == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _labelMap is not set');
        }
    
        reportRecId = DocReportTable::findReportId(_reportId).RecId;
        if (reportRecId)
        {
            while select LabelId, LabelName from reportLabel
                  where reportLabel.Report == reportRecId
            {
                if (!_labelMap.exists(reportLabel.LabelId))
                {
                    _labelMap.insert(reportLabel.LabelId, reportLabel.LabelName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocReportLabel record by the given RecId.
    /// </summary>
    /// <param name="_reportLabelRecId">DocReportLabel record RecId.</param>
    /// <param name="_forUpdate">Should be the record selected for update.</param>
    /// <returns>The selected DocReportLabel record.</returns>
    public static DocReportLabel find(RecId _reportLabelRecId, boolean _forUpdate = false)
    {
        DocReportLabel  reportLabel;
    
        if (_reportLabelRecId)
        {
            reportLabel.selectForUpdate(_forUpdate);
    
            select firstonly reportLabel
            where reportLabel.RecId == _reportLabelRecId;
        }
    
        return reportLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocReportLabel record by the given report RecId and the label ID.
    /// </summary>
    /// <param name="_reportRecId">Report RecId.</param>
    /// <param name="_labelId">Label ID.</param>
    /// <param name="_forUpdate">Should be the record selected for update.</param>
    /// <returns>The selected DocReportLabel record.</returns>
    public static DocReportLabel findReportLabel(DocReportTableRecId _reportRecId, LabelId _labelId, boolean _forUpdate = false)
    {
        DocReportLabel  reportLabel;
    
        if (_reportRecId && _labelId)
        {
            reportLabel.selectForUpdate(_forUpdate);
    
            select firstonly reportLabel
            where reportLabel.Report == _reportRecId &&
                  reportLabel.LabelId == _labelId;
        }
    
        return reportLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the provided new report custom label.
    /// </summary>
    /// <param name="_reportRecId">Report RecId.</param>
    /// <param name="_labelId">Label ID.</param>
    /// <param name="_labelName">Label name.</param>
    /// <returns>RecId of the new record if the label is successfully inserted to the DocReportLabel table. Otherwise returns 0.</returns>
    public server static RecId insertLabel(DocReportTableRecId _reportRecId, LabelId _labelId, str _labelName)
    {
        DocReportLabel reportLabel;
    
        if (!_reportRecId)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportRecId is not provided');
        }
    
        reportLabel.clear();
        reportLabel.Report = _reportRecId;
        reportLabel.LabelId = _labelId;
        reportLabel.LabelName = _labelName;
        if (reportLabel.validateWrite())
        {
            ttsBegin;
            reportLabel.insert();
            ttsCommit;
    
            return reportLabel.RecId;
        }
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated the given report custom label with the new label ID and/or label name.
    /// </summary>
    /// <param name="_reportLabelRecId">Report custom label RecId.</param>
    /// <param name="_newLabelId">The new label ID.</param>
    /// <param name="_newLabelName">The new label name.</param>
    /// <returns>True if the label is successfully updated. Otherwise returns false.</returns>
    public server static boolean updateLabel(RecId _reportLabelRecId, LabelId _newLabelId, str _newLabelName)
    {
        DocReportLabel reportLabel;
    
        if (!_reportLabelRecId)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportLabelRecId is not provided');
        }
    
        reportLabel = DocReportLabel::find(_reportLabelRecId, true);
        if (reportLabel)
        {
            reportLabel.LabelId = _newLabelId;
            reportLabel.LabelName = _newLabelName;
            if (reportLabel.validateWrite())
            {
                ttsBegin;
                reportLabel.update();
                ttsCommit;
    
                return true;
            }
        }
        else
        {
            DocGlobalHelper::handleWarning("@DocentricAX:UpdatingLabelNotExist");
        }
    
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:ReportLabelsTableDesc</DeveloperDocumentation>
	<FormRef>DocReportTable</FormRef>
	<Label>@DocentricAX:ReportCustomLabels</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Report</TitleField1>
	<TitleField2>LabelName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ReplacementKey>ReportLabelNamex</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LabelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>labelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>labelDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>languageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DisplayFields</Name>
			<Label>@DocentricAX:DisplayFields</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LabelName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LabelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>labelType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UtilityFields</Name>
			<Label>@DocentricAX:UtilityFields</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LabelId</Name>
			<ExtendedDataType>DocReportLabelId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LabelName</Name>
			<ExtendedDataType>DocReportLabelName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Report</Name>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportLabelIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Report</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LabelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReportLabelNamex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Report</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LabelName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Report</Name>
					<Field>Report</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>