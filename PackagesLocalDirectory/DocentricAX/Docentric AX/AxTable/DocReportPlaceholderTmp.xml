<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportPlaceholderTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportPlaceholderTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillStandardPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a DocReportPlaceholderTmp table buffer with standard placeholders.
    /// Standard placeholders are common for all reports, regardless of whether
    /// the report is registered and active in Docentric report setup.
    /// </summary>
    /// <param name = "_reportPlaceholderTmp">A DocReportPlaceholderTmp table buffer</param>
    /// <param name = "_reportId">Report Id</param>
    public static void fillStandardPlaceholders(DocReportPlaceholderTmp _reportPlaceholderTmp, DocReportId _reportId = DocConstantPlaceholder::PlaceholderListAllReports)
    {
        DocPlaceholderAttHtmlEditorHelper stdPlaceholderHelper = new DocPlaceholderAttHtmlEditorHelper();
        Map stdPlaceholderMap;
        MapEnumerator enumStdPlaceholderMap;

        // Get standard placeholders - common to all reports
        stdPlaceholderHelper.collectAttributesForClass(classStr(DocDataSourceProviderReportingBase));
        stdPlaceholderMap = stdPlaceholderHelper.getPlaceholderMap();
        enumStdPlaceholderMap = stdPlaceholderMap.getEnumerator();

        // Inserting standard placeholders
        while(enumStdPlaceholderMap.moveNext())
        {
            DocPlaceholderAttribute placeholderAttr = stdPlaceholderMap.lookup(enumStdPlaceholderMap.currentKey());

            _reportPlaceholderTmp.clear();
            _reportPlaceholderTmp.ReportId = _reportId;
            _reportPlaceholderTmp.ReportDescription = '';
            _reportPlaceholderTmp.DataSourceProviderClassName = "@DocentricAX2:DefaultDspClass";
            
            _reportPlaceholderTmp.PlaceholderName = enumStdPlaceholderMap.currentKey();
            _reportPlaceholderTmp.PlaceholderDesc = placeholderAttr.friendlyName();
            _reportPlaceholderTmp.IsStandard = true;

            if (placeholderAttr is DocPlaceholderImageAttribute)
            {
                _reportPlaceholderTmp.IsImage = true;
            }
            else
            {
                _reportPlaceholderTmp.IsImage = false;
            }

            _reportPlaceholderTmp.insert();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustomPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a DocReportPlaceholderTmp table buffer with custom placeholders.
    /// regardless of whether the report is active or not (the IsActiveSRS field).
    /// </summary>
    /// <param name = "_reportPlaceholderTmp">A DocReportPlaceholderTmp table buffer</param>
    /// <param name = "_report">A DocReportTable table buffer</param>
    public static void fillCustomPlaceholders(DocReportPlaceholderTmp _reportPlaceholderTmp, DocReportTable _report)
    {
        Map placeholderMap;
        MapEnumerator enumplaceholderMap;
        str reportGroupDesc = '';

        DocGlobalHelper::assert(_report != null);
        
        DocPlaceholderAttHtmlEditorHelper attHelper = new DocPlaceholderAttHtmlEditorHelper();
        attHelper.collectAttributes(_report.ReportId);
        placeholderMap = attHelper.getPlaceholderMap();
        enumPlaceholderMap = placeholderMap.getEnumerator();

        if (_report.ReportGroup)
        {
            reportGroupDesc = DocReportGroup::find(_report.ReportGroup).GroupId;
        }

        // For a custom DSP class we read only its placeholders which are not marked as standard
        while (enumPlaceholderMap.moveNext())
        {
            // Inserting custom placeholders
            DocPlaceholderAttribute placeholderAttr = placeholderMap.lookup(enumPlaceholderMap.currentKey());

            if (!placeholderAttr.isStandardPlaceholder())
            {
                _reportPlaceholderTmp.clear();
                
                _reportPlaceholderTmp.ReportId = _report.ReportId;
                _reportPlaceholderTmp.ReportDescription = _report.ReportDescription;
                _reportPlaceholderTmp.DataSourceProviderClassName = placeholderAttr.sourceDspClass();
                _reportPlaceholderTmp.ReportGroupId = reportGroupDesc;

                _reportPlaceholderTmp.PlaceholderName = placeholderAttr.code();
                _reportPlaceholderTmp.PlaceholderDesc = placeholderAttr.friendlyName();
                _reportPlaceholderTmp.PlaceholderGroupId = placeholderAttr.group() ? DocReportPlaceholderGroup::findOrInsert(placeholderAttr.group()).GroupId : '';
                _reportPlaceholderTmp.IsCustom = true;

                if (placeholderAttr is DocPlaceholderImageAttribute)
                {
                    _reportPlaceholderTmp.IsImage = true;
                }

                _reportPlaceholderTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillUserDefinedPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a DocReportPlaceholderTmp table buffer with user defined placeholders for the provided report,
    /// regardless of whether the report is active or not (the IsActiveSRS field).
    /// </summary>
    /// <param name = "_reportPlaceholderTmp">A DocReportPlaceholderTmp table buffer</param>
    /// <param name = "_report">A DocReportTable table buffer</param>
    public static void fillUserDefinedPlaceholders(DocReportPlaceholderTmp _reportPlaceholderTmp, DocReportTable _report)
    {
        str reportGroupId = '';

        DocGlobalHelper::assert(_report != null);

        if (_report.ReportGroup)
        {
            reportGroupId = DocReportGroup::find(_report.ReportGroup).GroupId;
        }

        // Inserting user-defined placeholders
        DocReportUserDefinedPlaceholder userDefinedPlaceholder;
        DocReportPlaceholderGroup placeholderGroup;

        while select userDefinedPlaceholder where userDefinedPlaceholder.Report == _report.RecId && userDefinedPlaceholder.Enabled
            outer join placeholderGroup where placeholderGroup.RecId == userDefinedPlaceholder.PlaceholderGroup
        {
            _reportPlaceholderTmp.clear();
                
            _reportPlaceholderTmp.ReportId = _report.ReportId;
            _reportPlaceholderTmp.ReportDescription = _report.ReportDescription;
            //_reportPlaceholderTmp.DataSourceProviderClassName = _report.DataSourceProviderClassName;
            _reportPlaceholderTmp.ReportGroupId = reportGroupId;

            _reportPlaceholderTmp.PlaceholderName = userDefinedPlaceholder.PlaceholderName;
            _reportPlaceholderTmp.PlaceholderDesc = userDefinedPlaceholder.PlaceholderDesc;
            _reportPlaceholderTmp.PlaceholderGroupId = placeholderGroup.GroupId;
            _reportPlaceholderTmp.IsUserDefined = true;

            _reportPlaceholderTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportSpecificPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a DocReportPlaceholderTmp table buffer with report specific placeholders for the provided report or Print management document type.
    /// If a report is not registered in Docentric report setup, or if it is but it's inactive (the IsActiveSRS field set to false), 
    /// no report specific placeholders will be retrieved.
    /// Report specific placeholders are both Custom placeholders and User-defined placeholders.
    /// </summary>
    /// <param name = "_reportPlaceholderTmp">A DocReportPlaceholderTmp table buffer</param>
    /// <param name = "_reportId">Report Id</param>
    /// <param name = "_reportType">Print management document type</param>
    /// <param name = "_reportTypeProvided">Is report type provided</param>
    public static void fillReportSpecificPlaceholders(
        DocReportPlaceholderTmp _reportPlaceholderTmp,
        str _reportId,
        PrintMgmtDocumentType _reportType = PrintMgmtDocumentType::BankCheque,
        boolean _reportTypeProvided = false)
    {
        if (_reportId)
        {
            // Find the report in Docentric report setup if it is Active.
            // Note that the report can exists in Docentric report setup but will not be found if the IsActiveSRS field is set to false.
            DocReportTable activeReport = DocReportTable::findActiveReport(_reportId);

            // Collect report specific placeholders: Custom and User-defined placeholders.
            if (activeReport)
            {
                DocReportPlaceholderTmp::fillCustomPlaceholders(_reportPlaceholderTmp, activeReport);
                DocReportPlaceholderTmp::fillUserDefinedPlaceholders(_reportPlaceholderTmp, activeReport);
            }
        }
        else if (_reportTypeProvided)
        {
            // Find all reports that belongs to the provided Print management document type
            // and for each of them which is active, collect the report specific placeholders.
            container reportRecIDs = DocReportTypeHelper::getReportsForType(_reportType);
            for (int i = 1; i <= conLen(reportRecIDs); i++)
            {
                RecId reportRecId = conPeek(reportRecIDs, i);
                DocReportTable report = DocReportTable::find(reportRecId);

                // Fill report specific placeholders only if the report is registered and activated in Docentric report setup.
                if (report && report.IsActiveSRS)
                {
                    DocReportPlaceholderTmp::fillReportSpecificPlaceholders(_reportPlaceholderTmp, report.ReportId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAllPlaceholders</Name>
				<Source><![CDATA[
    public static void fillAllPlaceholders(DocReportPlaceholderTmp _reportPlaceholderTmp)
    {
        DocReportTable reportTable;

        while select ReportId from reportTable
        {
            DocReportPlaceholderTmp::fillReportSpecificPlaceholders(_reportPlaceholderTmp, reportTable.ReportId, PrintMgmtDocumentType::BankCheque, false);
        }

        DocReportPlaceholderTmp::fillStandardPlaceholders(_reportPlaceholderTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportAttachmentsPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a DocReportPlaceholderTmp table buffer with report attachment placeholders.
    /// </summary>
    /// <param name = "_reportPlaceholderTmp">A DocReportPlaceholderTmp table buffer</param>
    public static void fillReportAttachmentsPlaceholders(DocReportPlaceholderTmp _reportPlaceholderTmp)
    {
        _reportPlaceholderTmp.clear();
        _reportPlaceholderTmp.DataSourceProviderClassName = "@DocentricAX2:DefaultDspClass";
        _reportPlaceholderTmp.PlaceholderName = DocConstant::ReportAttachmentOrigDescPlaceholder;
        _reportPlaceholderTmp.PlaceholderDesc = "@DocentricAX2:OriginalAttachmentDescription";
        _reportPlaceholderTmp.insert();

        _reportPlaceholderTmp.clear();
        _reportPlaceholderTmp.DataSourceProviderClassName = "@DocentricAX2:DefaultDspClass";
        _reportPlaceholderTmp.PlaceholderName = DocConstant::ReportAttachmentOrigFilenamePlaceholder;
        _reportPlaceholderTmp.PlaceholderDesc = "@DocentricAX2:OriginalAttachmentFilename";
        _reportPlaceholderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlaceholdersWithStartEndSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a placeholder name with palceholder start and end symbol.
    /// </summary>
    /// <param name = "_reportPlaceholderTmp">A DocReportPlaceholderTmp table buffer</param>
    public static void updatePlaceholdersWithStartEndSymbol(DocReportPlaceholderTmp _reportPlaceholderTmp)
    {
        DocReportPlaceholderTmp docReportPlaceholderTmp;

        docReportPlaceholderTmp.setTmpData(_reportPlaceholderTmp);

        update_recordset docReportPlaceholderTmp
            setting PlaceholderName = DocConstantPlaceholder::PlaceholderStartSymbol + docReportPlaceholderTmp.PlaceholderName + DocConstantPlaceholder::PlaceholderEndSymbol;

        _reportPlaceholderTmp.setTmpData(docReportPlaceholderTmp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@DocentricAX2:PlaceholderList</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ReportId</TitleField1>
	<TitleField2>PlaceholderName</TitleField2>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlaceholderName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocPlaceholderName</ExtendedDataType>
			<HelpText>@DocentricAX2:PlaceholderNameHelp</HelpText>
			<Label>@DocentricAX2:PlaceholderName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlaceholderDesc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocPlaceholderDescription</ExtendedDataType>
			<Label>@DocentricAX2:PlaceholderDescription</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlaceholderGroupId</Name>
			<ExtendedDataType>DocReportPlaceholderGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsStandard</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@DocentricAX2:IsStandardPlaceholder</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCustom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@DocentricAX2:IsCustomPlaceholder</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsImage</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@DocentricAX2:IsImagePlaceholder</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsUserDefined</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@DocentricAX3:IsUserDefined</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataSourceProviderClassName</Name>
			<ExtendedDataType>DocDataSourceProviderClassName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportGroupId</Name>
			<ExtendedDataType>DocReportGroupId</ExtendedDataType>
			<Label>@DocentricAX2:ReportGroup</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportPlaceholderGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DocReportPlaceholderGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlaceholderGroupId</Name>
					<Field>PlaceholderGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DocReportGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReportGroupId</Name>
					<Field>ReportGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>