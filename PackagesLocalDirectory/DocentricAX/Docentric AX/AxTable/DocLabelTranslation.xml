<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLabelTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocLabelTranslation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocLabelTranslation table.
    /// </summary>
    /// <param name = "_recId">Record Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocLabelTranslation table; otherwise, an empty record</returns>
    public static DocLabelTranslation find(RecId _recId, boolean _forUpdate = false)
    {
        DocLabelTranslation labelTranslation;

        labelTranslation.selectForUpdate(_forUpdate);
        
        if (_recId)
        {
            select firstonly labelTranslation where labelTranslation.RecId == _recId;
        }
        
        return labelTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLabelAndLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocLabelTranslation table for specified label Id and language.
    /// </summary>
    /// <param name = "_labelId">Label Id</param>
    /// <param name = "_languageId">Language Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocLabelTranslation table; otherwise, an empty record</returns>
    public static DocLabelTranslation findByLabelAndLanguage(LabelId _labelId, LanguageIdAll _languageId, boolean _forUpdate = false)
    {
        DocLabelTranslation labelTranslation;

        labelTranslation.selectForUpdate(_forUpdate);

        if (_labelId && _languageId)
        {
            select firstonly labelTranslation
                where labelTranslation.GlobalLabelId == _labelId
                    && labelTranslation.LanguageId == _languageId;
        }
        
        return labelTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfTranslationsForLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of translation records for the given label. Note that also the
    /// translation records with empty translations will be considered.
    /// </summary>
    /// <param name = "_labelId">Label ID for which we need the number of translation records.</param>
    /// <returns>Number of translation records for the provided label</returns>
    public static int getNumberOfTranslationsForLabel(LabelId _labelId)
    {
        DocLabelTranslation labelTranslation;
        DocLabelTable labelTable;

        select count(RecId) from labelTranslation
            exists join labelTable
                where labelTable.GlobalLabelId == labelTranslation.GlobalLabelId
                    && labelTable.LabelId == _labelId;

        return int642int(labelTranslation.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfTranslationsForLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of translation records for the given language. Note that also
    /// the translation records with empty translations will be considered.
    /// </summary>
    /// <param name = "_languageId">Language for which we need the number of translation records.</param>
    /// <returns>Number of translation records for the provided language</returns>
    public static int getNumberOfTranslationsForLanguage(LanguageIdAll _languageId)
    {
        DocLabelTranslation labelTranslation;

        select count(RecId) from labelTranslation where labelTranslation.LanguageId == _languageId;

        return int642int(labelTranslation.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addForMissingLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the translation records for the given label and for all the languages
    /// for which the translation record doesn't already exist. 
    /// </summary>
    /// <param name = "_labelId">LabelId for which the missing translation records should be added</param>
    /// <param name = "_description">Description to be used for the newly added translation records</param>
    /// <returns>Container with number of added translation records and RecId
    /// of the first added record, in case the caller form wants to be positioned to it.</returns>
    public static container addForMissingLanguages(LabelId _labelId, DocLabelDescription _description = '')
    {
        DocLabelTranslation labelTranslation, labelTranslationNew, labelTranslationFirst;
        DocLabelLanguage labelLanguage;
        
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(DocLabelTranslation));
        recordSortedList.sortOrder(fieldNum(DocLabelTranslation, LanguageId));

        try
        {
            ttsbegin;

            DocReportLabelId globalLabelId = DocConstantDSP::DOC_LABEL_PREFIX + _labelId;

            // Loop through all languages for which there is no translation record
            // for the given label. Prepare the records and add them to the RecordSortedList.
            // We can't use insert_recordset because we want to return the first inserted record,
            // so that the caller form can be positioned to it.
            while select LanguageId from labelLanguage
                order by labelLanguage.LineNum
                notexists join labelTranslation
                    where labelTranslation.LanguageId == labelLanguage.LanguageId
                       && labelTranslation.GlobalLabelId == globalLabelId
            {
                labelTranslationNew.clear();

                labelTranslationNew.GlobalLabelId = globalLabelId;
                labelTranslationNew.LanguageId = labelLanguage.LanguageId;
                labelTranslationNew.Description = _description;

                recordSortedList.ins(labelTranslationNew);
                
                // Set the first inserted record
                if (!labelTranslationFirst.GlobalLabelId)
                {
                    labelTranslationFirst = labelTranslationNew.data();
                }
            }

            // Insert all the prepared records into the translation table
            recordSortedList.insertDatabase();
            // Find the first inserted record in the translation table. System fields (e.g. RecId) are assigned after the insertDatabase method call.
            if (recordSortedList.len() > 0)
            {
                recordSortedList.find(labelTranslationFirst);
            }

            ttscommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:ErrorAddingTranslationsForAllLanguages", _labelId));
        }

        return [recordSortedList.len(), labelTranslationFirst.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addForSysLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the translation records for the given system labelId and for all the languages
    /// for which the translation record doesn't already exist.
    /// </summary>
    /// <param name = "_systemLabelId">System labelId for which the missing translation records should be added</param>
    /// <param name = "_userDefinedLabelId">User-defined labelId</param>
    /// <returns>Container with number of added translation records and RecId of the 
    /// first added record, in case the caller form wants to be positioned to it.</returns>
    public static container addForSysLabel(str _systemLabelId, str _userDefinedLabelId)
    {
        DocLabelTranslation labelTranslation, labelTranslationNew, labelTranslationFirst;
        DocLabelLanguage labelLanguage;

        DocDataSourceProviderLabelRepository docDSPLabelRep = DocDataSourceProviderLabelRepository::construct(DocLabelResolutionStrategy::Default);

        RecordSortedList recordSortedList = new RecordSortedList(tableNum(DocLabelTranslation));
        recordSortedList.sortOrder(fieldNum(DocLabelTranslation, LanguageId));

        try
        {
            ttsbegin;

            DocReportLabelId globalLabelId = DocConstantDSP::DOC_LABEL_PREFIX + _userDefinedLabelId;
            
            // Prepare the records and add them to the RecordSortedList.
            // We can't use insert_recordset because we want to return the first inserted record,
            // so that the caller form can be positioned to it.
            while select LanguageId from labelLanguage
                order by labelLanguage.LineNum
                notexists join labelTranslation
                    where labelTranslation.LanguageId == labelLanguage.LanguageId
                       && labelTranslation.GlobalLabelId == globalLabelId
            {
                labelTranslationNew.clear();

                labelTranslationNew.GlobalLabelId = globalLabelId;
                labelTranslationNew.LanguageId = labelLanguage.LanguageId;
                labelTranslationNew.Translation = docDSPLabelRep.tryResolveD365FOLabel(_systemLabelId, labelLanguage.LanguageId);

                recordSortedList.ins(labelTranslationNew);

                // Set the first inserted record
                if (!labelTranslationFirst.GlobalLabelId)
                {
                    labelTranslationFirst = labelTranslationNew.data();
                }
            }

            // Insert all the prepared records into the translation table
            recordSortedList.insertDatabase();
            // Find the first inserted record in the translation table. System fields (e.g. RecId) are assigned after the insertDatabase method call.
            if (recordSortedList.len() > 0)
            {
                recordSortedList.find(labelTranslationFirst);
            }

            ttscommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ErrorAddingTranslationsForSysLabel", _systemLabelId));
        }

        return [recordSortedList.len(), labelTranslationFirst.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForSysLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the translation records for the given system labelId and for all the languages
    /// for which the translation record already exist.
    /// </summary>
    /// <param name = "_systemLabelId">System label Id</param>
    /// <param name = "_userDefinedLabelId">User-defined label Id</param>
    /// <returns>Container with number of updated translation records and RecId of the
    /// first updated record, in case the caller form wants to be positioned to it.</returns>
    public static container updateForSysLabel(str _systemLabelId, str _userDefinedLabelId)
    {
        DocLabelTranslation labelTranslation, labelTranslationFirst;
        DocLabelLanguage labelLanguage;
        int numUpdated = 0;
        boolean isFirstRecord = true;

        DocDataSourceProviderLabelRepository docDSPLabelRep = DocDataSourceProviderLabelRepository::construct(DocLabelResolutionStrategy::Default);

        try
        {
            ttsbegin;

            DocReportLabelId globalLabelId = DocConstantDSP::DOC_LABEL_PREFIX + _userDefinedLabelId;

            while select forupdate labelTranslation
                where labelTranslation.GlobalLabelId == globalLabelId
                exists join labelLanguage
                    order by labelLanguage.LineNum
                    where labelLanguage.LanguageId == labelTranslation.LanguageId
            {
                labelTranslation.Translation = docDSPLabelRep.tryResolveD365FOLabel(_systemLabelId, labelTranslation.LanguageId);
                labelTranslation.update();

                numUpdated++;

                // Set the first updated record
                if (isFirstRecord)
                {
                    labelTranslationFirst = labelTranslation.data();
                    isFirstRecord = false;
                }
            }

            ttscommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:ErrorUpdatingTranslationsForSysLabel", _systemLabelId));
        }

        return [numUpdated, labelTranslationFirst.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addForLabelAndLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new translation record for the given label and language.
    /// </summary>
    /// <param name = "_labelId">LabelId for which the new translation should be added</param>
    /// <param name = "_languageId">Language for which the new translation should be added</param>
    /// <param name = "_description">Description to be used for the new translation record</param>
    /// <param name = "_systemLabelId">System labelId</param>
    /// <returns>RecordId of the created translation record</returns>
    public static RecId addForLabelAndLanguage(LabelId _labelId, LanguageIdAll _languageId, DocLabelDescription _description = '', str _systemLabelId = '')
    {
        DocReportLabelId globalLabelId = DocConstantDSP::DOC_LABEL_PREFIX + _labelId;

        if (DocLabelTranslation::findByLabelAndLanguage(globalLabelId, _languageId))
        {
            return 0;
        }

        DocLabelTranslation labelTranslation;
        DocDataSourceProviderLabelRepository docDSPLabelRep = DocDataSourceProviderLabelRepository::construct(DocLabelResolutionStrategy::Default);

        try
        {
            ttsbegin;

            labelTranslation.clear();
                
            labelTranslation.GlobalLabelId = globalLabelId;
            labelTranslation.LanguageId = _languageId;
            labelTranslation.Description = _description;

            if (_systemLabelId != '')
            {
                labelTranslation.Translation = docDSPLabelRep.tryResolveD365FOLabel(_systemLabelId, _languageId);
            }

            labelTranslation.insert();

            ttscommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:ErrorAddingTranslationForLanguage", _labelId, _languageId));
        }

        return labelTranslation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addForNextLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new translation record for the given label and the first non-translated language
    /// (based on the language order).
    /// </summary>
    /// <param name = "_labelId">LabelId for which the new translation should be added</param>
    /// <param name = "_description">Description to be used for the new translation record</param>
    /// <returns>RecordId of the created translation record</returns>
    public static RecId addForNextLanguage(LabelId _labelId, DocLabelDescription _description)
    {
        // Are there any languages at this moment?
        if (!DocLabelLanguage::getFirstLanguageId())
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:NoLabelLanguageDefined");
            return 0;
        }

        DocReportLabelId globalLabelId = DocConstantDSP::DOC_LABEL_PREFIX + _labelId;

        // Is there non-translated language?
        // We check all languages which are not used for the current label
        // and use the first from the list, based on the language order.
        DocLabelTranslation labelTranslation;
        DocLabelLanguage labelLanguage;
        select firstonly LanguageId from labelLanguage
            order by labelLanguage.LineNum
            notexists join labelTranslation
                where labelTranslation.LanguageId == labelLanguage.LanguageId
                   && labelTranslation.GlobalLabelId == globalLabelId;
        if (!labelLanguage)
        {
            DocGlobalHelper::handleWarning("@DocentricAX3:NoNextLanguage");
            return 0;
        }

        try
        {
            ttsbegin;

            labelTranslation.clear();
                
            labelTranslation.GlobalLabelId = globalLabelId;
            labelTranslation.LanguageId = labelLanguage.LanguageId;
            labelTranslation.Description = _description;

            labelTranslation.insert();

            ttscommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:ErrorAddingLabelForNextLanguage", _labelId));
        }

        return labelTranslation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addForMissingLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the translation records for the given language and for all the labels
    /// for which the translation record doesn't already exist. 
    /// </summary>
    /// <param name = "_languageId">Language for which the missing translation records should be added</param>
    /// <param name = "_description">Description to be used for the newly added translation records</param>
    /// <returns>Container with number of added translation records and RecId
    /// of the first added record, in case the caller form wants to be positioned to it.</returns>
    public static container addForMissingLabels(LanguageIdAll _languageId, Description _description = '')
    {
        DocLabelTranslation labelTranslation, labelTranslationNew, labelTranslationFirst;
        DocLabelTable labelTable;
        
        DocDataSourceProviderLabelRepository docDSPLabelRep = DocDataSourceProviderLabelRepository::construct(DocLabelResolutionStrategy::Default);

        RecordSortedList recordSortedList = new RecordSortedList(tableNum(DocLabelTranslation));
        recordSortedList.sortOrder(fieldNum(DocLabelTranslation, GlobalLabelId));

        try
        {
            ttsbegin;

            while select GlobalLabelId, BasedOnSysLabelId from labelTable
                notexists join labelTranslation
                    where labelTranslation.GlobalLabelId == labelTable.GlobalLabelId
                       && labelTranslation.LanguageId == _languageId
            {
                labelTranslationNew.clear();
                
                labelTranslationNew.GlobalLabelId = labelTable.GlobalLabelId;
                labelTranslationNew.LanguageId = _languageId;
                labelTranslationNew.Description = _description;

                if (labelTable.BasedOnSysLabelId != '')
                {
                    labelTranslationNew.Translation = docDSPLabelRep.tryResolveD365FOLabel(labelTable.BasedOnSysLabelId, _languageId);
                }

                recordSortedList.ins(labelTranslationNew);

                // Set the first inserted record
                if (!labelTranslationFirst.GlobalLabelId)
                {
                    labelTranslationFirst = labelTranslationNew.data();
                }
            }

            // Insert all the prepared records into the translation table
            recordSortedList.insertDatabase();
            // Find the first inserted record in the translation table. System fields (e.g. RecId) are assigned after the insertDatabase method call.
            if (recordSortedList.len() > 0)
            {
                recordSortedList.find(labelTranslationFirst);
            }

            ttscommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:ErrorAddingTranslationsForMissingLabels", _languageId));
        }

        return [recordSortedList.len(), labelTranslationFirst.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForLabelAndLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the translation record for the given label and language.
    /// </summary>
    /// <param name = "_labelId">LabelId for which the translation should be deleted.</param>
    /// <param name = "_languageId">Language for which the translation should be deleted.</param>
    /// <returns>Number of deleted records (can be 0 or 1)</returns>
    public static int deleteForLabelAndLanguage(LabelId _labelId, LanguageIdAll _languageId)
    {
        DocLabelTranslation labelTranslation;

        delete_from labelTranslation
            where labelTranslation.GlobalLabelId == _labelId
               && labelTranslation.LanguageId == _languageId;

        return int642int(labelTranslation.RowCount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForAllLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all translation records for the given label.
    /// </summary>
    /// <param name = "_labelId">LabelId for which the translation records should be deleted</param>
    /// <param name = "_showWarning">Show the warning if there are no translation for the label</param>
    /// <param name = "_askForConfirmation">Ask for confirmation to delete all translation for the label</param>
    /// <returns>Number of deleted translation records</returns>
    public static int deleteForAllLanguages(LabelId _labelId, boolean _showWarning = true, boolean _askForConfirmation = true)
    {
        int numberOfTranslations = DocLabelTranslation::getNumberOfTranslationsForLabel(_labelId);

        if (numberOfTranslations == 0)
        {
            if (_showWarning)
            {
                DocGlobalHelper::handleWarning("@DocentricAX3:NoTranslationForLabelFound");
            }
        }
        else
        {
            if (_askForConfirmation)
            {
                // Ask for the confirmation
                if (!Box::confirm(strFmt("@DocentricAX3:DeleteAllLanguagesConfirmation", numberOfTranslations, _labelId)))
                {
                    return 0;
                }
            }
        }         

        DocLabelTranslation labelTranslation;
        delete_from labelTranslation 
            where labelTranslation.GlobalLabelId == (DocConstantDSP::DOC_LABEL_PREFIX + _labelId);

        return numberOfTranslations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromSystemLabelTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the label translation for the given user-defined label from temp table record.
    /// </summary>
    /// <param name = "_tmpTable">Temp table record which provides label translations</param>
    /// <param name = "_userDefinedLabelId">User-defined label which needs to be updated</param>
    public static void updateFromSystemLabelTranslations(DocLabelSysLabelTranslationTmp _tmpTable, str _userDefinedLabelId)
    {
        DocLabelTranslation labelTranslation;

        try
        {
            select forupdate firstonly labelTranslation
                where labelTranslation.GlobalLabelId == _userDefinedLabelId 
                   && labelTranslation.LanguageId == _tmpTable.LanguageId;

            ttsbegin;

            // If the label translation already exist, update it, otherwise insert a new record.
            if (labelTranslation)
            {
                labelTranslation.Translation = _tmpTable.UserDefinedLabelTranslation;
                labelTranslation.update();
            }
            else
            {
                labelTranslation.GlobalLabelId = _userDefinedLabelId;
                labelTranslation.LanguageId = _tmpTable.LanguageId;
                labelTranslation.Translation = _tmpTable.UserDefinedLabelTranslation;
                labelTranslation.insert();
            }

            ttscommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:ErrorUpdatingTranslationFromSysLabelForLanguage", _tmpTable.LanguageId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:DocLabelTranslationDD</DeveloperDocumentation>
	<FormRef>DocLabelTable</FormRef>
	<Label>@DocentricAX3:GlobalLabelTranslation</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>GlobalLabelId</TitleField1>
	<TitleField2>LanguageId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ReplacementKey>LabelLanguageIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Translation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GlobalLabelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GlobalLabelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Translation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GlobalLabelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GlobalLabelId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportLabelId</ExtendedDataType>
			<HelpText>@DocentricAX3:GlobalLabelIdHelp</HelpText>
			<Label>@DocentricAX3:GlobalLabelId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
			<HelpText>@DocentricAX3:UDLabelLanguageHelp</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Translation</Name>
			<ExtendedDataType>DocLabelTranslationInLanguage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>DocLabelDescription</ExtendedDataType>
			<HelpText>@DocentricAX3:LabelDescriptionHelp</HelpText>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LabelLanguageIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GlobalLabelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocLabelLanguage</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DocLabelLanguage</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DocLabelLanguage</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocLabelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DocLabelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DocLabelTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GlobalLabelId</Name>
					<Field>GlobalLabelId</Field>
					<RelatedField>GlobalLabelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>