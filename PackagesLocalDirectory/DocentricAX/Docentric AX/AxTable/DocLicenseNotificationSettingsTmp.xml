<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLicenseNotificationSettingsTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocLicenseNotificationSettingsTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the temporary table with the data. The license notification settings
    /// are stored in a packed container field LicenseNotificationSettings in the
    /// DocLicenseParametersSettings and must be unpacked before they can be inserted 
    /// into the temporary table.
    /// </summary>
    /// <returns>The list of license notification settings</returns>
    public Set populate()
    {
        DocLicenseParameters licenceParameters = DocLicenseParameters::find();

        // Unpack the container with the stored license notifcation settings
        Set notificationSettingsSet = Set::create(licenceParameters.LicenseNotificationSettings);
        SetEnumerator notificationSettingsSetEnum = notificationSettingsSet.getEnumerator();

        while (notificationSettingsSetEnum.moveNext())
        {
            DocLicenseNotificationSettings notificationSettings = notificationSettingsSetEnum.current();

            // Insert the license notification settings into the temporary table
            this.clear();
            this.NotificationRole = notificationSettings.parmNotificationRole();
            this.NotificationEmailFrom = notificationSettings.parmNotificationEmailFrom();
            this.NotificationEmailTo = notificationSettings.parmNotificationEmailTo();
            this.NotificationSendEmail = notificationSettings.parmNotificationSendEmail();
            this.insert();
        }

        return notificationSettingsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNotificationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the modified license notifcation setting in the list.
    /// </summary>
    /// <param name = "_notificationSettingsSet">The list of license notification settings</param>
    public void updateNotificationSettings(Set _notificationSettingsSet)
    {
        DocLicenseNotificationSettings notificationSettings = DocLicenseNotificationSettings::construct(this);
        SetEnumerator notificationSettingsSetEnum = _notificationSettingsSet.getEnumerator();
        while (notificationSettingsSetEnum.moveNext())
        {
            DocLicenseNotificationSettings notificationSettingsCurrent = notificationSettingsSetEnum.current();
            // Find the modified license notifcation setting in the list
            if (notificationSettingsCurrent.parmNotificationRole() == notificationSettings.parmNotificationRole())
            {
                // Remove the old license notification setting from the list
                _notificationSettingsSet.remove(notificationSettingsCurrent);
                break;
            }
        }
        // Add the modified license notification setting to the list
        _notificationSettingsSet.add(notificationSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>notificationEmailToEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for the NotificationEmailTo field.
    /// </summary>
    /// <param name = "_set">True if the field is being updated; otherwise false</param>
    /// <param name = "_value">The value to set</param>
    /// <returns>The string list of recipients email addresses</returns>
    public edit DocEmailTo notificationEmailToEdit(boolean _set, DocEmailTo _value)
    {
        DocEmailTo notificationEmailTo = _value;

        if (_set)
        {
            if (this.NotificationRole == DocLicenseNotificationRole::None)
            {
                this.NotificationEmailTo = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(_value);
            }
        }
        else
        {
            switch (this.NotificationRole)
            {
                case DocLicenseNotificationRole::None:
                    notificationEmailTo = this.NotificationEmailTo;
                    break;

                case DocLicenseNotificationRole::SysAdmin:
                    notificationEmailTo = DocEmailMngHelper::getEmailAddressesForRole(DocConstant::SecurityRoleSysAdminAOTName);
                    break;

                default:
                    notificationEmailTo = DocEmailMngHelper::getEmailAddressesForRole(enum2Symbol(enumNum(DocLicenseNotificationRole), this.NotificationRole));
            }
        }

        return notificationEmailTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notificationUsersDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for users associated with the selected security role.
    /// </summary>
    /// <returns>The string list of users associated with the selected security role</returns>
    [SysClientCacheDataMethodAttribute]
    public display str notificationUsersDisplay()
    {
        str users = '';

        switch (this.NotificationRole)
        {
            case DocLicenseNotificationRole::None:
                users = '';
                break;

            case DocLicenseNotificationRole::SysAdmin:
                users = DocGlobalHelper::getUsersForRole(DocConstant::SecurityRoleSysAdminAOTName);
                break;

            default:
                users = DocGlobalHelper::getUsersForRole(enum2Symbol(enumNum(DocLicenseNotificationRole), this.NotificationRole));
        }

        return users;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:LicenseNotificationSettingsTmpDD</DeveloperDocumentation>
	<Label>@DocentricAX4:LicenseNotificationSettingsTmp</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>NotificationRole</TitleField1>
	<TitleField2>NotificationSendEmail</TitleField2>
	<ReplacementKey>NotificationRoleIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NotificationRole</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NotificationRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>notificationUsersDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotificationEmailFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>notificationEmailToEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotificationSendEmail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NotificationRole</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>DocLicenseNotificationRole</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NotificationEmailFrom</Name>
			<ExtendedDataType>DocEmailFrom</ExtendedDataType>
			<HelpText>@DocentricAX4:LicenseNotificationEmailFromHelp</HelpText>
			<Label>@DocentricAX4:LicenseNotificationEmailFrom</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NotificationEmailTo</Name>
			<ExtendedDataType>DocEmailTo</ExtendedDataType>
			<HelpText>@DocentricAX4:LicenseNotificationEmailToHelp</HelpText>
			<Label>@DocentricAX4:LicenseNotificationEmailTo</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NotificationSendEmail</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@DocentricAX4:LicenseNotificationSendEmailHelp</HelpText>
			<Label>@DocentricAX4:LicenseNotificationSendEmail</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NotificationRoleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>NotificationRole</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>