<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocInstallation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocInstallation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocInstallation find()
    {
        DocInstallation installation;

        DocInstallation::ensureSingleRecord();
        
        select firstOnly installation where installation.Key == 0;

        return installation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the license as a byte array.
    /// </summary>
    /// <returns>License content as a byte array. Returns null if the license is not set.</returns>
    public static System.Byte[] getLicense()
    {
        DocInstallation installation = DocInstallation::find();
        System.Byte[]   licenseByteArray = DocGlobalHelper::convertContainerToBytes(installation.LicenseContent);
                
        return licenseByteArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or removes the license content.
    /// </summary>
    /// <param name = "_license">The License content. If null, the license content will be removed.</param>
    public static void setLicense(System.Byte[] _license)
    {
        DocInstallation installation;
   
        DocInstallation::ensureSingleRecord();

        container licenseContainer;
        
        if (_license == null)
        {
            // Remove the license content, i.e. clear the LicenseContent field.
            licenseContainer = conNull();
        }
        else
        {
            // Set the license content.
            licenseContainer = DocGlobalHelper::convertBytesToContainer(_license);
        }

        ttsBegin;

        update_recordset installation setting LicenseContent = licenseContainer where installation.Key == 0;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstallationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve Installation ID.
    /// </summary>
    /// <returns>Installation ID. Returns null if installation ID is not set.</returns>
    public static System.String getInstallationId()
    {
        return  DocInstallation::find().InstallationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstallationId</Name>
				<Source><![CDATA[
    public static void setInstallationId(str _installationId)
    {
        DocInstallation installation;

        DocInstallation::ensureSingleRecord();
        
        ttsBegin;

        update_recordset installation setting InstallationId = _installationId where installation.Key == 0;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocDBVersion</Name>
				<Source><![CDATA[
    public static DocDBVersion getDocDBVersion()
    {
        return DocInstallation::find().DocDBVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureSingleRecord</Name>
				<Source><![CDATA[
    public static void ensureSingleRecord()
    {
        DocInstallation     installation;
        boolean             inserted = false, error = false;
        System.Exception    ex;
        
        // First try to read the record from this singleton table with optimistic lock for fast concurrent response.
        select firstOnly RecId from installation where installation.Key == 0;

        if (installation.RecId)
        {
            return;
        }

        // If no record is found, insert it reliably - with pessimistic locking.
        try
        {
            ttsBegin;

            select firstOnly pessimisticLock installation where installation.Key == 0;
            
            if (!installation.RecId)
            {
                // There is no default record - insert it.
                installation.clear();
                installation.initValue();
                installation.insert();          // if table is not synchronized, error is thrown here
                
                DocUpgradeLog::insertLog('', installation.DocDBVersion, Exception::Info, 'Clean installation.');

                inserted = true;                
            }
            
            ttsCommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            // The single record already exists.
            inserted = false;
        }
        catch (ex)
        {
            // Something went wrong. Log the exception.
            inserted = false;
            error = true;
        }

        // Log clean installation.
        if (inserted)
        {
            // Problems with logging should not block further execution. (Not needed as called method swallows the exception.)
            try
            {
                DocDiagnosticsManager::logNewInstallation(installation.DocDBVersion);
            }
            catch
            {
                exceptionTextFallThrough();
            }
        }

        // Log error (typically SQL error when table in not synchronized), but only once (to avoid loop).
        if (error)
        {
            SysGlobalObjectCache globalObjectCache = classFactory.globalObjectCache();
            str         cacheScope = tableStr(DocInstallation);
            container   cacheKey = [funcName() + '_Error'];

            if (!globalObjectCache.find(cacheScope, cacheKey))
            {
                globalObjectCache.insert(cacheScope, cacheKey, [true]);

                str msg = 'The SQL database has issued an error. Check that database table DocInstallation is synchronized.';

                if (ex.Message like '*The SQL database has issued an error.*')
                {
                    error(msg);
                }                
                
                DocUpgradeLog::log('', installation.DocDBVersion, Exception::Error, msg + '\n' + ex.Message);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.Key = 0;
        this.InstallationId = System.Guid::NewGuid().ToString('D');
        this.IsOnPremEnvironment = DocConstantGlobal::isOnPremEnvironment();
        this.DocDBVersion = DocGlobalHelper::getDocentricAxModelVersion();
        this.EnvironmentHostname = DocDiagnosticsManager::fullyQualifiedDomainName();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIsOnPremEnvironment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the IsOnPremEnvironment flag is correct
    /// and update it if needed.
    /// This is needed for the upgrade scenarios, where the previous
    /// version doesn't have this flag.
    /// </summary>
    public static void updateIsOnPremEnvironment()
    {
        DocInstallation installationIsOnPremInfo = DocInstallation::find();

        if (installationIsOnPremInfo.IsOnPremEnvironment != DocConstantGlobal::isOnPremEnvironment())
        {
            DocInstallation installation;
            
            ttsBegin;

            update_recordset installation setting IsOnPremEnvironment = DocConstantGlobal::isOnPremEnvironment() where installation.Key == 0;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:InstallationTableDevDoc</DeveloperDocumentation>
	<Label>@DocentricAX:InstallationInfo</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>InstallationId</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>KeyIdx</PrimaryIndex>
	<ReplacementKey>KeyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstallationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseContent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@DocentricAX:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstallationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseContent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocDBVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Environment</Name>
			<Label>@SYS52596</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsOnPremEnvironment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnvironmentHostname</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InstallationId</Name>
			<ExtendedDataType>DocInstallationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LicenseContent</Name>
			<ExtendedDataType>SysContainer</ExtendedDataType>
			<Label>@DocentricAX:LicenseContent</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOnPremEnvironment</Name>
			<ExtendedDataType>DocIsOnPremEnvironment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocDBVersion</Name>
			<ExtendedDataType>DocDBVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnvironmentHostname</Name>
			<ExtendedDataType>DocFullyQualifiedDomainName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>