<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportEmailTemplateSelectorTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportEmailTemplateSelectorTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTableForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a temporary table with email templates for provided report.
    /// </summary>
    /// <param name = "_emailTemplateTmp">An instance of DocReportEmailTemplateSelectorTmp table.</param>
    /// <param name = "_reportId">Report Id.</param>
    /// <param name = "_useEmailTemplate">Indicates if the email tenplate will be used for the email body.</param>
    /// <param name = "_includeEmailTemplateTokens">Include email tokens.</param>
    /// <param name = "_includeEmailTemplates">Include email templates.</param>
    private static void fillTableForReport(
        DocReportEmailTemplateSelectorTmp _emailTemplateTmp, 
        str _reportId, 
        boolean _useEmailTemplate, 
        boolean _includeEmailTemplateTokens, 
        boolean _includeEmailTemplates)
    {
        DocReportTable reportTable;
        DocReportEmailTemplate emailTemplateOrig;
        
        DocReportTableRecId reportRecId = 0;
        if (_reportId)
        {
            reportTable = DocReportTable::findReportId(_reportId);
            reportRecId = reportTable.RecId;
        }

        ttsBegin;

        // Add the default email template token.
        if (_useEmailTemplate && _includeEmailTemplateTokens)
        {
            _emailTemplateTmp.clear();
            _emailTemplateTmp.ReportId = '';
            _emailTemplateTmp.EmailTemplateId = DocConstant::DefaultEmailTemplatePlaceholder;
            _emailTemplateTmp.CompanyId = DocConstant::AnyLabel;
            _emailTemplateTmp.LanguageID = DocConstant::AnyLabel;
            _emailTemplateTmp.IsDefaultTemplate = true;
            _emailTemplateTmp.Title = '';
            _emailTemplateTmp.IsEnabled = true;
            _emailTemplateTmp.insert();
        }

        if (_includeEmailTemplates)
        {
            DocReportEmailTemplateId emailTempateId = '';
            LanguageId languageId = '';

            // Insert email templates.
            while select emailTemplateOrig
                order by emailTemplateOrig.EmailTemplateId asc
                where emailTemplateOrig.Report == reportRecId
                   && emailTemplateOrig.IsEnabled == true
            {
                if (!DocReportEmailTemplateSelectorTmp::includeEmailTemplateConsideringCompany(emailTemplateOrig, _useEmailTemplate))
                {
                    continue;
                }
                // Select only distinct templates if UseTemplate is false
                if (!_useEmailTemplate && emailTempateId == emailTemplateOrig.EmailTemplateId && languageId == emailTemplateOrig.LanguageID)
                {
                    continue;
                }
                emailTempateId = emailTemplateOrig.EmailTemplateId;
                languageId = emailTemplateOrig.LanguageID;

                _emailTemplateTmp.clear();
                _emailTemplateTmp.ReportId = reportTable.ReportId;
                _emailTemplateTmp.EmailTemplateId = emailTemplateOrig.EmailTemplateId ? emailTemplateOrig.EmailTemplateId : DocConstant::NotSetLabel;
                _emailTemplateTmp.CompanyId = emailTemplateOrig.CompanyId ? emailTemplateOrig.CompanyId : DocConstant::AnyLabel;
                _emailTemplateTmp.LanguageID = emailTemplateOrig.LanguageID ? emailTemplateOrig.LanguageID : DocConstant::AnyLabel;
                _emailTemplateTmp.IsDefaultTemplate = emailTemplateOrig.IsDefaultTemplate;
                _emailTemplateTmp.Title = (_useEmailTemplate && emailTemplateOrig.IsDefaultTemplate ? '(DEFAULT) ' : '') + emailTemplateOrig.Title ;
                _emailTemplateTmp.IsEnabled = emailTemplateOrig.IsEnabled;
                _emailTemplateTmp.insert();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableForAllReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a temporary table with email templates for all reports.
    /// </summary>
    /// <param name = "_emailTemplateTmp">An instance of DocReportEmailTemplateSelectorTmp table.</param>
    /// <param name = "_useEmailTemplate">Indicates if the email tenplate will be used for the email body.</param>
    /// <returns>True if the ReportId column should be shown; otherwise false.</returns>
    private static boolean fillTableForAllReports(DocReportEmailTemplateSelectorTmp _emailTemplateTmp, boolean _useEmailTemplate)
    {
        DocReportTable reportTable;
        DocReportEmailTemplate reportEmailTemplate;
        boolean includeEmailTemplateTokens = true;
        boolean showReportColumn = true;

        while select reportTable
              where reportTable.IsActiveSRS == true  // consider only active reports
              exists join reportEmailTemplate  // consider only those reports with at least one enabled email template
                   where reportEmailTemplate.Report == reportTable.RecId
                      && reportEmailTemplate.IsEnabled == true
        {
            DocReportEmailTemplateSelectorTmp::fillTableForReport(_emailTemplateTmp, reportTable.ReportId, _useEmailTemplate, includeEmailTemplateTokens, true);
            includeEmailTemplateTokens = false;
        }

        if (includeEmailTemplateTokens)
        {
            // No report is registered, active or has enabled email templates.
            DocReportEmailTemplateSelectorTmp::fillTableForReport(_emailTemplateTmp, '', _useEmailTemplate, true, false);
            showReportColumn = false;
        }

        return showReportColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableForReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a temporary table with email templates for provided report type.
    /// </summary>
    /// <param name = "_emailTemplateTmp">An instance of DocReportEmailTemplateSelectorTmp table.</param>
    /// <param name = "_reportType">Report type.</param>
    /// <param name = "_useEmailTemplate">Indicates if the email tenplate will be used for the email body.</param>
    /// <returns>True if the ReportId column should be shown; otherwise false.</returns>
    private static boolean fillTableForReportType(DocReportEmailTemplateSelectorTmp _emailTemplateTmp, PrintMgmtDocumentType _reportType, boolean _useEmailTemplate)
    {
        DocReportTable reportTable;
        DocReportEmailTemplate reportEmailTemplate;
        PrintMgmtReportFormat printMgmtReports;
        boolean includeEmailTemplateTokens = true;
        boolean showReportColumn = true;
        int numberOfReports = 0;
    
        while select reportTable
              where reportTable.IsActiveSRS == true  // consider only active reports
              exists join printMgmtReports  // consider only reports belonging to the provided report type
                   where printMgmtReports.Name == reportTable.SRSReportName
                      && printMgmtReports.DocumentType == _reportType 
              exists join reportEmailTemplate  // consider only those reports with at least one enabled template
                   where reportEmailTemplate.Report == reportTable.RecId
                      && reportEmailTemplate.IsEnabled == true
        {
            DocReportEmailTemplateSelectorTmp::fillTableForReport(_emailTemplateTmp, reportTable.ReportId, _useEmailTemplate, includeEmailTemplateTokens, true);
            includeEmailTemplateTokens = false;
            numberOfReports++;
        }

        if (numberOfReports == 0)
        {
            // No report is registered, active or has enabled email templates.
            DocReportEmailTemplateSelectorTmp::fillTableForReport(_emailTemplateTmp, '', _useEmailTemplate, true, false);
            showReportColumn = false;
        }
        else if (numberOfReports == 1)
        {
            // Only one report is registered, active or has enabled email templates.
            showReportColumn = false;
        }

        return showReportColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a temporary table with email templates which needs to meet certain conditions.
    /// </summary>
    /// <param name = "_emailTemplateTmp">An instance of DocReportEmailTemplateSelectorTmp table.</param>
    /// <param name = "_reportId">Report Id./</param>
    /// <param name = "_reportType">Report type.</param>
    /// <param name = "_reportTypeProvided">Is report type provided.</param>
    /// <param name = "_useEmailTemplate">Indicates if the email tenplate will be used for the email body.</param>
    /// <returns>True if the ReportId column should be shown; otherwise false.</returns>
    public static boolean fillTable(
        DocReportEmailTemplateSelectorTmp _emailTemplateTmp,
        str _reportId,
        PrintMgmtDocumentType _reportType,
        boolean _reportTypeProvided,
        boolean _useEmailTemplate)
    {
        boolean showReportColumn;

        ttsbegin;

        delete_from _emailTemplateTmp;

        if (_reportId)
        {
            // Do not include email templates, if:
            // 1) the report is not registered in the Docentric report setup.
            // 2) the report is registered in the Docentric report setup but the IsActiveSRS flag is set to false (it is not active).
            // 3) the report is registered in the Docentric report setup but it has no enabled templates.
            boolean includeEmailTemplates = true;

            DocReportTable report = DocReportTable::findReportId(_reportId);

            if (report.RecId == 0 || report.IsActiveSRS == false || !report.hasEnabledEmailTemplates())
            {
                includeEmailTemplates = false;
            }

            DocReportEmailTemplateSelectorTmp::fillTableForReport(_emailTemplateTmp, _reportId, _useEmailTemplate, true, includeEmailTemplates);
            showReportColumn = false;
        }
        else if (_reportTypeProvided)
        {
            // At least report type is provided
            showReportColumn = DocReportEmailTemplateSelectorTmp::fillTableForReportType(_emailTemplateTmp, _reportType, _useEmailTemplate);
        }
        else
        {
            // Neither report ID nor report type are provided
            showReportColumn = DocReportEmailTemplateSelectorTmp::fillTableForAllReports(_emailTemplateTmp, _useEmailTemplate);
        }

        ttscommit;

        return showReportColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeEmailTemplateConsideringCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if provided email template should be included in the list considering the company.
    /// If the flag _useEmailTemplate is true the check of an email template depends on the setting SelectTemplateMode.
    /// If the flag _useEmailTemplate is false only an email template for the current company and company neutral will be included in the list.
    /// </summary>
    /// <param name = "_emailTemplate">A DocReportEmailTemplate record.</param>
    /// <param name = "_useEmailTemplate">Indicates if the email tenplate will be used for the email body.</param>
    /// <returns>True if the email template meets the conditions; otherwise false</returns>
    private static boolean includeEmailTemplateConsideringCompany(DocReportEmailTemplate _emailTemplate, boolean _useEmailTemplate)
    {
        if (_useEmailTemplate)
        {
            // For this mode include all templates.
            if (DocParameters::find().SelectTemplateMode == DocSelectTemplateMode::ShowAllTemplates)
            {
                return true;
            }
        }

        // Company neutral email templates should be always included.
        if (_emailTemplate.CompanyId == '')
        {
            return true;
        }

        // Check if the email template belongs to the current company.
        if (_emailTemplate.CompanyId == curExt())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateListStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of email template ids as string.
    /// </summary>
    /// <param name = "_reportId">Report Id.</param>
    /// <param name = "_reportType">Report type.</param>
    /// <param name = "_reportTypeProvided">Is report type provided.</param>
    /// <param name = "_useEmailTemplate">Indicates if the email tenplate will be used for the email body.</param>
    /// <returns>List of email temp[late ids as string.</returns>
    public static str getEmailTemplateListStr(
        str _reportId,
        PrintMgmtDocumentType _reportType,
        boolean _reportTypeProvided,
        boolean _useEmailTemplate)
    {
        DocReportEmailTemplateSelectorTmp emailTemplateTmp;
        str emailTemplateList = '';

        DocReportEmailTemplateSelectorTmp::fillTable(emailTemplateTmp, _reportId, _reportType, _reportTypeProvided, _useEmailTemplate);

        while select emailTemplateTmp
        {
            if (emailTemplateList == '')
            {
                emailTemplateList = '[';
            }

            emailTemplateList += (emailTemplateList != '[' ? ', ' : '') + strFmt('{ "name": "%1", "lang": "%2" }', emailTemplateTmp.EmailTemplateId, emailTemplateTmp.LanguageID);
        }
        if (emailTemplateList != '')
        {
            emailTemplateList += ']';
        }

        return emailTemplateList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:EmailTemplatesDevDoc</DeveloperDocumentation>
	<FormRef>DocReportEmailTemplate</FormRef>
	<Label>@DocentricAX3:EmailTemplates</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>EmailTemplateId</TitleField1>
	<TitleField2>CompanyId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>TemplateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefaultTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Title</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailTemplateId</Name>
			<ExtendedDataType>DocReportEmailTemplateIdSelect</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>DocReportTemplateCompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageID</Name>
			<ExtendedDataType>DocReportTemplateLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefaultTemplate</Name>
			<ExtendedDataType>DocReportIsDefaultTemplate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnabled</Name>
			<ExtendedDataType>DocReportIsTemplateEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Title</Name>
			<ExtendedDataType>DocReportTemplateTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportId</Name>
			<ExtendedDataType>DocReportId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EmailTemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReportId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>