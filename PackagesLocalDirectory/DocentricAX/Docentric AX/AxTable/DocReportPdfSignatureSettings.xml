<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportPdfSignatureSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;
using Docentric.AX.Documents.Pdf.DigitalSignature;

public class DocReportPdfSignatureSettings extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocReportPdfSignatureSettings table.
    /// </summary>
    /// <param name = "_recId">The record ID of the DocReportPdfSignatureSettings record to find.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the DocReportPdfSignatureSettings table; otherwise, an empty record.</returns>
    public static DocReportPdfSignatureSettings find(RecId _recId, boolean _forUpdate = false)
    {
        DocReportPdfSignatureSettings signatureSettings;

        signatureSettings.selectForUpdate(_forUpdate);

        select firstonly signatureSettings 
            where signatureSettings.RecId == _recId;
        
        return signatureSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReportAndCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocReportPdfSignatureSettings record specified by the DocReportTable and Company values.
    /// </summary>
    /// <param name = "_report">The report table record ID</param>
    /// <param name = "_companyId">The company ID</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <param name = "_fallback">A Boolean value that indicates whether a fallback to DAT company should happen.</param>
    /// <returns>A record in the DocReportPdfSignatureSettings table; otherwise, an empty record.</returns>
    public static DocReportPdfSignatureSettings findByReportAndCompany(
        DocReportTableRecId _report,
        SelectableDataArea _companyId,
        boolean _forUpdate = false,
        boolean _fallback = true)
    {
        DocReportPdfSignatureSettings signatureSettings;

        signatureSettings.selectForUpdate(_forUpdate);

        if (_report && _companyId)
        {
            select firstonly signatureSettings 
                where signatureSettings.Report == _report  
                   && signatureSettings.CompanyId == _companyId;
        }
        
        // If no company-specific redirection rule was found, check if there exists
        // global rule (DAT company)
        if (!signatureSettings && _fallback)
        {
            select firstonly signatureSettings 
                where signatureSettings.Report == _report
                   && signatureSettings.CompanyId == 'DAT';
        }
        
        return signatureSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether at least one signature setting for the provided report exists in 
    /// the DocElectronicSignatureCertificate table.
    /// </summary>
    /// <param name="_report">The report table record ID</param>
    /// <returns>True if at least one signature setting exists; otherwise, false.</returns>
    public static boolean existForReport(DocReportTableRecId _report)
    {
        return _report && (select firstonly RecId from DocReportPdfSignatureSettings
                    where DocReportPdfSignatureSettings.Report == _report).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether at least one signature setting for the provided report is enabled.
    /// </summary>
    /// <param name="_report">The report table record ID</param>
    /// <returns>True if at least one signature setting is enabled; otherwise, false.</returns>
    public static boolean enabledForReport(DocReportTableRecId _report)
    {
        return _report && (select firstonly RecId from DocReportPdfSignatureSettings
                    where DocReportPdfSignatureSettings.Report == _report
                       && DocReportPdfSignatureSettings.IsEnabled).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a company name.
    /// </summary>
    /// <returns>A company name</returns>
    [SysClientCacheDataMethodAttribute]
    public display DocCompanyName companyName()
    {
        return CompanyInfo::findDataArea(this.CompanyId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCertificateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a flag indicating if the referenced certificate is valid.
    /// </summary>
    /// <returns>True/False</returns>
    public display DocPdfSignatureIsCertificateValid isCertificateValid()
    {
        boolean isValid = false;

        if (this.CompanyId)
        {
            changeCompany(this.CompanyId)
            {
                DocElectronicSignatureCertificate signatureCertificate = DocElectronicSignatureCertificate::find(this.CertificateId);
                if (signatureCertificate)
                {
                    isValid = signatureCertificate.ValidationStatus == DocCertificateValidationStatus::Valid;
                }
            }
        }
        
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values with default values in a new record.
    /// </summary>
    public void initValue()
    {
        super();

        this.IsEnabled = NoYes::Yes;
        this.LongTermValidation = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testSignature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests the signature depending on the signature settings.
    /// </summary>
    public void testSignature()
    {
        System.IO.MemoryStream signaturePreviewSignedStream = null;
        
        str fileName = this.SignatureAppearanceId ? 
                       strFmt('Preview_%1_%2_%3.%4',
                            strLRTrim(DocReportTable::find(this.Report).ReportId), 
                            strLRTrim(this.CertificateId),
                            strLRTrim(this.SignatureAppearanceId),
                            DocConstantFile::FileExtPdf)
                     : strFmt('Preview_%1_%2.%3',
                            strLRTrim(DocReportTable::find(this.Report).ReportId),
                            strLRTrim(this.CertificateId),
                            DocConstantFile::FileExtPdf);

        try
        {
            // Create PDF singature settings
            DocPdfSignatureSettings signatureSettings = DocPdfSignatureSettings::constructWithDefault(this.Report, this.CompanyId, true);
            signatureSettings.parmIsEnabled(true);  // for signature test the IsEnabled flag needs to be ignored

            // Get signature appearance settings for provided PDF signature settings
            DocElectronicSignatureAppearance signatureAppearance = DocElectronicSignatureAppearance::find(signatureSettings.getSignatureAppearanceId());

            // Get PDF signature options for provided PDF signature settings
            DocPdfSignatureOptions signatureOptions = DocPdfSecurityManager::getPdfSignatureOptions(signatureSettings);

            // Set signature preview options
            DocSignatureAppearancePreviewOptions signaturePreviewOptions = new DocSignatureAppearancePreviewOptions();
            signaturePreviewOptions.PrepareOnlySamplePages = true;
            if (signatureAppearance)
            {
                signaturePreviewOptions.PageOrientation = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                              signaturePreviewOptions.PageOrientation.GetType(),
                                                              enumNum(DocSignaturePageOrientation),
                                                              signatureAppearance.PageOrientationPreview);
                signaturePreviewOptions.PageSize = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                       signaturePreviewOptions.PageSize.GetType(),
                                                       enumNum(DocSignaturePageSize),
                                                       signatureAppearance.PageSizePreview);
            }

            // Create an empty PDF document as a source document for signing
            System.IO.MemoryStream signaturePreviewStream = new System.IO.MemoryStream();
            DocPdfSigner::GenerateSignatureApperancePreview(signaturePreviewStream, signatureOptions, signaturePreviewOptions);
            signaturePreviewStream.Position = 0;

            // Sign the provided PDF document with PDF signature settings
            signaturePreviewSignedStream = DocPdfSecurityManager::signDocument(signaturePreviewStream, signatureSettings);
            signaturePreviewStream.Dispose();

            // Send signed PDF document ot user
            if (signaturePreviewSignedStream != null)
            {
                signaturePreviewSignedStream.Position = 0;
                DocFileMngHelper::sendFileToUser(signaturePreviewSignedStream, fileName, DocConstantFile::MimeTypePdf, DocConstantFile::FileExtPdf, '', null, false, false, true);
            }
        }
        catch
        {
            Global::exceptionTextFallThrough();
        }
        finally
        {
            if (signaturePreviewSignedStream != null)
            {
                signaturePreviewSignedStream.Dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the value of the field is changed.
    /// </summary>
    /// <param name = "_fieldId">Field Id</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(DocReportPdfSignatureSettings, CompanyId):
                this.CertificateId = '';
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:PDFSignatureSettingsDD</DeveloperDocumentation>
	<Label>@DocentricAX3:PDFSignatureSettings</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>Report</TitleField1>
	<TitleField2>CompanyId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ReportCompIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>ReportCompIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LongTermValidation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Contact</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>companyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isCertificateValid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LongTermValidation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Contact</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Report</Name>
			<ExtendedDataType>DocReportTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<HelpText>@DocentricAX2:CompanyPDRedirectionHelp</HelpText>
			<Label>@DocentricAX:CompanyId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateId</Name>
			<ExtendedDataType>DocCertificateId</ExtendedDataType>
			<HelpText>@DocentricAX3:PDFSignatureCertificateHelp</HelpText>
			<Label>@DocentricAX3:PDFSignatureCertificate</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SignatureAppearanceId</Name>
			<ExtendedDataType>DocElectronicSignatureAppearanceId</ExtendedDataType>
			<HelpText>@DocentricAX3:PDFSignatureAppearanceHelp</HelpText>
			<Label>@DocentricAX3:PDFSignatureAppearance</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reason</Name>
			<ExtendedDataType>DocPdfSignatureReason</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Location</Name>
			<ExtendedDataType>DocPdfSignatureLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Contact</Name>
			<ExtendedDataType>DocPdfSignatureContact</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>DocPdfEncryptionComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnabled</Name>
			<ExtendedDataType>DocPdfSignatureEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LongTermValidation</Name>
			<ExtendedDataType>DocPdfSignatureLongTermValidation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportCompIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Report</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompanyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Report</Name>
					<SourceEDT>DocReportTableRecId</SourceEDT>
					<Field>Report</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Company</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DocElectronicSignatureCertificate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocElectronicSignatureCertificate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<Field>CompanyId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CertificateId</Name>
					<Field>CertificateId</Field>
					<RelatedField>CertificateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DocElectronicSignatureAppearance</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocElectronicSignatureAppearance</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SignatureAppearanceId</Name>
					<Field>SignatureAppearanceId</Field>
					<RelatedField>SignatureAppearanceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>