<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocLabelSelectorTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocLabelSelectorTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTableWithUnusedLabelsForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the temporary table which is used in the form for multi-selecting
    /// the labels and assigning them to the report. We fill the table only
    /// with the labels which are not already assigned to the provided report.
    /// </summary>
    /// <param name = "_tmpTable">Temporary table, main datasource of the caller form</param>
    /// <param name = "_reportRecId">Report for which the non-assigned labels should
    /// be listed</param>
    public static void fillTableWithUnusedLabelsForReport(DocLabelSelectorTmp _tmpTable, DocReportTableRecId _reportRecId)
    {
        DocReportLabelId globalLabelId = '', labelId = '';
        DocLabelDescription labelDescription = '';
        DocLabelTranslationInLanguage userLanguageTranslation;
        str translatedInLanguages = '', fallbackTranslation = '';
        boolean useFallbackTranslation = false;
        LanguageId userLanguage = currentUserLanguage();
        int cnt = 0;
        
        ttsbegin;

        DocLabelTable globalLabel;
        DocLabelTranslation labelTranslation;
        DocLabelLanguage labelLanguage;
        DocReportLabel reportLabel;

        // We could have 2 selects: first select the non-assigned labels, then for
        // each of them get the translations and calculate the translation in the
        // user language and list of translated languages. There can be many
        // labels and for each of them we would loop again, so we could have
        // bad performance. Therefore, we implemented one select statement 
        // with a little more complex logic.
        while select LabelId, GlobalLabelId, FallbackTranslation,
            UseFallbackTranslation, Description from globalLabel
                order by globalLabel.GlobalLabelId, labelLanguage.LineNum
            outer join LanguageId, Translation from labelTranslation
                where labelTranslation.GlobalLabelId == globalLabel.GlobalLabelId
            outer join labelLanguage
                where labelLanguage.LanguageId == labelTranslation.LanguageId
            notexists join reportLabel
                where reportLabel.Report == _reportRecId && reportLabel.LabelId == globalLabel.GlobalLabelId
        {
            if (globalLabel.GlobalLabelId != globalLabelId)
            {
                // New global label Id with its set of translations.
                // We can get N records for one label (as many records as
                // there are translations for it). They are sorted by LabelId,
                // so when we come here it means that the previous group
                // of N translations for the previous label has finished
                // and we can write the related results into a new
                // temp table record.

                if (globalLabelId != '')
                {
                    // This isn't the first global label Id.
                    // Write values from the previous global label Id into the temp table.
                    _tmpTable.clear();
                    _tmpTable.LabelId = labelId;
                    _tmpTable.GlobalLabelId = globalLabelId;
                    _tmpTable.Comment = labelDescription;
                    _tmpTable.Translation = userLanguageTranslation ? userLanguageTranslation
                                                : strFmt('%1 %2#', DocConstant::TranslationMissingPrefix, userLanguage);
                    _tmpTable.TranslatedInLanguages = translatedInLanguages;
                    _tmpTable.FallbackTranslation = fallbackTranslation;
                    _tmpTable.UseFallbackTranslation = useFallbackTranslation;
                    _tmpTable.insert();
                }

                // Reset values for the next group of records
                globalLabelId = globalLabel.GlobalLabelId;
                labelId = globalLabel.LabelId;
                labelDescription = globalLabel.Description;
                translatedInLanguages = '';
                fallbackTranslation = globalLabel.FallbackTranslation;
                useFallbackTranslation = globalLabel.UseFallbackTranslation;
                userLanguageTranslation = '';
            }

            // Is this translation in user language?
            if (labelTranslation.LanguageId == userLanguage)
            {
                userLanguageTranslation = labelTranslation.Translation;
            }

            // If there is non-empty translation on this record, then add this language 
            // to the list of translated languages.
            if (labelTranslation.Translation != '')
            {
                translatedInLanguages += translatedInLanguages ? ('; \n' + labelTranslation.LanguageId) : labelTranslation.LanguageId;
            }

            cnt++;
        }

        if (cnt > 0)
        {
            // We finished looping through the resultset.
            // If there was at least one label, write the values from the last group 
            // of translations (for the last label)
            _tmpTable.clear();
            _tmpTable.LabelId = labelId;
            _tmpTable.GlobalLabelId = globalLabelId;
            _tmpTable.Comment = labelDescription;
            _tmpTable.Translation = userLanguageTranslation ? userLanguageTranslation
                                    : strFmt('%1 %2#', DocConstant::TranslationMissingPrefix, userLanguage);
            _tmpTable.TranslatedInLanguages = translatedInLanguages;
            _tmpTable.FallbackTranslation = fallbackTranslation;
            _tmpTable.UseFallbackTranslation = useFallbackTranslation;
            _tmpTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithUnusedLabelsForLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the temporary table which is used in the form for multi-selecting
    /// the labels and creating the missing translations for them in the provided 
    /// language. We fill the table only with the labels for which there is
    /// no translation in the provided language.
    /// </summary>
    /// <param name = "_tmpTable">Temporary table, main datasource of the caller form</param>
    /// <param name = "_languageId">Language for which the not-translated labels should
    /// be listed</param>
    public static void fillTableWithUnusedLabelsForLanguage(DocLabelSelectorTmp _tmpTable, LanguageId _languageId)
    {
        DocLabelLanguage labelLanguage = DocLabelLanguage::findByLanguageId(_languageId);
        
        ttsbegin;

        DocLabelTable labelTable;
        DocLabelTranslation labelTranslation;
        while select LabelId, GlobalLabelId, Description, FallbackTranslation,
            UseFallbackTranslation from labelTable
                order by labelTable.GlobalLabelId
            notexists join labelTranslation
                where labelTranslation.GlobalLabelId == labelTable.GlobalLabelId
                    && labelTranslation.LanguageId == _languageId
        {
            _tmpTable.clear();
            _tmpTable.LabelId = labelTable.labelId;
            _tmpTable.GlobalLabelId = labelTable.globalLabelId;
            _tmpTable.Translation = '';
            _tmpTable.Comment = labelLanguage.Comment;
            _tmpTable.TranslatedInLanguages = '';
            _tmpTable.FallbackTranslation = labelTable.FallbackTranslation;
            _tmpTable.UseFallbackTranslation = labelTable.UseFallbackTranslation;
            _tmpTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithUnusedLanguagesForLabel</Name>
				<Source><![CDATA[
    public static void fillTableWithUnusedLanguagesForLabel(DocLabelSelectorTmp _tmpTable, DocReportLabelId _globalLabelId)
    {
        DocLabelLanguage labelLanguage;
        DocLabelTranslation labelTranslation;

        ttsbegin;

        while select LanguageId from labelLanguage
            order by labelLanguage.LineNum
            notexists join labelTranslation
                where labelTranslation.LanguageId == labelLanguage.LanguageId
                    && labelTranslation.GlobalLabelId == _globalLabelId
        {
            _tmpTable.clear();
            _tmpTable.LanguageId = labelLanguage.LanguageId;
            _tmpTable.LanguageDescription = LanguageTable::languageId2Description(labelLanguage.LanguageId);
            _tmpTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithUsedLanguagesForLabel</Name>
				<Source><![CDATA[
    public static void fillTableWithUsedLanguagesForLabel(DocLabelSelectorTmp _tmpTable, DocReportLabelId _globalLabelId)
    {
        DocLabelLanguage labelLanguage;
        DocLabelTranslation labelTranslation;

        ttsbegin;

        while select LanguageId from labelLanguage
            order by labelLanguage.LineNum
            exists join labelTranslation
                where labelTranslation.LanguageId == labelLanguage.LanguageId
                    && labelTranslation.GlobalLabelId == _globalLabelId
        {
            _tmpTable.clear();
            _tmpTable.LanguageId = labelLanguage.LanguageId;
            _tmpTable.LanguageDescription = LanguageTable::languageId2Description(labelLanguage.LanguageId);
            _tmpTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithAllLanguages</Name>
				<Source><![CDATA[
    public static void fillTableWithAllLanguages(DocLabelSelectorTmp _tmpTable)
    {
        DocLabelLanguage labelLanguage;

        ttsbegin;

        while select LanguageId from labelLanguage
            order by labelLanguage.LineNum
        {
            _tmpTable.clear();
            _tmpTable.LanguageId = labelLanguage.LanguageId;
            _tmpTable.LanguageDescription = LanguageTable::languageId2Description(labelLanguage.LanguageId);
            _tmpTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:DocGlobalLabelSelectorDD</DeveloperDocumentation>
	<FormRef>DocLabelMultiSelect</FormRef>
	<Label>@DocentricAX3:GlobalLabels</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>GlobalLabelId</TitleField1>
	<TitleField2>Translation</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LabelId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocReportLabelId</ExtendedDataType>
			<HelpText>@DocentricAX4:UserDefinedLabelId</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GlobalLabelId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportLabelId</ExtendedDataType>
			<HelpText>@DocentricAX3:GlobalLabelIdHelp</HelpText>
			<Label>@DocentricAX3:GlobalLabelId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Translation</Name>
			<ExtendedDataType>DocLabelTranslationInLanguage</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>DocLabelDescription</ExtendedDataType>
			<HelpText>@DocentricAX3:LabelDescription</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TranslatedInLanguages</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@DocentricAX3:TranslatedInLanguagesHelp</HelpText>
			<Label>@DocentricAX3:TranslatedInLanguages</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FallbackTranslation</Name>
			<ExtendedDataType>DocLabelTranslationInLanguage</ExtendedDataType>
			<HelpText>@DocentricAX3:FallbackTranslationHelp</HelpText>
			<Label>@DocentricAX3:FallbackTranslation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseFallbackTranslation</Name>
			<ExtendedDataType>DocLabelUseFallbackTranslation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
			<HelpText>@DocentricAX3:UDLabelLanguageHelp</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageDescription</Name>
			<ExtendedDataType>LanguageDescription</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>