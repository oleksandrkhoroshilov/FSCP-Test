<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrinterSelectorTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrinterSelectorTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertOnePrinter</Name>
				<Source><![CDATA[
    private static void insertOnePrinter(DocPrinterSelectorTmp _tmpTable, SysCorpNetPrinters _networkPrinters)
    {
        _tmpTable.clear();
        _tmpTable.PrinterName = _networkPrinters.PrinterName;
        _tmpTable.Description = _networkPrinters.Description;
        _tmpTable.PrinterPath = _networkPrinters.PrinterPath;
        _tmpTable.Active = _networkPrinters.Active;
        _tmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableWithPrintersActiveAndAllowedForReportAndUser</Name>
				<Source><![CDATA[
    public static int fillTableWithPrintersActiveAndAllowedForReportAndUser(DocPrinterSelectorTmp _tmpTable,
        str _reportId, PrintMgmtDocumentType _reportType, boolean _reportTypeProvided,
        UserId _userId = curUserId(), boolean _addUserDefaultPrinter = true)
    {
        DocReportRunDelegates reportRunDelegates = DocReportRunDelegates::instance();
        SysCorpNetPrinters networkPrinters;
        int cnt = 0;                

        // Get all active and allowed printers for the current company and provided report and user.
        Set validPrinters = DocPrinterManager::getActiveAndAllowedPrinters(_reportId, _reportType, _reportTypeProvided, _userId);

        // Give a chance to custom code to apply additional restriction to the retrieved printer set.
        reportRunDelegates.onPopulatePrinterCombo(null, _reportId, _reportType, _reportTypeProvided, _addUserDefaultPrinter, validPrinters);
        
        // Apply the logic for user-favorite printers and convert the set of the active and allowed printers
        // to a list that reflects user-favorite setup.
        // Note that after returning from this method, input set (validPrinters) will be empty.
        List validPrintersList = DocPrinterManager::applyOrderFromUserPrinterSetup(validPrinters, _userId);

        // Give a chance to custom code to modify validPrintersList, e.g. to add printer placeholders.
        reportRunDelegates.onPopulatePrinterComboList(_reportId, _reportType, _reportTypeProvided, _userId, _addUserDefaultPrinter, validPrintersList);

        ttsbegin;

        // First add the @DEFAULT_PRINTER@ token
        if (_addUserDefaultPrinter)
        {
            _tmpTable.clear();
            _tmpTable.PrinterName = DocConstant::DefaultPrinterPlaceholder;
            _tmpTable.insert();

            cnt++;
        }

        // Populate the tmp table based on the printer names in validPrintersList
        if (validPrintersList.elements() > 0)
        {
            ListEnumerator le = validPrintersList.getEnumerator();
            le.reset();

            while (le.moveNext())
            {
                select firstonly PrinterName, Description, PrinterPath, Active from networkPrinters 
                    where networkPrinters.PrinterName == le.current();

                DocPrinterSelectorTmp::insertOnePrinter(_tmpTable, networkPrinters);
                cnt++;
            }
        }

        ttscommit;

        return cnt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:DocPrinterSelectorTmpDD</DeveloperDocumentation>
	<Label>@DocentricAX4:PrinterSelection</Label>
	<TitleField1>PrinterName</TitleField1>
	<TitleField2>Active</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrinterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrinterPath</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrinterName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS62708</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrinterPath</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FilePath</ExtendedDataType>
			<Label>@SYS7406</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24676</Label>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>