<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocElectronicSignatureAppearance</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Framework;
using Docentric.AX.Documents.Pdf.DigitalSignature;

public class DocElectronicSignatureAppearance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>imageDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for image dimensions in pixels and selected unit.
    /// </summary>
    /// <returns>Image dimension in pixels and selected unit</returns>
    [SysClientCacheDataMethodAttribute]
    public display DocSignatureImageDimensions imageDimensions()
    {
        if (this.SignatureImage)
        {
            using (var image = System.Drawing.Image::FromStream(DocGlobalHelper::convertContainerToMemoryStream(this.SignatureImage), false, false))
            {
                DocDocumentLengthUnit signatureUnitOfMeasure;
                signatureUnitOfMeasure = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                             signatureUnitOfMeasure.GetType(),
                                             enumNum(DocDocumentUnitOfMeasure),
                                             this.UnitOfMeasure);

                real widthInUnit = DocDocumentLength::Convert(DocDocumentLengthUnit::Pixel, image.Width, signatureUnitOfMeasure);
                real heightInUnit = DocDocumentLength::Convert(DocDocumentLengthUnit::Pixel, image.Height, signatureUnitOfMeasure);

                return strFmt('%1 x %2 px\n%3 x %4 %5', image.Width, image.Height, widthInUnit, heightInUnit, strLwr(enum2Str(this.UnitOfMeasure)));
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values with default values in a new record.
    /// </summary>
    public void initValue()
    {
        super();

        DocElectronicSignatureAppearanceSettings defaultSignatureAppearaneSettings = DocElectronicSignatureAppearanceSettings::constructWithDefaults();

        this.SignatureAppearOnPage = defaultSignatureAppearaneSettings.parmSignatureAppearOnPage();
        this.SignaturePosition = defaultSignatureAppearaneSettings.parmSignaturePosition();
        this.SignatureAppearanceType = defaultSignatureAppearaneSettings.parmSignatureAppearanceType();
        this.UnitOfMeasure = defaultSignatureAppearaneSettings.parmUnitOfMeasure();
        this.Width = defaultSignatureAppearaneSettings.parmWidth();
        this.Height = defaultSignatureAppearaneSettings.parmHeight();
        this.HorizontalOffset = defaultSignatureAppearaneSettings.parmHorizontalOffset();
        this.VerticalOffset = defaultSignatureAppearaneSettings.parmVerticalOffset();
        this.Font = defaultSignatureAppearaneSettings.parmSignatureFont();
        this.FontSize = defaultSignatureAppearaneSettings.parmSignatureFontSize();
        this.SignatureSealIconShow = defaultSignatureAppearaneSettings.parmSignatureSealIconShow();
        this.SignerPreview = "@DocentricAX3:ElectronicSignatureAppearanceSignerPreviewValue";
        this.ReasonPreview = "@DocentricAX3:ElectronicSignatureAppearanceReasonPreviewValue";
        this.LocationPreview = "@DocentricAX3:ElectronicSignatureAppearanceLocationPreviewValue";
        this.ContactPreview = "@DocentricAX3:ElectronicSignatureAppearanceContactPreviewValue";
        this.PageSizePreview = this.UnitOfMeasure == DocDocumentUnitOfMeasure::Inch ? DocSignaturePageSize::Letter : DocSignaturePageSize::A4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocElectronicSignatureAppearance table.
    /// </summary>
    /// <param name = "_appearanceId">Signature appearance Id.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the DocElectronicSignatureAppearance table; otherwise, an empty record.</returns>
    public static DocElectronicSignatureAppearance find(DocElectronicSignatureAppearanceId _appearanceId, boolean _forUpdate = false)
    {
        DocElectronicSignatureAppearance appearance;

        appearance.selectForUpdate(_forUpdate);

        select firstonly appearance 
            where appearance.SignatureAppearanceId == _appearanceId;

        return appearance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSignatureAppearancePreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the signature appearance preview depending on signature appearance settings.
    /// </summary>
    /// <returns>Signature appearance preview as memory stream</returns>
    private System.IO.MemoryStream generateSignatureAppearancePreview()
    {
        System.IO.MemoryStream signaturePreviewStream = null;

        try
        {
            // Create the PDF signature settings
            DocPdfSignatureSettings signatureSettings = DocPdfSignatureSettings::construct();
            signatureSettings.parmReason(this.ReasonPreview);
            signatureSettings.parmLocation(this.LocationPreview);
            signatureSettings.parmContact(this.ContactPreview);
            signatureSettings.parmSignatureAppearanceSettings(DocElectronicSignatureAppearanceSettings::construct(this.SignatureAppearanceId));

            // Get PDF signature options for provided PDF signature settings
            DocPdfSignatureOptions signatureOptions = DocPdfSecurityManager::getPdfSignatureOptions(signatureSettings);

            // Set signature preview options
            DocSignatureAppearancePreviewOptions signaturePreviewOptions = new DocSignatureAppearancePreviewOptions();
            signaturePreviewOptions.SignerName = this.SignerPreview;
            signaturePreviewOptions.PageOrientation = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                          signaturePreviewOptions.PageOrientation.GetType(),
                                                          enumNum(DocSignaturePageOrientation),
                                                          this.PageOrientationPreview);
            signaturePreviewOptions.PageSize = DocGlobalHelper::getDotNetEnumValueForXppEnumValue(
                                                   signaturePreviewOptions.PageSize.GetType(),
                                                   enumNum(DocSignaturePageSize),
                                                   this.PageSizePreview);

            // Generate the PDF signature appearance preview for provided PDF signature options
            signaturePreviewStream = new System.IO.MemoryStream();
            DocPdfSigner::GenerateSignatureApperancePreview(signaturePreviewStream, signatureOptions, signaturePreviewOptions);
            signaturePreviewStream.Position = 0;
        }
        catch
        {
            Global::exceptionTextFallThrough();
        }

        return signaturePreviewStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSignatureAppearancePreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the signature appearance preview memory stream as attachment.
    /// </summary>
    /// <param name = "_signaturePreviewStream">The signature appearance preview memory stream</param>
    private void saveSignatureAppearancePreview(System.IO.MemoryStream _signaturePreviewStream)
    {
        try
        {
            DocuRef docuRef = DocuRef::findTableIdRecId(this.DataAreaId, this.TableId, this.RecId);
            docuRef.selectForUpdate(true);
            ttsbegin;

            if (!docuRef)
            {
                docuRef.clear();
                docuRef.RefTableId = this.TableId;
                docuRef.RefRecId = this.RecId;
                docuRef.RefCompanyId = this.DataAreaId;
                docuRef.TypeId = DocuType::typeFile();
                docuRef.Name = this.SignatureAppearanceId;
                docuRef.Notes = '';
                docuRef.Author = 0;
                docuRef.Restriction = DocuRestriction::Internal;
                docuRef.CategoryId_DC = '';
                docuRef.Tags_DC = '';
                docuRef.LanguageId_DC = '';
                docuRef.ActiveFrom_DC = dateNull();
                docuRef.ActiveTo_DC = dateNull();
                docuRef.insert();
            }

            _signaturePreviewStream.Position = 0;
            DocuActionFile docuActionFile = docuRef.docuAction();
            docuActionFile.attachFile(docuRef, strFmt('%1.%2', strLRTrim(this.SignatureAppearanceId), DocConstantFile::FileExtPdf), DocConstantFile::MimeTypePdf, _signaturePreviewStream);

            ttscommit;
        }
        catch
        {
            Global::exceptionTextFallThrough();
        }
        finally
        {
            if (_signaturePreviewStream)
            {
                _signaturePreviewStream.Dispose();
                _signaturePreviewStream = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocElectronicSignatureAppearance_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the signature appearance preview depending on signature appearance settings and saves it as attachment.
    /// The event is called after the signature appearance settings are inserted.
    /// </summary>
    /// <param name="sender">An instance of Common record.</param>
    /// <param name="e">A DataEventArgs object.</param>
    [DataEventHandler(tableStr(DocElectronicSignatureAppearance), DataEventType::Inserted)]
    public static void DocElectronicSignatureAppearance_onInserted(Common sender, DataEventArgs e)
    {
        DocElectronicSignatureAppearance signatureAppearance = sender as DocElectronicSignatureAppearance;
        if (signatureAppearance)
        {
            signatureAppearance.saveSignatureAppearancePreview(signatureAppearance.generateSignatureAppearancePreview());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocElectronicSignatureAppearance_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the signature appearance preview depending on signature appearance settings and saves it as attachment.
    /// The event is called after the signature appearance setinngs are updated.
    /// </summary>
    /// <param name="sender">An instance of Common record.</param>
    /// <param name="e">A DataEventArgs object.</param>
    [DataEventHandler(tableStr(DocElectronicSignatureAppearance), DataEventType::Updated)]
    public static void DocElectronicSignatureAppearance_onUpdated(Common sender, DataEventArgs e)
    {
        DocElectronicSignatureAppearance signatureAppearance = sender as DocElectronicSignatureAppearance;
        if (signatureAppearance)
        {
            signatureAppearance.saveSignatureAppearancePreview(signatureAppearance.generateSignatureAppearancePreview());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the DocElectronicSignatureAppearance table exists.
    /// </summary>
    /// <param name="_signatureAppearanceId">Signature appearance Id</param>
    /// <returns>True if the specified record exists; otherwise, false.</returns>
    public static boolean exist(DocElectronicSignatureAppearanceId _signatureAppearanceId)
    {
        return _signatureAppearanceId && (select firstonly RecId from DocElectronicSignatureAppearance
                    where DocElectronicSignatureAppearance.SignatureAppearanceId == _signatureAppearanceId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the value of the field is changed.
    /// </summary>
    /// <param name = "_fieldId">Field Id</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(DocElectronicSignatureAppearance, SignatureLanguageToUse):
                if (this.SignatureLanguageToUse != DocSignatureLanguageToUse::ExplicitlyDefined)
                {
                    this.SignatureLanguageId = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a referenced form that contains data for the field SignatuewAppearanceId.
    /// </summary>
    /// <param name = "_caller">Caller object</param>
    /// <param name = "_signatureAppearanceId">Signature appearance Id</param>
    public static void jumpRef(Object _caller, DocElectronicSignatureAppearanceId _signatureAppearanceId)
    {
        Args args = new Args();
        args.lookupRecord(DocElectronicSignatureAppearance::find(_signatureAppearanceId));
        args.caller(_caller);

        new MenuFunction(menuItemDisplayStr(DocElectronicSignatureAppearance), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record values.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        switch (this.SignatureAppearanceType)
        {
            case DocSignatureAppearanceType::ImageOnly:
            case DocSignatureAppearanceType::ImageBelowText:
            case DocSignatureAppearanceType::ImageAsBackground:
                if (this.SignatureImage == conNull())
                {
                    ret = ret && checkFailed(strFmt("@DocentricAX3:ElectronicSignatureAppearanceISignatureImageIsMissingError", enum2Str(this.SignatureAppearanceType)));
                }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:ElectronicSignatureAppearanceDD</DeveloperDocumentation>
	<FormRef>DocElectronicSignatureAppearance</FormRef>
	<Label>@DocentricAX3:ElectronicSignatureAppearance</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SignatureAppearanceId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>AppearanceIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>AppearanceIdx</PrimaryIndex>
	<ReplacementKey>AppearanceIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Navigation</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureSealIconShow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PositionOnPage</Name>
			<Label>@DocentricAX3:ElectronicSignatureAppearancePositionOnPageGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignaturePosition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RectangleOffset</Name>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceRectangleOffsetGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HorizontalOffset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VerticalOffset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RectangleSize</Name>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceRectangleSizeGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PositionOnDocument</Name>
			<Label>@DocentricAX3:ElectronicSignatureAppearancePositionOnDocumentGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureAppearOnPage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Text</Name>
			<Label>@DocentricAX3:EloectronicSignatureAppearanceTextGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Font</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FontSize</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ImageDimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>imageDimensions</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Language</Name>
			<Label>@DocentricAX3:EloectronicSignatureAppearanceSignatureLanguageGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureLanguageToUse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureLanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureDateTimeFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Image</Name>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceImage</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignatureImage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignatureImageMimeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewTextValues1</Name>
			<Label>@DocentricAX3:EloectronicSignatureAppearancePreviewTextValuesGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignerPreview</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonPreview</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewTextValues2</Name>
			<Label>@DocentricAX3:EloectronicSignatureAppearancePreviewTextValuesGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocationPreview</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPreview</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewPageProperties</Name>
			<Label>@DocentricAX3:EloectronicSignatureAppearancePreviewPagePropertiesGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PageOrientationPreview</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PageSizePreview</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SignatureAppearanceId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocElectronicSignatureAppearanceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignatureAppearanceType</Name>
			<EnumType>DocSignatureAppearanceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignaturePosition</Name>
			<EnumType>DocSignaturePosition</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HorizontalOffset</Name>
			<ExtendedDataType>DocSignatureAppearanceHorizontalOffset</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VerticalOffset</Name>
			<ExtendedDataType>DocSignatureAppearanceVerticalOffset</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<ExtendedDataType>DocSignatureAppearanceWidth</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<ExtendedDataType>DocSignatureAppearanceHeight</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>SignatureImage</Name>
			<ExtendedDataType>DocSignatureImage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Font</Name>
			<EnumType>DocSignatureFont</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FontSize</Name>
			<ExtendedDataType>FontSize</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureAppearanceFontSizeHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceFontSize</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitOfMeasure</Name>
			<EnumType>DocDocumentUnitOfMeasure</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignatureAppearOnPage</Name>
			<EnumType>DocSignatureAppearOnPage</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignatureLanguageToUse</Name>
			<EnumType>DocSignatureLanguageToUse</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SignatureLanguageId</Name>
			<ExtendedDataType>LanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SignatureDateTimeFormat</Name>
			<ExtendedDataType>DocFormatString</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureAppearanceDateTimeFormatHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceDateTimeFormat</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SignatureImageMimeType</Name>
			<ExtendedDataType>String20</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureAppearanceImageMimeTypeHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceImageMimeType</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignatureSealIconShow</Name>
			<ExtendedDataType>DocSignatureSealIconShow</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SignatureAppearanceGroup</Name>
			<ExtendedDataType>DocSignatureAppearanceGroupRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SignerPreview</Name>
			<ExtendedDataType>DocPdfSignatureSigner</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureAppearanceSignerPreviewHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceSignerPreview</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonPreview</Name>
			<ExtendedDataType>DocPdfSignatureReason</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureAppearanceReasonPreviewHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceReasonPreview</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocationPreview</Name>
			<ExtendedDataType>DocPdfSignatureLocation</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureAppearanceLocationPreviewHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceLocationPreview</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPreview</Name>
			<ExtendedDataType>DocPdfSignatureContact</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureAppearanceContactPreviewHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureAppearanceContactPreview</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PageOrientationPreview</Name>
			<EnumType>DocSignaturePageOrientation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PageSizePreview</Name>
			<EnumType>DocSignaturePageSize</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AppearanceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SignatureAppearanceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocElectronicSignatureAppearanceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocElectronicSignatureAppearanceGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SignatureAppearanceGroup</Name>
					<Field>SignatureAppearanceGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>