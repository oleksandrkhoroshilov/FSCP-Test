<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTraceParam</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocTraceParam extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record before writing it to the table.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        boolean checkEnumStr(str _s, EnumId _enumId)
        {
            SysDictEnum sysDictEnum = new SysDictEnum(_enumId);
            int enumValue = sysDictEnum.symbol2Value(_s);

            if (sysDictEnum.value2Symbol(enumValue) != _s)
            {
                return checkFailed(strFmt('Invalid parameter value %1. Expected enum value from %2.', _s, sysDictEnum.name()));
            }
            
            return true;
        }

        switch (this.ParamName)
        {
            case DocConstantDiagnostics::TraceDRADocument:
            case DocConstantDiagnostics::TraceInstallation:
            case DocConstantDiagnostics::TracePosting:
            case DocConstantDiagnostics::TracePostingPrint:
            case DocConstantDiagnostics::TraceSSRS:
            case DocConstantDiagnostics::TracePrintMgmt:
            case DocConstantDiagnostics::TraceDocentric:
            case DocConstantDiagnostics::TraceAlerts:
            case DocConstantDiagnostics::TraceEngineSettings:
            case DocConstantDiagnostics::TraceReportExecTimes:
            case DocConstantDiagnostics::TraceTraceToInfolog:
            case DocConstantDiagnostics::TraceTraceToDatabase:
            case DocConstantDiagnostics::TraceDDSP:
            case DocConstantDiagnostics::TraceDocentricTemplate:
            case DocConstantDiagnostics::TraceGeneratedDocument:
            case DocConstantDiagnostics::TraceGeneratedDocumentInMemory:

                ret = ret && checkEnumStr(this.ParamValue, enumNum(EnableDisable));
                break;

            case DocConstantDiagnostics::TraceTraceFile:
                break;

            default:
                return checkFailed(strFmt('Unsupported parameter name %1', this.ParamName));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specified tracing parameter for the specified user.
    /// </summary>
    /// <param name = "_name">Tracing parameter name</param>
    /// <param name = "_userId">User Id</param>
    /// <returns>Tracing parameter</returns>
    private static DocTraceParam get(DocParamName _name, UserId _userId = curUserId())
    {
        DocTraceParam traceParam;
        
        select firstOnly traceParam order by UserId desc where
            traceParam.ParamName == _name &&
            (traceParam.UserId == _userId || (!traceParam.UserId));

        return traceParam;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the provided tracing parameter is enabled for the current user.
    /// </summary>
    /// <param name = "_name">Tracing parameter name</param>
    /// <returns>True if the provided tracing parameter is enabled for the current user; otherwise false</returns>
    public static boolean isEnabled(DocParamName _name)
    {
        DocTraceParam  traceParam = DocTraceParam::get(_name);

        if (!traceParam.RecId)
        {
            return false;
        }

        return (traceParam.ParamValue == enum2Symbol(enumNum(EnableDisable), EnableDisable::Enable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values with default values in a new record.
    /// </summary>
    public void initValue()
    {
        boolean paramExists(DocParamName _paramName)
        {
            DocTraceParam traceParam;
            select firstonly traceParam where traceParam.ParamName == _paramName;
            return traceParam.RecId != 0;
        }

        // Add here new trace parameters.
        container traceParams = [
            DocConstantDiagnostics::TracePosting,
            DocConstantDiagnostics::TracePostingPrint,
            DocConstantDiagnostics::TraceSSRS,
            DocConstantDiagnostics::TracePrintMgmt,
            DocConstantDiagnostics::TraceDocentric,
            DocConstantDiagnostics::TraceAlerts,
            DocConstantDiagnostics::TraceEngineSettings,
            DocConstantDiagnostics::TraceReportExecTimes,
            DocConstantDiagnostics::TraceTraceToInfolog,
            DocConstantDiagnostics::TraceTraceToDatabase,
            DocConstantDiagnostics::TraceDRADocument,
            DocConstantDiagnostics::TraceDDSP,
            DocConstantDiagnostics::TraceDocentricTemplate,
            DocConstantDiagnostics::TraceGeneratedDocument
            // DocConstantDiagnostics::TraceGeneratedDocumentInMemory  // NOTE: We will not be offering this Trace parameter since the tracing document generation in memory is not a common need.
        ];
        
        for (int i = 1; i <= conLen(traceParams); i++)
        {
            DocParamName currentParamName = conPeek(traceParams, i);
            if (!paramExists(currentParamName))
            {
                this.ParamName = currentParamName;
                this.ParamValue = enum2Symbol(enumNum(EnableDisable), EnableDisable::Disable);
                break;
            }
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:TraceParamsDesc</DeveloperDocumentation>
	<Label>@DocentricAX3:TraceParams</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>ParamName</TitleField1>
	<TitleField2>UserId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ParmNameUserIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ParmNameUserIdx</PrimaryIndex>
	<ReplacementKey>ParmNameUserIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParamName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParamValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParamName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParamName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocParamName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<ExtendedDataType>SysUserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParamValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocParamValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ParmNameUserIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParamName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<Field>UserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>