<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintJobHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrintJobHeader extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateFromPrintArchiveInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the DocPrintJobHeader record from an instance of the DocReportPrintArchiveInfo class.
    /// </summary>
    /// <param name = "_printArchiveInfo">An instance of the DocReportPrintArchiveInfo class</param>
    public void populateFromPrintArchiveInfo(DocReportPrintArchiveInfo _printArchiveInfo)
    {
        if (_printArchiveInfo != null)
        {
            // Save the target print destination info.
            this.PrintDestination = _printArchiveInfo.getPrintDestination();
            this.PrintDestinationInfo = _printArchiveInfo.getPrintDestinationInfo();

            // Save the packed SrsPrintDestinationSettings, but first delete any additional email attachments, if there are any.
            // Note that we will keep images used in the email body and save them to DB
            // because otherwise we won't be able to resend emails from Print archive.
            if (_printArchiveInfo.parmSrsPrintDestinationSettings().parmEmailPrintDestSettings_DC().parmEmailAdditionalAttachments() == conNull())
            {
                this.PrintDestinationSettingsPacked = _printArchiveInfo.parmSrsPrintDestinationSettings().pack();
            }
            else
            {
                SRSPrintDestinationSettings srsPds = new SRSPrintDestinationSettings(_printArchiveInfo.parmSrsPrintDestinationSettings().pack());
                srsPds.parmEmailPrintDestSettings_DC().parmEmailAdditionalAttachments(conNull());
                this.PrintDestinationSettingsPacked = srsPds.pack();
            }

            // Save the packed DocReportPrintArchiveInfo settings but without SrsPrintDestinationSettings, DocArchiveContract and DDSP.
            // (please see the packForStoringToDb() method of the DocPrintPrintArchiveInfo class).
            // This object contains meaningful information such as ID of the Document type used
            // for saving the report and email attachments content to Print archive, etc.
            this.PrintArchiveInfoPacked = _printArchiveInfo.packForStoringToDb();

            // Save the report metadata stored in Archive contract.
            DocArchiveContract archiveContract = _printArchiveInfo.getArchiveContract();
            if (archiveContract != null)
            {
                if (!archiveContract.parmIsProforma())
                {
                    this.JournalRecId = archiveContract.parmJournalRecId();
                    this.JournalType = archiveContract.parmJournalType();
                }
                this.DocumentId = archiveContract.parmDocumentId();
                this.DocumentDate = archiveContract.parmDocumentDate();
                this.AccountNum = archiveContract.parmAccountNum();
                this.AccountRole = archiveContract.parmAccountRole();
                this.SourceTableId = archiveContract.parmSourceTableId();
                this.SourceTableType = archiveContract.parmSourceTableType();
                this.ReportInfo = archiveContract.parmCustomInfo();
                this.ExecutionTime = archiveContract.parmExecutionTime();
                this.IsProforma = archiveContract.parmIsProforma();
            }
            
            // Set the document date to the current date (if not set)
            if (this.DocumentDate == dateNull())
            {
                utcdatetime currentDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
                this.DocumentDate = DateTimeUtil::date(currentDateTime);
            }

            // Set Report ID and Template ID.
            DocPrintReportSettings printReportSettings = _printArchiveInfo.parmPrintReportSettings();
            this.ReportId = printReportSettings.parmReportId();
            this.TemplateId = printReportSettings.parmTemplateId();
            
            // Set Print archive note.
            this.PrintArchiveNote = printReportSettings.parmSaveToArchiveNote();

            // Set PDF Security related fields.
            this.SignedPdf = _printArchiveInfo.isReportPrintedAsSignedPdf();
            this.EncryptedPdf = _printArchiveInfo.isReportPrintedAsEncryptedPdf();
            this.EncryptedPdfConditions = _printArchiveInfo.getPdfEncryptionConditions();

            // Set PDF/A conformance level.
            this.PdfAConformanceLevel = printReportSettings.parmPdfAConformanceLevel();
        }

        // Give a chance to override these settings before saving them to the database.
        boolean cancelExecution = DocOutputManagerPublisher::publishEvent_saveToPrintArchive(this, _printArchiveInfo);
        if (cancelExecution)
        {
            RecId printJobHeaderRecId_Stored = this.PrintJobHeaderRecId;
            boolean isDocentricReport_Stored = this.IsDocentricReport;
            str reportParameters_Stored = this.ReportParameters;

            this.clear();

            this.PrintJobHeaderRecId = printJobHeaderRecId_Stored;
            this.IsDocentricReport = isDocentricReport_Stored;
            this.ReportParameters = reportParameters_Stored;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for a journal caption.
    /// </summary>
    /// <returns>The journal caption</returns>
    [SysClientCacheDataMethodAttribute(true)]
    display DocJournalCaption journalCaption()
    {
        Common findJournal(TableId _tableId)
        {
            Common rec = new DictTable(_tableId).makeRecord();

            select firstonly rec where rec.RecId == this.JournalRecId;

            return rec;
        }      
        
        switch (this.JournalType)
        {
            case DocJournalType::CustInvoiceJour:
                return CustInvoiceJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::CustCollectionLetterJour:
                return CustCollectionLetterJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::CustInterestJour:
                return CustInterestJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::ProjInvoiceJour:
                return ProjInvoiceJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::VendPackingSlipJour:
                return VendPackingSlipJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::VendPurchOrderJour:
                return VendPurchOrderJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::PurchConfirmationRequestJour:
                return findJournal(tableNum(PurchConfirmationRequestJour)).caption();
            
            case DocJournalType::VendReceiptsListJour:
                return VendReceiptsListJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::VendRFQJour:
                return findJournal(tableNum(VendRFQJour)).caption();

            case DocJournalType::CustConfirmJour:           
                return CustConfirmJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::CustPackingSlipJour:            
                return CustPackingSlipJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::CustQuotationJour:
                return CustQuotationJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::CustQuotationConfirmJour:
                return CustQuotationConfirmJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::VendInvoiceJour:
                return VendInvoiceJour::findRecId(this.JournalRecId).caption();

            case DocJournalType::WMSPickingRoute:
                return findJournal(tableNum(WMSPickingRoute)).caption();

            case DocJournalType::PurchAgreementHeaderHistory:
                PurchAgreementHeaderHistory purchAgreementHeaderHistory;
                
                select firstonly purchAgreementHeaderHistory
                    where purchAgreementHeaderHistory.recId == this.JournalRecId;

                return purchAgreementHeaderHistory.caption();

            case DocJournalType::SalesAgreementHeaderHistory:
                SalesAgreementHeaderHistory salesAgreementHeaderHistory;
                
                select firstonly salesAgreementHeaderHistory
                    where salesAgreementHeaderHistory.recId == this.JournalRecId;

                return salesAgreementHeaderHistory.caption();
        }
 
        return ''; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintJobHeader_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event handler called after the record in the PrintJobHeader table has been deleted.
    /// </summary>
    /// <param name = "_sender">Sender</param>
    /// <param name = "_e">Event args</param>
    [DataEventHandler(tableStr(PrintJobHeader), DataEventType::Deleted)]
    public static void PrintJobHeader_onDeleted(Common _sender, DataEventArgs _e)
    {
        ttsbegin;

        DocPrintJobHeader docPjh = DocPrintJobHeader::findByPrintJobHeader(_sender.RecId, true);
        docPjh.delete();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record.
    /// </summary>
    public void delete()
    {
        ttsBegin;
        
        // Delete all related attachments.
        DocuRef docuRef;

        // Delete the current DocuRef, the attached file if exists, and the related DocuValue record.
        delete_from docuRef
            where docuRef.RefRecId == this.RecId 
               && docuRef.RefTableId == this.TableId;

        // Delete the record itself.
        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedPrintHeaderJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related PrintJobHeader record for the specified PrintJobHeader record Id.
    /// </summary>
    /// <param name = "_printJobHeaderRecId">PrintJobHeader record Id</param>
    public static void deleteRelatedPrintHeaderJob(RecId _printJobHeaderRecId)
    {
        if (_printJobHeaderRecId == 0)
        {
            return;
        }

        ttsBegin;
   
        // Delete the related attachments (there should be the exactly one attachment - archived report in PDF format)
        DocuRef docuRef;

        // Delete the current DocuRef, the attached file if exists, and the related DocuValue record.
        delete_from docuRef
            where docuRef.RefRecId == _printJobHeaderRecId 
               && docuRef.RefTableId == tableNum(PrintJobHeader);

        // Delete the PrintJobHeader record.
        PrintJobHeader printJobHeader;
        select firstonly forupdate printJobHeader where printJobHeader.RecId == _printJobHeaderRecId;
        printJobHeader.delete();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocentricReportArchiveName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the report archived with Docentric.
    /// </summary>
    /// <returns>The name of the report archived with Docentric</returns>
    public str getDocentricReportArchiveName()
    {        
        DocuRef docuRef;
        
        select firstonly Name from docuRef
            index hint RefIdx
            where docuRef.RefCompanyId == curExt()
                && docuRef.RefTableId == DocuRef::GetRootTableID(tableNum(PrintJobHeader))
                && docuRef.RefRecId == this.PrintJobHeaderRecId;
        
        return docuRef.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportPrintedWithDocentricInOriginalFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report in the original file format printed with Docentric.
    /// </summary>
    /// <param name = "_fallbackToPdf">
    /// If true and the report is printed in the file format different than PDF but it wasn't archived
    /// due to configuration or previous Docentric versions, the method will return the PDF document,
    /// which is always archived and stored in the PrintJobHeader Attachments.
    /// </param>
    /// <returns>DocDocuAttachment object with the archived report content, filename and the related DocuRef</returns>
    public DocDocuAttachment getReportPrintedWithDocentricInOriginalFormat(boolean _fallbackToPdf = false)
    {  
        str originalReportFileFormat = '';

        boolean isOriginalReportFormatPdf_WhenPrintedWithDocentric()
        {
            boolean isOriginalFormatPDF;

            container srsPdPacked = this.PrintDestinationSettingsPacked;
            SRSPrintDestinationSettings srsPd = new SRSPrintDestinationSettings(srsPdPacked);

            // Only Email and File print destinations can have output file format different from PDF.
            switch (this.PrintDestination)
            {
                case DocPrintDestinationArchive::Email:
                    if (srsPd.parmEmailPrintDestSettings_DC().parmEmailAttachmentUseSsrsBuiltInDesign())
                    {
                        isOriginalFormatPDF = srsPd.parmEmailPrintDestSettings_DC().parmEmailAttachmentFileFormatSrs() == SRSReportFileFormat::PDF;
                        originalReportFileFormat = strFmt('%1', srsPd.parmEmailPrintDestSettings_DC().parmEmailAttachmentFileFormatSrs());
                    }
                    else
                    {
                        isOriginalFormatPDF = srsPd.parmEmailPrintDestSettings_DC().parmEmailAttachmentFileFormat() == DocOutputFileFormat::PDF;
                        originalReportFileFormat = strFmt('%1', srsPd.parmEmailPrintDestSettings_DC().parmEmailAttachmentFileFormat());
                    }
                    break;

                case DocPrintDestinationArchive::File:
                    if (srsPd.parmFilePrintDestSettings_DC().parmUseSsrsBuiltInDesign())
                    {
                        isOriginalFormatPDF = srsPd.parmFilePrintDestSettings_DC().parmOutputFileFormatSrs() == SRSReportFileFormat::PDF;
                        originalReportFileFormat = strFmt('%1', srsPd.parmFilePrintDestSettings_DC().parmOutputFileFormatSrs());
                    }
                    else
                    {
                        isOriginalFormatPDF = srsPd.parmFilePrintDestSettings_DC().parmOutputFileFormat() == DocOutputFileFormat::PDF;
                        originalReportFileFormat = strFmt('%1', srsPd.parmFilePrintDestSettings_DC().parmOutputFileFormat());
                    }
                    break;

                default:  // Printer, Screen, Archive.
                    isOriginalFormatPDF = true;
                    originalReportFileFormat = strFmt('%1', DocOutputFileFormat::PDF);
            }

            return isOriginalFormatPDF;
        }

        DocuRef reportDocuRef;
        PrintJobHeader printJobHeader;
        if (isOriginalReportFormatPdf_WhenPrintedWithDocentric())
        {
            // If original format is PDF, then we didn't store anything on DocPrintJobHeader.
            // Return the PDF file which we always store on PrintJobHeader.
            select firstonly printJobHeader where printJobHeader.RecId == this.PrintJobHeaderRecId;
            reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_FromPrintJobHeader(printJobHeader);
            if (!reportDocuRef)
            {
                // It should never happen.
                DocGlobalHelper::handleException(funcName(), "@DocentricAX3:OutputPdfFileNotFound");
            }
        }
        else
        {
            // Fetch the file from the DocPrintJobHeader attachment which has the name equal to DocConstant::ArchivedInOriginalFormatReportName
            // or to the name of the related PrintJobHeader.
            // If no such file exists, the reason is that for Email or File print destination, the report with non-PDF format was archived:
            //  - with ver. prior to 3.3.2,
            //    or
            //  - with ver. 3.3.5 or later, but saving in original format was disabled by setup.
            reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_FromDocPrintJobHeader(this);
            if (!reportDocuRef)
            {
                if (!_fallbackToPdf)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:OutputNonPdfFileNotFound", originalReportFileFormat));
                }
                else
                {
                    // Return the PDF file which we always store on PrintJobHeader.
                    select firstonly printJobHeader where printJobHeader.RecId == this.PrintJobHeaderRecId;
                    reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_FromPrintJobHeader(printJobHeader);
                    if (!reportDocuRef)
                    {
                        // It should never happen.
                        DocGlobalHelper::handleException(funcName(), "@DocentricAX3:OutputPdfFileNotFound");
                    }
                }
            }
        }

        return this.getReportAttachmentForDocuRef(reportDocuRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportInPdfFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the PDF file which we always store on PrintJobHeader, regardless if the report
    /// is printed in a file format different than PDF (e.g. Word or Excel).
    /// </summary>
    /// <returns>DocDocuAttachment object with the archived report content, filename and the related DocuRef</returns>
    public DocDocuAttachment getReportInPdfFormat()
    {
        PrintJobHeader printJobHeader;
        select firstonly printJobHeader where printJobHeader.RecId == this.PrintJobHeaderRecId;
        DocuRef reportDocuRef = DocPrintArchiveHelper::getReportDocuRef_FromPrintJobHeader(printJobHeader);
        if (!reportDocuRef)
        {
            // It should never happen.
            DocGlobalHelper::handleException(funcName(), "@DocentricAX3:OutputPdfFileNotFound");
        }
        
        return this.getReportInPdfFormatForDocuRef(reportDocuRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportInPdfFormatForDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the generated report in PDF format for the specified DocuRef table buffer.
    /// </summary>
    /// <param name = "_reportDocuRef">The DocueRef table buffer</param>
    /// <returns>DocDocuAttachment object with the archived report content, filename and the related DocuRef</returns>
    private DocDocuAttachment getReportInPdfFormatForDocuRef(DocuRef _reportDocuRef)
    {
        if (!_reportDocuRef || _reportDocuRef.fileType() != DocConstantFile::FileExtPdf)
        {
            // It should never happen.
            DocGlobalHelper::handleException(funcName(), "@DocentricAX3:OutputPdfFileNotFound");
        }

        return this.getReportAttachmentForDocuRef(_reportDocuRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportAttachmentForDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the generated report for the specified DocuRef buffer.
    /// </summary>
    /// <param name = "_reportDocuRef">The DocueRef table buffer</param>
    /// <returns>DocDocuAttachment object with the archived report content, filename and the related DocuRef</returns>
    private DocDocuAttachment getReportAttachmentForDocuRef(DocuRef _reportDocuRef)
    {
        // Prepare the result to return
        DocDocuAttachment reportAttachment = new DocDocuAttachment();
        reportAttachment.parmDocuRefRecId(_reportDocuRef.RecId);

        // Attachment name
        str reportFileName = strFmt('%1.%2', DocFileMngHelper::replaceInvalidCharsForFileName(this.getDocentricReportArchiveName()), _reportDocuRef.fileType());
        reportAttachment.parmFullFilename(reportFileName);
        
        // Attachment content
        try
        {
            reportAttachment.parmContent(DocumentManagement::getAttachmentAsContainer(_reportDocuRef));
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(),
                strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", _reportDocuRef.Name, _reportDocuRef.RecId, _reportDocuRef.refTablename()));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", _reportDocuRef.Name, _reportDocuRef.RecId, _reportDocuRef.refTablename()));
        }
        
        return reportAttachment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the DocPrintJobHeader table for specified record Id.
    /// </summary>
    /// <param name = "_recId">Record Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocPrintJobHeader table; otherwise, an empty record</returns>
    public static DocPrintJobHeader find(RefRecId _recId, boolean _forUpdate = false)
    {
        DocPrintJobHeader docPrintJobHeader;
    
        if (_recId)
        {
            docPrintJobHeader.selectForUpdate(_forUpdate);
    
            select firstonly docPrintJobHeader
                where docPrintJobHeader.RecId == _recId;
        }
    
        return docPrintJobHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPrintJobHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the DocPrintJobHeader table for specified PrintJobHeader record Id.
    /// </summary>
    /// <param name = "_printJobHeaderRecId">PrintJobHeader record Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocPrintJobHeader table; otherwise, an empty record</returns>
    public static DocPrintJobHeader findByPrintJobHeader(RefRecId _printJobHeaderRecId, boolean _forUpdate = false)
    {
        DocPrintJobHeader docPrintJobHeader;
    
        if (_printJobHeaderRecId)
        {
            docPrintJobHeader.selectForUpdate(_forUpdate);
    
            select firstonly docPrintJobHeader
                where docPrintJobHeader.PrintJobHeaderRecId == _printJobHeaderRecId;
        }
    
        return docPrintJobHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the PrintJobHeader record.
    /// </summary>
    /// <returns>Description of the PrintJobHeader record</returns>
    public str toString()
    {        
        str fullDescription = '';

        PrintJobHeader printJobHeader;
        select firstonly printJobHeader where printJobHeader.RecId == this.PrintJobHeaderRecId;

        if (printJobHeader)
        {
            fullDescription = strFmt('%1: %2, %3: %4',
                fieldPName(PrintJobHeader, CreatedDateTime), 
                DateTimeUtil::applyTimeZoneOffset(printJobHeader.CreatedDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                fieldPName(PrintJobHeader, JobDescription), 
                printJobHeader.jobDescription);
        }

        return fullDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>passwordDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the PDF encryption password. By default the returned value is masked.
    /// If the current table instance is a form data source and the form has the method
    /// getShowPasswordSet implemented then a check is made if the current record exists
    /// in the set returned by the implemented method. If it exists then the returned
    /// value is NOT masked.
    /// </summary>
    /// <returns>PDF encryption password.</returns>
    public display DocGeneratedReportEncryptedPdfPassword passwordDisplay()
    {
        // Checks if the PDF document is encrypted
        if (!this.EncryptedPdf)
        {
            return '';
        }

        // Initializes the set of records with the shown password
        Set showPasswordSet = new Set(Types::Int64);
        // Checks if current table instance is a form data source
        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataSource fds = FormDataUtil::getFormDataSource(this);
            if (fds)
            {
                FormRun fr = fds.formRun();
                // Checks if the method getShowPassword exists on the current form
                if (fr && formHasMethod(fr, identifierStr(getShowPasswordSet_DC)))
                {
                    // Gets the set of records with the shown password
                    DictClass frDictClass = new DictClass(classNum(FormRun));
                    if (frDictClass)
                    {
                        showPasswordSet = frDictClass.callObject(identifierStr(getShowPasswordSet_DC), fr);
                    }
                }
            }
        }

        // If the current record does not exist in the set the password is masked
        return showPasswordSet.in(this.RecId) ? DocReportPdfSecurityManager::getPassword(this) : strRep('*', 10);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailAttachmentsFromPrintDestinationSettings</Name>
				<Source><![CDATA[
    /******************************************************************************************************/
    /*                    Getting Additional Email Attachments                                            */
    /******************************************************************************************************/

    /// <summary>
    /// Gets the list of email attachments from an instance of the SRSPrintDestinationSettings class.
    /// </summary>
    /// <param name = "_srsPd">An instance of the SRSPrintDestinationSettings class</param>
    /// <returns>The list of email attachments</returns>
    private List getEmailAttachmentsFromPrintDestinationSettings(SRSPrintDestinationSettings _srsPd)
    {
        List reportAttachments = new List(Types::Class);
        DocDocuAttachment attachmentDocument;

        container additionalAttachmentsPacked = _srsPd.parmEmailPrintDestSettings_DC().parmEmailAdditionalAttachments();
        for (int i = 1; i <= conLen(additionalAttachmentsPacked); i++)
        {
            container packedAttachment = conPeek(additionalAttachmentsPacked, i);

            attachmentDocument = new DocDocuAttachment();
            attachmentDocument.parmDocuRefRecId(0);
            attachmentDocument.parmFullFilename(conPeek(packedAttachment, 1));
            container content = conPeek(packedAttachment, 2);
            attachmentDocument.parmContent(content);

            reportAttachments.addEnd(attachmentDocument);
        }

        return reportAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailAttachmentsFromDocumentMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets email report attachments from document management as list.
    /// </summary>
    /// <returns>List of DocDocuAttachment objects</returns>
    private List getEmailAttachmentsFromDocumentMgmt()
    {
        List reportAttachments = new List(Types::Class);
        DocDocuAttachment attachmentDocument;
        
        DocuRef docuRef;
        DocuValue docuValue;

        reportAttachments = new List(Types::Class);

        while select docuRef
                index hint RefIdx
                where docuRef.RefCompanyId == curExt()
                    && docuRef.RefTableId == DocuRef::GetRootTableID(tableNum(DocPrintJobHeader))
                    && docuRef.RefRecId == this.RecId
                    && docuRef.Name != DocConstant::ArchivedInOriginalFormatReportName
                    && docuRef.Name != this.getDocentricReportArchiveName()
            join OriginalFileName from docuValue
                where docuValue.RecId == docuRef.ValueRecId
        {
            attachmentDocument = new DocDocuAttachment();
            attachmentDocument.parmDocuRefRecId(docuRef.RecId);

            // Attachment name
            // By default, the name of the attachment is always taken from the Name field in the DocuRef table. Only 
            // here it is taken from the OriginalFileName field in the DocuValue table, because the stored name of the 
            // attachment in the Name field in the DocuRef table is not the same. This situation  occurs when the 
            // additional email attachments have the same name as the original report attachment. In this case, the name 
            // of the additional attachments is changed and stored in the Name field in the DocuRef table.
            attachmentDocument.parmFullFilename(docuValue.OriginalFileName);
                
            // Attachment content
            try
            {
                attachmentDocument.parmContent(DocumentManagement::getAttachmentAsContainer(docuRef));
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(),
                        strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", docuRef.Name, docuRef.RecId, docuRef.refTablename()));
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(),
                        strFmt("@DocentricAX3:ErrorFetchingAttachmentContent", docuRef.Name, docuRef.RecId, docuRef.refTablename()));
            }

            reportAttachments.addEnd(attachmentDocument);
        }

        return reportAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailReportAttachmentsAsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get email report attachments as list.
    /// </summary>
    /// <returns>List of DocDocuAttachment objects</returns>
    public List getEmailReportAttachmentsAsList()
    {
        if (this.PrintDestination != DocPrintDestinationArchive::Email)
        {
            DocGlobalHelper::handleException(funcName(), 'This method can be called only for the Email print destination');
        }

        List reportAttachments;
        
        container srsPdPacked = this.PrintDestinationSettingsPacked;
        SRSPrintDestinationSettings srsPd = new SRSPrintDestinationSettings(srsPdPacked);

        if (srsPd.parmEmailPrintDestSettings_DC().parmEmailAdditionalAttachments() != conNull())
        {
            // With versions up to 3.3.3 we were saving the packed additional attachments
            // into the database in the following format:
            // [ [attachmentName, content], [attachmentName, content], ...]
            // Retrieve them from there.
            reportAttachments = this.getEmailAttachmentsFromPrintDestinationSettings(srsPd);
        }
        else
        {
            // If there is nothing stored as packed attachments in the database, it could be
            //      1. report without attachments archived up to ver. 3.3.3
            //      or
            //      2. report (a) with or (b) without attachments archived starting with ver. 3.3.4.
            // For case 2.a the attachments are in Document Management, so we fetch them from there.
            // Other cases are not of interest here.
            reportAttachments = this.getEmailAttachmentsFromDocumentMgmt();
        }

        return reportAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailReportAttachmentsForEmailMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get email report attachments as a container prepared in the format
    /// needed for creating the email message.
    /// </summary>
    /// <returns>[ [attachmentName, content], [attachmentName, content], ...]</returns>
    public container getEmailReportAttachmentsForEmailMessage()
    {
        if (this.PrintDestination != DocPrintDestinationArchive::Email)
        {
            DocGlobalHelper::handleException(funcName(), 'This method can be called only for the Email print destination');
        }
        
        container srsPdPacked = this.PrintDestinationSettingsPacked;
        SRSPrintDestinationSettings srsPd = new SRSPrintDestinationSettings(srsPdPacked);
        
        // With versions up to 3.3.3 we were saving the packed additional attachments
        // into the database in the same format as the one we need for the email message:
        // [ [attachmentName, content], [attachmentName, content], ...].
        // So if that container isn't empty, just retrieve it and return it.
        if (srsPd.parmEmailPrintDestSettings_DC().parmEmailAdditionalAttachments() != conNull())
        {
            return srsPd.parmEmailPrintDestSettings_DC().parmEmailAdditionalAttachments();
        }
        
        // If there is nothing stored as packed attachments in the database, it could be
        //      1. report without attachments archived up to ver. 3.3.3, or
        //      2. report (a) with or (b) without attachments archived starting with ver. 3.3.4.
        // For case 2.a the attachments are in Document Management, so we fetch them from there.
        // Other cases are not of interest here.
        List reportAttachmentsList = this.getEmailReportAttachmentsAsList();
        if (reportAttachmentsList.elements() == 0)
        {
            // No attachments are stored. Check if the report had attachments, but they were
            // not stored because of the setup. In that case we raise an error, because
            // we must re-create exactly the same email message as was sent.
            container printArchivePacked = this.PrintArchiveInfoPacked;
            DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
            printArchiveInfo.unpackFromDb(printArchivePacked);
            if (printArchiveInfo.hasAdditionalEmailAttachments())
            {
                // Mail had additional attachments, but they were not stored,
                // we can't create such email message
                DocGlobalHelper::handleException(funcName(), "@DocentricAX3:PrintArchiveEmailAttachmentsNotFound");
            }

            // Email had no attachments, return empty container
            return conNull();
        }
        
        // Reformat from list into the container expected by email message
        int cnt = 1;
        container reportAttachmentsCon;

        ListEnumerator le = new ListEnumerator();
        le = reportAttachmentsList.getEnumerator();

        while (le.moveNext())
        {
            DocDocuAttachment reportAttachmentObj = le.current();
            container con = [reportAttachmentObj.parmFullFilename(), reportAttachmentObj.parmContent()];
            reportAttachmentsCon = conIns(reportAttachmentsCon, cnt, con);
            cnt++;
        }

        return reportAttachmentsCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportPrintingStatus</Name>
				<Source><![CDATA[
    /******************************************************************************************************/
    /*   Getting Printing Status in relation to:                                                          */
    /*   >> Document routing status for Docentric Printer print destination                               */
    /*   >> Email sending status for Docentric Email print destination                                    */
    /******************************************************************************************************/

    /// <summary>
    /// Gets the report printing status.
    /// </summary>
    /// <returns>Report printing status</returns>
    public DocReportPrintingStatus getReportPrintingStatus()
    {
        DocReportPrintingStatus printingStatus = DocReportPrintingStatus::NA;
        
        container printArchivePacked = this.PrintArchiveInfoPacked;
        DocReportPrintArchiveInfo printArchiveInfo = new DocReportPrintArchiveInfo();
        if (printArchiveInfo.unpackFromDb(printArchivePacked))
        {
            if (this.PrintDestination == DocPrintDestinationArchive::Email)
            {
                RefRecId sysOutgoingEmailTableRecId = printArchiveInfo.parmPrintToEmailExecutionInfo().parmSysOutgoingEmailTableRecId();
                
                SysOutgoingEmailTable sysOutgoingEmailTable;
                select firstonly RecId, Status from sysOutgoingEmailTable
                    where sysOutgoingEmailTable.RecId == sysOutgoingEmailTableRecId;
                if (sysOutgoingEmailTable.RecId)
                {
                    switch (sysOutgoingEmailTable.Status)
                    {
                        case SysEmailStatus::Unsent:
                        case SysEmailStatus::Executing:
                        case SysEmailStatus::Suspended:
                        case SysEmailStatus::SendAttempted:
                            printingStatus = DocReportPrintingStatus::Pending;
                            break;
                        
                        case SysEmailStatus::Sent:
                            printingStatus = DocReportPrintingStatus::Success;
                            break;
                        
                        case SysEmailStatus::Failed:
                            printingStatus = DocReportPrintingStatus::Failed;
                            break;
                    }
                }
                else
                {
                    printingStatus = DocReportPrintingStatus::Unknown;
                }
            }
            else if (this.PrintDestination == DocPrintDestinationArchive::Printer)
            {
                SysGuidString documentRoutingJobId = printArchiveInfo.parmPrintToPrinterExecutionInfo().parmDocumentRoutingJobId();

                DocumentRoutingJob documentRoutingJob;
                select firstonly RecId, JobStatus from documentRoutingJob
                    where documentRoutingJob.JobId == documentRoutingJobId;
                if (documentRoutingJob.RecId)
                {
                    switch (documentRoutingJob.JobStatus)
                    {
                        case DocumentRoutingJobStatus::Pending:
                        case DocumentRoutingJobStatus::Processing:
                            printingStatus = DocReportPrintingStatus::Pending;
                            break;
                        
                        case DocumentRoutingJobStatus::Succeeded:
                            printingStatus = DocReportPrintingStatus::Success;
                            break;
                        
                        case DocumentRoutingJobStatus::Failed:
                            printingStatus = DocReportPrintingStatus::Failed;
                            break;
                    }
                }
                else
                {
                    printingStatus = DocReportPrintingStatus::Unknown;
                }
            }
        }

        return printingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the document type ID used for saving the archived file.
    /// </summary>Label 
    /// <returns>The Document Type Id</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display DocuTypeId documentTypeId()
    {
        PrintJobHeader printJobHeader;

        select firstonly DataAreaId, TableId, RecId from printJobHeader
            where printJobHeader.RecId == this.PrintJobHeaderRecId;

        DocuRef docuRef = DocuRef::findTableIdRecId(printJobHeader.DataAreaId, printJobHeader.TableId, printJobHeader.RecId);
        
        return docuRef.TypeId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:DocentricPrintArchiveDeveloperDesc</DeveloperDocumentation>
	<Label>@DocentricAX:DocentricPrintArchive</Label>
	<TitleField1>IsDocentricReport</TitleField1>
	<ClusteredIndex>PrintJobHeaderRecIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>PrintJobHeaderRecIdx</PrimaryIndex>
	<ReplacementKey>PrintJobHeaderRecIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>PrintJobHeader</Relation>
			<Table>PrintJobHeader</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintJobHeaderRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDocentricReport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestinationInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestinationSettingsPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutionTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignedPdf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedPdf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedPdfConditions</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintJobHeaderRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocentricPrintArchive</Name>
			<Label>@DocentricAX:DocentricPrintArchive</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintJobHeaderRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDocentricReport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestinationInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDestinationSettingsPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintArchiveInfoPacked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportParameters</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintArchiveNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutionTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignedPdf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedPdf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncryptedPdfConditions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdfAConformanceLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProforma</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrintJobHeaderRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDocentricReport</Name>
			<ExtendedDataType>DocIsDocentricReport</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintDestination</Name>
			<EnumType>DocPrintDestinationArchive</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintDestinationInfo</Name>
			<ExtendedDataType>DocPrintDestinationInfo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PrintDestinationSettingsPacked</Name>
			<ExtendedDataType>SysContainer</ExtendedDataType>
			<Label>@DocentricAX2:PackedPDS</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PrintArchiveInfoPacked</Name>
			<ExtendedDataType>SysContainer</ExtendedDataType>
			<Label>@DocentricAX2:PrintArchiveInfoPacked</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportId</Name>
			<ExtendedDataType>DocReportId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateId</Name>
			<ExtendedDataType>DocReportTemplateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentId</Name>
			<ExtendedDataType>DocGeneratedReportDocumentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<ExtendedDataType>DocGeneratedReportDocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceTableType</Name>
			<EnumType>DocSourceTableType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceTableId</Name>
			<ExtendedDataType>DocSourceTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<ExtendedDataType>DocAccountNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountRole</Name>
			<EnumType>DocAccountRole</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalType</Name>
			<EnumType>DocJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalRecId</Name>
			<ExtendedDataType>DocJournalRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportInfo</Name>
			<ExtendedDataType>DocPrintArchiveReportInfo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>DocPrintArchiveComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintArchiveNote</Name>
			<ExtendedDataType>DocPrintArchiveNote</ExtendedDataType>
			<HelpText>@DocentricAX3:PrintArchiveNoteHelpForPrintArchive</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ExecutionTime</Name>
			<ExtendedDataType>DocGeneratedReportExecutionTime</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportParameters</Name>
			<ExtendedDataType>DocReportParameters</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignedPdf</Name>
			<ExtendedDataType>DocGeneratedReportSignedPdf</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EncryptedPdf</Name>
			<ExtendedDataType>DocGeneratedReportEncryptedPdf</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EncryptedPdfConditions</Name>
			<ExtendedDataType>DocGeneratedReportEncryptedPdfConditions</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdfAConformanceLevel</Name>
			<HelpText>@DocentricAX4:PrintArchivePdfAConformanceLevelHelp</HelpText>
			<EnumType>DocPdfAConformanceLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProforma</Name>
			<ExtendedDataType>DocIsProforma</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrintJobHeaderRecIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PrintJobHeaderRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountRole</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceTableType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PrintJobHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PrintJobHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrintJobHeaderRecId</Name>
					<Field>PrintJobHeaderRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountRole</Name>
					<Field>AccountRole</Field>
					<ValueStr>DocAccountRole::Customer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountRole</Name>
					<Field>AccountRole</Field>
					<ValueStr>DocAccountRole::Vendor</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::PurchTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::SalesTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::ProjInvoiceTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::WHSShipmentTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSShipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSShipment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::WMSShipment</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchRFQCaseTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQCaseTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>RFQCaseId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::PurchRFQCaseTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::SalesQuotationTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::ProdTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::LedgerJournalTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::CustInvoiceJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustCollectionLetterJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustCollectionLetterJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::CustCollectionLetterJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInterestJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInterestJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::CustInterestJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::ProjInvoiceJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendPackingSlipJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::VendPackingSlipJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPurchOrderJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendPurchOrderJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::VendPurchOrderJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchConfirmationRequestJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchConfirmationRequestJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::PurchConfirmationRequestJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendReceiptsListJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendReceiptsListJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::VendReceiptsListJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendRFQJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRFQJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::VendRFQJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustConfirmJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustConfirmJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::CustConfirmJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPackingSlipJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::CustPackingSlipJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustQuotationJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustQuotationJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::CustQuotationJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustQuotationConfirmJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustQuotationConfirmJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::CustQuotationConfirmJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::VendInvoiceJour</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSPickingRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSPickingRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::WMSPickingRoute</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::WHSLoadTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::CustInvoiceTable</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReportId</Name>
					<Field>ReportId</Field>
					<RelatedField>ReportId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>SalesNumberSequence</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::SalesAgreementHeader</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>PurchNumberSequence</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceTableType</Name>
					<Field>SourceTableType</Field>
					<ValueStr>DocSourceTableType::PurchAgreementHeader</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesAgreementHeaderHistory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesAgreementHeaderHistory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::SalesAgreementHeaderHistory</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchAgreementHeaderHistory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeaderHistory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalRecId</Name>
					<Field>JournalRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>JournalType</Name>
					<Field>JournalType</Field>
					<ValueStr>DocJournalType::PurchAgreementHeaderHistory</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>