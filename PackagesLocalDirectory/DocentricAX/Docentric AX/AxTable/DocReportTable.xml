<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using DOCRT = Docentric.AX.Reporting.TemplateManagement;
using DOCRX = Docentric.AX.Reporting.XPath;
using Microsoft.Dynamics.AX.Metadata.MetaModel;

public class DocReportTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasDefaultDSPClass</Name>
				<Source><![CDATA[
    public display DocReportHasDefaultDSP hasDefaultDSPClass()
    {
        return this.DataSourceProviderClassName == classStr(DocDataSourceProviderSrsReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTemplates</Name>
				<Source><![CDATA[
    public display DocReportNumberOfTemplates numberOfTemplates()
    {
        DocReportTemplate template;
        select count(RecId) from template
        where template.Report == this.RecId && template.IsEnabled == true;
        int numOfTemplates = int642int(template.RecId);

        return numOfTemplates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfLabels</Name>
				<Source><![CDATA[
    public display DocReportNumberOfLabels numberOfLabels()
    {
        DocReportLabel label;
        select count(RecId) from label
        where label.Report == this.RecId;
        int numOfLabels = int642int(label.RecId);

        return numOfLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTemplates</Name>
				<Source><![CDATA[
    public container hasTemplates()
    {
        boolean             hasEnabledTemplates;
        str                 validationMsg;
        DocReportTemplate   reportTemplate;
        int                 enabledTemplateCount, allTemplateCount;
    
    
        select count(RecId) from reportTemplate
        where reportTemplate.Report == this.RecId &&
              reportTemplate.IsEnabled == true;
    
        enabledTemplateCount = int642int(reportTemplate.RecId);
    
        if (enabledTemplateCount > 0)
        {
            hasEnabledTemplates = true;
            validationMsg = '';
        }
        else
        {
            hasEnabledTemplates = false;
    
            select count(RecId) from reportTemplate
            where reportTemplate.Report == this.RecId;
    
            allTemplateCount = int642int(reportTemplate.RecId);
    
            if (allTemplateCount == 0)
            {
                validationMsg = "@DocentricAX:TheReportHasNotTemplateAssigned";
            }
            else
            {
                validationMsg = "@DocentricAX:TheReportHasNoTemplateEnabled";
            }
        }
    
        return [hasEnabledTemplates, validationMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEnabledTemplates</Name>
				<Source><![CDATA[
    public boolean hasEnabledTemplates()
    {
        DocReportTemplate   reportTemplate;
        int                 enabledTemplateCount;
    
        select count(RecId) from reportTemplate
        where reportTemplate.Report == this.RecId &&
              reportTemplate.IsEnabled == true;
    
        enabledTemplateCount = int642int(reportTemplate.RecId);
    
        return enabledTemplateCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyTemplate</Name>
				<Source><![CDATA[
    public boolean hasAnyTemplate()
    {
        DocReportTemplate reportTemplate;
    
        select firstonly RecId from reportTemplate
        where reportTemplate.Report == this.RecId;

        return reportTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEnabledEmailTemplates</Name>
				<Source><![CDATA[
    public boolean hasEnabledEmailTemplates()
    {
        DocReportEmailTemplate   reportEmailTemplate;
        int                      enabledTemplateCount;
    
        select count(RecId) from reportEmailTemplate
        where reportEmailTemplate.Report == this.RecId &&
              reportEmailTemplate.IsEnabled == true;
    
        enabledTemplateCount = int642int(reportEmailTemplate.RecId);
    
        return enabledTemplateCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyEmailTemplate</Name>
				<Source><![CDATA[
    public boolean hasAnyEmailTemplate()
    {
        DocReportEmailTemplate reportEmailTemplate;
    
        select firstonly RecId from reportEmailTemplate
        where reportEmailTemplate.Report == this.RecId;

        return reportEmailTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyCustomizedSystemTemplate</Name>
				<Source><![CDATA[
    public boolean hasAnyCustomizedSystemTemplate()
    {
        DocReportTemplate reportTemplate;
    
        select firstonly RecId from reportTemplate
        where reportTemplate.Report == this.RecId &&
              reportTemplate.OriginalStorageType == DocTemplateStorageType::AOT &&
              reportTemplate.CurrentStorageType != DocTemplateStorageType::AOT;

        return reportTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyEnabledERBasedTemplate</Name>
				<Source><![CDATA[
    public display DocReportHasEnabledErBasedTemplate hasAnyEnabledERBasedTemplate()
    {
        DocReportTemplate reportTemplate;
    
        select firstonly RecId from reportTemplate
        where reportTemplate.Report == this.RecId &&
              reportTemplate.DataSourceType == DocTemplateDataSourceType::ERDataModel &&
              reportTemplate.IsEnabled == true;

        return reportTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemplateERBased</Name>
				<Source><![CDATA[
    public boolean isTemplateERBased(DocReportTemplateId _templateId, CompanyId _companyId, LanguageId _languageId)
    {
        DocReportTemplate reportTemplate;

        // If the template is not registered in Docentric report setup, the template cannot be ER based.
        if (this.RecId == 0)
        {
            return false;
        }

        // If the SSRS original design is being used for printing, this is not an ER template.
        if (_templateId == DocConstant::BuiltInSsrsDesignPlaceholder)
        {
            return false;
        }

        // If Docentric default template is being used for printing, check if it is an ER template.
        // Note that Docentric default template is selected if _templateId == ''.
        if (_templateId == '')
        {
            reportTemplate = DocReportTable::findDefaultTemplateReportId(this.ReportId, _companyId, _languageId);
        }
        else
        {
            // Template ID is not an empty string, which means a non-default Docentric template is used for printing.
            // Check if the provided template ID belongs to an ER based template.
            reportTemplate = DocReportTemplate::findTemplateIdUsingRules(_templateId, _companyId, _languageId);
        }

        return reportTemplate.DataSourceType == DocTemplateDataSourceType::ERDataModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ERModelMappingTable</Name>
				<Source><![CDATA[
    public ERModelMappingTable ERModelMappingTable()
    {
        ERModelMappingTable erModelMapping;

        select firstonly erModelMapping
        where this.ERModelMapping == erModelMapping.RecId;

        return erModelMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ERDataModelTable</Name>
				<Source><![CDATA[
    public ERDataModelTable ERDataModelTable()
    {
        ERDataModelTable erDataModel;
        ERModelMappingTable erModelMapping;

        select firstonly erDataModel
            exists join erModelMapping
            where erDataModel.RecId == erModelMapping.DataModel &&
                  this.ERModelMapping == erModelMapping.RecId;
        
        return erDataModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ERSolutionTable</Name>
				<Source><![CDATA[
    public ERSolutionTable ERSolutionTable()
    {
        ERSolutionTable erSolution;
        ERModelMappingTable erModelMapping;

        select firstonly erSolution
            exists join erModelMapping
            where erSolution.RecId == erModelMapping.Solution &&
                  this.ERModelMapping == erModelMapping.RecId;
        
        return erSolution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForEmailSendingMode</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForEmailSendingMode()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
                && compSetting.SettingName == DocConstant::EmailSendingModeSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForEmailReplyToAddress</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForEmailReplyToAddress()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
                && compSetting.SettingName == DocConstant::EmailReplyToAddressSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForEmailBounceToAddress</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForEmailBounceToAddress()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
                && compSetting.SettingName == DocConstant::EmailBounceToAddressSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForEmailSenderDisplayName</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForEmailSenderDisplayName()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
                && compSetting.SettingName == DocConstant::EmailSenderDisplayNameSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForEmailMsgPriority</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForEmailMsgPriority()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
            && compSetting.SettingName == DocConstant::EmailMsgPrioritySettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForEmailReadReceiptAddress</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForEmailReadReceiptAddress()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
            && compSetting.SettingName == DocConstant::EmailReadReceiptAddressSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForEmailDeliveryReceiptCondition</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForEmailDeliveryReceiptCondition()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
            && compSetting.SettingName == DocConstant::EmailDeliveryReceiptConditionSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForPdfDocumentTitle</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForPdfDocumentTitle()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
            && compSetting.SettingName == DocConstant::PdfDocumentTitleSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForPdfDocumentAuthor</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForPdfDocumentAuthor()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
            && compSetting.SettingName == DocConstant::PdfDocumentAuthorSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForPdfDocumentSubject</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForPdfDocumentSubject()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
            && compSetting.SettingName == DocConstant::PdfDocumentSubjectSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCompanySettingForPdfDocumentKeywords</Name>
				<Source><![CDATA[
    public display DocHasPerCompanySetting hasCompanySettingForPdfDocumentKeywords()
    {
        DocReportCompanySetting compSetting;

        select firstonly RecId from compSetting
            where compSetting.Report == this.RecId
            && compSetting.SettingName == DocConstant::PdfDocumentKeywordsSettingName;

        return compSetting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toXmlElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the xml metadata for export for current DocReportTable record.
    /// </summary>
    /// <param name = "_parentXmlDoc">Xml document</param>
    /// <returns>Xml data</returns>
    public XmlElement toXmlElement(XmlDocument _parentXmlDoc)
    {
        DocReportTemplate reportTemplate;
        DocReportGroup reportGroup;
        DocReportLabel reportLabel;
        DocReportCompanySetting reportCompanySetting;
        DocEmailTokensPDRedirection emailTokensPDRedirection;
        DocReportUserDefinedPlaceholder userDefinedPlaceholder;
        DocReportEmailTemplate reportEmailTemplate;
        DocReportPdfSignatureSettings reportPdfSignatureSettings;
        DocReportPlaceholderGroup placeholderGroup;
        DocReportSharePointSettings reportSharePointSettings;
        DocReportSharePointMetadata reportSharePointMetadata;
    
        SysDictTable sysDictTable = new SysDictTable(this.TableId);
    
        XmlElement xmlElem = _parentXmlDoc.createElement(sysDictTable.name());
    
        // DocReportTable
        DocXmlRecord reportRecord = DocXmlRecord::constructRecord(this);
    
        reportRecord.addAllFieldsExcept([fieldStr(DocReportTable, ReportGroup),
                                         fieldStr(DocReportTable, IsValid),
                                         fieldStr(DocReportTable, LastValidationDatetime),
                                         fieldStr(DocReportTable, ValidationErrorList),
                                         fieldStr(DocReportTable, GenerateXmlDsWithReportRun),
                                         fieldStr(DocReportTable, GenerateXmlDsWithReportRunSettings),
                                         fieldStr(DocReportTable, GenerateXmlDsWithReportRunMode),
                                         fieldStr(DocReportTable, ERModelMapping)]);

        // For ER Model Mapping, export the mapping's GUID and Name, and also the related model's GUID and Name.
        ERModelMappingTable erModelMapping = this.ERModelMappingTable();
        ERDataModelTable erDataModel = this.ERDataModelTable();
        ERSolutionTable erSolution = this.ERSolutionTable();
        reportRecord.addCalculatedField(DocConstant::ERModelMappingGuidExportAttr, guid2Str(erModelMapping.GUID));
        reportRecord.addCalculatedField(DocConstant::ERModelMappingNameExportAttr, erModelMapping.Name);
        reportRecord.addCalculatedField(DocConstant::ERDataModelGuidExportAttr, guid2Str(erDataModel.GUID));
        reportRecord.addCalculatedField(DocConstant::ERDataModelNameExportAttr, erDataModel.Name);
        reportRecord.addCalculatedField(DocConstant::ERSolutionGuidExportAttr, guid2Str(erSolution.GUID));
        reportRecord.addCalculatedField(DocConstant::ERSolutionNameExportAttr, erSolution.Name);
    
        // DocReportTemplate
        while select crosscompany reportTemplate where reportTemplate.Report == this.RecId
        {
            reportRecord.addChildRecord(reportTemplate).addAllFieldsExcept([fieldStr(DocReportTemplate, Report)]);
        }
    
        // DocReportLabel
        while select reportLabel where reportLabel.Report == this.RecId
        {
            reportRecord.addChildRecord(reportLabel).addAllFieldsExcept([fieldStr(DocReportLabel, Report)]);
        }
    
        // DocReportCompanySetting
        while select reportCompanySetting where reportCompanySetting.Report == this.RecId
        {
            reportRecord.addChildRecord(reportCompanySetting).addAllFieldsExcept([fieldStr(DocReportCompanySetting, Report)]);
        }

        // DocEmailTokensPDRedirection
        while select emailTokensPDRedirection where emailTokensPDRedirection.ReportTable == this.RecId
        {
            DocXmlRecord redirectionRecord = reportRecord.addChildRecord(emailTokensPDRedirection);
            redirectionRecord.addAllFieldsExcept([fieldStr(DocEmailTokensPDRedirection, ReportTable), fieldStr(DocEmailTokensPDRedirection, PrintJobSettings)]);            
            
            str containerAsString = con2base64str(emailTokensPDRedirection.PrintJobSettings);
            redirectionRecord.addCalculatedField('PrintJobSettingsStr', containerAsString);
        }

        // DocReportGroup
        if (this.ReportGroup)
        {
            select firstOnly reportGroup where reportGroup.RecId == this.ReportGroup;
            reportRecord.addChildRecord(reportGroup).addAllFields();
        }

        // DocReportUserDefinedPlaceholder
        while select userDefinedPlaceholder where userDefinedPlaceholder.Report == this.RecId
        {
            DocXmlRecord userDefinedPlaceholderRecord = reportRecord.addChildRecord(userDefinedPlaceholder).addAllFieldsExcept([
                                                                fieldStr(DocReportUserDefinedPlaceholder, Report),
                                                                fieldStr(DocReportUserDefinedPlaceholder, PlaceholderGroup)]);
            // DocUserDefinedPlaceholderGroup
            if (userDefinedPlaceholder.PlaceholderGroup)
            {
                select firstOnly placeholderGroup where placeholderGroup.RecId == userDefinedPlaceholder.PlaceholderGroup;
                userDefinedPlaceholderRecord.addChildRecord(placeholderGroup).addAllFields();
            }
        }

        // DocReportEmailTemplate
        while select reportEmailTemplate where reportEmailTemplate.Report == this.RecId
        {
            reportRecord.addChildRecord(reportEmailTemplate).addAllFieldsExcept([fieldStr(DocReportTemplate, Report)]);
        }
    
        // DocReportPdfSignatureSettings
        while select reportPdfSignatureSettings where reportPdfSignatureSettings.Report == this.RecId
        {
            reportRecord.addChildRecord(reportPdfSignatureSettings).addAllFieldsExcept([fieldStr(DocReportPdfSignatureSettings, Report)]);
        }

        DocXmlRecord reportSharePointSettingsRecord;
        RecId spSettingsRecId;
        // DocReportSharePointSettings
        while select reportSharePointSettings 
            where reportSharePointSettings.Report == this.RecId
            outer join reportSharePointMetadata
                where reportSharePointMetadata.SharePointSettingsRecId == reportSharePointSettings.RecId
        {
            if (spSettingsRecId != reportSharePointSettings.RecId)
            {
                reportSharePointSettingsRecord = reportRecord.addChildRecord(reportSharePointSettings).addAllFieldsExcept([fieldStr(DocReportSharePointSettings, Report)]); 
                spSettingsRecId = reportSharePointSettings.RecId;
            }

            // DocReportSharePointMetadata
            if (reportSharePointMetadata)
            {
                reportSharePointSettingsRecord.addChildRecord(reportSharePointMetadata).addAllFieldsExcept([fieldStr(DocReportSharePointMetadata, SharePointSettingsRecId)]);
            }
        }

        xmlElem = reportRecord.serializeToXml(_parentXmlDoc);
    
        return xmlElem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDsProviderClass</Name>
				<Source><![CDATA[
    public boolean validateDsProviderClass()
    {
        boolean                                isValid;
        DocDataSourceProviderSrsReporting      dsProviderSrsBase;
        DictClass                              dictClass;
        ClassId                                dsProviderClassId;
    
    
        isValid = true;
    
        if (!this.DataSourceProviderClassName)
        {
            isValid = false;
            DocGlobalHelper::handleWarning("@DocentricAX:DspClassMissing");
            return isValid;
        }
    
        dsProviderClassId = className2Id(this.DataSourceProviderClassName);
        if (!dsProviderClassId)
        {
            isValid = false;
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReportDspClassNotExist", this.DataSourceProviderClassName));
            return isValid;
        }
    
        dictClass = new DictClass(dsProviderClassId);
        if (dictClass == null)
        {
            isValid = false;
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReportDspClassNotExist", this.DataSourceProviderClassName));
            return isValid;
        }
        
        dsProviderSrsBase = dictClass.makeObject();
        if (!(dsProviderSrsBase is DocDataSourceProviderSrsReporting))
        {
            isValid = false;
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReportDspClassWrongBaseClass", dictClass.name()));
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDsProviderClassWithMsg</Name>
				<Source><![CDATA[
    public container validateDsProviderClassWithMsg()
    {
        DocDataSourceProviderSrsReporting      dsProviderSrsBase;
        DictClass                              dictClass;
        ClassId                                dsProviderClassId;
    
    
        if (!this.DataSourceProviderClassName)
        {
            return [false, "@DocentricAX:DspClassMissing"];
        }
    
        dsProviderClassId = className2Id(this.DataSourceProviderClassName);
        if (!dsProviderClassId)
        {
            return [false, strFmt("@DocentricAX:ReportDspClassNotExist", this.DataSourceProviderClassName)];
        }
    
        dictClass = new DictClass(dsProviderClassId);
        if (dictClass == null)
        {
            return [false, strFmt("@DocentricAX:ReportDspClassNotExist", this.DataSourceProviderClassName)];
        }
    
        dsProviderSrsBase = dictClass.makeObject();
        if (!(dsProviderSrsBase is DocDataSourceProviderSrsReporting))
        {
            return [false, strFmt("@DocentricAX:ReportDspClassWrongBaseClass", this.DataSourceProviderClassName)];
        }
    
        return [true, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDsERModelMapping</Name>
				<Source><![CDATA[
    public boolean validateDsERModelMapping()
    {
        boolean isValid;

        isValid = true;

        if (this.hasAnyEnabledERBasedTemplate())
        {
            if (!this.ERModelMapping)
            {
                isValid = false;
                DocGlobalHelper::handleWarning("@DocentricAX3:DsERModelMappingMissing");
                return isValid;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDsERModelMappingWithMsg</Name>
				<Source><![CDATA[
    public container validateDsERModelMappingWithMsg()
    {
        if (this.hasAnyEnabledERBasedTemplate())
        {
            if (!this.ERModelMapping)
            {
                return  [false, "@DocentricAX3:DsERModelMappingMissing"];
            }
        }

        return [true, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLabels</Name>
				<Source><![CDATA[
    public container validateLabels()
    {
        boolean                 areReportLabelsValid;
        str                     validationMsg, validationMsgLine;
        DocReportLabel          reportLabel;
    
    
        void addToValidationMsg(str _validationMsgLine)
        {
            str indentMsg = '  - ';
    
            areReportLabelsValid = false;
    
            if (validationMsg == '')
            {
                validationMsg = ' >> Custom label validation errors:\n';
                validationMsg = validationMsg + indentMsg + _validationMsgLine;
            }
            else
            {
                validationMsg = validationMsg + '\n' + indentMsg + _validationMsgLine;
            }
        }
    
        areReportLabelsValid = true;
        validationMsg = '';
    
        // NOTE: In AX 7 there is no concept of temporary labels.
        //if (DocReportLabel::existsTempLabels(this.RecId))
        //{
        //    validationMsgLine = "@DocentricAX:ReportHasTempLabels";
        //    addToValidationMsg(validationMsgLine);
        //}
    
        // Check if each of the report labels exists.
        while select reportLabel where reportLabel.Report == this.RecId
        {
            if (!DocLabelHelper::isLabelId(reportLabel.LabelId))
            {
                validationMsgLine = strFmt("@DocentricAX:LabelIdInvalid", reportLabel.LabelId);
                addToValidationMsg(validationMsgLine);
                continue;
            }

            if (DocUserDefinedLabelHelper::isUserDefinedLabelId(reportLabel.LabelId) &&
                !DocUserDefinedLabelHelper::existsLabelId(reportLabel.LabelId))
            {
                validationMsgLine = strFmt("@DocentricAX3:UserDefLabelNotExist", reportLabel.LabelId);
                addToValidationMsg(validationMsgLine);
            }
            
            if (strStartsWith(reportLabel.labelType(), DocConstant::TranslationMissingPrefix))
            {
                validationMsgLine = strFmt("@DocentricAX:LabelDoesNotHaveTranslation", reportLabel.LabelName, reportLabel.LabelId);
                addToValidationMsg(validationMsgLine);
            }
        }
    
        return [areReportLabelsValid, validationMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserDefinedPlaceholders</Name>
				<Source><![CDATA[
    public container validateUserDefinedPlaceholders()
    {
        // validate sample DDSP is exists
        DocReportDDSP reportDDSP = DocReportDDSP::find(this.RecId);

        if (!reportDDSP.RecId)
        {
            return [true, ''];
        }

        DOCRX.XPathDdspHelper xPathDdspHelper = null;
        str result, errMsg;
            
        if (!DOCRX.XPathDdspHelper::TryConstruct(reportDDSP.Data, byref xPathDdspHelper, byref errMsg, DocGlobalHelper::getUserFormatLanguageId()))
        {
            return  [false, strFmt("@DocentricAX3:InvalidSampleDDSPFile", reportDDSP.Filename)];
        }
        
        // validate user-defined placeholders
        DocReportUserDefinedPlaceholder userDefinedPlaceholder;

        while select userDefinedPlaceholder where userDefinedPlaceholder.Report == this.RecId && userDefinedPlaceholder.Enabled
        {            
            if (!xPathDdspHelper.TryEvaluate(enum2Symbol(enumNum(DocDdspDataSection), userDefinedPlaceholder.DdspDataSection), userDefinedPlaceholder.Expression, byref result, byref errMsg))
            {
                return  [false, "@DocentricAX3:UserDefinedPlaceholdersInvalid"];
            }
        }

        return [true, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets validation error list in case that the report is not valid. Otherwise
    /// returns an empty string.
    /// </summary>
    /// <returns>
    /// Validation error message if the report is not valid. Otherwise returns an empty string.
    /// </returns>
    public str validateReport()
    {
        boolean         reportCheck;
        str             validationMsg, validationMsgLine, validationMsgBlock;
    
    
        void addMsgLineToValidationMsg(str _validationMsgLine)
        {
            if (validationMsg == '')
            {
                validationMsg = 'Report validation errors:\n';
                validationMsg = validationMsg + ' >> ' + _validationMsgLine;
            }
            else
            {
                validationMsg = validationMsg + '\n' + ' >> ' + _validationMsgLine;
            }
        }
    
        void addMsgBlockToValidationMsg(str _validationMsgBlock)
        {
            if (validationMsg == '')
            {
                validationMsg = 'Report validation errors:\n';
                validationMsg = validationMsg + _validationMsgBlock;
            }
            else
            {
                validationMsg = validationMsg + '\n' + _validationMsgBlock;
            }
        }
        

        // Validate report.
        validationMsg = '';

        // Validate DS provider class.
        [reportCheck, validationMsgLine] = this.validateDsProviderClassWithMsg();
        if (!reportCheck)
        {
            addMsgLineToValidationMsg(validationMsgLine);
        }

        // Validate report custom labels.
        [reportCheck, validationMsgBlock] = this.validateLabels();
        if (!reportCheck)
        {
            addMsgBlockToValidationMsg(validationMsgBlock);
        }

        // Validate User-defined placeholders.
        [reportCheck, validationMsgLine] = this.validateUserDefinedPlaceholders();
        if (!reportCheck)
        {
            addMsgLineToValidationMsg(validationMsgLine);
        }
    
        // If the report is registered only to be used with the improved Docentric
        // print destinations, don't validate components related to report templates.
        if (this.UseOnlyWithPrintDestinations)
        {
            return validationMsg;
        }

        // Validate DS ER Model mapping.
        if (DocParameters::find().EnableCbdDs)
        {
            [reportCheck, validationMsgLine] = this.validateDsERModelMappingWithMsg();
            if (!reportCheck)
            {
                addMsgLineToValidationMsg(validationMsgLine);
            }
        }

        // Check if the report has any enabled template.
        [reportCheck, validationMsgLine] = this.hasTemplates();
        if (!reportCheck)
        {
            addMsgLineToValidationMsg(validationMsgLine);
        }
    
        // Validate report template URLs.
        [reportCheck, validationMsgBlock] = this.validateTemplates();
        if (!reportCheck)
        {
            addMsgBlockToValidationMsg(validationMsgBlock);
        }

        return validationMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplates</Name>
				<Source><![CDATA[
    public container validateTemplates()
    {
        boolean                 areReportTemplatesValid, isTemplateFirstValidationError;
        str                     validationMsg, validationMsgLine;
        DocReportTemplate       reportTemplate;
        boolean                 templateStorageFieldsValid, templateFileExists, errorOccurred;
        List                    templateStorageFieldsErrorList;
        str                     templateFileDoesNotExistErrMsg;
        ERModelMappingTable     reportERModelMappingTable;
    

        void addToValidationMsg(str _validationMsgLine, str _templateId = '')
        {
            str indentMsg = '  - ';
    
            if (_templateId != '')
            {
                str templateFirstLineErrMsg = ' >> ' + strFmt("@DocentricAX:TemplateValidationErrors", _templateId);
                if (validationMsg == '')
                {
                    validationMsg = templateFirstLineErrMsg;
                }
                else
                {
                    validationMsg = validationMsg + '\n' + templateFirstLineErrMsg;
                }
            }

            validationMsg = validationMsg + '\n' + indentMsg + _validationMsgLine;

            // Set the flag that there is at least one invalid template.
            areReportTemplatesValid = false;
        }

        void addToValidationMsgCaller(str _errorMsg, str _templateId, boolean _isTemplateFirstValidationError)
        {
            if (_isTemplateFirstValidationError)
            {
                addToValidationMsg(_errorMsg, _templateId);
            }
            else
            {
                addToValidationMsg(_errorMsg);
            }
        }

        ERModelMappingTable getReportERModelMappingTable()
        {
            if (!reportERModelMappingTable)
            {
                reportERModelMappingTable = this.ERModelMappingTable();
            }
            return reportERModelMappingTable;
        }
        

        areReportTemplatesValid = true;
        validationMsg = '';
    
        while select reportTemplate
              where reportTemplate.Report == this.RecId && reportTemplate.IsEnabled == true
        {
            try
            {
                isTemplateFirstValidationError = true;
                templateStorageFieldsErrorList = new List(Types::String);
                templateStorageFieldsValid = reportTemplate.validateStorageFields(false, templateStorageFieldsErrorList);

                if (!templateStorageFieldsValid)
                {
                    ListEnumerator listEnum = templateStorageFieldsErrorList.getEnumerator();
                    while (listEnum.moveNext())
                    {
                        validationMsgLine = listEnum.current();
                        addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                        isTemplateFirstValidationError = false;
                    }
                }
            
                if (templateStorageFieldsValid)
                {
                    // Check if the template file exists.
                    templateFileExists = false;
                    errorOccurred = false;

                    try
                    {
                        [templateFileExists, templateFileDoesNotExistErrMsg] = reportTemplate.templateFileExists(true);
                    }
                    catch
                    {
                        errorOccurred = true;
                        validationMsgLine = strFmt("@DocentricAX:ErrorOccurredWhileCheckingIfFileExists", reportTemplate.CurrentStorageType);
                        addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                        isTemplateFirstValidationError = false;
                    }

                    if (!errorOccurred)
                    {
                        if (!templateFileExists)
                        {
                            addToValidationMsgCaller(templateFileDoesNotExistErrMsg, reportTemplate.TemplateId, isTemplateFirstValidationError);
                            isTemplateFirstValidationError = false;
                        }
                    }

                    // Check if the template file is a Docentric AX template.
                    if (templateFileExists)
                    {
                        str templateFileName = reportTemplate.fileName();

                        // -- Check if the template file is a Word document.
                        if (!DocFileMngHelper::isFileWordDocument(templateFilename))
                        {
                            validationMsgLine = strFmt("@DocentricAX:TemplateIsNotWordDoc", templateFilename);
                            addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                            isTemplateFirstValidationError = false;
                            continue;
                        }
                        
                        // -- Check if the template file is a Docentric AX template.
                        System.IO.MemoryStream templateContent = DocReportTemplate::getTemplateContent(reportTemplate.TemplateId, reportTemplate.CompanyId, reportTemplate.LanguageID);
                        str reportId, dspClassName, erModelMappingGuidStr;
                        boolean isErBased;
                        if (!DOCRT.TemplateHelper::IsTemplateDocument(templateContent, byref reportId, byref dspClassName, byref isErBased, byref erModelMappingGuidStr))
                        {
                            validationMsgLine = strFmt("@DocentricAX:FileIsNotDocentricAXTemplate", templateFilename);
                            addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                            isTemplateFirstValidationError = false;
                            continue;
                        }
                        
                        // -- Check if the report Id can be inferred from the template file or the resource Tags property.
                        if (reportId == '' && !reportTemplate.isCustomTemplate())
                        {
                            AxResource resource = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetResource(reportTemplate.OriginalStorageResourceName);
                            DocAotResourceInfo resourceInfo = DocAotResourceInfo::construct(resource, templateContent);
                            reportId = resourceInfo.reportId();
                        }

                        // -- If the template is a system template, and report ID is unknown, show a legacy error.
                        if (reportId == '' && reportTemplate.customizationLevel() == DocReportTemplateCustomizationLevel::System)
                        {
                            validationMsgLine = "@DocentricAX:LegacyTemplateError";
                            addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                            isTemplateFirstValidationError = false;
                        }
                        
                        // -- Check if the inferred (but not empty) report Id matches the report that the current template is attached to.
                        if (reportId != '' && reportId != this.ReportId)
                        {
                            validationMsgLine = strFmt("@DocentricAX:TemplateReportIdDiffers", templateFilename, this.ReportId, reportId);
                            addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                            isTemplateFirstValidationError = false;
                        }

                        // -- Check if the template points to the report's DSP class (but skip the legacy templates).
                        if (reportId != '' && dspClassName != '' && dspClassName != this.DataSourceProviderClassName)
                        {
                            validationMsgLine = strFmt("@DocentricAX3:ValidateTemplateDSPClass", templateFilename, dspClassName, this.DataSourceProviderClassName);
                            addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                            isTemplateFirstValidationError = false;
                        }

                        // -- Check if the template points to the report's ER Model mapping (but skip the legacy templates).
                        // NOTE: If the global parameter 'Enable CBD data sources' is turned on and there is at least one template that is ER-based but
                        // the ER Model mapping is not set for the report, a validation message has already been created in the this.validateDsERModelMappingWithMsg() method.
                        if (reportId != '' && isErBased)
                        {
                            // Check if the ER Model mapping written in the template differs from ER Model mapping from the report setup > Configurable Business Documents.
                            if (getReportERModelMappingTable().RecId != 0 && getReportERModelMappingTable().GUID != str2Guid(erModelMappingGuidStr))
                            {
                                validationMsgLine = strFmt("@DocentricAX3:ValidateTemplateERModelMapping", templateFilename,
                                                           erModelMappingGuidStr, getReportERModelMappingTable().GUID, getReportERModelMappingTable().Name);
                                addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                                isTemplateFirstValidationError = false;
                            }

                            // Check if the global parameter 'Enable CBD data sources' is turned on.
                            if (!DocParameters::find().EnableCbdDs)
                            {
                                validationMsgLine = strFmt("@DocentricAX3:ValidateErBasedTemplatesCbdFeaturesTurnedOff", templateFilename, erModelMappingGuidStr);
                                addToValidationMsgCaller(validationMsgLine, reportTemplate.TemplateId, isTemplateFirstValidationError);
                                isTemplateFirstValidationError = false;
                            }
                        }
                    }
                }
            }
            catch(Exception::CLRError)
            {
                DocGlobalHelper::handleClrError(funcName(), strFmt('Error while validating the template (%1). The template has been skipped.', reportTemplate.TemplateId));
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt('Error while validating the template (%1). The template has been skipped.', reportTemplate.TemplateId));
            }
        }
    
        return [areReportTemplatesValid, validationMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (this.ReportId != this.SRSReportName)
        {
            ret = false;
            DocGlobalHelper::handleError(strFmt("@DocentricAX:ReportIdAndNameEqual", this.ReportId, this.SRSReportName));
        }
    
        if (!this.validateDsProviderClass())
        {
            ret = false;
            DocGlobalHelper::handleError(strFmt("@DocentricAX:ReportDspClassInvalid", this.ReportId));
        }

        if (!this.hasDefaultDSPClass() && this.IncludeSystemFieldsInDSSRS)
        {
            ret = false;
            DocGlobalHelper::handleError("@DocentricAX:SystemFieldsCannotBeUsed");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsReportId</Name>
				<Source><![CDATA[
    public static boolean existsReportId(DocReportId _reportId)
    {
        DocReportTable reportTable;
    
        select firstonly RecId from reportTable
        where reportTable.ReportId == _reportId;
    
        return reportTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportReportMetadataToXmlFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the given report metadata to an XML file.
    /// </summary>
    /// <param name="_reportId">
    /// Report to export.
    /// </param>
    /// <param name="_exportingFileName">
    /// Output XML file name.
    /// </param>
    public static void exportReportMetadataToXmlFile(str _reportId, Filename _exportingFileName)
    {
        DocReportTable::exportSelectedReportsMetadataToXmlFile([_reportId], _exportingFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportSelectedReportsMetadataToXmlFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the given reports metadata to an XML file.
    /// </summary>
    /// <param name="_reportIds">Reports to export in form ['reportId1', 'reportId2',...]</param>
    /// <param name="_exportingFileName">Output XML file name.</param>
    /// <param name="_suppressMsg">If warnings and success messages should be suppressed.</param>
    /// <returns>Number of exported reports.</returns>
    public static int exportSelectedReportsMetadataToXmlFile(
        container _reportIds,
        Filename _exportingFileName,
        boolean _suppressMsg = false)
    {
        XmlDocument         xmlDocument;
        XmlElement          xmlRootElement;
        DocReportTable      report;
        int                 exportedReportCount, i;
        str                 currentReportId;


        void createXmlDocument()
        {
            XmlAttribute  xmlAttr;

            try
            {
                xmlDocument = XmlDocument::newBlank();
                xmlRootElement = xmlDocument.createElement(DocConstant::ReportsRootElement);
                xmlDocument.appendChild(xmlRootElement);
    
                xmlAttr = xmlDocument.createAttribute(DocConstant::ReportsExportDateAttr);
                xmlAttr.value(DateTimeUtil::toStr(DateTimeUtil::getSystemDateTime()));
                xmlRootElement.setAttributeNode(xmlAttr);
    
                xmlAttr = xmlDocument.createAttribute(DocConstant::ReportsUserIdAttr);
                xmlAttr.value(curUserId());
                xmlRootElement.setAttributeNode(xmlAttr);
    
                xmlAttr = xmlDocument.createAttribute(DocConstant::ReportsVersionAttr);
                xmlAttr.value(DocConstant::ImportExportVersion);
                xmlRootElement.setAttributeNode(xmlAttr);
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), 'Creating XML document failed');
            }
        }
    
    
        void appendReportToXmlDocument(DocReportTable _reportTable)
        {
            XmlElement xmlElem;
    
            xmlElem = _reportTable.toXmlElement(xmlDocument);
            xmlRootElement.appendChild(xmlElem);
        }
    
    
        if (_reportIds == conNull())
        {
            DocGlobalHelper::handleWarning("@DocentricAX:NoReportIsSelected", true, '', true);
        }
        if (_exportingFileName == '')
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _exportingFilename is not set');
        }
    
    
        createXmlDocument();
        exportedReportCount = 0;
        for (i = 1; i <= conLen(_reportIds); i++)
        {
            currentReportId = conPeek(_reportIds, i);
    
            report = DocReportTable::findReportId(currentReportId);
            if (!report)
            {
                DocGlobalHelper::handleWarning(strFmt('Report with Id (%1) does not exist', currentReportId));
                continue;
            }
    
            try
            {
                appendReportToXmlDocument(report);
                exportedReportCount++;
            }
            catch
            {
                DocGlobalHelper::handleWarning(strFmt('Exporting report with ID (%1) to XML failed', currentReportId));
                continue;
            }
        }

        if (exportedReportCount > 0)
        {
            // Load the exporting XML to a memory stream and send it as a file to end user.
            str exportingXmlStr = xmlDocument.toString();

            System.IO.MemoryStream xmlStream = new System.IO.MemoryStream();
            System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();

            try
            {
                xmlDoc.LoadXml(exportingXmlStr);
                xmlDoc.Save(xmlStream);
        
                xmlStream.Flush();
                xmlStream.Position = 0;

                DocFileMngHelper::sendFileToUser(xmlStream, _exportingFileName, '', '', '', '', true, true);

                if (!_suppressMsg)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:ReportExportSuccess", exportedReportCount, _exportingFileName));
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), 'Error while saving XML document to a memory stream');
            }
            catch (Exception::Internal)
            {
                DocGlobalHelper::handleClrException(funcName(), 'Error while saving XML document to a memory stream');
            }
            finally
            {
                if (xmlStream != null)
                {
                    xmlStream.Dispose();
                }
            }
        }
        else
        {
            if (!_suppressMsg)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:NoReportExported");
            }
        }
    
        return exportedReportCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocReportTable find(DocReportTableRecId _reportRecId, boolean _forUpdate = false)
    {
        DocReportTable reportTable;
    
        if (_reportRecId)
        {
            reportTable.selectForUpdate(_forUpdate);
    
            select firstonly reportTable
            where reportTable.RecId == _reportRecId;
        }
    
        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(DocReportTableRecId _reportRecId)
    {            
        return (DocReportTable::find(_reportRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultTemplateReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds default report template for provided report ID, company ID and language Id.
    /// </summary>
    /// <param name = "_reportId">Report Id.</param>
    /// <param name = "_companyId">Company Id.</param>
    /// <param name = "_languageId">Language Id.</param>
    /// <param name="_considerDisabledTemplates">Should disabled templates be considered.</param>
    /// <returns>DocReportTemplate record if found.</returns>
    public static DocReportTemplate findDefaultTemplateReportId(DocReportId _reportId, CompanyId _companyId, LanguageId _languageId, boolean _considerDisabledTemplates = true)
    {
        DocReportTemplate     defaultTemplate;
        DocReportTableRecId   reportRecId;
    
        if (_reportId)
        {
            reportRecId = DocReportTable::findReportId(_reportId).RecId;
        }
    
        if (!reportRecId)
        {
            return defaultTemplate;
        }
    
        /* _companyId != '' && _languageId != '' */
        if (_companyId != '' && _languageId != '')
        {
            // CompanyId == _companyId, LanguageId == _languageId
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == _languageId &&
                  defaultTemplate.CompanyId == _companyId &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == _companyId, LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == _companyId &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == '', LanguageId == _languageId
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == _languageId &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
        }
    
        /* _companyId == '' && _languageId != '' */
        if (_companyId == '' && _languageId != '')
        {
            // CompanyId == '', LanguageId == _languageId
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == _languageId &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == curext(), LanguageId == _languageId
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == _languageId &&
                  defaultTemplate.CompanyId == curext() &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == curext() &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
        }
    
        /* _companyId != '' && _languageId == '' */
        if (_companyId != '' && _languageId == '')
        {
            // CompanyId == _companyId, LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == _companyId &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == _companyId, LanguageId == currentUserLanguage()
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == currentUserLanguage() &&
                  defaultTemplate.CompanyId == _companyId &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == currentUserLanguage() &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
        }
    
        /* _companyId == '' && _languageId == '' */
        if (_companyId == '' && _languageId == '')
        {
            // CompanyId == '', LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == curext(), LanguageId == ''
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == '' &&
                  defaultTemplate.CompanyId == curext() &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == '', LanguageId == currentUserLanguage()
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == currentUserLanguage() &&
                  defaultTemplate.CompanyId == '' &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
    
            // CompanyId == curext(), LanguageId == currentUserLanguage()
            select firstOnly defaultTemplate
            where defaultTemplate.Report == reportRecId &&
                  defaultTemplate.IsDefaultTemplate == true &&
                  defaultTemplate.LanguageId == currentUserLanguage() &&
                  defaultTemplate.CompanyId == curext() &&
                  (_considerDisabledTemplates || defaultTemplate.IsEnabled == true);
    
            if (defaultTemplate)
            {
                return defaultTemplate;
            }
        }
    
        return defaultTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the record in the DocReportTable table for the provided report Id.
    /// </summary>
    /// <param name = "_reportId">Report Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the DocReportTable table; otherwise, an empty record.</returns>
    public static DocReportTable findReportId(DocReportId _reportId, boolean _forUpdate = false)
    {
        DocReportTable reportTable;
    
        if (_reportId)
        {
            reportTable.selectForUpdate(_forUpdate);
    
            select firstonly reportTable
            where reportTable.ReportId == _reportId;
        }
    
        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the DocReportTable table for the provided template Id.
    /// </summary>
    /// <param name = "_templateId">Template Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the DocReportTable table; otherwise, an empty record.</returns>
    public static DocReportTable findReportTemplateId(DocReportTemplateId _templateId, boolean _forUpdate = false)
    {
        DocReportTable reportTable;
        DocReportTemplate reportTemplate;
    
        if (_templateId)
        {
            reportTable.selectForUpdate(_forUpdate);
    
            select firstonly reportTable
                exists join reportTemplate
                    where reportTemplate.Report == reportTable.RecId
                       && reportTemplate.TemplateId == _templateId;
        }
    
        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds active report for the provided report ID.
    /// </summary>
    /// <param name = "_reportId">Report ID</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>The DocReportTable record having IsActiveSRS == true</returns>
    public static DocReportTable findActiveReport(DocReportId _reportId, boolean _forUpdate = false)
    {
        DocReportTable reportTableActiveReport;
    
        if (_reportId)
        {
            reportTableActiveReport.selectForUpdate(_forUpdate);
    
            select firstonly reportTableActiveReport
            where reportTableActiveReport.ReportId == _reportId && reportTableActiveReport.IsActiveSRS == true;
        }
    
        return reportTableActiveReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportSRSReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the DocReportTable table for the provided SSRS report name.
    /// </summary>
    /// <param name = "_srsReportName">SSRS report name</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>A record in the DocReportTable table; otherwise, an empty record.</returns>
    public static DocReportTable findReportSRSReportName(SRSCatalogItemName _srsReportName, boolean _forUpdate = false)
    {
        DocReportTable reportTable;
    
        reportTable.selectForUpdate(_forUpdate);
    
        select firstonly reportTable
        where reportTable.SRSReportName == _srsReportName;
    
        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSrsReport</Name>
				<Source><![CDATA[
    public static RecId insertSrsReport(DocReportId _srsReportDesignName, boolean _validateInsertedReport = true)
    {
        DocReportTable reportTable;
    
        try
        {
            ttsBegin;
    
            reportTable.clear();
    
            reportTable.ReportId = _srsReportDesignName;
            reportTable.SRSReportName = _srsReportDesignName;
            reportTable.SRSOnlyReportName = subStr(reportTable.ReportId, 1, strScan(reportTable.ReportId, '.', 1, strLen(reportTable.ReportId)) - 1);
            reportTable.SRSReportDesignName = subStr(reportTable.ReportId, strScan(reportTable.ReportId, '.', 1, strLen(reportTable.ReportId)) + 1, strLen(reportTable.ReportId));
            reportTable.DataSourceProviderClassName = classStr(DocDataSourceProviderSrsReporting);
            reportTable.IsActiveSRS = true;
            reportTable.SuppressRDPExecution = false;
            reportTable.UseOnlyWithPrintDestinations = false;
            reportTable.IncludeHiddenParamsInDS = true;
            reportTable.IncludeCompanyLogoInDS = true;
            reportTable.IncludeReportDefinedDispMethodsInDS = true;
            reportTable.GenerateXmlDsWithReportRun = false;
            reportTable.GenerateXmlDsWithReportRunSettings = conNull();
            reportTable.GenerateXmlDsWithReportRunMode = DocReportGenerateDdspMode::SelectedTemplateDdspType;

            // Set flags for replacing SSRS Viewer with Docentric Viewer and SSRS design with Docentric design.
            if (DocReportTypeHelper::isChequeReportFormat(reportTable.SRSOnlyReportName))
            {
                // These flags should be true for Cheques. This way we will automatically redirect each printing
                // from SSRS Screen to Docentric Screen, otherwise ChequeController will redirect printing to PDF file
                // for any of SSRS print destination different than SSRS Printer (including SSRS Screen).
                reportTable.UseDocentricPreviewForSrs = true;
                reportTable.UseDocentricPreviewerForSrs = true;
            }
            else if (!DocPrintMgmtHelper::isPrintMgmtReport(_srsReportDesignName))
            {
                // These flags should be false for Non Print Management reports.
                reportTable.UseDocentricPreviewForSrs = false;
                reportTable.UseDocentricPreviewerForSrs = false;
            }
            else if (DocPrintMgmtHelper::isMultiDocumentOutputPrintMgmtReport(_srsReportDesignName))
            {
                // These flags should also be false for multi document output Print Management reports (e.g. Customer account statement, Payment advice...).
                reportTable.UseDocentricPreviewForSrs = false;
                reportTable.UseDocentricPreviewerForSrs = false;
            }
            else
            {
                // For the rest of Print Management reports we will set these flags to True, although for some of them this doesn't have sense.
                // Only reports which has the Original/Copy Preview functionality needs to have these two flags set to True.
                reportTable.UseDocentricPreviewForSrs = true;
                reportTable.UseDocentricPreviewerForSrs = true;
            }
            
            reportTable.EmailAccountDisplayName = DocConstant::EmailSenderDisplayNameGlobalParamValuePlaceholder;
            reportTable.ReportUsageType = DocReportUsageType::ClassicSSRS;

            reportTable.ReportDescription =
                DocReportingSetupHelper::getSrsReportUIName(DocReportingSetupHelper::getReportName(_srsReportDesignName));
    
            reportTable.insert();
    
            ttsCommit;
    
            if (_validateInsertedReport)
            {
                // Validate the inserted report.
                DocReportTable::validateReports([reportTable.RecId]);
            }

            // Add this report to the restricted printer list for all network printers
            // that have the 'Restrict for new reports' flag ON
            DocRestrictedPrinterInfo::restrictNewReport(reportTable.ReportId);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:ErrorWhileInsertingSrsReport", _srsReportDesignName));
        }
    
        return reportTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocentricSrsReport</Name>
				<Source><![CDATA[
    public static boolean isDocentricSrsReport(DocReportSRSName _srsName)
    {
        DocReportTable reportTable;
    
        select firstonly RecId from reportTable
        where reportTable.SRSReportName == _srsName &&
              reportTable.IsActiveSRS == true;
    
        return reportTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the provided report flags with the provided new flag value (NoYesUnchanged)
    /// for the provided reports.
    /// </summary>
    /// <param name="_reportIds">
    /// Container containing the IDs of the changing reports.
    /// </param>
    /// <param name="_reportOptions">
    /// [ [reportOptionFieldName1, reportOptionValue1], [reportOptionFieldName2, reportOptionValue2], ...]
    /// where reportOptionFieldName is a name of the field representing a report flag,
    /// while reportOptionValue is of enum type NoYesUnchanged.
    /// </param>
    /// <returns>
    /// Returns count of updated reports.
    /// </returns>
    public server static int setReportOptions(container _reportIds, container _reportOptions)
    {
        DocReportTable      report;
        int                 i, j;
        str                 currentReportId;
        str                 reportOptionFieldName;
        NoYesUnchanged      reportOptionValue;
        boolean             isReportUpdated;
        int                 reportUpdatedCount;
    
    
        // Validate paramters.
        if (_reportIds == conNull())
        {
            DocGlobalHelper::handleWarning("@DocentricAX:NoReportIsSelected", true, '', true);
        }
    
        reportUpdatedCount = 0;
    
        ttsBegin;
    
        for (i = 1; i <= conLen(_reportIds); i++)
        {
            currentReportId = conPeek(_reportIds, i);
    
            report = DocReportTable::findReportId(currentReportId, true);
            if (!report)
            {
                DocGlobalHelper::handleError(strFmt('Report with ID (%1) does not exist', currentReportId), true, funcName(), true);
            }
    
            isReportUpdated = false;
    
            for (j = 1; j <= conLen(_reportOptions); j++)
            {
                [reportOptionFieldName, reportOptionValue] = conPeek(_reportOptions, j);
    
                if (!fieldName2id(tableNum(DocReportTable), reportOptionFieldName))
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('Field (%1) does not exist within the DocReportTable table', reportOptionFieldName));
                }
    
                if (reportOptionValue == NoYesUnchanged::Unchanged ||
                    (reportOptionValue == NoYesUnchanged::Yes && report.getFieldValue(reportOptionFieldName)) ||
                    (reportOptionValue == NoYesUnchanged::No && !report.getFieldValue(reportOptionFieldName)))
                {
                    continue;
                }
    
                if (reportOptionValue == NoYesUnchanged::No)
                {
                    report.setFieldValue(reportOptionFieldName, false);
                    isReportUpdated = true;
                }
                else if (reportOptionValue == NoYesUnchanged::Yes)
                {
                    // Check for the IncludeSystemFieldsInDSSRS field, if the update is possible.
                    if (reportOptionFieldName == fieldStr(DocReportTable, IncludeSystemFieldsInDSSRS))
                    {
                        if (!report.hasDefaultDSPClass())
                        {
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:IncludeSystemFieldsFailed", report.ReportId));
                            continue;
                        }
                    }

                    report.setFieldValue(reportOptionFieldName, true);
                    isReportUpdated = true;
                }
            }
    
            if (isReportUpdated)
            {
                report.update();
                reportUpdatedCount++;
            }
        }
    
        ttsCommit;
    
        return reportUpdatedCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportTemplateStorageSettings</Name>
				<Source><![CDATA[
    public static int updateReportTemplateStorageSettings(container _reportIds,
                                                          DocTemplateStorageType _newTemplateStorageType,
                                                          str _containerName, str _spSiteUrl, str _spFolderPath, str _fsFolderPath)
    {
        DocReportTable      report;
        int                 i;
        str                 currentReportId;
        boolean             isReportUpdated;
        int                 reportUpdatedCount;
        

        void updateStorageSettings_Azure(DocReportTemplate _template)
        {
            str templateFileName = _template.fileName();
            if (_template.isCustomTemplate())
            {
                _template.updateStorageFields_ResetAll(true);
            }
            else
            {
                _template.updateStorageFields_ResetAll(false);
            }

            _template.StorageAzureContainer = _containerName;
            _template.FileNameAzure = templateFileName;
            _template.CurrentStorageType = DocTemplateStorageType::AzureBlobStorage;
        }

        void updateStorageSettings_SharePoint(DocReportTemplate _template)
        {
            str templateFileName = _template.fileName();
            if (_template.isCustomTemplate())
            {
                _template.updateStorageFields_ResetAll(true);
            }
            else
            {
                _template.updateStorageFields_ResetAll(false);
            }

            _template.StorageSharePointSiteUrl = _spSiteUrl;
            _template.StorageSharePointFolderPath = _spFolderPath;
            _template.FileNameSp = templateFileName;
            _template.CurrentStorageType = DocTemplateStorageType::SharePoint;
        }

        void updateStorageSettings_FileSystem(DocReportTemplate _template)
        {
            str templateFileName = _template.fileName();
            if (_template.isCustomTemplate())
            {
                _template.updateStorageFields_ResetAll(true);
            }
            else
            {
                _template.updateStorageFields_ResetAll(false);
            }

            _template.StorageFileSystemFolderPath = _fsFolderPath;
            _template.FileNameFs = templateFileName;
            _template.CurrentStorageType = DocTemplateStorageType::FileSystem;
        }
        
        boolean updateStorageSettingsForReport(RecId _currentReportRecId)
        {
            DocReportTemplate   reportTemplate;
            boolean             reportUpdated = false;

            while select forUpdate reportTemplate where reportTemplate.Report == _currentReportRecId
            {
                if (_newTemplateStorageType == DocTemplateStorageType::AzureBlobStorage)
                {
                    updateStorageSettings_Azure(reportTemplate);
                    reportTemplate.updateOriginalTemplateStorage();
                    reportTemplate.doUpdate();
                    reportUpdated = true;
                }
                else if (_newTemplateStorageType == DocTemplateStorageType::SharePoint)
                {
                    updateStorageSettings_SharePoint(reportTemplate);
                    reportTemplate.updateOriginalTemplateStorage();
                    reportTemplate.doUpdate();
                    reportUpdated = true;
                }
                else if (_newTemplateStorageType == DocTemplateStorageType::FileSystem)
                {
                    updateStorageSettings_FileSystem(reportTemplate);
                    reportTemplate.updateOriginalTemplateStorage();
                    reportTemplate.doUpdate();
                    reportUpdated = true;
                }
            }

            return reportUpdated;
        }


        // Validate parameters.
        if (_reportIds == conNull())
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportIds is not set');
        }


        ttsBegin;

        reportUpdatedCount = 0;
        for (i = 1; i <= conLen(_reportIds); i++)
        {
            currentReportId = conPeek(_reportIds, i);

            report = DocReportTable::findReportId(currentReportId, true);
            if (!report)
            {
                DocGlobalHelper::handleError(strFmt('Report with ID (%1) does not exist', currentReportId), true, funcName(), true);
            }

            isReportUpdated = updateStorageSettingsForReport(report.RecId);
            if (isReportUpdated)
            {
                reportUpdatedCount++;
            }
        }

        ttsCommit;
    
        return reportUpdatedCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDsProviderClass</Name>
				<Source><![CDATA[
    public static RecId updateDsProviderClass(DocReportId _reportId, ClassName _dsProviderClassName)
    {
        DocReportTable reportTable;
    
    
        if (!_reportId)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:ReportIdNotProvided");
        }
    
        reportTable = DocReportTable::findReportId(_reportId, true);
        if (!reportTable)
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:ReportWithIdNotExist", _reportId));
        }
    
        try
        {
            ttsBegin;
    
            reportTable.DataSourceProviderClassName = _dsProviderClassName;
    
            if (!reportTable.validateDsProviderClass())
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:ReportDspClassInvalid", reportTable.ReportId));
            }
    
            reportTable.doUpdate();
    
            ttsCommit;
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX:ErrorWhileUpdatingSsrsReportDesign", _reportId));
        }
    
        return reportTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the provided reports.
    /// </summary>
    /// <param name="_reportRecIds">
    /// Container containing the IDs of the validating reports.
    /// </param>
    /// <returns>
    /// Returns [count of validated reports, count of invalid reports].
    /// </returns>
    public static container validateReports(container _reportRecIds)
    {
        DocReportTable      report;
        int                 i;
        RecId               currentReportRecId;
        int                 validatedReportCount, invalidReportCount;
        str                 validationMsg;
        utcDateTime         currentDatetime;
    
    
        // Validate paramters.
        if (_reportRecIds == conNull())
        {
            DocGlobalHelper::handleWarning("@DocentricAX:NoReportIsSelected", true, '', true);
        }
    
        // Recheck the data source type of the templates for the given reports, if applicable.
        DocReportingSetupHelper::recheckTemplateDataSourceType_forReports(_reportRecIds, false);

        validatedReportCount = 0;
        invalidReportCount = 0;
    
        currentDatetime = DateTimeUtil::getSystemDateTime();
    
        for (i = 1; i <= conLen(_reportRecIds); i++)
        {
            currentReportRecId = conPeek(_reportRecIds, i);
    
            report = DocReportTable::find(currentReportRecId, true);
    
            // Validate report.
            validationMsg = report.validateReport();
    
            if (validationMsg)
            {
                report.IsValid = DocIsReportValid::Invalid;
                report.ValidationErrorList = validationMsg;
                report.LastValidationDatetime = currentDatetime;
                invalidReportCount++;
            }
            else
            {
                report.IsValid = DocIsReportValid::Valid;
                report.ValidationErrorList = '';
                report.LastValidationDatetime = currentDatetime;
            }
    
            ttsBegin;
            report.update();
            ttsCommit;
    
            validatedReportCount++;
        }
                    
        return [validatedReportCount, invalidReportCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReports</Name>
				<Source><![CDATA[
    public static void deleteReports(Set _reportRecIds, boolean _deleteTemplateFilesOnAzure = false, boolean _deleteTemplateFilesOnFileSystem = false)
    {
        void deleteTemplatesForReport(RecId _currentReportRecId)
        {
            DocReportTemplate template;
            while select forupdate template where template.Report == _currentReportRecId
            {
                // Delete the template file on Azure if needed.
                if (_deleteTemplateFilesOnAzure &&
                    template.CurrentStorageType == DocTemplateStorageType::AzureBlobStorage &&
                    template.FileNameAzure != '')
                {
                    if (!DocAzureBlobHelper::deleteBlob(template.StorageAzureContainer, template.blobName(), true, false))
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DeletionTemplateFileOnAzureFailure", template.FileNameAzure, template.StorageAzureContainer, template.blobName()));
                    }
                }

                // Delete the template file on File system if needed.
                if (_deleteTemplateFilesOnFileSystem &&
                    template.CurrentStorageType == DocTemplateStorageType::FileSystem &&
                    template.FileNameFs != '')
                {
                    if (!DocFileSystemMngHelper::deleteFileOnFileSystem(template.fileSystemFullFilename(), true))
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DeletionTemplateFileOnFileSystemFailure", template.FileNameFs, template.StorageFileSystemFolderPath));
                    }
                }

                // Delete the template.
                ttsbegin;
                template.doDelete();
                ttscommit;
            }
        }


        if (_reportRecIds == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Parameter _reportRecId is not set');
        }

        DocReportTable report;
        SetEnumerator setEnum = _reportRecIds.getEnumerator();

        while (setEnum.moveNext())
        {
            RecId currentReportRecId = setEnum.current();
            select firstonly forupdate report where report.RecId == currentReportRecId;
            if (report.RecId == 0)
            {
                continue;
            }

            ttsbegin;
            
            // Delete all report templates.
            deleteTemplatesForReport(currentReportRecId);

            // Delete the report.
            report.doDelete();
            
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettingValue_UseDocentricPreview</Name>
				<Source><![CDATA[
    /*  Report settings per company  */
    /***** USE DOCENTRIC PREVIEW *****/
    public boolean getSettingValue_UseDocentricPreview(CompanyId _companyId = curExt())
    {
        DocReportCompanySetting         reportCompanySettings;
        str                             useDocentricPreviewStr;

        // Check if the value for the setting is specified for the given company.
        select firstonly reportCompanySettings
        where reportCompanySettings.Report == this.RecId &&
              reportCompanySettings.SettingName == DocConstant::UseDocentricPreviewSettingName &&
              reportCompanySettings.CompanyId == _companyId;

        if (reportCompanySettings.RecId != 0)
        {
            useDocentricPreviewStr = reportCompanySettings.SettingValue;
            if (useDocentricPreviewStr)
            {
                if (strUpr(useDocentricPreviewStr) == 'TRUE')
                {
                    return true;
                }
            }
        }
        else
        {
            // If there is no record for the given company, use the value
            // that is valid for all (other) companies.
            return this.UseDocentricPreviewForSrs;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettingValue_UseDocentricPreviewer</Name>
				<Source><![CDATA[
    /***** USE DOCENTRIC PREVIEWER *****/
    public boolean getSettingValue_UseDocentricPreviewer(CompanyId _companyId = curExt())
    {
        DocReportCompanySetting         reportCompanySettings;
        str                             useDocentricPreviewerStr;

        // Check if the value for the setting is specified for the given company.
        select firstonly reportCompanySettings
        where reportCompanySettings.Report == this.RecId &&
              reportCompanySettings.SettingName == DocConstant::UseDocentricPreviewerWithSsrsBuiltInDesignSettingName &&
              reportCompanySettings.CompanyId == _companyId;

        if (reportCompanySettings.RecId != 0)
        {
            useDocentricPreviewerStr = reportCompanySettings.SettingValue;
            if (useDocentricPreviewerStr)
            {
                if (strUpr(useDocentricPreviewerStr) == 'TRUE')
                {
                    return true;
                }
            }
        }
        else
        {
            // If there is no record for the given company, use the value
            // that is valid for all (other) companies.
            return this.UseDocentricPreviewerForSrs;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettingValue_EmailSenderDisplayName</Name>
				<Source><![CDATA[
    /***** EMAIL SENDER DISPLAY NAME *****/
    public str getSettingValue_EmailSenderDisplayName(CompanyId _companyId = curExt(), str _fromAddress = '')
    {
        DocReportCompanySetting         reportCompanySettings;
        str                             emailSenderDisplayName;

        select firstonly reportCompanySettings
        where reportCompanySettings.Report == this.RecId &&
              reportCompanySettings.SettingName == DocConstant::EmailSenderDisplayNameSettingName &&
              reportCompanySettings.CompanyId == _companyId;

        if (reportCompanySettings.RecId != 0)
        {
            emailSenderDisplayName = reportCompanySettings.SettingValue;
        }
        else
        {
            // If there is no record for the given company, use the value
            // that is valid for all (other) companies.
            emailSenderDisplayName = this.EmailAccountDisplayName;
        }

        // Use the value from the global parameters, if set so.
        if (emailSenderDisplayName == DocConstant::EmailSenderDisplayNameGlobalParamValuePlaceholder)
        {
            emailSenderDisplayName = DocEmailMngHelper::getEmailSenderDisplayNameByFromAddress(_fromAddress);
        }

        // If the value is a placeholder for the current user email, replace it with the real value.
        if (emailSenderDisplayName == DocConstant::EmailSenderDisplayNameCurrentUserPlaceholder)
        {
            emailSenderDisplayName = DocEmailMngHelper::getUserEmailAddress(curUserId());
        }

        // NOTE: Email sender display name can also be empty. Then the corresponding display name of the from email account is used.

        return emailSenderDisplayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailSenderDisplayName</Name>
				<Source><![CDATA[
    /***** EMAIL SENDER DISPLAY NAME THAT ALSO WORKS WHEN REPORT IS NOT REGISTERED IN DOCENTRIC REPORT SETUP *****/
    public static str getEmailSenderDisplayName(CompanyId _companyId = curExt(), str _reportId = '', str _fromAddress = '')
    {
        str emailSenderDisplayName = '';

        // Use the value set for the report, if provided.
        if (_reportId != '')
        {
            DocReportTable reportTable = DocReportTable::findReportId(_reportId);
            if (reportTable.RecId != 0)
            {
                str companyId = _companyId;
                if (companyId == '')
                {
                    companyId = curExt();
                }
                emailSenderDisplayName = reportTable.getSettingValue_EmailSenderDisplayName(companyId, _fromAddress);
                return emailSenderDisplayName;
            }
        }

        // Use the value from the global parameters
        emailSenderDisplayName = DocEmailMngHelper::getEmailSenderDisplayNameByFromAddress(_fromAddress);

        // If the value is a placeholder for the current user email, replace it with the real value.
        if (emailSenderDisplayName == DocConstant::EmailSenderDisplayNameCurrentUserPlaceholder)
        {
            emailSenderDisplayName = DocEmailMngHelper::getUserEmailAddress(curUserId());
        }

        // NOTE: Email sender display name can also be empty. Then the corresponding display name of the from email account is used.

        return emailSenderDisplayName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmailPrintDestSettings</Name>
				<Source><![CDATA[
    public void fillEmailPrintDestSettings(DocPrintDestSettingsEmail _emailPrintDestSettings, DocPrintReportSettings _printReportSettings)
    {
        // Find the sender display name in the way that also works if the executing report is not registered in Docentric report setup.
        str senderDisplayName = DocReportTable::getEmailSenderDisplayName(_printReportSettings.parmCompanyId(), _printReportSettings.parmReportId(), _emailPrintDestSettings.parmEmailFrom());
        _emailPrintDestSettings.parmEmailFromDisplayName(senderDisplayName);
        
        // Find the other emailing settings in the way that also works if the executing report is not registered in Docentric report setup.
        DocEmailMessageReportSettings reportSettings = DocEmailMessageReportSettings::getEmailMessageReportSettings(this, _printReportSettings.parmCompanyId());

        _emailPrintDestSettings.parmEmailReplyTo(reportSettings.parmReplyToAddress());  
        _emailPrintDestSettings.parmEmailBounceTo(reportSettings.parmBounceToAddress()); 
        _emailPrintDestSettings.parmEmailMsgPriority(DocEmailMessageReportSettings::reportSettingsPriorityToExt(reportSettings.parmMessagePriority())); 
        _emailPrintDestSettings.parmEmailSendingMode(DocEmailMessageReportSettings::sendingModeToExt(reportSettings.parmSendingMode()));
        _emailPrintDestSettings.parmReadReceiptAddress(reportSettings.parmReadReceiptAddress());
        _emailPrintDestSettings.parmDeliveryReceiptCondition(reportSettings.parmDeliveryReceiptCondition());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPrintReportSettingsWithPrintArchiveSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the instance of <c>DocPrintReportSettings</c> object with the print archive document type.
    /// </summary>
    /// <param name = "_printReportSettings">Instance of <c>DocPrintReportSettings</c> object</param>
    public void fillPrintReportSettingsWithPrintArchiveSettings(DocPrintReportSettings _printReportSettings)
    {
        DocuTypeId printArchiveDocuType;

        CompanyId companyId = _printReportSettings.parmCompanyId() == '' ? curExt() : _printReportSettings.parmCompanyId();
        
        DocReportCompanySetting reportCompanySettings = DocReportCompanySetting::findSettingName(this.RecId, companyId, DocConstant::DocuTypeForArchiveSettingName);
        // Print archive document type set per report per company.
        printArchiveDocuType = reportCompanySettings.SettingValue;

        if (printArchiveDocuType == '')
        {
            // Print archive document type set per company.
            printArchiveDocuType = DocPrintArchiveSettings::find(companyId).DocuTypeId;
        }

        // If no setup found, do not update _printReportSettings.parmSaveToArchiveDocuTypeId().
        if (printArchiveDocuType)
        {
            _printReportSettings.parmSaveToArchiveDocuTypeId(printArchiveDocuType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPrintReportSettingsWithDocumentProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the instance of <c>DocPrintReportSettings</c> object with the document properties Title, Author, Subject and Keywords.
    /// </summary>
    /// <param name = "_printReportSettings">Instance of <c>DocPrintReportSettings</c> object</param>
    public void fillPrintReportSettingsWithDocumentProperties(DocPrintReportSettings _printReportSettings)
    {
        if (this.RecId == 0)
        {
            return;
        }

        CompanyId companyId = _printReportSettings.parmCompanyId() == '' ? curExt() : _printReportSettings.parmCompanyId();

        // Document title
        _printReportSettings.parmDocumentTitle(this.PdfDocumentTitle);
        // Document title set per company
        DocReportCompanySetting reportCompanySettings = DocReportCompanySetting::findSettingName(this.RecId, companyId, DocConstant::PdfDocumentTitleSettingName);
        if (reportCompanySettings.SettingValue)
        {
            _printReportSettings.parmDocumentTitle(reportCompanySettings.SettingValue);
        }

        // Document author
        _printReportSettings.parmDocumentAuthor(this.PdfDocumentAuthor);
        // Document author set per company
        reportCompanySettings = DocReportCompanySetting::findSettingName(this.RecId, companyId, DocConstant::PdfDocumentAuthorSettingName);
        if (reportCompanySettings.SettingValue)
        {
            _printReportSettings.parmDocumentAuthor(reportCompanySettings.SettingValue);
        }

        // Document subject
        _printReportSettings.parmDocumentSubject(this.PdfDocumentSubject);
        // Document subject set per company
        reportCompanySettings = DocReportCompanySetting::findSettingName(this.RecId, companyId, DocConstant::PdfDocumentSubjectSettingName);
        if (reportCompanySettings.SettingValue)
        {
            _printReportSettings.parmDocumentSubject(reportCompanySettings.SettingValue);
        }

        // Document keywords
        _printReportSettings.parmDocumentKeywords(this.PdfDocumentKeywords);
        // Document keywords set per company
        reportCompanySettings = DocReportCompanySetting::findSettingName(this.RecId, companyId, DocConstant::PdfDocumentKeywordsSettingName);
        if (reportCompanySettings.SettingValue)
        {
            _printReportSettings.parmDocumentKeywords(reportCompanySettings.SettingValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldArchiveReportInOriginalFormat</Name>
				<Source><![CDATA[
    public static boolean shouldArchiveReportInOriginalFormat(str _reportId = '')
    {
        boolean shouldArchiveNonPdfFiles = DocParameters::find().ArchivingReportsOption == DocArchivingReportsOption::ArchiveInPdfAndOriginalFormat;

        if (_reportId == '')
        {
            return shouldArchiveNonPdfFiles;
        }

        DocReportTable docReport = DocReportTable::findReportId(_reportId);
        if (docReport.RecId == 0)
        {
            return shouldArchiveNonPdfFiles;
        }
        
        if (docReport.ArchivingReportsOption ==  DocArchivingReportsPerReportOption::AsConfiguredInGlobalParameters)
        {
            return shouldArchiveNonPdfFiles;
        }
        else if (docReport.ArchivingReportsOption == DocArchivingReportsPerReportOption::ArchiveInPdfAndOriginalFormat)
        {
            return true;
        }
        
        return false; // else if (docReport.ArchivingReportsOption == DocArchivingReportsPerReportOption::ArchiveInPdfFormat)
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldArchiveReportEmailAttachments</Name>
				<Source><![CDATA[
    public static boolean shouldArchiveReportEmailAttachments(str _reportId = '')
    {
        boolean shouldArchiveEmailAttachments = DocParameters::find().ArchivingEmailAttachmentsOption == DocArchivingEmailAttachmentsOption::ArchiveEmailAttachments;

        if (_reportId == '')
        {
            return shouldArchiveEmailAttachments;
        }

        DocReportTable docReport = DocReportTable::findReportId(_reportId);
        if (docReport.RecId == 0)
        {
            return shouldArchiveEmailAttachments;
        }
        
        if (docReport.ArchivingEmailAttachmentsOption == DocArchivingEmailAttachmentsPerReportOption::AsConfiguredInGlobalParameters)
        {
            return shouldArchiveEmailAttachments;
        }
        else if (docReport.ArchivingEmailAttachmentsOption == DocArchivingEmailAttachmentsPerReportOption::ArchiveEmailAttachments)
        {
            return true;
        }
        
        return false; // else if (docReport.ArchivingEmailAttachmentsOption == DocArchivingEmailAttachmentsPerReportOption::DoNotArchiveEmailAttachments)
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArchiveReportParamsOption</Name>
				<Source><![CDATA[
    public static DocArchiveReportParamsOption getArchiveReportParamsOption(str _reportId = '')
    {
        DocArchiveReportParamsOption archivingReportParamsOption = DocParameters::find().ArchivingReportParamsOption;

        if (_reportId == '')
        {
            return archivingReportParamsOption;
        }

        DocReportTable docReport = DocReportTable::findReportId(_reportId);
        if (docReport.RecId == 0)
        {
            return archivingReportParamsOption;
        }
        
        if (docReport.ArchivingReportParamsOption == DocArchiveReportParamsPerReportOption::AsConfiguredInGlobalParameters)
        {
            return archivingReportParamsOption;
        }
        else if (docReport.ArchivingReportParamsOption == DocArchiveReportParamsPerReportOption::ArchiveWithTechnicalNames)
        {
            return DocArchiveReportParamsOption::ArchiveWithTechnicalNames;
        }
        else if (docReport.ArchivingReportParamsOption == DocArchiveReportParamsPerReportOption::ArchiveWithUINames)
        {
            return DocArchiveReportParamsOption::ArchiveWithUINames;
        }
        
        return DocArchiveReportParamsOption::DoNotArchive; // else if (docReport.ArchivingReportParamsOption == DocArchiveReportParamsPerReportOption::DoNotArchive)
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(DocReportTable, EmailBounceToAddress):
                if (this.EmailBounceToAddress)
                {
                    if (!DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(this.EmailBounceToAddress, false))
                    {
                        // No placeholder found
                        if (!DocGlobalHelper::validateEmail(this.EmailBounceToAddress))
                        {
                            ret = false;
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:BounceToEmailAddressesNotValid", this.EmailBounceToAddress));
                        }
                    }
                }
                break;
                
            case fieldNum(DocReportTable, EmailReplyToAddress):
                if (this.EmailReplyToAddress)
                {
                    // Validate those Reply-to addresses which are not placeholders.
                    if (!DocGlobalHelper::validateEmailListSkipPlaceholders(this.EmailReplyToAddress))
                    {
                        ret = false;
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ReplyToEmailAddressesNotValid", this.EmailReplyToAddress));
                    }
                }
                break;

            case fieldNum(DocReportTable, EmailReadReceiptAddress):
                if (this.EmailReadReceiptAddress)
                {
                    if (!DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(this.EmailReadReceiptAddress, false))
                    {
                        // No placeholder found
                        if (!DocGlobalHelper::validateEmail(this.EmailReadReceiptAddress))
                        {
                            ret = false;
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAX2:ReadReceiptEmailAddressNotValid", this.EmailReadReceiptAddress));
                        }
                    }
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfRestrictedPrinters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows number of printers restricted for the current report.
    /// </summary>
    /// <returns>Number of restricted printers for the current report</returns>
    [SysClientCacheDataMethodAttribute]
    display NumberOf getNumberOfRestrictedPrinters()
    {
        DocRestrictedPrintersView view;

        select count(RecId) from view
            where view.IsRestricted == NoYes::Yes
                && view.ReportId == this.ReportId
                && view.PrinterName != DocConstant::RestrictedPrinterNewPrinters;

        return int642int(view.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfAllowedPrinters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows number of printers restricted for the current report.
    /// </summary>
    /// <returns>Number of restricted printers for the current report</returns>
    [SysClientCacheDataMethodAttribute]
    display NumberOf getNumberOfAllowedPrinters()
    {
        DocRestrictedPrintersView view;

        select count(RecId) from view
            where view.IsRestricted == NoYes::No
                && view.ReportId == this.ReportId
                && view.PrinterName != DocConstant::RestrictedPrinterNewPrinters;

        return int642int(view.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX:ReportsTableDesc</DeveloperDocumentation>
	<FormRef>DocReportTable</FormRef>
	<Label>@DocentricAX:Reports</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ReportId</TitleField1>
	<TitleField2>ReportGroup</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ReplacementKey>ReportIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>DocReportTable</Relation>
			<Table>DocReportLabel</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>DocReportTable</Relation>
			<Table>DocReportCompanySetting</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction3</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>DocReportTable</Relation>
			<Table>DocReportTemplate</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction4</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>DocReportTable</Relation>
			<Table>DocEmailTokensPDRedirection</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SRSReportName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SRSOnlyReportName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SRSReportDesignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataSourceProviderClassName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ERModelMapping</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ERModelDataToIncludeInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateXmlDsWithReportRun</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateXmlDsWithReportRunSettings</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateXmlDsWithReportRunMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeCompanyLogoInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeHiddenParamsInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeSystemFieldsInDSSRS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeDocuBrandingInDSSRS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeAllDisplayMethodsInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeReportDefinedFieldsInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeReportDefinedDispMethodsInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuppressRDPExecution</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActiveSRS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsValid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastValidationDatetime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportDefaultCaption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportUsageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOnlyWithPrintDestinations</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidationErrorList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDocentricPreviewForSrs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDocentricPreviewerForSrs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailAccountDisplayName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingEmailAttachmentsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportParamsOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DataSourceConditions</Name>
			<Label>@DocentricAX:DsGenerationConditions</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeCompanyLogoInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeHiddenParamsInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeSystemFieldsInDSSRS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeDocuBrandingInDSSRS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuppressRDPExecution</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AsciiControlCharactersHandling</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DataSourceProvider</Name>
			<Label>@DocentricAX:DataSourceProvider</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataSourceProviderClassName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hasDefaultDSPClass</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@DocentricAX:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SRSOnlyReportName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SRSReportDesignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportDefaultCaption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOnlyWithPrintDestinations</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GenerateDataSource</Name>
			<Label>@DocentricAX:IsGenerateDsVisible</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GenerateXmlDsWithReportRun</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateXmlDsWithReportRunSettings</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateXmlDsWithReportRunMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NavigationList</Name>
			<Label>@DocentricAX:Navigation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SRSOnlyReportName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SRSReportDesignName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ListOverview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActiveSRS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDocentricPreviewForSrs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDocentricPreviewerForSrs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOnlyWithPrintDestinations</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsValid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hasDefaultDSPClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfTemplates</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfLabels</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Validity</Name>
			<Label>@DocentricAX:ReportValidity</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsValid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastValidationDatetime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidityError</Name>
			<Label>@DocentricAX:ReportValidity</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidationErrorList</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SettingsPerCompany</Name>
			<Label>@DocentricAX:ReportSettingsPerCompany</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseDocentricPreviewForSrs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDocentricPreviewerForSrs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailAccountDisplayName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UtilityFields</Name>
			<Label>@DocentricAX:UtilityFields</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SRSReportName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportClassification</Name>
			<Label>@DocentricAX:ReportClassification</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportUsageType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QueryBasedReportsSettings</Name>
			<Label>@DocentricAX2:QueryBasedReports</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeAllDisplayMethodsInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeReportDefinedFieldsInDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeReportDefinedDispMethodsInDS</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmailSettings</Name>
			<Label>@SYS96654</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailEmailingMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailAccountDisplayName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailReplyToAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailBounceToAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailMsgPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailReadReceiptAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailDeliveryReceiptCondition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintArchiveSettings</Name>
			<Label>@DocentricAX2:PrintArchiveSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ArchivingEmailAttachmentsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportsOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchivingReportParamsOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ElectronicReporting</Name>
			<Label>@DocentricAX3:ElectronicReporting</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ERModelMapping</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ERModelDataToIncludeInDS</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdfDocumentProperties</Name>
			<Label>@DocentricAX3:PDFDocumentProperties</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdfDocumentTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdfDocumentAuthor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdfDocumentSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdfDocumentKeywords</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RestrictedPrinters</Name>
			<Label>@DocentricAX3:RestrictedPrinters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RestrictForNewPrinters</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SRSReportName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportSRSName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SRSOnlyReportName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportSRSName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SRSReportDesignName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportSRSDesignName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataSourceProviderClassName</Name>
			<ExtendedDataType>DocDataSourceProviderClassName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenerateXmlDsWithReportRun</Name>
			<ExtendedDataType>DocReportGenerateXmlDsWithReportRun</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>GenerateXmlDsWithReportRunSettings</Name>
			<ExtendedDataType>DocReportGenerateXmlDsWithReportRunSett</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenerateXmlDsWithReportRunMode</Name>
			<EnumType>DocReportGenerateDdspMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeCompanyLogoInDS</Name>
			<ExtendedDataType>DocIncludeCompanyLogoInDS</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeHiddenParamsInDS</Name>
			<ExtendedDataType>DocReportIncludeHiddenParamsInDS</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeSystemFieldsInDSSRS</Name>
			<ExtendedDataType>DocReportIncludeSystemFieldsInDS</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeDocuBrandingInDSSRS</Name>
			<ExtendedDataType>DocReportIncludeDocuBrandingInDS</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeAllDisplayMethodsInDS</Name>
			<ExtendedDataType>DocIncludeAllMethods</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeReportDefinedFieldsInDS</Name>
			<ExtendedDataType>DocIncludeListedFields</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeReportDefinedDispMethodsInDS</Name>
			<ExtendedDataType>DocIncludeListedMethods</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SuppressRDPExecution</Name>
			<ExtendedDataType>DocReportSuppressRDP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AsciiControlCharactersHandling</Name>
			<EnumType>DocAsciiControlCharactersHandling</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActiveSRS</Name>
			<ExtendedDataType>DocReportIsActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsValid</Name>
			<EnumType>DocIsReportValid</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastValidationDatetime</Name>
			<ExtendedDataType>DocReportLastValidationDatetime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportDefaultCaption</Name>
			<ExtendedDataType>DocReportDefaultCaption</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportDescription</Name>
			<ExtendedDataType>DocReportDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReportGroup</Name>
			<ExtendedDataType>DocReportGroupRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportUsageType</Name>
			<Visible>No</Visible>
			<EnumType>DocReportUsageType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOnlyWithPrintDestinations</Name>
			<ExtendedDataType>DocReportUseOnlyWithPrintDestinations</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationErrorList</Name>
			<ExtendedDataType>DocReportValidationErrorList</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseDocentricPreviewForSrs</Name>
			<ExtendedDataType>DocReportUseDocentricPreviewForSrs</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseDocentricPreviewerForSrs</Name>
			<ExtendedDataType>DocReportUseDocentricPreviewerForSrs</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailAccountDisplayName</Name>
			<ExtendedDataType>DocAosEmailAccountDisplayName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EmailEmailingMode</Name>
			<EnumType>DocEmailSendingMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailReplyToAddress</Name>
			<ExtendedDataType>DocEmailReplyToAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailBounceToAddress</Name>
			<ExtendedDataType>DocEmailBounceToAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EmailMsgPriority</Name>
			<EnumType>DocEmailMsgPriority</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailReadReceiptAddress</Name>
			<ExtendedDataType>DocEmailReadReceiptAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EmailDeliveryReceiptCondition</Name>
			<EnumType>DocEmailDeliveryReceiptCondition</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ArchivingReportsOption</Name>
			<EnumType>DocArchivingReportsPerReportOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ArchivingEmailAttachmentsOption</Name>
			<EnumType>DocArchivingEmailAttachmentsPerReportOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ArchivingReportParamsOption</Name>
			<EnumType>DocArchiveReportParamsPerReportOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ERModelMapping</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ERModelMappingID</ExtendedDataType>
			<HelpText>@DocentricAX3:ERModelMappingHelp</HelpText>
			<Label>@DocentricAX3:ERModelMapping</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ERModelDataToIncludeInDS</Name>
			<EnumType>DocERModelDataToIncludeInDS</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdfDocumentTitle</Name>
			<ExtendedDataType>DocPdfDocumentTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdfDocumentAuthor</Name>
			<ExtendedDataType>DocPdfDocumentAuthor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdfDocumentSubject</Name>
			<ExtendedDataType>DocPdfDocumentSubject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdfDocumentKeywords</Name>
			<ExtendedDataType>DocPdfDocumentKeywords</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictForNewPrinters</Name>
			<ExtendedDataType>DocRestrictForNewPrinters</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReportId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SRSReportNamex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SRSReportName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocReportGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReportGroup</Name>
					<Field>ReportGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DocReportTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>DocReportTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ERModelMappingTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ERModelMappingTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ERModelMapping</Name>
					<Field>ERModelMapping</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Direction</Name>
					<RelatedField>Direction</RelatedField>
					<ValueStr>ERModelMappingDirection::ToModel</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>