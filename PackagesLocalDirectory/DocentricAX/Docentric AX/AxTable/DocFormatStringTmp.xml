<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocFormatStringTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocFormatStringTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sample</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for sample format string.
    /// </summary>
    /// <returns>Sample format string</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display DocFormatStringSample sample()
    {
        switch (this.Type)
        {
            case Types::Real:
                System.Decimal d = 123456.789;
                return d.ToString(this.FormatString);

            case Types::Integer:
            case Types::Int64:
                System.Int32 i = 123456;
                return i.ToString(this.FormatString);

            case Types::Date:
            case Types::Time:
            case Types::UtcDateTime:
                return System.DateTime::Now.ToString(this.FormatString);

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new record to the table.
    /// </summary>
    /// <param name = "_type">Type</param>
    /// <param name = "_formatString">Format string</param>
    /// <param name = "_description">Description</param>
    private void addRecord(Types _type, DocFormatString _formatString, Description _description)
    {
        DocFormatStringTmp docFormatStringTmp;

        docFormatStringTmp.setTmpData(this);
        docFormatStringTmp.FormatString = _formatString;
        docFormatStringTmp.Type = _type;
        docFormatStringTmp.Description = _description;
        docFormatStringTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the temporary table with available formats.
    /// </summary>
    public void fillTable()
    {
        this.addRecord(Types::Date,         'd', 'Short date pattern.');
        this.addRecord(Types::Date,         'D', 'Long date pattern.');
        this.addRecord(Types::UtcDateTime,  'f', 'Full date/time pattern (short time).');
        this.addRecord(Types::UtcDateTime,  'F', 'Full date/time pattern (long time).');
        this.addRecord(Types::UtcDateTime,  'g', 'General date/time pattern (short time).');
        this.addRecord(Types::UtcDateTime,  'G', 'General date/time pattern (long time).');
        this.addRecord(Types::Date,         'm', 'Month/day pattern.');

        this.addRecord(Types::Real,     'n',    'Number pattern.');//\r\nResult: Integral and decimal digits, group separators, and a decimal separator with optional negative sign.\r\nPrecision specifier: Desired number of decimal places.");
        this.addRecord(Types::Real,     'n0',   'Number pattern without decimal digits.');//\r\nResult: Integral digits, group separators with optional negative sign.");
        this.addRecord(Types::Real,     'n2',   'Number pattern with 2 decimal digits.');//\r\nResult: Integral and decimal digits, group separators, and a decimal separator with optional negative sign.");
        this.addRecord(Types::Integer,  'd',    'Integer pattern.');//\r\nResult: Integer digits with optional negative sign.\r\nSupported by: Integral types only.\r\nPrecision specifier: Minimum number of digits.");
        this.addRecord(Types::Real,     'f',    'Fixed point pattern.');//\r\nResult: Integral and decimal digits with optional negative sign.\r\nPrecision specifier: Number of decimal digits.");
        this.addRecord(Types::Real,     'g',    'General pattern.');//\r\nResult: The more compact of either fixed-point or scientific notation.\r\nPrecision specifier: Number of significant digits.");
        this.addRecord(Types::Real,     'p',    'Percent pattern.');//\r\nResult: Number multiplied by 100 and displayed with a percent symbol.");
        this.addRecord(Types::Integer,  'x',    'Hexadecimal pattern.');//\r\nResult: A hexadecimal string.\r\nResult: A hexadecimal string.\r\nSupported by: Integral types only.\r\nPrecision specifier: Number of digits in the result string.");
        this.addRecord(Types::Real,     'e',    'Exponential pattern.');//\r\nResult: Exponential notation.\r\nPrecision specifier: Number of decimal digits.\r\nDefault precision specifier: 6.");
        this.addRecord(Types::Real,     '#.00', 'Custom format.');
        this.addRecord(Types::Real,     '#,#',  'Custom format.');
        this.addRecord(Types::Real,     '0.E+0.0',  'Custom format.');
        this.addRecord(Types::Real,     '0.e+0.0',  'Custom format.');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@DocentricAX3:UserDefinedPlaceholders</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>FormatString</TitleField1>
	<TitleField2>Type</TitleField2>
	<ClusteredIndex>FormatStringTypeIdx</ClusteredIndex>
	<PrimaryIndex></PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FormatString</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sample</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<Label>@DocentricAX4:FormatStringType</Label>
			<EnumType>Types</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormatString</Name>
			<ExtendedDataType>DocFormatString</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FormatStringTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FormatString</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>