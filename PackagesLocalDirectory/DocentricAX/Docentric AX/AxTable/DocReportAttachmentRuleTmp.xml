<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocReportAttachmentRuleTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocReportAttachmentRuleTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LoadFrom = DocReportAttachmentLoadFrom::GlobalAttachments;
        this.IfNotFoundAction = DocReportAttachmentIfNotFoundAction::ShowWarning;
        this.PrintAs = DocReportAttachmentPrintAs::SeparateAttachment;
        this.DisplayName = DocConstant::ReportAttachmentOrigDescPlaceholder;
        this.Restriction = DocReportAttachmentRestriction::All;
        this.LanguageFilter = DocReportAttachmentLanguageFilter::AnyLanguage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(DocReportAttachmentRuleTmp, Description):
                // If LoadFrom is Global and the user has manually entered the Description (other than empty),
                // check if it exists among the Global attachments.
                if (!DocReportAttachmentRule::isDescriptionValid(this.LoadFrom, this.Description, this.FileExtension))
                {
                    ret = ret && checkFailed(strFmt("@DocentricAX2:InvalidGlobalAttachmentName", this.Description));
                }
                break;
            
            case fieldNum(DocReportAttachmentRuleTmp, DisplayName):
                if (this.DisplayName == '')
                {
                    // Don't allow empty display name
                    ret = ret && checkFailed(strFmt("@DocentricAX2:FieldCannotBeEmpty",
                        fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, DisplayName))));
                }
                else
                {
                    // Check if the output filename is valid only if it doesn't contain placeholders.
                    if (!DocPlaceholderManager::findAnyPlaceholderCandidate(this.DisplayName))
                    {
                        if (!DocFileMngHelper::isValidOnlyFilename(this.DisplayName))
                        {
                            // Display name contains invalid characters
                            ret = ret && checkFailed(strFmt("@DocentricAX2:FieldContainsInvalidCharacters",
                                fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, DisplayName))));
                        }
                    }
                }

                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
        
        // Don't allow Global attachments with empty both Category and Description.
        if (this.LoadFrom == DocReportAttachmentLoadFrom::GlobalAttachments && this.CategoryId == '' && this.Description == '')
        {
            ret = ret && checkFailed(strFmt("@DocentricAX2:CategoryOrDescriptionMissing",
                    fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, CategoryId)),
                    fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, Description))));
        }

        // Don't allow empty DisplayName
        if (this.DisplayName == '')
        {
            ret = ret && checkFailed(strFmt("@DocentricAX2:FieldCannotBeEmpty",
                    fieldId2PName(tableNum(DocReportAttachmentRuleTmp), fieldNum(DocReportAttachmentRuleTmp, DisplayName))));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocReportAttachmentRuleTmp find(RefRecId _recId, boolean _forUpdate = false)
    {
        DocReportAttachmentRuleTmp attachment;
    
        if (_recId)
        {
            attachment.selectForUpdate(_forUpdate);
    
            select firstonly attachment
                where attachment.RecId == _recId;
        }
    
        return attachment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullfilename</Name>
				<Source><![CDATA[
    private void updateFullfilename()
    {
        // DisplayName  Extension   FullName
        // ---------------------------------
        //      -           -       *.*
        //      a           -       a.*
        //      -           b       *.b
        //      a           b       a.b
        str displayName = (this.DisplayName != '') ? this.DisplayName : DocConstantFile::FilenameWildcard;
        str fileExtension = (this.FileExtension != '') ? this.FileExtension : DocConstantFile::FilenameWildcard;
        this.FullFilename = strFmt('%1%2%3', displayName, DocConstantFile::FileExtensionDelimiter, fileExtension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            //case fieldNum(DocReportAttachmentTmp, Description):  
            case fieldNum(DocReportAttachmentRuleTmp, DisplayName):
            case fieldNum(DocReportAttachmentRuleTmp, FileExtension):
            case fieldNum(DocReportAttachmentRuleTmp, CategoryId):
                this.updateFullfilename();
                break;
            
            case fieldNum(DocReportAttachmentRuleTmp, LoadFrom):
                if (!DocReportAttachmentRule::isDescriptionValid(this.LoadFrom, this.Description, this.FileExtension))
                {
                    // If user switches from dynamic to global attachment and some
                    // Description was entered for dynamic attachment, which doesn't
                    // exist among the global attachments, then we silently clear it.
                    this.Description = '';
                }
                //this.updateFullfilename();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX2:DocReportAttachmentTmpDD</DeveloperDocumentation>
	<Label>@DocentricAX2:SelectedReportAttachments</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>LoadFrom</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IfNotFoundAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintAs</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileExtension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocuTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Restriction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageFilter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tags</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullFilename</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IfNotFoundAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintAs</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadFrom</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<EnumType>DocReportAttachmentLoadFrom</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<ExtendedDataType>DocAttachmentCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocReportAttachmentSelect</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DisplayName</Name>
			<ExtendedDataType>DocReportAttachmentName</ExtendedDataType>
			<Label>@SYS89193</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Restriction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocReportAttachmentRestriction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LanguageFilter</Name>
			<EnumType>DocReportAttachmentLanguageFilter</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IfNotFoundAction</Name>
			<EnumType>DocReportAttachmentIfNotFoundAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileExtension</Name>
			<ExtendedDataType>FilenameType</ExtendedDataType>
			<HelpText>@DocentricAX2:FileExtensionHelp</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintAs</Name>
			<EnumType>DocReportAttachmentPrintAs</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FullFilename</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocReportAttachmentName</ExtendedDataType>
			<HelpText>@DocentricAX2:FullFilenameHelp</HelpText>
			<Label>@DocentricAX2:FullFilename</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Label>@DocentricAX:CompanyId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Sequence</Name>
			<ExtendedDataType>DocReportAttachmentRuleSequence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocuTypeId</Name>
			<ExtendedDataType>DocReportAttachmentDocuTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tags</Name>
			<ExtendedDataType>DocAttachmentTags</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SequenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocAttachmentCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DocAttachmentCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>