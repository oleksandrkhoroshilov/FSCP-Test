<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocFeaturePreview</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocFeaturePreview extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isFeatureInPreviewMode</Name>
				<Source><![CDATA[
    public static boolean isFeatureInPreviewMode(DocFeatureName _name)
    {
        switch (_name)
        {
            /*****   Feature Preview: CBD  *****/
            // Features in the preview mode:
            //case DocConstant::FeaturePreviewCBD:  -> This feature is not a preview feature anymore!
            //    return true;

            // Features that were in the preview mode, but now they became mature and
            // therefore not considered/handled by the Feature preview functionality anymore.
            case DocConstant::FeaturePreviewCBD:
                return false;

            /*****   Feature Preview: NextGen  *****/
            case DocConstant::FeaturePreviewNextGen:
                return true;

            // Features that were in the preview mode, but now they became mature and
            // therefore not considered/handled by the Feature preview functionality anymore.
            //case DocConstant::FeaturePreviewNextGen:
            //    return false;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        // Don't perform any validation check when only updating the IsEnabled field, i.e. perform
        // validation check when inserting a new record, or when updating the FeatureName field.
        if (!this.isNewRecord() && this.orig().FeatureName == this.FeatureName)
        {
            return true;
        }

        // If the feature is in the preview mode, inserting of the new record can be done.
        if (DocFeaturePreview::isFeatureInPreviewMode(this.FeatureName))
        {
            return true;
        }

        // The feature is not in the preview mode, return false.
        DocGlobalHelper::handleError(strFmt("@DocentricAX3:FeaturePreviewInvalid", this.FeatureName));
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    // Populates all pre-release features.
    public static void populate()
    {
        void insertFeaturePreview(str _featurePreviewName)
        {
            DocFeaturePreview featurePreview;

            ttsbegin;
            featurePreview.clear();
            featurePreview.initValue();
            featurePreview.FeatureName = _featurePreviewName;
            featurePreview.IsEnabled = NoYes::No;
            featurePreview.doInsert();
            ttscommit;
        }


        // Feature: Configurable Business Documents (CBD)
        if (DocFeaturePreview::isFeatureInPreviewMode(DocConstant::FeaturePreviewCBD) &&
            !DocFeaturePreview::get(DocConstant::FeaturePreviewCBD))
        {
            insertFeaturePreview(DocConstant::FeaturePreviewCBD);
        }

        // Feature: NextGen
        if (DocFeaturePreview::isFeatureInPreviewMode(DocConstant::FeaturePreviewNextGen) &&
            !DocFeaturePreview::get(DocConstant::FeaturePreviewNextGen))
        {
            insertFeaturePreview(DocConstant::FeaturePreviewNextGen);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    public static DocFeaturePreview get(DocFeatureName _name)
    {
        DocFeaturePreview featurePreview;
        select firstOnly featurePreview where featurePreview.FeatureName == _name;
        return featurePreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the feature with the provided name is enabled in Preview mode or released.
    /// In other words: a feature is enabled if it is in Preview mode (the IsEnabled field in the DocFeaturePreview table is set to true)
    /// or the feature is not in Preview mode anymore but it is released and enabled for good.
    /// </summary>
    /// <param name = "_name">Feature name</param>
    /// <param name = "_populate">Should the DocFeatureName table be populated if the provided feature is not found.</param>
    /// <returns>True if the feature with the provided name is enabled; otherwise false</returns>
    public static boolean isEnabled(DocFeatureName _name, boolean _populate = true)
    {
        /****************************************************************/
        /*    Hard-stop on Feature Preview: NextGen.                    */
        /*    The feature is not ready yet to be in the preview mode    */
        /****************************************************************/
        // To put this feature in the Preview mode, please remove the following if statement and
        // for the DocParameters.DocentricEngine table field, set the Visible property to Yes.
        if (_name == DocConstant::FeaturePreviewNextGen)
        {
            return false;
        }
        /****************************************************************/

        // If the feature is not in the preview mode anymore, return true because such feature is always enabled.
        if (!DocFeaturePreview::isFeatureInPreviewMode(_name))
        {
            return true;
        }

        // Check if the preview feature is found in the setup table.
        DocFeaturePreview featurePreview = DocFeaturePreview::get(_name);

        if (!featurePreview.RecId)
        {
            // Preview feature is not found in the setup table.
            // Populate all preview features if requested.
            if (_populate)
            {
                DocFeaturePreview::populate();
            }
            return false;
        }

        // Preview feature is found in the setup table, return true if it is marked as enabled.
        return featurePreview.IsEnabled == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFeaturePreviewToFormRun</Name>
				<Source><![CDATA[
    public static void applyFeaturePreviewToFormRun(FormRun _formRun)
    {
        container controlsToHide = conNull();

        // Form: DocReportTable (Docentric report setup)
        if (_formRun.name() == formStr(DocReportTable))
        {
            // Feature Preview: CBD
            if (!DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewCBD, true))
            {
                controlsToHide = [
                        formControlStr(DocReportTable, DocReportDsCBD),
                        formControlStr(DocReportTable, ListOverview_DataSourceType),
                        formControlStr(DocReportTable, ValidateTemplateDSTypeButton)
                    ];
            }
        }
        // Form: DocParameters (Docentric AX parameters)
        else if (_formRun.name() == formStr(DocParameters))
        {
            // Feature Preview: CBD
            if (!DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewCBD, true))
            {
                controlsToHide = [
                        formControlStr(DocParameters, DocParameters_EnableCbdDs)
                    ];
            }

            // Feature Preview: NextGen
            if (!DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewNextGen, true))
            {
                controlsToHide = [
                        formControlStr(DocParameters, DocParameters_DocentricEngine)
                    ];
            }
        }
        // Form: DocReportDsGenerationOptions (Data source generation options)
        else if (_formRun.name() == formStr(DocReportDsGenerationOptions))
        {
            // Feature Preview: CBD
            if (!DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewCBD, true))
            {
                controlsToHide = [
                        formControlStr(DocReportDsGenerationOptions, GenerateXmlDsWithReportRunMode)
                    ];
            }

            // Feature Preview: NextGen
            if (!DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewNextGen, true))
            {
                controlsToHide = [
                        formControlStr(DocReportDsGenerationOptions, DsDocentricEngine)
                    ];
            }
        }
        // Form: SRSPrintDestinationSettingsForm (Print destination settings form)
        else if (_formRun.name() == formStr(SRSPrintDestinationSettingsForm))
        {
            // Feature Preview: NextGen
            if (!DocFeaturePreview::isEnabled(DocConstant::FeaturePreviewNextGen, true))
            {
                controlsToHide = [
                        'DsDocentricEngine_DC' /* formControlStr(SRSPrintDestinationSettingsForm, DsDocentricEngine_DC) */
                    ];
            }
        }
        
        // Hide all marked controls.
        for(int i = 1; i <= conLen(controlsToHide); i++)
        {
            str controlName = conPeek(controlsToHide, i);
            FormControl formControl = _formRun.control(_formRun.controlId(controlName));
            if (formControl)
            {
                formControl.visible(false);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:FeaturePreviewDevDoc</DeveloperDocumentation>
	<Label>@DocentricAX3:FeaturePreview</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FeatureName</TitleField1>
	<TitleField2>IsEnabled</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>FeatureNameIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>FeatureNameIdx</PrimaryIndex>
	<ReplacementKey>FeatureNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FeatureName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FeatureName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@DocentricAX:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FeatureName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FeatureName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocFeatureName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnabled</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@DocentricAX3:FeatureEnabled</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FeatureNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FeatureName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EnabledIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsEnabled</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>