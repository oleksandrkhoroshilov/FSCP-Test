<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocGlobalCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocGlobalCache extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the DocGlobalCache table.
    /// </summary>
    /// <param name = "_key">Global cache key</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocGlobalCache table; otherwise an empty record</returns>
    private static DocGlobalCache find(DocGlobalCacheKey _key, boolean _forUpdate = false)
    {
        DocGlobalCache docGlobalCache;

        docGlobalCache.selectForUpdate(_forUpdate);

        select docGlobalCache
            where docGlobalCache.Key == _key;

        return docGlobalCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cache value for the specified global cache key.
    /// </summary>
    /// <param name = "_key">Global cache key</param>
    /// <returns>Cache value</returns>
    public static guid getCacheValue(str _key)
    {
        DocGlobalCache docGlobalCache;
        int infoLogLine;

        try
        {
            infoLogLine = infologLine();

            int key = symbol2Enum(enumNum(DocGlobalCacheKey), _key);
            if (key == 255)
            {
                throw Exception::Error;
            }

            docGlobalCache = DocGlobalCache::find(key);
            if (!docGlobalCache)
            {
                docGlobalCache = DocGlobalCache::upsert(key);
            }
        }
        catch
        {
            infolog().cut(infoLogLine);
            exceptionTextFallThrough();
        }

        return docGlobalCache.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or inserts a cache entry for the specified global cache key.
    /// </summary>
    /// <param name = "_key">Global cache key</param>
    /// <returns>If successful, an updated or inserted DocGlobalCache record, otherwise an empty record</returns>
    public static DocGlobalCache upsert(DocGlobalCacheKey _key)
    {
        DocGlobalCache docGlobalCache;
        int retryCount;
        int infoLogLine;

        try
        {
            infoLogLine = infologLine();

            ttsbegin;

            docGlobalCache = DocGlobalCache::find(_key, true);

            DocGlobalCacheValue cacheValue = newGuid();
            if (!docGlobalCache)
            {
                docGlobalCache.Key = _key;
                docGlobalCache.Value = cacheValue;
                docGlobalCache.insert();
            }
            else
            {
                docGlobalCache.Value = cacheValue;
                docGlobalCache.update();
            }

            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (retryCount < SysDataCacheConstants::maxRetryCount)
            {
                retryCount ++;
                retry;
            }
            infolog().cut(infoLogLine);
        }
        catch (Exception::UpdateConflict)
        {
            if (retryCount < SysDataCacheConstants::maxRetryCount)
            {
                retryCount ++;
                retry;
            }
            infolog().cut(infoLogLine);
        }

        return docGlobalCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:DocGlobalCacheDD</DeveloperDocumentation>
	<Label>@DocentricAX4:DocGlobalCache</Label>
	<TableGroup>Framework</TableGroup>
	<TitleField1>Key</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>Key</ClusteredIndex>
	<PrimaryIndex>Key</PrimaryIndex>
	<ReplacementKey>Key</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<EnumType>DocGlobalCacheKey</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>Value</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocGlobalCacheValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>