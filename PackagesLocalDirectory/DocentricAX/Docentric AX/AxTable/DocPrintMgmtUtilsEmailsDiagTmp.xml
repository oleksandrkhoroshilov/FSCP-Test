<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPrintMgmtUtilsEmailsDiagTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocPrintMgmtUtilsEmailsDiagTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomerInvalidEmails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invalid email addresses of customers.
    /// </summary>
    /// <param name = "_tmpTable">An instance of the DocPrintMgmtUtilsEmailsDiagTmp table</param>
    /// <returns>An instance of the DocPrintMgmtUtilsEmailsDiagTmp table with invalid email addresses of customers</returns>
    public static DocPrintMgmtUtilsEmailsDiagTmp getCustomerInvalidEmails(DocPrintMgmtUtilsEmailsDiagTmp _tmpTable)
    {
        CustTable custTable;
        DirPartyLocation partyLocation;
        LogisticsElectronicAddress logElectronicAddress;

        ttsbegin;

        delete_from _tmpTable;

        while select RecId, Locator
            from logElectronicAddress
                where logElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
            exists join partyLocation
                where partyLocation.Location == logElectronicAddress.Location
            exists join custTable
                where custTable.Party == partyLocation.Party
        {
            if (!DocGlobalHelper::validateEmailListSkipPlaceholders(logElectronicAddress.Locator, true))
            {
                _tmpTable.clear();
                _tmpTable.RefRecId = logElectronicAddress.RecId;
                _tmpTable.insert();
            }
        }

        ttscommit;

        return _tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInvalidEmails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invalid email addresses of vendors.
    /// </summary>
    /// <param name = "_tmpTable">An instance of the DocPrintMgmtUtilsEmailsDiagTmp table</param>
    /// <returns>An instance of the DocPrintMgmtUtilsEmailsDiagTmp table with invalid email addresses of vendors</returns>
    public static DocPrintMgmtUtilsEmailsDiagTmp getVendorInvalidEmails(DocPrintMgmtUtilsEmailsDiagTmp _tmpTable)
    {
        VendTable vendTable;
        DirPartyLocation partyLocation;
        LogisticsElectronicAddress logElectronicAddress;

        ttsbegin;

        delete_from _tmpTable;

        while select RecId, Locator
            from logElectronicAddress
                where logElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
            exists join partyLocation
                where partyLocation.Location == logElectronicAddress.Location
            exists join vendTable
                where vendTable.Party == partyLocation.Party
        {
            if (!DocGlobalHelper::validateEmailListSkipPlaceholders(logElectronicAddress.Locator, true))
            {
                _tmpTable.clear();
                _tmpTable.RefRecId = logElectronicAddress.RecId;
                _tmpTable.insert();
            }
        }

        ttscommit;

        return _tmpTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX4:DocPrintMgmtUtilsEmailsDiagTmpDD</DeveloperDocumentation>
	<FormRef>DocPrintMgmtUtilsCustomersWithInvalidEmailsDiagResults</FormRef>
	<Label>@DocentricAX4:DocPrintMgmtUtilsEmailsDiagTmp</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>DataAreaId</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>