<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocElectronicSignatureCertificate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using Docentric.AX.Certificates;
using UL = Docentric.AX.Framework.Utilities;

public class DocElectronicSignatureCertificate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocElectronicSignatureCertificate record specified by the DocCertificateId value.
    /// </summary>
    /// <param name = "_certificateId">Certificate Id</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocElectronicSignatureCertificate table; otherwise, an empty record.</returns>
    public static DocElectronicSignatureCertificate find(DocCertificateId _certificateId, boolean _forUpdate = false)
    {
        DocElectronicSignatureCertificate certificate;

        certificate.selectForUpdate(_forUpdate);

        select firstonly certificate
            where certificate.CertificateId == _certificateId;

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByThumbprint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocElectronicSignatureCertificate record specified by the DocCertificateThumbprint value.
    /// </summary>
    /// <param name = "_certificateThumbprint">Certificate thumbprint</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update</param>
    /// <returns>A record in the DocElectronicSignatureCertificate table; otherwise, an empty record.</returns>
    public static DocElectronicSignatureCertificate findByThumbprint(DocCertificateThumbprint _certificateThumbprint, boolean _forUpdate = false)
    {
        DocElectronicSignatureCertificate certificate;

        certificate.selectForUpdate(_forUpdate);

        select firstonly certificate
            where certificate.Thumbprint == _certificateThumbprint;

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in DocElectronicSignatureCertificate table.
    /// </summary>
    public void insert()
    {
        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);

        // Reset the global cache for the AzureKeyVaultCertificate key
        DocGlobalCache::upsert(DocGlobalCacheKey::AzureKeyVaultCertificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in DocElectronicSignatureCertificate table.
    /// </summary>
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);

        // Reset the global cache for the AzureKeyVaultCertificate key
        DocGlobalCache::upsert(DocGlobalCacheKey::AzureKeyVaultCertificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFromX509Certificate2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current table buffer fields with uploaded PFX certificate.  
    /// </summary>
    /// <param name = "_certificate">PFX certificate</param>
    public void fillFromX509Certificate2(X509Certificate2 _certificate)
    {
        this.CertificateSubject = _certificate.FriendlyName;
        this.IssuedBy = _certificate.Issuer;
        this.IssuedTo = _certificate.Subject;
        this.ValidFrom = _certificate.NotBefore;
        this.ValidTo = _certificate.NotAfter;
        this.Thumbprint = _certificate.Thumbprint;
        this.Email = CertificateUtils::GetCertificateEmail(_certificate);

        if (!this.CertificateSubject)
        {
            this.CertificateSubject = _certificate.GetNameInfo(X509NameType::SimpleName, false);
        }

        // Save PFX encrypted with thumprint password in encrypted field DocElectronicSignatureCertificate.Certificate
        System.Byte[] certificateBytes = CertificateUtils::SaveAsPfx(_certificate, _certificate.Thumbprint);
        str certificateStr = DocGlobalHelper::convertToBase64String(certificateBytes);
        Global::editEncryptedField(this, certificateStr, fieldNum(DocElectronicSignatureCertificate, Certificate), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the PFX certificate as byte array.
    /// </summary>
    /// <returns>PFX certificate as byte array.</returns>
    public System.Byte[] getCertificate()
    {
        System.Byte[] certificateBytes = null;

        str certificateStr = Global::editEncryptedField(this, '', fieldNum(DocElectronicSignatureCertificate, Certificate), false);
        if (certificateStr)
        {
            certificateBytes = DocGlobalHelper::convertFromBase64String(certificateStr);
        }
        return certificateBytes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationStatusIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for certificate validation status indicator.
    /// </summary>
    /// <returns>Certificate validation status indicator</returns>
    public display container validationStatusIndicator()
    {
        container result = conNull();
        
        container symbolAndLabel = this.getSymbolAndLabelForValidationStatus();
        str symbol = conPeek(symbolAndLabel, 1);
        str label = conPeek(symbolAndLabel, 2);

        if (symbol)
        {
            result = ImageReference::constructForSymbol(symbol, label).pack();
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSymbolAndLabelForValidationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the symbol and label depending on current certificate validation status.
    /// </summary>
    /// <returns>Container with symbol and label</returns>
    private container getSymbolAndLabelForValidationStatus()
    {
        str symbol = '';
        LabelId label;

        switch (this.ValidationStatus)
        {
            case DocCertificateValidationStatus::Valid:
                symbol = ImageReferenceSymbol::Completed;
                label = "@DocentricAX3:ElectronicSignatureCertificateValidationStatusValid";
                break;

            case DocCertificateValidationStatus::Error:
                symbol = ImageReferenceSymbol::Error;
                label = "@DocentricAX3:ElectronicSignatureCertificateValidationStatusError";
                break;

            case DocCertificateValidationStatus::Warning:
                symbol = ImageReferenceSymbol::Warning;
                label = "@DocentricAX3:ElectronicSignatureCertificateValidationStatusWarning";
                break;
        }
        return [symbol, label];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current record.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateWrite()
    {
        boolean ret;
        DocElectronicSignatureCertificate signatureCertificate;
    
        ret = super();

        // Check if the selected certificate with the same Certificate ID already exists
        if (ret)
        {
            select firstonly CertificateId
                from signatureCertificate
                where signatureCertificate.RecId != this.RecId
                   && signatureCertificate.CertificateId == this.CertificateId;
            if (signatureCertificate)
            {
                ret = checkFailed(strFmt("@DocentricAX3:ElectronicSignatureErrorCertificateIdExists", this.CertificateId)) && ret;
            }
        }

        // Check if the selected certificate with the same Thumbprint already exists
        if (ret)
        {
            select firstonly CertificateId, Thumbprint
                from signatureCertificate
                where signatureCertificate.RecId != this.RecId
                   && signatureCertificate.Thumbprint == this.Thumbprint;
            if (signatureCertificate)
            {
                ret = checkFailed(strFmt("@DocentricAX3:ElectronicSignatureErrorCertificateThumbprintExists", signatureCertificate.CertificateId)) && ret;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the DocElectronicSignatureCertificate table exists.
    /// </summary>
    /// <param name="_certificateId">Certificate Id</param>
    /// <returns>True if the specified record exists; otherwise, false.</returns>
    public static boolean exist(DocCertificateId _certificateId)
    {
        return _certificateId && (select firstonly RecId from DocElectronicSignatureCertificate
                    where DocElectronicSignatureCertificate.CertificateId == _certificateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearEncryptedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears encrypted fields (Certificate).
    /// </summary>
    /// <returns>Description od changed fields if some records were changed; otherwise empty string.</returns>
    public static str clearEncryptedFields()
    {
        DocElectronicSignatureCertificate certificate;
        boolean changed = false;
        
        ttsBegin;

        while select forupdate certificate
        {
            // clear invalid Certificate fields (exception thrown at decryption)
            System.Byte[] value;
            if (!UL.ReflectionHelper::TryInvokeInstanceMethod(byref value, certificate, tableMethodStr(DocElectronicSignatureCertificate, getCertificate)))
            {
                Global::editEncryptedField(certificate, '', fieldNum(DocElectronicSignatureCertificate, Certificate), true);
                certificate.update();
                changed = true;
            }
        }

        ttsCommit;

        return (changed ? 'Electronic signature certificates (DocElectronicSignatureCertificate)' : '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:ElectronicSignatureCertificateDD</DeveloperDocumentation>
	<FormRef>DocElectronicSignatureCertificate</FormRef>
	<Label>@DocentricAX3:ElectronicSignatureCertificate</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>IssuedTo</TitleField1>
	<TitleField2>ValidTo</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CertificateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>CertificateIdx</PrimaryIndex>
	<ReplacementKey>CertificateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateStorage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidationStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificateProperties</Name>
			<Label>@SYP4881678</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Thumbprint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@DocentricAX:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>validationStatusIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidationStatusMessage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateStorage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Thumbprint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DocCertificateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CertificateStorage</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>DocCertificateStorage</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureKeyVaultReferenceHelp</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateSubject</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureCertificateSubjectHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureCertificateSubject</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssuedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocCertificateIssuedBy</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssuedTo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocCertificateIssuedTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureCertificateValidFromHelp</HelpText>
			<Label>@SYS35161</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureCertificateValidToHelp</HelpText>
			<Label>@SYS102701</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Thumbprint</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocCertificateThumbprint</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Certificate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>EncryptedField</ExtendedDataType>
			<HelpText>@DocentricAX3:ElectronicSignatureCertificateDataHelp</HelpText>
			<Label>@DocentricAX3:ElectronicSignatureCertificateData</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidationStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>DocCertificateValidationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationStatusMessage</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocCertificateValidationStatusMessage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DocCertificateEmail</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CertificateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CertificateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ThumbprintIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Thumbprint</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificate</Name>
					<Field>KeyVaultCertificate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>