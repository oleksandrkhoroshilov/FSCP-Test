<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocRestrictedPrinterInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocRestrictedPrinterInfo extends common
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMissingInfoRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Make sure that this table is in sync with SysCorpNetPrinters (in other words,
    /// add records for any network printer that doesn't already exist in this table).
    /// If they have all matching records, then worst-case is one select. Otherwise, 
    /// the missing records will be added once and every future execution of this method 
    /// will be fast.
    /// Benefit of this: we can use inner join instead of outer joins and we have simpler code,
    /// because we don't have to care of the situation where DocRestrictedPrinterInfo records don't exist.
    /// </summary>
    public static void addMissingInfoRecords()
    {
        DocRestrictedPrinterInfo restrictedPrinterInfo, restrictedPrinterInfoInsert;
        SysCorpNetPrinters netPrinters;
        
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(DocRestrictedPrinterInfo));

        try
        {
            while select PrinterName from netPrinters
                notexists join restrictedPrinterInfo
                    where restrictedPrinterInfo.PrinterName == netPrinters.PrinterName
            {
                restrictedPrinterInfoInsert.initForNetworkPrinter(netPrinters.PrinterName);

                if (restrictedPrinterInfoInsert.validateWrite())
                {
                    recordInsertList.add(restrictedPrinterInfoInsert);
                }
            }

            recordInsertList.insertDatabase();
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX3:ErrorAddingMissingRestrictedPrintersInfo");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.RestrictForNewReports = false;
        this.RestrictForUnregisteredReports = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNetworkPrinter</Name>
				<Source><![CDATA[
    public void initForNetworkPrinter(PrinterName _printerName)
    {
        this.initValue();

        this.PrinterName = _printerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfRestrictedReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows number of reports restricted for the current printer.
    /// </summary>
    /// <returns>Number of restricted reports for the current printer</returns>
    [SysClientCacheDataMethodAttribute]
    display int64 getNumberOfRestrictedReports()
    {
        DocRestrictedPrintersView view;

        select count(RecId) from view
            where view.IsRestricted == NoYes::Yes
                && view.PrinterName == this.PrinterName
                && view.ReportId != DocConstant::RestrictedPrinterUnregisteredReports
                && view.ReportId != DocConstant::RestrictedPrinterNewReports;

        return view.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfAllowedReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows number of reports allowed for the current printer.
    /// </summary>
    /// <returns>Number of allowed reports for the current printer</returns>
    [SysClientCacheDataMethodAttribute]
    display int64 getNumberOfAllowedReports()
    {
        DocRestrictedPrintersView view;

        select count(RecId) from view
            where view.IsRestricted == NoYes::No
                && view.PrinterName == this.PrinterName
                && view.ReportId != DocConstant::RestrictedPrinterUnregisteredReports
                && view.ReportId != DocConstant::RestrictedPrinterNewReports;

        return view.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPrinterInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that shows the status of the current printer.
    /// </summary>
    /// <returns>Status of the current printer</returns>
    [SysClientCacheDataMethodAttribute]
    display str displayPrinterInfo()
    {
        SysCorpNetPrinters networkPrinters;
        
        select firstonly Active from networkPrinters where networkPrinters.PrinterName == this.PrinterName;

        return strFmt('Active: %1', networkPrinters.Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static DocRestrictedPrinterInfo find(RecId _recId, boolean _forUpdate = false)
    {
        DocRestrictedPrinterInfo printerInfo;

        printerInfo.selectForUpdate(_forUpdate);

        if (_recid)
        {
            select firstonly printerInfo where printerInfo.RecId == _recId;
        }
        
        return printerInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPrinterName</Name>
				<Source><![CDATA[
    public static DocRestrictedPrinterInfo findByPrinterName(PrinterName _printerName, boolean _forUpdate = false)
    {
        DocRestrictedPrinterInfo printerInfo;

        printerInfo.selectForUpdate(_forUpdate);

        if (_printerName)
        {
            select firstonly printerInfo where printerInfo.PrinterName == _printerName;
        }
        
        return printerInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictNewReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restrict a given report for all network printers that have 'Restrict for new reports' flag set.
    /// This method is called each time when a new report is added to Docentric report setup.
    /// </summary>
    /// <param name = "_reportId">Report ID of the Docentric report that shuold be restricted.</param>
    public static void restrictNewReport(DocReportId _reportId)
    {        
        CompanyInfo companyInfo;

        // We need to iterate through companies, because all the affected tables
        // are company-specific.
        while select DataArea from companyInfo
        {
            DataAreaId companyId = companyInfo.DataArea;

            try
            {
                changecompany(companyId)
                {
                    // These declarations must be within the changecompany() block,
                    // otherwise they keep the context of DAT company and we don't 
                    // get the correct result.
                    DocRestrictedPrinter restrictedPrinter;
                    DocRestrictedPrinterInfo printerInfo;

                    // For each network printer in the current company having the RestrictForNewReports flag ON,
                    // add a new entry in the RestrictedPrinter table. Restrict them for the provided Report ID.
                    insert_recordset restrictedPrinter (PrinterName, ReportId)
                        select PrinterName, _reportId from printerInfo
                        where printerInfo.RestrictForNewReports == NoYes::Yes;
                }
            }
            catch
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX3:ErrorRestrictingNewReport", _reportId, companyId));
            }
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAX3:DocRestrictedPrinterInfoDD</DeveloperDocumentation>
	<Label>@DocentricAX3:RestrictedPrinters</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>PrinterName</TitleField1>
	<ReplacementKey>PrinterNameIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrinterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictForNewReports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictForUnregisteredReports</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrinterName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrinterName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<HelpText>@DocentricAX3:RestrictedPrinterHelp</HelpText>
			<Label>@DocentricAX3:RestrictedPrinter</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictForNewReports</Name>
			<ExtendedDataType>DocRestrictForNewReports</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictForUnregisteredReports</Name>
			<ExtendedDataType>DocRestrictForUnregisteredReports</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrinterNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PrinterName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysCorpNetPrinters</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SysCorpNetPrinters</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrinterName</Name>
					<Field>PrinterName</Field>
					<RelatedField>PrinterName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>