<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportUserDefinedPlaceholderExpressionDesigner</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using DOCRX = Docentric.AX.Reporting.XPath;

[Form]
public class DocReportUserDefinedPlaceholderExpressionDesigner extends FormRun
{
    private DOCRX.XPathDdspHelper xPathDdspHelper;
    private DocPlaceholderExpressionDesignerSourceTreeManager sourceTreeManager;
    private DocPlaceholderExpressionDesignerFunctionTreeManager functionTreeManager;
    private DocReportUserDefinedPlaceholder bufferDocReportUserDefinedPlaceholder;
    private str previewFormatLanguageId;

    private boolean hasEditAccessRight;  // A flag indicating if user has edit permission

    private boolean isModified;    // A flag indicating if form data is changed
    private boolean isSaved;       // A flag indicating if form data is saved
    private boolean inCloseCancel; // A flag indicating if form is closed by pressing ESC key
    
    
    #SysSystemDefinedButtons

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a form.
    /// </summary>
    public void init()
    {
        super();

        if (element.args() == null || element.args().dataset() != tableNum(DocReportUserDefinedPlaceholder))
        {
            throw error('Form has to be called from the User-defined placeholders form');
        }

        bufferDocReportUserDefinedPlaceholder = element.args().record();

        // Get preview format language from caller form
        if (element.args().caller() && element.args().caller() is FormRun)
        {
            FormRun formRun = element.args().caller();
            FormControl formControl = formRun.design().controlName(identifierStr(PreviewFormatLanguageId));
            if (formControl)
            {
                previewFormatLanguageId = formControl.valueStr();
            }
        }

        // Expression designer can be opened if a record exists
        if (!bufferDocReportUserDefinedPlaceholder.Report)
        {
            throw error("@DocentricAX3:PlaceholderExpressionDesignerMissingRecord");
        }

        // Expression designer can be opened if valid DDSP file exists
        xPathDdspHelper = this.getXPathDdspHelper();
        if (xPathDdspHelper == null)
        {
            throw error("@DocentricAX3:PlaceholderExpressionDesignerMissingOrInvalidDDSP");
        }

        // Check current access right permission for current user
        hasEditAccessRight = this.hasEditAccessRight();

        // Subscribe to the EditModeSwiched event
        element.viewEditModeHelper().EditModeSwitched += eventhandler(this.postEditModeSwitch);
        // Subscribe to the Saving event
        element.dataHelper().Saving += eventhandler(this.preSave);

        // Hide the Popout button.
        FormCommandButtonControl popoutButton = this.control(this.controlId(#SystemDefinedPopoutButton)) as FormCommandButtonControl;
        if (popoutButton)
        {
            popoutButton.visible(false);
        }
        
        // Set the form title
        this.setTitle();

        // Set the form controls
        this.setControls();

        // Initilaizes the data source form tree control
        sourceTreeManager = DocPlaceholderExpressionDesignerSourceTreeManager::construct(SourceTree);
        sourceTreeManager.buildTree(bufferDocReportUserDefinedPlaceholder.DdspDataSection, xPathDdspHelper);        

        // Initializes the function form tree control
        functionTreeManager = DocPlaceholderExpressionDesignerFunctionTreeManager::construct(ExpressionElementsTree);
        functionTreeManager.buildTree();

        // Validate the expression string
        element.validateExpression();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEditModeSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the ViewEdit mode is changed.
    /// </summary>
    public void postEditModeSwitch()
    {
        SourceAddDataSourceButton.enabled(element.viewEditModeHelper().isInEditMode() && hasEditAccessRight);
        ExpressionElementsAddButton.enabled(element.viewEditModeHelper().isInEditMode() && hasEditAccessRight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preSave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the Save button is clicked.
    /// </summary>
    /// <param name = "_cancellableArgs">A <FormRunServiceArgs> object</param>
    public void preSave(FormRunServiceArgs _cancellableArgs)
    {
        // Validate the expression string
        boolean error = element.validateExpression();

        if (error)
        {
            // Cancel the "super" of the task
            _cancellableArgs.cancel();
            // Reset the flag indicating that form data was saved
            isSaved = false;
        }
        else
        {
            bufferDocReportUserDefinedPlaceholder.DdspDataSection = SourceDataSectionComboBox.selection();
            bufferDocReportUserDefinedPlaceholder.Expression = ExpressionString.text();

            // Reset the flag indicating that form data was chnaged
            isModified = false;
            // Set the flag indicating that form data was saved
            isSaved = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the controls on the form.
    /// </summary>
    public void setControls()
    {
        SourceAddDataSourceButton.enabled(element.viewEditModeHelper().isInEditMode() && hasEditAccessRight);
        ExpressionElementsAddButton.enabled(element.viewEditModeHelper().isInEditMode() && hasEditAccessRight);
        SourceDataSectionComboBox.allowEdit(hasEditAccessRight);
        ExpressionString.allowEdit(hasEditAccessRight);

        SourceDataSectionComboBox.selection(bufferDocReportUserDefinedPlaceholder.DdspDataSection);
        ExpressionString.text(bufferDocReportUserDefinedPlaceholder.Expression);
        ErrorsString.colorScheme(FormColorScheme::RGB);
        ErrorsString.foregroundColor(0xFF0000); // RGB(255,0,0)

        // Save button
        FormCommandButtonControl saveButton = this.control(this.controlId(#SystemDefinedSaveButton)) as FormCommandButtonControl;
        if (saveButton)
        {
            saveButton.enabled(hasEditAccessRight);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEditAccessRight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current access right permissions for current user.
    /// </summary>
    /// <returns>True if user has edit permission, otherwise false</returns>
    private boolean hasEditAccessRight()
    {
        SecurityRights securityRights = SecurityRights::construct();
        AccessRight accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, menuItemDisplayStr(DocReportUserDefinedPlaceholderExpressionDesigner));

        return !(accessRight == AccessRight::NoAccess || accessRight == AccessRight::View);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can close the form.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canClose()
    {
        boolean ret = super();

        ret = ret && this.tryToSaveIfModified();
  
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the form.
    /// </summary>
    public void close()
    {
        super();

        // Refresh the caller form
        if (this.args() && this.args().caller())
        {
            IDocRefreshable caller = this.args().caller() as IDocRefreshable;
            if (caller)
            {
                caller.refreshCallerDataSourceAndPosition(bufferDocReportUserDefinedPlaceholder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Close cancel.
    /// </summary>
    public void closeCancel()
    {
        try
        {
            inCloseCancel = true;
            super();
        }
        finally
        {
            inCloseCancel = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryToSaveIfModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if form should be saved and saves it if necessary.
    /// </summary>
    /// <returns>True if form saved; false otherwise.</returns>
    public boolean tryToSaveIfModified()
    {
        #Task
        boolean ret = true;

        // Check the flag indicating that form data was chnaged
        if (isModified)
        {
            boolean tryToSave;
            [tryToSave, ret] = this.decideToSaveAndExit();

            if (tryToSave)
            {
                // Save the modified data
                element.task(#taskSave);

                if (!isSaved && ErrorsString.text())
                {
                    ret = checkFailed(ErrorsString.text());
                }
                else
                {
                    ret = isSaved && ret;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decideToSaveAndExit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether to save and exit. Can ask user to confirm saving.
    /// </summary>
    /// <returns>A container [save, exit]</returns>
    public container decideToSaveAndExit()
    {
        boolean save;
        boolean exit = true;

        if (inCloseCancel)
        {
            save = false;
        }
        else
        {
            DialogButton answer = Box::yesNoCancel("@DocentricAX3:PlaceholdeExpressionDesignerSaveChanges", DialogButton::Cancel);
            [save, exit] = [answer == DialogButton::Yes, answer != DialogButton::Cancel];
        }
        return [save, exit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXPathDdspHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the <c>XPathDdspHelper<c> object.
    /// </summary>
    /// <returns>An instance of the <c>XPathDdspHelper<c> object</returns>
    private DOCRX.XPathDdspHelper getXPathDdspHelper()
    {
        DocReportTable docReportTable = DocReportTable::find(bufferDocReportUserDefinedPlaceholder.Report);
        DocReportDDSP docReportDDSP = DocReportDDSP::find(docReportTable.Recid);

        xPathDdspHelper = null;
        
        try
        {
            if (!docReportDdsp.RecId)
            {
                throw Exception::Error;
            }

            DocentricEngine docentricEngine = new DocentricEngine();
            docentricEngine.renderingSettings().parmRenderingLanguageId(previewFormatLanguageId);
            xPathDdspHelper = new DOCRX.XPathDdspHelper(docReportDDSP.Data, previewFormatLanguageId, docentricEngine);
        }
        catch
        {
            Global::exceptionTextFallThrough();
        }

        return xPathDdspHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the expression string and returns the result container [error, resultStr].
    /// </summary>
    /// <returns>A container [error, resultStr]</returns>
    public container evaluateExpression()
    {
        if (!ExpressionString.text())
        {
            return [false, ''];
        }
            
        try
        {
            // Evaluate the expression string
            DocPlaceholderExpressionResult result = xPathDdspHelper.Evaluate(enum2Symbol(enumNum(DocDdspDataSection), SourceDataSectionComboBox.selection()), ExpressionString.text());
            if (!System.String::IsNullOrWhiteSpace(bufferDocReportUserDefinedPlaceholder.FormatString))
            {
                try
                {
                    // Apply selected format to the expression result
                    result = xPathDdspHelper.Evaluate(enum2Symbol(enumNum(DocDdspDataSection), SourceDataSectionComboBox.selection()), strFmt('format(%1, "%2")', ExpressionString.text(), bufferDocReportUserDefinedPlaceholder.FormatString));
                }
                catch
                {
                    // In case of error unformatted expression result is returned
                    Global::exceptionTextFallThrough();
                }
            }
            return [false, result];
        }
        catch
        {
            return [true, strFmt('INVALID_EXPRESSION: %1', DocGlobalHelper::getLastClrExceptionMessage())];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the expression string.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean validateExpression()
    {
        boolean error;
        str resultStr;

        [error, resultStr] = this.evaluateExpression();

        if (error)
        {
            ResultString.text('');
            ErrorsString.text(resultStr);
            ExpressionTab.tab(2);
        }
        else
        {
            ResultString.text(resultStr);
            ErrorsString.text('');
            ExpressionTab.tab(1);
        }
        return error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTextChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents to open a system dialog Save changes in a form string control if ESC is pressed.
    /// </summary>
    private void onTextChange(FormStringControl _formStringControl, boolean _hasChanged = false)
    {
        FormStringControl formStringControl = _formStringControl;
        formStringControl.text(_formStringControl.text());
        _formStringControl.hasChanged(_hasChanged);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form title.
    /// </summary>
    private void setTitle()
    {
        DocReportTable docReportTable = DocReportTable::find(bufferDocReportUserDefinedPlaceholder.Report);

        str title = strUpr(strFmt('%1', docReportTable.ReportId) + (bufferDocReportUserDefinedPlaceholder.PlaceholderName ? strFmt(' : %1', bufferDocReportUserDefinedPlaceholder.PlaceholderName) : ''));
        DesignerHeaderTitle.text(title);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SourceAddDataSourceButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Adds the xpath string from the current tree item to the expression string.
        /// </summary>
        public void clicked()
        {
            super();

            int idx = SourceTree.getSelection();
            FormTreeItem formTreeItem = SourceTree.getItem(idx);

            str xPathString = formTreeItem.data().parmXPathString();
            if (xPathString)
            {
                // Set the flag indicating that form data is chnaged
                isModified = true;

                str expression = ExpressionString.text() + xPathString;
                ExpressionString.text(expression);

                // Validate the expression string
                element.validateExpression();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceShowDetailsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Shows/Hides the additional information in the tree item node name.
        /// </summary>
        public void clicked()
        {
            super();

            sourceTreeManager.parmShowDetails(this.toggleValue() == 1);
            sourceTreeManager.showDetails();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceExpandCollapseButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Expands/Collapses the form tree nodes in the form tree control.
        /// </summary>
        public void clicked()
        {
            super();

            int idx = SourceTree.getSelection();
            FormTreeItem formTreeItem = SourceTree.getItem(idx);
            if (!formTreeItem.children())
            {
                idx = SourceTree.getParent(idx);
            }
            if (formTreeItem.stateExpanded() || !formTreeItem.children())
            {
                SysFormTreeControl::collapseTree(SourceTree, idx);
                SourceTree.select(idx);
            }
            else
            {
                DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(SourceTree, idx);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceSearchButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Shows/Hides the search group.
        /// </summary>
        public void clicked()
        {
            super();

            SourceSearchFilterGroup.visible(this.toggleValue() == 1);
            if (this.toggleValue() == 1)
            {
                SourceSearchFilterGroup.setFocus();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceDataSectionComboBox</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Rebuilds the form tree control depending on the selected DDSP data section.
        /// </summary>
        /// <returns>True/False</returns>
        public int selectionChange()
        {
            int ret;
    
            ret = super();

            // Set the flag indicating that form data is chnaged
            isModified = true;

            sourceTreeManager.buildTree(SourceDataSectionComboBox.selection(), xPathDdspHelper);

            // Validate the expression string
            element.validateExpression();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceSearchString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a text value is changed.
        /// </summary>
        public void textChange()
        {
            // Prevent to open a system dialog Save changes if ESC is pressed
            element.onTextChange(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceFindPreviousButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Searches the previous tree item node containing the selected search text.
        /// </summary>
        public void clicked()
        {
            super();

            int formTreeItemIdx = DocPlaceholderExpressionDesignerSourceTreeManager::findTreeItem(
                                    SourceTree, 
                                    sourceTreeManager.getSearchTreeItems(true),
                                    SourceTree.getSelection() - 1, 
                                    SourceSearchString.text());
            if (formTreeItemIdx)
            {
                SourceTree.select(formTreeItemIdx);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SourceFindNextButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Searches the next tree item node containing the selected search text.
        /// </summary>
        public void clicked()
        {
            super();

            int formTreeItemIdx = DocPlaceholderExpressionDesignerSourceTreeManager::findTreeItem(
                                    SourceTree,
                                    sourceTreeManager.getSearchTreeItems(false),
                                    SourceTree.getSelection() + 1,
                                    SourceSearchString.text());
            if (formTreeItemIdx)
            {
                SourceTree.select(formTreeItemIdx);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the object value is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
    
            // Set the flag indicating that form data is chnaged
            isModified = true;
   
            // Validate the expression string
            element.validateExpression();
            
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a text value is changed.
        /// </summary>
        public void textChange()
        {
            // Prevent to open a system dialog Save changes if ESC is pressed
            element.onTextChange(this, true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsAddButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Adds a function from the current tree item to the expression string.
        /// </summary>
        public void clicked()
        {
            super();
    
            int idx = ExpressionElementsTree.getSelection();
            FormTreeItem formTreeItem = ExpressionElementsTree.getItem(idx);
    
            str snippet = functionTreeManager.getSnippet(formTreeItem);
            if (snippet)
            {
                // Set the flag indicating that form data is chnaged
                isModified = true;
    
                str expression = ExpressionString.text() + snippet;
                ExpressionString.text(expression);
    
                // Validate the expression string
                element.validateExpression();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsExpandCollapseButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Expands/Collapses the form tree nodes in the form tree control.
        /// </summary>
        public void clicked()
        {
            super();
            
            int idx = ExpressionElementsTree.getSelection();
            FormTreeItem formTreeItem = ExpressionElementsTree.getItem(idx);
            if (!formTreeItem.children())
            {
                idx = ExpressionElementsTree.getParent(idx);
            }
            if (formTreeItem.stateExpanded() || !formTreeItem.children())
            {
                SysFormTreeControl::collapseTree(ExpressionElementsTree, idx);
                ExpressionElementsTree.select(idx);
            }
            else
            {
                DocPlaceholderExpressionDesignerSourceTreeManager::expandTree(ExpressionElementsTree, idx);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsSearchButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Shows/Hides the search group.
        /// </summary>
        public void clicked()
        {
            super();
            
            ExpressionElementsSearchFilterGroup.visible(this.toggleValue() == 1);
            if (this.toggleValue() == 1)
            {
                ExpressionElementsSearchFilterGroup.setFocus();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsHelpButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Clicked event on menu button Help.
        /// </summary>
        public void clicked()
        {
            DocGlobalHelper::navigateToUrl(DocConstant::XPathFunctionsManualURL, true, false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsSearchString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a text value is changed.
        /// </summary>
        public void textChange()
        {
            // Prevent to open a system dialog Save changes if ESC is pressed
            element.onTextChange(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsFindPreviousButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Searches the previous tree item node containing the selected search text.
        /// </summary>
        public void clicked()
        {
            super();
            
            int formTreeItemIdx = DocPlaceholderExpressionDesignerSourceTreeManager::findTreeItem(
                                    ExpressionElementsTree,
                                    functionTreeManager.getSearchTreeItems(true),
                                    ExpressionElementsTree.getSelection() - 1,
                                    ExpressionElementsSearchString.text());
            if (formTreeItemIdx)
            {
                ExpressionElementsTree.select(formTreeItemIdx);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsFindNextButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Searches the next tree item node containing the selected search text.
        /// </summary>
        public void clicked()
        {
            super();
            
            int formTreeItemIdx = DocPlaceholderExpressionDesignerSourceTreeManager::findTreeItem(
                                    ExpressionElementsTree,
                                    functionTreeManager.getSearchTreeItems(false),
                                    ExpressionElementsTree.getSelection() + 1,
                                    ExpressionElementsSearchString.text());
            if (formTreeItemIdx)
            {
                ExpressionElementsTree.select(formTreeItemIdx);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpressionElementsTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a selection in a tree node is changed.
        /// </summary>
        /// <param name = "_OldItem">An old item node</param>
        /// <param name = "_NewItem">A new item node</param>
        /// <param name = "_how">How the change was made</param>
        public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
        {
            super(_OldItem, _NewItem, _how);
    
            ExpressionElementsDescription.text(functionTreeManager.getDescription(_NewItem));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DocentricAX3:PlaceholderExpressionDesignerCaption</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DesignerHeaderGroup</Name>
				<AllowEdit>No</AllowEdit>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DesignerHeaderTitle</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>informationalField</ExtendedStyle>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>String255</ExtendedDataType>
						<ShowLabel>No</ShowLabel>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>DesignerActionPane</Name>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DesignerGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SourceGroup</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SourceTreeGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>SourceActionPane</Name>
										<Type>ActionPane</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>SourceButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SourceAddDataSourceButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NormalImage>Add</NormalImage>
														<Text>@DocentricAX3:PlaceholderExpressionDesignerSourceAddDataSource</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SourceShowDetailsButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@DocentricAX3:PlaceholderExpressionDesignerSourceShowDetails</Text>
														<ToggleButton>Check</ToggleButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SourceExpandCollapseButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NormalImage>Details</NormalImage>
														<Text>@DocentricAX3:PlaceholderExpressionDesignerExpandCollapse</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SourceSearchButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NormalImage>Find</NormalImage>
														<Text>@DocentricAX3:PlaceholderExpressionDesignerSearch</Text>
														<ToggleButton>Check</ToggleButton>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SourceCustomFilterGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SourceDataSectionFilterGroup</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>SourceDataSectionComboBox</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<EnumType>DocDdspDataSection</EnumType>
														<ShowLabel>No</ShowLabel>
														<Items />
													</AxFormControl>
												</Controls>
												<Caption>@DocentricAX3:DdspDataSection</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SourceSearchFilterGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SourceSearchString</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@DocentricAX3:PlaceholderExpressionDesignerSearch</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>SourceSearchButtonGroup</Name>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>SourceFindPreviousButton</Name>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>ImageOnly</ButtonDisplay>
																<NormalImage>ChevronUp</NormalImage>
																<Text>@DocentricAX3:PlaceholderExpressionDesignerFindPrevious</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>SourceFindNextButton</Name>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>ImageOnly</ButtonDisplay>
																<NormalImage>ChevronDown</NormalImage>
																<Text>@DocentricAX3:PlaceholderExpressionDesignerFindNext</Text>
															</AxFormControl>
														</Controls>
														<Columns>2</Columns>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<Caption>@DocentricAX3:PlaceholderExpressionDesignerSearch</Caption>
												<ViewEditMode>Edit</ViewEditMode>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTreeControl">
										<Name>SourceTree</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Tree</Type>
										<FormControlExtension
											i:nil="true" />
										<RowSelect>Yes</RowSelect>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@DocentricAX3:PlaceholderExpressionDesignerSourceGorup</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ExpressionGroupSplitter</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<HideIfEmpty>No</HideIfEmpty>
						<Style>SplitterVerticalContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ExpressionGroup</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FormulaGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpressionString</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocPlaceholderExpression</ExtendedDataType>
										<MultiLine>Yes</MultiLine>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FormulaSplitterGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<Style>SplitterHorizontalContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BottomGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabControl">
										<Name>ExpressionTab</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>Auto</HeightMode>
										<Type>Tab</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormTabPageControl">
												<Name>ResultsTabPage</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>TabPage</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ResultString</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>String</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@DocentricAX3:PlaceholderExpressionResult</Label>
														<MultiLine>Yes</MultiLine>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<Caption>@DocentricAX3:PlaceholderExpressionResult</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormTabPageControl">
												<Name>ErrorsTabPage</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>TabPage</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ErrorsString</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>String</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@DocentricAX3:PlaceholderExpressionDesignerErrors</Label>
														<MultiLine>Yes</MultiLine>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<Caption>@DocentricAX3:PlaceholderExpressionDesignerErrors</Caption>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@DocentricAX3:PlaceholderExpression</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ExpressionElementsGroupSplitter</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<HideIfEmpty>No</HideIfEmpty>
						<Style>SplitterVerticalContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ExpressionElementsGroup</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ExpressionElementsActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ExpressionElementsButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpressionElementsAddButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>New</NormalImage>
												<Text>@DocentricAX3:PlaceholderExpressionDesignerExpressionElementsAddFunction</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpressionElementsExpandCollapseButton</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Details</NormalImage>
												<Text>@DocentricAX3:PlaceholderExpressionDesignerExpandCollapse</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpressionElementsSearchButton</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Find</NormalImage>
												<Text>@DocentricAX3:PlaceholderExpressionDesignerSearch</Text>
												<ToggleButton>Check</ToggleButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ExpressionElementsHelpButton</Name>
												<NeededPermission>Read</NeededPermission>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<NormalImage>Help</NormalImage>
												<Text>@SYS14501</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpressionElementsCustomFilterGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ExpressionElementsSearchFilterGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ExpressionElementsSearchString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@DocentricAX3:PlaceholderExpressionDesignerSearch</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ExpressionElementsSearchButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ExpressionElementsFindPreviousButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>ChevronUp</NormalImage>
														<Text>@DocentricAX3:PlaceholderExpressionDesignerFindPrevious</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ExpressionElementsFindNextButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>ChevronDown</NormalImage>
														<Text>@DocentricAX3:PlaceholderExpressionDesignerFindNext</Text>
													</AxFormControl>
												</Controls>
												<Columns>2</Columns>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Caption>@DocentricAX3:PlaceholderExpressionDesignerSearch</Caption>
										<ViewEditMode>Edit</ViewEditMode>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTreeControl">
								<Name>ExpressionElementsTree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Tree</Type>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpressionElementsInstructionGroup</Name>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpressionElementsDescription</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DisplayHeight>8</DisplayHeight>
										<DisplayHeightMode>Fixed</DisplayHeightMode>
										<Label>@DocentricAX2:ReportAttachmentRuleInstructions</Label>
										<MultiLine>Yes</MultiLine>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<Caption>@DocentricAX2:ReportAttachmentRuleInstructions</Caption>
							</AxFormControl>
						</Controls>
						<Caption>@DocentricAX3:PlaceholderExpressionDesignerExpressionElementsGroup</Caption>
					</AxFormControl>
				</Controls>
				<Columns>3</Columns>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>