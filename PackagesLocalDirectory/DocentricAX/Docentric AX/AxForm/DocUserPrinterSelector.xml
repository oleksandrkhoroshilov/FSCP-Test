<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocUserPrinterSelector</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocUserPrinterSelector extends FormRun
{
    FormStringControl callerControl;
    FormRun callerForm;
    str callerSelectedPrinterName;


}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
    
        if (element.args() == null || element.args().caller() == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The form can be opened only as a lookup form');
        }
        if (!(element.args().caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), 'The form can be opened only as a lookup form');
        }

        callerForm = element.args().caller() as FormRun;

        callerControl = SysTableLookup::getCallerStringControl(element.args(), false);
        if (callerControl == null)
        {
            DocGlobalHelper::handleException(funcName(), 'The form can be opened only as a lookup form');
        }

        callerSelectedPrinterName = callerControl.text();
        
        UserId userId = '';
        switch (callerForm.name())
        {
            case formStr(DocUserPrinterSettings):
                // Lookup is invoked from the User default printer form.

                // Get the caller default printer record, and set the user 
                // to the one for which the default printer is being configured
                if (!element.args().record() && !(element.args().record() is DocUserPrinterSettings))
                {
                    DocGlobalHelper::handleException(funcName(), strFmt('The form requires caller record of %1 type', tableId2PName(tableNum(DocUserPrinterSettings))));
                }

                DocUserPrinterSettings userDefaultPrinter = element.args().record() as DocUserPrinterSettings;
                userId = userDefaultPrinter.UserId;

                break;

            case formStr(DocDefaultPrinterUpdate):
                // Lookup is invoked from the helper form for bulk setting the default printer,
                // no filtering should be applied --> do nothing
            case formStr(DocUserGroupPrinterSettings):
            case formStr(DocGlobalPrinterSettings):
                // Lookup is invoked from the default printer for user group or company,
                // no filtering should be applied --> do nothing
            case formStr(DocUserPrinterByUser):
                // Lookup is invoked from the User printer by user form, filter by assigned printers,
                // no filtering should be applied --> do nothing
                break;

            default:
                // No other form can be a caller.
                DocGlobalHelper::handleException(funcName(), 'Invalid caller form');
        }

        // Populate the temp table for grid
        DocUserPrinterSelectorTmp::fillTableWithPrintersActiveAndAllowedForUser(DocUserPrinterSelectorTmp, userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    [Replaceable]
    public void closeSelect(str _selectString)
    {
        str selectedPrinterName = DocUserPrinterSelectorTmp.PrinterName;

        // Set the caller control
        super(selectedPrinterName); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        // Find the selected printer and position to that record if found
        str selectedPrinterName = callerSelectedPrinterName;

        DocUserPrinterSelectorTmp tmpTableLocal;
        tmpTableLocal.setTmpData(DocUserPrinterSelectorTmp);

        select firstonly tmpTableLocal where tmpTableLocal.PrinterName == selectedPrinterName;

        try
        {
            element.args().lookupRecord(tmpTableLocal);
            DocUserPrinterSelectorTmp_ds.research(false);
        }
        catch
        {
            infolog.cut(infologLine(), infologLine());
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocUserPrinterSelectorTmp</Name>
			<Table>DocUserPrinterSelectorTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrinterName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrinterPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SecurityRoleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserNetworkAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserPersonName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX2:SelectPrinterName</Caption>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">Lookup</Style>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocUserPrinterSelectorTmp_PrinterName</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PrinterName</DataField>
						<DataSource>DocUserPrinterSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocUserPrinterSelectorTmp_PrinterPath</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PrinterPath</DataField>
						<DataSource>DocUserPrinterSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocUserPrinterSelectorTmp_Description</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Description</DataField>
						<DataSource>DocUserPrinterSelectorTmp</DataSource>
					</AxFormControl>
				</Controls>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>