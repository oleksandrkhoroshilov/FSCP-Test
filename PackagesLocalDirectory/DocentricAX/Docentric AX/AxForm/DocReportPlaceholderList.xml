<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportPlaceholderList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocReportPlaceholderList extends FormRun
{
    FormRun                 callerFormRun;
    boolean                 calledFromDocentricReportSetup = false;
    Set                     calledFromDocentricReportSetup_callerFormNameSet = new Set(Types::String);
    boolean                 calledFromDocentricWorkspace = false;
    boolean                 calledFromPrintDestForm = false;
    DocReportId             calledFromPrintDestForm_reportId;
    PrintMgmtDocumentType   calledFromPrintDestForm_reportType;
    boolean                 calledFromPrintDestForm_reportTypeProvided;
    boolean                 isButtonVisible_DocReportUserDefinedPlaceholder = false;


    [FormObservable]
    container selectedPlaceholdersList;

    #SysSystemDefinedButtons

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        // List of allowed forms from where the placeholder list can be called
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportTable));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportEmailingSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocEmailFromDisplayNameSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocEmailReplyToAddressSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocEmailBounceToAddressSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocEmailReadReceiptAddressSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportPdfSecuritySettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportPdfDocumentProperties));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocPdfDocumentTitleSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocPdfDocumentAuthorSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocPdfDocumentSubjectSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocPdfDocumentKeywordsSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportPdfSecuritySettingsDateManager));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportUserDefinedPlaceholder));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportEmailTemplate));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportSharePointSettings));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocentricAXWorkspace));
        calledFromDocentricReportSetup_callerFormNameSet.add(formStr(DocReportEmailTemplateBody));

        this.checkArgs();
        
        super();

        if (callerFormRun.name() == formStr(DocentricAXWorkspace))
        {
            // Called from Docentric AX workspace.
            calledFromDocentricWorkspace = true;

            //-- Change the form caption.
            element.design().caption(strFmt('%1%2|%2%3', "@DocentricAX2:DocReportPlaceholderListFormCaption", '‏‏‏‏ ‏‏‏‏ ‏‏‏‏‏‏‏', "@DocentricAX2:AllReportPlaceholders"));         // '  ' is made of U+2007 unicode characters

            //-- Hide the User-defined placeholder button and the group with selected placeholders.
            isButtonVisible_DocReportUserDefinedPlaceholder = false;
            SelectedPlaceholdersGroup.visible(false);
            
            // Register jumpRef() method for ReportId field
            FormDataObject reportIdField = DocReportPlaceholderTmp_ds.object(fieldNum(DocReportPlaceholderTmp, ReportId), 1);
            reportIdField.registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(DocReportPlaceholderList, jumpRefReportId), this);
        }
        else if (calledFromDocentricReportSetup_callerFormNameSet.in(callerFormRun.name()))
        {            
            // Called from Docentric report setup - the main Docentric AX reports form or any of its child forms.
            calledFromDocentricReportSetup = true;
            isButtonVisible_DocReportUserDefinedPlaceholder = true;
        }
        else if (callerFormRun.name() == formStr(SRSPrintDestinationSettingsForm))
        {
            // Called from the Print destination settings form.
            calledFromPrintDestForm = true;
            calledFromPrintDestForm_reportId = element.args().caller().getReportId();
            calledFromPrintDestForm_reportType = element.args().caller().getReportType();
            calledFromPrintDestForm_reportTypeProvided = element.args().caller().isReportTypeProvided();

            //-- Change the form caption and enable/hide the User-defined placeholder button.
            if (calledFromPrintDestForm_reportId)
            {
                // if the report is provided -> display it in the form caption.
                str formCaptionReportId = strFmt('%1%2|%2%3', element.design().caption(), '‏‏‏‏ ‏‏‏‏ ‏‏‏‏‏‏‏', strUpr(calledFromPrintDestForm_reportId));   // '  ' is made of U+2007 unicode characters
                element.design().caption(formCaptionReportId);

                // Set the range to the provided report to enable the User-defined placeholders button to work correctly.
                isButtonVisible_DocReportUserDefinedPlaceholder = true;
                QueryBuildRange qbr = DocReportTable_ds.queryBuildDataSource().addRange(fieldNum(DocReportTable, ReportId));
                qbr.value(queryValue(calledFromPrintDestForm_reportId));
                qbr.status(RangeStatus::Hidden);
            }
            else if (calledFromPrintDestForm_reportTypeProvided)
            {
                // PrintMgmtDocumentType is provided -> display it in the form caption.
                element.design().caption(strFmt('%1%2|%2%3', element.design().caption(), '‏‏‏‏ ‏‏‏‏ ‏‏‏‏‏‏‏', calledFromPrintDestForm_reportType));   // '  ' is made of U+2007 unicode characters

                // Set the range to the corresponding reports to enable the User-defined placeholders button to work correctly.
                isButtonVisible_DocReportUserDefinedPlaceholder = true;
                QueryBuildRange qbr = DocReportTable_ds.queryBuildDataSource().addRange(fieldNum(DocReportTable, ReportId));
                qbr.value(DocPrintMgmtHelper::getSrsReportNamesQueryValues(calledFromPrintDestForm_reportType));
                qbr.status(RangeStatus::Hidden);
            }
            else // Neither ReportID nor PrintMgmtDocumentType are provided.
            {
                // Hide the User-defined placeholder button.
                isButtonVisible_DocReportUserDefinedPlaceholder = false;
            }

            //-- Show the group with selected placeholders.
            SelectedPlaceholdersGroup.visible(true);
        }
        else 
        {
            DocGlobalHelper::assert(false);
        }

        // Hide/Show the User-defined placeholder button.
        DocReportUserDefinedPlaceholder.visible(isButtonVisible_DocReportUserDefinedPlaceholder);

        // Subscribe to the Refresh (data source) event.
        element.dataHelper().Refreshing += eventhandler(element.populateDataSourcePlaceholderTable_refreshing);

        // Populate the data source temp table with placeholders.
        element.populateDataSourcePlaceholderTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        // Initially, set the filter to show only custom and user-defined placeholders.
        PlaceholderFilterCombo.selection(DocPlaceholderFilterValue::AllReportSpecificPlaceholders);

        super(); // In the super, DocReportPlaceholderTmp_ds.executeQuery() is called.

        this.initForm();

        // If there is no custom placeholders, clear the filter and show all placeholders.
        if (!DocReportPlaceholderTmp.ReportId)
        {
            PlaceholderFilterCombo.selection(DocPlaceholderFilterValue::AllPlaceholders);
            DocReportPlaceholderTmp_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArgs</Name>
				<Source><![CDATA[
    private void checkArgs()
    {
        if (!element.args())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:FormCalledWithoutArguments");
        }
        
        Args args = element.args();
        
        if (!args.caller())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        
        if (!(args.caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        callerFormRun = args.caller() as FormRun;

        if (callerFormRun == null
            || (!calledFromDocentricReportSetup_callerFormNameSet.in(callerFormRun.name()) 
                && callerFormRun.name() != formStr(SRSPrintDestinationSettingsForm)
               )
            )
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:InvalidCallerForm", 'Docentric AX reports, its child forms and  Print destination settings'));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForm</Name>
				<Source><![CDATA[
    private void initForm()
    {
        // Hide Attach button
        FormCommandButtonControl button = this.control(this.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }

        // Hide Save button
        button = this.control(element.controlId(#SystemDefinedSaveButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }

        // Hide Edit/View button
        button = this.control(this.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCallerDs</Name>
				<Source><![CDATA[
    FormDataSource resolveCallerDs()
    {
        // Iterate through all datasources of the caller form.
        // If we encounter the datasource that matches the caller dataset,
        // then it is the correct datasource.
        for (int i = 1; i <= callerFormRun.dataSourceCount(); i++)
        {
            Common callerRecord = callerFormRun.dataSource(i).cursor();
            if (callerRecord.TableId == tableNum(DocReportTable))
            {
                return callerFormRun.dataSource(i);
            }
        }

        DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidFormDatasource");
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedPlaceholders</Name>
				<Source><![CDATA[
    // show marked placeholders in order of clicking
    display DocSelectedPlaceholders selectedPlaceholders()
    {
        DocSelectedPlaceholders ret = '';
        DocReportPlaceholderTmp placeholder;
        Map selectedPlaceholdersMap = new Map(Types::Int64, Types::String);

        for(placeholder = DocReportPlaceholderTmp_ds.getFirst(1); placeholder.RecId; placeholder = DocReportPlaceholderTmp_ds.getNext())
        {
            selectedPlaceholdersMap.insert(placeholder.RecId, placeholder.PlaceholderName);
        }

        for (int i=1; i<=conLen(selectedPlaceholdersList); i++)
        {
            RecId recId = conPeek(selectedPlaceholdersList, i);

            if (selectedPlaceholdersMap.exists(recId))
            {
                ret += (ret ? ' ' : '') + DocConstantPlaceholder::PlaceholderStartSymbol + selectedPlaceholdersMap.lookup(recId) + DocConstantPlaceholder::PlaceholderEndSymbol;
            }
        }

        if ((!ret) && (callerFormRun.name() != formStr(DocReportTable)) && DocReportPlaceholderTmp.PlaceholderName)
        {
            ret = DocConstantPlaceholder::PlaceholderStartSymbol + DocReportPlaceholderTmp.PlaceholderName + DocConstantPlaceholder::PlaceholderEndSymbol;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataSourcePlaceholderTable_refreshing</Name>
				<Source><![CDATA[
    // Called before Refresh is done.
    void populateDataSourcePlaceholderTable_refreshing(FormRunServiceArgs _cancelEventArgs)
    {
        // Re-populate the data source temp table with placeholders.
        this.populateDataSourcePlaceholderTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataSourcePlaceholderTable</Name>
				<Source><![CDATA[
    void populateDataSourcePlaceholderTable()
    {
        // (Re)fill the data source temp table with placeholders.

        // First empty the temp table, then re-populate it with placeholders.
        DocReportPlaceholderTmp reportPlaceholderTmp = DocReportPlaceholderTmp_ds.cursor();
        delete_from reportPlaceholderTmp;

        // (1) The form is open from Docentric report setup.
        if (calledFromDocentricReportSetup)
        {
            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(element.resolveCallerDs());

            for(DocReportTable docReportTableCaller = helper.getFirst(); docReportTableCaller.RecId; docReportTableCaller = helper.getNext())
            {
                DocReportPlaceholderTmp::fillReportSpecificPlaceholders(DocReportPlaceholderTmp, docReportTableCaller.ReportId, PrintMgmtDocumentType::BankCheque, false);
            }

            DocReportPlaceholderTmp::fillStandardPlaceholders(DocReportPlaceholderTmp);
        }

        // (2) The form is open from Docentric AX workspace.
        else if (calledFromDocentricWorkspace)
        {
            DocReportPlaceholderTmp::fillAllPlaceholders(DocReportPlaceholderTmp);
        }

        // (3) The form is open from the Print destination settings form.
        else if (calledFromPrintDestForm)
        {
            DocReportPlaceholderTmp::fillReportSpecificPlaceholders(
                DocReportPlaceholderTmp, calledFromPrintDestForm_reportId, calledFromPrintDestForm_reportType, calledFromPrintDestForm_reportTypeProvided);
            DocReportPlaceholderTmp::fillStandardPlaceholders(DocReportPlaceholderTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// When report is clicked, open the Report setup form
    /// and get positioned to the exactly same record as this one.
    /// </summary>
    public void jumpRefReportId(FormDataObject _reportId)
    {
        if (DocReportPlaceholderTmp.ReportId == DocConstantPlaceholder::PlaceholderListAllReports)
        {
            return;
        }

        Args args = new Args();
        DocReportTable callerReport = DocReportTable::findReportId(DocReportPlaceholderTmp.ReportId);

        args.lookupRecord(callerReport);
        args.caller(element);
        
        new MenuFunction(menuItemDisplayStr(DocReportTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocReportPlaceholderTmp</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            QueryBuildDataSource qbds = this.queryBuildDataSource();
            qbds.sortClear();
            qbds.addSortField(fieldNum(DocReportPlaceholderTmp, ReportId), SortOrder::Ascending);
            qbds.addSortField(fieldNum(DocReportPlaceholderTmp, IsUserDefined), SortOrder::Descending);
            qbds.addSortField(fieldNum(DocReportPlaceholderTmp, IsCustom), SortOrder::Descending);
            qbds.addSortField(fieldNum(DocReportPlaceholderTmp, PlaceholderName), SortOrder::Ascending);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            // Store data source position (important when Refresh is done).
            int dsCurrentPos = DocReportPlaceholderTmp_ds.getPosition();
            
            QueryBuildDataSource ds = this.queryBuildDataSource();
            
            // Clear the filter first.
            ds.clearRanges();

            // Then add ranges in regard to the currently selected filtering option.
            switch (PlaceholderFilterCombo.selection())
            {
                case DocPlaceholderFilterValue::StandardPlaceholders:
                    ds.addRange(fieldNum(DocReportPlaceholderTmp, IsStandard)).value(queryValue(NoYes::Yes));
                    break;
                case DocPlaceholderFilterValue::CustomPlaceholders:
                    ds.addRange(fieldNum(DocReportPlaceholderTmp, IsCustom)).value(queryValue(NoYes::Yes));
                    break;
                case DocPlaceholderFilterValue::UserDefinedPlaceholders:
                    ds.addRange(fieldNum(DocReportPlaceholderTmp, IsUserDefined)).value(queryValue(NoYes::Yes));
                    break;
                case DocPlaceholderFilterValue::ImagePlaceholders:
                    ds.addRange(fieldNum(DocReportPlaceholderTmp, IsImage)).value(queryValue(NoYes::Yes));
                    break;
                case DocPlaceholderFilterValue::AllReportSpecificPlaceholders:
                    ds.addRange(fieldNum(DocReportPlaceholderTmp,  IsCustom)).value('((IsCustom == 1) || (IsUserDefined == 1))');
                    break;
            }

            super();
            
            // Hide SelectedPlaceholderGroup if the form is opened from Docentric report setup.
            if (calledFromDocentricReportSetup)
            {
                SelectedPlaceholdersGroup.visible(false);
            }

            // Empty selected placeholder list.
            selectedPlaceholdersList = conNull();

            // Restore data source position (important when Refresh is done).
            if (dsCurrentPos > 1)
            {
                // Restore the position only if it has been changed. Otherwise, markedChanged() will not be executed for the first record in the grid.
                DocReportPlaceholderTmp_ds.setPosition(dsCurrentPos);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        public void markChanged()
        {
            super();

            // when clicked on unclicked markAll reset selectedPlaceholdersList
            if (abs(DocGlobalHelper::countDataSourceMarkedRecords(this) - conLen(selectedPlaceholdersList)) > 1)
            {
                DocReportPlaceholderTmp placeholder;

                selectedPlaceholdersList = conNull();

                for(placeholder = DocReportPlaceholderTmp_ds.getFirst(1); placeholder.RecId; placeholder = DocReportPlaceholderTmp_ds.getNext())
                {
                    selectedPlaceholdersList += [placeholder.RecId];
                }
            }
            else
            {
                selectedPlaceholdersList = DocGlobalHelper::conRemove(selectedPlaceholdersList, this.cursor().RecId);
                
                if (this.mark())
                {
                    selectedPlaceholdersList += [this.cursor().RecId];   
                }
            }

            if (calledFromDocentricReportSetup)
            {
                // hide selection group if no placeholder is selected
                SelectedPlaceholdersGroup.visible(conLen(selectedPlaceholdersList) > 0);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DocReportUserDefinedPlaceholder</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args args = new Args();

            // Set the current DocReportTable record into args.
            DocReportTable callerReport;
            if (DocReportPlaceholderTmp.ReportId != DocConstantPlaceholder::PlaceholderListAllReports)
            {
                callerReport = DocReportTable::findReportId(DocReportPlaceholderTmp.ReportId);
            }
            if (callerReport)
            {
                args.record(callerReport);
            }
            else
            {
                args.record(DocReportTable_ds.cursor());
            }

            // Set the caller.
            args.caller(element);

            // Create new menu item.
            MenuFunction mf = new MenuFunction(menuitemDisplayStr(DocReportUserDefinedPlaceholder), MenuItemType::Display);

            // We need to call form run to repopulate the data source temp table with placeholders.
            FormRun formRun = mf.create(args);
            if (formRun)
            {
                // Run the form
                formRun.run();
                // Wait to complete
                formRun.wait();

                // Re-populate the temp table with placeholders and refresh the data source.
                element.populateDataSourcePlaceholderTable();
                DocReportPlaceholderTmp_ds.research(true);

                // Detach the formRun from menu item
                formRun.detach();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PlaceholderFilterCombo</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Triggers placeholder filter change
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            DocReportPlaceholderTmp_ds.executeQuery();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectedPlaceholders</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();

            // set color to make the field more visible
            this.colorScheme(FormColorScheme::RGB);
            this.backgroundColor(WinAPI::RGB2int(255,255,255));         // white
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocReportTable</Name>
			<Table>DocReportTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ArchivingEmailAttachmentsOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ArchivingReportParamsOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ArchivingReportsOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataSourceProviderClassName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailAccountDisplayName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailBounceToAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailDeliveryReceiptCondition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailEmailingMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailMsgPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailReadReceiptAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailReplyToAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ERModelMapping</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GenerateXmlDsWithReportRun</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GenerateXmlDsWithReportRunSettings</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeAllDisplayMethodsInDS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeCompanyLogoInDS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeDocuBrandingInDSSRS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeHiddenParamsInDS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeReportDefinedDispMethodsInDS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeReportDefinedFieldsInDS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeSystemFieldsInDSSRS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActiveSRS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsValid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastValidationDatetime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportDefaultCaption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportUsageType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SRSOnlyReportName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SRSReportDesignName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SRSReportName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SuppressRDPExecution</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseDocentricPreviewerForSrs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseDocentricPreviewForSrs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseOnlyWithPrintDestinations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidationErrorList</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DocReportPlaceholderTmp</Name>
			<Table>DocReportPlaceholderTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataSourceProviderClassName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCustom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsImage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsStandard</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsUserDefined</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlaceholderDesc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlaceholderGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlaceholderName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX2:DocReportPlaceholderListFormCaption</Caption>
		<DataSource xmlns="">DocReportPlaceholderTmp</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<TitleDataSource xmlns="">DocReportTable</TitleDataSource>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane_ButtonGroup</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PlaceholderSelectionButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>DocReportUserDefinedPlaceholder</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>DocReportTable</DataSource>
								<MenuItemName>DocReportUserDefinedPlaceholder</MenuItemName>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>LabelPlaceholderList</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>DocLabelPlaceholderList</MenuItemName>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<DataSource>DocReportPlaceholderTmp</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>DocReportPlaceholderTmp_ReportId</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>PlaceholderFilterCombo</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX2:PlaceholderFIlterComboBoxHelp</HelpText>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>DocPlaceholderFilterValue</EnumType>
						<Items />
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportPlaceholderTmp_ReportId</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReportId</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportPlaceholderTmp_PlaceholderName</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PlaceholderName</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportPlaceholderTmp_PlaceholderDesc</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PlaceholderDesc</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DocReportPlaceholderTmp_IsStandard</Name>
						<AllowEdit>No</AllowEdit>
						<Enabled>No</Enabled>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsStandard</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DocReportPlaceholderTmp_IsCustom</Name>
						<AllowEdit>No</AllowEdit>
						<Enabled>No</Enabled>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsCustom</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DocReportPlaceholderTmp_IsUserDefined</Name>
						<AllowEdit>No</AllowEdit>
						<Enabled>No</Enabled>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsUserDefined</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DocReportPlaceholderTmp_IsImage</Name>
						<AllowEdit>No</AllowEdit>
						<Enabled>No</Enabled>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsImage</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportPlaceholderTmp_PlaceholderGroupId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PlaceholderGroupId</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportPlaceholderTmp_DataSourceProviderClassName</Name>
						<AllowEdit>No</AllowEdit>
						<HelpText>@DocentricAX4:PlaceholderDspClassHelp</HelpText>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>DataSourceProviderClassName</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
						<Label>@DocentricAX4:PlaceholderDspClass</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportPlaceholderTmp_ReportDescription</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReportDescription</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportPlaceholderTmp_ReportGroupId</Name>
						<AllowEdit>No</AllowEdit>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReportGroupId</DataField>
						<DataSource>DocReportPlaceholderTmp</DataSource>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
						<Text>@DocentricAX2:ReportGroup</Text>
					</AxFormControl>
				</Controls>
				<DataSource>DocReportPlaceholderTmp</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>SelectedPlaceholdersGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Height>80</Height>
				<HeightMode>Manual</HeightMode>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SelectedPlaceholders</Name>
						<ExtendedStyle>Emphasized</ExtendedStyle>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>selectedPlaceholders</DataMethod>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
						<ExtendedDataType>DocSelectedPlaceholders</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>