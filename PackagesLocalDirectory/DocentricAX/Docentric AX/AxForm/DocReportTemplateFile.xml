<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportTemplateFile</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using DocFS = Docentric.AX.Storage.File;

[Form]
public class DocReportTemplateFile extends FormRun
{
    private DocReportTable       parentReport;
    private DocReportTemplate    callingTemplate;
    private DocTmpIdRef          dsResourcesRef;
    private boolean              dsResourcesRefFilled;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons
        str openingErrMsg = 'The form can be open from the Docentric reports form only';

        super();

        // Hide the Attach button.
        FormCommandButtonControl button = this.control(this.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }

        // Hide the Filter button.
        button = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }

        if (this.args() == null || this.args().dataset() != tableNum(DocReportTemplate))
        {
            DocGlobalHelper::handleException(funcName(), openingErrMsg);
        }

        if (!this.args().record())
        {
            DocGlobalHelper::handleException(funcName(), openingErrMsg);
        }
        
        callingTemplate = this.args().record();
        parentReport = DocReportTable::find(callingTemplate.Report);

        if (!parentReport)
        {
            DocGlobalHelper::handleException(funcName(), openingErrMsg);
        }

        // Check data security.
        if (!DocDataSecurityManager::checkDataSecurity(DocDataSecurityTemplateAction::Attach, parentReport.ReportId,
                                                       callingTemplate.TemplateId, callingTemplate.CompanyId, callingTemplate.LanguageID, true))
        {
            throw Exception::Error;
        }

        dsResourcesRefFilled = false;

        DocReportTemplate.initTemplateStorageFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSignatureAppearanceControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the SignatureAppearance control.
    /// </summary>
    private void setSignatureAppearanceControl()
    {
        SignatureAppearanceOverride_SignatureAppearanceId.allowEdit(DocReportTemplate.SignatureAppearanceOverride);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form is closing.
    /// </summary>
    public void close()
    {
        super();
        
        if (!this.closedCancel())
        {
            if (this.args() && this.args().record())
            {
                // Recheck the template data source type, if applicable.
                DocReportingSetupHelper::recheckTemplateDataSourceType(this.args().record().RecId, false);

                // Refresh the data source of the caller form.
                FormDataSource callerDataSource = FormDataUtil::getFormDataSource(this.args().record());
                if (callerDataSource)
                {
                    callerDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormForCurrentStorageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form depending on the selected storage type.
    /// </summary>
    public void updateFormForCurrentStorageType()
    {
        boolean enableButton_DeleteTemplateFileOnAzureBlobStorage = false;
        boolean enableButton_DeleteTemplateFileOnFileSystem = false;

        if (DocReportTemplate.customizationLevel() == DocReportTemplateCustomizationLevel::CustomizedSystem)
        {
            OriginalTemlateStorageGroup.visible(true);
        }
        else
        {
            OriginalTemlateStorageGroup.visible(false);
        }

        switch (DocReportTemplate.CurrentStorageType)
        {
            case DocTemplateStorageType::SharePoint:
                SharePointFileLocation.visible(true);
                AotFileLocation.visible(false);
                AzureFileLocation.visible(false);
                FileSystemFileLocation.visible(false);
                FileLocationTabPage.caption("@DocentricAX:FileLocation" + ' - ' + enum2Str(DocTemplateStorageType::SharePoint));
                break;

            case DocTemplateStorageType::AOT:
                SharePointFileLocation.visible(false);
                AotFileLocation.visible(true);
                AzureFileLocation.visible(false);
                FileSystemFileLocation.visible(false);
                FileLocationTabPage.caption("@DocentricAX:FileLocation" + ' - ' + enum2Str(DocTemplateStorageType::AOT));
                break;

            case DocTemplateStorageType::AzureBlobStorage:
                SharePointFileLocation.visible(false);
                AotFileLocation.visible(false);
                AzureFileLocation.visible(true);
                FileSystemFileLocation.visible(false);
                FileLocationTabPage.caption("@DocentricAX:FileLocation" + ' - ' + enum2Str(DocTemplateStorageType::AzureBlobStorage));
                if (DocReportTemplate.isFileAttached())
                {
                    enableButton_DeleteTemplateFileOnAzureBlobStorage = true;
                }
                break;

            case DocTemplateStorageType::FileSystem:
                SharePointFileLocation.visible(false);
                AotFileLocation.visible(false);
                AzureFileLocation.visible(false);
                FileSystemFileLocation.visible(true);
                FileLocationTabPage.caption("@DocentricAX:FileLocation" + ' - ' + enum2Str(DocTemplateStorageType::FileSystem));
                if (DocReportTemplate.isFileAttached())
                {
                    enableButton_DeleteTemplateFileOnFileSystem = true;
                }
                break;
        }

        DeleteTemplateFileOnAzureBlobStorage.enabled(enableButton_DeleteTemplateFileOnAzureBlobStorage);
        DeleteTemplateFileOnFileSystem.enabled(enableButton_DeleteTemplateFileOnFileSystem);

        boolean templateFileAttached = DocReportTemplate.isFileAttached();
        
        if (DocReportTemplate.customizationLevel() == DocReportTemplateCustomizationLevel::CustomizedSystem ||
            DocReportTemplate.customizationLevel() == DocReportTemplateCustomizationLevel::System)
        {
            ReloadSystemTemplate.enabled(true);
        }
        else
        {
            ReloadSystemTemplate.enabled(false);
        }

        Detach.enabled(templateFileAttached);
        DownloadTemplateButton.enabled(templateFileAttached);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadTemplateFileContentToStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the template file to the storage.
    /// </summary>
    public void uploadTemplateFileContentToStorage()
    {
        str templateFilename, oldTemplateFilename;
        System.IO.Stream templateContent;
        str errMsg = "@DocentricAX:TemplateFileUploadFailed";

        /* Get template file from user */
        if (DocConstantGlobal::isOnPremEnvironment())
        {
            DocFS.File templateFile = DocFileUploadOnPremHelper::GetFileFromUser(DocConstantFile::FileExtensionDelimiter + DocConstantFile::DocentricTemplateFileExt);
            if (templateFile != null)
            {
                try
                {
                    templateFilename = templateFile.Name;
                    templateContent = DocGlobalHelper::convertBytesToMemoryStream(templateFile.Bytes);
                    if (templateContent == null || templateFilename == '')
                    {
                        throw Exception::Error;
                    }
                }
                catch
                {
                    DocGlobalHelper::handleError(errMsg);
                }
            }
        }
        else
        {
            FileUploadResultBase result = File::GetFileFromUser(classStr(DocFileUploadTemporaryReportTemplateStorageStrategy));
            if (result && result.getUploadStatus())
            {
                templateContent = null;
                templateFilename = '';
                
                try
                {
                    templateFilename = result.getFileName();
                    templateContent = result.openResult();
                    if (templateFilename == '' || templateContent == null)
                    {
                        throw Exception::Error;
                    }
                }
                catch (Exception::CLRError)
                {
                    DocGlobalHelper::handleClrError('', errMsg);
                }
                catch (Exception::Internal)
                {
                    DocGlobalHelper::handleClrError('', errMsg);
                }
                catch
                {
                    DocGlobalHelper::handleError(errMsg);
                }
            }
        }

        if (templateContent != null && templateFilename != '')
        {
            if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::AzureBlobStorage)
            {
                DocReportTemplate.FileNameAzure = templateFilename;
            }
            else if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::SharePoint)
            {
                DocReportTemplate.FileNameSp = templateFilename;
            }
            else if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::FileSystem)
            {
                DocReportTemplate.FileNameFs = templateFilename;
            }
            
            /* Validate template filename */
            // Check if the uploading file is already attached to another template of the same report.
            str templateWithSameStorageLocationId, existsTemplateMessage;
            [templateWithSameStorageLocationId, existsTemplateMessage] = DocReportTemplate.existsTemplateWithSameStorageLocation(false);
            if (!templateWithSameStorageLocationId)
            {
                // Check if the uploading file is attached to another template of any other report.
                [templateWithSameStorageLocationId, existsTemplateMessage] = DocReportTemplate.existsTemplateWithSameStorageLocation(true);
            }

            if (templateWithSameStorageLocationId)
            {
                if (!Box::confirm(strFmt("@DocentricAX3:TemplateFileWillBeOverwrittenWarning", templateWithSameStorageLocationId)))
                {
                    DocGlobalHelper::handleInfo("@DocentricAX3:UploadTemplateFileCanceledInfo");
                    DocGlobalHelper::handleWarning("@DocentricAX3:UploadTemplateFileCanceledWarning");
                    DocGlobalHelper::handleWarning(existsTemplateMessage);
                    return;
                }
            }

            /* Upload template content */
            try
            {
                DocReportTemplate.uploadTemplateFileToStorage(templateContent);

                DocReportTemplate_ds.write();
                DocReportTemplate_ds.research(true);

                if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::AzureBlobStorage)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateUploadedToAzure", templateFilename, DocReportTemplate.StorageAzureContainer, DocReportTemplate.blobName()));
                }
                else if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::SharePoint)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateUploadedToSharePoint", templateFilename,
                                                           DocReportTemplate.StorageSharePointSiteUrl, DocReportTemplate.StorageSharePointFolderPath));
                }
                else if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::FileSystem)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateUploadedToFileSystem", templateFilename, DocReportTemplate.StorageFileSystemFolderPath));
                }
            }
            catch
            {
                if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::AzureBlobStorage)
                {
                    DocReportTemplate.FileNameAzure = oldTemplateFilename;
                }
                else if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::SharePoint)
                {
                    DocReportTemplate.FileNameSp = oldTemplateFilename;
                }
                else if (DocReportTemplate.CurrentStorageType == DocTemplateStorageType::FileSystem)
                {
                    DocReportTemplate.FileNameFs = oldTemplateFilename;
                }
            }

            // Recheck the template data source type, if applicable.
            DocReportingSetupHelper::recheckTemplateDataSourceType(DocReportTemplate.RecId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillResourcesCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the lookup form with available resources containinig Word templates from AOT.
    /// </summary>
    public void fillResourcesCombo()
    {
        if (dsResourcesRefFilled)
        {
            return;
        }

        dsResourcesRef.clear();
        dsResourcesRef = DocReportingSetupHelper::buildAotResourceNameIdRefForReport(parentReport.ReportId);

        dsResourcesRefFilled = true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocReportTemplate</Name>
				<Methods>
					<Method>
						<Name>parentReportId</Name>
						<Source><![CDATA[
        public display DocReportId parentReportId()
        {
            return parentReport.ReportId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
            element.updateFormForCurrentStorageType();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
            this.research(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the record becomes active.
        /// </summary>
        /// <returns>True/False</returns>
        public int active()
        {
            int ret;
        
            ret = super();

            element.setSignatureAppearanceControl();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>SignatureAppearanceId</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens a referenced form that contains data for the field.
            /// </summary>
            public void jumpRef()
            {
                DocElectronicSignatureAppearance::jumpRef(element, DocReportTemplate.SignatureAppearanceId);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SignatureAppearanceOverride</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Called when the value is changed.
            /// </summary>
            public void modified()
            {
                super();

                element.setSignatureAppearanceControl();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ReloadSystemTemplate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            boolean proceed;
            if (DocReportTemplate.customizationLevel() == DocReportTemplateCustomizationLevel::CustomizedSystem &&
                DocReportTemplate.isFileAttached())
            {
                proceed = Box::confirm("@DocentricAX:RevertTemplateFileToSystemConfirm");
            }
            else
            {
                proceed = true;
            }
            
            if (proceed)
            {
                try
                {
                    boolean systemTemplateFound = DocReportingSetupHelper::reloadSystemTemplate(DocReportTemplate.RecId);
                    if (systemTemplateFound)
                    {
                        DocReportTemplate_ds.research(true);
                        DocGlobalHelper::handleInfo("@DocentricAX:SystemTemplateReloadedSuccess");
                    }
                    else
                    {
                        DocGlobalHelper::handleWarning("@DocentricAX:NoSystemTemplateFound");
                    }
                }
                catch
                {
                    DocGlobalHelper::handleError("@DocentricAX2:ErrorReloadingSystemTemplates");
                }
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Detach</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!DocReportTemplate.isFileAttached())
            {
                DocGlobalHelper::handleWarning("@DocentricAX:TemplateFilenameNotSet");
                return;
            }

            if (Box::confirm(strFmt("@DocentricAX:DetachTemplateFileConfirm", DocReportTemplate.fileName())))
            {
                DocReportTemplate::detachTemplateFile(DocReportTemplate.RecId);
                DocReportTemplate_ds.research(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteTemplateFileOnAzureBlobStorage</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (Box::confirm(strFmt("@DocentricAX:DeleteTemplateFileFromAzureConfirmation", DocReportTemplate.FileNameAzure)))
            {
                DocReportTemplate::deleteTemplateFile_AzureBlobStorage(DocReportTemplate.RecId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteTemplateFileOnFileSystem</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (Box::confirm(strFmt("@DocentricAX:DeleteTemplateFileOnFileSystemConfirmation", DocReportTemplate.FileNameFs)))
            {
                DocReportTemplate::deleteTemplateFile_FileSystem(DocReportTemplate.RecId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DownloadTemplateButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            DocReportingSetupHelper::downloadTemplate(DocReportTemplate.RecId);
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocReportTemplate_CurrentStorageType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            DocReportTemplate_ds.write();
            DocReportTemplate_ds.research(true);
    
            DocReportTemplate.initTemplateStorageFields();

            element.updateFormForCurrentStorageType();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SharePointEditButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            str hostname = DocSharePointHelperV3::getSharePointHostNameFromUrl(DocReportTemplate.StorageSharePointSiteUrl);
            if (!hostname)
            {
                hostname = DocSharePointHelperV3::getDefaultServer();
            }
            if (hostname)
            {
                DocSharePointFolderSelection spFolderSelection = DocSharePointFolderSelection::construct(
                                                                                                    hostname,
                                                                                                    DocReportTemplate.StorageSharePointSiteUrl,
                                                                                                    DocReportTemplate.StorageSharePointFolderPath);
                if (spFolderSelection && spFolderSelection.promptUser())
                {
                    DocReportTemplate.StorageSharePointSiteUrl = spFolderSelection.parmSelectedSite().Url;
                    DocReportTemplate.StorageSharePointFolderPath = spFolderSelection.getRelativeFolderPath();
                }
            }
            else
            {
                MenuFunction mf = new MenuFunction(menuItemDisplayStr(DocuParameters), MenuItemType::Display);
                DocGlobalHelper::handleError(strfmt("@ApplicationFoundation:DocuType_SharePointNotConfigured", mf.label()), false, funcName());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NavigateToSpSiteUrl</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (DocReportTemplate.StorageSharePointSiteUrl)
            {
                Browser b = new Browser();

                str sharePointUrlToNavigate = DocFileMngHelper::addUrlDelimiter(DocReportTemplate.StorageSharePointSiteUrl) +
                    DocReportTemplate.StorageSharePointFolderPath;
                
                b.navigate(sharePointUrlToNavigate, true);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProcessSharePointFileName</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (DocReportTemplate.FileNameSp)
            {
                // Validate the SharePoint storage fields.
                if (DocReportTemplate.validateStorageFields(true))
                {
                    // Check if the template file exists.
                    boolean templateExists;
                    str templateNotExistMsg;
                    [templateExists, templateNotExistMsg] = DocReportTemplate.templateFileExists(true);
                    if (!templateExists)
                    {
                        DocGlobalHelper::handleError(templateNotExistMsg);
                    }
                    else
                    {
                        DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateFileFoundOnSharePoint",
                            DocReportTemplate.FileNameSp, DocReportTemplate.StorageSharePointSiteUrl, DocReportTemplate.StorageSharePointFolderPath));
                    }
                }
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UploadFileToSp</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.uploadTemplateFileContentToStorage();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocReportTemplate_FileName_Azure</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            str oldValue = DocReportTemplate.FileNameAzure;
            str newValue = this.text();
            boolean oldTemplateFileExists = false;

            if (oldValue != '' && oldValue != newValue)
            {
                // Check if the old file exists on Azure storage.
                oldTemplateFileExists = conPeek(DocReportTemplate.templateFileExists(false), 1);
            }

            boolean ret = super();

            DocReportTemplate_ds.write();
            DocReportTemplate_ds.research(true);

            if (oldTemplateFileExists)
            {
                if (Box::confirm(strFmt("@DocentricAX:RemoveOldTemplateFromAzure", oldValue)))
                {
                    DocReportTemplate::deleteTemplateFile_AzureBlobStorage(DocReportTemplate.RecId);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProcessAzureFileName</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (DocReportTemplate.FileNameAzure)
            {
                // Validate the Azure storage fields.
                if (DocReportTemplate.validateStorageFields(true))
                {
                    // Check if the template file exists.
                    boolean templateExists;
                    str templateNotExistMsg;
                    [templateExists, templateNotExistMsg] = DocReportTemplate.templateFileExists(true);
                    if (!templateExists)
                    {
                        DocGlobalHelper::handleWarning(templateNotExistMsg);
                    }
                    else
                    {
                        DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateFileFoundOnAzure",
                            DocReportTemplate.FileNameAzure, DocReportTemplate.StorageAzureContainer, DocReportTemplate.blobName()));
                    }
                }
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UploadFileToAzure</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.uploadTemplateFileContentToStorage();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocReportTemplate_StorageResourceName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tablenum(DocTmpIdRef), this);
            Query                   query           = new Query();
            QueryBuildDataSource    qbds;

            
            // Fill the combo if needed.
            element.fillResourcesCombo();

            sysTableLookup.addLookupfield(fieldnum(DocTmpIdRef, Name), true);
            sysTableLookup.setLabel("@DocentricAX:ResourceName"); // Resource name

            sysTableLookup.addLookupfield(fieldnum(DocTmpIdRef, HelpTxt));
            sysTableLookup.setLabel("@DocentricAX:ResourceFilename"); // Resource filename

            // BP Deviation Documented
            sysTableLookup.parmTmpBuffer(dsResourcesRef);
            qbds = query.addDataSource(tablenum(DocTmpIdRef));

            qbds.addSortField(fieldnum(DocTmpIdRef, Name));
            sysTableLookup.parmQuery(query);

            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean     ret;
            ClassName   newResourceName;

            newResourceName = this.text();

            if (newResourceName && !DocGlobalHelper::aotResourceExists(newResourceName))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:AotResourceNotExist", newResourceName));
                return false;
            }
            
            ret = super();

            // Update the dependent fields.
            DocReportTemplate.updateStorageFields_AotResource(newResourceName);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>performFormLookup</Name>
						<Source><![CDATA[
        public void performFormLookup(xFormRun _form)
        {
            FormDataSource fds;

            super(_form);

            fds = _form.dataSource();

            try
            {
                fds.positionToRecordByValue(fieldNum(DocTmpIdRef, Name), this.valueStr());
            }
            catch
            {
                infolog.cut(infologLine(), infologLine());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocReportTemplate_StorageFileSystemFolderPath</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            str oldValue = DocReportTemplate.FileNameFs;
            str newValue = this.text();
            boolean oldTemplateFileExists = false;

            if (oldValue != '' && oldValue != newValue)
            {
                // Check if the old file exists on File system.
                oldTemplateFileExists = conPeek(DocReportTemplate.templateFileExists(false), 1);
                
            }

            boolean ret = super();

            DocReportTemplate_ds.write();
            DocReportTemplate_ds.research(true);

            if (oldTemplateFileExists)
            {
                if (Box::confirm(strFmt("@DocentricAX:RemoveOldTemplateFromFileSystem", oldValue, DocReportTemplate.StorageFileSystemFolderPath)))
                {
                    DocReportTemplate::deleteTemplateFile_FileSystem(DocReportTemplate.RecId);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProcessFileSystemFileName</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (DocReportTemplate.FileNameFs)
            {
                // Validate the Azure storage fields.
                if (DocReportTemplate.validateStorageFields(true))
                {
                    // Check if the template file exists.
                    boolean templateExists;
                    str templateNotExistMsg;
                    [templateExists, templateNotExistMsg] = DocReportTemplate.templateFileExists(true);
                    if (!templateExists)
                    {
                        DocGlobalHelper::handleWarning(templateNotExistMsg);
                    }
                    else
                    {
                        DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateFileFoundOnFileSystem", DocReportTemplate.FileNameFs, DocReportTemplate.StorageFileSystemFolderPath));
                    }
                }
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UploadFileToFileSystem</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.uploadTemplateFileContentToStorage();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SignatureSettingsStatus_signatureAppearanceDefault</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens a referenced form that contains data for the field.
        /// </summary>
        public void jumpRef()
        {
            DocElectronicSignatureAppearance::jumpRef(element, DocReportTemplate.signatureAppearanceDefault());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocReportTemplate</Name>
			<Table>DocReportTemplate</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Comment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrentStorageType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataSourceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileNameAot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileNameAzure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileNameFs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileNameSp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDefaultTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalStorageResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalStorageType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Report</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SignatureAppearanceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SignatureAppearanceOverride</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageAzureContainer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageFileSystemFolderPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageSharePointFolderPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageSharePointSiteUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tags</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Title</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources>
				<AxFormReferencedDataSource>
					<Name>DocReportTable</Name>
					<Table>DocReportTable</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>ArchivingEmailAttachmentsOption</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ArchivingReportParamsOption</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ArchivingReportsOption</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>CreatedBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>CreatedDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DataSourceProviderClassName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EmailAccountDisplayName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EmailBounceToAddress</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EmailDeliveryReceiptCondition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EmailEmailingMode</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EmailMsgPriority</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EmailReadReceiptAddress</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EmailReplyToAddress</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ERModelDataToIncludeInDS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ERModelMapping</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>GenerateXmlDsWithReportRun</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>GenerateXmlDsWithReportRunMode</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>GenerateXmlDsWithReportRunSettings</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IncludeAllDisplayMethodsInDS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IncludeCompanyLogoInDS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IncludeDocuBrandingInDSSRS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IncludeHiddenParamsInDS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IncludeReportDefinedDispMethodsInDS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IncludeReportDefinedFieldsInDS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IncludeSystemFieldsInDSSRS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IsActiveSRS</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IsValid</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>LastValidationDatetime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ModifiedBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ModifiedDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PdfDocumentAuthor</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PdfDocumentKeywords</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PdfDocumentSubject</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PdfDocumentTitle</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReportDefaultCaption</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReportDescription</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReportGroup</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReportId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReportUsageType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>SRSOnlyReportName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>SRSReportDesignName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>SRSReportName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>SuppressRDPExecution</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UseDocentricPreviewerForSrs</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UseDocentricPreviewForSrs</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UseOnlyWithPrintDestinations</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ValidationErrorList</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<JoinSource>DocReportTemplate</JoinSource>
					<LinkType>OuterJoin</LinkType>
					<JoinRelation>DocReportTable</JoinRelation>
				</AxFormReferencedDataSource>
			</ReferencedDataSources>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@DocentricAX:ReportTemplateFile</Caption>
		<DataSource xmlns="">DocReportTemplate</DataSource>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">SimpleDetails-FastTabsContainer</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<TitleDataSource xmlns="">DocReportTemplate</TitleDataSource>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>MainButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ReloadSystemTemplate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:ReloadSystemTemplateFileDesc</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Refresh</NormalImage>
								<Text>@DocentricAX:ReloadSystemTemplate</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Detach</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:ClearTemplateFileLocationData</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>PlannedDocument</NormalImage>
								<Text>@DocentricAX:Detach</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DeleteTemplateFileOnAzureBlobStorage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:DeleteTemplateFileOnAzure</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Delete</NormalImage>
								<Text>@DocentricAX:DeleteTemplateFile</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DeleteTemplateFileOnFileSystem</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:DeleteTemplateFileOnFileSystemDesc</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Delete</NormalImage>
								<Text>@DocentricAX:DeleteTemplateFileOnFileSystem</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DownloadTemplateButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:DownloadTemplateFile</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Download</NormalImage>
								<Text>@DocentricAX:DownloadTemplate</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PreviewTemplateFileButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>PreviewTemplate</Name>
								<HelpText>@DocentricAX3:PreviewTemplateHelp</HelpText>
								<Type>DropDialogButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>DocReportTemplate</DataSource>
								<MenuItemName>DocReportTemplatePreview</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Generate</NormalImage>
								<Text>@DocentricAX3:PreviewTemplate</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<AllowEdit>No</AllowEdit>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReportId</Name>
						<ExtendedStyle>informationalField</ExtendedStyle>
						<Skip>Yes</Skip>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>Yes</CacheDataMethod>
						<DataMethod>parentReportId</DataMethod>
						<DataSource>DocReportTemplate</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>BodyTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTabPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DocReportTemplate_TemplateId</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>informationalField</ExtendedStyle>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>TemplateId</DataField>
								<DataSource>DocReportTemplate</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DocReportTemplate_CompanyId</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>informationalField</ExtendedStyle>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>CompanyId</DataField>
								<DataSource>DocReportTemplate</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DocReportTemplate_LanguageID</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>informationalField</ExtendedStyle>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>LanguageID</DataField>
								<DataSource>DocReportTemplate</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>DocReportTemplate_FileAttached</Name>
								<AllowEdit>No</AllowEdit>
								<ExtendedStyle>informationalField</ExtendedStyle>
								<Skip>Yes</Skip>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>isFileAttached</DataMethod>
								<DataSource>DocReportTemplate</DataSource>
								<Items />
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX:General</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>StorageTypeTabPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>DocReportTemplate_CurrentStorageType</Name>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>CurrentStorageType</DataField>
								<DataSource>DocReportTemplate</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CustomizationLevel</Name>
								<ExtendedStyle>informationalField</ExtendedStyle>
								<Skip>Yes</Skip>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<CacheDataMethod>Yes</CacheDataMethod>
								<DataMethod>customizationLevel</DataMethod>
								<DataSource>DocReportTemplate</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OriginalTemlateStorageGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DocReportTemplate_OriginalStorageType</Name>
										<AllowEdit>No</AllowEdit>
										<Skip>Yes</Skip>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>OriginalStorageType</DataField>
										<DataSource>DocReportTemplate</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DocReportTemplate_OriginalStorageResourceName</Name>
										<AllowEdit>No</AllowEdit>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>OriginalStorageResourceName</DataField>
										<DataSource>DocReportTemplate</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>OriginalStorageResourceFilename</Name>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<CacheDataMethod>Yes</CacheDataMethod>
										<DataMethod>originalResourceFilename</DataMethod>
										<DataSource>DocReportTemplate</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@DocentricAX:OriginalTemplateStorage</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX:StorageType</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FileLocationTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SharePointFileLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SpSiteUrlFolderPathFileName</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SharePointSiteUrl</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DocReportTemplate_StorageSharePointSiteUrl</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>StorageSharePointSiteUrl</DataField>
														<DataSource>DocReportTemplate</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DocReportTemplate_StorageSharePointFolderPath</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>StorageSharePointFolderPath</DataField>
														<DataSource>DocReportTemplate</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SharePointEditButton</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>Edit</NormalImage>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>NavigateToSpSiteUrl</Name>
														<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
														<NeededPermission>Read</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>Internet</NormalImage>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<Breakable>No</Breakable>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SpEnterFilename</Name>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DocReportTemplate_FileName_Sp</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@DocentricAX:EnterTemplateFilename</HelpText>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>FileNameSp</DataField>
														<DataSource>DocReportTemplate</DataSource>
														<Label>@DocentricAX:TemplateFilenameLabel</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ProcessSharePointFileName</Name>
														<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>Accept</NormalImage>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UploadFileToSp</Name>
														<HelpText>@DocentricAX:UploadNewTemplate</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@DocentricAX:UploadNewFile</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<Breakable>No</Breakable>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AzureFileLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AzureFilename</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DocReportTemplate_StorageAzureContainer</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>StorageAzureContainer</DataField>
												<DataSource>DocReportTemplate</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AzureEnterFilename</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DocReportTemplate_FileName_Azure</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@DocentricAX:EnterTemplateNameOnAzure</HelpText>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>FileNameAzure</DataField>
														<DataSource>DocReportTemplate</DataSource>
														<Label>@DocentricAX:TemplateFilenameLabel</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ProcessAzureFileName</Name>
														<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>Accept</NormalImage>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UploadFileToAzure</Name>
														<HelpText>@DocentricAX:UploadNewTemplateToAzure</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@DocentricAX:UploadNewFile</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<Breakable>No</Breakable>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BlobName</Name>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<CacheDataMethod>Yes</CacheDataMethod>
												<DataMethod>blobName</DataMethod>
												<DataSource>DocReportTemplate</DataSource>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AotFileLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AotEnterFilename</Name>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DocReportTemplate_StorageResourceName</Name>
												<HelpText>@DocentricAX:TemplateAotInstructions</HelpText>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>StorageResourceName</DataField>
												<DataSource>DocReportTemplate</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DocReportTemplate_FileName_Aot</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@DocentricAX:TemplateFromAotResource</HelpText>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>FileNameAot</DataField>
												<DataSource>DocReportTemplate</DataSource>
												<Label>@DocentricAX:TemplateFilenameLabel</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FileSystemFileLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FileSystemFilename</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DocReportTemplate_StorageFileSystemFolderPath</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>StorageFileSystemFolderPath</DataField>
												<DataSource>DocReportTemplate</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>FileSystemEnterFilename</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DocReportTemplate_FileNameFs</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@DocentricAX:EnterTemplateNameOnFileSystem</HelpText>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>FileNameFs</DataField>
														<DataSource>DocReportTemplate</DataSource>
														<Label>@DocentricAX:TemplateFilenameLabel</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ProcessFileSystemFileName</Name>
														<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>Accept</NormalImage>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UploadFileToFileSystem</Name>
														<HelpText>@DocentricAX:UploadNewTemplateToFileSystem</HelpText>
														<NeededPermission>Delete</NeededPermission>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@DocentricAX:UploadNewFile</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<Breakable>No</Breakable>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FulFilename</Name>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<CacheDataMethod>Yes</CacheDataMethod>
												<DataMethod>fileSystemFullFilename</DataMethod>
												<DataSource>DocReportTemplate</DataSource>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX:FileLocation</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SignatureAppearanceTabPage</Name>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>SignatureAppearanceActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>SignatureAppearanceButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>DocReportPdfSecuritySettings</Name>
												<HelpText>@DocentricAX3:ReportTemplateSignatureAppearanceSettingsHelp</HelpText>
												<Type>MenuFunctionButton</Type>
												<FormControlExtension
													i:nil="true" />
												<DataSource>DocReportTable</DataSource>
												<MenuItemName>DocReportPdfSecuritySettings</MenuItemName>
												<NormalImage>Certificate</NormalImage>
												<Text>@DocentricAX3:ReportTemplateSignatureAppearanceSettings</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SignatureAppearanceGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SignatureSettingsStatus</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>SignatureSettingsStatus_signatureSettingsStatus</Name>
												<HelpText>@DocentricAX3:PDFSignatureSettingsStatusHelp</HelpText>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>signatureSettingsStatus</DataMethod>
												<DataSource>DocReportTemplate</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SignatureSettingsStatus_signatureAppearanceDefault</Name>
												<HelpText>@DocentricAX3:ReportTemplateSignatureAppearanceDefaultHelp</HelpText>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>signatureAppearanceDefault</DataMethod>
												<DataSource>DocReportTemplate</DataSource>
												<Label>@DocentricAX3:ReportTemplateSignatureAppearanceDefault</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
										<DataGroup>SignatureSettingsStatus</DataGroup>
										<DataSource>DocReportTemplate</DataSource>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SignatureAppearanceOverride</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>SignatureAppearanceOverride_SignatureAppearanceOverride</Name>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>SignatureAppearanceOverride</DataField>
												<DataSource>DocReportTemplate</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SignatureAppearanceOverride_SignatureAppearanceId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@DocentricAX3:ReportTemplateSignatureAppearanceHelp</HelpText>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>SignatureAppearanceId</DataField>
												<DataSource>DocReportTemplate</DataSource>
												<Label>@DocentricAX3:ReportTemplateSignatureAppearance</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
										<DataGroup>SignatureAppearanceOverride</DataGroup>
										<DataSource>DocReportTemplate</DataSource>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@DocentricAX3:ReportTemplateSignatureAppearanceTabCaption</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>