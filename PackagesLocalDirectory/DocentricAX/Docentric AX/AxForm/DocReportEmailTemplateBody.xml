<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportEmailTemplateBody</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocReportEmailTemplateBody extends FormRun
{
    private boolean isSaved;       // A flag indicating if form data is saved
    private boolean inCloseCancel; // A flag indicating if form is closed by pressing ESC key

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intitializes the form.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons

        super();

        if (element.args() == null || element.args().dataset() != tableNum(DocReportEmailTemplate))
        {
            throw error(Error::missingRecord(element.design().caption()));
        }

        // Hide the Attach button.
        FormCommandButtonControl button = this.control(this.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }

        // Hide the Filter button.
        button = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can close the form.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean canClose()
    {
        boolean ret = super();

        ret = ret && this.tryToSaveIfModified();
  
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the form.
    /// </summary>
    public void close()
    {
        super();
        
        BodyHtmlEditor = null;
        if (!this.closedCancel())
        {
            // Refresh the caller form.
            if (element.args() && element.args().caller())
            {
                IDocRefreshable caller = element.args().caller() as IDocRefreshable;
                if (caller)
                {
                    caller.refreshCallerDataSourceAndPosition(this.args().record());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Close cancel.
    /// </summary>
    public void closeCancel()
    {
        try
        {
            inCloseCancel = true;
            super();
        }
        finally
        {
            inCloseCancel = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryToSaveIfModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if form should be saved and saves it if necessary.
    /// </summary>
    /// <returns>True if form saved; false otherwise.</returns>
    public boolean tryToSaveIfModified()
    {
        #Task
        boolean ret = true;

        // Check the flag indicating that form data was chnaged
        boolean isModified = (DocReportEmailTemplate.HtmlBody != BodyHtmlEditor.getSourceString());
        if (isModified)
        {
            boolean tryToSave;
            [tryToSave, ret] = this.decideToSaveAndExit();

            if (tryToSave)
            {
                // Save the modified data
                DocReportEmailTemplate_ds.write();
               
                ret = isSaved && ret;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decideToSaveAndExit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether to save and exit. Can ask user to confirm saving.
    /// </summary>
    /// <returns>A container [save, exit]</returns>
    public container decideToSaveAndExit()
    {
        boolean save;
        boolean exit = true;

        if (inCloseCancel)
        {
            save = false;
        }
        else
        {
            DialogButton answer = Box::yesNoCancel("@DocentricAX3:EmailTemplateBodySaveChanges", DialogButton::Cancel);
            [save, exit] = [answer == DialogButton::Yes, answer != DialogButton::Cancel];
        }
        return [save, exit];
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocReportEmailTemplate</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the record becomes active.
        /// </summary>
        /// <returns>True/False</returns>
        public int active()
        {
            int ret;
        
            ret = super();

            DocReportTable docReportTable = DocReportTable::find(DocReportEmailTemplate.Report);

            // Set the placeholderList of the BodyHtmlEditor control
            str placeholderListStr = DocPlaceholderAttHtmlEditorHelper::getPlaceholderListStr(docReportTable.ReportId, PrintMgmtDocumentType::BankCheque /* instead of null */, false);
            BodyHtmlEditor.parmPlaceholders(placeholderListStr);

            // Set the body of the BodyHtmlEditor control
            BodyHtmlEditor.setSourceString(DocReportEmailTemplate.HtmlBody);
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the record will be saved to the table.
        /// </summary>
        public void write()
        {
            // Get the current body of the BodyHtmlEditor control
            DocReportEmailTemplate.HtmlBody = BodyHtmlEditor.getSourceString();

            super();

            isSaved = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>reread</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the record is reread form the table.
        /// </summary>
        public void reread()
        {
            super();

            // Set the body of the BodyHtmlEditor control
            BodyHtmlEditor.setSourceString(DocReportEmailTemplate.HtmlBody);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocReportEmailTemplate</Name>
			<Table>DocReportEmailTemplate</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Comment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailTemplateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HtmlBody</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Report</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tags</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Title</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX3:EmailTemplateBodyCaption</Caption>
		<DataSource xmlns="">DocReportEmailTemplate</DataSource>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">DocReportEmailTemplate</TitleDataSource>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PlaceholderListButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>DocReportPlaceholderList</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>DocReportPlaceholderList</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<AllowEdit>No</AllowEdit>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>HeaderGroup_EmailTemplateId</Name>
						<ExtendedStyle>informationalField</ExtendedStyle>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>EmailTemplateId</DataField>
						<DataSource>DocReportEmailTemplate</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>HeaderGroup_CompanyId</Name>
						<ExtendedStyle>informationalField</ExtendedStyle>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CompanyId</DataField>
						<DataSource>DocReportEmailTemplate</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>HeaderGroup_LanguageID</Name>
						<ExtendedStyle>informationalField</ExtendedStyle>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LanguageID</DataField>
						<DataSource>DocReportEmailTemplate</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<DataGroup>Identification</DataGroup>
				<DataSource>DocReportEmailTemplate</DataSource>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>BodyGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>BodyHtmlEditor</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>DocentricHtmlEditorControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmSourceString</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPlaceholders</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmUsedForEmailTemplates</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAllowMaximize</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmEmailTemplates</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAllowEmailTemplates</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmEditorCaption</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAllowPlaceholders</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>True</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>