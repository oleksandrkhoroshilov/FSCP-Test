<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportAttachmentUpdateSettings</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocReportAttachmentUpdateSettings extends FormRun
{
    private boolean isAttachmentAdmin;
    private str updateFields;
    private int cntSelectedRows;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();

        // Get the flag indicating whether the current user is Attachment admin
        isAttachmentAdmin = DocDocuRefHelper::isAttachmentAdmin();

        // Get number of selected records to be updated
        cntSelectedRows = this.getCntSelectedRows();

        element.setControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update attachments when the OK box button is clicked.
    /// </summary>
    public void closeOk()
    {
        if (!updateFields)
        {
            warning("@DocentricAX3:DocUpdateAttachmentsNoFields");
            return;
        }
        str msg = strFmt("@DocentricAX3:DocUpdateAttachmentsWarningUpdateBoxMsg", updateFields, cntSelectedRows);
        if (Box::yesNo(msg, DialogButton::No, "@DocentricAX3:DocUpdateAttachmentsCaption") == DialogButton::Yes)
        {
            if (element.validateControlValues())
            {
                element.updateMessages();

                // Refresh caller form datasource
                DocuRef record = element.args().record();
                if (record)
                {
                    FormDataSource formDataSource = FormDataUtil::getFormDataSource(record);
                    if (formDataSource)
                    {
                        formDataSource.research(true);
                    }
                }

                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the control properties.
    /// </summary>
    private void setControls()
    {
        boolean showIsGlobalAttachment = this.args().parmEnumType() == enumNum(DocShowGlobalAttachmentSetting) && this.args().parmEnum();

        SecondaryInstructionText.text(strFmt("@DocentricAX3:DocUpdateAttachmentsFormInfo", cntSelectedRows));

        // Contains the list of selected fields to be updated
        updateFields = '';

        CategoryId.allowEdit(CategoryUpdate.value());
        updateFields += this.getUpdateFieldList(updateFields, CategoryUpdate.value(), CategoryId.labelText());

        LanguageId.allowEdit(languageUpdate.value());
        updateFields += this.getUpdateFieldList(updateFields, languageUpdate.value(), LanguageId.labelText());

        Tags.allowEdit(TagsUpdate.value());
        updateFields += this.getUpdateFieldList(updateFields, TagsUpdate.value(), Tags.labelText());

        Restriction.allowEdit(RestrictionUpdate.value());
        updateFields += this.getUpdateFieldList(updateFields, RestrictionUpdate.value(), Restriction.labelText());

        GlobalAttachmentsUpdate.visible(showIsGlobalAttachment);
        GlobalAttachments.visible(showIsGlobalAttachment);

        if (showIsGlobalAttachment)
        {
            GlobalAttachments.allowEdit(GlobalAttachmentsUpdate.value());
            updateFields += this.getUpdateFieldList(updateFields, GlobalAttachmentsUpdate.value(), GlobalAttachments.labelText());
        }

        ActiveFrom.allowEdit(ActiveFromUpdate.value());
        updateFields += this.getUpdateFieldList(updateFields, ActiveFromUpdate.value(), ActiveFrom.labelText());

        ActiveTo.allowEdit(ActiveToUpdate.value());
        updateFields += this.getUpdateFieldList(updateFields, ActiveToUpdate.value(), ActiveTo.labelText());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a specified field to a comma-separated string of the fields to be updated.
    /// </summary>
    /// <param name = "_updateFields">A comma-separated string of the fields to be updated</param>
    /// <param name = "_updateField">Flag indicating whether the field will be updated</param>
    /// <param name = "_updateFieldLabel">Label of the field to be updated</param>
    /// <returns>A comma-separated string of the fields to be updated</returns>
    private str getUpdateFieldList(str _updateFields, boolean _updateField, str _updateFieldLabel)
    {
        return _updateField ? ((_updateFields ? ', ' : '') + _updateFieldLabel) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocuViewBlockClearFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the blockClear_DC flag to prevent clearing the data in the DocuView form.
    /// </summary>
    private void setDocuViewBlockClearFlag()
    {
        // Prevent clearing the data in the DocuView form
        if (Docu::Instance() && Docu::Instance().docuView() && Docu::Instance().docuView().object())
        {
            Docu::Instance().docuView().object().parmBlockClear_DC(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCntSelectedRows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of the selected rows to be updated.
    /// </summary>
    /// <returns>Number of the selected rows</returns>
    private int getCntSelectedRows()
    {
        // Get the selected records from the caller form
        MultiSelectionContext multiSelectionContext = element.args().multiSelectionContext();
        DocuRef docuRef;
        int cnt = 0;
        
        if (multiSelectionContext)
        {
            docuRef = multiSelectionContext.getFirst() as DocuRef;
        }
        if (!docuRef)
        {
            docuRef = element.args().record() as DocuRef;
        }
        
        while (docuRef)
        {
            if (!multiSelectionContext)
            {
                break;
            }
            cnt++;
            docuRef = multiSelectionContext.getNext();
        }

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the selected rows with the new values for the selected fields.
    /// </summary>
    private void updateMessages()
    {
        // Get the selected records from the caller form
        MultiSelectionContext multiSelectionContext = element.args().multiSelectionContext();
        DocuRef docuRef;
        int cntUpdated, cntFailed;

        if (multiSelectionContext)
        {
            docuRef = multiSelectionContext.getFirst() as DocuRef;
        }
        if (!docuRef)
        {
            docuRef = element.args().record() as DocuRef;
        }

        while (docuRef)
        {
            docuRef.selectForUpdate(true);

            // Update fields with the control values
            try
            {
                // Check if the current user can update the record
                if (!isAttachmentAdmin && !conPeek(DocDocuRefHelper::allowViewOrEditDocuRef(docuRef), 2))
                {
                    throw Exception::Error;
                }

                ttsbegin;

                if (CategoryUpdate.value())
                {
                    docuRef.CategoryId_DC = CategoryId.text();
                }
                if (LanguageUpdate.value())
                {
                    docuRef.LanguageId_DC = LanguageId.text();
                }
                if (TagsUpdate.value())
                {
                    docuRef.Tags_DC = Tags.text();
                }
                if (RestrictionUpdate.value())
                {
                    docuRef.Restriction = Restriction.selection();
                }
                if (ActiveFromUpdate.value())
                {
                    docuRef.ActiveFrom_DC = ActiveFrom.dateValue();
                }
                if (ActiveToUpdate.value())
                {
                    docuRef.ActiveTo_DC = ActiveTo.dateValue();
                }
                if (GlobalAttachmentsUpdate.value())
                {
                    docuRef.IsGlobalAttachment_DC = GlobalAttachments.value();
                }

                docuRef.update();
                cntUpdated++;

                ttscommit;

            }
            catch
            {
                cntFailed++;
            }

            if (!multiSelectionContext)
            {
                break;
            }
            docuRef = multiSelectionContext.getNext();
        }

        // Count of succesfully updated attachments
        if (cntUpdated)
        {
            DocGlobalHelper::handleInfo(strFmt("@DocentricAX3:DocUpdateAttachmentsSuccessUpdateBoxMsg", updateFields, cntUpdated, cntSelectedRows));
        }

        // Count of failed updated attachments
        if (cntFailed)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX3:DocUpdateAttachmentsFailUpdateBoxMsg", updateFields, cntFailed, cntSelectedRows));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the control values.
    /// </summary>
    /// <returns>true/false</returns>
    private boolean validateControlValues()
    {
        // Get the selected records from the caller form
        MultiSelectionContext multiSelectionContext = element.args().multiSelectionContext();
        DocuRef docuRef;
        boolean ret = true;

        if (multiSelectionContext)
        {
            docuRef = multiSelectionContext.getFirst() as DocuRef;
        }
        if (!docuRef)
        {
            docuRef = element.args().record() as DocuRef;
        }

        while (docuRef)
        {
            if (ActiveFromUpdate.value())
            {
                if (!ActiveToUpdate.value())
                {
                    // Check if Active from date is greather than Active to date
                    if (ActiveFrom.dateValue() != dateNull() && ActiveFrom.dateValue() > docuRef.ActiveTo_DC && docuRef.ActiveTo_DC != dateNull())
                    {
                        ret = checkFailed("@DocentricAX2:AttachmentActiveFromGreatherThanActiveTo");
                    }
                }
                else
                {
                    if (ActiveFrom.dateValue() > ActiveTo.dateValue() && ActiveTo.dateValue() != dateNull())
                    {
                        ret = checkFailed("@DocentricAX2:AttachmentActiveFromGreatherThanActiveTo");
                    }
                }
            }

            if (ActiveToUpdate.value() && !ActiveFromUpdate.value())
            {
                if (docuRef.ActiveFrom_DC > ActiveTo.dateValue() && ActiveTo.dateValue() != dateNull())
                {
                    ret = checkFailed("@DocentricAX2:AttachmentActiveFromGreatherThanActiveTo");
                }
            }

            if (!ret || !multiSelectionContext)
            {
                break;
            }

            docuRef = multiSelectionContext.getNext();
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>CategoryUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a value is moodified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calls a lookup form.
        /// </summary>
        public void lookup()
        {
            // Prevent clearing the data in the DocuView form
            element.setDocuViewBlockClearFlag();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Jumps to the referenced form.
        /// </summary>
        public void jumpRef()
        {
            // Prevent clearing the data in the DocuView form
            element.setDocuViewBlockClearFlag();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LanguageUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a value is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LanguageId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calls a lookup form.
        /// </summary>
        public void lookup()
        {
            // Prevent clearing the data in the DocuView form
            element.setDocuViewBlockClearFlag();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Jumps to the referenced form.
        /// </summary>
        public void jumpRef()
        {
            // Prevent clearing the data in the DocuView form
            element.setDocuViewBlockClearFlag();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TagsUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a value is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RestrictionUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a value is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GlobalAttachmentsUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a value is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActiveFromUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a value is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActiveToUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a value is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DocentricAX3:DocUpdateAttachmentsCaption</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SecondaryInstructionText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@DocentricAX3:DocUpdateAttachmentsFormInfo</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FormTabControl</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CategoryGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CategoryUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:DocUpdateAttachmentsUpdateMsg</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CategoryId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocAttachmentCategoryId</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>LanguageGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LanguageUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:DocUpdateAttachmentsUpdateMsg</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LanguageId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocReportTemplateLanguageId</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TagsGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>TagsUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:DocUpdateAttachmentsUpdateMsg</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Tags</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocAttachmentTags</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RestrictionGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>RestrictionUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:DocUpdateAttachmentsUpdateMsg</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Restriction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>DocuRestriction</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GlobalAttachmentsGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>GlobalAttachmentsUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:DocUpdateAttachmentsUpdateMsg</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>GlobalAttachments</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAX2:IsGlobalAttachmentHelp</HelpText>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX2:IsGlobalAttachment</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX3:DocUpdateAttachmentsGeneral</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DateTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ActiveFromGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ActiveFromUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:DocUpdateAttachmentsUpdateMsg</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ActiveFrom</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocReportAttachmentActiveFrom</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ActiveToGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ActiveToUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:DocUpdateAttachmentsUpdateMsg</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ActiveTo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocReportAttachmentActiveTo</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX3:DocUpdateAttachmentsDatePeriod</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>