<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocSharePointFolderSelection</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Docentric.AX.Storage.SharePoint.Common;
using Docentric.AX.Storage.SharePoint;
using Docentric.AX.Storage.SharePoint.Model;

[Form]
public class DocSharePointFolderSelection extends FormRun
{
    private DocSharePointFolderSelection folderSelection;
    private SysFormEnumComboBox siteSearchFieldsHelper;
    private int currentSiteResultPage = 1;
    private Map spSiteMap = new Map(Types::String, Types::AnyType);  // Used to store the SharePoint sites [DocSPSite.Url, DocSPSite object]

}
]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override of FormRun::run. Initializes the folder tree view.
    /// </summary>
    public void run()
    {
        super();
       
        Set allowedTypes = new Set(Types::Enum);
        allowedTypes.add(DocuSiteSearchFields::Title);
        allowedTypes.add(DocuSiteSearchFields::TitleAndDescription);
        siteSearchFieldsHelper = SysFormEnumComboBox::newParameters(this, SearchFields.id(), enumNum(DocuSiteSearchFields), allowedTypes);
        
        boolean errorClose = true;
        folderSelection = element.args().parmObject() as DocSharePointFolderSelection;
        if (folderSelection == null)
        {
            error(Error::missingParameter(element.args().caller()));
        }
        else
        {
            element.design().caption(folderSelection.parmShowFolders() ? "@ApplicationFoundation:SPSelectionDlg_Caption" : "@DocentricAX4:SharePointFolderSelectionCaption");
            NavigationGroup.visible(folderSelection.parmShowSites());
            DetailsGroup.visible(folderSelection.parmShowLibraries() || folderSelection.parmShowFolders());
            DetailsGroup.caption(folderSelection.parmShowFolders() ? "@ApplicationFoundation:DocuSPFolders" : "@DocentricAX4:SharePointDocumentLibraries");
            if (!DetailsGroup.visible() || !NavigationGroup.visible())
            {
                element.design().dialogSize(DialogSize::Medium);
            }

            SearchTerm.text(folderSelection.getSearchOptions().Query);

            errorClose = false;

            element.loadSites();
        }

        if (errorClose)
        {
            this.closeCancel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads SharePoint sites and displays them in the grid.
    /// </summary>
    private void loadSites()
    {
        spSiteMap = new Map(Types::String, Types::AnyType);
        DocSharePointItemTmp spSiteTmp = DocSharePointSiteTmp_ds.cursor();
        delete_from spSiteTmp;
        FolderTree.deleteAll();

        // Set SharePoint site search options
        DocuSiteSearchFields selectedSearchFields = siteSearchFieldsHelper.selection();
        switch (selectedSearchFields)
        {
            case DocuSiteSearchFields::Title:
                folderSelection.getSearchOptions().SearchFields = DocSPSiteSearchField::Title;
                break;
            case DocuSiteSearchFields::TitleAndDescription:
                folderSelection.getSearchOptions().SearchFields = DocSPSiteSearchField::TitleOrDescription;
                break;
        }

        boolean nextPage = false;
        boolean prevPage = false;
        int totalResultPages = 0;
        str spSiteUrl = DocSPUrlHelper::GetSiteUrl(folderSelection.getHostName(), '');
        DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(spSiteUrl, '', DocSharePointRole::BrowserUser);

        // Get the SharePoint sites for provided search options
        DocSPSiteResult spSiteResult = DocSharePointHelperV3::findSharePointSites(folderSelection.getSearchOptions(), spSiteUrl, spCredentials);

        if (spSiteResult != null)
        {
            if (spSiteResult.IsSuccess)
            {
                int totalSiteCount = spSiteResult.TotalItemCount;
                totalResultPages = totalSiteCount div folderSelection.getSearchOptions().PageSize;
                if (totalSiteCount mod folderSelection.getSearchOptions().PageSize)
                {
                    totalResultPages++;
                }

                nextPage = currentSiteResultPage < totalResultPages;
                prevPage = currentSiteResultPage > 1;

                element.addSites(spSiteResult.Sites);
            }
            else
            {
                element.handleError(spSiteResult.Error);
            }
        }

        NextButton.enabled(nextPage);
        PreviousButton.enabled(prevPage);
        RecordPositionDisplay.text(strFmt("@ApplicationFoundation:DocuSPSiteRecordPosition", currentSiteResultPage, totalResultPages));
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the error message to the user.
    /// </summary>
    /// <param name = "_error">Error message</param>
    private void handleError(DocSPError _error)
    {
        str errMsg = strFmt("@DocentricAX4:SharePointFolderSelectionError", folderSelection.getHostName());
        try
        {
            throw _error.Exception;
        }
        catch
        {
            DocGlobalHelper::handleClrError('', errMsg);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds items to the DocSharePointItemTmp table for each SharePoint site.
    /// </summary>
    /// <param name = "_spSiteCollection">SharePoint site collection</param>
    private void addSites(DocSPSiteCollection _spSiteCollection)
    {
        if (_spSiteCollection != null)
        {
            DocSharePointItemTmp spSiteTmp = DocSharePointSiteTmp_ds.cursor();

            for (int i = 0; i < _spSiteCollection.Count; i++)
            {
                DocSPSite spSite = _spSiteCollection.GetByIndex(i);

                if (!spSiteMap.exists(spSite.Url))
                {
                    spSiteMap.insert(spSite.Url, spSite);
                }

                // Insert or update the SharePoint site in the DocSharePointItemTmp table
                ttsbegin;

                // Check if the SaharePoint site already exists in the DocSharePointItemTmp table
                spSiteTmp = DocSharePointItemTmp::find(spSiteTmp, spSite.Url, true);

                spSiteTmp.ItemId = spSite.WebId;
                spSiteTmp.ItemUrl = spSite.Url;
                spSiteTmp.ItemTitle = spSite.Title;
                spSiteTmp.ItemDescription = spSite.Description;

                if (spSiteTmp)
                {
                    spSiteTmp.update();
                }
                else
                {
                    spSiteTmp.insert();
                }

                ttscommit;
            }

            DocSharePointSiteTmp_ds.research(true);

            // Set the selected SharePoint site
            if (folderSelection.spSiteUrl && folderSelection.parmSelectedSite() == null && spSiteMap.exists(folderSelection.spSiteUrl))
            {
                folderSelection.parmSelectedSite(spSiteMap.lookup(folderSelection.spSiteUrl));
            }

            // Check if the selected SharePoint site is set
            if (folderSelection.parmSelectedSite() != null)
            {
                // Select the selected SharePoint site in the grid
                element.args().lookupField(fieldNum(DocSharePointItemTmp, ItemUrl));
                element.args().lookupValue(folderSelection.parmSelectedSite().Url);
                DocSharePointSiteTmp_ds.research(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDocumentLibraries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds nodes for each document library in the specified SharePoint site.
    /// </summary>
    /// <param name = "_spSite">SharePoint site</param>
    private void loadDocumentLibraries(DocSPSite _spSite)
    {
        FolderTree.deleteAll();

        if (_spSite != null)
        {
            boolean nodeSelected = false;
            boolean folderSelected = false;
            int rootId = element.addFolderTreeNode(0, _spSite.Title, _spSite);
            FolderTree.expand(rootId);
            DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(_spSite.Url, '', DocSharePointRole::BrowserUser);

            // Get the document libraries for the selected SharePoint site
            DocSPDocumentLibraryCollection spDocumentLibraries = DocSharePointHelperV3::getDocumentLibraries(_spSite.Url, spCredentials);
            if (spDocumentLibraries != null && spDocumentLibraries.Count > 0)
            {
                for (int i = spDocumentLibraries.Count - 1; i >= 0; i--)
                {
                    DocSPDocumentLibrary spDocumentLibrary = spDocumentLibraries.GetByIndex(i);
                    int nodeId = element.addFolderTreeNode(rootId, spDocumentLibrary.Title, spDocumentLibrary);

                    // Set the selected document library
                    if (folderSelection.spDocumentLibraryUrl && folderSelection.parmSelectedLibrary() == null)
                    {
                        System.String spDocumentLibraryUrl = folderSelection.spDocumentLibraryUrl;
                        if (spDocumentLibraryUrl.Equals(spDocumentLibrary.ResourceAbsolutePath.TrimStart(DocConstantFile::UrlDelimiter)))
                        {
                            folderSelection.parmSelectedLibrary(spDocumentLibrary);
                        }
                    }

                    // Check if the selected document library is set
                    if (folderSelection.parmSelectedLibrary() != null)
                    {
                        // Check if the current document library node is the selected document library
                        if (spDocumentLibrary.ResourceAbsolutePath.Equals(folderSelection.parmSelectedLibrary().ResourceAbsolutePath))
                        {
                            // Check if the selected folder is set and is inside the current document library node
                            if (folderSelection.parmShowFolders())
                            {
                                // Set the selected folder
                                if (folderSelection.spFolderUrl && folderSelection.parmSelectedFolder() == null)
                                {
                                    spCredentials = DocSharePointCredentials::constructFromSetup(
                                        folderSelection.spSiteUrl, folderSelection.spFolderUrl, DocSharePointRole::BrowserUser);

                                    folderSelection.parmSelectedFolder(DocSharePointHelperV3::getFolderByUrl(folderSelection.spFolderUrl, folderSelection.spSiteUrl, spCredentials, false, false));
                                }

                                if (folderSelection.parmSelectedFolder() != null
                                        && !folderSelection.parmSelectedFolder().ServerRelativeUrl.Equals(folderSelection.parmSelectedLibrary().ServerRelativePath))
                                {
                                    folderSelected = true;
                                    // Expand the current document library node
                                    FolderTree.expand(nodeId, FormTreeExpand::Expand);
                                }
                            }
                            
                            if (!folderSelected)
                            {
                                // Select the current document library node
                                FolderTree.select(nodeId);
                                nodeSelected = true;
                            }
                        }
                    }
                }
            }
            // Check if any document library node is expanded
            FormTreeItem rootTreeItem = FolderTree.getItem(rootId);
            if (!rootTreeItem.stateExpanded())
            {
                // If not, expand and select the root node
                FolderTree.expand(rootId);
                if (!nodeSelected)
                {
                    FolderTree.select(rootId);
                }
            }
        }

        element.updateUI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFolders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds nodes for each folder directly under the specified document library or folder
    /// </summary>
    /// <param name = "_serverRelativePath">Server relative path of parent document library or folder</param>
    /// <param name = "_parentId">Parent node id</param>
    /// <param name = "_spFolderSearchOptions">Folder search options if there is more than one page in folder search result</param>
    /// <returns>True if any children were added to the parent node.</returns>
    private boolean loadFolders(str _serverRelativePath, int _parentId, DocSPFolderSearchOptions _spFolderSearchOptions = null)
    {
        int childCount = 0;

        if (!_serverRelativePath)
        {
            return false;
        }

        // Set search options for folders
        if (_spFolderSearchOptions == null)
        {
            _spFolderSearchOptions = new DocSPFolderSearchOptions();
        }
        _spFolderSearchOptions.IncludeFolders = true;
        _spFolderSearchOptions.IncludeFiles = false;
        _spFolderSearchOptions.Recursive = false;

        DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
            DocSharePointSiteTmp.ItemUrl, _serverRelativePath, DocSharePointRole::BrowserUser);

        // Get the folders for the selected docuemnt library or folder
        DocSPFolderItemResult spFolderItemResult = DocSharePointHelperV3::getFolderItems(
                                                        _serverRelativePath,
                                                        _spFolderSearchOptions,
                                                        DocSharePointSiteTmp.ItemUrl,
                                                        spCredentials);

        if (spFolderItemResult != null)
        {
            if (spFolderItemResult.IsSuccess)
            {
                if (spFolderItemResult.Items != null)
                {
                    DocSPListItemCollection itemCollection = spFolderItemResult.Items;
                    childCount = itemCollection.Count;

                    for (int i = itemCollection.Count - 1; i >= 0; i--)
                    {
                        DocSPListItem spListItem = itemCollection.getByIndex(i);
                        int nodeId = element.addFolderTreeNode(_parentId, spListItem.Folder.Name, spListItem.Folder);

                        // Check if the selected folder is set
                        if (folderSelection.parmSelectedFolder() != null)
                        {
                            DocSPFolder spFolder = spListItem.Folder;
                            // Check if the selected folder is inside the current folder node 
                            if (strStartsWith(folderSelection.parmSelectedFolder().ServerRelativeUrl + DocConstantFile::UrlDelimiter, spFolder.ServerRelativeUrl + DocConstantFile::UrlDelimiter))
                            {
                                // Check if the current folder node is the selected folder
                                if (spFolder.ServerRelativeUrl.Equals(folderSelection.parmSelectedFolder().ServerRelativeUrl))
                                {
                                    // Select the current folder node
                                    FolderTree.select(nodeId);
                                }
                                else
                                {
                                    // Expand the current folder node
                                    FolderTree.expand(nodeId, FormTreeExpand::Expand);
                                }
                            }
                        }
                    }

                    // Check if the result has more than one page
                    if (spFolderItemResult.NextPageSearchOptions.HasNextPage)
                    {
                        // Load folders from the next page
                        return element.loadFolders(_serverRelativePath, _parentId, spFolderItemResult.NextPageSearchOptions);
                    }
                }
            }
            else
            {
                element.handleError(spFolderItemResult.Error);
            }
        }

        return childCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFolderTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a FormTreeItem and appends it to the FolderTree.
    /// </summary>
    /// <param name = "_parentId">Parent node id</param>
    /// <param name = "_text">Title of new FormTreeItem</param>
    /// <param name = "_data">Data object of new FormTreeItem</param>
    /// <returns></returns>
    private int addFolderTreeNode(int _parentId, str _text, System.Object _data)
    {
        FormTreeItem treeItem = new FormTreeItem(_text);

        // Set children count so the expand/collapse indicator will show
        if (!(_data is DocSPSite) && folderSelection.parmShowFolders())
        {
            treeItem.children(2);
        }
        treeItem.data(_data);

        return FolderTree.addItem(_parentId, true, treeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>folderSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles selection changes in the FolderTree. Updates FullAddress and button state.
    /// </summary>
    /// <param name = "_treeItem">A FormTreeItem object</param>
    private void folderSelected(FormTreeItem _treeItem)
    {
        int id;

        // Reset selection properties
        folderSelection.resetSelection();

        if (_treeItem)
        {
            // Walk up the tree from the selected node looking for the folder, library and site items
            folderSelection.parmSelectedFolder(_treeItem.data() as DocSPFolder);
            if (folderSelection.parmSelectedFolder() != null)
            {
                while (_treeItem != null && _treeItem.data() is DocSPFolder)
                {
                    id = FolderTree.getParent(_treeItem.idx());
                    _treeItem = FolderTree.getItem(id);
                }
            }

            if (_treeItem)
            {
                // TreeItem should point to the first non-folder node at or above the selected node
                folderSelection.parmSelectedLibrary(_treeItem.data() as DocSPDocumentLibrary);
                if (folderSelection.parmSelectedLibrary() != null)
                {
                    id = FolderTree.getParent(_treeItem.idx());
                    _treeItem = FolderTree.getItem(id);
                    if (_treeItem)
                    {
                        folderSelection.parmSelectedSite(_treeItem.data() as DocSPSite);
                    }
                }
                else
                {
                    folderSelection.parmSelectedSite(_treeItem.data() as DocSPSite);
                }
            }
        }

        element.updateUI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPageOfSites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the next page of SharePoint sites.
    /// </summary>
    private void nextPageOfSites()
    {
        currentSiteResultPage++;
        folderSelection.getSearchOptions().ConfigureForNextPage();
        element.loadSites();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousPageOfSites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the previous page of the SharePoint sites.
    /// </summary>
    private void previousPageOfSites()
    {
        currentSiteResultPage--;
        folderSelection.getSearchOptions().ConfigureForPreviousPage();
        element.loadSites();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the search term and searches for SharePoint sites.
    /// </summary>
    private void resetSearch()
    {
        SearchTerm.text('');
        element.search();
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for SharePoint sites.
    /// </summary>
    private void search()
    {
        str queryString = SearchTerm.text();
        if (queryString && !strEndsWith(queryString, '*'))
        {
            // Append wildcard
            queryString += '*';
        }

        currentSiteResultPage = 1;
        folderSelection.getSearchOptions().Query = queryString;
        folderSelection.getSearchOptions().ResetPaging();

        element.loadSites();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the controls on form.
    /// </summary>
    private void updateUI()
    {
        str selectionAddress = folderSelection.getAddress();
        FullAddress.text(selectionAddress);
        BrowseButton.enabled(strLen(selectionAddress) > 0);
        OkButton.enabled(folderSelection.parmSelectedSite() != null && folderSelection.parmSelectedLibrary() != null);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocSharePointSiteTmp</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a record becomes active.
        /// </summary>
        /// <returns>True/False</returns>
        public int active()
        {
            int ret;
    
            ret = super();

            DocSPSite selectedSite = spSiteMap.lookup(DocSharePointSiteTmp.ItemUrl);
            if (selectedSite)
            {
                // Load doucment libraries for the selected SharePoint site
                element.loadDocumentLibraries(selectedSite);
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>BrowseButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens a new window and navigates to the currently selected address
        /// </summary>
        public void clicked()
        {
            super();

            str address = folderSelection.getAddress();
            if (address)
            {
                Browser browser = new Browser();
                browser.navigate(address);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SearchButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Searches for SharePoint sites.
        /// </summary>
        public void clicked()
        {
            super();

            element.Search();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ResetSearchButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Clears the search term and searches for SharePoint sites.
        /// </summary>
        public void clicked()
        {
            super();

            element.resetSearch();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PreviousButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Loads the previous page of the SharePoint sites.
        /// </summary>
        public void clicked()
        {
            super();

            element.previousPageOfSites();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NextButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Loads the next page of SharePoint sites.
        /// </summary>
        public void clicked()
        {
            super();

            element.nextPageOfSites();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FolderTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the selection changes in the FolderTree
        /// </summary>
        /// <param name = "_oldItem">Old form tree item</param>
        /// <param name = "_newItem">New form tree item</param>
        /// <param name = "_how">Selection mode</param>
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            super(_oldItem, _newItem, _how);

            element.folderSelected(_newItem);
        }

]]></Source>
					</Method>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when a node of the tree control is expanding.
        /// </summary>
        /// <param name = "_Idx">The index of the expanding node</param>
        /// <param name = "_action">The expand/collapse action</param>
        /// <param name = "_data">The item's data?</param>
        /// <returns>True/False</returns>
        public boolean expanding(int _Idx, FormTreeExpand _action, anytype _data)
        {
            FormTreeItem treeItem = this.getItem(_idx);
            if (treeItem)
            {
                str serverRelativePath = '';
                if (treeItem.data() is DocSPDocumentLibrary)
                {
                    DocSPDocumentLibrary spDocumentLibrary = treeItem.data();
                    serverRelativePath = spDocumentLibrary.ServerRelativePath;
                }
                else if (treeItem.data() is DocSPFolder)
                {
                    DocSPFolder spFolder = treeItem.data();
                    serverRelativePath = SPFolder.ServerRelativeUrl;
                }

                // Load the folders for the selected folder node if needed
                if (serverRelativePath && _action == FormTreeExpand::Expand && !treeItem.stateExpandedOnce())
                {
                    treeItem.stateExpandedOnce(true);
                    FolderTree.setItem(treeItem);
                    boolean hasChildren = element.loadFolders(serverRelativePath, treeItem.idx());

                    if (!hasChildren)
                    {
                        // No children so remove the expand/collapse indicator
                        treeItem.children(-1);
                        FolderTree.setItem(treeItem);
                    }
                }
            }
        
            return super(_idx, _action, _data);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocSharePointSiteTmp</Name>
			<Table>DocSharePointItemTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ItemDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@ApplicationFoundation:SPSelectionDlg_Caption</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ResultGroup</Name>
						<Pattern>HorizontalFieldsButtonsGroup</Pattern>
						<PatternVersion>UX7 1.2</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FullAddress</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS132465</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BrowseButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>Internet</NormalImage>
								<Text>@ApplicationFoundation:DocuFileSaveBrowseLocation</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ListAndDetailsGroup</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>NavigationGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SearchOptionsGroup</Name>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>FilterGroup</Name>
												<Pattern>HorizontalFieldsButtonsGroup</Pattern>
												<PatternVersion>UX7 1.2</PatternVersion>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SearchTerm</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ShowLabel>No</ShowLabel>
														<Text>@SYS41043</Text>
														<ViewEditMode>Edit</ViewEditMode>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SearchButton</Name>
														<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<DefaultButton>Yes</DefaultButton>
														<NormalImage>Find</NormalImage>
														<Text>@SYS3340</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ResetSearchButton</Name>
														<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>ImageOnly</ButtonDisplay>
														<NormalImage>Delete</NormalImage>
														<Text>@SYS3073</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>SearchFields</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<EnumType>DocuSiteSearchFields</EnumType>
												<Label>@ApplicationFoundation:DocuSPSiteSearchFields</Label>
												<Items />
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>SiteGrid</Name>
										<ExtendedStyle>grid_autoSizeHeight</ExtendedStyle>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SiteGrid_ItemTitle</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ItemTitle</DataField>
												<DataSource>DocSharePointSiteTmp</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SiteGrid_ItemDescription</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ItemDescription</DataField>
												<DataSource>DocSharePointSiteTmp</DataSource>
											</AxFormControl>
										</Controls>
										<DataGroup>Overview</DataGroup>
										<DataSource>DocSharePointSiteTmp</DataSource>
										<MultiSelect>No</MultiSelect>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SiteFooter</Name>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>PreviousButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@ApplicationFoundation:DocuSPPreviousSiteResults</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<NormalImage>Previous</NormalImage>
												<Text>@SYS16148</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>RecordPositionDisplay</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<Alignment>Center</Alignment>
												<Label>@SYS9103</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>NextButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@ApplicationFoundation:DocuSPNextSiteResults</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<NormalImage>Next</NormalImage>
												<Text>@SYS6441</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Auto</ArrangeMethod>
										<Columns>3</Columns>
									</AxFormControl>
								</Controls>
								<NeededAccessLevel>Edit</NeededAccessLevel>
								<Caption>@ApplicationFoundation:DocuSPSiteList</Caption>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DetailsGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTreeControl">
										<Name>FolderTree</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Tree</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<NeededAccessLevel>Edit</NeededAccessLevel>
								<Caption>@ApplicationFoundation:DocuSPFolders</Caption>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<NeededAccessLevel>Edit</NeededAccessLevel>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>