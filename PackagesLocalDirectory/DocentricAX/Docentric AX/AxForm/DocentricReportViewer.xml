<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocentricReportViewer</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Docentric.AX.Email;
using Docentric.AX.Framework.Utilities;
using System.Net.Mail;
using System.IO;

[Form]
public class DocentricReportViewer extends FormRun
{
    #define.SystemDefinedRefreshButton('SystemDefinedRefreshButton')
    #define.SystemDefinedPopoutButton('SystemDefinedPopoutButton')
    #define.SystemDefinedOfficeButton('SystemDefinedOfficeButton')

    DocPrintReportSettings printReportSettings;
    boolean isPreviewMode;
    boolean previewMode_continueReportPrinting;
    DocReportViewerParams reportViewerParams;

    // Export to Excel in advance for SSRS PreProcessingTempDB reports:
    DocPrintReportToMemoryExecutionInfo printSsrsInExcelToMemoryExecutionInfo;
    str printSsrsInExcelToMemoryErrorMsg;

    // Export to Word in advance for SSRS PreProcessingTempDB reports:
    DocPrintReportToMemoryExecutionInfo printSsrsInWordToMemoryExecutionInfo;
    str printSsrsInWordToMemoryErrorMsg;

}
]]></Source>
			</Method>
			<Method>
				<Name>isSsrsPrintedToExcelInMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag indicating if SSRS report is printed to Excel memory stream.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isSsrsPrintedToExcelInMemory()
    {
        return printSsrsInExcelToMemoryExecutionInfo != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSsrsPrintedToWordInMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag indicating if SSRS report is printed to Word memory stream.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isSsrsPrintedToWordInMemory()
    {
        return printSsrsInWordToMemoryExecutionInfo != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportOutputFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output filename.
    /// </summary>
    /// <returns>Report output filename</returns>
    public str getReportOutputFilename()
    {
        str outputFileName;
        
        if (printReportSettings != null)
        {
            outputFileName = printReportSettings.parmReportCaption();
            if (outputFileName == '')
            {
                outputFileName = printReportSettings.parmReportId();
            }
        }

        // Clean output filename from invalid characters, if any.
        outputFileName = DocFileMngHelper::replaceInvalidCharsForFileName(outputFileName);

        return outputFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        str openingPdfFileContentBase64String;
        boolean useBrowserViewer;

        super();

        // Hide the Refresh system button.
        var sysRefreshButton = this.control(this.controlId(#SystemDefinedRefreshButton)) as FormCommandButtonControl;
        if(sysRefreshButton)
        {
            sysRefreshButton.visible(false);
        }

        // Hide the Popout system button.
        var sysPopoutButton = this.control(this.controlId(#SystemDefinedPopoutButton)) as FormCommandButtonControl;
        if(sysPopoutButton)
        {
            sysPopoutButton.visible(false);
        }

        // Hide the Open in Office system button.
        var sysOpenInOfficeButton = this.control(this.controlId(#SystemDefinedOfficeButton)) as FormControl;
        if(sysOpenInOfficeButton)
        {
            sysOpenInOfficeButton.visible(false);
        }

        // Read the input arguments of the form.
        if (this.args() && this.args().parmObject() != null)
        {
            if (this.args().parmObject() is DocReportViewerParams)
            {
                reportViewerParams = this.args().parmObject();
                openingPdfFileContentBase64String = reportViewerParams.parmOutputFileContentBase64String();

                printReportSettings = reportViewerParams.parmPrintReportSettings();

                isPreviewMode = reportViewerParams.parmIsPreviewMode();
                if (isPreviewMode)
                {
                    previewMode_continueReportPrinting = false;

                    str previewModePrintDestLabel, previewModePrintDestDesc;
                    [previewModePrintDestLabel, previewModePrintDestDesc] = reportViewerParams.getDocentricPrintDestDescription();
                    ContinuePrinting.text(strFmt("@DocentricAX2:ContinuePrintint", previewModePrintDestLabel));
                    ContinuePrinting.helpText(strFmt("@DocentricAX2:PrintToPrintDest", previewModePrintDestDesc));

                    DownloadEmailMessage.visible(reportViewerParams.targetPrintDestination() == DocPrintDestination::Email);
                }

                PreviewModeButtonGroup.visible(isPreviewMode);
            }
        }

        if (openingPdfFileContentBase64String == '')
        {
            DocGlobalHelper::handleException(funcName(), 'The form can be open only with the args().parmObject() containing the opening PDF file content');
        }

        DocParameters docParams = DocParameters::find();
        useBrowserViewer = docParams.ReportViewerChoice == DocReportViewerChoice::BrowserPdfViewer;

        // Set the parameters of the Docentric Report Viewer Control.
        // -- File content.
        DocentricReportViewerControlInstance.setSourcePdfDocumentBase64String(openingPdfFileContentBase64String);
        
        // -- Set the current user UI language
        DocentricReportViewerControlInstance.parmUserLanguage(new xInfo().language());

        // -- Use Browser Viewer flag.
        DocentricReportViewerControlInstance.parmUseBrowserViewer(useBrowserViewer);

        // -- Enable native PDF printing in browser
        DocentricReportViewerControlInstance.parmEnableNativePdfPrinting(!DocSystemSetting::isDisableDocentricReportViewerNativePdfPrinting());

        if (printReportSettings)
        {
            // Set the caption of the form.
            this.design().caption(printReportSettings.parmReportCaption());

            // -- File name.
            str outputFileName = this.getReportOutputFilename() + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtPdf;
            DocentricReportViewerControlInstance.parmFileName(outputFileName);

            // -- Enable export to Word or Excel.
            if (printReportSettings.printSrsOriginalDesign())
            {
                // SSRS original design is used.
                DocentricReportViewerControlInstance.parmEnableExportToWord(true);
                DocentricReportViewerControlInstance.parmEnableExportToExcel(true);
            }
            else
            {
                // Docentric template is used.
                DocentricReportViewerControlInstance.parmEnableExportToWord(true);
                DocentricReportViewerControlInstance.parmEnableExportToExcel(false);
            }
        }
        else
        {
            DocentricReportViewerControlInstance.parmEnableExportToWord(false);
            DocentricReportViewerControlInstance.parmEnableExportToExcel(false);
        }

        // For PreProcessing (PreProcessingRegular and PreProcessingTempDB) reports,
        // generate the Excel and Word documents in advance, before the viewer is open.
        // Otherwise, for these reports 'Export to Excel' will not work, because Docentric Viewer
        // does not block the code execution and the PreProcessing report tables will be
        // cleaned by the SSRS framework, and SSRS Reporting Services will not be able to fetch  
        // any report data from the database.
        if (!isPreviewMode && printReportSettings && printReportSettings.printSrsOriginalDesign())
        {
            // This should apply only when printing SSRS reports that are PreProcessingTempDB, 
            // and when we are not in Preview before print mode.
            if (printReportSettings.parmSrsReportContract() &&
                DocReportingHelper::isSrsReportPreProcessing(printReportSettings.parmSrsReportContract().parmRdpName()))
            {
                this.exportToExcelInMemory();
                this.exportToWordInMemory();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calles when form is closed.
    /// </summary>
    public void close()
    {
        super();

        printReportSettings = null;
        reportViewerParams = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToWord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the report to Word.
    /// </summary>
    public void exportToWord()
    {
        if (printReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Export to Word can be invoked only if the form has been open with args().parmObject() containing a DocPrintReportSettings object instance');
        }

        //-- If SSRS report was already printed to Memory (successfully or unsuccessfully),
        // send it for downloading in browser or inform the user about the error.
        if (this.isSsrsPrintedToWordInMemory())
        {
            this.handleWordPrintedInMemory();
            return;
        }

        // Create the report printing settings.
        DocPrintReportSettings exportToWordPrintReportSettings = 
            DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(printReportSettings);
        exportToWordPrintReportSettings.parmPrintDestination(DocPrintDestination::File);     // Change to File.
        exportToWordPrintReportSettings.parmSaveToArchive(false);
        exportToWordPrintReportSettings.parmSuppressSuccessMsg(false);
        exportToWordPrintReportSettings.parmPreviewBeforePrint(false);
        exportToWordPrintReportSettings.parmPrintedFrom(DocReportPrintedFrom::DocentricViewer);

        // Create the File print destination settings.
        str outputFileName = this.getReportOutputFilename();
        DocPrintDestSettingsFile filePds = new DocPrintDestSettingsFile();
        if (printReportSettings.printSrsOriginalDesign())
        {
            filePds.parmOutputFilename(outputFileName + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtDoc);
            filePds.parmOutputFileFormatSrs(7);  // SRSReportFileFormat::Word
            filePds.parmUseSsrsBuiltInDesign(true);
        }
        else
        {
            filePds.parmOutputFilename(outputFileName + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtDocx);
            filePds.parmOutputFileFormat(DocOutputFileFormat::DOCX);
        }
        filePds.parmSendOutputFileToUser(true);
        
        // Print the report in Word output format to the File print destination.
        DocOutputManager::printReportToFile(exportToWordPrintReportSettings, filePds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToWordInMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the report to Word memory stream.
    /// </summary>
    public void exportToWordInMemory()
    {
        // Store the current info log line.
        int startInfoLogLine = infologLine();

        // Print SSRS report in Word output format to Memory.
        try
        {
            // Create the report printing settings.
            DocPrintReportSettings exportToWordPrintReportSettings =
                DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(printReportSettings);
            exportToWordPrintReportSettings.parmPrintDestination(DocPrintDestination::Memory);     // Change to Memory.
            exportToWordPrintReportSettings.parmSaveToArchive(false);
            exportToWordPrintReportSettings.parmSuppressSuccessMsg(true);
            exportToWordPrintReportSettings.parmPreviewBeforePrint(false);
            exportToWordPrintReportSettings.parmPrintedFrom(DocReportPrintedFrom::DocentricViewer);
            
            // Create the Memory print destination settings.
            DocPrintDestSettingsMemory memoryPds = new DocPrintDestSettingsMemory();
            memoryPds.parmOutputFileFormatSrs(7);  // SRSReportFileFormat::Word
            memoryPds.parmUseSsrsBuiltInDesign(true);
            
            // Print the report in Word output format to the Memory print destination.
            printSsrsInWordToMemoryExecutionInfo = DocOutputManager::printReportToMemory(exportToWordPrintReportSettings, memoryPds);
        }
        catch
        {
            // Get all error messages from the infolog.
            printSsrsInWordToMemoryErrorMsg = DocGlobalHelper::getInfoLogMessages(startInfoLogLine + 1);

            // Clear the infolog from the error messages ocurred during emailing the current email message.
            infolog.clear(startInfoLogLine);

            // Create the ExecutionInfo object.
            printSsrsInWordToMemoryExecutionInfo = new DocPrintReportToMemoryExecutionInfo();
            printSsrsInWordToMemoryExecutionInfo.parmReportDelivered(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWordPrintedInMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send the report in Word output format for downloading in the browser.
    /// </summary>
    public void handleWordPrintedInMemory()
    {
        DocGlobalHelper::assert(this.isSsrsPrintedToWordInMemory());

        if (!printSsrsInWordToMemoryExecutionInfo.parmReportDelivered())
        {
            // Inform user about the error occurred during exporting to Word.
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:ExportToWordFailedError", printSsrsInWordToMemoryErrorMsg));
        }

        // Send the report in Word output format for downloading in the browser.
        str outputFileName = this.getReportOutputFilename() + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtDoc;
        DocFileMngHelper::sendFileToUser(printSsrsInWordToMemoryExecutionInfo.getReportContentAsMemoryStream(), outputFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToExcel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the report to Excel.
    /// </summary>
    public void exportToExcel()
    {
        if (printReportSettings == null)
        {
            DocGlobalHelper::handleException(funcName(), 'Export to Excel can be invoked only if the form has been open with args().parmObject() containing a DocPrintReportSettings object instance');
        }

        if (!printReportSettings.printSrsOriginalDesign())
        {
            DocGlobalHelper::handleError("@DocentricAX3:ExportToExcelNotSupported", true, '', true);
        }

        //-- If SSRS report was already printed to Memory (successfully or unsuccessfully),
        // send it for downloading in browser or inform the user about the error.
        if (this.isSsrsPrintedToExcelInMemory())
        {
            this.handleExcelPrintedInMemory();
            return;
        }

        //-- Perform Export to Excel.
        // Create the report printing settings.
        DocPrintReportSettings exportToExcelPrintReportSettings = 
            DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(printReportSettings);
        exportToExcelPrintReportSettings.parmPrintDestination(DocPrintDestination::File);     // Change to File.
        exportToExcelPrintReportSettings.parmSaveToArchive(false);
        exportToExcelPrintReportSettings.parmSuppressSuccessMsg(true);
        exportToExcelPrintReportSettings.parmPreviewBeforePrint(false);
        exportToExcelPrintReportSettings.parmPrintedFrom(DocReportPrintedFrom::DocentricViewer);

        // Create the File print destination settings.
        str outputFileName = this.getReportOutputFilename();
        DocPrintDestSettingsFile filePds = new DocPrintDestSettingsFile();
        filePds.parmOutputFilename(outputFileName + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtXlsx);
        filePds.parmOutputFileFormatSrs(SRSReportFileFormat::Excel);
        filePds.parmUseSsrsBuiltInDesign(true);
        filePds.parmSendOutputFileToUser(true);
        
        // Print the report in Excel output format to the File print destination.
        DocOutputManager::printReportToFile(exportToExcelPrintReportSettings, filePds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToExcelInMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the report to Excel memory stream.
    /// </summary>
    public void exportToExcelInMemory()
    {
        // Store the current info log line.
        int startInfoLogLine = infologLine();

        // Print SSRS report in Excel output format to Memory.
        try
        {
            // Create the report printing settings.
            DocPrintReportSettings exportToExcelPrintReportSettings =
                DocPrintReportSettings::constructWithSameArchiveAndSrsReportContracts(printReportSettings);
            exportToExcelPrintReportSettings.parmPrintDestination(DocPrintDestination::Memory);     // Change to Memory.
            exportToExcelPrintReportSettings.parmSaveToArchive(false);
            exportToExcelPrintReportSettings.parmSuppressSuccessMsg(false);
            exportToExcelPrintReportSettings.parmPreviewBeforePrint(false);
            exportToExcelPrintReportSettings.parmPrintedFrom(DocReportPrintedFrom::DocentricViewer);
            
            // Create the Memory print destination settings.
            DocPrintDestSettingsMemory memoryPds = new DocPrintDestSettingsMemory();
            memoryPds.parmOutputFileFormatSrs(SRSReportFileFormat::Excel);
            memoryPds.parmUseSsrsBuiltInDesign(true);
            
            // Print the report in Excel output format to the Memory print destination.
            printSsrsInExcelToMemoryExecutionInfo = DocOutputManager::printReportToMemory(exportToExcelPrintReportSettings, memoryPds);
        }
        catch
        {
            // Get all error messages from the infolog.
            printSsrsInExcelToMemoryErrorMsg = DocGlobalHelper::getInfoLogMessages(startInfoLogLine + 1);

            // Clear the infolog from the error messages ocurred during emailing the current email message.
            infolog.clear(startInfoLogLine);

            // Create the ExecutionInfo object.
            printSsrsInExcelToMemoryExecutionInfo = new DocPrintReportToMemoryExecutionInfo();
            printSsrsInExcelToMemoryExecutionInfo.parmReportDelivered(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleExcelPrintedInMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Send the report in Excel output format for downloading in the browser.
    /// </summary>
    public void handleExcelPrintedInMemory()
    {
        DocGlobalHelper::assert(this.isSsrsPrintedToExcelInMemory());

        if (!printSsrsInExcelToMemoryExecutionInfo.parmReportDelivered())
        {
            // Inform user about the error occurred during exporting to Excel.
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX3:ExportToExcelFailedError", printSsrsInExcelToMemoryErrorMsg));
        }

        // Send the report in Excel output format for downloading in the browser.
        str outputFileName = this.getReportOutputFilename() + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtXlsx;
        DocFileMngHelper::sendFileToUser(printSsrsInExcelToMemoryExecutionInfo.getReportContentAsMemoryStream(), outputFileName);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>continueReportPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flag indicating if the report should continue to print. 
    /// </summary>
    /// <returns>True/False</returns>
    public boolean continueReportPrinting()
    {
        return previewMode_continueReportPrinting;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ContinuePrinting</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            previewMode_continueReportPrinting = true;
            element.closeOk();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelPrinting</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            previewMode_continueReportPrinting = false;
            element.closeOk();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DownloadEmailMessage</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (reportViewerParams == null || 
                reportViewerParams.parmEmailPrintDestSettings() == null ||
                printReportSettings.parmPrintedReport() == null)
            {
                return;
            }

            try
            {
                // Encrypt and sign the generated report if needed.
                container documentContainer = DocReportPdfSecurityManager::encryptAndSignDocument(printReportSettings, DocPdfEncryptionConditionEnum::Email);

                DocPrintDestSettingsEmail emailPrintDestSettings = reportViewerParams.parmEmailPrintDestSettings();
                str fileName = (emailPrintDestSettings.parmEmailSubject() ? DocFileMngHelper::replaceInvalidCharsForFileName(emailPrintDestSettings.parmEmailSubject()) : 'email') + '.eml';
                using (MailMessage mailMsg = DocEmailMngHelper::createEmailMessage(
                                                                emailPrintDestSettings.parmEmailFrom(),
                                                                emailPrintDestSettings.parmEmailFromDisplayName(),
                                                                emailPrintDestSettings.parmEmailTo(),
                                                                emailPrintDestSettings.parmEmailCc(),
                                                                emailPrintDestSettings.parmEmailBcc(),
                                                                emailPrintDestSettings.parmEmailSubject(),
                                                                emailPrintDestSettings.parmEmailBody(),
                                                                emailPrintDestSettings.parmIsHtmlBody(),
                                                                emailPrintDestSettings.getEmailPriority(),
                                                                emailPrintDestSettings.parmEmailAttachmentName(),
                                                                documentContainer,
                                                                emailPrintDestSettings.parmEmailAdditionalAttachments(),
                                                                emailPrintDestSettings.parmEmailImageMap(),
                                                                emailPrintDestSettings.parmEmailReplyTo(),
                                                                emailPrintDestSettings.parmEmailBounceTo(),
                                                                false, // don't create a message that can be sent from MS Outlook.
                                                                emailPrintDestSettings.parmReadReceiptAddress(),
                                                                emailPrintDestSettings.parmDeliveryReceiptCondition()))
                {
                    using (MemoryStream emlStream = MailHelper::ConvertMailMessageToEml(mailMsg))
                    {
                        DocFileMngHelper::sendFileToUser(emlStream, fileName);
                    }
                }
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrException(funcName(), "@DocentricAX2:ErrorDownloadingEML");
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX2:ErrorDownloadingEML");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UseNetworkPrinter</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the arguments and call the appropriate action menu item to print to network printer.
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            args.caller(element);
            args.parmObject(reportViewerParams);

            new MenuFunction(menuItemActionStr(DocUseNetworkPrinter), MenuItemType::Action).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UseDefaultPrinter</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the arguments and call the appropriate action menu item to print to default printer.
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            args.caller(element);
            args.parmObject(reportViewerParams);

            new MenuFunction(menuItemActionStr(DocUseDefaultPrinter), MenuItemType::Action).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<AllowUserSetup xmlns="">No</AllowUserSetup>
		<Caption xmlns="">@DocentricAX:ReportCaption</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ViewerActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PreviewModeButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ContinuePrinting</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@DocentricAX2:ContinuePrintint</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CancelPrinting</Name>
								<HelpText>@DocentricAX2:CancelPrintingHelp</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@DocentricAX2:CancelPrinting</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>DownloadEmailMessage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX2:DownloadMessageDesc</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@DocentricAX2:DownloadEmail</Text>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>UseNetworkPrinterGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>PrintMenu</Name>
								<HelpText>@DocentricAX4:PrintDropdownHelp</HelpText>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>UseNetworkPrinter</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>DocUseNetworkPrinter</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>UseDefaultPrinter</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>DocUseDefaultPrinter</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
								</Controls>
								<NormalImage>Print</NormalImage>
								<Text>@DocentricAX4:PrintDropdown</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>No</AllowUserSetup>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ViewerGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>DocentricReportViewerControlInstance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>DocentricReportViewerControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmFileName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmUseBrowserViewer</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmEnableExportToWord</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmEnableExportToExcel</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmUserLanguage</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmEnableNativePdfPrinting</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>True</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>