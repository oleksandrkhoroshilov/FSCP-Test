<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportUpdateTemplateStorage</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocReportUpdateTemplateStorage extends FormRun
{
    FormDataSource  callerReportFormDataSource;
    container selectedReportIdContainer = conNull();
    container selectedReportRecIdContainer = conNull();
    Set selectedReportIdSet = new Set(Types::String);
    
}
]]></Source>
			</Method>
			<Method>
				<Name>changeStorageTypeToAzureBlobStorage</Name>
				<Source><![CDATA[
    public boolean changeStorageTypeToAzureBlobStorage()
    {
        return UpdateStorageSettingsActions.selection() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStorageTypeToSharePoint</Name>
				<Source><![CDATA[
    public boolean changeStorageTypeToSharePoint()
    {
        return UpdateStorageSettingsActions.selection() == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStorageTypeToFileSystem</Name>
				<Source><![CDATA[
    public boolean changeStorageTypeToFileSystem()
    {
        return UpdateStorageSettingsActions.selection() == 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadSystemTemplates</Name>
				<Source><![CDATA[
    public boolean reloadSystemTemplates()
    {
        return UpdateStorageSettingsActions.selection() == 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachTemplateFiles</Name>
				<Source><![CDATA[
    public boolean detachTemplateFiles()
    {
        return UpdateStorageSettingsActions.selection() == 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplateFilesOnAzureBlobStorage</Name>
				<Source><![CDATA[
    public boolean deleteTemplateFilesOnAzureBlobStorage()
    {
        return UpdateStorageSettingsActions.selection() == 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplateFilesOnFileSystem</Name>
				<Source><![CDATA[
    public boolean deleteTemplateFilesOnFileSystem()
    {
        return UpdateStorageSettingsActions.selection() == 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedReports</Name>
				<Source><![CDATA[
    private void getSelectedReports()
    {
        DocReportTable      reportTable;
    
        for (reportTable = callerReportFormDataSource.getFirst(true) ? callerReportFormDataSource.getFirst(true) : callerReportFormDataSource.cursor();
             reportTable;
             reportTable = callerReportFormDataSource.getNext())
        {
            selectedReportRecIdContainer = selectedReportRecIdContainer + [reportTable.RecId];
            selectedReportIdContainer = selectedReportIdContainer + [reportTable.ReportId];
            selectedReportIdSet.add(reportTable.ReportId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        if (element.changeStorageTypeToAzureBlobStorage())
        {
            str blobContainerName = ContainerName.text();

            if (blobContainerName == '')
            {
                return false;
            }

            if (!DocAzureBlobHelper::isContainerNameValid(blobContainerName))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:InvalidContainerName", blobContainerName));
                return false;
            }
        }
        else if (element.changeStorageTypeToFileSystem())
        {
            str folderPath = FolderName.text();

            if (folderPath == '')
            {
                return false;
            }

            // Validate UNC file path.
            if (!DocFileMngHelper::isUncFilePath(folderPath))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DefaultFolderIsNotUncPath", folderPath));
                return false;
            }
            // Validate file path characters.
            if (!DocFileMngHelper::isValidFilePath(folderPath))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DefaultFolderInvalidChars", folderPath));
                return false;
            }
        }
        else if (element.changeStorageTypeToSharePoint())
        {
            str spSiteUrl = SharePointSiteUrl.text();
            str spFolderPath = SharePointFolderPath.text();

            if (spSiteUrl == '' || spFolderPath == '')
            {
                return false;
            }

            // -- Validate site URL.
            if (!DocGlobalHelper::validateURL(spSiteUrl))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointSiteUrlInvalid", spSiteUrl));
                return false;
            }
            
            // -- Validate folder path.
            // Folder path should not start with '/'.
            if (strStartsWith(spFolderPath, DocConstantFile::SharePointFolderPathDelimiter))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointFolderPathInvalidStart", spFolderPath));
                return false;
            }
            if (!DocSharePointHelperV3::isValidSharePointFolderPath(spFolderPath))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointFolderPathInvalid", spFolderPath));
                return false;
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        int reportUpdatedCount = 0;
        element.getSelectedReports();

        if (selectedReportIdContainer == conNull())
        {
            DocGlobalHelper::handleError("@DocentricAX:NoReportSelected");
            return;
        }

        if (!this.validate())
        {
            return;
        }

        try
        {
            if (element.changeStorageTypeToAzureBlobStorage())
            {
                if (!Box::confirm("@DocentricAX:UpdateToAzureStorageSettingsConfirm"))
                {
                    return;
                }

                reportUpdatedCount = DocReportTable::updateReportTemplateStorageSettings(
                        selectedReportIdContainer, DocTemplateStorageType::AzureBlobStorage, ContainerName.text(), '', '', '');
            }
            else if (element.changeStorageTypeToSharePoint())
            {
                if (!Box::confirm("@DocentricAX:UpdateToSharePointStorageSettingsConfirm"))
                {
                    return;
                }

                reportUpdatedCount = DocReportTable::updateReportTemplateStorageSettings(
                    selectedReportIdContainer, DocTemplateStorageType::SharePoint, '', SharePointSiteUrl.text(), SharePointFolderPath.text(), '');
            }
            else if (element.changeStorageTypeToFileSystem())
            {
                if (!Box::confirm("@DocentricAX:UpdateToFSStorageSettingsConfirm"))
                {
                    return;
                }

                reportUpdatedCount = DocReportTable::updateReportTemplateStorageSettings(
                        selectedReportIdContainer, DocTemplateStorageType::FileSystem, '', '', '', FolderName.text());
            }
            else if (element.detachTemplateFiles())
            {
                if (!Box::confirm("@DocentricAX:DetachTemplateFilesConfirm"))
                {
                    return;
                }

                reportUpdatedCount = DocReportingSetupHelper::detachTemplateFiles(selectedReportIdContainer);
            }
            else if (element.reloadSystemTemplates())
            {
                if (!Box::confirm("@DocentricAX:ReloadSystemTemplatesConfirmation"))
                {
                    Box::info("@DocentricAX:NoteReloadSystemTemplates");
                    return;
                }

                reportUpdatedCount = conPeek(DocReportingSetupHelper::reloadSystemTemplatesForReportsV2(selectedReportIdSet), 1);
            }
            else if (element.deleteTemplateFilesOnAzureBlobStorage())
            {
                if (!Box::confirm("@DocentricAX:DeleteTemplateFilesOnAzureConfirm"))
                {
                    return;
                }

                reportUpdatedCount = DocReportingSetupHelper::deleteTemplateFilesOnAzureBlobStorage(selectedReportIdContainer);
            }
            else if (element.deleteTemplateFilesOnFileSystem())
            {
                if (!Box::confirm("@DocentricAX:DeleteTemplateFilesOnFSConfirm"))
                {
                    return;
                }

                reportUpdatedCount = DocReportingSetupHelper::deleteTemplateFilesOnFileSystem(selectedReportIdContainer);
            }

            super();

            DocGlobalHelper::handleInfo(strFmt("@DocentricAX:UpdateActionSuccess", reportUpdatedCount));

            if (reportUpdatedCount > 0)
            {
                // Recheck the template data source type of the selected reports, if applicable.
                DocReportingSetupHelper::recheckTemplateDataSourceType_forReports(selectedReportRecIdContainer, false);

                // Refresh the data source of the caller form.
                if (callerReportFormDataSource)
                {
                    callerReportFormDataSource.research(true);
                }
            }
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX:UpdateActionFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (this.args() != null && this.args().caller() != null)
        {
            FormRun callerFormRun = this.args().caller();
            if (callerFormRun != null)
            {
                callerReportFormDataSource = callerFormRun.dataSource(1);
                if (callerReportFormDataSource != null &&
                    callerReportFormDataSource.table() != tableNum(DocReportTable))
                {
                    callerReportFormDataSource = null;
                }
            }
        }

        UpdateStorageSettingsActions.selectionChange();
    
        DocParameters reportParams = DocParameters::find();
    
        ContainerName.text(reportParams.ReportTemplateStorageAzureContainer);
        SharePointSiteUrl.text(reportParams.ReportTemplateStorageSharePointSiteUrl);
        SharePointFolderPath.text(reportParams.ReportTemplateStorageSharePointFolderPath);
        FolderName.text(reportParams.ReportTemplateStorageFileSystemFolderPath);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>UpdateStorageSettingsActions</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;
    
            ret = super();

            AzureContainerTarget.visible(element.changeStorageTypeToAzureBlobStorage());
            SharePointTarget.visible(element.changeStorageTypeToSharePoint());
            FileSytemTarget.visible(element.changeStorageTypeToFileSystem());
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SharePointEditButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            str hostname = DocSharePointHelperV3::getSharePointHostNameFromUrl(SharePointSiteUrl.text());
            if (!hostname)
            {
                hostname = DocSharePointHelperV3::getDefaultServer();
            }
            if (hostname)
            {
                DocSharePointFolderSelection spFolderSelection = DocSharePointFolderSelection::construct(
                                                                                                    hostname,
                                                                                                    SharePointSiteUrl.text(),
                                                                                                    SharePointFolderPath.text());
                if (spFolderSelection && spFolderSelection.promptUser())
                {
                    SharePointSiteUrl.text(spFolderSelection.parmSelectedSite().Url);
                    SharePointFolderPath.text(spFolderSelection.getRelativeFolderPath());
                }
            }
            else
            {
                MenuFunction mf = new MenuFunction(menuItemDisplayStr(DocuParameters), MenuItemType::Display);
                DocGlobalHelper::handleError(strfmt("@ApplicationFoundation:DocuType_SharePointNotConfigured", mf.label()), false, funcName());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NavigateToSpSiteUrl</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (SharePointSiteUrl.text())
            {
                Browser b = new Browser();

                str sharePointUrlToNavigate = DocFileMngHelper::addUrlDelimiter(SharePointSiteUrl.text()) + SharePointFolderPath.text();
                
                b.navigate(sharePointUrlToNavigate, true);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@DocentricAX:UpdateTemplateStorageSettings</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>Instructions</Name>
				<ElementPosition>1073741823</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<DisplayHeight>2</DisplayHeight>
				<DisplayHeightMode>Fixed</DisplayHeightMode>
				<DisplayLength>80</DisplayLength>
				<DisplayLengthMode>Fixed</DisplayLengthMode>
				<Text>@DocentricAX:UpdateTemplateStorageInstructions</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GeneralInstructionsGroup</Name>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>GeneralInstructions</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>StaticText</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@DocentricAX:ImportInstructions</Text>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogHeader</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>UpdateStorageSettingsActions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>DocTemplateUpdateStorageSettingsActions</EnumType>
						<Items />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SharePointTarget</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SharePointSiteUrl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocSharePointSiteUrl</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SharePointFolderPath</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocSharePointFolderPath</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SharePointEditButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>Edit</NormalImage>
								<Text>@DocentricAX2:EditButton</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>NavigateToSpSiteUrl</Name>
								<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>Internet</NormalImage>
								<Text>@DocentricAX2:OpenButton</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AzureContainerTarget</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ContainerName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocAzureContainerName</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FileSytemTarget</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FolderName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:TemplateStorageFS</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocFileSystemFolderPath</ExtendedDataType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<HideIfEmpty>No</HideIfEmpty>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>