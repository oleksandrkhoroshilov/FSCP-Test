<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocOutgoingEmailMessageUpdate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocOutgoingEmailMessageUpdate extends FormRun
{
    str emailRecipientVar, emailCcVar, emailBccVar;
    str senderVar, senderNameVar, emailReplyToVar, emailBounceToVar;
    str emailReadReceiptVar;
    DocEmailDeliveryReceiptCondition deliveryReceiptConditionVar;
    str subjectVar;
    DocTextUpdateMode textUpdateModeVar;
    eMailPriority priorityVar;
    str updateFields;
    int cntSelectedMsgs;
 

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        emailRecipientVar,
        emailCcVar,
        emailBccVar,
        senderVar,
        senderNameVar,
        emailReplyToVar,
        emailBounceToVar,
        emailReadReceiptVar,
        deliveryReceiptConditionVar,
        subjectVar,
        textUpdateModeVar,
        priorityVar
    #endmacro
 
    
}
]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    /* SysLastValue framework's needed methods */
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueDesignName()
    {
        // Unique key: (user, company, type, elementName, designName)
        // We don't have such a need to save different sets of the form data.
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    private DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    private void initParmDefault()
    {
        // Don't need to initialize any of the controls.
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.getControlValuesForSysLastValues();

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
        xSysLastValue::getLast(this);
        element.setControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlValuesForSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the control values for SysLastValues.
    /// </summary>
    private void getControlValuesForSysLastValues()
    {
        emailRecipientVar = EmailRecipient.text();
        emailCcVar = EmailCc.text();
        emailBccVar = EmailBcc.text();
        senderVar = Sender.text();
        senderNameVar = SenderName.text();
        emailReplyToVar = EmailReplyTo.text();
        emailBounceToVar = EmailBounceTo.text();
        emailReadReceiptVar = EmailReadReceipt.text();
        deliveryReceiptConditionVar = DeliveryReceiptCondition.selection();
        subjectVar = Subject.text();
        textUpdateModeVar = TextUpdateMode.selection();
        priorityVar = Priority.selection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValuesFromSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the control values from SysLastValues.
    /// </summary>
    private void setControlValuesFromSysLastValues()
    {
        EmailRecipient.text(emailRecipientVar);
        EmailCc.text(emailCcVar);
        EmailBcc.text(emailBccVar);
        Sender.text(senderVar);
        SenderName.text(senderNameVar);
        EmailReplyTo.text(emailReplyToVar);
        EmailBounceTo.text(emailBounceToVar);
        EmailReadReceipt.text(emailReadReceiptVar);
        DeliveryReceiptCondition.selection(deliveryReceiptConditionVar);
        Subject.text(subjectVar);
        TextUpdateMode.selection(textUpdateModeVar);
        Priority.selection(priorityVar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the control values.
    /// </summary>
    private void resetControlValues()
    {
        EmailRecipient.text('');
        EmailCc.text('');
        EmailBcc.text('');
        Sender.text('');
        SenderName.text('');
        EmailReplyTo.text('');
        EmailBounceTo.text('');
        EmailReadReceipt.text('');
        DeliveryReceiptCondition.selection(0);
        Subject.text('');
        TextUpdateMode.selection(0);
        Priority.selection(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the control properties.
    /// </summary>
    private void setControls()
    {
        // Contains the list of selected fields to be updated
        updateFields = '';

        SecondaryInstructionText.text(strFmt("@DocentricAX3:EmailMessageUpdateStaticText", cntSelectedMsgs));

        EmailRecipient.allowEdit(EmailRecipientUpdate.value());
        EmailRecipient.mandatory(EmailRecipientUpdate.value());
        updateFields += EmailRecipientUpdate.value() ? EmailRecipient.labelText() + ', ' : '';

        EmailCc.allowEdit(EmailCcUpdate.value());
        updateFields += EmailCcUpdate.value() ? EmailCc.labelText() + ', ' : '';

        EmailBcc.allowEdit(EmailBccUpdate.value());
        updateFields += EmailBccUpdate.value() ? EmailBcc.labelText() + ', ' : '';

        Sender.allowEdit(SenderUpdate.value());
        Sender.mandatory(SenderUpdate.value());
        updateFields += SenderUpdate.value() ? Sender.labelText() + ', ' : '';

        SenderName.allowEdit(SenderNameUpdate.value());
        updateFields += SenderNameUpdate.value() ? SenderName.labelText() + ', ' : '';

        EmailReplyTo.allowEdit(EmailReplyToUpdate.value());
        updateFields += EmailReplyToUpdate.value() ? EmailReplyTo.labelText() + ', ' : '';

        EmailBounceTo.allowEdit(EmailBounceToUpdate.value());
        updateFields += EmailBounceToUpdate.value() ? EmailBounceTo.labelText() + ', ' : '';

        EmailReadReceipt.allowEdit(EmailReadReceiptUpdate.value());
        updateFields += EmailReadReceiptUpdate.value() ? EmailReadReceipt.labelText() + ', ' : '';

        DeliveryReceiptCondition.allowEdit(DeliveryReceiptConditionUpdate.value());
        updateFields += DeliveryReceiptConditionUpdate.value() ? DeliveryReceiptCondition.labelText() + ', ' : '';

        Subject.allowEdit(SubjectUpdate.value());
        TextUpdateMode.allowEdit(SubjectUpdate.value());
        updateFields += SubjectUpdate.value() ? Subject.labelText() + ', ' : '';

        Priority.allowEdit(PriorityUpdate.value());
        updateFields += PriorityUpdate.value() ? Priority.labelText() + ', ' : '';

        updateFields = updateFields ? subStr(updateFields, 1, strLen(updateFields) - 2) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the control values.
    /// </summary>
    /// <returns>true/false</returns>
    private boolean validateControlValues()
    {
        boolean ret = true;

        if (EmailRecipientUpdate.value())
        {
            if (!EmailRecipient.text())
            {
                ret = checkFailed(strFmt("@DocentricAX3:EmailMessageUpdateFieldNotSpecified", EmailRecipient.labelText())) && ret;
            }
            else if (!DocGlobalHelper::validateEmailList(EmailRecipient.text()))
            {
                ret = checkFailed(strFmt("@DocentricAX3:EmailMessageUpdateEmailAddressesNotValid", EmailRecipient.labelText(), EmailRecipient.text())) && ret;
            }
        }

        if (EmailCcUpdate.value() && EmailCc.text())
        {
            if (!DocGlobalHelper::validateEmailList(EmailCc.text()))
            {
                ret = checkFailed(strFmt("@DocentricAX:CcEmailAddressesNotValid", EmailCc.text())) && ret;
            }
        }

        if (EmailBccUpdate.value() && EmailBcc.text())
        {
            if (!DocGlobalHelper::validateEmailList(EmailBcc.text()))
            {
                ret = checkFailed(strFmt("@DocentricAX:BccEmailAddressesNotValid", EmailBcc.text())) && ret;
            }
        }

        if (SenderUpdate.value())
        {
            if (!Sender.text())
            {
                ret = checkFailed(strFmt("@DocentricAX3:EmailMessageUpdateFieldNotSpecified", Sender.labelText())) && ret;
            }
            else if (!DocGlobalHelper::validateEmail(Sender.text()))
            {
                ret = checkFailed(strFmt("@DocentricAX3:EmailMessageUpdateEmailAddressNotValid", Sender.labelText(), Sender.text())) && ret;
            }
        }

        if (EmailReplyToUpdate.value() && EmailReplyTo.text())
        {
            if (!DocGlobalHelper::validateEmailList(EmailReplyTo.text()))
            {
                ret = checkFailed(strFmt("@DocentricAX:ReplyToEmailAddressesNotValid", EmailReplyTo.text())) && ret;
            }
        }

        if (EmailBounceToUpdate.value() && EmailBounceTo.text())
        {
            if (!DocGlobalHelper::validateEmail(EmailBounceTo.text()))
            {
                ret = checkFailed(strFmt("@DocentricAX:BounceToEmailAddressesNotValid", EmailBounceTo.text())) && ret;
            }
        }

        if (EmailReadReceiptUpdate.value() && EmailReadReceipt.text())
        {
            if (!DocGlobalHelper::validateEmail(EmailReadReceipt.text()))
            {
                ret = checkFailed(strFmt("@DocentricAX2:ReadReceiptEmailAddressNotValid", EmailReadReceipt.text())) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNCntSelectedMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of the selected messages to be updated.
    /// Only messages with the status Unsent, SendAttempted and Failed will be updated.
    /// </summary>
    /// <returns>Number of the selected messages</returns>
    private int getNCntSelectedMsgs()
    {
        // Get the number of selected records to be updated
        MultiSelectionContext multiSelectionContext = element.args().multiSelectionContext();
        SysOutgoingEmailTable sysOutgoingEmailTable;
        if (multiSelectionContext)
        {
            sysOutgoingEmailTable = multiSelectionContext.getFirst() as SysOutgoingEmailTable;
        }
        if (!sysOutgoingEmailTable)
        {
            sysOutgoingEmailTable = element.args().record() as SysOutgoingEmailTable;
        }

        int cnt = 0;
        while (sysOutgoingEmailTable)
        {
            // Check the status of the selected messages to be updated
            if (sysOutgoingEmailTable.Status == SysEmailStatus::Unsent || sysOutgoingEmailTable.Status == SysEmailStatus::SendAttempted || sysOutgoingEmailTable.Status == SysEmailStatus::Failed)
            {
                cnt++;
            }
            if (!multiSelectionContext)
            {
                break;
            }
            sysOutgoingEmailTable = multiSelectionContext.getNext();
        }

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the selected messages with the new values for the selected fields. 
    /// Only messages with the status Unsent, SendAttempted and Failed are updated.
    /// </summary>
    private void updateMessages()
    {
        // Get the selected messages from the caller form
        MultiSelectionContext multiSelectionContext = element.args().multiSelectionContext();
        SysOutgoingEmailTable sysOutgoingEmailTable;
        int cntUpdatedMsgs, cntFailedMsgs;

        if (multiSelectionContext)
        {
            sysOutgoingEmailTable = multiSelectionContext.getFirst() as SysOutgoingEmailTable;
        }
        if (!sysOutgoingEmailTable)
        {
            sysOutgoingEmailTable = element.args().record() as SysOutgoingEmailTable;
        }

        while (sysOutgoingEmailTable)
        {
            // Check the status of the selected messages to be updated - only messages in the status Waiting (without Executing), Failed or Expired can be updated.
            if (sysOutgoingEmailTable.Status == SysEmailStatus::Unsent || sysOutgoingEmailTable.Status == SysEmailStatus::SendAttempted || 
                sysOutgoingEmailTable.Status == SysEmailStatus::Failed ||
                sysOutgoingEmailTable.Status == SysEmailStatus::Expired)
            {
                sysOutgoingEmailTable.selectForUpdate(true);

                // Update fields with the control values
                try
                {
                    ttsbegin;

                    if (EmailRecipientUpdate.value())
                    {
                        sysOutgoingEmailTable.Recipient = EmailRecipient.text();
                    }
                    if (EmailCcUpdate.value())
                    {
                        sysOutgoingEmailTable.EmailCc_DC = EmailCc.text();
                    }
                    if (EmailBccUpdate.value())
                    {
                        sysOutgoingEmailTable.EmailBcc_DC = EmailBcc.text();
                    }
                    if (SenderUpdate.value())
                    {
                        sysOutgoingEmailTable.Sender = Sender.text();
                    }
                    if (SenderNameUpdate.value())
                    {
                        sysOutgoingEmailTable.SenderName = SenderName.text();
                    }
                    if (EmailReplyToUpdate.value())
                    {
                        sysOutgoingEmailTable.EmailReplyTo_DC = EmailReplyTo.text();
                    }
                    if (EmailBounceToUpdate.value())
                    {
                        sysOutgoingEmailTable.EmailBounceTo_DC = EmailBounceTo.text();
                    }
                    if (EmailReadReceiptUpdate.value())
                    {
                        sysOutgoingEmailTable.EmailReadReceiptAddress_DC = EmailReadReceipt.text();
                    }
                    if (DeliveryReceiptConditionUpdate.value())
                    {
                        sysOutgoingEmailTable.EmailDeliveryReceiptCondition_DC = DeliveryReceiptCondition.selection();
                    }
                    if (SubjectUpdate.value())
                    {
                        switch (TextUpdateMode.selection())
                        {
                            case DocTextUpdateMode::AppendToBeginning:
                                sysOutgoingEmailTable.Subject = Subject.text() + sysOutgoingEmailTable.Subject;
                                break;
                            case DocTextUpdateMode::AppendToEnd:
                                sysOutgoingEmailTable.Subject = sysOutgoingEmailTable.Subject + Subject.text();
                                break;
                            case DocTextUpdateMode::Replace:
                                sysOutgoingEmailTable.Subject = Subject.text();
                                break;
                        }
                    }
                    if (PriorityUpdate.value())
                    {
                        sysOutgoingEmailTable.Priority = Priority.selection();
                    }

                    sysOutgoingEmailTable.update();
                    cntUpdatedMsgs++;

                    ttscommit;

                }
                catch
                {
                    cntFailedMsgs++;
                }
            }

            if (!multiSelectionContext)
            {
                break;
            }
            sysOutgoingEmailTable = multiSelectionContext.getNext();
        }

        // Count of succesfully updated messages
        if (cntUpdatedMsgs)
        {
            info(strFmt("@DocentricAX3:EmailMessageUpdateSucceeded", updateFields, cntUpdatedMsgs, cntSelectedMsgs));

            // Refresh caller form datasource
            Common record = element.args().record();
            if (record)
            {
                FormDataSource formDataSource = FormDataUtil::getFormDataSource(record);
                if (formDataSource)
                {
                    formDataSource.research(true);
                }
            }
        }

        // Count of failed updated messages
        if (cntFailedMsgs)
        {
            error(strFmt("@DocentricAX3:EmailMessageUpdateFailed", updateFields, cntFailedMsgs, cntSelectedMsgs));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        if (!updateFields)
        {
            warning("@DocentricAX3:EmailMessageUpdateNoFieldsSelected");
            return;
        }

        str msg = strFmt("@DocentricAX3:EmailMessageUpdateWarning", updateFields, cntSelectedMsgs);
        if (Box::yesNo(msg, DialogButton::No, "@DocentricAX3:EmailMessageUpdate") == DialogButton::Yes)
        {
            if (element.validateControlValues())
            {
                element.updateMessages();
                xSysLastValue::saveLast(this);
                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        // Get number of selected records to be updated
        cntSelectedMsgs = element.getNCntSelectedMsgs();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SetLastValuesButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.setControlValuesFromSysLastValues();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ResetButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            element.resetControlValues();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailRecipientUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailRecipient</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            emailRecipient.text(DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailRecipient.text()));
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailCcUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailCc</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            EmailCc.text(DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailCc.text()));
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailBccUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailBcc</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            EmailBcc.text(DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailBcc.text()));
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SenderUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SenderNameUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailReplyToUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailReplyTo</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            EmailReplyTo.text(DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailReplyTo.text()));
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailBounceToUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailBounceTo</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            EmailBounceTo.text(DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailBounceTo.text()));
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailReadReceiptUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeliveryReceiptConditionUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubjectUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PriorityUpdate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DocentricAX3:EmailMessageUpdateTitle</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SecondaryInstructionText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@DocentricAX3:EmailMessageUpdateStaticText</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPaneControl</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroupControl</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SetLastValuesButton</Name>
								<HelpText>@DocentricAX3:EmailMessageUpdateSetLastValuesButtonHelp</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@DocentricAX3:EmailMessageUpdateSetLastValuesButton</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ResetButton</Name>
								<HelpText>@DocentricAX3:EmailMessageUpdateResetButtonHelp</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@DocentricAX3:EmailMessageUpdateResetButton</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TabControl</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>RecipientsTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EmailRecipientGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EmailRecipientUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EmailRecipient</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>SysEmailRecipients</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EmailCcGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EmailCcUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EmailCc</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocEmailCc</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EmailBccGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EmailBccUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EmailBcc</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocEmailBcc</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX3:EmailMessageUpdateRecipientsTabPage</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SenderTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SenderGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SenderUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Sender</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>Email</ExtendedDataType>
										<Label>@DocentricAX:Sender</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SenderNameGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SenderNameUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SenderName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>Name</ExtendedDataType>
										<Label>@DocentricAX:SenderDisplayName</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EmailReplyToGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EmailReplyToUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EmailReplyTo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocEmailReplyToAddress</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EmailBounceToGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EmailBounceToUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EmailBounceTo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocEmailBounceToAddress</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX3:EmailMessageUpdateSenderTabPage</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ReadAndDeliveryReceiptsTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EmailReadReceiptGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EmailReadReceiptUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EmailReadReceipt</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAX3:ReadReceiptHelp</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocEmailReadReceiptAddress</ExtendedDataType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DeliveryReceiptConditionGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>DeliveryReceiptConditionUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DeliveryReceiptCondition</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAX3:DeliveryReceiptHelp</HelpText>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>DocEmailDeliveryReceiptCondition</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX3:EmailMessageUpdateReadAndDeliveryReceiptsTabPage</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SubjectAndPriorityTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SubjectGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>SubjectUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Subject</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>SysEmailSubject</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TextUpdateMode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>DocTextUpdateMode</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PriorityGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PriorityUpdate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Width>100</Width>
										<WidthMode>Manual</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX3:EmailMessageUpdateUpdate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Priority</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>eMailPriority</EnumType>
										<Label>@DocentricAX:MailMessagePriority</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@DocentricAX3:EmailMessageUpdateSubjectAndPriorityTabPage</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>