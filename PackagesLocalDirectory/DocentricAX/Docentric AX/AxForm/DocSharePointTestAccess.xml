<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocSharePointTestAccess</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Docentric.AX.Storage.SharePoint.Common;

[Form]
public class DocSharePointTestAccess extends FormRun
{
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();

        // Set the dialog caption and instructions text
        str dialogCaption = '';
        str instructionsText = '';

        switch (element.args().menuItemName())
        {
            case menuItemDisplayStr(DocSharePointDefaultServerTestAccess):
                dialogCaption = "@DocentricAX4:SharePointTestAccessForDefaultSharePointServer";
                instructionsText = "@DocentricAX4:SharePointTestAccessInstructionsDefaultServer";
                break;
            case menuItemDisplayStr(DocSharePointURLTestAccess):
                dialogCaption = "@DocentricAX4:SharePointTestAccessForSharePointUrl";
                instructionsText = "@DocentricAX4:SharePointTestAccessInstructionsUrl";
                break;
            case menuItemDisplayStr(DocSharePointSelectedLocationTestAccess):
                dialogCaption = "@DocentricAX4:SharePointTestAccessForSelectedSharePointLocation";
                instructionsText = "@DocentricAX4:SharePointTestAccessInstructionsSelectedRecord";
                break;
            case menuItemDisplayStr(DocReportSharePointSettingsTestAccess):
                dialogCaption = "@DocentricAX4:ReportSharePointSettingsTestAccess";
                instructionsText = "@DocentricAX4:SharePointTestAccessInstructionsSelectedLibrary";
                break;

            default:
                DocGlobalHelper::handleException(strFmt('The form is open via an unexpected menu item (%1)', element.args().menuItemName()));
        }

        element.design().caption(dialogCaption);
        SharePointTestAccessInstructions.text(instructionsText + '\r\n\r\n');
        
        // On a form group SharePointTestAccessGroup, Fields and Field Groups pattern is applied and sets buttonDisplay property to ImageOnly
        // therefore, we have to change it back to Auto in order to show button caption text
        TestAccessButton.buttonDisplay(ButtonDisplay::Auto);
        TestAccessButton.extendedStyle('None');
        
        System.String spSiteUrl;

        switch (element.args().menuItemName())
        {
            case menuItemDisplayStr(DocSharePointDefaultServerTestAccess):
                spSiteUrl = DocSharePointHelperV3::getDefaultServer();
            
                // Add the URI scheme to the URL
                spSiteUrl = DocSPUrlHelper::GetSiteUrl(spSiteUrl, '');

                SharePointSiteUrl.text(spSiteUrl);
                SharePointFolderPath.text('');
                SharePointSiteURL.allowEdit(false);
                SharePointFolderPath.allowEdit(false);
                break;
        
            case menuItemDisplayStr(DocSharePointSelectedLocationTestAccess):
                if (element.args() == null || element.args().dataset() != tableNum(DocSharePointSecuritySettings) || !element.args().record())
                {
                    throw error('Form has to be called from the Fine-grained security form');
                }

                DocSharePointSecuritySettings spSecuritySettings = element.args().record() as DocSharePointSecuritySettings;

                // Combine the URL path and add the URI scheme
                spSiteUrl = DocSPUrlHelper::CombineUrlPath(spSecuritySettings.SharePointServer, spSecuritySettings.SharePointSite);
                spSiteUrl = DocSPUrlHelper::GetSiteUrl(spSiteUrl, '');

                SharePointSiteUrl.text(spSiteUrl);
                SharePointFolderPath.text(spSecuritySettings.SharePointDocumentLibrary);
                SharePointSiteURL.allowEdit(false);
                SharePointFolderPath.allowEdit(false);
                break;

            case menuItemDisplayStr(DocReportSharePointSettingsTestAccess):
                if (element.args() == null || element.args().dataset() != tableNum(DocReportSharePointSettings) || !element.args().record())
                {
                    throw error('Form has to be called from the SharePoint settings form');
                }

                DocReportSharePointSettings spSettings = element.args().record() as DocReportSharePointSettings;

                SharePointSiteUrl.text(spSettings.SharePointSiteUrl);
                SharePointFolderPath.text(spSettings.SharePointDocumentLibraryUrl);
                SharePointSiteURL.allowEdit(false);
                SharePointFolderPath.allowEdit(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeTestResultMessageBoxColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the background color of the test result message box.
    /// </summary>
    private void changeTestResultMessageBoxColor()
    {
        if (DocSharePointTestAccessResultTmp.RecId != 0 && DocSharePointTestAccessResultTmp.TestResult == NoYes::No)
        {
            // Set a red background color to the field if there is an error
            DocSharePointTestAccessResultTmp_TestResultMessage.colorScheme(FormColorScheme::RGB);
            DocSharePointTestAccessResultTmp_TestResultMessage.backgroundColor(0xFDE7E9);  // red color from infolog error
        }
        else
        {
            // Restore the background color to the default color (different for view and edit mode)
            DocSharePointTestAccessResultTmp_TestResultMessage.colorScheme(FormColorScheme::RGB);
            DocSharePointTestAccessResultTmp_TestResultMessage.backgroundColor(element.viewEditModeHelper().isInEditMode() ? 0xFAF9F8 : 0xFFFFFF);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testAccessToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests the access to SharePoint.
    /// </summary>
    private void testAccessToSharePoint()
    {
        try
        {
            // Delete the current result records
            delete_from DocSharePointTestAccessResultTmp;

            // Validate the SharePoint site URL
            if (!SharePointSiteUrl.validate())
            {
                return;
            }

            str spSiteUrl = SharePointSiteUrl.valueStr();
            str spFolderPath = SharePointFolderPath.valueStr();

            // Get the initial credentials for current user to get the appropriate SharePoint authorization type
            DocSharePointCredentials spCredentialsInitial = DocSharePointCredentials::constructFromSetup(spSiteUrl, spFolderPath, DocSharePointRole::GeneralPurposeUser);
            DocSharePointSecuritySettingsMap spSecuritySettingsMap = spCredentialsInitial.getCredentialSettingsFromSetup();
            SharePointTestAccessAuthorizationType.text(enum2Str(spCredentialsInitial.getSPAuthorizationType()));

            DictEnum dictEnumSPAccessAccountType = new DictEnum(enumNum(DocSharePointAccessAccountType));
            Enumerator enumSPAccessAccountType = dictEnumSPAccessAccountType.getEnumerator();

            // Traverse through the access roles/account types and test the connection to the specified SharePoint URL
            while (enumSPAccessAccountType.moveNext())
            {
                // Get current access role/account type
                DocSharePointAccessAccountType spAccessAccountType = enumSPAccessAccountType.current();

                DocSharePointCredentials spCredentials = null;  // store the credentials used for connection test
                UserName loginUserAccount = '';                 // resolved user account used for connection test
                UserName configuredUserAccount = '';            // configured user account from Docentric setup 
                DocSharePointRole spRole;
                boolean testResult = false;
                boolean addRecord = false;
                str testResultMsg = "@DocentricAX4:SharePointConnectionSuccessful";

                int infologLine = infologLine();

                try
                {
                    // Get credentials for the current user access role/account type
                    if (spAccessAccountType == DocSharePointAccessAccountType::OtherOperationsUser)
                    {
                        // The current user access role/account type is used when the built-in SharePoint API is used for the connection
                        addRecord = true;
                        configuredUserAccount = strFmt('(%1) >> %2', "@DocentricAX4:SharePointTestAccessConfiguredUserAccountCanNotBeSet", "@DocentricAX4:SharePointTestAccessConfiguredUserAccountCurrentUser");
                        spCredentials = DocSharePointCredentials::constructForSPAuthTypeIntegrated(spSiteUrl, curUserId());
                        loginUserAccount = spCredentials.getUserId();
                    }
                    else
                    {
                        // Get credentials for all other access roles/account types depending on the authorization type
                        switch (spCredentialsInitial.getSPAuthorizationType())
                        {
                            case DocSharePointAuthorizationType::Integrated:
                                switch (spAccessAccountType)
                                {
                                    case DocSharePointAccessAccountType::TemplateReader:
                                        spRole = DocSharePointRole::TemplateReader;
                                        configuredUserAccount = spSecuritySettingsMap.SharePointUserReader ? 
                                                                    spSecuritySettingsMap.SharePointUserReader : 
                                                                    strFmt('(%1) >> %2', "@DocentricAX4:SharePointTestAccessConfiguredUserAccountNotSet", "@DocentricAX4:SharePointTestAccessConfiguredUserAccountCurrentUser");
                                        break;

                                    case DocSharePointAccessAccountType::TemplateWriter:
                                        spRole = DocSharePointRole::TemplateWriter;
                                        configuredUserAccount = spSecuritySettingsMap.SharePointUserWriter ? 
                                                                spSecuritySettingsMap.SharePointUserWriter : 
                                                                strFmt('(%1) >> %2', "@DocentricAX4:SharePointTestAccessConfiguredUserAccountNotSet", "@DocentricAX4:SharePointTestAccessConfiguredUserAccountCurrentUser");
                                        break;

                                    case DocSharePointAccessAccountType::BrowserUser:
                                        spRole = DocSharePointRole::BrowserUser;
                                        DocSharePointBrowserUser spBrowserUser = SysDictField::isFieldMapped(
                                                tableStr(DocSharePointSecuritySettingsMap),
                                                tableId2Name(spSecuritySettingsMap.TableId),
                                                fieldStr(DocSharePointSecuritySettingsMap, SharePointBrowserUser)) ? spSecuritySettingsMap.SharePointBrowserUser : DocParameters::find().SharePointBrowserUser;
                                        configuredUserAccount = spBrowserUser ? spBrowserUser : strFmt('(%1) >> %2', "@DocentricAX4:SharePointTestAccessConfiguredUserAccountNotSet", "@DocentricAX4:SharePointTestAccessConfiguredUserAccountCurrentUser");
                                        break;

                                    case DocSharePointAccessAccountType::ReportUser:
                                        spRole = DocSharePointRole::ReportUser;
                                        configuredUserAccount = spSecuritySettingsMap.SharePointReportUser ? 
                                                                spSecuritySettingsMap.SharePointReportUser : 
                                                                strFmt('(%1) >> %2', "@DocentricAX4:SharePointTestAccessConfiguredUserAccountNotSet", "@DocentricAX4:SharePointTestAccessConfiguredUserAccountCurrentUser");
                                        break;

                                    default:
                                        continue;
                                }
                                addRecord = true;
                                spCredentials = DocSharePointCredentials::constructFromSetup(spSiteUrl, spFolderPath, spRole);
                                loginUserAccount = spCredentials.getUserId();
                                break;

                            case DocSharePointAuthorizationType::Online:
                            case DocSharePointAuthorizationType::OnPremise:
                                switch (spAccessAccountType)
                                {
                                    case DocSharePointAccessAccountType::IntegrationUser:
                                        addRecord = true;
                                        configuredUserAccount = spSecuritySettingsMap.SharePointUsername;
                                        spCredentials = DocSharePointCredentials::constructFromSetup(spSiteUrl, spFolderPath, DocSharePointRole::GeneralPurposeUser);
                                        loginUserAccount = spCredentials.getUserName();
                                        break;

                                    default:
                                        continue;
                                }
                                break;
                        }
                    }

                    // Test the access to the specified SharePoint location with the provided credentials
                    testResult = DocSharePointHelperV3::testConnection(spFolderPath, spSiteUrl, spCredentials);
                }
                catch
                {
                    testResultMsg = DocGlobalHelper::getInfoLogMessages(infologLine + 1, '', true);
                }
                finally
                {
                    // Add a record with the test result for the current access role/account type
                    if (addRecord)
                    {
                        ttsbegin;

                        DocSharePointTestAccessResultTmp.clear();

                        DocSharePointTestAccessResultTmp.AccessAccountType = spAccessAccountType;
                        DocSharePointTestAccessResultTmp.ConfiguredUserAccount = configuredUserAccount;
                        DocSharePointTestAccessResultTmp.LoginUserAccount = loginUserAccount;
                        DocSharePointTestAccessResultTmp.TestResult = testResult;
                        DocSharePointTestAccessResultTmp.TestResultMessage = testResultMsg;

                        DocSharePointTestAccessResultTmp.insert();

                        ttscommit;
                    }
                }
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError('', "@DocentricAX4:SharePointTestAccessTestCouldNotBeExecutedError", false, false);
        }
        catch
        {
            Global::exceptionTextFallThrough();
        }

        DocSharePointTestAccessResultTmp_ds.research();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocSharePointTestAccessResultTmp</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Modifies the background color of the validation box.
        /// </summary>
        public void selectionChanged()
        {
            super();
            
            element.changeTestResultMessageBoxColor();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>TestAccessButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the button is clicked.
        /// </summary>
        public void clicked()
        {
            super();
            
            element.testAccessToSharePoint();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HelpMenuItemButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Clicked event on menu function button HelpMenuItemButton.
        /// </summary>
        public void clicked()
        {
            DocGlobalHelper::navigateToUrl(DocConstant::SharePointExtendSecurityManualURL, true, false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocSharePointTestAccessResultTmp</Name>
			<Table>DocSharePointTestAccessResultTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccessAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConfiguredUserAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LoginUserAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TestResult</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TestResultMessage</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>AccountTypeIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX4:DocSharePointTestAccessCaption</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SharePointTestAccessInstructions</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>SharePointTestAccessActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>HelpButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>SharePointTestAccessGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SharePointSiteTestGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SharePointSiteUrl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX4:SharePointTestAccessSharePointSiteUrlHelp</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@DocentricAX4:SharePointTestAccessSharePointSiteUrl</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SharePointFolderPath</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX4:SharePointTestAccessSharePointFolderPathHelp</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@DocentricAX4:SharePointTestAccessSharePointFolderPath</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>TestAccessButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
								<HelpText>@DocentricAX4:SharePointTestAccessTestHelp</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<Text>@DocentricAX:Test</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>HelpMenuItemButton</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>Help</NormalImage>
								<Text>@SYS14501</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>SharePointTestAccessTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SharePointTestAccessResultTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SharePointTestAccessCustomFilterGroup</Name>
								<Pattern>CustomFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SharePointTestAccessAuthorizationType</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAX4:SharePointTestAccessAuthorizationTypeHelp</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAX4:SharePointAuthorizationType</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SharePointTestAccessResultGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SharePointTestAccessResultGrid_AccessAccountType</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccessAccountType</DataField>
										<DataSource>DocSharePointTestAccessResultTmp</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>SharePointTestAccessResultGrid_accessAccountTypeDescIndicator</Name>
										<ExtendedStyle>image_gridIcon</ExtendedStyle>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>accessAccountTypeDescIndicator</DataMethod>
										<DataSource>DocSharePointTestAccessResultTmp</DataSource>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SharePointTestAccessResultGrid_ConfiguredUserAccount</Name>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ConfiguredUserAccount</DataField>
										<DataSource>DocSharePointTestAccessResultTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SharePointTestAccessResultGrid_LoginUserAccount</Name>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LoginUserAccount</DataField>
										<DataSource>DocSharePointTestAccessResultTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>SharePointTestAccessResultGrid_testResultIndicator</Name>
										<ExtendedStyle>image_gridIcon</ExtendedStyle>
										<HelpText>@DocentricAX4:SharePointTestResultHelp</HelpText>
										<Type>Image</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>testResultIndicator</DataMethod>
										<DataSource>DocSharePointTestAccessResultTmp</DataSource>
										<Label>@DocentricAX4:SharePointTestResult</Label>
									</AxFormControl>
								</Controls>
								<DataSource>DocSharePointTestAccessResultTmp</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SharePointTestAccessResultMessageGroup</Name>
								<Pattern>FillText</Pattern>
								<PatternVersion>UX7 1.0</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DocSharePointTestAccessResultTmp_TestResultMessage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TestResultMessage</DataField>
										<DataSource>DocSharePointTestAccessResultTmp</DataSource>
										<MultiLine>Yes</MultiLine>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@DocentricAX4:SharePointTestAccessResult</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>SharePointTestAccessButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS15212</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>