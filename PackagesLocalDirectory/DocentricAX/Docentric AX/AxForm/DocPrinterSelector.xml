<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocPrinterSelector</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocPrinterSelector extends FormRun
{
    private FormRun callerForm;
    private IDocPrinterSelector caller;
    private str callerSelectedPrinterName;
    private boolean isTmpTableSavedOnCaller = false;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the selected value to the caller form.
    /// </summary>
    /// <param name = "_selectString">Selected value.</param>
    [Replaceable]
    public void closeSelect(str _selectString)
    {
        str selectedPrinterName = DocPrinterSelectorTmp.PrinterName;

        // Set the caller control
        super(selectedPrinterName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();
    
        if (element.args() == null || element.args().caller() == null || !(element.args().caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:FormNotOpenAsLookupForm");
        }

        callerForm = element.args().caller() as FormRun;

        // Check whether the caller implements the IDocPrinterSelector interface.
        // This check is necessary because form extensions cannot implement the interface.
        if (element.args().caller() is IDocPrinterSelector)
        {
            // Get an instance of the interface if the caller form implemented the interface
            caller = element.args().caller() as IDocPrinterSelector;
        }
        else
        {
            // Check the required methods if the caller form has not implemented the interface (in case of caller form extensions).
            this.checkCallerMethodsExist();
        }

        FormStringControl callerControl = SysTableLookup::getCallerStringControl(element.args(), false);
        if (callerControl == null)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:FormNotOpenAsLookupForm");
        }
        
        // Set the selected printer name from the caller lookup
        callerSelectedPrinterName = callerControl.text();
        
        // A first call to this lookup form will populate the form data source temp table 
        // DocPrinterSelectorTmp, and store it in the caller form for successive use.
        DocPrinterSelectorTmp tmpTableLocal = caller != null ? caller.parmPrinterList_DC() : callerForm.parmPrinterList_DC();
        select count(RecId) from tmpTableLocal;

        // First check if the temp table is already populated and stored in the caller form.
        if (tmpTableLocal.RecId > 0)
        {
            // If temp table was populated earlier, it must have at least 1 record
            // for the @DEFAULT_PRINTER@ token --> use that buffer
            DocPrinterSelectorTmp.setTmpData(tmpTableLocal);
            isTmpTableSavedOnCaller = true;
        }
        else
        {
            // First-time invoke of this form from the Print destination settings form => populate the temp table.
            str reportId = caller != null ? caller.getReportId() : callerForm.getReportId();
            PrintMgmtDocumentType reportType = caller != null ? caller.getReportType() : callerForm.getReportType();
            boolean reportTypeProvided = caller != null ? caller.isReportTypeProvided() : callerForm.isReportTypeProvided();

            DocPrinterSelectorTmp::fillTableWithPrintersActiveAndAllowedForReportAndUser(DocPrinterSelectorTmp, reportId, reportType, reportTypeProvided, curUserId(), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form closes.
    /// </summary>
    public void close()
    {      
        // Cache the temp table - store it in the caller form
        if (!isTmpTableSavedOnCaller)
        {
            if (caller != null)
            {
                caller.parmPrinterList_DC(DocPrinterSelectorTmp);
            }
            else
            {
                callerForm.parmPrinterList_DC(DocPrinterSelectorTmp);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the form.
    /// </summary>
    public void run()
    {
        super();

        // Find the selected printer and position to that record if found
        str selectedPrinterName = callerSelectedPrinterName;

        DocPrinterSelectorTmp tmpTableLocal;
        tmpTableLocal.setTmpData(DocPrinterSelectorTmp);

        select firstonly tmpTableLocal 
            where tmpTableLocal.PrinterName == selectedPrinterName;
        try
        {
            element.args().lookupRecord(tmpTableLocal);
            DocPrinterSelectorTmp_ds.research(false);
        }
        catch
        {
            infolog.cut(infologLine(), infologLine());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCallerMethodsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the required methods are present in the caller's form.
    /// This check is required if the caller form does not implement the IDocPrinterSelector interface.
    /// </summary>
    private void checkCallerMethodsExist()
    {
        if (!formHasMethod(callerForm, identifierStr(getReportId)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(getReportId)));
        }
        if (!formHasMethod(callerForm, identifierStr(getReportType)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(getReportType)));
        }
        if (!formHasMethod(callerForm, identifierStr(isReportTypeProvided)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(isReportTypeProvided)));
        }
        if (!formHasMethod(callerForm, identifierStr(parmPrinterList_DC)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(parmPrinterList_DC)));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocPrinterSelectorTmp</Name>
			<Table>DocPrinterSelectorTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrinterName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrinterPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX2:SelectPrinterName</Caption>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">Lookup</Style>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocUserPrinterSelectorTmp_PrinterName</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PrinterName</DataField>
						<DataSource>DocPrinterSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocUserPrinterSelectorTmp_PrinterPath</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PrinterPath</DataField>
						<DataSource>DocPrinterSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocUserPrinterSelectorTmp_Description</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Description</DataField>
						<DataSource>DocPrinterSelectorTmp</DataSource>
					</AxFormControl>
				</Controls>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>