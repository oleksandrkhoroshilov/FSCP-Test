<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocLabelPlaceholderList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocLabelPlaceholderList extends FormRun
{
    [FormObservable]
    container selectedPlaceholdersList;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriding base init() method to set the custom form caption.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons

        // This form displays a list of all label plaeholders, so ignore the record passed in 
        element.args().record(null);

        super();

        // Hide Attach button
        FormCommandButtonControl button = this.control(this.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;
        if (button)
        {
            button.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedLabelPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method returning the concatenated list of selected placeholders.
    /// </summary>
    /// <returns>DocSelectedPlaceholders</returns>
    display DocSelectedPlaceholders getSelectedLabelPlaceholders()
    {
        DocSelectedPlaceholders ret = '';
        DocLabelTable label;
        Map selectedLabelsMap = new Map(Types::Int64, Types::String);

        for (label = DocLabelTable_ds.getFirst(1); label.RecId; label = DocLabelTable_ds.getNext())
        {
            selectedLabelsMap.insert(label.RecId, label.GlobalLabelId);
        }

        // Concatenate the map into string
        for (int i=1; i<=conLen(selectedPlaceholdersList); i++)
        {
            RecId recId = conPeek(selectedPlaceholdersList, i);

            if (selectedLabelsMap.exists(recId))
            {
                ret += (ret ? ' ' : '') + selectedLabelsMap.lookup(recId) + DocConstantPlaceholder::PlaceholderEndSymbol;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocLabelTable</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overriding base executeQuery() method to empty the placeholders container on every run.
        /// </summary>
        public void executeQuery()
        {
            super();

            // Empty selected placeholder list when data source is refreshed
            selectedPlaceholdersList = conNull();

            // Mark the first record after data source is refreshed
            this.markRecord(DocLabelTable, 1);
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overriding base markChanged() method to update the items in selected placeholders container.
        /// </summary>
        public void markChanged()
        {
            super();

            this.updateSelectedPlaceholders();
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateSelectedPlaceholders</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the items in container according to marked records in grid.
        /// </summary>
        private void updateSelectedPlaceholders()
        {
            if (!this.anyMarked())
            {
                // None marked, so we just need to empty the container and return.
                selectedPlaceholdersList = conNull();
                return;
            }

            if (this.mark())
            {
                // Record(s) were marked, so loop over marked records and insert RecId in container, if not present already.
                DocLabelTable label;

                for (label = this.getFirst(1); label.RecId > 0; label = this.getNext())
                {
                    int posInContainer = conFind(selectedPlaceholdersList, label.RecId);

                    if (!posInContainer)
                    {
                        selectedPlaceholdersList += [label.RecId];
                    }
                }
            }
            else
            {
                // Record(s) were unmarked, so loop over unmarked records and remove RecId from container, if present.
                DocLabelTable label;

                for (label = this.getFirst(0); label.RecId > 0; label = this.getNext())
                {
                    int posInContainer = conFind(selectedPlaceholdersList, label.RecId);

                    if (posInContainer)
                    {
                        selectedPlaceholdersList = conDel(selectedPlaceholdersList, posInContainer, 1);
                    }
                }
            }
        
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>DocLabelTranslation</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overriding base init() method to add language filter as range.
        /// </summary>
        public void init()
        {
            super();

            this.addLanguageRange();
        }

]]></Source>
					</Method>
					<Method>
						<Name>addLanguageRange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Adds a range to filter data source by language
        /// </summary>
        private void addLanguageRange()
        {
            QueryBuildDataSource qbds = this.query().dataSourceTable(tableNum(DocLabelTranslation));

            LanguageId formLanguageId = Global::currentUserLanguage();

            // If currentUserLanguage is not available as DocLabelLanguage, fallback to default (first) DocLabelLanguage
            if (!DocLabelLanguage::findByLanguageId(formLanguageId))
            {
                formLanguageId = DocLabelLanguage::getFirstLanguageId();
            }

            qbds.addRange(fieldNum(DocLabelTranslation, LanguageId)).value(formLanguageId);
        
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SelectedLabelPlaceholders</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overriding base initialize() method to set the background color of textbox control.
        /// </summary>
        protected void initialize()
        {
            super();

            // Set color to make the field more visible
            this.colorScheme(FormColorScheme::RGB);
            this.backgroundColor(WinAPI::RGB2int(255,255,255));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocLabelTable</Name>
			<Table>DocLabelTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BasedOnSysLabelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Comment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FallbackTranslation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GlobalLabelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LabelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseFallbackTranslation</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DocLabelTranslation</Name>
			<Table>DocLabelTranslation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GlobalLabelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Translation</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DocLabelTable</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX4:DocLabelPlaceholderListFormCaption</Caption>
		<DataSource xmlns="">DocLabelTable</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane_ButtonGroup</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>UserDefinedLabelsButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>DocLabelTable</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>DocLabelTable</MenuItemName>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>LabelId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LabelId</DataField>
						<DataSource>DocLabelTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>GlobalLabelId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>GlobalLabelId</DataField>
						<DataSource>DocLabelTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocLabelTranslation_LanguageId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LanguageId</DataField>
						<DataSource>DocLabelTranslation</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocLabelTranslation_Translation</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Translation</DataField>
						<DataSource>DocLabelTranslation</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocLabelTranslation_Description</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Description</DataField>
						<DataSource>DocLabelTranslation</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocLabelTable_FallbackTranslation</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>FallbackTranslation</DataField>
						<DataSource>DocLabelTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DocLabelTable_UseFallbackTranslation</Name>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>UseFallbackTranslation</DataField>
						<DataSource>DocLabelTable</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>DocLabelTable</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>SelectedLabelPlaceholdersGroup</Name>
				<Height>80</Height>
				<HeightMode>Manual</HeightMode>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SelectedLabelPlaceholders</Name>
						<AllowEdit>No</AllowEdit>
						<ExtendedStyle>Emphasized</ExtendedStyle>
						<HeightMode>SizeToAvailable</HeightMode>
						<HelpText>@DocentricAX4:SelectedLabelPlaceholdersHelpText</HelpText>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>getSelectedLabelPlaceholders</DataMethod>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
						<Label>@DocentricAX4:SelectedLabelPlaceholdersLabel</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>