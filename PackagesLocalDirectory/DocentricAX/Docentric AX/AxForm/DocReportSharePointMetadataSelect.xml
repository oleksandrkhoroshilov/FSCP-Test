<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportSharePointMetadataSelect</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Docentric.AX.Storage.SharePoint.Model;
using Docentric.AX.Framework.Extensions;

[Form]
public class DocReportSharePointMetadataSelect extends FormRun
{
    DocReportSharePointSettings bufferDocReportSharePointSettings;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();

        if (element.args() == null || element.args().dataset() != tableNum(DocReportSharePointSettings) || !element.args().record())
        {
            DocGlobalHelper::handleException(funcName(), 'Form has to be called from the Docentric SharePoint settings form');
        }

        bufferDocReportSharePointSettings = element.args().record();

        DocReportSharePointMetadata spMetadataAvailableTmp = DocReportSharePointMetadataAvailable_ds.cursor();
        DocReportSharePointMetadata spMetadataSelectedTmp = DocReportSharePointMetadataSelected_ds.cursor();

        boolean hasSelected = false;
        try
        {
            DocSharePointCredentials spCredentials = DocSharePointCredentials::constructFromSetup(
                bufferDocReportSharePointSettings.SharePointSiteUrl, bufferDocReportSharePointSettings.SharePointDocumentLibraryUrl, DocSharePointRole::BrowserUser);

            // Get metadata fields from selected SharePoint document library
            DocSPDocumentLibrary spDocumentLibrary = DocSharePointHelperV3::getDocumentLibraryByUrl(
                                                                                bufferDocReportSharePointSettings.SharePointDocumentLibraryUrl,
                                                                                bufferDocReportSharePointSettings.SharePointSiteUrl,
                                                                                spCredentials);
            if (spDocumentLibrary.UpdatableFields != null && spDocumentLibrary.UpdatableFields.Count > 0)
            {
                DocSPFieldCollection spFieldCollection = spDocumentLibrary.UpdatableFields;
                for (int i = 0; i < spFieldCollection.Count; i++)
                {
                    DocSPField spField = spFieldCollection.GetByIndex(i);
                    // Check if SharePoint metadata field already exists or is required
                    if (DocReportSharePointMetadata::exist(bufferDocReportSharePointSettings.RecId, spField.InternalName) || spField.Required)
                    {
                        element.insertMetadata(spMetadataSelectedTmp, spField);
                        hasSelected = true;
                    }
                    else
                    {
                        element.insertMetadata(spMetadataAvailableTmp, spField);
                    }
                }
            }
        }
        catch
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:SharePointMetadataGetFieldsError", bufferDocReportSharePointSettings.SharePointDocumentLibraryUrl), false, '', true);
        }

        if (hasSelected)
        {
            OKButton.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts SharePoint metadata field to the provided table buffer.
    /// </summary>
    /// <param name = "_docReportSharePointMetadata">The DocReportSharePointMetada table buffer</param>
    /// <param name = "_spField">SharePoint metadata field</param>
    private void insertMetadata(DocReportSharePointMetadata _docReportSharePointMetadata, DocSPField _spField)
    {
        ttsbegin;

        _docReportSharePointMetadata.clear();
        _docReportSharePointMetadata.SharePointSettingsRecId = bufferDocReportSharePointSettings.RecId;
        _docReportSharePointMetadata.FieldName = _spField.Title;
        _docReportSharePointMetadata.FieldInternalName = _spField.InternalName;
        _docReportSharePointMetadata.FieldDescription = _spField.Description;
        _docReportSharePointMetadata.FieldDataType = symbol2Enum(enumNum(DocSharePointMetadataFieldDataType), EnumExtensions::GetName(System.Enum::ToObject(_spField.FieldType.GetType(), _spField.FieldType)));
        _docReportSharePointMetadata.IsRequired = _spField.Required;
        _docReportSharePointMetadata.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when button Ok is clicked.
    /// </summary>
    public void closeOk()
    {
        DocReportSharePointMetadata spMetadataSelectedTmp = DocReportSharePointMetadataSelected_ds.cursor();
        DocReportSharePointMetadata docReportSharePointMetadata, docReportSharePointMetadataExist;

        try
        {
            ttsbegin;

            // Delete SharePoint metadata fields that are not in the selected list and already exist
            delete_from docReportSharePointMetadata
                where docReportSharePointMetadata.SharePointSettingsRecId == bufferDocReportSharePointSettings.RecId
                notexists join spMetadataSelectedTmp
                    where docReportSharePointMetadata.SharePointSettingsRecId == spMetadataSelectedTmp.SharePointSettingsRecId
                       && docReportSharePointMetadata.FieldInternalName == spMetadataSelectedTmp.FieldInternalName;

            // Update SharePoint metdata fields that are in the selected list and already exist
            update_recordset docReportSharePointMetadata
                setting FieldName = spMetadataSelectedTmp.FieldName,
                        FieldDataType = spMetadataSelectedTmp.FieldDataType,
                        FieldDescription = spMetadataSelectedTmp.FieldDescription,
                        IsRequired = spMetadataSelectedTmp.IsRequired
                join spMetadataSelectedTmp
                    where docReportSharePointMetadata.SharePointSettingsRecId == spMetadataSelectedTmp.SharePointSettingsRecId
                       && docReportSharePointMetadata.FieldInternalName == spMetadataSelectedTmp.FieldInternalName;

            // Insert SharePoint metadata fields that are in the selected list and do not exist
            insert_recordset docReportSharePointMetadata (SharePointSettingsRecId, FieldInternalName, FieldName, FieldDescription, FieldDataType, IsRequired)
                select SharePointSettingsRecId, FieldInternalName, FieldName, FieldDescription, FieldDataType, IsRequired
                    from spMetadataSelectedTmp
                    notexists join docReportSharePointMetadataExist
                        where spMetadataSelectedTmp.SharePointSettingsRecId == docReportSharePointMetadataExist.SharePointSettingsRecId
                           && spMetadataSelectedTmp.FieldInternalName == docReportSharePointMetadataExist.FieldInternalName;

            ttscommit;

            DocReportSharePointSettingsUtil::validateSharePointSettings(bufferDocReportSharePointSettings.RecId);
        }
        catch
        {
            DocGlobalHelper::handleError("@DocentricAX4:SharePointMetadataConfirmSelectedFieldsError", false);
            return;
        }

        super();

        // Refresh the caller form.
        if (element.args() && element.args().caller())
        {
            IDocRefreshable caller = element.args().caller() as IDocRefreshable;
            if (caller)
            {
                caller.refreshCallerDataSourceAndPosition();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocReportSharePointMetadataAvailable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the data source.
        /// </summary>
        public void init()
        {
            super();

            // Set the data source table as temporary
            this.cursor().setTmp();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>DocReportSharePointMetadataSelected</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the data source.
        /// </summary>
        public void init()
        {
            super();
    
            // Set the data source table as temporary
            this.cursor().setTmp();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AddButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when Add button is clicked.
        /// </summary>
        public void clicked()
        {
            super();

            DocReportSharePointMetadata spMetadataAvailableTmp = DocReportSharePointMetadataAvailable_ds.cursor();
            DocReportSharePointMetadata spMetadataSelectedTmp = DocReportSharePointMetadataSelected_ds.cursor();

            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(DocReportSharePointMetadataAvailable_ds);

            try
            {
                ttsbegin;

                // Select marked available SharePoint metadata fields
                DocReportSharePointMetadata spMetadataAvailableMarkedTmp = helper.getFirst();
                RecordInsertList recordInsertList = new RecordInsertList(tableNum(DocReportSharePointMetadata), false, false, false, false, false, spMetadataSelectedTmp);
                while (spMetadataAvailableMarkedTmp)
                {
                    spMetadataSelectedTmp.clear();
                    buf2Buf(spMetadataAvailableMarkedTmp, spMetadataSelectedTmp);
                    recordInsertList.add(spMetadataSelectedTmp);

                    spMetadataAvailableMarkedTmp = helper.getNext();
                }
                recordInsertList.insertDatabase();

                // Delete marked available SharePoint metadata fields
                delete_from spMetadataAvailableTmp
                    exists join spMetadataSelectedTmp
                        where spMetadataAvailableTmp.SharePointSettingsRecId == spMetadataSelectedTmp.SharePointSettingsRecId
                           && spMetadataAvailableTmp.FieldInternalName == spMetadataSelectedTmp.FieldInternalName;

                ttscommit;

                OKButton.enabled(true);
            }
            catch
            {
                DocGlobalHelper::handleError("@DocentricAX4:SharePointMetadataSelectAvailableFieldsError", false);
            }

            DocReportSharePointMetadataAvailable_ds.research();
            DocReportSharePointMetadataSelected_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when Remove button is clicked.
        /// </summary>
        public void clicked()
        {
            super();

            DocReportSharePointMetadata spMetadataAvailableTmp = DocReportSharePointMetadataAvailable_ds.cursor();
            DocReportSharePointMetadata spMetadataSelectedTmp = DocReportSharePointMetadataSelected_ds.cursor();

            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(DocReportSharePointMetadataSelected_ds);

            try
            {
                ttsbegin;

                // Remove marked selected SharePoint metadata fields
                DocReportSharePointMetadata spMetadataSelectedMarkedTmp = helper.getFirst();
                RecordInsertList recordInsertList = new RecordInsertList(tableNum(DocReportSharePointMetadata), false, false, false, false, false, spMetadataAvailableTmp);
                while (spMetadataSelectedMarkedTmp)
                {
                    if (!spMetadataSelectedMarkedTmp.IsRequired)
                    {
                        spMetadataAvailableTmp.clear();
                        buf2Buf(spMetadataSelectedMarkedTmp, spMetadataAvailableTmp);
                        recordInsertList.add(spMetadataAvailableTmp);
                    }
                    else
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAX4:SharePointMetadataRemoveSelectedFieldError", spMetadataSelectedMarkedTmp.FieldName), false);
                    }

                    spMetadataSelectedMarkedTmp = helper.getNext();
                }
                recordInsertList.insertDatabase();

                // Delete marked selected SharePoint metadata fields
                delete_from spMetadataSelectedTmp
                    exists join spMetadataAvailableTmp
                        where spMetadataSelectedTmp.SharePointSettingsRecId == spMetadataAvailableTmp.SharePointSettingsRecId
                           && spMetadataSelectedTmp.FieldInternalName == spMetadataAvailableTmp.FieldInternalName;

                ttscommit;

                OKButton.enabled(true);
            }
            catch
            {
                DocGlobalHelper::handleError("@DocentricAX4:SharePointMetadataRemoveSelectedFieldsError", false);
            }

            DocReportSharePointMetadataAvailable_ds.research();
            DocReportSharePointMetadataSelected_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocReportSharePointMetadataAvailable</Name>
			<Table>DocReportSharePointMetadata</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActionOnPlaceholderError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldDataType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldInternalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsValid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlaceholderName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharePointSettingsRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidationError</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DocReportSharePointMetadataSelected</Name>
			<Table>DocReportSharePointMetadata</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActionOnPlaceholderError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldDataType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldInternalName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsValid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlaceholderName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SharePointSettingsRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidationError</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX4:SharePointMetadataSelectCaption</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ListPanel</Pattern>
				<PatternVersion>1.3</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ListPanel</Name>
						<ExtendedStyle>listPanel</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AvailablePanel</Name>
								<ExtendedStyle>listPanel_availPanel</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>AvailableMetadataGrid</Name>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataGroup>Field</DataGroup>
										<DataSource>DocReportSharePointMetadataAvailable</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@DocentricAX4:SharePointMetadataSelectAvailableGroup</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ActionsPanel</Name>
								<ExtendedStyle>listPanel_buttonPanel</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>AddButton</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NormalImage>MoveRight</NormalImage>
										<Text>@SYS2318</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RemoveButton</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NormalImage>MoveLeft</NormalImage>
										<Text>@SYS311855</Text>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectedPanel</Name>
								<ExtendedStyle>listPanel_selPanel</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>SelectedMetadataGrid</Name>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataGroup>Field</DataGroup>
										<DataSource>DocReportSharePointMetadataSelected</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@DocentricAX4:SharePointMetadataSelectSelectedGroup</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@DocentricAX4:SharePointMetadataSelectOKButton</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>