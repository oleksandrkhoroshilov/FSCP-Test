<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocPrinterMultiSelect</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocPrinterMultiSelect extends FormRun
{
    FormRun callerFormRun;
    UserInfo userInfo;
    SysCorpNetPrinters networkPrinter;
    FormDataSource userInfoDs, networkPrinterDs;
    str callerMenuItemName;  
    boolean isSetupOverRole;

}
]]></Source>
			</Method>
			<Method>
				<Name>checkArgs</Name>
				<Source><![CDATA[
    private void checkArgs()
    {
        if (!element.args())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:FormCalledWithoutArguments");
        }
        
        Args args = element.args();
        
        if (!args.caller() || !args.record())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        
        if (!(args.caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        callerFormRun = args.caller() as FormRun;

        if (callerFormRun == null)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        

        if (args.record() is UserInfo)
        {
            userInfo = args.record() as UserInfo;
        }
        else if (args.record() is SysCorpNetPrinters)
        {
            networkPrinter = args.record() as SysCorpNetPrinters;
        }
        else
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        

        callerMenuItemName = args.menuItemName();
        if (!(callerMenuItemName == menuItemDisplayStr(DocUserPrinterAddSelectedPrinters) 
            || callerMenuItemName == menuItemDisplayStr(DocUserPrinterRemoveSelectedPrinters)
            || callerMenuItemName == menuItemDisplayStr(DocUserPrinterAddSelectedUsers)
            || callerMenuItemName == menuItemDisplayStr(DocUserPrinterRemoveSelectedUsers)
            || callerMenuItemName == menuItemDisplayStr(DocUserPrinterAddSelectedRoles)
            || callerMenuItemName == menuItemDisplayStr(DocUserPrinterRemoveSelectedRoles)))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        
        for (int i = 1; i <= callerFormRun.dataSourceCount(); i++)
        {
            // Both caller forms have both UserInfo and SysCorpNetPrinters datasources,
            // but we are interested in the main datasource on the caller form,
            // so as soon as we get the match it is OK to leave the loop.
            if (callerFormRun.dataSource(i).cursor() is UserInfo)
            {
                userInfoDs = callerFormRun.dataSource(i);
                break;
            }
            if (callerFormRun.dataSource(i).cursor() is SysCorpNetPrinters)
            {
                networkPrinterDs = callerFormRun.dataSource(i);
                break;
            }
        }

        // Caller datasource must be UserInfo or SysCorpNetPrinters
        if (!userInfoDs && !networkPrinterDs)
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid caller form datasource');
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaptionSinglePrinter</Name>
				<Source><![CDATA[
    private void setCaptionSinglePrinter(Printername _printerName)
    {
        str firstPart;

        switch (callerMenuItemName)
        {
            case menuItemDisplayStr(DocUserPrinterAddSelectedUsers):                
                firstPart = strFmt("@DocentricAX4:AddUsersForPrinter", _printerName);
                break;

            case menuItemDisplayStr(DocUserPrinterRemoveSelectedUsers):
                firstPart = strFmt("@DocentricAX4:RemoveUsersForPrinter", _printerName);
                break;
            
            case menuItemDisplayStr(DocUserPrinterAddSelectedRoles):
                firstPart = strFmt("@DocentricAX4:AddUserRolesForPrinter", _printerName);
                break;

            case menuItemDisplayStr(DocUserPrinterRemoveSelectedRoles):
                firstPart = strFmt("@DocentricAX4:RemoveUserRolesForPrinter", _printerName);
                break;

            default:
                // Should not happen. Do nothing - leave the default caption configured in the design.
        }
                      
        element.design().caption(strFmt('%1 (%2)', firstPart, strUpr(curExt())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaptionMultiplePrinter</Name>
				<Source><![CDATA[
    private void setCaptionMultiplePrinter()
    {        
        str firstPart;

        switch (callerMenuItemName)
        {
            case menuItemDisplayStr(DocUserPrinterAddSelectedUsers):
                firstPart = "@DocentricAX4:AddUsersForSelectedPrinters";
                break;

            case menuItemDisplayStr(DocUserPrinterRemoveSelectedUsers):
                firstPart = "@DocentricAX4:RemoveUsersFromSelectedPrinters";
                break;
            
            case menuItemDisplayStr(DocUserPrinterAddSelectedRoles):
                firstPart = "@DocentricAX4:AddUserRolesForSelectedPrinters";
                break;

            case menuItemDisplayStr(DocUserPrinterRemoveSelectedRoles):
                firstPart = "@DocentricAX4:RemoveUserRolesFromSelectedPrinters";
                break;

            default:
            // Should not happen. Do nothing - leave the default caption configured in the design.
        }
                      
        element.design().caption(strFmt('%1 (%2)', firstPart, strUpr(curExt())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaptionSingleUser</Name>
				<Source><![CDATA[
    private void setCaptionSingleUser(UserId _userId)
    {        
        str firstPart;

        switch (callerMenuItemName)
        {
            case menuItemDisplayStr(DocUserPrinterAddSelectedPrinters):
                firstPart = strFmt("@DocentricAX4:AddUserPrintersForUser", _userId);
                break;

            case menuItemDisplayStr(DocUserPrinterRemoveSelectedPrinters):
                firstPart = strFmt("@DocentricAX4:RemoveUserPrintersFromUser", _userId);
                break;

            default:
            // Should not happen. Do nothing - leave the default caption configured in the design.
        }
                      
        element.design().caption(strFmt('%1 (%2)', firstPart, strUpr(curExt())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaptionMultipleUser</Name>
				<Source><![CDATA[
    private void setCaptionMultipleUser()
    {                
        str firstPart;

        switch (callerMenuItemName)
        {
            case menuItemDisplayStr(DocUserPrinterAddSelectedPrinters):
                firstPart = "@DocentricAX4:AddUserPrintersForSelectedUsers";
                break;

            case menuItemDisplayStr(DocUserPrinterRemoveSelectedPrinters):
                firstPart = "@DocentricAX4:RemoveUserPrintersForSelectedUsers";
                break;

            default:
            // Should not happen. Do nothing - leave the default caption configured in the design.
        }
                      
        element.design().caption(strFmt('%1 (%2)', firstPart, strUpr(curExt())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        element.checkArgs();  

        // We call this form in following scenarios:
        //      - from User printer form (by user), to add or remove the selected printers to the selected users
        //      - from User printer form (by printer), to add or remove the selected users to the selected printers
        if (userInfo)
        {
            // We came from User printer by user
            if (userInfoDs.recordsMarked().lastIndex() <= 1 || element.args().parm() == 'DetailView')
            {
                // Single user selected. 
                // Set the correct caption and list only printers not assigned to this user.
                this.setCaptionSingleUser(userInfo.id);

                if (callerMenuItemName == menuItemDisplayStr(DocUserPrinterAddSelectedPrinters))
                {
                    DocUserPrinterSelectorTmp::fillTableWithUnassignedPrintersForUser(DocUserPrinterSelectorTmp, userInfo.id);
                }
                else
                {
                    DocUserPrinterSelectorTmp::fillTableWithAssignedPrintersForUser(DocUserPrinterSelectorTmp, userInfo.id);
                }
            }
            else
            {
                // Multiple users selected.
                // Set the correct caption and list all printers.
                this.setCaptionMultipleUser();

                DocUserPrinterSelectorTmp::fillTableWithAllPrinters(DocUserPrinterSelectorTmp);
            }

            
            if (callerMenuItemName == menuItemDisplayStr(DocUserPrinterAddSelectedPrinters))
            {
                OKButton.text("@DocentricAX4:AddPrinters");
            }
            else
            {
                OKButton.text("@DocentricAX4:RemovePrinters");
            }


            PrinterGroup.visible(true);
        }
        else if (networkPrinter)
        {
            // We came from User printer by printer 
            if (networkPrinterDs.recordsMarked().lastIndex() <= 1 || element.args().parm() == 'DetailView')
            {
                // Single printer selected.
                // Set the correct caption and initialize the temp table with users without this printer.
                this.setCaptionSinglePrinter(networkPrinter.PrinterName);

                switch (callerMenuItemName)
                {
                    case menuItemDisplayStr(DocUserPrinterAddSelectedUsers):                        
                        DocUserPrinterSelectorTmp::fillTableWithUnassignedUsersForPrinter(DocUserPrinterSelectorTmp, networkPrinter.PrinterName);
                        break;
                        
                    case menuItemDisplayStr(DocUserPrinterRemoveSelectedUsers):                        
                        DocUserPrinterSelectorTmp::fillTableWithAssignedUsersForPrinter(DocUserPrinterSelectorTmp, networkPrinter.PrinterName);
                        break;
            
                    case menuItemDisplayStr(DocUserPrinterAddSelectedRoles):
                    case menuItemDisplayStr(DocUserPrinterRemoveSelectedRoles):
                        DocUserPrinterSelectorTmp::fillTableWithAllUserRoles(DocUserPrinterSelectorTmp);
                        break;

                    default:
                        // Should not happen.                         
                        DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
                }
            }
            else
            {
                // Multiple printers selected.
                // Set the correct caption and initialize the temp table with all users/user roles.
                this.setCaptionMultiplePrinter();                

                switch (callerMenuItemName)
                {
                    case menuItemDisplayStr(DocUserPrinterAddSelectedUsers):
                    case menuItemDisplayStr(DocUserPrinterRemoveSelectedUsers):
                        DocUserPrinterSelectorTmp::fillTableWithAllUsers(DocUserPrinterSelectorTmp);
                        break;
            
                    case menuItemDisplayStr(DocUserPrinterAddSelectedRoles):
                    case menuItemDisplayStr(DocUserPrinterRemoveSelectedRoles):
                        DocUserPrinterSelectorTmp::fillTableWithAllUserRoles(DocUserPrinterSelectorTmp);
                        break;

                    default:
                        // Should not happen.
                        DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
                }
            }

            // Set other UI elements: correct field groups and OK button text
            switch (callerMenuItemName)
            {
                case menuItemDisplayStr(DocUserPrinterAddSelectedUsers):
                    UserGroup.visible(true);
                    OKButton.text("@DocentricAX4:AddUsers");
                    break;

                case menuItemDisplayStr(DocUserPrinterRemoveSelectedUsers):
                    UserGroup.visible(true);
                    OKButton.text("@DocentricAX4:RemoveUsers");
                    break;
            
                case menuItemDisplayStr(DocUserPrinterAddSelectedRoles):
                    RolesGroup.visible(true);
                    OKButton.text("@DocentricAX4:AddUsersWithRoles");
                    isSetupOverRole = true;
                    break;

                case menuItemDisplayStr(DocUserPrinterRemoveSelectedRoles):
                    RolesGroup.visible(true);
                    OKButton.text("@DocentricAX4:RemoveUsersWithRoles");
                    isSetupOverRole = true;
                    break;

                default:
                    // Should not happen.
                    DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
            }
        }
        else
        {
            DocGlobalHelper::handleException(funcName(), 'Invalid caller form datasource');
        }        

        // We come here with UserInfo or SysCorpNetworkPrinters caller datasource, as a result this datasource gets filtered
        // by the caller user or printer.
        DocUserPrinterSelectorTmp_ds.query().dataSourceTable(tableNum(DocUserPrinterSelectorTmp)).clearDynalinks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        // Loop through selected temp records and perform the required action
        MultiSelectionHelper helper = MultiSelectionHelper::construct();
        helper.parmDatasource(DocUserPrinterSelectorTmp_ds);

        DocUserPrinterSelectorTmp tmpRecord;
        Set selectedNamesSet = new Set(Types::String);
        if (userInfo)
        {
            // Add or delete multi-selected printers (from this form) for the multi-selected users (from the caller form).
            // Iterate through the multi-selected printers (from this form) and prepare the Set parameter for UI helper.
            tmpRecord = helper.getFirst();
            while (tmpRecord.PrinterName)
            {
                selectedNamesSet.add(tmpRecord.PrinterName);
                tmpRecord = helper.getNext();
            }
        }
        else if (networkPrinter)
        {
            // Add or delete multi-selected users or user roles (from this form) for the multi-selected printers (from the caller form).
            // Iterate through the multi-selected users or user roles (from this form) and prepare the Set parameter for UI helper.
            tmpRecord = helper.getFirst();
            if (isSetupOverRole)
            {
                while (tmpRecord.SecurityRoleName)
                {
                    selectedNamesSet.add(tmpRecord.SecurityRoleName);
                    tmpRecord = helper.getNext();
                }
            }
            else
            {
                while (tmpRecord.UserId)
                {
                    selectedNamesSet.add(tmpRecord.UserId);
                    tmpRecord = helper.getNext();
                }
            }
        }        
            
        // Copy everything relevant from the caller form
        Args helperArgs = new Args();
        helperArgs.menuItemName(callerMenuItemName);
        helperArgs.caller(callerFormRun);
        helperArgs.record(element.args().record());
        helperArgs.parm(element.args().parm());

        DocUserPrinterUIHelper uiHelper = new DocUserPrinterUIHelper();
        uiHelper.parmArgs(helperArgs);
        uiHelper.parmUsersOrPrintersSet(selectedNamesSet);

        // We invoke the UI helper to handle the following menu items:
        //      DocUserPrinterAddSelectedPrinters
        //      DocUserPrinterRemoveSelectedPrinters
        //      DocUserPrinterAddSelectedUsers
        //      DocUserPrinterRemoveSelectedUsers
        //      DocUserPrinterAddSelectedRoles
        //      DocUserPrinterRemoveSelectedRoles
        uiHelper.handleUIActions();     

        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocUserPrinterSelectorTmp</Name>
			<Table>DocUserPrinterSelectorTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrinterName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrinterPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SecurityRoleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserNetworkAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserPersonName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX4:AddUserPrinters</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<Type>Grid</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PrinterGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PrinterName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PrinterName</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Description</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PrinterPath</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PrinterPath</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PrinterActive</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Active</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>UserGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UserId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>UserId</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UserName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>UserName</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UserNetworkAlias</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>UserNetworkAlias</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>UserPersonName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>UserPersonName</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RolesGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SecurityRoleName</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SecurityRoleName</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SecurityRoleDescription</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>DocUserPrinterSelectorTmp</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>