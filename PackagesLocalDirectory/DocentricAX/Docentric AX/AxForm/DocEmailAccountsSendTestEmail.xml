<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocEmailAccountsSendTestEmail</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocEmailAccountsSendTestEmail extends FormRun
{
    DocEmailTo            strEmailTo;
    DocEmailSubject       strEmailSubject;
    str                   senderDisplayName;
    boolean               useDefaultEmailProvider;
    DocEmailProviderType  emailProviderType;
    DocEmailAccount       emailAccount;
    boolean               sendTestAttachment;
    boolean               sendTestEmbeddedImages;

    #define.packVersion1(1)
    #define.CurrentVersion(2) // Added sendTestAttachment and sendTestEmbeddedImages
    
    #localmacro.packListVersion1
        strEmailTo,
        strEmailSubject
    #endmacro

    #localmacro.CurrentList
        strEmailTo,
        strEmailSubject,
        sendTestAttachment,
        sendTestEmbeddedImages
    #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curuserid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifiername lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifiername lastValueDesignName()
    {
        // We call this form from 2 menu items (Send test email and Test default From).
        // Store different last value for them.
        return element.args().menuItemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        // defaults
        strEmailTo = SysUserInfo::find(curUserId()).Email;
        strEmailSubject = 'Test email';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.getControlValuesForSysLastValues();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            case #packVersion1:
                [version, #packListVersion1] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlValuesForSysLastValues</Name>
				<Source><![CDATA[
    void getControlValuesForSysLastValues()
    {
        strEmailTo = EmailTo.text();
        strEmailSubject = EmailSubject.text();
        sendTestAttachment = SendAttachments.value();
        sendTestEmbeddedImages = SendEmbeddedImages.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValuesFromSysLastValues</Name>
				<Source><![CDATA[
    void setControlValuesFromSysLastValues()
    {
        EmailTo.text(strEmailTo);
        EmailSubject.text(strEmailSubject);
        SendAttachments.value(sendTestAttachment);
        SendEmbeddedImages.value(sendTestEmbeddedImages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        
        if (!element.args())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:FormCalledWithoutArguments");
        }

        if (element.args().menuItemName() != menuItemDisplayStr(DocEmailAccountsSendTestEmailCurrentFrom)
            && element.args().menuItemName() != menuItemDisplayStr(DocEmailAccountsSendTestEmailDefaultFrom))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:FormCalledFromInvalidMenuItem");
        }

        if (element.args().menuItemName() == menuItemDisplayStr(DocEmailAccountsSendTestEmailCurrentFrom)
            && element.args().dataset() != tableNum(DocEmailAccount))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:FormCalledWithInvalidDataset");
        }

        // load last values
        xSysLastValue::getLast(this);
        this.setControlValuesFromSysLastValues();
        
        // If the user is clicked on the Send test email button from Additional email sender accounts then
        // From and Sender display name are filled from the current record from the Additional accounts grid.
        if (element.args().menuItemName() == menuItemDisplayStr(DocEmailAccountsSendTestEmailCurrentFrom))
        {
            emailAccount = element.args().record() as DocEmailAccount;
            
            EmailFrom.text(emailAccount.UserName);
            senderDisplayName = emailAccount.EmailSenderDisplayName;

            useDefaultEmailProvider = false;
            emailProviderType = DocEmailProviderType::SMTP;

            // Set label of the SenderAccount control.
            SenderAccount.label("@DocentricAX2:SenderAccount");
            
            // Set value of the SenderAccount control.
            str senderAccountValue = strUpr(enum2Str(emailProviderType));  // SMTP
            if (emailAccount.AccountUserName == '' && emailAccount.RelayServerName != '')
            {
                senderAccountValue = strFmt("@DocentricAX2:EmailProviderAuthenticationNotRequired", senderAccountValue);
            }
            else if (emailAccount.AccountUserName == '' && emailAccount.RelayServerName == '')
            {
                senderAccountValue = strFmt("@DocentricAX2:DefaultEmailSenderNotSet", senderAccountValue);
            }
            else // if (emailAccount.AccountUserName != '')
            {
                senderAccountValue = strFmt('%1: %2', senderAccountValue, emailAccount.AccountUserName);
            }
            SenderAccount.text(senderAccountValue);
        }
        else
        {
            // User is clicked on the Send test email button from Default email sender account.
            // From and Sender display name are filled from default settings.
            str fromAddress = DocEmailMngHelper::getDefaultEmailProviderEmailAddress();
            if (!fromAddress)
            {
                fromAddress = DocEmailMngHelper::getUserEmailAddress();
            }

            EmailFrom.text(fromAddress);
            senderDisplayName = DocParameters::find().EmailAccountDisplayName;
            
            useDefaultEmailProvider = true;
            emailProviderType = DocEmailMngHelper::getDefaultEmailProviderType();

            // Set label of the SenderAccount control.
            SenderAccount.label("@DocentricAX2:DefaultSenderAccount");
            
            // Set value of the SenderAccount control.
            str senderAccountValue = strUpr(enum2Str(emailProviderType));
            switch (emailProviderType)
            {
                case DocEmailProviderType::SMTP:
                    SysEmailParameters sysEmailPar = SysEmailParameters::find();
                    if (sysEmailPar.SMTPUserName == '' && sysEmailPar.SMTPRelayServerName != '')
                    {
                        senderAccountValue = strFmt("@DocentricAX2:EmailProviderAuthenticationNotRequired", senderAccountValue);
                    }
                    else if (sysEmailPar.SMTPUserName == '' && sysEmailPar.SMTPRelayServerName == '')
                    {
                        senderAccountValue = strFmt("@DocentricAX2:DefaultEmailSenderNotSet", senderAccountValue);
                    }
                    else // if (sysEmailPar.SMTPUserName != '')
                    {
                        senderAccountValue = strFmt('%1: %2', senderAccountValue, sysEmailPar.SMTPUserName);
                    }
                    break;
                    
                case DocEmailProviderType::Exchange:
                case DocEmailProviderType::Graph:
                    senderAccountValue = strFmt('%1: %2', senderAccountValue, EmailFrom.text());
                    break;

                default:
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:BatchEmailProviderNotSupportedError", SysEmailParameters::find().MailerNonInteractive));
            }
            SenderAccount.text(senderAccountValue);
        }
        
        // If the value is a placeholder for the current user email, replace it with the real value.
        if (senderDisplayName == DocConstant::EmailSenderDisplayNameCurrentUserPlaceholder || senderDisplayName == DocConstant::EmailSenderDisplayNameUserEmailPlaceholder)
        {
            senderDisplayName = DocEmailMngHelper::getUserEmailAddress(curUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRandomImageResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns randomly selected image from AOT resources.
    /// </summary>
    /// <returns>Container with image as byte array and image content type</returns>
    private container getRandomImageResource()
    {
        const str embeddedImageId = 'DocTestImage';
        container imageByteArray;
        str imageMIMEContentType;

        System.Random sysRandom = new System.Random();
        int randomResourceId = sysRandom.Next(1,10); // Returns random integer between 1 and 9.
        str resouceName = strFmt('%1%2', embeddedImageId, randomResourceId);

        using (System.IO.Stream imageStream = DocGlobalHelper::getAotResourceContent(resouceName))
        {
            imageByteArray = DocGlobalHelper::convertMemoryStreamToContainer(imageStream);
            imageMIMEContentType = DocGlobalHelper::getImageMIMEContentType(imageStream);
        }

        return [imageByteArray, imageMIMEContentType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPDFAttachmentResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns PDF attachment from AOT resources.
    /// </summary>
    /// <returns>Container with PDF file name and PDF document as byte array</returns>
    private container getPDFAttachmentResource()
    {
        const str pdfAttachmentResourceName = 'DocPdfTestDocument';
        const str pdfAttachmentFileName = 'Test Document.pdf';
        container pdfDocumentByteArray;

        using (System.IO.Stream pdfDocStream = DocGlobalHelper::getAotResourceContent(pdfAttachmentResourceName))
        {
            pdfDocumentByteArray = DocGlobalHelper::convertMemoryStreamToContainer(pdfDocStream);
        }

        return [pdfAttachmentFileName, pdfDocumentByteArray];
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>EmailFrom</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// If the From field is modified than change value in the Default sender account field
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            switch (emailProviderType)
            {
                case DocEmailProviderType::Exchange:
                case DocEmailProviderType::Graph:
                    str senderAccountValue = strUpr(enum2Str(emailProviderType)) + strFmt(': %1', EmailFrom.text());
                    SenderAccount.text(senderAccountValue);
                    break;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailTo</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            // check and fix recipient list
            this.text(DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(this.text()));
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Validate From, To fields
            boolean isValid = true;
            if (!EmailFrom.text())
            {
                isValid = false;
                DocGlobalHelper::handleError(strFmt("@DocentricAX2:FieldIsEmpty", "@DocentricAX:From"));
            }
            else if (!DocGlobalHelper::validateEmail(EmailFrom.text()))
            {
                isValid = false;
                DocGlobalHelper::handleError(strFmt("@DocentricAX2:FieldContainsInvalidEmailAddress", "@DocentricAX:From"));
            }
            
            if (!EmailTo.text())
            {
                isValid = false;
                DocGlobalHelper::handleError(strFmt("@DocentricAX2:FieldIsEmpty", "@DocentricAX:To"));
            }
            else if (!DocGlobalHelper::validateEmailList(EmailTo.text()))
            {
                isValid = false;
                DocGlobalHelper::handleError(strFmt("@DocentricAX2:FieldContainsInvalidEmailAddress", "@DocentricAX:To"));
            }

            if (!isValid)
            {
                // Display error messages on this form and stay on it
                // (So that error messages are displayed on this form and not on the caller form)
                return;
            }
           
            xSysLastValue::saveLast(element);

            try
            {
                // Get a PDF email attachment from AOT Resource if it is requested to be sent
                Filename pdfAttachmentFileName = '';
                container pdfAttachmentContent = conNull();

                if (SendAttachments.value())
                {
                    [pdfAttachmentFileName, pdfAttachmentContent] = element.getPDFAttachmentResource();
                }

                // Get a random image resource and image MIME content type if it is requested to be sent
                Map randomImageMap = new Map(Types::String, Types::Container);
                str emailBody;

                if (SendEmbeddedImages.value())
                {
                    const str embeddedImageCID = 'DocTestImage';
                    container randomImageByteArray;
                    str imageMIMEContentType;

                    [randomImageByteArray, imageMIMEContentType] = element.getRandomImageResource();
                    randomImageMap.insert(embeddedImageCID, randomImageByteArray);
                    str randomImageBase64 = DocGlobalHelper::convertToBase64String(DocGlobalHelper::convertContainerToBytes(randomImageByteArray));
                    emailBody = strFmt("@DocentricAX2:TestEmailBody", '%1', embeddedImageCID, imageMIMEContentType, randomImageBase64);
                }
                else
                {
                    emailBody = "@DocentricAX4:TestEmailTimeStampOnly";
                }

                // Send email
                utcdatetime sendingTimestamp = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone());
                System.Net.Mail.MailMessage mailMessage = DocEmailMngHelper::createEmailMessage(
                                                            EmailFrom.text(),                       // Sender email address
                                                            senderDisplayName,                      // Sender display name
                                                            EmailTo.text(),                         // To
                                                            '',                                     // Cc
                                                            '',                                     // Bcc
                                                            EmailSubject.text(),                    // Subject
                                                            strFmt(emailBody, sendingTimestamp),    // Body
                                                            true,                                   // IsHtml
                                                            eMailPriority::Normal,                  // eMail priority
                                                            pdfAttachmentFileName,                  // Attachment file name
                                                            pdfAttachmentContent,                   // Attachment file content
                                                            conNull(),                              // Additional attachments
                                                            randomImageMap);                        // Image Map

                DocSmtpMailClient smtpMailClient;
                boolean success;
                if (useDefaultEmailProvider)
                {
                    switch (emailProviderType)
                    {
                        case DocEmailProviderType::SMTP:
                            smtpMailClient = DocEmailMngHelper::getSmtpClientFromSysParameters();
                            success = DocEmailMngHelper::sendEmailMsgUsingSmtpClient(smtpMailClient, mailMessage);
                            break;
                            
                        case DocEmailProviderType::Exchange:                            
                            success = DocEmailMngHelper::sendEmailMsgUsingExchange(mailMessage);
                            break;
                            
                        case DocEmailProviderType::Graph:
                            success = DocEmailMngHelper::sendEmailMsgUsingGraph(mailMessage);
                            break;    
                            
                        default:
                            success = false;
                            break;
                    }
                }
                else
                {
                    // Gets the SMTP mail client from the provided Additional From email account.
                    DocGlobalHelper::assert(emailAccount.RecId != 0);
                    smtpMailClient = DocEmailMngHelper::getSmtpClientFromAdditionalAccount(emailAccount);
                    success = DocEmailMngHelper::sendEmailMsgUsingSmtpClient(smtpMailClient, mailMessage);
                }

                if (smtpMailClient != null)
                {
                    smtpMailClient.dispose();
                }

                if (!success)
                {
                    throw Exception::Error;
                }

                // The test email has been successfully sent.
                DocGlobalHelper::handleInfo(strFmt("@DocentricAX2:SuccessSendingTestEmail", EmailFrom.text(), EmailTo.text(), sendingTimestamp, SenderAccount.text()));
            }
            catch (Exception::CLRError)
            {
                DocGlobalHelper::handleClrError('', strFmt("@DocentricAX2:FailedToSendTestEmail", EmailFrom.text(), EmailTo.text(), SenderAccount.text()));
            }
            catch
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX2:FailedToSendTestEmail", EmailFrom.text(), EmailTo.text(), SenderAccount.text()));
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DocentricAX2:SendTestEmail</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentSection</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SenderAccount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DisplayLength>50</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<Label>@DocentricAX2:SenderAccount</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>EmailFrom</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048185</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@DocentricAX2:SendTestEmailFromHelp</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocEmailFrom</ExtendedDataType>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>EmailTo</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocEmailTo</ExtendedDataType>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>EmailSubject</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX:EmailSubject</HelpText>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>SysEmailSubject</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SendAttachments</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX4:TestEmailSendWithAttachmentsHelp</HelpText>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@DocentricAX4:TestEmailSendWithAttachments</Label>
						<Style>Checkbox</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>SendEmbeddedImages</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX4:TestEmailSendWithEmbeddedImagesHelp</HelpText>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@DocentricAX4:TestEmailSendWithEmbeddedImages</Label>
						<Style>Checkbox</Style>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS50570</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS30312</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>