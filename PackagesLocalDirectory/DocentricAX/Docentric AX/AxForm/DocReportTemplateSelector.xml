<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportTemplateSelector</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocReportTemplateSelector extends FormRun
{
    private str callerSelectedTemplateId;
    private FormRun callerForm;
    private IDocReportSelector caller;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the selected value to the caller form.
    /// </summary>
    /// <param name = "_selectString">Selected value.</param>
    public void closeSelect(str _selectString)
    {
        str selectedTemplateId = DocReportTemplateSelectorTmp.TemplateId;

        // Set the caller control.
        super(selectedTemplateId);

        if (formHasMethod(callerForm, identifierStr(SelectedTemplate_DC_OnModified_DC)))
        {
            callerForm.SelectedTemplate_DC_OnModified_DC();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();
    
        if (element.args() == null || element.args().caller() == null || !(element.args().caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:FormNotOpenAsLookupForm");
        }

        // Get an instance of the caller form
        callerForm = element.args().caller() as FormRun;

        // Check whether the caller implements the IDocReporSelector interface.
        // This check is necessary because form extensions cannot implement the interface.
        if (element.args().caller() is IDocReportSelector)
        {
            // Get an instance of the interface if the caller form implemented the interface
            caller = element.args().caller() as IDocReportSelector;
        }
        else
        {
            // Check the required methods if the caller form has not implemented the interface (in case of caller form extensions).
            this.checkCallerMethodsExist();
        }

        FormStringControl callerControl = SysTableLookup::getCallerStringControl(element.args(), false);
        if (callerControl == null)
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX4:FormNotOpenAsLookupForm");
        }

        // Set the selected report template from the caller lookup
        callerSelectedTemplateId = callerControl.text();

        str reportId = caller != null ? caller.getReportId() : callerForm.getReportId();
        PrintMgmtDocumentType reportType = caller != null ? caller.getReportType() : callerForm.getReportType();
        boolean reportTypeProvided = caller != null ? caller.isReportTypeProvided() : callerForm.isReportTypeProvided();
        
        boolean showReportColumn, showERColumn;
        [showReportColumn, showERColumn] = DocReportTemplateSelectorTmp::fillTable(DocReportTemplateSelectorTmp, reportId, reportType, reportTypeProvided);

        // Show/Hide the IsERTemplate column.
        DocReportTemplateSelectorTmp_IsERTemplate.visible(showERColumn);

        if (!showReportColumn)
        {
            // Hide the ReportId column.
            DocReportTemplateSelectorTmp_ReportId.visible(false);

            // Add sort columns.
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).sortClear();
            
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).addSortField(fieldNum(DocReportTemplateSelectorTmp, TemplateId), SortOrder::Ascending);
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).addSortField(fieldNum(DocReportTemplateSelectorTmp, CompanyId), SortOrder::Ascending);
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).addSortField(fieldNum(DocReportTemplateSelectorTmp, LanguageId), SortOrder::Ascending);
        }
        else
        {
            // Show the ReportId column.
            DocReportTemplateSelectorTmp_ReportId.visible(true);
            
            // Add sort columns.
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).sortClear();
            
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).addSortField(fieldNum(DocReportTemplateSelectorTmp, ReportId), SortOrder::Ascending);
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).addSortField(fieldNum(DocReportTemplateSelectorTmp, TemplateId), SortOrder::Ascending);
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).addSortField(fieldNum(DocReportTemplateSelectorTmp, CompanyId), SortOrder::Ascending);
            DocReportTemplateSelectorTmp_ds.query().dataSourceNo(1).addSortField(fieldNum(DocReportTemplateSelectorTmp, LanguageId), SortOrder::Ascending);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the form.
    /// </summary>
    public void run()
    {
        super();

        // Find the selected template.
        str selectedTemplateId = callerSelectedTemplateId;

        DocReportTemplateSelectorTmp reportTemplateSelectedRecord;
        reportTemplateSelectedRecord.setTmpData(DocReportTemplateSelectorTmp);
        
        select firstonly reportTemplateSelectedRecord 
            where reportTemplateSelectedRecord.TemplateId == selectedTemplateId;
        try
        {
            DocReportTemplateSelectorTmp_ds.positionToRecord(reportTemplateSelectedRecord);
        }
        catch
        {
            infolog.cut(infologLine(), infologLine());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCallerMethodsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the required methods are present in the caller's form.
    /// This check is required if the caller form does not implement the IDocReportSelector interface.
    /// </summary>
    private void checkCallerMethodsExist()
    {
        if (!formHasMethod(callerForm, identifierStr(getReportId)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(getReportId)));
        }
        if (!formHasMethod(callerForm, identifierStr(getReportType)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(getReportType)));
        }
        if (!formHasMethod(callerForm, identifierStr(isReportTypeProvided)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:CallerFormMissingMethod", identifierStr(isReportTypeProvided)));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocReportTemplateSelectorTmp</Name>
			<Table>DocReportTemplateSelectorTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDefaultTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsERTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TemplateTitle</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX:SelectLanguages</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Lookup</Style>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportTemplateSelectorTmp_TemplateId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TemplateId</DataField>
						<DataSource>DocReportTemplateSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportTemplateSelectorTmp_CompanyId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CompanyId</DataField>
						<DataSource>DocReportTemplateSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportTemplateSelectorTmp_LanguageID</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>LanguageID</DataField>
						<DataSource>DocReportTemplateSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportTemplateSelectorTmp_TemplateTitle</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TemplateTitle</DataField>
						<DataSource>DocReportTemplateSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>DocReportTemplateSelectorTmp_IsDefaultTemplate</Name>
						<Type>CheckBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsDefaultTemplate</DataField>
						<DataSource>DocReportTemplateSelectorTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>DocReportTemplateSelectorTmp_IsERTemplate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsERTemplate</DataField>
						<DataSource>DocReportTemplateSelectorTmp</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocReportTemplateSelectorTmp_ReportId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReportId</DataField>
						<DataSource>DocReportTemplateSelectorTmp</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>DocReportTemplateSelectorTmp</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>