<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportUploadTemplates</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using DocFS = Docentric.AX.Storage.File;

[Form]
public class DocReportUploadTemplates extends FormRun
{
    FormDataSource          callerReportFormDataSource;
    System.IO.Stream        templateZipPackageContent;


}
]]></Source>
			</Method>
			<Method>
				<Name>seDefaultStorageValues</Name>
				<Source><![CDATA[
    public void seDefaultStorageValues()
    {
        DocParameters docParameters = DocParameters::find();

        if (this.isAzureTargetActive())
        {
            if (ContainerName.text() == '')
            {
                ContainerName.text(docParameters.ReportTemplateStorageAzureContainer);
            }

            SharePointSiteUrl.text('');
            SharePointFolderPath.text('');
            FolderName.text('');
        }
        else if (this.isSharePointTargetActive())
        {
            if (SharePointSiteUrl.text() == '')
            {
                SharePointSiteUrl.text(docParameters.ReportTemplateStorageSharePointSiteUrl);
            }

            if (SharePointFolderPath.text() == '')
            {
                SharePointFolderPath.text(docParameters.ReportTemplateStorageSharePointFolderPath);
            }

            ContainerName.text('');
            FolderName.text('');
        }
        else if (this.isFileSystemTargetActive())
        {
            if (FolderName.text() == '')
            {
                FolderName.text(docParameters.ReportTemplateStorageFileSystemFolderPath);
            }

            ContainerName.text('');
            SharePointSiteUrl.text('');
            SharePointFolderPath.text('');
        }
        else
        {
            DocGlobalHelper::handleException(funcName(), 'Unsupported template storage');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAzureTargetActive</Name>
				<Source><![CDATA[
    public boolean isAzureTargetActive()
    {
        return SelectTarget.selection() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSharePointTargetActive</Name>
				<Source><![CDATA[
    public boolean isSharePointTargetActive()
    {
        return SelectTarget.selection() == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFileSystemTargetActive</Name>
				<Source><![CDATA[
    public boolean isFileSystemTargetActive()
    {
        return SelectTarget.selection() == 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        if (templateZipPackageContent == null)
        {
            DocGlobalHelper::handleWarning("@DocentricAX:SelecteAndUploadZipPackageWarning");
            return false;
        }

        if (element.isAzureTargetActive())
        {
            str blobContainerName = ContainerName.text();

            if (blobContainerName == '')
            {
                return false;
            }

            if (!DocAzureBlobHelper::isContainerNameValid(blobContainerName))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:InvalidContainerName", blobContainerName));
                return false;
            }
        }
        else if (element.isSharePointTargetActive())
        {
            str spSiteUrl = SharePointSiteUrl.text();
            str spFolderPath = SharePointFolderPath.text();

            if (spSiteUrl == '' || spFolderPath == '')
            {
                return false;
            }

            // -- Validate site URL.
            if (!DocGlobalHelper::validateURL(spSiteUrl))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointSiteUrlInvalid", spSiteUrl));
                return false;
            }
            
            // -- Validate folder path.
            // Folder path should not start with '/'.
            if (strStartsWith(spFolderPath, DocConstantFile::SharePointFolderPathDelimiter))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointFolderPathInvalidStart", spFolderPath));
                return false;
            }
            if (!DocSharePointHelperV3::isValidSharePointFolderPath(spFolderPath))
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAX:SharePointFolderPathInvalid", spFolderPath));
                return false;
            }
        }
        else // if (element.isFileSystemTargetActive())
        {
            str fsFolderName = FolderName.text();

            if (fsFolderName == '')
            {
                return false;
            }

            if (!DocFileMngHelper::isValidFilePath(fsFolderName))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DefaultFolderInvalidChars", fsFolderName));
                return false;
            }
            if (!DocFileMngHelper::isUncFilePath(fsFolderName))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:DefaultFolderIsNotUncPath", fsFolderName));
                return false;
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        boolean shouldClose = false;
        int uploadedTemplateCount, fileInArchiveListCount;
        
        if (!this.validate())
        {
            return;
        }

        if (element.isAzureTargetActive())
        {
            str azureContainer = ContainerName.text();

            [uploadedTemplateCount, fileInArchiveListCount] =
               DocReportingSetupHelper::uploadTemplatesToAzureContainer(templateZipPackageContent, azureContainer, OverrideIfExists.value(), true);

            if (fileInArchiveListCount == 0)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:NoTemplateInZipArchive");
            }
            else // if (fileInArchiveListCount > 0)
            {
                if (uploadedTemplateCount == 0)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:UploadedTemplateCountZeroAzure", fileInArchiveListCount, azureContainer));
                }
                else // if (uploadedTemplateCount > 0)
                {
                    super();
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:UploadedTemplateCountAzure", uploadedTemplateCount, fileInArchiveListCount, azureContainer));
                    shouldClose = true;
                }
                int failedToUpload = fileInArchiveListCount - uploadedTemplateCount;
                if (failedToUpload > 0 && uploadedTemplateCount > 0)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:TemplateFilesCountFailedUpload", failedToUpload, fileInArchiveListCount));
                }
            }
        }
        else if (element.isSharePointTargetActive())
        {
            str spSiteUrl = SharePointSiteUrl.text();
            str spFolderPath = SharePointFolderPath.text();

            [uploadedTemplateCount, fileInArchiveListCount] =
               DocReportingSetupHelper::uploadTemplatesToSharePoint(templateZipPackageContent, spSiteUrl, spFolderPath, OverrideIfExists.value(), true);
        
            if (fileInArchiveListCount == 0)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:NoTemplateInZipArchive");
            }
            else // if (fileInArchiveListCount > 0)
            {
                if (uploadedTemplateCount == 0)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:UploadedTemplateCountZero", fileInArchiveListCount, spSiteUrl, spFolderPath));
                }
                else // if (uploadedTemplateCount > 0)
                {
                    super();
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:UploadedTemplateCount", uploadedTemplateCount, fileInArchiveListCount, spSiteUrl, spFolderPath));
                    shouldClose = true;
                }
                int failedToUpload = fileInArchiveListCount - uploadedTemplateCount;
                if (failedToUpload > 0 && uploadedTemplateCount > 0)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:TemplateFilesCountFailedUpload", failedToUpload, fileInArchiveListCount));
                }
            }
        }
        else // if (element.isFileSystemTargetActive())
        {
            str fsFolderName = FolderName.text();

            [uploadedTemplateCount, fileInArchiveListCount] =
                DocReportingSetupHelper::uploadTemplatesToFileSystemFolder(templateZipPackageContent, fsFolderName, OverrideIfExists.value(), true);

            if (fileInArchiveListCount == 0)
            {
                DocGlobalHelper::handleWarning("@DocentricAX:NoTemplateInZipArchive");
            }
            else // if (fileInArchiveListCount > 0)
            {
                if (uploadedTemplateCount == 0)
                {
                    DocGlobalHelper::handleWarning(strFmt("@DocentricAX:UploadedTemplateCountZeroFileSystem", fileInArchiveListCount, fsFolderName));
                }
                else // if (uploadedTemplateCount > 0)
                {
                    super();
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:UploadedTemplateCountFileSystem", uploadedTemplateCount, fileInArchiveListCount, fsFolderName
                        ));
                    shouldClose = true;
                }
                int failedToUpload = fileInArchiveListCount - uploadedTemplateCount;
                if (failedToUpload > 0  && uploadedTemplateCount > 0)
                {
                    DocGlobalHelper::handleInfo(strFmt("@DocentricAX:TemplateFilesCountFailedUpload", failedToUpload, fileInArchiveListCount));
                }
            }
        }

        if (shouldClose)
        {
            if (templateZipPackageContent != null)
            {
                templateZipPackageContent.Dispose();
                templateZipPackageContent = null;
            }

            if (callerReportFormDataSource != null)
            {
                callerReportFormDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
    
        if (this.args() != null && this.args().caller() != null)
        {
            FormRun callerFormRun = this.args().caller();
            if (callerFormRun != null)
            {
                callerReportFormDataSource = callerFormRun.dataSource(1);
                if (callerReportFormDataSource != null &&
                    callerReportFormDataSource.table() != tableNum(DocReportTable))
                {
                    callerReportFormDataSource = null;
                }
            }
        }

        SelectTarget.selectionChange();
        OverrideIfExists.value(true);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>SelectTarget</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;
        
            ret = super();
            
            AzureContainerTarget.visible(element.isAzureTargetActive());
            SharePointTarget.visible(element.isSharePointTargetActive());
            FileSystemFolderTarget.visible(element.isFileSystemTargetActive());

            element.seDefaultStorageValues();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SharePointEditButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            str hostname = DocSharePointHelperV3::getSharePointHostNameFromUrl(SharePointSiteUrl.text());
            if (!hostname)
            {
                hostname = DocSharePointHelperV3::getDefaultServer();
            }
            if (hostname)
            {
                DocSharePointFolderSelection spFolderSelection = DocSharePointFolderSelection::construct(
                                                                                                    hostname,
                                                                                                    SharePointSiteUrl.text(),
                                                                                                    SharePointFolderPath.text());
                if (spFolderSelection && spFolderSelection.promptUser())
                {
                    SharePointSiteUrl.text(spFolderSelection.parmSelectedSite().Url);
                    SharePointFolderPath.text(spFolderSelection.getRelativeFolderPath());
                }
            }
            else
            {
                MenuFunction mf = new MenuFunction(menuItemDisplayStr(DocuParameters), MenuItemType::Display);
                DocGlobalHelper::handleError(strfmt("@ApplicationFoundation:DocuType_SharePointNotConfigured", mf.label()), false, funcName());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NavigateToSpSiteUrl</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (SharePointSiteUrl.text() != '')
            {
                Browser b = new Browser();
    
                str sharePointUrlToNavigate = DocFileMngHelper::addUrlDelimiter(SharePointSiteUrl.text()) +
                    SharePointFolderPath.text();
                
                b.navigate(sharePointUrlToNavigate, true);
            }
    
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GetZipPackage</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            str errMsg = "@DocentricAX:TemplatesUploadFailed";
            str templateZipPackageFilename;

            super();

            ZipPackageName.text('');
            if (templateZipPackageContent != null)
            {
                templateZipPackageContent.Dispose();
                templateZipPackageContent = null;
            }

            if (DocConstantGlobal::isOnPremEnvironment())
            {
                DocFS.File templateZipPackage = DocFileUploadOnPremHelper::GetFileFromUser(DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtZip);
                if (templateZipPackage != null)
                {
                    try
                    {
                        templateZipPackageFilename = templateZipPackage.Name;
                        templateZipPackageContent = DocGlobalHelper::convertBytesToMemoryStream(templateZipPackage.Bytes);
                        if (templateZipPackageContent == null || templateZipPackageFilename == '')
                        {
                            throw Exception::Error;
                        }
                        ZipPackageName.text(templateZipPackageFilename);
                    }
                    catch
                    {
                        DocGlobalHelper::handleError(errMsg);
                    }
                }
            }
            else
            {
                FileUploadResultBase result = File::GetFileFromUser(classStr(DocFileUploadTemporaryZipFilesStorageStrategy));
                if (result && result.getUploadStatus())
                {
                    try
                    {
                        templateZipPackageContent = result.openResult();
                        templateZipPackageFilename = result.getFileName();
                    }
                    catch (Exception::CLRError)
                    {
                        DocGlobalHelper::handleClrError('', errMsg, true);
                    }
                    catch (Exception::Internal)
                    {
                        DocGlobalHelper::handleClrError('', errMsg, true);
                    }
                    catch
                    {
                        DocGlobalHelper::handleError(errMsg, true, '', true);
                    }

                    if (templateZipPackageContent == null || templateZipPackageFilename == '')
                    {
                        DocGlobalHelper::handleError(errMsg, true, '', true);
                    }

                    ZipPackageName.text(templateZipPackageFilename);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DocentricAX:UploadReportTemplates</Caption>
		<DefaultAction xmlns="">OKButton</DefaultAction>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>Instructions</Name>
				<ElementPosition>1073741823</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<DisplayHeight>2</DisplayHeight>
				<DisplayHeightMode>Fixed</DisplayHeightMode>
				<DisplayLength>80</DisplayLength>
				<DisplayLengthMode>Fixed</DisplayLengthMode>
				<Text>@DocentricAX:ReportTemplatesUploadInstructions</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GeneralInstructionsGroup</Name>
				<Pattern>FillText</Pattern>
				<PatternVersion>UX7 1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>GeneralInstructions</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>StaticText</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@DocentricAX:ImportInstructions</Text>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogHeader</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>SelectTarget</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>DocTemplateUploadTargetStorageType</EnumType>
						<Label>@DocentricAX:SelectTargetTemplateStorage</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>OverrideIfExists</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX:OverrideIfExistsUploadTemplates</HelpText>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@DocentricAX:OverrideIfExists</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SharePointTarget</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SharePointSiteUrl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:SelectSharePointSiteUrlToPrintReport</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocSharePointSiteUrl</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SharePointFolderPath</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:SelectSharePointFolderToPrintReport</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocSharePointFolderPath</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SharePointEditButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>Edit</NormalImage>
								<Text>@DocentricAX2:EditButton</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>NavigateToSpSiteUrl</Name>
								<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>Internet</NormalImage>
								<Text>@DocentricAX2:OpenButton</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<Breakable>No</Breakable>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AzureContainerTarget</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ContainerName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocAzureContainerName</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FileSystemFolderTarget</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FolderName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:TemplateStorageFS</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocFileSystemFolderPath</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<Breakable>No</Breakable>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ZipPackageNameGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ZipPackageName</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX:SelectZipPackageForUploadTemplates</HelpText>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocReportTemplateZipFilename</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>GetZipPackage</Name>
								<ExtendedStyle>button_inlineImageOnly</ExtendedStyle>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>Upload</NormalImage>
								<Text>@DocentricAX2:UploadFile</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Breakable>No</Breakable>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>