<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFormLetter_invoice_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

/// <summary>
/// The class ProjFormLetter_invoice_DC_Extension is an extension of the class ProjFormLetter_invoice.
/// </summary>
[ExtensionOf(classStr(ProjFormLetter_invoice))]
final class ProjFormLetter_invoice_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints a journal.
    /// </summary>
    /// <param name = "_journalList">The list of journal lines</param>
    /// <param name = "_blPrint">A boolean value.</param>
    public void  printJournal(Set _journalList, boolean _blPrint)
    {
        ProjInvoiceJour projInvoiceJour;

        try
        {
            if (this.proforma())
            {
                if (_journalList != null)
                {
                    SetEnumerator se = _journalList.getEnumerator();
                    while (se.moveNext())
                    {
                        // Insert each of the journal record to the Docentric temporary storage.
                        projInvoiceJour = se.current();

                        If (projInvoiceJour == null)
                        {
                            DocGlobalHelper::handleException(funcName(), 'Failed to obtain project invoice proforma object - invalid object type');
                        }

                        // Get the related ProjInvoiceEmpl records.
                        Map projInvoiceEmplMap = this.addToMap_projInvoiceEmpl_DC(projInvoiceJour);
                        
                        // Get the related ProjInvoiceCost records.
                        Map projInvoiceCostMap = this.addToMap_projInvoiceCost_DC(projInvoiceJour);
                        
                        // Get the related ProjInvoiceItem records.
                        Map projInvoiceItemMap = this.addToMap_projInvoiceItem_DC(projInvoiceJour);

                        // Get the related ProjInvoiceOnAcc records.
                        Map projInvoiceOnAccMap = this.addToMap_projInvoiceOnAcc_DC(projInvoiceJour);
                        
                        // Get the related ProjInvoiceRevenue records.
                        Map projInvoiceRevenueMap = this.addToMap_projInvoiceRevenue_DC(projInvoiceJour);

                        // Create proformaDsObject.
                        DocReportProformaProjInvoiceDataSource proformaDsObject = new DocReportProformaProjInvoiceDataSource();
                        proformaDsObject.parmJournal(projInvoiceJour);

                        proformaDsObject.parmProjInvoiceEmplLines(projInvoiceEmplMap);
                        proformaDsObject.parmProjInvoiceCostLines(projInvoiceCostMap);
                        proformaDsObject.parmProjInvoiceItemLines(projInvoiceItemMap);
                        proformaDsObject.parmProjInvoiceOnAccLines(projInvoiceOnAccMap);
                        proformaDsObject.parmProjInvoiceRevenueLines(projInvoiceRevenueMap);

                        // Add the proformaDsObject to the Docentric's report temporary storage.
                        TemporaryReportDataStorage::AddDataObject(DocConstantDSP::Prefix_ProjInvoice, projInvoiceJour.RecId, proformaDsObject);
                    }
                }
            }
        }
        catch (Exception::CLRError)
        {
            str clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
    
            setPrefix(DocConstant::Docentric);
            error(clrErrorMsg);
    
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToStoreJournalPI", DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
        catch (Exception::Internal)
        {
            str clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
    
            setPrefix(DocConstant::Docentric);
            error(clrErrorMsg);
    
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToStoreJournalPI", DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToStoreJournalPI", DocConstantDiagnostics::ErrProformaReportTempStorage);
        }

        next printJournal(_journalList, _blPrint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToMap_projInvoiceEmpl_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map of project invoice lines - employee.
    /// </summary>
    /// <param name = "_projInvoiceJour">The ProjInvoiceJour table buffer</param>
    /// <returns>The map of project invoice lines - employee</returns>
    private Map addToMap_projInvoiceEmpl_DC(ProjInvoiceJour _projInvoiceJour)
    {
        ProjInvoiceEmpl projInvoiceEmpl;
        Map projInvoiceEmplMap = new Map(Types::Int64, Types::Record);
            
        while select projInvoiceEmpl
            where projInvoiceEmpl.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId 
               && projInvoiceEmpl.InvoiceDate == _projInvoiceJour.InvoiceDate
        {
            projInvoiceEmplMap.insert(projInvoiceEmpl.RecId, projInvoiceEmpl);
        }

        return projInvoiceEmplMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToMap_projInvoiceCost_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map of project invoice lines - expense.
    /// </summary>
    /// <param name = "_projInvoiceJour">The ProjInvoiceJour table buffer</param>
    /// <returns>The map of project invoice lines - expense</returns>
    private Map addToMap_projInvoiceCost_DC(ProjInvoiceJour _projInvoiceJour)
    {
        ProjInvoiceCost projInvoiceCost;
        Map projInvoiceCostMap = new Map(Types::Int64, Types::Record);
            
        while select projInvoiceCost
            where projInvoiceCost.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId 
               && projInvoiceCost.InvoiceDate == _projInvoiceJour.InvoiceDate
        {
            projInvoiceCostMap.insert(projInvoiceCost.RecId, projInvoiceCost);
        }

        return projInvoiceCostMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToMap_projInvoiceItem_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map of project invoice lines - items.
    /// </summary>
    /// <param name = "_projInvoiceJour">The ProjInvoiceJour table buffer</param>
    /// <returns>The map of project invoice lines - items</returns>
    private Map addToMap_projInvoiceItem_DC(ProjInvoiceJour _projInvoiceJour)
    {
        ProjInvoiceItem projInvoiceItem;
        Map projInvoiceItemMap = new Map(Types::Int64, Types::Record);
            
        while select projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId 
               && projInvoiceItem.InvoiceDate == _projInvoiceJour.InvoiceDate
        {
            projInvoiceItemMap.insert(projInvoiceItem.RecId, projInvoiceItem);
        }

        return projInvoiceItemMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToMap_projInvoiceOnAcc_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map of project invoice lines - on-account.
    /// </summary>
    /// <param name = "_projInvoiceJour">The ProjInvoiceJour table buffer</param>
    /// <returns>The map of project invoice lines - on-account</returns>
    private Map addToMap_projInvoiceOnAcc_DC(ProjInvoiceJour _projInvoiceJour)
    {
        ProjInvoiceOnAcc projInvoiceOnAcc;
        Map projInvoiceOnAccMap = new Map(Types::Int64, Types::Record);
            
        while select projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId 
               && projInvoiceOnAcc.InvoiceDate == _projInvoiceJour.InvoiceDate
        {
            projInvoiceOnAccMap.insert(projInvoiceOnAcc.RecId, projInvoiceOnAcc);
        }

        return projInvoiceOnAccMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToMap_projInvoiceRevenue_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map of project invoice lines - fee.
    /// </summary>
    /// <param name = "_projInvoiceJour">The ProjInvoiceJour table buffer</param>
    /// <returns>The map of project invoice lines - fee</returns>
    private Map addToMap_projInvoiceRevenue_DC(ProjInvoiceJour _projInvoiceJour)
    {
        ProjInvoiceRevenue projInvoiceRevenue;
        Map projInvoiceRevenueMap = new Map(Types::Int64, Types::Record);

        while select projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId == _projInvoiceJour.ProjInvoiceId 
               && projInvoiceRevenue.InvoiceDate == _projInvoiceJour.InvoiceDate
        {
            projInvoiceRevenueMap.insert(projInvoiceRevenue.RecId, projInvoiceRevenue);
        }

        return projInvoiceRevenueMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>