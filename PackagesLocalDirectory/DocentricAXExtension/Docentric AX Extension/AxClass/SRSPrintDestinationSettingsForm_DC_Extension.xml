<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SRSPrintDestinationSettingsForm_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SRSPrintDestinationSettingsForm_DC_Extension is an extension of the form SRSPrintDestinationSettingsForm.
/// </summary>
[ExtensionOf(formStr(SRSPrintDestinationSettingsForm))]
final class SRSPrintDestinationSettingsForm_DC_Extension
{
    private DocPrintDestSettingsFile          callingFilePrintDestSettings_DC, workingFilePrintDestSettings_DC;
    private DocPrintDestSettingsEmail         callingEmailPrintDestSettings_DC, workingEmailPrintDestSettings_DC;
    private DocPrintDestSettingsPrinter       callingPrinterPrintDestSettings_DC, workingPrinterPrintDestSettings_DC;
    private DocPrintDestSettingsGenerateDS    callingGenDsPrintDestSettings_DC, workingGenDsPrintDestSettings_DC;
    private DocSrsPrintReportSettings         callingSrsPrintReportSettings_DC, workingSrsPrintReportSettings_DC;
    private SRSPrintDestinationSettings       printDestinationSettings_DC;
    private DocReportId                       reportId_DC;
    private DocReportCaption                  reportCaption_DC;
    private str                               alternativeReportName_DC;
    private PrintMgmtDocumentType             reportType_DC;
    private boolean                           reportTypeProvided_DC;
    private boolean                           srsPrintDestTurnedOn_DC, docentricPrintDestTurnedOn_DC;
    private boolean                           generateDSPrintDestVisible_DC;
    private SRSPrintMediumType                currentlySelectedPrintDest_DC;
    private SRSPrintMediumType                currentlySelectedSrsPrintDest_DC, currentlySelectedDocPrintDest_DC;
    private DictEnum                          dictEnumPrintMediumType_DC;
    private ImageListAppl                     sendToImageList_DC;
    private FormListControl                   sendToControl_DC;
    private str                               currentlySelectedEmailTemplate_DC;  // Used to store current selected value of the SelectedEmailTemplate_DC control
    private DocPrinterSelectorTmp             tmpPrinterList_DC;
    private List                              srsPrintDestPrintMediumTypeList_DC = new List(Types::Container);  // Used to store SSRS print destinations
    private Map                               targetTabPagesMap_DC = new Map(Types::String, Types::Integer);  // Used to store all tabs in the TargetTab control
    
    
    #ResAppl
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SRSPrintDestinationSettingsDelegates_initCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form is initialized.
    /// </summary>
    /// <param name="settingsForm">An instance of FormRun class</param>
    [SubscribesTo(classStr(SRSPrintDestinationSettingsDelegates), delegateStr(SRSPrintDestinationSettingsDelegates, initCompleted))]
    public static void SRSPrintDestinationSettingsDelegates_initCompleted(FormRun settingsForm)
    {
        // Fix the with of the SendTo list view due to improper sizing when the feature New grid control is enabled
        settingsForm.design().controlName(formControlStr(SRSPrintDestinationSettingsForm, SendTo)).widthMode(FormWidth::SizeToContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current report id.
    /// </summary>
    /// <returns>Report Id</returns>
    public str getReportId()
    {
        return reportId_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current report type.
    /// </summary>
    /// <returns>Report type</returns>
    public PrintMgmtDocumentType getReportType()
    {
        return reportType_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportTypeProvided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating if the report type is provided.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isReportTypeProvided()
    {
        return reportTypeProvided_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocentricPrintDestActive_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if a Docentric print destination is currently selected.
    /// </summary>
    /// <returns>True, if the currently selected print destination is a Docentric print destination</returns>
    public boolean isDocentricPrintDestActive_DC()
    {
        return docentricPrintDestTurnedOn_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPrintDest_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets currently selected print destination, no matter if it is a Docentric or SSRS print destination.
    /// Use this.isDocentricPrintDestActive_DC() or DocSrsReportRunUtil::isDocentricPrintDestination(this.getCurrentPrintDest_DC())
    /// to determine if the currently selected print destination is a Docentric print destination.
    /// </summary>
    /// <returns>Currently selected print destination</returns>
    public SRSPrintMediumType getCurrentPrintDest_DC()
    {
        return currentlySelectedPrintDest_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterList_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the buffer of the DocPrinterSelectorTmp type, which holds a list of
    /// allowed printers for the current report and user, and populates the custom lookup form
    /// for the printer selection on the Docentric Printer print destination.
    /// </summary>
    /// <param name = "_tmpPrinterList">
    /// Buffer with allowed printers, initialized in the lookup form, and stored in this form,
    /// so that we avoid multiple initialization of potentially long list of printers.
    /// </param>
    /// <returns>DocPrinterSelectorTmp buffer with a list of printers</returns>
    public DocPrinterSelectorTmp parmPrinterList_DC(DocPrinterSelectorTmp _tmpPrinterList = tmpPrinterList_DC)
    {
        tmpPrinterList_DC = _tmpPrinterList;
        return tmpPrinterList_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSrsBuiltInDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating if SSRS build-in design is used.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean useSrsBuiltInDesign()
    {
        return SelectedTemplate_DC.text() == DocConstant::BuiltInSsrsDesignPlaceholder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUseEmailTemplate_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating if the email template will be used for the email body.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean getUseEmailTemplate_DC()
    {
        return UseEmailTemplate_DC.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateBody_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email template body for provided email template id and language id.
    /// This method is called when the email template is selected from the list in HTML editor.
    /// </summary>
    /// <param name = "_sender">Sender</param>
    /// <param name = "_emailTempolateId">Email template id</param>
    /// <param name = "_languageId">Language id</param>
    /// <returns>Email template body</returns>
    public str getEmailTemplateBody_DC(DocentricHtmlEditorControl _sender, str _emailTempolateId, LanguageId _languageId)
    {
        return DocReportEmailTemplate::getEmailTemplateSnippet(_emailTempolateId, curExt(), _languageId).HtmlBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the SendTo control.
    /// </summary>
    /// <returns>Instance of the SendTo control</returns>
    public FormListControl sendTo()
    {
        if (sendToControl_DC == null)
        {
            sendToControl_DC = this.control(this.controlId(formControlStr(SRSPrintDestinationSettingsForm, SendTo)));
        }
        return sendToControl_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValue_printMediumType_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current Docentric print medium type.
    /// </summary>
    public void setFieldValue_printMediumType_DC()
    {
        if (DocSrsReportRunUtil::isDocentricPrintDestination(currentlySelectedPrintDest_DC))
        {
            this.printMediumType = currentlySelectedPrintDest_DC;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDestinationSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currnet destination settings.
    /// </summary>
    /// <returns>Print destination settings</returns>
    public SRSPrintDestinationSettings printDestinationSettings_DC()
    {
        if (!printDestinationSettings_DC)
        {
            if (this.args() != null)
            {
                printDestinationSettings_DC = this.args().caller() as SRSPrintDestinationSettings;
            }
        }

        return printDestinationSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workingFilePrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets working File print destination settings.
    /// </summary>
    /// <returns>Working File print destination settings</returns>
    public DocPrintDestSettingsFile workingFilePrintDestSettings_DC()
    {
        return workingFilePrintDestSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workingEmailPrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets working Email print destination settings.
    /// </summary>
    /// <returns>Working Email print destination settings</returns>
    public DocPrintDestSettingsEmail workingEmailPrintDestSettings_DC()
    {
        return workingEmailPrintDestSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workingPrinterPrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets working Printer print destination settings.
    /// </summary>
    /// <returns>Working Printer print destination settings</returns>
    public DocPrintDestSettingsPrinter workingPrinterPrintDestSettings_DC()
    {
        return workingPrinterPrintDestSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workingSrsPrintReportSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets working print report settings settings.
    /// </summary>
    /// <returns>Working print report settings settings</returns>
    public DocSrsPrintReportSettings workingSrsPrintReportSettings_DC()
    {
        return workingSrsPrintReportSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new print destination settings form.
    /// </summary>
    public void init()
    {
        // Publish the event that the built-in form's init() method is going to start and the Docentric pre-event handler is not start executing yet.
        SRSPrintDestinationSettingsForm_DC_Delegate::instance().onFormPreInit_DC(this);

        // Configure which print destination sets will be visible: only SSRS's, only Docentric's or both.
        DocSrsReportRunUtil::configurePrintDestinationsVisibility(this.printDestinationSettings_DC());
        
        dictEnumPrintMediumType_DC = new DictEnum(enumNum(SRSPrintMediumType));

        // Initialize flags.
        currentlySelectedPrintDest_DC = this.printDestinationSettings_DC().printMediumType();
        
        generateDSPrintDestVisible_DC = DocParameters::find().GenerateDsVisible;
        
        // Change the current print destionation if needed.
        if (!generateDSPrintDestVisible_DC && currentlySelectedPrintDest_DC == SRSPrintMediumType::GenerateDataSource_DC)
        {
            currentlySelectedPrintDest_DC = SRSPrintMediumType::Screen_DC;
            this.printDestinationSettings_DC().printMediumType(SRSPrintMediumType::Screen_DC);
        }

        docentricPrintDestTurnedOn_DC = DocSrsReportRunUtil::isDocentricPrintDestination(currentlySelectedPrintDest_DC);
        srsPrintDestTurnedOn_DC = !docentricPrintDestTurnedOn_DC;
        
        if (docentricPrintDestTurnedOn_DC)
        {
            currentlySelectedDocPrintDest_DC = currentlySelectedPrintDest_DC;
            if (!DocGlobalHelper::isSSRSScreenPrintDestinationVisible())
            {
                currentlySelectedSrsPrintDest_DC = SRSPrintMediumType::File;
            }
            else
            {
                currentlySelectedSrsPrintDest_DC = SRSPrintMediumType::Screen;
            }
        }
        else // if (srsPrintDestTurnedOn_DC)
        {
            currentlySelectedSrsPrintDest_DC = currentlySelectedPrintDest_DC;
            if (!DocGlobalHelper::isSSRSScreenPrintDestinationVisible() && currentlySelectedSrsPrintDest_DC == SRSPrintMediumType::Screen)
            {
                currentlySelectedSrsPrintDest_DC = SRSPrintMediumType::File;
                this.printDestinationSettings_DC().printMediumType(SRSPrintMediumType::File);
            }
            currentlySelectedDocPrintDest_DC = SRSPrintMediumType::Screen_DC;
        }

        // Set Docentric report info in the print destination settings and get the alternative report name if possible.
        alternativeReportName_DC =
           DocSrsReportRunUtil::checkAndSetDocentricReportInfo(this.printDestinationSettings_DC(), this.args().parm());

        // Set report ID and caption (if known)
        reportId_DC = this.printDestinationSettings_DC().parmTmpPrintDestSettings_DC().parmReportId();
        reportCaption_DC = this.printDestinationSettings_DC().parmTmpPrintDestSettings_DC().parmReportCaption();
        reportType_DC = this.printDestinationSettings_DC().parmTmpPrintDestSettings_DC().parmPrintMgmtDocumentType();
        reportTypeProvided_DC = this.printDestinationSettings_DC().parmTmpPrintDestSettings_DC().parmPrintMgmtDocumentTypeProvided();

        // Set working print destionation settings.
        callingFilePrintDestSettings_DC = this.printDestinationSettings_DC().parmFilePrintDestSettings_DC();
        workingFilePrintDestSettings_DC = new DocPrintDestSettingsFile();
        workingFilePrintDestSettings_DC.unpack(callingFilePrintDestSettings_DC.pack());

        callingEmailPrintDestSettings_DC = this.printDestinationSettings_DC().parmEmailPrintDestSettings_DC();
        workingEmailPrintDestSettings_DC = new DocPrintDestSettingsEmail();
        workingEmailPrintDestSettings_DC.unpack(callingEmailPrintDestSettings_DC.pack());

        callingPrinterPrintDestSettings_DC = this.printDestinationSettings_DC().parmPrinterPrintDestSettings_DC();
        workingPrinterPrintDestSettings_DC = new DocPrintDestSettingsPrinter();
        workingPrinterPrintDestSettings_DC.unpack(callingPrinterPrintDestSettings_DC.pack());

        callingGenDsPrintDestSettings_DC = this.printDestinationSettings_DC().parmGenerateDSPrintDestSettings_DC();
        workingGenDsPrintDestSettings_DC = new DocPrintDestSettingsGenerateDS();
        workingGenDsPrintDestSettings_DC.unpack(callingGenDsPrintDestSettings_DC.pack());

        callingSrsPrintReportSettings_DC = this.printDestinationSettings_DC().parmSrsPrintReportSettings_DC();
        workingSrsPrintReportSettings_DC = new DocSrsPrintReportSettings();
        workingSrsPrintReportSettings_DC.unpack(callingSrsPrintReportSettings_DC.pack());

        // Set default values if not set for all print destination settings.
        if (reportId_DC)
        {
            workingEmailPrintDestSettings_DC.setDefaultParmValues(reportId_DC, reportCaption_DC, false);
            workingPrinterPrintDestSettings_DC.setDefaultParmValues(reportId_DC, reportCaption_DC);
            workingGenDsPrintDestSettings_DC.setDefaultParmValues(reportId_DC);
            workingFilePrintDestSettings_DC.setDefaultParmValues(reportId_DC, reportCaption_DC);
        }
        else
        {
            workingEmailPrintDestSettings_DC.setDefaultParmValues('', alternativeReportName_DC, false);
            workingPrinterPrintDestSettings_DC.setDefaultParmValues('', alternativeReportName_DC);
            workingGenDsPrintDestSettings_DC.setDefaultParmValues(alternativeReportName_DC);
            workingFilePrintDestSettings_DC.setDefaultParmValues('', alternativeReportName_DC);
        }


        // Call the base method
        next init();


        // Fill the map with tabs in the TargetTab control.
        this.fillTargetTabPagesMap_DC();

        // Initialize the SendTo list control.
        this.rebuildSendToListInit_DC();

        // NOTE: From 3.4.0 instead of combobox, the custom lookup form is used for printer selection.
        // The available printer list is stored in this.parmPrinterList_DC() temp table, which gets populated only once in the custom lookup form.
        // 1) Build printer combo box for Docentric Printer print destination.
        //DocPrinterManager::populatePrinterCombo(PrinterNameCombo_DC, reportId_DC, reportType_DC, reportTypeProvided_DC);

        // 2) Fill Docentric controls.
        this.fillControlsFromDocentricPrintDestSettings_DC();

        // 3) Initial initialization of the drop dialog buttons for the Email_DC print destination.
        MailToEdit_DC.parameters(this.destinationParameters(EmailTo_DC));
        MailCcEdit_DC.parameters(this.destinationParameters(EmailCc_DC));
        MailBccEdit_DC.parameters(this.destinationParameters(EmailBcc_DC));

        // 4) Change the caption of the form.
        if (srsPrintDestTurnedOn_DC)
        {
            this.design().caption("@SYS131685");
        }
        else // if (docentricPrintDestTurnedOn_DC)
        {
            this.design().caption("@DocentricAX:DocentricPrintDestSettings");
        }

        // 5) Enable/Disable the Save to Azure blob storage/Azure Files/SharePoint/Attachments/File system tab page
        //    and add the 'Is dirty' indicator to the corresponding tab pages caption.
        this.SaveToSharePoint_DC_OnClicked_DC();
        this.SaveToAttachments_DC_OnClicked_DC();
        this.SaveToAzureBlobStorage_DC_OnClicked_DC();
        this.SaveToAzureFiles_DC_OnClicked_DC();

        // 6) Show/Hide the Save to File system tab page.
        if (DocConstantGlobal::isOneBoxEnvironment() || DocConstantGlobal::isOnPremEnvironment())
        {
            // If the environment is on-premises or OneBox, show the Save to File system tab page.
            // Enable/Disable the controls and add the 'Is dirty' indicator if needed.
            SaveToFileSystemTabPage_DC.visible(true);
            this.SaveToFileSystem_DC_OnClicked_DC();
        }
        else
        {
            SaveToFileSystemTabPage_DC.visible(false);
        }

        // 7) Show/Hide SSRS output file format combobox and change the Select template tabpage caption.
        this.SelectedTemplate_DC_OnModified_DC(false);

        // 8) Show/Hide HTML body (HTML editor).
        this.IsHtmlBody_DC_OnClicked_DC();

        // 9) Enable/Disable the "Print to PDF" options (Docentric Printer print destination).
        this.PrintAsPdf_DC_OnClicked_DC();

        // 10) Show/Hide the "Print as PDF" tab page and change the PrintAsPdf tabpage caption.
        PrintAsPdfTabPage_DC.visible(!DocConstantGlobal::isOnPremEnvironment());

        // 11) Enable/Disable Print archive note and change the Option tabpage caption.
        this.PrintArchive_DC_OnClicked_DC();

        // 12) Change the Option tabpage caption.
        this.PreviewBeforePrint_DC_OnClicked_DC();

        // 13) Collapse all Print destination target tabs.
        this.collapseAllTabs_DC();

        // 14) Show/Hide the "Select Docentric Engine" combobox (Generate DS print destination)
        DsDocentricEngine_DC.visible(DocParameters::find().DocentricEngine == DocDocentricEngine::Both);
        
        // 15) Hide pre-release features if they are not enabled.
        DocFeaturePreview::applyFeaturePreviewToFormRun(this);

        // 16) Publish the event that the built-in form's init() method is completed and that the Docentric post-event handler is completed.
        SRSPrintDestinationSettingsForm_DC_Delegate::instance().onFormPostInit_DC(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs print destination form.
    /// </summary>
    public void run()
    {
        if (this.sendTo().visible() == false)
        {
            // This form is called from SrsReportViewerForm in order to send the report to a printer.
            // Don't show the Show Docentric print destination button.
            ShowDocentricPrintDest_DC.visible(false);
        }

        // Hide the Show Docentric/SSRS print destination buttons, if it's configured to do so.
        DocPrintDestSettingsFormMode pdsMode = DocParameters::find().PrintDestSettingsFormMode;
        switch (pdsMode)
        {
            case DocPrintDestSettingsFormMode::UseBothSsrsAndDocentric:
                // Do nothing.
                break;

            case DocPrintDestSettingsFormMode::UseOnlyDocentric:
            case DocPrintDestSettingsFormMode::UseOnlySsrs:
                ShowDocentricPrintDest_DC.visible(false);
                ShowSrsPrintDest_DC.visible(false);
                break;
        }

        // Set the placeholderList and emailTemplateList of the BodyHTML_DC control.
        str placeholderListStr = DocPlaceholderAttHtmlEditorHelper::getPlaceholderListStr(reportID_DC, reportType_DC, reportTypeProvided_DC);
        str emailTemplateListStr = DocReportEmailTemplateSelectorTmp::getEmailTemplateListStr(reportID_DC, reportType_DC, reportTypeProvided_DC, false);
        DocentricHtmlEditorControl htmlControl = BodyHtml_DC as DocentricHtmlEditorControl;
        htmlControl.parmPlaceholders(placeholderListStr);
        htmlControl.parmEmailTemplates(emailTemplateListStr);

        // Publish the event that the built-in form's run() method is going to start and the Docentric pre-event handler is completed.
        SRSPrintDestinationSettingsForm_DC_Delegate::instance().onFormPreRun_DC(this);


        // Call the base method
        next run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the close event of print destination settings dialog.
    /// </summary>
    public void closeOk()
    {
        boolean shouldBeClosed, promptValidationFailedMsg;

        [shouldBeClosed, promptValidationFailedMsg] = this.handlePrintDestinationBeforeClose_DC();

        if (promptValidationFailedMsg)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX:SelectedPrintDestSettingsNotValid", currentlySelectedPrintDest_DC), true, '', true);
        }

        // Exit if the print destination settings are not valid.
        if(!shouldBeClosed)
        {
            throw Exception::Error;
        }

        // Set the field printMediumType to the currentlySelectedPrintDest_DC value
        // (if this is a Docentric print destination), since it was used in the closeOk() method.
        this.setFieldValue_printMediumType_DC();

        // Publish the event that the built-in form's closeOk() method is going to start and the Docentric pre-event handler is completed.
        SRSPrintDestinationSettingsForm_DC_Delegate::instance().onFormPreCloseOk_DC(this);


        // Call the base method
        next closeOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshReportAttachmentCaption_DC</Name>
				<Source><![CDATA[
    /// <summary> 
    /// This method is called:
    ///     1. When this form is opened. Parameter to be provided is negative,
    ///        which forces re-calculating the number of attachments.
    ///     2. Whe the DocReportAttachment form is closed, which forces
    ///        refreshing the caption of Additional attachments with the
    ///        actual number of report attachments.
    /// </summary>
    /// <param name = "_attachmentCount">When negative, the number of attachments 
    /// is recalculated. Then the Additional attachments caption is refreshed
    /// with the number of report attachments.</param>
    public void refreshReportAttachmentCaption_DC(int _attachmentCount)
    {
        int attachmentCount = _attachmentCount;

        if (attachmentCount < 0)
        {
            List attachmentList = workingSrsPrintReportSettings_DC.parmAttachmentRuleList();
            if (attachmentList == null)
            {
                attachmentCount = 0;
            }
            else
            {
                attachmentCount = attachmentList.elements();
            }
        }

        EmailAditionalAttachmentsTabPage_DC.Caption(strFmt('%1 (%2)', "@DocentricAX2:AdditionalAttachments", attachmentCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillControlsFromDocentricPrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills controls from Docentric print destination settings.
    /// </summary>
    public void fillControlsFromDocentricPrintDestSettings_DC()
    {
        /* Save to archive option */
        PrintArchive_DC.value(workingSrsPrintReportSettings_DC.parmSaveToArchive());

        /* Preview before print */
        PreviewBeforePrint_DC.value(workingSrsPrintReportSettings_DC.parmPreviewBeforePrint());

        /* Selected template */
        if (workingSrsPrintReportSettings_DC.parmTemplateId())
        {
            SelectedTemplate_DC.text(workingSrsPrintReportSettings_DC.parmTemplateId());
        }
        else
        {
            str selectedTemplatePlaceholder =
                DocSrsReportRunUtil::getDocentricSelectedTemplateTokenForSrsPrintDestForm(reportId_DC, reportType_DC, reportTypeProvided_DC);
            SelectedTemplate_DC.text(selectedTemplatePlaceholder);
        }

        /* Printer print destination settings. */
        // Selected printer name.
        PrinterNameLookup_DC.text(workingPrinterPrintDestSettings_DC.parmSelectedPrinterName());
        
        // PageRange.
        if (workingPrinterPrintDestSettings_DC.parmPrintAllPages())
        {
            RangeAllGroup_DC.optionValue(1);
            RangeFromToGroup_DC.optionValue(0);
        }
        else
        {
            RangeAllGroup_DC.optionValue(0);
            RangeFromToGroup_DC.optionValue(1);
        }
        
        // FromPage, ToPage.
        FromPage_DC.value(workingPrinterPrintDestSettings_DC.parmPrintFromPage());
        ToPage_DC.value(workingPrinterPrintDestSettings_DC.parmPrintToPage());
        
        // NumberOfCopies.
        NumberOfCopies_DC.value(workingPrinterPrintDestSettings_DC.parmNumberOfCopies());
        
        // Orientation, Collation, DuplexPrinting.
        Orientation_DC.selection(workingPrinterPrintDestSettings_DC.parmOrientation());
        Collate_DC.value(workingPrinterPrintDestSettings_DC.parmCollated());
        DuplexPrinting_DC.selection(workingPrinterPrintDestSettings_DC.parmDuplexPrinting());

        // Print as PDF.
        PrintAsPdf_DC.value(workingPrinterPrintDestSettings_DC.parmPrintAsPdf());
        PrintAsPdfFilename_DC.text(workingPrinterPrintDestSettings_DC.parmPrintAsPdfFilename());


        /* File print destination settings */
        // Output filename.
        OutputFilename_DC.text(workingFilePrintDestSettings_DC.parmOutputFilename());
        OutputFileFormat_DC.selection(workingFilePrintDestSettings_DC.parmOutputFileFormat());
        OutputFileFormatSrs_DC.selection(workingFilePrintDestSettings_DC.parmOutputFileFormatSrs());
        SendOutputFileToUser_DC.value(workingFilePrintDestSettings_DC.parmSendOutputFileToUser());

        // Save report to Azure blob storage.
        SaveToAzureBlobStorage_DC.value(workingFilePrintDestSettings_DC.parmSaveToAzureBlobStorage());
        AzureContainer_DC.text(workingFilePrintDestSettings_DC.parmAzureBsContainerName());
        AzureBlobPath_DC.text(workingFilePrintDestSettings_DC.parmAzureBsBlobPath());
        AzureBlobName_DC.text(workingFilePrintDestSettings_DC.getAzureBsBlobSymbolicName());
        OverrideAzureBlobStorageFile_DC.value(workingFilePrintDestSettings_DC.parmAzureBsOverrideFileIfExists());
        AzureStorageAccount_DC.text(workingFilePrintDestSettings_DC.parmAzureBsAccountId());

        // Save report to Azure Files.
        SaveToAzureFiles_DC.value(workingFilePrintDestSettings_DC.parmSaveToAzureFiles());
        AzureFileShare_DC.text(workingFilePrintDestSettings_DC.parmAzureFilesFileShareName());
        AzureFileFolderPath_DC.text(workingFilePrintDestSettings_DC.parmAzureFilesDirectoryPath());
        CreateAzureFileShareIfNotExist_DC.value(workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFileShare());
        CreateAzureFoldersIfNotExist_DC.value(workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFolders());
        OverrideAzureFile_DC.value(workingFilePrintDestSettings_DC.parmAzureFilesOverrideFileIfExists());
        AzureFileStorageAccount_DC.text(workingFilePrintDestSettings_DC.parmAzureFilesAccountId());
        AzureFileFullFilename_DC.text(workingFilePrintDestSettings_DC.getAzureFilesFullFileSymbolicName());

        // Save report to SharePoint.
        SaveToSharePoint_DC.value(workingFilePrintDestSettings_DC.parmSaveToSharePoint());
        SharePointSiteUrl_DC.text(workingFilePrintDestSettings_DC.parmSharePointSiteUrl());
        SharePointFolderPath_DC.text(workingFilePrintDestSettings_DC.parmSharePointFolderPath());
        OverrideSharePointFile_DC.value(workingFilePrintDestSettings_DC.parmSharePointOverrideFileIfExists());
        CreateSharePointFoldersIfNotExist_DC.value(workingFilePrintDestSettings_DC.parmSharePointCreateNonExistingFolders());

        // Save report to Attachments.
        SaveToAttachments_DC.value(workingFilePrintDestSettings_DC.parmSaveToAttachments());
        SaveToAttachmentsDocuType_DC.text(workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocuTypeId());
        SaveToAttachmentsRecordType_DC.selection(workingFilePrintDestSettings_DC.parmSaveToAttachmentsRecordType());
        SaveToAttachmentsOverridingMode_DC.selection(workingFilePrintDestSettings_DC.parmSaveToAttachmentsOverridingMode());

        // Save report to File system.
        SaveToFileSystem_DC.value(workingFilePrintDestSettings_DC.parmSaveToFileSystem());
        FileSystemFolder_DC.text(workingFilePrintDestSettings_DC.parmFileSystemFilePath());
        FileSystemFullFilename_DC.text(workingFilePrintDestSettings_DC.getFileSystemFullFileSymbolicName());
        OverrideFileSystemFile_DC.value(workingFilePrintDestSettings_DC.parmFileSystemOverrideFileIfExists());

        /* Email print destination settings */
        EmailTo_DC.text(workingEmailPrintDestSettings_DC.parmEmailTo());
        EmailCc_DC.text(workingEmailPrintDestSettings_DC.parmEmailCc());
        EmailBcc_DC.text(workingEmailPrintDestSettings_DC.parmEmailBcc());
        EmailFrom_DC.text(workingEmailPrintDestSettings_DC.parmEmailFrom());
        Subject_DC.text(workingEmailPrintDestSettings_DC.parmEmailSubject());
        EmailFrom_DC.text(workingEmailPrintDestSettings_DC.parmEmailFrom());
        AttachmentName_DC.text(workingEmailPrintDestSettings_DC.parmEmailAttachmentName());
        AttachmentFileFormat_DC.selection(workingEmailPrintDestSettings_DC.parmEmailAttachmentFileFormat());
        AttachmentFileFormatSrs_DC.selection(workingEmailPrintDestSettings_DC.parmEmailAttachmentFileFormatSrs());
        OpenEmailBeforeSending_DC.value(workingEmailPrintDestSettings_DC.parmOpenEmailBeforeSending());
        UseEmailTemplate_DC.value(workingEmailPrintDestSettings_DC.parmUseEmailTemplate());
        SelectedEmailTemplate_DC.allowEdit(workingEmailPrintDestSettings_DC.parmUseEmailTemplate());
        this.setLabelForSubjectEmailFromAndEmailBody_DC();
        if (workingEmailPrintDestSettings_DC.parmUseEmailTemplate())
        {
            SelectedEmailTemplate_DC.text(workingEmailPrintDestSettings_DC.parmEmailTemplateId());
            currentlySelectedEmailTemplate_DC = SelectedEmailTemplate_DC.text();
            // Load email body from selected email template if UseEmailTemplate is true
            this.SelectedEmailTemplate_DC_OnModified_DC();
        }
        IsHtmlBody_DC.value(workingEmailPrintDestSettings_DC.parmIsHtmlBody());
        if (workingEmailPrintDestSettings_DC.parmIsHtmlBody())
        {
            DocentricHtmlEditorControl htmlControl = BodyHtml_DC as DocentricHtmlEditorControl;
            // load email body from Email print destination settings if UseEmailTemplate is false
            if (!workingEmailPrintDestSettings_DC.parmUseEmailTemplate())
            {
                //htmlControl.parmSourceString(workingEmailPrintDestSettings_DC.parmEmailBody());
                htmlControl.setSourceString(workingEmailPrintDestSettings_DC.parmEmailBody());
            }
            htmlControl.parmAllowEmailTemplates(!workingEmailPrintDestSettings_DC.parmUseEmailTemplate());
            htmlControl.allowEdit(!workingEmailPrintDestSettings_DC.parmUseEmailTemplate());
            htmlControl.registerOverrideMethod(methodStr(DocentricHtmlEditorControl, getEmailTemplateBody), methodStr(SRSPrintDestinationSettingsForm_DC_Extension, getEmailTemplateBody_DC), this);
        }
        else
        {
            // load email body from Email print destination settings if useEmailTemplate is false
            if (!workingEmailPrintDestSettings_DC.parmUseEmailTemplate())
            {
                Body_DC.text(workingEmailPrintDestSettings_DC.parmEmailBody());
            }
            Body_DC.allowEdit(!workingEmailPrintDestSettings_DC.parmUseEmailTemplate());
        }
        
        /* Generate DS print destination settings */
        DsOutputFilename_DC.text(workingGenDsPrintDestSettings_DC.parmXmlDataSourceFilename());
        DsLanguage_DC.text(workingGenDsPrintDestSettings_DC.parmLanguageId());
        DsPreviewLanguages_DC.text(workingGenDsPrintDestSettings_DC.parmPreviewLanguages());
        DsDocentricEngine_DC.selection(workingGenDsPrintDestSettings_DC.parmSelectedEngine());

        /* Report attachment settings */
        this.refreshReportAttachmentCaption_DC(-1); // negative parameter --> force recalculating the number of attachments

        if (reportId_DC)
        {
            DocReportTable docReportTable = DocReportTable::findReportId(reportId_DC);
            IncludeCompanyLogoInDS_DC.value(docReportTable.IncludeCompanyLogoInDS);
            IncludeHiddenParamsInDS_DC.value(docReportTable.IncludeHiddenParamsInDS);
        }
        else if (reportTypeProvided_DC)
        {
            IncludeCompanyLogoInDS_DC.value(DocReportTypeHelper::anyReportIncludeCompanyLogoForType(reportType_DC));
            IncludeHiddenParamsInDS_DC.value(DocReportTypeHelper::anyReportIncludeHiddenParamsForType(reportType_DC));
        }
        else
        {
            IncludeCompanyLogoInDS_DC.value(false);
            IncludeHiddenParamsInDS_DC.value(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSendToImageList_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SendToList control which contains all the available print destinations is build.
    /// </summary>
    /// <param name = "_sendToImageList">An instance of  the ImageListAppl class</param>
    public void setSendToImageList_DC(ImageListAppl _sendToImageList)
    {
        sendToImageList_DC = _sendToImageList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTargetTabPagesMap_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores all tabs in the TargetTab control in the map.
    /// The map is used when we need the tab index for the selected print destination.
    /// </summary>
    private void fillTargetTabPagesMap_DC()
    {
        for (int i = 1; i <= TargetTab.controlCount(); i++)
        {
            FormTabPageControl tabPageControl = TargetTab.controlNum(i);
            targetTabPagesMap_DC.insert(tabPageControl.name(), i);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildSendToListInit_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores all SSRS print destinations (including those added by extensions of
    /// the SRSPrintDestinationSettingsForm) to the list and rebuilds the SendTo list
    /// control.
    /// The list is used when the SSRS print destinations need to be added to the SendTo list
    /// control after the list items of the control have been deleted.
    /// </summary>
    public void rebuildSendToListInit_DC()
    {
        ListItemIdx listItemIdx = this.sendTo().getNextItem(FormListNext::All);
        FormListItem formListItem = this.sendTo().getItem(listItemIdx);
        while (formListItem)
        {
            srsPrintDestPrintMediumTypeList_DC.addStart([formListItem.data(), formListItem.image(), formListItem.text()]);
            listItemIdx = this.sendTo().getNextItem(FormListNext::All, listItemIdx);
            formListItem = this.sendTo().getItem(listItemIdx);
        }
        
        this.rebuildSendToList_DC(this.sendTo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildSendToList_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuilds the SendTo list control.
    /// </summary>
    /// <param name = "_formList">SendTo list control on the destination form</param>
    public void rebuildSendToList_DC(FormListControl _formList)
    {
        FormListItem formListItem;
        
        void switchDestinations()
        {
            OptionsGroup_DC.visible(docentricPrintDestTurnedOn_DC);
            ReportPlaceholderListViewFromPrintDest_DC.visible(docentricPrintDestTurnedOn_DC);
            ReportSetup_DC.visible(docentricPrintDestTurnedOn_DC);

            PrintArchive.visible(srsPrintDestTurnedOn_DC);
            PrintTab.visible(srsPrintDestTurnedOn_DC);
            FileTab.visible(srsPrintDestTurnedOn_DC);
            MailTab.visible(srsPrintDestTurnedOn_DC);
            ScreenTab.visible(srsPrintDestTurnedOn_DC);

            PrintTab_DC.visible(docentricPrintDestTurnedOn_DC);
            FileTab_DC.visible(docentricPrintDestTurnedOn_DC);
            MailTab_DC.visible(docentricPrintDestTurnedOn_DC);
            ScreenTab_DC.visible(docentricPrintDestTurnedOn_DC);
            GenerateDSTab_DC.visible(generateDSPrintDestVisible_DC);

            ShowDocentricPrintDest_DC.visible(srsPrintDestTurnedOn_DC);
            ShowSrsPrintDest_DC.visible(docentricPrintDestTurnedOn_DC);

            if (srsPrintDestTurnedOn_DC)
            {
                this.design().caption("@SYS131685");
            }
            else // if (docentricPrintDestTurnedOn_DC)
            {
                this.design().caption("@DocentricAX:DocentricPrintDestSettings");
            }

            // The HTML editor control needs to be refreshed because the editor inside the control becomes 
            // corrupted if a user moves from DocentricPrintDestinations to SSRSPrintDestinations and back.
            DocentricHtmlEditorControl htmlControl = BodyHtml_DC as DocentricHtmlEditorControl;
            htmlControl.refresh();
        }

        void addDocentricPrintDestinations()
        {
            // BP deviation documented
            formListItem = new FormListItem("@DocentricAX:Email", sendToImageList_DC.image(#ImageMail), SRSPrintMediumType::Email_DC);
            this.sendTo().addItem(formListItem);

            // BP deviation documented
            formListItem = new FormListItem("@DocentricAX:File", sendToImageList_DC.image(#ImageFile), SRSPrintMediumType::File_DC);
            this.sendTo().addItem(formListItem);

            // BP deviation documented
            formListItem = new FormListItem("@DocentricAX:Printer", sendToImageList_DC.image(#ImagePrinter), SRSPrintMediumType::Printer_DC);
            this.sendTo().addItem(formListItem);

            // BP deviation documented
            formListItem = new FormListItem("@DocentricAX:Screen", sendToImageList_DC.image(#ImagePrintPreview), SRSPrintMediumType::Screen_DC);
            this.sendTo().addItem(formListItem);

            // BP deviation documented
            formListItem = new FormListItem("@DocentricAX:PrintArchive", sendToImageList_DC.image(#ImagePrinter), SRSPrintMediumType::Archive_DC);
            this.sendTo().addItem(formListItem);

            if (generateDSPrintDestVisible_DC)
            {
                // BP deviation documented
                formListItem = new FormListItem("@DocentricAX:GenerateDS", sendToImageList_DC.image(#ImageFile), SRSPrintMediumType::GenerateDataSource_DC);
                // NOTE: Image GenerateDS doesn't currently exists in the AOT Resources.
                //formListItem = new FormListItem(dictEnumPrintMediumType_DC.value2Label(SRSPrintMediumType::GenerateDataSource_DC), sendToImageList_DC.image(DocConstant::ImageGenerateDS), SRSPrintMediumType::GenerateDataSource_DC);
                this.sendTo().addItem(formListItem);
            }
        }

        void addStandardPrintDestinations()
        {
            ListEnumerator srsPrintDestPrintMediumTypeListEnum = srsPrintDestPrintMediumTypeList_DC.getEnumerator();
            while (srsPrintDestPrintMediumTypeListEnum.moveNext())
            {
                container srsPrintDestPrintMediumTypeListItemCon = srsPrintDestPrintMediumTypeListEnum.current();
                SRSPrintMediumType srsPrintMediumType = conPeek(srsPrintDestPrintMediumTypeListItemCon, 1);

                if (srsPrintMediumType == SRSPrintMediumType::Screen && !DocGlobalHelper::isSSRSScreenPrintDestinationVisible())
                {
                    continue;
                }
                // BP deviation documented
                formListItem = new FormListItem(conPeek(srsPrintDestPrintMediumTypeListItemCon, 3), conPeek(srsPrintDestPrintMediumTypeListItemCon, 2), srsPrintMediumType);
                this.sendTo().addItem(formListItem);
            }
        }
        
        switchDestinations();

        // Remove all items from the SendTo list.
        _formList.deleteAll();

        if (docentricPrintDestTurnedOn_DC)
        {
            // Add all Docentric print destinations.
            addDocentricPrintDestinations();
        }
        else // if (srsPrintDestTurnedOn_DC)
        {
            // Add all standard SSRS print destinations.
            addStandardPrintDestinations();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePrintDestinationBeforeClose_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the print destination settings before closing the form:
    /// - sets the working version of the print destination settings
    /// - validates the working version
    /// - copies the working version to the calling version of the print destination 
    ///   settings if the validation was successful
    /// - returns the container with the validation status and the flag indicating whether 
    ///   to display error messages -> [shouldBeClosed, promptValidationFailedMsg]
    /// </summary>
    /// <returns>The container with the validation status and the flag indicating whether to display error messages</returns>
    private container handlePrintDestinationBeforeClose_DC()
    {
        boolean    workingPrintDestSettingsIsValid;
        boolean    shouldBeClosed, promptValidationFailedMsg;

        /* Save to archive option */
        workingSrsPrintReportSettings_DC.parmSaveToArchive(PrintArchive_DC.value());

        /* Preview before print */
        workingSrsPrintReportSettings_DC.parmPreviewBeforePrint(PreviewBeforePrint_DC.value());

        /* Selected template */
        if (SelectedTemplate_DC.text() == DocConstant::DefaultTemplatePlaceholder)
        {
            workingSrsPrintReportSettings_DC.parmTemplateId('');
        }
        else
        {
            workingSrsPrintReportSettings_DC.parmTemplateId(SelectedTemplate_DC.text());
        }


        /* Printer print destination settings. */
        // Selected printer name.
        workingPrinterPrintDestSettings_DC.parmSelectedPrinterName(PrinterNameLookup_DC.text());
        
        // PageRange.
        workingPrinterPrintDestSettings_DC.parmPrintAllPages(RangeAllGroup_DC.optionValue() == 1);
        
        // FromPage, ToPage.
        workingPrinterPrintDestSettings_DC.parmPrintFromPage(FromPage_DC.value());
        workingPrinterPrintDestSettings_DC.parmPrintToPage(ToPage_DC.value());
        
        // NumberOfCopies.
        workingPrinterPrintDestSettings_DC.parmNumberOfCopies(NumberOfCopies_DC.value());
        
        // Orientation, Collation, DuplexPrinting.
        workingPrinterPrintDestSettings_DC.parmOrientation(Orientation_DC.selection());
        workingPrinterPrintDestSettings_DC.parmCollated(Collate_DC.value());
        workingPrinterPrintDestSettings_DC.parmDuplexPrinting(DuplexPrinting_DC.selection());

        // Print as PDF.
        workingPrinterPrintDestSettings_DC.parmPrintAsPdf(PrintAsPdf_DC.value());
        workingPrinterPrintDestSettings_DC.parmPrintAsPdfFilename(PrintAsPdfFilename_DC.text());


        /* File print destination settings */
        // Output filename.
        workingFilePrintDestSettings_DC.parmOutputFilename(OutputFilename_DC.text());
        workingFilePrintDestSettings_DC.parmOutputFileFormat(OutputFileFormat_DC.selection());
        workingFilePrintDestSettings_DC.parmOutputFileFormatSrs(OutputFileFormatSrs_DC.selection());
        workingFilePrintDestSettings_DC.parmUseSsrsBuiltInDesign(this.useSrsBuiltInDesign());
        workingFilePrintDestSettings_DC.parmSendOutputFileToUser(SendOutputFileToUser_DC.value());

        // Save report to Azure blob storage.
        workingFilePrintDestSettings_DC.parmSaveToAzureBlobStorage(SaveToAzureBlobStorage_DC.value());
        workingFilePrintDestSettings_DC.parmAzureBsContainerName(AzureContainer_DC.text());
        workingFilePrintDestSettings_DC.parmAzureBsBlobPath(AzureBlobPath_DC.text());
        workingFilePrintDestSettings_DC.parmAzureBsOverrideFileIfExists(OverrideAzureBlobStorageFile_DC.value());
        workingFilePrintDestSettings_DC.parmAzureBsAccountId(AzureStorageAccount_DC.text());

        // Save report to Azure Files.
        workingFilePrintDestSettings_DC.parmSaveToAzureFiles(SaveToAzureFiles_DC.value());
        workingFilePrintDestSettings_DC.parmAzureFilesFileShareName(AzureFileShare_DC.text());
        workingFilePrintDestSettings_DC.parmAzureFilesDirectoryPath(AzureFileFolderPath_DC.text());
        workingFilePrintDestSettings_DC.parmAzureFilesOverrideFileIfExists(OverrideAzureFile_DC.value());
        workingFilePrintDestSettings_DC.parmAzureFilesAccountId(AzureFileStorageAccount_DC.text());
        workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFileShare(CreateAzureFileShareIfNotExist_DC.value());
        workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFolders(CreateAzureFoldersIfNotExist_DC.value());
        
        // Save report to SharePoint.
        workingFilePrintDestSettings_DC.parmSaveToSharePoint(SaveToSharePoint_DC.value());
        workingFilePrintDestSettings_DC.parmSharePointSiteUrl(SharePointSiteUrl_DC.text());
        workingFilePrintDestSettings_DC.parmSharePointFolderPath(SharePointFolderPath_DC.text());
        workingFilePrintDestSettings_DC.parmSharePointOverrideFileIfExists(OverrideSharePointFile_DC.value());
        workingFilePrintDestSettings_DC.parmSharePointCreateNonExistingFolders(CreateSharePointFoldersIfNotExist_DC.value());

        // Save report to Attachments.
        workingFilePrintDestSettings_DC.parmSaveToAttachments(SaveToAttachments_DC.value());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocuTypeId(SaveToAttachmentsDocuType_DC.text());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsRecordType(SaveToAttachmentsRecordType_DC.selection());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsOverridingMode(SaveToAttachmentsOverridingMode_DC.selection());
        if (!workingFilePrintDestSettings_DC.parmSaveToAttachments())
        {
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocumentRestriction(DocDocumentRestriction::Internal);
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsCategory('');
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsTags('');
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsLanguageMode(DocAttachmentLanguageMode::LanguageNeutral);
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveFrom(dateNull());
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveTo(dateNull());
        }

        // Save report to File system.
        workingFilePrintDestSettings_DC.parmSaveToFileSystem(SaveToFileSystem_DC.value());
        workingFilePrintDestSettings_DC.parmFileSystemFilePath(FileSystemFolder_DC.text());
        workingFilePrintDestSettings_DC.parmFileSystemOverrideFileIfExists(OverrideFileSystemFile_DC.value());


        /* Email print destination settings */
        workingEmailPrintDestSettings_DC.parmEmailTo(EmailTo_DC.text());
        workingEmailPrintDestSettings_DC.parmEmailCc(EmailCc_DC.text());
        workingEmailPrintDestSettings_DC.parmEmailBcc(EmailBcc_DC.text());
        workingEmailPrintDestSettings_DC.parmEmailFrom(EmailFrom_DC.text());
        workingEmailPrintDestSettings_DC.parmEmailSubject(Subject_DC.text());
        workingEmailPrintDestSettings_DC.parmEmailFrom(EmailFrom_DC.text());
        workingEmailPrintDestSettings_DC.parmEmailAttachmentName(AttachmentName_DC.text());
        workingEmailPrintDestSettings_DC.parmEmailAttachmentFileFormat(AttachmentFileFormat_DC.selection());
        workingEmailPrintDestSettings_DC.parmEmailAttachmentFileFormatSrs(AttachmentFileFormatSrs_DC.selection());
        workingEmailPrintDestSettings_DC.parmEmailAttachmentUseSsrsBuiltInDesign(this.useSrsBuiltInDesign());
        workingEmailPrintDestSettings_DC.parmOpenEmailBeforeSending(OpenEmailBeforeSending_DC.value());
        workingEmailPrintDestSettings_DC.parmUseEmailTemplate(UseEmailTemplate_DC.value());
        workingEmailPrintDestSettings_DC.parmEmailTemplateId(SelectedEmailTemplate_DC.text());
        workingEmailPrintDestSettings_DC.parmIsHtmlBody(IsHtmlBody_DC.value());
        // Email body should be loaded from the html control only if UseEmailTemplate is false.
        workingEmailPrintDestSettings_DC.parmEmailBody('');
        if (!workingEmailPrintDestSettings_DC.parmUseEmailTemplate())
        {
            if (workingEmailPrintDestSettings_DC.parmIsHtmlBody())
            {
                DocentricHtmlEditorControl htmlControl = BodyHtml_DC as DocentricHtmlEditorControl;
                workingEmailPrintDestSettings_DC.parmEmailBody(htmlControl.getSourceString());
            }
            else
            {
                workingEmailPrintDestSettings_DC.parmEmailBody(Body_DC.text());
            }
        }


        /* Generate DS print destination settings */
        workingGenDsPrintDestSettings_DC.parmXmlDataSourceFilename(DsOutputFilename_DC.text());
        workingGenDsPrintDestSettings_DC.parmLanguageId(DsLanguage_DC.text());
        workingGenDsPrintDestSettings_DC.parmPreviewLanguages(DsPreviewLanguages_DC.text());
        workingGenDsPrintDestSettings_DC.parmSelectedEngine(DsDocentricEngine_DC.selection());


        /*  VALIDATION  */
        // For the selected working print destination, set the default values for the settings if they are not set and validate them.
        workingPrintDestSettingsIsValid = true;

        if (workingSrsPrintReportSettings_DC.parmSaveToArchive()
                && currentlySelectedPrintDest_DC != SRSPrintMediumType::Archive_DC
                && currentlySelectedPrintDest_DC != SRSPrintMediumType::GenerateDataSource_DC)
        {
            workingPrintDestSettingsIsValid = workingSrsPrintReportSettings_DC.validate(currentlySelectedPrintDest_DC, true) 
                                              && workingPrintDestSettingsIsValid;
        }

        switch (currentlySelectedPrintDest_DC)
        {
            case SRSPrintMediumType::Archive_DC:
                workingPrintDestSettingsIsValid = workingSrsPrintReportSettings_DC.validate(currentlySelectedPrintDest_DC, true) 
                                                  && workingPrintDestSettingsIsValid;
                break;

            case SRSPrintMediumType::Email_DC:
                if (reportId_DC)
                {
                    workingEmailPrintDestSettings_DC.setDefaultParmValues(reportId_DC, reportCaption_DC, false);
                }
                else
                {
                    workingEmailPrintDestSettings_DC.setDefaultParmValues('', alternativeReportName_DC, false);
                }
                workingPrintDestSettingsIsValid = workingEmailPrintDestSettings_DC.validate(reportId_DC, true, false, false)
                                                  && workingPrintDestSettingsIsValid;
                break;

            case SRSPrintMediumType::File_DC:
                if (reportId_DC)
                {
                    workingFilePrintDestSettings_DC.setDefaultParmValues(reportId_DC, reportCaption_DC);
                }
                else
                {
                    workingFilePrintDestSettings_DC.setDefaultParmValues('', alternativeReportName_DC);
                }
                workingPrintDestSettingsIsValid = workingFilePrintDestSettings_DC.validate(true, false)
                                                  && workingPrintDestSettingsIsValid;
                break;

            case SRSPrintMediumType::GenerateDataSource_DC:
                if (reportId_DC)
                {
                    workingGenDsPrintDestSettings_DC.setDefaultParmValues(reportId_DC);
                }
                else
                {
                    workingGenDsPrintDestSettings_DC.setDefaultParmValues(alternativeReportName_DC);
                }
                workingPrintDestSettingsIsValid = workingGenDsPrintDestSettings_DC.validate(true)
                                                  && workingPrintDestSettingsIsValid;
                break;

            case SRSPrintMediumType::Printer_DC:
                if (reportId_DC)
                {
                    workingPrinterPrintDestSettings_DC.setDefaultParmValues(reportId_DC, reportCaption_DC);
                }
                else
                {
                    workingPrinterPrintDestSettings_DC.setDefaultParmValues('', alternativeReportName_DC);
                }
                workingPrintDestSettingsIsValid = workingPrinterPrintDestSettings_DC.validate(true, false, false)
                                                  && workingPrintDestSettingsIsValid;
                break;
        }

        // In case of the File print destination check if the report output file already exists on SharePoint
        // but only if the parmSharePointOverrideFileIfExists() flag is not set.
        if (workingPrintDestSettingsIsValid &&
            currentlySelectedPrintDest_DC == SRSPrintMediumType::File_DC && workingFilePrintDestSettings_DC.parmSaveToSharePoint() &&
            !workingFilePrintDestSettings_DC.parmSharePointOverrideFileIfExists())
        {
            if (workingFilePrintDestSettings_DC.fileExistsOnSharePoint(false, false, '', true))
            {
                str reportOutputFilename = workingFilePrintDestSettings_DC.getResolvedOutputFilename(true);
                if (Box::yesNo(
                            strFmt("@DocentricAX:OverrideFileThatAlreadyExistsOnSp", reportOutputFilename),
                            DialogButton::Ok,
                            "@DocentricAX:OverrideReportOutputFile") == DialogButton::Yes)
                {
                    // Set the parmSharePointOverrideFileIfExists() flag.
                    workingFilePrintDestSettings_DC.parmSharePointOverrideFileIfExists(true);
                }
            }
        }

        // In case of the File print destination check if report output file already exists on Azure blob storage
        // but only if the parmAzureBsOverrideFileIfExists() flag is not set.
        if (workingPrintDestSettingsIsValid &&
            currentlySelectedPrintDest_DC == SRSPrintMediumType::File_DC && workingFilePrintDestSettings_DC.parmSaveToAzureBlobStorage() &&
            !workingFilePrintDestSettings_DC.parmAzureBsOverrideFileIfExists())
        {
            if (workingFilePrintDestSettings_DC.fileExistsOnAzure(false, false, '', true))
            {
                str reportOutputFilename = workingFilePrintDestSettings_DC.getResolvedOutputFilename(true);
                if (Box::yesNo(
                            strFmt("@DocentricAX:OverrideFileThatAlreadyExistsOnAzureBlobStorage", reportOutputFilename),
                            DialogButton::Ok,
                            "@DocentricAX:OverrideReportOutputFile") == DialogButton::Yes)
                {
                    // Set the parmAzureBsOverrideFileIfExists() flag.
                    workingFilePrintDestSettings_DC.parmAzureBsOverrideFileIfExists(true);
                }
            }
        }

        // In case of the File print destination check if report output file already exists on Azure Files
        // but only if the parmAzureFileOverrideFileIfExists() flag is not set.
        if (workingPrintDestSettingsIsValid &&
            currentlySelectedPrintDest_DC == SRSPrintMediumType::File_DC && workingFilePrintDestSettings_DC.parmSaveToAzureFiles() &&
            !workingFilePrintDestSettings_DC.parmAzureFilesOverrideFileIfExists())
        {
            if (workingFilePrintDestSettings_DC.fileExistsOnAzureFiles(false, false, '', true))
            {
                str reportOutputFilename = workingFilePrintDestSettings_DC.getResolvedOutputFilename(true);
                if (Box::yesNo(
                            strFmt("@DocentricAX4:OverrideAzureFileThatAlreadyExists", reportOutputFilename),
                            DialogButton::Ok,
                            "@DocentricAX:OverrideReportOutputFile") == DialogButton::Yes)
                {
                    // Set the parmAzureFileOverrideFileIfExists() flag.
                    workingFilePrintDestSettings_DC.parmAzureFilesOverrideFileIfExists(true);
                }
            }
        }

        // In case of the File print destination check if report output file already exists on File system
        // but only if the parmFileSystemOverrideFileIfExists() flag is not set.
        if (workingPrintDestSettingsIsValid &&
            currentlySelectedPrintDest_DC == SRSPrintMediumType::File_DC && workingFilePrintDestSettings_DC.parmSaveToFileSystem() &&
            !workingFilePrintDestSettings_DC.parmFileSystemOverrideFileIfExists())
        {
            if (workingFilePrintDestSettings_DC.fileExistsOnFileSystem(false, false, '', true))
            {
                str reportOutputFilename = workingFilePrintDestSettings_DC.getResolvedOutputFilename(true);
                if (Box::yesNo(
                            strFmt("@DocentricAX:OverrideFileThatAlreadyExistsOnFileSystem", reportOutputFilename, workingFilePrintDestSettings_DC.parmFileSystemFilePath()),
                            DialogButton::Ok,
                            "@DocentricAX:OverrideReportOutputFile") == DialogButton::Yes)
                {
                    // Set the parmFileSystemOverrideFileIfExists() flag.
                    workingFilePrintDestSettings_DC.parmFileSystemOverrideFileIfExists(true);
                }
            }
        }

        /*  COPY WORKING TO ORIGINAL (CALLING) SETTINGS  */
        // If the selected working print destination is valid, save them all to the calling print destinations.
        if (workingPrintDestSettingsIsValid)
        {
            callingEmailPrintDestSettings_DC.unpack(workingEmailPrintDestSettings_DC.pack());
            callingFilePrintDestSettings_DC.unpack(workingFilePrintDestSettings_DC.pack());
            callingGenDsPrintDestSettings_DC.unpack(workingGenDsPrintDestSettings_DC.pack());
            callingPrinterPrintDestSettings_DC.unpack(workingPrinterPrintDestSettings_DC.pack());
            callingSrsPrintReportSettings_DC.unpack(workingSrsPrintReportSettings_DC.pack());
        }

        shouldBeClosed = workingPrintDestSettingsIsValid;
        promptValidationFailedMsg = !workingPrintDestSettingsIsValid;
        return [shouldBeClosed, promptValidationFailedMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirty_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the dirty indicator if the particular settings were changed on a provided form.
    /// </summary>
    /// <param name = "_formName">The name of the form in which the particular settings can be changed</param>
    public void setDirty_DC(FormName _formName)
    {
        boolean isDirty;
        switch (_formName)
        {
            // Output filename suffix settings button
            case formStr(DocPrintDestSettingsFileOutputFilenameSuffixSettings):
                isDirty = workingFilePrintDestSettings_DC.parmUseDocIdInFilename() ||
                          workingFilePrintDestSettings_DC.parmUseTimestampAsSuffix() ||
                          workingFilePrintDestSettings_DC.parmUseGuidAsSuffix();

                OutputFilenameSuffixSettingsButton_DC.text(isDirty ? strFmt('%1*', "@DocentricAX4:OutputFilenameSuffixSettingsButtonCaption") : "@DocentricAX4:OutputFilenameSuffixSettingsButtonCaption");
                if (SaveToAzureBlobStorage_DC.value())
                {
                    this.AzureBlobPath_DC_OnModified_DC();
                }
                if (SaveToAzureFiles_DC.value())
                {
                    this.AzureFilesFolderPath_DC_OnModified_DC();
                }
                break;

            // Attachment settings button
            case formStr(DocPrintDestSettingsFileSaveToAttachmentsSettings):
                isDirty = workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocumentRestriction() != DocDocumentRestriction::Internal ||
                          workingFilePrintDestSettings_DC.parmSaveToAttachmentsCategory() ||
                          workingFilePrintDestSettings_DC.parmSaveToAttachmentsTags() ||
                          workingFilePrintDestSettings_DC.parmSaveToAttachmentsLanguageMode() != DocAttachmentLanguageMode::LanguageNeutral ||
                          workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveFrom() ||
                          workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveTo();

                SaveToAttachmentsSettingsButton_DC.text(isDirty ? strFmt('%1*', "@DocentricAX3:SaveToAttachmentsSettingsButtonCaption") : "@DocentricAX3:SaveToAttachmentsSettingsButtonCaption");
                break;

            // More options settings button
            case formStr(DocPrintDestSettingsMoreOptionsSettings):
                if (currentlySelectedDocPrintDest_DC == SRSPrintMediumType::Archive_DC || workingSrsPrintReportSettings_DC.parmSaveToArchive())
                {
                    isDirty = workingSrsPrintReportSettings_DC.parmSaveToArchiveNote() != '' || workingSrsPrintReportSettings_DC.parmSaveToArchiveDocuTypeId() != '';
                }
                isDirty = isDirty || workingSrsPrintReportSettings_DC.parmPdfAConformanceLevel() != DocPdfAConformanceLevel::None;

                MoreOptionsSettingsButton_DC.text(isDirty ? strFmt('%1*', "@SYS74103") : "@SYS74103");
                this.changeOptionsTabPageCaption_DC();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSendToSelection_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the current print destination node in the SendTo list view 
    /// for specified print medium type.
    /// </summary>
    /// <param name = "_printMediumType">Print medium type</param>
    /// <returns>True if the node was selected; otherwise false</returns>
    private boolean setSendToSelection_DC(SRSPrintMediumType _printMediumType)
    {
        ListItemIdx  listItemIdx;
        FormListItem formListItem;
        ;
        listItemIdx  = this.sendTo().getNextItem(FormListNext::All);
        formListItem = this.sendTo().getItem(listItemIdx);
        while (formListItem)
        {
            if (_printMediumType == formListItem.data())
            {
                formListItem.stateSelected(true);
                this.sendTo().setItem(formListItem);
                return true;
            }
            listItemIdx  = this.sendTo().getNextItem(FormListNext::All, listItemIdx);
            formListItem = this.sendTo().getItem(listItemIdx);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collapseAllTabs_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collapses ayll the fast tabs.
    /// </summary>
    private void collapseAllTabs_DC()
    {
        // Options
        OptionsTabPage_DC.collapse();

        // Template
        TemplateTabPage_DC.collapse();

        // Email
        EmailTemplateTabPage_DC.collapse();
        EmailToAndSubjectTabPage_DC.collapse();
        EmailAttachmentsTabPage_DC.collapse();
        EmailCcAndBccTabPage_DC.collapse();
        EmailBodyTabPage_DC.collapse();
        EmailAditionalAttachmentsTabPage_DC.collapse();

        // Printer
        SelectPrinterTab_DC.collapse();
        PrinterSettingsTabPage_DC.collapse();
        PrintAsPdfTabPage_DC.collapse();

        // File
        OutputFilenameTabPage_DC.collapse();
        SaveToAzureBlobStorageTabPage_DC.collapse();
        SaveToAzureFilesTabPage_DC.collapse();
        SaveToSharePointTabPage_DC.collapse();
        SaveToAttachmentsTabPage_DC.collapse();
        SaveToFileSystemTabPage_DC.collapse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowDocentricPrintDest_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the ShowDocentricPrintDest_DC button is clicked.
    /// </summary>
    public void ShowDocentricPrintDest_DC_OnClicked_DC()
    {
        docentricPrintDestTurnedOn_DC = true;
        srsPrintDestTurnedOn_DC = false;
        
        // Store the currently selected standard SSRS print destination.
        currentlySelectedSrsPrintDest_DC = currentlySelectedPrintDest_DC;

        this.rebuildSendToList_DC(this.sendTo());
        this.setSendToSelection_DC(currentlySelectedDocPrintDest_DC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowSrsPrintDest_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the ShowSrsPrintDest_DC button is clicked.
    /// </summary>
    public void ShowSrsPrintDest_DC_OnClicked_DC()
    {
        docentricPrintDestTurnedOn_DC = false;
        srsPrintDestTurnedOn_DC = true;

        // Store currently selected Docentric print destination.
        currentlySelectedDocPrintDest_DC = currentlySelectedPrintDest_DC;

        this.rebuildSendToList_DC(this.sendTo());
        this.setSendToSelection_DC(currentlySelectedSrsPrintDest_DC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChangedTarget_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the print destination target based on medium type is changed.
    /// </summary>
    /// <param name = "_printMediumType">The print medium type</param>
    public void onChangedTarget_DC(SRSPrintMediumType _printMediumType)
    {
        //-- Store the currently selected print destination.
        currentlySelectedPrintDest_DC = _printMediumType;

        if (docentricPrintDestTurnedOn_DC)
        {
            currentlySelectedDocPrintDest_DC = currentlySelectedPrintDest_DC;
        }
        else // if (srsPrintDestTurnedOn_DC)
        {
            currentlySelectedSrsPrintDest_DC = currentlySelectedPrintDest_DC;
        }

        //-- Handle appereance of the form controls depending on the selected print destination.
        if (docentricPrintDestTurnedOn_DC)
        {
            PrintArchive_DC.enabled(true);            // Enable the 'Save to archive' checbox.
            PrintArchive_DC.resetUserSetting();
            PreviewBeforePrint_DC.enabled(true);      // Enable the 'Preview before print' checkbox.
            PreviewBeforePrint_DC.resetUserSetting();
            OptionsGroup_DC.visible(true);            // Show the 'Options' fast tab.
            EmailTemplateTabPage_DC.visible(false);   // Hide the 'Select email template' fast tab.

            switch (_printMediumType)
            {
                case SRSPrintMediumType::Printer_DC:
                    targetTab.tab(targetTabPagesMap_DC.lookup(PrintTab_DC.name()));
                    this.sendTo().helpText("@SYS53218");
                    this.PrintArchive_DC_OnClicked_DC();  // And change the caption of the Option tabpage.
                    break;

                case SRSPrintMediumType::File_DC:
                    targetTab.tab(targetTabPagesMap_DC.lookup(FileTab_DC.name()));
                    this.sendTo().helpText("@SYS53220");
                    this.PrintArchive_DC_OnClicked_DC();  // And change the caption of the Option tabpage.
                    break;

                case SRSPrintMediumType::Email_DC:
                    targetTab.tab(targetTabPagesMap_DC.lookup(MailTab_DC.name()));
                    this.sendTo().helpText("@SYS53221");
                    EmailTemplateTabPage_DC.visible(true);  // Show the 'Select email template' fast tab.
                    this.PrintArchive_DC_OnClicked_DC();        // And change the caption of the Option tabpage.
                    break;

                case SRSPrintMediumType::Screen_DC:
                    targetTab.tab(targetTabPagesMap_DC.lookup(ScreenTab_DC.name()));
                    this.sendTo().helpText("@SYS53222");
                    PreviewBeforePrint_DC.enabled(false);   // Disable the 'Preview before print' checkbox.
                    this.PrintArchive_DC_OnClicked_DC();        // And change the caption of the Option tabpage.
                    break;

                case SRSPrintMediumType::Archive_DC:
                    targetTab.tab(targetTabPagesMap_DC.lookup(ArchiveTab_DC.name()));
                    this.sendTo().helpText("@SYS53218");
                    PrintArchive_DC.enabled(false);          // Disable the 'Save to archive' checbox.
                    this.PrintArchive_DC_OnClicked_DC();
                    break;

                case SRSPrintMediumType::GenerateDataSource_DC:
                    targetTab.tab(targetTabPagesMap_DC.lookup(GenerateDSTab_DC.name()));
                    this.sendTo().helpText("@DocentricAX:GenerateDSDesc");
                    PrintArchive_DC.enabled(false);           // Disable the 'Save to archive' checbox.
                    PreviewBeforePrint_DC.enabled(false);     // Disable the 'Preview before print' checkbox.
                    OptionsGroup_DC.visible(false);           // Hide the 'Options' fast tab.
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectionChangedSendTo_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SendTo list view selection is changed.
    /// </summary>
    /// <param name = "_idx">The index of selection</param>
    /// <returns>Print medium type</returns>
    public SRSPrintMediumType onSelectionChangedSendTo_DC(int _idx)
    {
        if (docentricPrintDestTurnedOn_DC)
        {
            if (generateDSPrintDestVisible_DC)
            {
                switch(_idx)
                {
                    case 0:
                        this.onChangedTarget_DC(SRSPrintMediumType::GenerateDataSource_DC);
                        return currentlySelectedPrintDest_DC;
                    case 1:
                        this.onChangedTarget_DC(SRSPrintMediumType::Archive_DC);
                        return currentlySelectedPrintDest_DC;
                    case 2:
                        this.onChangedTarget_DC(SRSPrintMediumType::Screen_DC);
                        return currentlySelectedPrintDest_DC;
                    case 3:
                        this.onChangedTarget_DC(SRSPrintMediumType::Printer_DC);
                        return currentlySelectedPrintDest_DC;
                    case 4:
                        this.onChangedTarget_DC(SRSPrintMediumType::File_DC);
                        return currentlySelectedPrintDest_DC;
                    default:  // case 5:
                        return SRSPrintMediumType::Email_DC;
                }
            }
            else
            {
                switch(_idx)
                {
                    case 0:
                        this.onChangedTarget_DC(SRSPrintMediumType::Archive_DC);
                        return currentlySelectedPrintDest_DC;
                    case 1:
                        this.onChangedTarget_DC(SRSPrintMediumType::Screen_DC);
                        return currentlySelectedPrintDest_DC;
                    case 2:
                        this.onChangedTarget_DC(SRSPrintMediumType::Printer_DC);
                        return currentlySelectedPrintDest_DC;
                    case 3:
                        this.onChangedTarget_DC(SRSPrintMediumType::File_DC);
                        return currentlySelectedPrintDest_DC;
                    case 4:
                        this.onChangedTarget_DC(SRSPrintMediumType::Email_DC);
                        return currentlySelectedPrintDest_DC;
                }
            }
        }
        
        return currentlySelectedPrintDest_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintArchive_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /************** CALLED FROM EVENT HANDLERS FOR FORM CONTROLS ON PRINT DEST TABS **************/

    //////////////////////////////
    // SAVE TO PRINT ARCHIVE
    /////////////////////////////
    
    /// <summary>
    /// Called when the PrintArchive_DC checkbox is clicked.
    /// </summary>
    public void PrintArchive_DC_OnClicked_DC()
    {
        workingSrsPrintReportSettings_DC.parmSaveToArchive(PrintArchive_DC.value());

        this.setDirty_DC(formStr(DocPrintDestSettingsMoreOptionsSettings));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PreviewBeforePrint_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    //////////////////////////////
    // PREVIEW BEFORE PRINTS
    /////////////////////////////

    /// <summary>
    /// Called when the PreviewBeforePrint_DC checkbox is clicked.
    /// </summary>    
    public void PreviewBeforePrint_DC_OnClicked_DC()
    {
        this.changeOptionsTabPageCaption_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeOptionsTabPageCaption_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the caption of the OptionsTabPage_DC tab page.
    /// </summary>
    public void changeOptionsTabPageCaption_DC()
    {
        void setCaption(boolean _markAsChanged)
        {
            if (_markAsChanged)
            {
                // If Save to print archive or Preview before print is turned on, show '*' in the caption.
                OptionsTabPage_DC.caption(strFmt('%1 *', "@DocentricAX2:OptionsPdsForm"));
            }
            else
            {
                OptionsTabPage_DC.caption("@DocentricAX2:OptionsPdsForm");
            }
        }

        switch (currentlySelectedDocPrintDest_DC)
        {
            case SRSPrintMediumType::Archive_DC:
                setCaption(workingSrsPrintReportSettings_DC.parmSaveToArchiveNote() != '' ||
                           workingSrsPrintReportSettings_DC.parmSaveToArchiveDocuTypeId() != '' ||
                           PreviewBeforePrint_DC.value() ||
                           workingSrsPrintReportSettings_DC.parmPdfAConformanceLevel() != DocPdfAConformanceLevel::None);
                break;
            case SRSPrintMediumType::Screen_DC:
                setCaption(workingSrsPrintReportSettings_DC.parmSaveToArchive() ||
                           workingSrsPrintReportSettings_DC.parmPdfAConformanceLevel() != DocPdfAConformanceLevel::None);
                break;

            default:
                setCaption(workingSrsPrintReportSettings_DC.parmSaveToArchive() ||
                           PreviewBeforePrint_DC.value() ||
                           workingSrsPrintReportSettings_DC.parmPdfAConformanceLevel() != DocPdfAConformanceLevel::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SelectedTemplate_DC_OnModified_DC</Name>
				<Source><![CDATA[
    //////////////////////////////
    // SELECT TEMPLATE
    /////////////////////////////

    /// <summary>
    /// Called when the SelectedTemplate_DC textbox is modified.
    /// </summary>
    /// <param name = "_forceFileExtensionUpdate">Specifies whether to force file extension update</param>
    public void SelectedTemplate_DC_OnModified_DC(boolean _forceFileExtensionUpdate = true)
    {
        if (!this.useSrsBuiltInDesign())  // Use a Docentric template.
        {
            AttachmentFileFormat_DC.visible(true);
            OutputFileFormat_DC.visible(true);

            this.OutputFileFormat_DC_OnSelectionChanged_DC(_forceFileExtensionUpdate);
            this.AttachmentName_DC_OnModified_DC(_forceFileExtensionUpdate);

            OutputFileFormatSrs_DC.visible(false);
            AttachmentFileFormatSrs_DC.visible(false);

            TemplateTabPage_DC.caption("@DocentricAX:SelectTemplate");
        }
        else  // Use the SSRS Report Design.
        {
            AttachmentFileFormatSrs_DC.visible(true);
            OutputFileFormatSrs_DC.visible(true);
            
            this.OutputFileFormatSrs_DC_OnSelectionChanged_DC();
            this.AttachmentName_DC_OnModified_DC(true);

            OutputFileFormat_DC.visible(false);
            AttachmentFileFormat_DC.visible(false);

            TemplateTabPage_DC.caption(strFmt('%1 (SSRS)', "@DocentricAX:SelectTemplate"));
        }

        // Output filename suffix settings button
        this.setDirty_DC(formStr(DocPrintDestSettingsFileOutputFilenameSuffixSettings));
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailTo_DC_OnModified_DC</Name>
				<Source><![CDATA[
    ///////////////////////////
    // EMAIL print destination
    ///////////////////////////

    /// <summary>
    /// Called when the EmailTo_DC textbox is modified.
    /// </summary>    
    public void EmailTo_DC_OnModified_DC()
    {
        // Clean the email address list.
        str emailAddressList = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailTo_DC.text());
        if (emailAddressList != EmailTo_DC.text())
        {
            EmailTo_DC.text(emailAddressList);
        }

        // Validate email address list but ignore placeholders.
        if (emailAddressList && !DocGlobalHelper::validateEmailListSkipPlaceholders(emailAddressList))
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ToEmailAddressesNotValid", emailAddressList));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailCc_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EmailCc_DC textbox is modified.
    /// </summary>
    public void EmailCc_DC_OnModified_DC()
    {
        // Clean the email address list.
        str emailAddressList = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailCc_DC.text());
        if (emailAddressList != EmailCc_DC.text())
        {
            EmailCc_DC.text(emailAddressList);
        }

        // Validate email address list but ignore placeholders.
        if (emailAddressList && !DocGlobalHelper::validateEmailListSkipPlaceholders(emailAddressList))
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:CcEmailAddressesNotValid", emailAddressList));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailBcc_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EmailBcc_DC textbox is modified.
    /// </summary>
    public void EmailBcc_DC_OnModified_DC()
    {
        // Clean the email address list.
        str emailAddressList = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailBcc_DC.text());
        if (emailAddressList != EmailBcc_DC.text())
        {
            EmailBcc_DC.text(emailAddressList);
        }

        // Validate email address list but ignore placeholders.
        if (emailAddressList && !DocGlobalHelper::validateEmailListSkipPlaceholders(emailAddressList))
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAX:BccEmailAddressesNotValid", emailAddressList));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmailFrom_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EmailFrom_DC textbox is modified.
    /// </summary>
    public void EmailFrom_DC_OnModified_DC()
    {
        // Clean the email address list.
        str emailAddress = DocEmailMngHelper::deleteEmptyAndDuplicatedEmailAddresses(EmailFrom_DC.text());
        if (emailAddress != EmailFrom_DC.text())
        {
            EmailFrom_DC.text(emailAddress);
        }

        // Validate email address list if there are no placeholders.
        if (emailAddress && !DocPlaceholderManager::findAnyPlaceholderCandidateForEmails(emailAddress, false))
        {
            if (!DocGlobalHelper::validateEmail(emailAddress))
            {
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:FromEmailAddressesInvalid", emailAddress));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AttachmentName_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the AttachmentFileFormat_DC combobox, the AttachmentFileFormatSrs_DC combobox 
    /// or the AttachmentName_DC textbox are modified.
    /// </summary>
    /// <param name = "_forceFileExtensionUpdate">Specifies whether to force file extension update</param>
    public void AttachmentName_DC_OnModified_DC(boolean _forceFileExtensionUpdate = true)
    {
        Filename    currentSelectedAttachmentFilepath, currentSelectedAttachmentFileName, currentSelectedAttachmentFileType;
        Filename    newAttachmentFilename, attachmentFilenameExt;
        boolean     updateOutputFilename;

        [currentSelectedAttachmentFileName, currentSelectedAttachmentFileType, currentSelectedAttachmentFilepath] = DocFileMngHelper::splitFilename(AttachmentName_DC.text());

        if (this.useSrsBuiltInDesign())
        {
            attachmentFilenameExt = DocFileMngHelper::convertSrsFileFormatToFileExtensionStr(AttachmentFileFormatSrs_DC.selection());
            updateOutputFilename = true;
        }
        else
        {
            attachmentFilenameExt = DocFileMngHelper::convertToFileExtensionStr(AttachmentFileFormat_DC.selection());
            updateOutputFilename = _forceFileExtensionUpdate || attachmentFilenameExt != DocConstantFile::FileExtXml || !currentSelectedAttachmentFileType;
        }

        if (AttachmentName_DC.text())
        {
            if (currentSelectedAttachmentFileType != attachmentFilenameExt && updateOutputFilename)
            {
                newAttachmentFilename = currentSelectedAttachmentFileName + DocConstantFile::FileExtensionDelimiter + attachmentFilenameExt;
                AttachmentName_DC.text(newAttachmentFilename);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UseEmailTemplate_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the UseEmailTemplate_DC checkbox is clicked.
    /// </summary>
    /// <param name = "_resetSelectedEmailTemplate">Should reset the value of the control SelectEmailTemplate_DC</param>
    public void UseEmailTemplate_DC_OnClicked_DC(boolean _resetSelectedEmailTemplate = true)
    {
        // Expand the Email body fast tab. This is needed because otherwise the HTML control will get the wrong height.
        EmailBodyTabPage_DC.expand();

        DocentricHtmlEditorControl htmlControl = BodyHtml_DC as DocentricHtmlEditorControl;

        // Set the caption for the Subject textbox, EmailFrom textbox and the Body fast tab.
        this.setLabelForSubjectEmailFromAndEmailBody_DC();

        if (UseEmailTemplate_DC.value())  // 'Use email template' is turned on
        {                 
            // If there is no valid licence, user will be warned, but we will still let him select an email template.
            // Later in the pipeline we will throw the exception if the email template is used, but the license is invalid.
            DocLicenseMng::checkLicenseUI(DocConstant::FeatureEmailTemplates, this.name());

            if (htmlControl.getSourceString() != '')
            {
                BoxFormOnce boxFormOnce = BoxFormOnce::construct();
                boxFormOnce.parmDialogBoxType(DialogBoxType::YesNoBox);
                boxFormOnce.parmDialogButton(DialogButton::No);
                boxFormOnce.parmOwner(strFmt('%1 - %2 - 1', this.name(), DocConstant::FeatureEmailTemplates));
                boxFormOnce.parmText("@DocentricAX3:EmailTemplateSetUseEmailTemplateOn");
                boxFormOnce.parmTitle("@DocentricAX3:EmailTemplateCaption");
                if (boxFormOnce.prompt() == DialogButton::No)
                {
                    UseEmailTemplate_DC.value(NoYes::No);
                    this.UseEmailTemplate_DC_OnClicked_DC(false);
                    return;
                }
            }

            htmlControl.parmAllowEmailTemplates(false);
            htmlControl.allowEdit(false);
            SelectedEmailTemplate_DC.allowEdit(true);
            SelectedEmailTemplate_DC.text('');
            this.SelectedEmailTemplate_DC_OnModified_DC();
        }
        else  // 'Use email template' is turned off
        {
            htmlControl.parmAllowEmailTemplates(true);
            htmlControl.allowEdit(true);
            SelectedEmailTemplate_DC.allowEdit(false);
            if (_resetSelectedEmailTemplate)
            {
                SelectedEmailTemplate_DC.text('');
                this.SelectedEmailTemplate_DC_OnModified_DC();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabelForSubjectEmailFromAndEmailBody_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the label property for Subject_DC, EmailFrom_DC and EmailBodyTabPage_DC control 
    /// depending on UseEmailTemplate flag.
    /// </summary>
    private void setLabelForSubjectEmailFromAndEmailBody_DC()
    {
        if (UseEmailTemplate_DC.value())
        {
            EmailTemplateTabPage_DC.caption(strFmt('%1 *', "@DocentricAX3:EmailTemplateSelectorCaption"));
            Subject_DC.label(strFmt('%1 (!)', "@DocentricAX:Subject"));
            EmailBodyTabPage_DC.caption(strFmt("@DocentricAX:Body" + ' (%1)', "@DocentricAX3:EmailTemplatePreview"));
            EmailFrom_DC.label(strFmt('%1 (!)', "@DocentricAX:From"));
        }
        else
        {
            EmailTemplateTabPage_DC.caption("@DocentricAX3:EmailTemplateSelectorCaption");
            Subject_DC.label("@DocentricAX:Subject");
            EmailBodyTabPage_DC.caption("@DocentricAX:Body");
            EmailFrom_DC.label("@DocentricAX:From");
        }

        DocentricHtmlEditorControl htmlControl = BodyHtml_DC as DocentricHtmlEditorControl;
        htmlControl.parmEditorCaption(EmailBodyTabPage_DC.caption());
    }

]]></Source>
			</Method>
			<Method>
				<Name>SelectedEmailTemplate_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SelectedEmailTemplate_DC textbox is modified.
    /// </summary>
    public void SelectedEmailTemplate_DC_OnModified_DC()
    {
        DocentricHtmlEditorControl htmlControl = BodyHtml_DC as DocentricHtmlEditorControl;
        DocReportEmailTemplateHtmlBody htmlBody = '';

        if (SelectedEmailTemplate_DC.text())  // This is true when 'Use email template' is turned on.
        {
            // Get the email template record from the setup for the selected email template id.
            DocReportEmailTemplate docReportEmailTemplate = DocReportEmailTemplate::tryGetEmailTemplate(reportId_DC, SelectedEmailTemplate_DC.text(), curExt(), currentUserLanguage());
            htmlBody = docReportEmailTemplate.HtmlBody;
            EmailBodyTabPage_DC.caption(strFmt("@DocentricAX:Body" + ' (%1)', "@DocentricAX3:EmailTemplatePreview"));
        }

        htmlControl.setSourceString(htmlBody);
        htmlControl.parmEditorCaption(EmailBodyTabPage_DC.caption());
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsHtmlBody_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the IsHtmlBody_DC checkbox is clicked.
    /// </summary>
    public void IsHtmlBody_DC_OnClicked_DC()
    {
        if (IsHtmlBody_DC.value())
        {
            BodyHtml_DC.visible(true);
            Body_DC.visible(false);
        }
        else
        {
            BodyHtml_DC.visible(false);
            Body_DC.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DsOutputFilename_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /////////////////////////////////
    // GENERATE DS print destination
    ////////////////////////////////

    /// <summary>
    /// Called when the DsOutputFilename_DC textbox is modified.
    /// </summary>
    public void DsOutputFilename_DC_OnModified_DC()
    {
        Filename    currentSelectedFilepath, currentSelectedFileName, currentSelectedFileType;
        Filename    newDsFilename;

        [currentSelectedFileName, currentSelectedFileType, currentSelectedFilepath] = DocFileMngHelper::splitFilename(DsOutputFilename_DC.text());

        if (currentSelectedFileName != '')
        {
            newDsFilename = currentSelectedFileName + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtDdsp;
            DsOutputFilename_DC.text(newDsFilename);
        }
        else
        {
            DsOutputFilename_DC.text('');
        }

        workingGenDsPrintDestSettings_DC.parmXmlDataSourceFilename(DsOutputFilename_DC.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharePointEditButton_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    ///////////////////////////
    // FILE print destination
    ///////////////////////////

    /// <summary>
    /// Called when the SharePointEditButton_DC button is clicked.
    /// </summary>
    public void SharePointEditButton_DC_OnClicked_DC()
    {
        str hostname = DocSharePointHelperV3::getSharePointHostNameFromUrl(SharePointSiteUrl_DC.text());
        if (!hostname)
        {
            hostname = DocSharePointHelperV3::getDefaultServer();
        }
        if (hostname)
        {
            DocSharePointFolderSelection spFolderSelection = DocSharePointFolderSelection::construct(
                                                                                                hostname,
                                                                                                SharePointSiteUrl_DC.text(),
                                                                                                SharePointFolderPath_DC.text());
            if (spFolderSelection && spFolderSelection.promptUser())
            {
                workingFilePrintDestSettings_DC.parmSharePointSiteUrl(spFolderSelection.parmSelectedSite().Url);
                workingFilePrintDestSettings_DC.parmSharePointFolderPath(spFolderSelection.getRelativeFolderPath());

                SharePointSiteUrl_DC.text(workingFilePrintDestSettings_DC.parmSharePointSiteUrl());
                SharePointFolderPath_DC.text(workingFilePrintDestSettings_DC.parmSharePointFolderPath());
            }
        }
        else
        {
            MenuFunction mf = new MenuFunction(menuItemDisplayStr(DocuParameters), MenuItemType::Display);
            DocGlobalHelper::handleError(strfmt("@ApplicationFoundation:DocuType_SharePointNotConfigured", mf.label()), false, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharePointNavigateButton_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SharePointNavigateButton_DC button is clicked.
    /// </summary>
    public void SharePointNavigateButton_DC_OnClicked_DC()
    {
        Browser browser;
        str address = '';
        
        if (SharePointSiteUrl_DC.text() != '')
        {
            address = DocFileMngHelper::addUrlDelimiter(SharePointSiteUrl_DC.text()) + SharePointFolderPath_DC.text();
        }

        if(strLen(address) > 0)
        {
            browser = new Browser();
            browser.navigate(address, true, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OutputFilename_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the OutputFilename_DC textbox is modified.
    /// </summary>
    /// <param name = "_forceFileExtensionUpdate">Specifies whether to force file extension update</param>
    public void OutputFilename_DC_OnModified_DC(boolean _forceFileExtensionUpdate = true)
    {
        Filename    currentSelectedFilepath, currentSelectedFileName, currentSelectedFileType;
        Filename    newReportFilename, reportFilenameExt;
        boolean     updateOutputFilename;

        [currentSelectedFileName, currentSelectedFileType, currentSelectedFilepath] = DocFileMngHelper::splitFilename(OutputFilename_DC.text());

        if (this.useSrsBuiltInDesign())
        {
            reportFilenameExt = DocFileMngHelper::convertSrsFileFormatToFileExtensionStr(OutputFileFormatSrs_DC.selection());
            updateOutputFilename = true;
        }
        else
        {
            reportFilenameExt = DocFileMngHelper::convertToFileExtensionStr(OutputFileFormat_DC.selection());
            updateOutputFilename = _forceFileExtensionUpdate || reportFilenameExt != DocConstantFile::FileExtXml || !currentSelectedFileType;
        }

        if (currentSelectedFileName)
        {
            // Change the report output filename to have the correct file extenstion which matches the selected output file format.
            if (currentSelectedFileType != reportFilenameExt && updateOutputFilename)
            {
                newReportFilename = currentSelectedFileName + DocConstantFile::FileExtensionDelimiter + reportFilenameExt;
                OutputFilename_DC.text(newReportFilename);
            }
        }
        else
        {
            OutputFilename_DC.text('');
        }

        workingFilePrintDestSettings_DC.parmOutputFilename(OutputFilename_DC.text());

        if (SaveToAzureBlobStorage_DC.value())
        {
            this.AzureBlobPath_DC_OnModified_DC();
        }
        if (SaveToAzureFiles_DC.value())
        {
            this.AzureFilesFolderPath_DC_OnModified_DC();
        }
        if (SaveToFileSystem_DC.value())
        {
            this.FileSystemFolder_DC_OnModified_DC();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OutputFileFormat_DC_OnSelectionChanged_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the OutputFileFormat_DC combobox selection is changed.
    /// </summary>
    /// <param name = "_forceFileExtensionUpdate">Specifies whether to force file extension update</param>
    public void OutputFileFormat_DC_OnSelectionChanged_DC(boolean _forceFileExtensionUpdate = true)
    {
        this.OutputFilename_DC_OnModified_DC(_forceFileExtensionUpdate);
        workingFilePrintDestSettings_DC.parmOutputFileFormat(OutputFileFormat_DC.selection());
        if (SaveToAzureBlobStorage_DC.value())
        {
            this.AzureBlobPath_DC_OnModified_DC();
        }
        if (SaveToAzureFiles_DC.value())
        {
            this.AzureFilesFolderPath_DC_OnModified_DC();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OutputFileFormatSrs_DC_OnSelectionChanged_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the OutputFileFormatSrs_DC combobox selection is changed.
    /// </summary>
    public void OutputFileFormatSrs_DC_OnSelectionChanged_DC()
    {
        this.OutputFilename_DC_OnModified_DC(true);
        workingFilePrintDestSettings_DC.parmOutputFileFormatSrs(OutputFileFormatSrs_DC.selection());
        if (SaveToAzureBlobStorage_DC.value())
        {
            this.AzureBlobPath_DC_OnModified_DC();
        }
        if (SaveToAzureFiles_DC.value())
        {
            this.AzureFilesFolderPath_DC_OnModified_DC();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveToAzureBlobStorage_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SaveToAzureBlobStorage_DC checkbox is clicked.
    /// </summary>
    public void SaveToAzureBlobStorage_DC_OnClicked_DC()
    {
        if (SaveToAzureBlobStorage_DC.value() == 0)
        {
            // CheckBox was unchecked.
            workingFilePrintDestSettings_DC.parmAzureBsContainerName(AzureContainer_DC.text());
            AzureContainer_DC.text('');
            AzureContainer_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmAzureBsBlobPath(AzureBlobPath_DC.text());
            AzureBlobPath_DC.text('');
            AzureBlobPath_DC.allowEdit(false);
            AzureBlobName_DC.text('');

            workingFilePrintDestSettings_DC.parmAzureBsOverrideFileIfExists(OverrideAzureBlobStorageFile_DC.value());
            OverrideAzureBlobStorageFile_DC.value(false);
            OverrideAzureBlobStorageFile_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmAzureBsAccountId(AzureStorageAccount_DC.text());
            AzureStorageAccount_DC.text('');
            AzureStorageAccount_DC.allowEdit(false);

            SaveToAzureBlobStorageTabPage_DC.caption("@DocentricAX:SaveToAzureBlobStorage");
        }
        else // if (SaveToAzureBlobStorage_DC.value() == 1)
        {
            // CheckBox was checked.
            AzureContainer_DC.text(workingFilePrintDestSettings_DC.parmAzureBsContainerName());
            // If empty, set the default value.
            if (AzureContainer_DC.text() == '')
            {
                AzureContainer_DC.text(DocParameters::find().DefaultTargetAzureContainer);
            }
            AzureContainer_DC.allowEdit(true);

            AzureBlobPath_DC.text(workingFilePrintDestSettings_DC.parmAzureBsBlobPath());
            AzureBlobName_DC.text(workingFilePrintDestSettings_DC.getAzureBsBlobSymbolicName());
            AzureBlobPath_DC.allowEdit(true);

            OverrideAzureBlobStorageFile_DC.value(workingFilePrintDestSettings_DC.parmAzureBsOverrideFileIfExists());
            OverrideAzureBlobStorageFile_DC.allowEdit(true);

            AzureStorageAccount_DC.text(workingFilePrintDestSettings_DC.parmAzureBsAccountId());
            AzureStorageAccount_DC.allowEdit(true);

            SaveToAzureBlobStorageTabPage_DC.caption(strFmt('%1 *', "@DocentricAX:SaveToAzureBlobStorage"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AzureBlobPath_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the AzureBlobPath_DC textbox is modified.
    /// </summary>
    public void AzureBlobPath_DC_OnModified_DC()
    {
        str blobPath = AzureBlobPath_DC.text();
        if (blobPath != '')
        {
            if (strStartsWith(blobPath, DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter) &&
                !strStartsWith(blobPath, DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter + DocConstantFile::AzureBlobStorageVirtualDirectoryDelimiter))
            {
                blobPath = subStr(blobPath, 2, strLen(blobPath) - 1);
            }
        }

        AzureBlobPath_DC.text(blobPath);
        workingFilePrintDestSettings_DC.parmAzureBsBlobPath(blobPath);
        AzureBlobName_DC.text(workingFilePrintDestSettings_DC.getAzureBsBlobSymbolicName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>AzureStorageAccount_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the AzureStorageAccount_DC textbox is modified.
    /// </summary>
    public void AzureStorageAccount_DC_OnModified_DC()
    {
        // Check if an external Azure storage account is selected.
        if (AzureStorageAccount_DC.text() != '')
        {
            // If there is no valid licence, user will be warned, but we will still let him select an external Azure storage account.
            // Later in the pipeline we will throw the exception if the external Azure storage account is used, but the license is invalid.
            DocLicenseMng::checkLicenseUI(DocConstant::FeatureSavingToExternalAzureBlobStorage, this.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveToAzureFiles_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SaveToAzureFiles_DC checkbox is clicked.
    /// </summary>
    public void SaveToAzureFiles_DC_OnClicked_DC()
    {
        if (SaveToAzureFiles_DC.value() == 0)
        {
            // CheckBox was unchecked.
            workingFilePrintDestSettings_DC.parmAzureFilesFileShareName(AzureFileShare_DC.text());
            AzureFileShare_DC.text('');
            AzureFileShare_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmAzureFilesDirectoryPath(AzureFileFolderPath_DC.text());
            AzureFileFolderPath_DC.text('');
            AzureFileFolderPath_DC.allowEdit(false);
            AzureFileFullFilename_DC.text('');

            workingFilePrintDestSettings_DC.parmAzureFilesOverrideFileIfExists(OverrideAzureFile_DC.value());
            OverrideAzureFile_DC.value(false);
            OverrideAzureFile_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFileShare(CreateAzureFileShareIfNotExist_DC.value());
            CreateAzureFileShareIfNotExist_DC.value(false);
            CreateAzureFileShareIfNotExist_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFolders(CreateAzureFoldersIfNotExist_DC.value());
            CreateAzureFoldersIfNotExist_DC.value(false);
            CreateAzureFoldersIfNotExist_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmAzureFilesAccountId(AzureFileStorageAccount_DC.text());
            AzureFileStorageAccount_DC.text('');
            AzureFileStorageAccount_DC.allowEdit(false);

            SaveToAzureFilesTabPage_DC.caption("@DocentricAX4:SaveToAzureFiles");
        }
        else // if (SaveToAzureFiles_DC.value() == 1)
        {
            // CheckBox was checked.
            AzureFileShare_DC.text(workingFilePrintDestSettings_DC.parmAzureFilesFileShareName());
            // If empty, set the default value.
            if (AzureFileShare_DC.text() == '')
            {
                AzureFileShare_DC.text(DocParameters::find().DefaultTargetAzureFileShareName);
            }
            AzureFileShare_DC.allowEdit(true);

            AzureFileFolderPath_DC.text(workingFilePrintDestSettings_DC.parmAzureFilesDirectoryPath());
            AzureFileFullFilename_DC.text(workingFilePrintDestSettings_DC.getAzureFilesFullFileSymbolicName());
            AzureFileFolderPath_DC.allowEdit(true);

            OverrideAzureFile_DC.value(workingFilePrintDestSettings_DC.parmAzureFilesOverrideFileIfExists());
            OverrideAzureFile_DC.allowEdit(true);

            CreateAzureFileShareIfNotExist_DC.value(workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFileShare());
            CreateAzureFileShareIfNotExist_DC.allowEdit(DocParameters::find().AzureFileSharesCreatePermission == DocAzureFileSharesCreatePermission::Configurable);

            CreateAzureFoldersIfNotExist_DC.value(workingFilePrintDestSettings_DC.parmAzureFilesCreateNonExistingFolders());
            CreateAzureFoldersIfNotExist_DC.allowEdit(true);

            AzureFileStorageAccount_DC.text(workingFilePrintDestSettings_DC.parmAzureFilesAccountId());
            AzureFileStorageAccount_DC.allowEdit(true);

            SaveToAzureFilesTabPage_DC.caption(strFmt('%1 *', "@DocentricAX4:SaveToAzureFiles"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AzureFilesFolderPath_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the AzureFilesFolderPath_DC textbox is modified.
    /// </summary>
    public void AzureFilesFolderPath_DC_OnModified_DC()
    {
        str filePath = AzureFileFolderPath_DC.text();
        if (filePath != '')
        {
            if (strStartsWith(filePath, DocConstantFile::AzureFilesDirectoryPathDelimiter) &&
                !strStartsWith(filePath, DocConstantFile::AzureFilesDirectoryPathDelimiter + DocConstantFile::AzureFilesDirectoryPathDelimiter))
            {
                filePath = subStr(filePath, 2, strLen(filePath) - 1);
            }
        }

        AzureFileFolderPath_DC.text(filePath);
        workingFilePrintDestSettings_DC.parmAzureFilesDirectoryPath(filePath);
        AzureFileFullFilename_DC.text(workingFilePrintDestSettings_DC.getAzureFilesFullFileSymbolicName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>AzureFilesStorageAccount_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the AzureFilesStorageAccount_DC textbox is modified.
    /// </summary>
    public void AzureFilesStorageAccount_DC_OnModified_DC()
    {
        // Check if an external Azure storage account is selected.
        if (AzureFileStorageAccount_DC.text() != '')
        {
            // If there is no valid licence, user will be warned, but we will still let him select an external Azure storage account.
            // Later in the pipeline we will throw the exception if the external Azure storage account is used, but the license is invalid.
            DocLicenseMng::checkLicenseUI(DocConstant::FeatureSavingToExternalAzureFiles, this.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveToSharePoint_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /**********************************************/
    /// <summary>
    /// Called when the SaveToSharePoint_DC checkbox is clicked.
    /// </summary>
    public void SaveToSharePoint_DC_OnClicked_DC()
    {
        if (SaveToSharePoint_DC.value() == 0)
        {
            // CheckBox was unchecked.
            SharePointEditButton_DC.enabled(false);
            SharePointNavigateButton_DC.enabled(false);

            workingFilePrintDestSettings_DC.parmSharePointSiteUrl(SharePointSiteUrl_DC.text());
            SharePointSiteUrl_DC.text('');
            SharePointSiteUrl_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmSharePointFolderPath(SharePointFolderPath_DC.text());
            SharePointFolderPath_DC.text('');
            SharePointFolderPath_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmSharePointOverrideFileIfExists(OverrideSharePointFile_DC.value());
            OverrideSharePointFile_DC.value(false);
            OverrideSharePointFile_DC.allowEdit(false);

            workingFilePrintDestSettings_DC.parmSharePointCreateNonExistingFolders(CreateSharePointFoldersIfNotExist_DC.value());
            CreateSharePointFoldersIfNotExist_DC.value(false);
            CreateSharePointFoldersIfNotExist_DC.allowEdit(false);

            SaveToSharePointTabPage_DC.caption("@DocentricAX:SaveToSharePoint");
        }
        else // if (SaveToSharePoint_DC.value() == 1)
        {
            // CheckBox was checked.
            SharePointEditButton_DC.enabled(true);
            SharePointNavigateButton_DC.enabled(true);

            SharePointSiteUrl_DC.text(workingFilePrintDestSettings_DC.parmSharePointSiteUrl());
            SharePointSiteUrl_DC.allowEdit(true);
            
            SharePointFolderPath_DC.text(workingFilePrintDestSettings_DC.parmSharePointFolderPath());
            SharePointFolderPath_DC.allowEdit(true);

            OverrideSharePointFile_DC.value(workingFilePrintDestSettings_DC.parmSharePointOverrideFileIfExists());
            OverrideSharePointFile_DC.allowEdit(true);

            CreateSharePointFoldersIfNotExist_DC.value(workingFilePrintDestSettings_DC.parmSharePointCreateNonExistingFolders());
            CreateSharePointFoldersIfNotExist_DC.allowEdit(true);

            SaveToSharePointTabPage_DC.caption(strFmt('%1 *', "@DocentricAX:SaveToSharePoint"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharePointFolderPath_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SharePointFolderPath_DC textbox is modified.
    /// </summary>
    public void SharePointFolderPath_DC_OnModified_DC()
    {
        System.String sharePointFolderPath = SharePointFolderPath_DC.text();

        if (System.String::IsNullOrEmpty(sharePointFolderPath) == false)
        {
            // Checking and replacing path with / and removing trailing and leading spaces
            var pathPartElements = sharePointFolderPath.Split('/', '\\');
            
            sharePointFolderPath = '';
            for(int idx = 0; idx < pathPartElements.Length; idx++)
            {
                System.String pathPartElement = pathPartElements.GetValue(idx);
                // if item is empty string we skip it
                if (System.String::IsNullOrWhiteSpace(pathPartElement) == false)
                {
                    sharePointFolderPath = sharePointFolderPath + pathPartElement.Trim() + '/';
                }
            }
            sharePointFolderPath = sharePointFolderPath.Trim('/');

            SharePointFolderPath_DC.text(sharePointFolderPath);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveToAttachments_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SaveToAttachments_DC checkbox is clicked.
    /// </summary>
    public void SaveToAttachments_DC_OnClicked_DC()
    {
        if (SaveToAttachments_DC.value() == 0)
        {
            // CheckBox was unchecked:
            // Document type.
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocuTypeId(SaveToAttachmentsDocuType_DC.text());
            SaveToAttachmentsDocuType_DC.text('');
            SaveToAttachmentsDocuType_DC.allowEdit(false);

            // Record type.
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsRecordType(SaveToAttachmentsRecordType_DC.selection());
            SaveToAttachmentsRecordType_DC.selection(0);
            SaveToAttachmentsRecordType_DC.allowEdit(false);

            // Override if exists.
            workingFilePrintDestSettings_DC.parmSaveToAttachmentsOverridingMode(SaveToAttachmentsOverridingMode_DC.selection());
            SaveToAttachmentsOverridingMode_DC.selection(0);
            SaveToAttachmentsOverridingMode_DC.allowEdit(false);

            // Attachment settings button
            SaveToAttachmentsSettingsButton_DC.enabled(false);

            SaveToAttachmentsTabPage_DC.caption("@DocentricAX:SaveToAttachments");
        }
        else // if (SaveToAttachments_DC.value() == 1)
        {
            // CheckBox was checked:
            // Document type.
            SaveToAttachmentsDocuType_DC.text(workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocuTypeId());
            SaveToAttachmentsDocuType_DC.allowEdit(true);

            // Record type.
            SaveToAttachmentsRecordType_DC.selection(workingFilePrintDestSettings_DC.parmSaveToAttachmentsRecordType());
            SaveToAttachmentsRecordType_DC.allowEdit(true);

            // Override if exists.
            SaveToAttachmentsOverridingMode_DC.selection(workingFilePrintDestSettings_DC.parmSaveToAttachmentsOverridingMode());
            SaveToAttachmentsOverridingMode_DC.allowEdit(true);

            // Attachment settings button
            SaveToAttachmentsSettingsButton_DC.enabled(true);

            SaveToAttachmentsTabPage_DC.caption(strFmt('%1 *', "@DocentricAX:SaveToAttachments"));
        }

        // Attachment settings button
        this.setDirty_DC(formStr(DocPrintDestSettingsFileSaveToAttachmentsSettings));
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveToAttachmentsDocuType_DC_OnLookup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SaveToAttachmentsDocuType_DC textbox lookup is open.
    /// </summary>
    /// <param name = "_formControl">SaveToAttachmentsDocuType_DC form control</param>
    public void SaveToAttachmentsDocuType_DC_OnLookup_DC(FormControl _formControl)
    {
        // Call a lookup method that shows only document types that are bound to an action class which derives from the DocuActionFile class.
        DocuType::lookupDocuActionFile_DC(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveToFileSystem_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SaveToFileSystem_DC checkbox is clicked.
    /// </summary>
    public void SaveToFileSystem_DC_OnClicked_DC()
    {
        if (SaveToFileSystem_DC.value() == 0)
        {
            // CheckBox was unchecked.
            workingFilePrintDestSettings_DC.parmFileSystemFilePath(FileSystemFolder_DC.text());
            FileSystemFolder_DC.text('');
            FileSystemFolder_DC.allowEdit(false);
            FileSystemFullFilename_DC.text('');

            workingFilePrintDestSettings_DC.parmFileSystemOverrideFileIfExists(OverrideFileSystemFile_DC.value());
            OverrideFileSystemFile_DC.value(false);
            OverrideFileSystemFile_DC.allowEdit(false);

            SaveToFileSystemTabPage_DC.caption("@DocentricAX:SaveToFileSystem");
        }
        else // if (SaveToFileSystem_DC.value() == 1)
        {
            // CheckBox was checked.
            FileSystemFolder_DC.text(workingFilePrintDestSettings_DC.parmFileSystemFilePath());

            // If empty, set the default value.
            if (FileSystemFolder_DC.text() == '')
            {
                FileSystemFolder_DC.text(DocParameters::find().DefaultTargetFsFolder);
                workingFilePrintDestSettings_DC.parmFileSystemFilePath(FileSystemFolder_DC.text());
            }

            FileSystemFullFilename_DC.text(workingFilePrintDestSettings_DC.getFileSystemFullFileSymbolicName());
            FileSystemFolder_DC.allowEdit(true);

            OverrideFileSystemFile_DC.value(workingFilePrintDestSettings_DC.parmFileSystemOverrideFileIfExists());
            OverrideFileSystemFile_DC.allowEdit(true);

            SaveToFileSystemTabPage_DC.caption(strFmt('%1 *', "@DocentricAX:SaveToFileSystem"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FileSystemFolder_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the FileSystemFolder_DC textbox is modified.
    /// </summary>
    public void FileSystemFolder_DC_OnModified_DC()
    {
        workingFilePrintDestSettings_DC.parmFileSystemFilePath(FileSystemFolder_DC.text());
        FileSystemFullFilename_DC.text(workingFilePrintDestSettings_DC.getFileSystemFullFileSymbolicName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ToPage_DC_OnModified_DC</Name>
				<Source><![CDATA[
    //////////////////////////////
    // PRINTER print destination
    //////////////////////////////

    /// <summary>
    /// Called when the ToPage_DC textbox is modified.
    /// </summary>
    public void ToPage_DC_OnModified_DC()
    {
        if (ToPage_DC.value() <= 0)
        {
            ToPage_DC.value(1);
        }

        if (ToPage_DC.value() < FromPage_DC.value())
        {
            ToPage_DC.value(FromPage_DC.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FromPage_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the FromPage_DC textbox is modified.
    /// </summary>
    public void FromPage_DC_OnModified_DC()
    {
        if (FromPage_DC.value() <= 0)
        {
            FromPage_DC.value(1);
        }

        if (FromPage_DC.value() > ToPage_DC.value())
        {
            ToPage_DC.value(FromPage_DC.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>NumberOfCopies_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the NumberOfCopies_DC textbox is modified.
    /// </summary>
    public void NumberOfCopies_DC_OnModified_DC()
    {
        if (NumberOfCopies_DC.value() <= 0)
        {
            NumberOfCopies_DC.value(1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintAsPdf_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the PrintAsPdf_DC checkbox is clicked.
    /// </summary>
    public void PrintAsPdf_DC_OnClicked_DC()
    {
        if (PrintAsPdf_DC.value() == 0)
        {
            // CheckBox was unchecked.
            workingPrinterPrintDestSettings_DC.parmPrintAsPdfFilename(PrintAsPdfFilename_DC.text());
            PrintAsPdfFilename_DC.text('');
            PrintAsPdfFilename_DC.allowEdit(false);

            PrintAsPdfTabPage_DC.caption("@DocentricAX2:PrintAsPdf");
        }
        else // if (PrintAsPdf_DC.value() == 1)
        {
            // CheckBox was checked.
            PrintAsPdfFilename_DC.text(workingPrinterPrintDestSettings_DC.parmPrintAsPdfFilename());
            PrintAsPdfFilename_DC.allowEdit(true);

            PrintAsPdfTabPage_DC.caption(strFmt('%1 *', "@DocentricAX2:PrintAsPdf"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintAsPdfFilename_DC_OnModified_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the PrintAsPdfFilename_DC textbox is modified.
    /// </summary>
    public void PrintAsPdfFilename_DC_OnModified_DC()
    {
        Filename    currentSelectedFilepath, currentSelectedFileName, currentSelectedFileType;
        Filename    newReportFilename;

        [currentSelectedFileName, currentSelectedFileType, currentSelectedFilepath] = DocFileMngHelper::splitFilename(PrintAsPdfFilename_DC.text());

        if (currentSelectedFileName)
        {
            if (currentSelectedFileType != DocConstantFile::FileExtPdf)
            {
                newReportFilename = currentSelectedFileName + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtPdf;
                PrintAsPdfFilename_DC.text(newReportFilename);
            }
        }
        else
        {
            PrintAsPdfFilename_DC.text('');
        }

        workingPrinterPrintDestSettings_DC.parmPrintAsPdfFilename(PrintAsPdfFilename_DC.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>SRSPrintDestinationSettingsDelegates_buildSendToList</Name>
				<Source><![CDATA[
    /*************************************  SUBSCRIPTIONS TO EVENT HANDLERS  **************************************/

    /// <summary>
    /// Subcribes to building SendTo list control on the destination form.
    /// </summary>
    /// <param name = "sendToImageList">An instance of <c>ImageListAppl</c> class.</param>
    /// <param name = "formList">SendTo list control on the destination form.</param>
    [SubscribesTo(classStr(SRSPrintDestinationSettingsDelegates), delegateStr(SRSPrintDestinationSettingsDelegates, buildSendToList))]
    public static void SRSPrintDestinationSettingsDelegates_buildSendToList(ImageListAppl sendToImageList, FormListControl formList)
    {
        FormRun fr = formList.formRun();
        fr.setSendToImageList_DC(sendToImageList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SRSPrintDestinationSettingsDelegates_changeTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to print medium type change event on the destination form.
    /// </summary>
    /// <param name = "settingsForm">The print destination form.</param>
    /// <param name = "mediumType">The print medium type on the left side of the form.</param>
    [SubscribesTo(classStr(SRSPrintDestinationSettingsDelegates), delegateStr(SRSPrintDestinationSettingsDelegates, changeTarget))]
    public static void SRSPrintDestinationSettingsDelegates_changeTarget(FormRun settingsForm, SRSPrintMediumType mediumType)
    {
        settingsForm.onChangedTarget_DC(mediumType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SRSPrintDestinationSettingsDelegates_listSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the index selection change event on the destination form.
    /// </summary>
    /// <param name = "_idx">The index of selection.</param>
    /// <param name = "settingsForm">The print destination form.</param>
    /// <param name = "result">The event handler result.</param>
    [SubscribesTo(classStr(SRSPrintDestinationSettingsDelegates), delegateStr(SRSPrintDestinationSettingsDelegates, listSelectionChanged))]
    public static void SRSPrintDestinationSettingsDelegates_listSelectionChanged(int _idx, FormRun settingsForm, EventHandlerResult result)
    {
        SRSPrintMediumType printMediumType = settingsForm.onSelectionChangedSendTo_DC(_idx);
        if (settingsForm.isDocentricPrintDestActive_DC())
        {
            result.result(printMediumType);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>