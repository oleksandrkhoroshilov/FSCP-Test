<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsPrintDestinationTokens_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Runtime.Remoting.Messaging;

/// <summary>
/// The class SrsPrintDestinationTokens_DC_Extension is an extension of the class SrsPrintDestinationTokens.
/// </summary>
[ExtensionOf(classStr(SrsPrintDestinationTokens))]
final class SrsPrintDestinationTokens_DC_Extension
{
    private DocEmailTokensParams tokensParams_DC;
    private Set purposeTokens_DC;  // Set[token (str)]

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>replace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands tokens found in printer destination settings with their values.
    /// </summary>
    /// <param name="_settings">Printer destination settings.</param>
    /// <remarks>
    /// The expansion occurs in-place.
    /// </remarks>
    public void replace(SRSPrintDestinationSettings _settings)
    {
        next replace(_settings);

        // If the replacing Email tokens takes place by invoking the Print management preview menu item, skip it.
        boolean isPrintManagementPreview = CallContext::GetData(DocConstant::PrintManagementPreview);
        if (isPrintManagementPreview)
        {
            return;
        }

        // Replace Email tokens and perform Email token redirection if needed.
        switch(_settings.printMediumType())
        {
            case SRSPrintMediumType::Email_DC:
                this.processTokens_DC(_settings);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTokens_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tokens.
    /// </summary>
    /// <param name = "_settings">Print destination settings</param>
    public void processTokens_DC(SRSPrintDestinationSettings _settings)
    {
        DocEmailTokensHelper emailTokensHelper = DocEmailTokensHelper::construct(_settings.parmTmpPrintDestSettings_DC().parmReportId());       
            
        int passNumber = 1;
        boolean redirectionOccurred = this.processTokensOnePass_DC(emailTokensHelper, _settings, passNumber);
        if (redirectionOccurred)
        {
            // Note that if the redirection has occurred, the _settings object will point to the new PD.
            passNumber++;
            if (_settings.printMediumType() == SRSPrintMediumType::Email_DC)
            {
                // New PD is again Docentric Email - perform one more cycle of tokens processing.
                this.processTokensOnePass_DC(emailTokensHelper, _settings, passNumber);
            }
        }

        emailTokensHelper.printWarningMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTokensOnePass_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tokens in one pass.
    /// </summary>
    /// <param name = "_emailTokensHelper">An instance of the DocEmailTokensHelper class</param>
    /// <param name = "_settings">Print destination settings</param>
    /// <param name = "_passNumber">Number of passes</param>
    /// <returns>True if the redirection occurred; otherwise false</returns>
    private boolean processTokensOnePass_DC(DocEmailTokensHelper _emailTokensHelper, SRSPrintDestinationSettings _settings, int _passNumber = 1)
    { 
        boolean redirectionOccurred;
        tokensParams_DC = new DocEmailTokensParams(_settings.printMediumType());

        // Replace tokens in the To, Cc, Bcc fields, if such exist.
        this.replaceTokens_DC(_settings, _settings.parmEmailPrintDestSettings_DC().parmEmailTo(), tokensParams_DC.parmReplacementInfoTo());
        this.replaceTokens_DC(_settings, _settings.parmEmailPrintDestSettings_DC().parmEmailCc(), tokensParams_DC.parmReplacementInfoCc());
        this.replaceTokens_DC(_settings, _settings.parmEmailPrintDestSettings_DC().parmEmailBcc(), tokensParams_DC.parmReplacementInfoBcc());
        
        // Redirect report from emailing to the alternative print destination, if needed.
        try
        {
            _emailTokensHelper.init(_settings, tokensParams_DC);
            redirectionOccurred = _emailTokensHelper.redirectPrintDestination(_passNumber > 1);
        
            if (!redirectionOccurred)
            {
                // Proceed as without Print destination redirection - set To, Cc, Bcc to the resolved addresses.
                _settings.parmEmailPrintDestSettings_DC().parmEmailTo(tokensParams_DC.parmReplacementInfoTo().parmExpandedTokens());
                _settings.parmEmailPrintDestSettings_DC().parmEmailCc(tokensParams_DC.parmReplacementInfoCc().parmExpandedTokens());
                _settings.parmEmailPrintDestSettings_DC().parmEmailBcc(tokensParams_DC.parmReplacementInfoBcc().parmExpandedTokens());
            }
        }
        catch
        {
            str errorMsg = strFmt("@DocentricAX2:ErrorProcessingEmailTokens", _settings.parmTmpPrintDestSettings_DC().parmReportId());
            if (_passNumber > 1)
            {
                errorMsg = errorMsg + '. ' + strFmt("@DocentricAX2:EmailTokenProcessingPassNo", _passNumber) + '.';
            }
            DocGlobalHelper::handleException(funcName(), errorMsg);
        }

        return redirectionOccurred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTokensParams_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the DocEmailTokensParams class.
    /// </summary>
    /// <returns>An instance of the DocEmailTokensParams class.</returns>
    public DocEmailTokensParams getTokensParams_DC()
    {
        return tokensParams_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceTokens_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands tokens found in a destination string with their values.
    /// </summary>
    /// <param name="_settings">Printer destination settings.</param>
    /// <param name="_dest">A string representing one of Email fields (To, Cc, Bcc) content that might contain tokens.</param>
    /// <param name="_replacementInfo">Helper object for token replacement.</param>
    /// <returns>The destination with tokens replaced by their expanded values.</returns>
    /// <remarks>
    /// This method is copy of the protected replaceTokens() method that is called
    /// from the delegate method called from SrsPrintDestinationTokens.replace().
    /// </remarks>
    private str replaceTokens_DC(SRSPrintDestinationSettings _settings, str _dest, DocEmailTokensReplacementInfo _replacementInfo)
    {
        System.Text.RegularExpressions.Regex regexToken = new System.Text.RegularExpressions.Regex(this.parmTokenRegex());
        System.Text.RegularExpressions.Match matchToken, matchTokenCheck;
        System.Text.RegularExpressions.GroupCollection groupsToken;
        System.Text.RegularExpressions.Group groupToken;
        int matchTokenIndex;
        int matchTokenLength;
        int i;
        str replacement;
        SrsPrintDestinationToken token;

        Map printMgmtTokensMap = _replacementInfo.parmPrintMgmtTokensMap();  /* Map[PrintMgmtToken (str), token resolved/unresolved value (str)] */
        boolean isAnyResolved = false;
        boolean isAnyUnresolved = false;
        boolean isAnyPurposeResolved = false;
        boolean isAnyPurposeFound = false;
        boolean isPrimaryContactResolved = false;
        boolean isPrimaryContactFound = false;
        str origDest = _dest;

        try
        {
            if (_dest != '')
            {
                i = 0;
                while (i <= strLen(_dest))
                {
                    // Locate the next token in the destination
                    matchToken = regexToken.Match(_dest, i);
                    if(!matchToken.get_Success())
                    {
                        break; // No token found, done!
                    }
                    groupsToken = matchToken.get_Groups();
                    groupToken = groupsToken.get_Item(1);
                    token = groupToken.get_Value();

                    // Set the flags that Primary contact token and a Purpose token are found.
                    if (tokensParams_DC.isPrimaryBusinessToken(token))
                    {
                        isPrimaryContactFound = true;
                    }
                    else if (tokensParams_DC.isPurposeToken(token, this.getPurposeTokenSet_DC()))
                    {
                        isAnyPurposeFound = true;
                    }

                    // Resolve the token's value.
                    replacement = this.expandToken_DC(token, _settings);

                    //info(strFmt('token: %1, replacement: %2', token, replacement));
                    
                    // IMPORTANT:
                    // We will fill printMgmtTokensMap with all found PrintMgmt tokens (Primary contact token, Purpose tokens)
                    // no matter if they are resolved or not; this info will be used later, in error messaging.
                    // HcmWorkerTitle tokens and Docentric placeholders will be ignored.
                    if (replacement != '')
                    {
                        // In this case, the token is resolved unless it is not recognized as a built-in token.
                        // We will know that this is true if the returned token's value is still a token (i.e. has token delimiters '@', e.g. @XYZ@),
                        // which possibly represents Docentric standard or custom placeholder (e.g. @USEREMAIL@).
                        // We will let the report DSP class to resolve it later in the pipeline, and if DSP class doesn't replace it, the pipeline will throw an adequate error.                          
                        matchTokenCheck = regexToken.Match(replacement);
                        if (!matchTokenCheck.get_Success())
                        {
                            // The returned token is NOT a token again, but the actual address.
                            // Set the appropriate flags and fill tokensMap.
                            isAnyResolved = true;

                            // We can expect here to have the following tokens:
                            // Primary contact (@@), Purpose (e.g. @Invoice@), Delivery address primary contact (@DLV@),
                            // Delivery address purpose (e.g. @DLV_Invoice@) or HcmWorkerTitle (e.g. @Accountant@). 
                            // We ignore the Hcm tokens.
                            if (tokensParams_DC.isPrimaryBusinessToken(token))
                            {
                                isPrimaryContactResolved = true;
                                printMgmtTokensMap.insert(token, replacement);
                            }
                            else if (tokensParams_DC.isPurposeToken(token, this.getPurposeTokenSet_DC()))
                            {
                                isAnyPurposeResolved = true;
                                printMgmtTokensMap.insert(token, replacement);
                            }
                        }
                    }
                    else // if (replacement == '')
                    {
                        // This means that the token is recognized as a built-in token but it is unresolved.
                        isAnyUnresolved = true;
                        printMgmtTokensMap.insert(token, replacement);
                    }

                    // Substitute the token's expanded value for the token.
                    matchTokenIndex = matchToken.get_Index();
                    matchTokenLength = matchToken.get_Length();
                    _dest = subStr(_dest, 1, matchTokenIndex) + replacement + subStr(_dest, matchTokenIndex + matchTokenLength + 1, strLen(_dest));

                    i = matchTokenIndex + matchTokenLength + strLen(replacement) - strLen(token) - 1;
                }
            }

            _replacementInfo.parmIsAnyResolved(isAnyResolved);
            _replacementInfo.parmIsAnyUnresolved(isAnyUnresolved);
            _replacementInfo.parmIsAnyPurposeResolved(isAnyPurposeResolved);
            _replacementInfo.parmIsAnyPurposeFound(isAnyPurposeFound);
            _replacementInfo.parmIsPrimaryContactResolved(isPrimaryContactResolved);
            _replacementInfo.parmIsPrimaryContactFound(isPrimaryContactFound);
            _replacementInfo.parmExpandedTokens(_dest);
        
            // If address field has the value '@@;@Purpose@;abc@test.com' and both tokens cannot be resolved,
            // its value will in the end be still ';;abc@test.com'.
            // Address field will be cleaned from ';;abc@test.com' -> 'abc@test.com' later in the pipeline.
            // Here we want to check if the final result is completely empty,
            // or is something like ';;' (if we had all tokens and none was resolved).
            // We treat both of these cases as empty address field.
            // If address contains Docentric standard or custom placeholder (for example: '@USEREMAIL@'),
            // it is not considered to be empty, because we will try to resolve it later in the pipeline.
            if (_dest == '')
            {
                _replacementInfo.parmIsAddressFieldEmpty(true);
            }
            else
            {
                System.Text.RegularExpressions.Regex regexOnlyMailSeparators = new System.Text.RegularExpressions.Regex('^[,; ]+$');
                matchTokenCheck = regexOnlyMailSeparators.Match(_dest);
                _replacementInfo.parmIsAddressFieldEmpty(matchTokenCheck.get_Success());
            }
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:ErrorReplacingTokensForEmailField", 
                                                                origDest, _replacementInfo.parmAddressField(), _settings.parmTmpPrintDestSettings_DC().parmReportId()));
        }

        return _dest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandToken_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the expansion of a token.
    /// </summary>
    /// <param name="_token">A token.</param>
    /// <param name="_settings">An instance of class <c>SRSPrintDestinationSettings</c></param>
    /// <returns>The expanded token.</returns>
    /// <exception cref="Exception::Error">An supported <c>SRSPrintMediumType</c> enum value was specifid in _settings.</exception>
    /// <remarks>
    /// The expansion is controlled by the chain of responsibility. Tokens that may have
    /// meaning to more than one token type will be expanded by the earliest token type on the chain.
    /// NOTE: This method is copy of the protected expandToken() method
    /// that is called only from the replaceTokens_DC() method.
    /// </remarks>
    private str expandToken_DC(SrsPrintDestinationToken _token, SRSPrintDestinationSettings _settings)
    {
        str tokenValue = '';

        switch(_settings.printMediumType())
        {
            case SRSPrintMediumType::Email_DC:

                // Now when we are dealing with Email tokens, we are going to fill the tokenParams object with the underlying
                // account and document data, which we might use for error/warning messaging (it depends on the setup).
                this.fillTokenParamsWithAccountAndDocumentInfo_DC();

                // Expand the token using the built-in functionality.
                try
                {
                    // Resolve the token's value if not already resolved.
                    Map commonTokensMap = tokensParams_DC.parmCommonTokensMap();  /* Map[token (str), token resolved/unresolved value (str)] */
                    if (commonTokensMap.exists(_token))
                    {
                        tokenValue = commonTokensMap.lookup(_token);
                    }
                    else
                    {
                        tokenValue = this.expandEmailToken(_token, _settings);
                        commonTokensMap.insert(_token, tokenValue);
                    }
                }
                catch
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:ErrorExpandingEmailToken", _token));
                }
        }

        return tokenValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTokenParamsWithAccountAndDocumentInfo_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// fills the token parameters with account and document information.
    /// </summary>
    private void fillTokenParamsWithAccountAndDocumentInfo_DC()
    {
        // This method is called more than once (for To, Cc, Bcc addresses),
        // make sure that we calculate the common values only once.
        if (!tokensParams_DC.parmIsAccountFilled())
        {
            try
            {
                PrintMgmtPrintDestinationTokens printMgmtToken = this as PrintMgmtPrintDestinationTokens;
                if (printMgmtToken != null)
                {
                    Common jour = printMgmtToken.getJour_DC();
                    PrintMgmtDocType docTypeObj = printMgmtToken.getDocType_DC();
                    if (jour && docTypeObj)
                    {
                        //info(strFmt('jour Table ID: %1, Table name: %2', jour.TableId, tableId2Name(jour.TableId)));

                        tokensParams_DC.parmJour(jour);
                        docTypeObj.parmPrintDestinationTokens(printMgmtToken);

                        // Party type, Account number
                        PrintMgmtPrintDestinationPartyType partyType;
                        CustVendAC custVendAccountNumber;
                        PrintMgmtDocumentType docTypeEnum;
                        docTypeEnum = str2Enum(docTypeEnum, docTypeObj.getDisplayName());

                        [partyType, custVendAccountNumber] = DocPrintMgmtHelper::getPartyTypeAndId(docTypeEnum, jour);
                        tokensParams_DC.parmPartyType(partyType);
                        tokensParams_DC.parmAccountNum(custVendAccountNumber);

                        // Document ID, Document type
                        tokensParams_DC.parmDocumentId(DocPrintMgmtHelper::getDocumentId(jour));
                        tokensParams_DC.parmDocumentType(docTypeObj.getDisplayName());

                        // Set the flag that the underlying customer/vendor account is filled.
                        tokensParams_DC.parmIsAccountFilled(true);
                    }
                }
            }
            catch
            {
                DocGlobalHelper::handleException(funcName(), "@DocentricAX2:ErrorProcessingDocumentAndPartyForEmailToken");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurposeTokenSet_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of purpose tokens.
    /// </summary>
    /// <returns>The set of purpose tokens</returns>
    public Set getPurposeTokenSet_DC()
    {
        if (purposeTokens_DC == null)
        {
            purposeTokens_DC = new Set(Types::String);
            LogisticsLocationRole locationRole;
            while select Name from locationRole
                where locationRole.IsContactInfo
                    && locationRole.Type != LogisticsLocationRoleType::OneTime
            {
                purposeTokens_DC.add(locationRole.Name);
            }
        }

        return purposeTokens_DC;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>