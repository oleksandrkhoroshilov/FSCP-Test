<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReceiptsListJournalPost_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

/// <summary>
/// The class PurchReceiptsListJournalPost_DC_Extension is an extension of the class PurchReceiptsListJournalPost.
/// </summary>
[ExtensionOf(classStr(PurchReceiptsListJournalPost))]
final class PurchReceiptsListJournalPost_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data.
    /// </summary>
    /// <param name = "_formletterJournalPrint">An instance of the FormletterJournalPrint class</param>
    /// <returns>True if the report data was successfully created; otherwise false</returns>
    public boolean createReportData(FormletterJournalPrint _formletterJournalPrint)
    {
        boolean res = next createReportData(_formletterJournalPrint);

        VendReceiptsListJour journal;

        try
        {
            if (this.isProforma())
            {
                // Add the journal record.
                journal = this.parmJournalTable();

                // Add the journal lines.
                Map journalLineMap = new Map(Types::Int64, Types::Record);
                VendReceiptsListTrans vrlt;
                while select vrlt
                    where vrlt.PurchId == journal.PurchId 
                       && vrlt.ReceiptsListId == journal.ReceiptsListId
                       && vrlt.ReceiptsListDate == journal.ReceiptsListDate
                {
                    journalLineMap.insert(vrlt.RecId, vrlt);
                }

                DocReportProformaDataSource proformaDsObject = new DocReportProformaDataSource();
                proformaDsObject.parmJournal(journal);
                proformaDsObject.parmJournalLines(journalLineMap);

                // Add the proformaDsObject to the Docentric's report temporary storage.
                TemporaryReportDataStorage::AddDataObject(DocConstantDSP::Prefix_PurchReceiptsList, journal.RecId, proformaDsObject);
            }
        }
        catch (Exception::CLRError)
        {
            str clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
    
            setPrefix(DocConstant::Docentric);
            error(clrErrorMsg);
    
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX:FailedToStoreProformaPurchReceiptsList", journal.PurchId), DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX:FailedToStoreProformaPurchReceiptsList", journal.PurchId), DocConstantDiagnostics::ErrProformaReportTempStorage);
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>