<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsPrintMgmtController_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SrsPrintMgmtController_DC_Extension is an extension of the class SrsPrintMgmtController.
/// </summary>
[ExtensionOf(classStr(SrsPrintMgmtController))]
final class SrsPrintMgmtController_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a report to printer destination set by print management.
    /// </summary>
    /// <remarks>
    /// This is a framework method. Do not override this method.This method is called from print management
    /// runtime.
    /// </remarks>
    public void runReport()
    {
        SrsReportDataContract reportContract = this.parmReportRun().parmReportContract();

        SRSPrintDestinationSettings pds = reportContract.parmPrintSettings();
        if (pds == null)
        {
            pds = new SRSPrintDestinationSettings();
            reportContract.parmPrintSettings(pds);
        }

        // Change the print destination from Screen to Screen_DC if needed.
        if (pds.printMediumType() == SRSPrintMediumType::Screen)
        {
            if (DocSrsReportRunUtil::useDocentricPreview(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId('');
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
            else if (DocSrsReportRunUtil::useOnlyDocentricPreviewer(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId(DocConstant::BuiltInSsrsDesignPlaceholder);
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
        }

        // Turn off the PrintToArchive flag, if this is a Docentric print destination.
        if (DocSrsReportRunUtil::isDocentricPrintDestination(pds.printMediumType()))
        {
            pds.parmPrintToArchive(false);
        }
        
        // Store the report execution context record.
        if (this.parmArgs() && this.parmArgs().record())
        {
            pds.parmSrsPrintReportSettings_DC().setReportExecutionContextRecord(this.parmArgs().record());
        }
        // Store the report menu item name.
        if (this.parmArgs() && this.parmArgs().menuItemName())
        {
            pds.parmSrsPrintReportSettings_DC().parmReportMenuItemName(this.parmArgs().menuItemName());
            pds.parmSrsPrintReportSettings_DC().parmReportMenuItemType(this.parmArgs().menuItemType());
        }

        if (this.isInBatch_DC())
        {
            // Store BatchJobID into the report print destination settings to be used later in the DocPlaceholderManager class.
            Batch currentBatchTask = DocGlobalHelper::getCurrentBatchTask();
            pds.parmSrsPrintReportSettings_DC().parmBatchId(currentBatchTask.RecId); // RecId of the Batch table
            pds.parmSrsPrintReportSettings_DC().parmBatchJobId(currentBatchTask.BatchJobId); // RecId of the BatchJob table
            
            // Change Screen_DC -> Archive_DC in case that the report is running in batch.
            if (pds.printMediumType() == SRSPrintMediumType::Screen_DC)
            {
                pds.printMediumType(SRSPrintMediumType::Archive_DC);
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ChangedPrintDestinationFromScreenToArchive",
                    reportContract.parmReportCaption() ? reportContract.parmReportCaption() : reportContract.parmReportName()));
            }
        }

        next runReport();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>