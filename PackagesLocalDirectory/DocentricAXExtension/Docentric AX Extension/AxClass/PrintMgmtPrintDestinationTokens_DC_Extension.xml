<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtPrintDestinationTokens_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class PrintMgmtPrintDestinationTokens_DC_Extension is an extension of the class PrintMgmtPrintDestinationTokens.
/// </summary>
[ExtensionOf(classStr(PrintMgmtPrintDestinationTokens))]
final class PrintMgmtPrintDestinationTokens_DC_Extension
{
    private FormCheckBoxControl orderCheckBox;
    private boolean isOrderType;
    
    private FormCheckBoxControl projCheckBox;
    private boolean isProjType;
    
    private FormCheckBoxControl rfqCheckBox;
    private boolean isRFQType;
    
    private FormStringControl addressPurpose;
    private SysLookupMultiSelectCtrl addressPurposeMultiSelectCtl;
    private FormCheckBoxControl addressPrimaryContactCheckBox;

    private boolean isDocEmailPD;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJour_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query table buffer from the PrintMgmtPrintContext class.
    /// </summary>
    /// <returns>The query table buffer</returns>
    public Common getJour_DC()
    {
        return this.jour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocType_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the PrintMgmtDocType class.
    /// </summary>
    /// <returns>An instance of the PrintMgmtDocType class</returns>
    public PrintMgmtDocType getDocType_DC()
    {
        return this.docType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidTokens_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container with valid tokens.
    /// </summary>
    /// <returns>A container with valid tokens</returns>
    public container getValidTokens_DC()
    { 
        return this.validTokens;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendAddressesDontMultiplySeparator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Concatenates two address lists.
    /// </summary>
    /// <param name = "_addresses">First address list</param>
    /// <param name = "_moreAddresses">Second address list</param>
    /// <returns>Concatenated address list</returns>
    private str appendAddressesDontMultiplySeparator(str _addresses, str _moreAddresses)
    {
        if (strFind(_addresses, this.parmAddressSeparator(), strLen(_addresses), -1))
        {
            return _addresses + _moreAddresses;
        }
        else
        {
            return this.appendAddresses(_addresses, _moreAddresses);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeAddressTokensForAddressPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates address tokens for address purposes.
    /// </summary>
    /// <param name = "_tokens">List of tokens</param>
    /// <returns>A list of address tokens</returns>
    private str makeAddressTokensForAddressPurpose(str _tokens)
    {
        str delimiter = this.parmTokenDelimiter();
        str separator = this.parmAddressSeparator();

        // if _str is empty, return an empty string, i.e. no tokens
        // if _str is not empty, add token delimiter at the beginning and end of each token and
        //    to every semicolon separated token in between. Also add Dlv at the beginning 
        //    of each token.
        // Examples:
        //    Token => @Token@
        //    Token1;Token2 => @DLV_Token@;@DLV_Token2@
        return _tokens ? delimiter + DocConstant::EmailTokenDeliveryAddressPurposePrefix + strReplace(_tokens, separator, delimiter + separator + delimiter + DocConstant::EmailTokenDeliveryAddressPurposePrefix) + delimiter : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEndingAddressSeparator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes an ending address separator from specified address list.
    /// </summary>
    /// <param name = "_address">Address list</param>
    /// <returns>Updated address list</returns>
    private str removeEndingAddressSeparator(str _address)
    { 
        str retVal = _address;
              
        // Our tokens are at the end of _addresses, so after removing them it can happen
        // that ';' remains at the end of _addresses. We want to remove it, because
        // it can keep accumulating if user keeps opening and closing the form for
        // specifying tokens and some actual (additional) email address is entered.
        if (strFind(_address, this.parmAddressSeparator(), strLen(_address), -1))
        {
            retVal = subStr(_address, 1, strLen(_address) - 1);
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMultipleAddressSeparators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes multiple address separators from specified address list.
    /// </summary>
    /// <param name = "_address">Address list</param>
    /// <returns>Updated address list</returns>
    private str removeMultipleAddressSeparators(str _address)
    {
        str address = _address;

        str twoSeparators = strFmt('%1%2', this.parmAddressSeparator(), this.parmAddressSeparator());
        while (strScan(address, twoSeparators, 1, strLen(address)))
        {
            address = strReplace(address, twoSeparators, this.parmAddressSeparator());
        }

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUICtls</Name>
				<Source><![CDATA[
    /*********************************************************************************************/
    /* PrintMgmtPrintDestinationTokens method wrappers.                                          */
    /*********************************************************************************************/

    // Method wrappers needed for our additional @OrderEmail@, @ProjEmail@, @RFQEmail@, @DLV@,
    // @DLV_Purpose@ email tokens. 
    // They are not a new type of the token (in addition to PrintMgmtPrintDestinationTokens and
    // HcmWorkerPrintDestinationTokens), but just an extension of PrintMgmtPrintDestinationTokens.
    // These methods allow that we add the appropriate UI elements for our email tokens 
    // and to process them together with the other PrintMgmtPrintDestinationTokens 
    // (primary business contact and purpose email).


    /// <summary>
    /// This method is invoked when the form for specifying tokens is opened.
    /// It displays the additional UI elements with our tokens.
    /// </summary>
    /// <param name = "_group">FormGroupControl with standard UI elements</param>
    public void addUICtls(FormGroupControl _group)
    { 
        next addUICtls(_group);

        FormRun tokensForm = _group.formRun();
        FormGroupControl dialogContents = tokensForm.control(tokensForm.controlId('DialogContents'));
        
        // Caller form should be Print destination settings form. Call its method to determine if
        // this dialog was invoked from Docentric email print destination.
        if (tokensForm.args().caller() is FormRun)
        {
            FormRun callerForm = tokensForm.args().caller() as FormRun;
            if (callerForm.name() == formStr(SRSPrintDestinationSettingsForm))
            {
                isDocEmailPD = callerForm.getCurrentPrintDest_DC() == SRSPrintMediumType::Email_DC;
            }
        }

        // If print destination is SSRS email, don't modify this dialog.
        if (!isDocEmailPD)
        {
            return;
        }

        // Fix captions on party tokens for Sales invoice
        if (this.parmParameters() == '')
        {
            printMgmtCtl.label(strFmt("@SYS4004923", PrintMgmtPrintDestinationPartyType::Customer));
            printMgmtCheckBox.label(strFmt("@SYS4004929", PrintMgmtPrintDestinationPartyType::Customer));
        }

        // Print destination is Docentric Email --> modify the tokens dialog in the following way:
        // Make it wider and make it 2-column. Add one group (it will appear in the right column), 
        // then add 2 sub-groups to it, one for Delivery address tokens and another 
        // for Order/Project/RFQ email tokens. Populate these groups accordingly.

        // 1. Make the dialog wider and with 2 columns.
        tokensForm.design().dialogSize(DialogSize::Medium);
        dialogContents.columns(2);

        // 2. Add one group. It will be in the right column.        
        FormGroupControl rightColumnGroup = dialogContents.addControl(FormControlType::Group, 'RightColumnGroup_DC');
        rightColumnGroup.columnsMode(ColumnsMode::Fill);
        rightColumnGroup.heightMode(3); // Size to available, hopefully

        // 3. Add sub-group for delivery address tokens.
        FormGroupControl deliveryAddressGroup = rightColumnGroup.addControl(FormControlType::Group, 'DeliveryAddressGroup_DC');

        // 4. Add Delivery address purpose multi-select .
        addressPurpose = deliveryAddressGroup.addControl(FormControlType::String, 'PrintMgmtPrintDestinationAddressPurpose_DC');
        addressPurpose.widthMode(FormWidth::ColumnWidth);
        addressPurpose.label(strFmt("@SYS4004923", "@SYS7924"));
        addressPurposeMultiSelectCtl = SysLookupMultiSelectCtrl::construct(deliveryAddressGroup.formRun(), addressPurpose,
                'LogisticsLocationRoleContactInfoLookup',
                false, [tableName2Id('LogisticsLocationRole'), fieldName2Id(tableName2Id('LogisticsLocationRole'), 'Name')]);

        // 5. Add Delivery address primary email.
        addressPrimaryContactCheckBox = deliveryAddressGroup.addControl(FormControlType::CheckBox, 'PrintMgmtPrintDestinationDeliveryAddressPrimaryContact_DC');
        addressPrimaryContactCheckBox.widthMode(FormWidth::ColumnWidth);
        addressPrimaryContactCheckBox.label(strFmt("@SYS4004929", "@SYS7924"));
                
        // 6. Add sub-group for Order/Project/RFQ Email tokens.
        FormGroupControl orderProjRfqAddressGroup = rightColumnGroup.addControl(FormControlType::Group, 'OrderProjRfqAddressGroup_DC');

        // 7. Add one of Order/Project/RFQ Email token if applikable.
        PrintMgmtDocumentType documentType = PrintMgmtDocumentType::SalesOrderInvoice;
        if (this.parmParameters() != '')
        {
            documentType = symbol2Enum(enumNum(PrintMgmtDocumentType), this.parmParameters());
        }
        isOrderType = DocPrintMgmtHelper::isOrderType(documentType);
        isProjType = DocPrintMgmtHelper::isProjectType(documentType);
        isRFQType = DocPrintMgmtHelper::isRFQType(documentType);
        
        orderProjRfqAddressGroup.visible(isOrderType || isProjType || isRFQType);
        if (isOrderType)
        {
            orderCheckBox = orderProjRfqAddressGroup.addControl(FormControlType::CheckBox, 'PrintMgmtPrintDestinationOrder_DC');
            orderCheckBox.widthMode(FormWidth::ColumnWidth);
            orderCheckBox.label("@DocentricAX3:OrderEmail");
        }
        else if (isProjType)
        {
            projCheckBox = orderProjRfqAddressGroup.addControl(FormControlType::CheckBox, 'PrintMgmtPrintDestinationProject_DC');
            projCheckBox.widthMode(FormWidth::ColumnWidth);
            projCheckBox.label("@DocentricAX3:ProjEmail");
        }
        else if (isRFQType)
        {
            rfqCheckBox = orderProjRfqAddressGroup.addControl(FormControlType::CheckBox, 'PrintMgmtPrintDestinationRFQ_DC');
            rfqCheckBox.widthMode(FormWidth::ColumnWidth);
            rfqCheckBox.label("@DocentricAX3:RFQVendorEmail");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUIAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked when the form for specifying tokens is closed.
    /// Based on the tokens selected in UI it generates the content of the To/Cc/Bcc field.
    /// </summary>
    /// <returns>Address list</returns>
    public str getUIAddresses()
    {
        str addresses = next getUIAddresses();

        // Skip the processing if dialog is invoked from the SSRS print destination.
        if (!isDocEmailPD)
        {
            return addresses;
        }

        // Handle OrderEmail, ProjectEmail, RFQEmail if applicable
        if (isOrderType)
        {
            str tokenAddress = orderCheckBox.checked() ? DocConstant::EmailTokenOrder : '';            
            addresses = this.appendAddressesDontMultiplySeparator(addresses, this.makeAddressTokens(tokenAddress));
        }
        else if (isProjType)
        {
            str tokenAddress = projCheckBox.checked() ? DocConstant::EmailTokenProj : '';            
            addresses = this.appendAddressesDontMultiplySeparator(addresses, this.makeAddressTokens(tokenAddress));
        }
        else if (isRFQType)
        {
            str tokenAddress = rfqCheckBox.checked() ? DocConstant::EmailTokenRFQ : '';            
            addresses = this.appendAddressesDontMultiplySeparator(addresses, this.makeAddressTokens(tokenAddress));
        }

        // Handle Delivery address purpose
        str addressPurposeAddresses = this.makeAddressTokensForAddressPurpose(addressPurpose.text());
        addresses = this.appendAddressesDontMultiplySeparator(addresses, addressPurposeAddresses);

        // Handle Delivery address primary contact
        str tokenAddress = addressPrimaryContactCheckBox.checked() ? DocConstant::EmailTokenDeliveryAddressPrimaryContact : '';
        addresses = this.appendAddressesDontMultiplySeparator(addresses, this.makeAddressTokens(tokenAddress));

        // Remove multiplied separators if any
        addresses = this.removeMultipleAddressSeparators(addresses);

        return addresses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUIAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked when the dialog for specifying tokens is opened. 
    /// Based on the content of the To/Cc/Bcc field, it sets the controls on the 
    /// tokens dialog.
    /// </summary>
    /// <param name = "_addresses">Content of the To/Cc/Bcc field, can be
    /// a combination of standard tokens, Docentric tokens, Docentric placeholders
    /// and fixed email addresses.</param>
    public void setUIAddresses(str _addresses)
    {
        // Handle our tokens only in case of Docentric email print destination
        if (isDocEmailPD)
        {
            container otherTokensAndAddresses;
            boolean orderEmailTokenFound;
            boolean projEmailTokenFound;
            boolean rfqEmailTokenFound;

            container availableAddresses = this.parseAddresses(_addresses, conPeek(validTokens, 2));
            
            // availableAddresses has 3 containers:
            //      1. list of tokens recognized by PrintMgmtPrintDestinaitonTokens, for example: "Invoice,Busness"
            //      2. @@ token if it exists
            //      3. This container contains all tokens not recognized  by PrintMgmtPrintDestinaitonTokens
            //         + our placeholders + any other (fixed) email addresses.
            //         We can't be sure that someone didn't implement some other tokens, and if they
            //         would appear as separate container within this container, or they will be all
            //         joined into one string within a first container of this container.
            //         Our tokens (OrderEmail, ProjEmail, RFQEmail, Address purpose) will be here,
            //         if they were set, so we need to go through all sub-containers of this container
            //         and search for our tokens.
            otherTokensAndAddresses = conPeek(availableAddresses, 3);

            // Process our OrderEmail, ProjectEmail and RFQEmail tokens
            for (int i = 1; i <= conLen(otherTokensAndAddresses); i++)
            {
                str oneCombinedAddress = conPeek(otherTokensAndAddresses, i);

                if (isOrderType)
                {
                    orderEmailTokenFound = strScan(oneCombinedAddress, this.makeAddressTokens(DocConstant::EmailTokenOrder), 1, strLen(oneCombinedAddress));
                    if (orderEmailTokenFound)
                    {
                        // remove our token, because otherwise it appears in the form as "other email addresses"
                        _addresses = strReplace(_addresses, this.makeAddressTokens(DocConstant::EmailTokenOrder), '');

                        // These 3 tokens are mutually exclusive, stop processing
                        break;
                    }
                }
                else if (isProjType)
                {
                    projEmailTokenFound = strScan(oneCombinedAddress, this.makeAddressTokens(DocConstant::EmailTokenProj), 1, strLen(oneCombinedAddress));
                    if (projEmailTokenFound)
                    {
                        // remove our token, because otherwise it appears in the form as "other email addresses"
                        _addresses = strReplace(_addresses, this.makeAddressTokens(DocConstant::EmailTokenProj), '');

                        // These 3 tokens are mutually exclusive, stop processing
                        break;
                    }
                }
                else if (isRFQType)
                {
                    rfqEmailTokenFound = strScan(oneCombinedAddress, this.makeAddressTokens(DocConstant::EmailTokenRFQ), 1, strLen(oneCombinedAddress));
                    if (rfqEmailTokenFound)
                    {
                        // remove our token, because otherwise it appears in the form as "other email addresses"
                        _addresses = strReplace(_addresses, this.makeAddressTokens(DocConstant::EmailTokenRFQ), '');

                        // These 3 tokens are mutually exclusive, stop processing
                        break;
                    }
                }
            }

            if (isOrderType)
            {
                orderCheckBox.value(orderEmailTokenFound);
            }
            else if (isProjType)
            {
                projCheckBox.value(projEmailTokenFound);
            }
            else if (isRFQType)
            {
                rfqCheckBox.value(rfqEmailTokenFound);
            }

            // Process the Delivery address purpose and Delivery address primary contact tokens
            for (int i = 1; i <= conLen(otherTokensAndAddresses); i++)
            {
                str oneCombinedAddress = conPeek(otherTokensAndAddresses, i);
                boolean dlvAddressPurposeFound = strScan(oneCombinedAddress, DocConstant::EmailTokenDeliveryAddressPurposePrefix, 1, strLen(oneCombinedAddress));
                boolean dlvAddressPrimaryContactFound = strScan(oneCombinedAddress, this.makeAddressTokens(DocConstant::EmailTokenDeliveryAddressPrimaryContact), 1, strLen(oneCombinedAddress));
                if (dlvAddressPurposeFound || dlvAddressPrimaryContactFound)
                {
                    // oneCombinedAddress looks like "@DLV_Invoice@;@DLV_SalesPackingSlip@";"@DLV@"
                    // Remove our prefix (DLV_) for Delivery address purpose and our token (DLV) for Delivery address primary contact.
                    // We must do it in that order, first DLV_ and then DLV.
                    oneCombinedAddress = strReplace(oneCombinedAddress, DocConstant::EmailTokenDeliveryAddressPurposePrefix, '');
                    oneCombinedAddress = strReplace(oneCombinedAddress, DocConstant::EmailTokenDeliveryAddressPrimaryContact, '');
                
                    // oneCombinedAddress now contains Delivery address purposes and Delivery address primary contact, if any.
                    // It looks like "@Invoice@;@SalesPackingSlip@;@@"
                    container deliveryAddresses = this.parseAddresses(oneCombinedAddress, conPeek(validTokens, 2));

                    // deliveryAddresses has 3 containers:
                    //      1. list of Delivery addresses tokens from print destination, recognized as purposes, for example: "Invoice,SalesPackingSlip"
                    //      2. @@ token for Delivery address if it exists
                    //      3. Any other (fixed) email addresses.
                    // Use 1st values for Delivery address purposes multi-select control.
                    // Use 2nd value for Delivery address primary contact check-box.
                    addressPurposeMultiSelectCtl.set(this.selectTokens(conPeek(deliveryAddresses, 1), validTokens));
                    addressPurpose.text(conPeek(deliveryAddresses, 1));

                    addressPrimaryContactCheckBox.value(conPeek(deliveryAddresses, 2) != '');

                    // Iterate through values in deliveryAddresses first container,  and remove them from _addresses,
                    // otherwise they appear in the form as "other email addresses"
                    container con = str2con(conPeek(deliveryAddresses, 1), this.parmAddressSeparator());
                    for (int j = 1; j <= conLen(con); j++)
                    {
                        _addresses = strReplace(_addresses, this.makeAddressTokens(DocConstant::EmailTokenDeliveryAddressPurposePrefix + conPeek(con, j)), '');
                    }

                    // Remove Delivery address primary contact token if it exists, otherwise it appears
                    // in the form as "other email addresses"
                    _addresses = strReplace(_addresses, this.makeAddressTokens(DocConstant::EmailTokenDeliveryAddressPrimaryContact), '');

                    break;
                }
            }

            // Our tokens are at the end of _addresses, so after removing them it can happen
            // that one or more ';' characters remain at the end of _addresses.
            // They can keep accumulating if user keeps opening and closing the form for
            // specifying tokens and some actual (additional) email address is entered.
            _addresses = this.removeMultipleAddressSeparators(_addresses);
        }

        next setUIAddresses(_addresses); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandEmailToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked by the framework during the report execution.
    /// We handle only the OrderEmail and ProjEmail token.
    /// </summary>
    /// <param name = "_token">Token of SrsPrintDestinationToken type</param>
    /// <param name = "_settings">Object of SRSPrintDestinationSettings type</param>
    /// <returns>Resolved email tokens</returns>
    public str expandEmailToken(SrsPrintDestinationToken _token, SRSPrintDestinationSettings _settings)
    {
        // The standard tokens will be handled in the call to the base method.
        // What remains as unrecognized will be returned as replacement.
        str replacement = next expandEmailToken(_token, _settings);

        // Handle our tokens (OrderEmail, ProjEmail, RFQEmail, Delivery address purposes, Delivery address primary contact)
        str deliveryAddressPrimaryContactToken = strFmt('@%1@', DocConstant::EmailTokenDeliveryAddressPrimaryContact);

        if((_token == DocConstant::EmailTokenOrder) && (replacement == this.makeAddressTokens(DocConstant::EmailTokenOrder)))
        {
            // OrderEmail
            str salesId, purchId;
            [salesId, purchId, replacement] = DocPrintMgmtHelper::getOrderIdAndEmail(this.getJour_DC());
        }
        else if((_token == DocConstant::EmailTokenProj) && (replacement == this.makeAddressTokens(DocConstant::EmailTokenProj)))
        {
            // ProjEmail
            str projId;
            int projNum;
            [projNum, projId, replacement] = DocPrintMgmtHelper::getProjIdAndEmail(this.getJour_DC());
        }
        else if((_token == DocConstant::EmailTokenRFQ) && (replacement == this.makeAddressTokens(DocConstant::EmailTokenRFQ)))
        {
            // RFQEmail
            str rfqId;
            [rfqId, replacement] = DocPrintMgmtHelper::getRFQIdAndEmail(this.getJour_DC());
        }
        else if (strScan(replacement, DocConstant::EmailTokenDeliveryAddressPurposePrefix, 1, strLen(replacement)))
        {   
            // Delivery address purposes         
            str tokenWithoutPrefix = subStr(_token, strLen(DocConstant::EmailTokenDeliveryAddressPurposePrefix) + 1, strLen(_token) - strLen(DocConstant::EmailTokenDeliveryAddressPurposePrefix));
            replacement = DocPrintMgmtHelper::getDeliveryAddressEmail(this.getJour_DC(), false, tokenWithoutPrefix, this.parmAddressSeparator());
        }
        else if (strScan(replacement, deliveryAddressPrimaryContactToken, 1, strLen(replacement)))
        {
            // Delivery address primary contact
            replacement = DocPrintMgmtHelper::getDeliveryAddressEmail(this.getJour_DC(), true);
        }

        return replacement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailAddressForParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the email address for a party and contact role.
    /// </summary>
    /// <param name="_partyType">A party type.</param>
    /// <param name="_partyRecId">The <c>RecId</c> for the <c>DirParty</c> table.</param>
    /// <param name="_role">The address's role.</param>
    /// <returns>A list of email addresses.</returns>
    public str getEmailAddressForParty(PrintMgmtPrintDestinationPartyType _partyType, RecId _partyRecId, str _role)
    {
        str addresses = next getEmailAddressForParty(_partyType, _partyRecId, _role);

        boolean isDocEmail = false;
        
        DocEmailTokensParams tokensParams = this.getTokensParams_DC();
        if (tokensParams != null)
        {
            isDocEmail = tokensParams.parmPrintMediumType() == SRSPrintMediumType::Email_DC;
        }

        if (isDocEmail && !addresses)
        {
            // Remove default message
            infolog.cut(infologLine(), infologLine());
        }
        return addresses;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>