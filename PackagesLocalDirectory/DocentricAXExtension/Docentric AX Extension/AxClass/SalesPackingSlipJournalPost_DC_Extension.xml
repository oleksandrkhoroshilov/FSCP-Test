<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPackingSlipJournalPost_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

/// <summary>
/// The class SalesPackingSlipJournalPost_DC_Extension is an extension of the class SalesPackingSlipJournalPost.
/// </summary>
[ExtensionOf(classStr(SalesPackingSlipJournalPost))]
final class SalesPackingSlipJournalPost_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data.
    /// </summary>
    /// <param name = "_formletterJournalPrint">An instance of the FormletterJournalPrint class</param>
    /// <returns>True if the report data was successfully created; otherwise false</returns>
    public boolean createReportData(FormletterJournalPrint _formletterJournalPrint)
    {
        boolean res = next createReportData(_formletterJournalPrint);

        CustPackingSlipJour journal;

        try
        {
            if (this.isProforma())
            {
                // Get the journal record.
                journal = this.parmJournalTable();

                // Get the journal version record.
                CustPackingSlipVersion journalVersion = CustPackingSlipVersion::findLatest(journal.RecId);
                if (journalVersion.RecId)
                {
                    // Get the journal lines and journal version lines.
                    Map journalLineMap = new Map(Types::Int64, Types::Record);
                    Map journalVersionLineMap = new Map(Types::Int64, Types::Record);

                    CustPackingSlipTrans cpst;
                    while select cpst
                        where cpst.SalesId == journal.SalesId 
                           && cpst.PackingSlipId == journal.PackingSlipId 
                           && cpst.DeliveryDate == journal.DeliveryDate
                    {
                        journalLineMap.insert(cpst.RecId, cpst);
                        CustPackingSlipTransHistory cpstHistory = CustPackingSlipTransHistory::find(cpst.RecId);
                        if (cpstHistory)
                        {
                            journalVersionLineMap.insert(cpst.RecId, cpstHistory);
                        }
                    }
    
                    DocReportProformaPackingSlipDataSource proformaDsObject = new DocReportProformaPackingSlipDataSource();
                    proformaDsObject.parmJournal(journal);
                    proformaDsObject.parmJournalLines(journalLineMap);
                    proformaDsObject.parmPackingSlipVersion(journalVersion);
                    proformaDsObject.parmPackingSlipTransHistoryLines(journalVersionLineMap);

                    // Add the proformaDsObject to the Docentric's report temporary storage.
                    TemporaryReportDataStorage::AddDataObject(DocConstantDSP::Prefix_SalesPackingSlip, journal.RecId, proformaDsObject);
                }
            }
        }
        catch (Exception::CLRError)
        {
            str clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
    
            setPrefix(DocConstant::Docentric);
            error(clrErrorMsg);
    
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX:FailedToStoreProformaSalesPackingSlip", journal.SalesId), DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX:FailedToStoreProformaSalesPackingSlip", journal.SalesId), DocConstantDiagnostics::ErrProformaReportTempStorage);
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>