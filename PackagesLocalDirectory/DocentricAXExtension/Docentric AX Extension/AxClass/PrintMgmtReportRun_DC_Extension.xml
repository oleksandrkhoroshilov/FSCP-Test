<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtReportRun_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Runtime.Remoting.Messaging;

/// <summary>
/// The class PrintMgmtReportRun_DC_Extension is an extension of the class PrintMgmtReportRun.
/// </summary>
[ExtensionOf(classStr(PrintMgmtReportRun))]
final class PrintMgmtReportRun_DC_Extension
{
    /* Additional members */
    private int countScreenOutput_DC = 0;
    private boolean redirectScreenOutput_DC = false;
    private str documentKeyValue_DC;
    private int maxDocOpenInViewer_DC = 0;

    #PrintMgmtSetup
    private const str FilepartSeperator_DC = '-';
    private const int MaxScreenOutput_DC = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setFieldValue_DocumentKeyValue_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a human readable value that uniquely identifies the document to be printed.
    /// </summary>
    public void setFieldValue_DocumentKeyValue_DC()
    {
        documentKeyValue_DC = this.documentKeyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>screenCounter_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the number of reports open in the viewer.
    /// </summary>
    /// <param name = "_screenCounter">The number of reports open in the viewer</param>
    /// <returns>The number of reports open in the viewer</returns>
    /// <remarks>
    /// This method should be used only for a workaround when the PrintMgtmReportRun class
    /// is not used as expected, e.g for Payment advice reports. In this case, instead of incrementing
    /// this counter, the PrintMgtmReportRun object is always instanced all over again for
    /// each of report execution and this way preventing redirection to File to happen.
    /// Using this method we can 'fix' this behaviour also for reports such as Payment advice.
    /// </remarks>
    public int screenCounter_DC(int _screenCounter = countScreenOutput_DC)
    {
        countScreenOutput_DC = _screenCounter;
        return countScreenOutput_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentKeyValue_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the document key value.
    /// </summary>
    /// <param name = "_documentKeyValue_DC">A document key value</param>
    /// <returns>A docuemnt key value</returns>
    /// <remarks>
    /// We are introducing this method for the same reason as for the screenCounter_DC() method.
    /// </remarks>
    public str parmDocumentKeyValue_DC(str _documentKeyValue_DC = documentKeyValue_DC)
    {
        documentKeyValue_DC = _documentKeyValue_DC;
        return documentKeyValue_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRedirectScreenOutput_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the report will be redirected to File.
    /// </summary>
    /// <param name = "_redirectScreenOutput_DC">Specifies whether the report will be redirected to File</param>
    /// <returns>True if the report will be redirected to File; otherwise false</returns>
    /// <remarks>
    /// We are introducing this method for the same reason as for the screenCounter_DC() method.
    /// </remarks>
    public boolean parmRedirectScreenOutput_DC(boolean _redirectScreenOutput_DC = redirectScreenOutput_DC)
    {
        redirectScreenOutput_DC = _redirectScreenOutput_DC;
        return redirectScreenOutput_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxScreenOutput_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum number of reports open in the viewer.
    /// </summary>
    /// <returns>Maximum number of reports open in the viewer.</returns>
    public int getMaxScreenOutput_DC()
    {
        if (maxDocOpenInViewer_DC == 0)
        {
            int maxScreenOutputDefinedInParams = DocParameters::find().MaxNumOfReportsOpenInViewer;

            // We will ignore any other value but positive.
            if (maxScreenOutputDefinedInParams > 0)
            {
                maxDocOpenInViewer_DC = maxScreenOutputDefinedInParams;
            }
            else
            {
                maxDocOpenInViewer_DC = PrintMgmtReportRun::MaxScreenOutput_DC;
            }
        }

        return maxDocOpenInViewer_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintDestinationFileName_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the output filename for the current document running in print management.
    /// </summary>
    /// <param name="_reportContract">The report contract for which the file name should be set.</param>
    /// <param name="_settingDetailPds">The SRSPrintDestinationSettings current instance.</param>
    /// <remarks>
    /// The PrintMgmtSetup form provides ability to specify only one destination file name. For cases where multiple documents needs to be printed
    /// e.g. multiple Sales Invoices, then to avoid overwriting the same file, you should use the printSettings.parmFilePrintDestSettings_DC().parmUseNextFilename()
    /// flag, the printSettings.parmFilePrintDestSettings_DC().parmUseDocIdInFilename() or a placeholder within output file name, e.g. 'PurchOrder_@PURCH_ID@'.
    /// </remarks>
    private void setPrintDestinationFileName_DC(SRSReportDataContract _reportContract, SRSPrintDestinationSettings _settingDetailPds)
    {
        if(!_reportContract)
        {
            throw error(strFmt("@SYS318601", @"_reportContract"));
        }

        if(_settingDetailPds == null || _settingDetailPds.printMediumType() != SRSPrintMediumType::File_DC)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // Set the printMgmtDocId which results in suffix of the final output filename.
        _settingDetailPds.parmFilePrintDestSettings_DC().setDefaultParmValues(
            this.parmReportRunController().parmReportName(),
            this.parmReportRunController().parmReportContract().parmReportCaption());

        str printMgmtDocId;

        str instanceName = this.settingDetail().parmType() == PrintMgmtDocInstanceType::Original ||
                           strLen(this.settingDetail().parmInstanceName()) == 0 ? '' : this.settingDetail().parmInstanceName();
        
        if (documentKeyValue_DC == '')
        {
            printMgmtDocId = instanceName;
        }
        else // if (documentKeyValue_DC != '')
        {
            printMgmtDocId = instanceName == '' ? documentKeyValue_DC : documentKeyValue_DC + PrintMgmtReportRun::FilepartSeperator_DC + instanceName;
        }
        if (printMgmtDocId != '')
        {
            printMgmtDocId = PrintMgmtReportRun::replaceInvalidCharsForFileName(printMgmtDocId);
        }

        _settingDetailPds.parmFilePrintDestSettings_DC().printMgmtDocId(printMgmtDocId);

        // Set the output filename on the executionInfo.
        SrsPrintMgmtExecutionInfo executionInfo = _reportContract.parmReportExecutionInfo() as SrsPrintMgmtExecutionInfo;
        if (executionInfo)
        {
            str outputfileName = _settingDetailPds.parmFilePrintDestSettings_DC().getResolvedOutputFilename();
            executionInfo.parmOriginalDestinationFileName(outputfileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incScreenOutput_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the number of reports open in the viewer and redirects the report to File
    /// if the number of open reports exceeds the limit.
    /// </summary>
    /// <param name = "_settings">An instance of the SRSPrintDestinationSettings class</param>
    /// <param name = "_controller">An instance of the SrsPrintMgmtController class</param>
    /// <returns>An updated instance of the SRSPrintDestinationSettings class</returns>
    public SRSPrintDestinationSettings incScreenOutput_DC(SRSPrintDestinationSettings _settings, SrsPrintMgmtController _controller)
    {
        SRSPrintDestinationSettings changeDestination()
        {
            SRSPrintDestinationSettings settings = new SRSPrintDestinationSettings(_settings.pack());

            str baseName = enum2str(this.parmDocType()) + PrintMgmtReportRun::FilepartSeperator_DC;
            str instanceName = this.settingDetail().parmType() == PrintMgmtDocInstanceType::Original ||
                               strLen(this.settingDetail().parmInstanceName()) == 0 ? '' : PrintMgmtReportRun::FilepartSeperator_DC + this.settingDetail().parmInstanceName();
            str fileName = strFmt('%1%2%3', baseName, documentKeyValue_DC, instanceName);
            fileName = PrintMgmtReportRun::replaceInvalidCharsForFileName(fileName);

            str fullFilename; // name + ext

            // Change the target print destination from Screen >> File
            settings.printMediumType(SRSPrintMediumType::File_DC);

            // Turn off "Preview before print".
            settings.parmSrsPrintReportSettings_DC().parmPreviewBeforePrint(false);

            // Set up the File print destination settings.
            if (settings.parmSrsPrintReportSettings_DC().printSrsOriginalDesign())
            {
                settings.parmFilePrintDestSettings_DC().parmOutputFileFormatSrs(SRSReportFileFormat::PDF);
            }
            else
            {
                settings.parmFilePrintDestSettings_DC().parmOutputFileFormat(DocOutputFileFormat::PDF);
            }
            
            fullFilename = filename + '.' + DocConstantFile::FileExtPdf;
            if (documentKeyValue_DC != '')
            {
                settings.parmFilePrintDestSettings_DC().parmUseGuidAsSuffix(false);
            }
            else
            {
                settings.parmFilePrintDestSettings_DC().parmUseGuidAsSuffix(true);
            }
            settings.parmFilePrintDestSettings_DC().parmOutputFilename(fullFilename);
            
            settings.parmFilePrintDestSettings_DC().parmUseDocIdInFilename(false);
            settings.parmFilePrintDestSettings_DC().parmUseTimestampAsSuffix(false);

            settings.parmFilePrintDestSettings_DC().parmSendOutputFileToUser(true);

            settings.parmFilePrintDestSettings_DC().parmSaveToSharePoint(false);
            settings.parmFilePrintDestSettings_DC().parmSaveToAzureBlobStorage(false);
            settings.parmFilePrintDestSettings_DC().parmSaveToAttachments(false);
            settings.parmFilePrintDestSettings_DC().parmSaveToFileSystem(false);
            settings.parmFilePrintDestSettings_DC().parmSaveToAzureFiles(false);

            return settings;
        }

        countScreenOutput_DC++;

        if (redirectScreenOutput_DC)
        {
            return changeDestination();
        }
        else if (this.parmCheckScreenOutput() && _controller && countScreenOutput_DC > this.getMaxScreenOutput_DC())
        {
            if(Box::okCancel("@DocentricAX:RedirectPrintingReportFromScreenToFile", DialogButton::Ok) == DialogButton::Cancel)
            {
                _controller.cancelRun();
                throw info("@SYS344191");
            }
            redirectScreenOutput_DC = true;
            return changeDestination();
        }

        return _settings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultPrintSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the default print destination settings.
    /// </summary>
    private void updateDefaultPrintSettings_DC()
    {
        try
        {
            SrsReportRunController reportRunController = this.parmReportRunController();
            SrsReportDataContract reportContract = reportRunController ? reportRunController.parmReportContract() : null;
            if (reportContract)
            {
                SRSPrintDestinationSettings pds = reportContract.parmPrintSettings();
                if (pds && pds.parmTmpPrintDestSettings_DC().parmSrsReportName())
                {
                    SRSPrintDestinationSettings pdsDefaultOrig = this.parmDefaultOriginalPrintJobSettings();
                    SRSPrintDestinationSettings pdsDefaultCopy = this.parmDefaultCopyPrintJobSettings();

                    if (pdsDefaultOrig && !pdsDefaultOrig.parmTmpPrintDestSettings_DC().parmSrsReportName())
                    {
                        pdsDefaultOrig.parmTmpPrintDestSettings_DC().parmSrsReportName(pds.parmTmpPrintDestSettings_DC().parmSrsReportName());
                        pdsDefaultOrig.parmTmpPrintDestSettings_DC().parmReportCaption(pds.parmTmpPrintDestSettings_DC().parmReportCaption());
                    }
                    if (pdsDefaultCopy && !pdsDefaultCopy.parmTmpPrintDestSettings_DC().parmSrsReportName())
                    {
                        pdsDefaultCopy.parmTmpPrintDestSettings_DC().parmSrsReportName(pds.parmTmpPrintDestSettings_DC().parmSrsReportName());
                        pdsDefaultCopy.parmTmpPrintDestSettings_DC().parmReportCaption(pds.parmTmpPrintDestSettings_DC().parmReportCaption());
                    }
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads instances of the PrintMgmtPrintSettingDetail class that are used for printing a report.
    /// </summary>
    /// <param name="_queryTableBuffer">The table used to evaluate conditions for conditional print settings.</param>
    /// <param name="_referencedTableBuffer">The table to which print management information has been related.</param>
    /// <param name="_languageId">The language ID that should be used to identification text.</param>
    /// <param name="_documentKeyValue">A human readable value that uniquely identifies the document to be printed.</param>
    /// <remarks>
    /// Either this method or the loadSettingDetail method must be called before other methods.
    /// </remarks>
    public void load(Common _queryTableBuffer, Common _referencedTableBuffer, str _languageId, str _documentKeyValue)
    {
        // Prevent Email token redirection in case of Print management preview.
        SrsReportRunController reportRunController = this.parmReportRunController();
        if (reportRunController && reportRunController.parmArgs() &&
            reportRunController.parmArgs().parm() == DocConstant::PrintManagementPreview)
        {
            // Set the PrintManagementPreview data slot to true.
            // We will use it to skip Email token redirection.
            CallContext::SetData(DocConstant::PrintManagementPreview, true);
        }
        else
        {
            CallContext::SetData(DocConstant::PrintManagementPreview, false);
        }

        // Update the default print settings with the info needed for Email token redirection
        // if the load() method will not load settings from Print management.
        if (this.parmForcePrintJobSettings())
        {
            this.updateDefaultPrintSettings_DC();
        }

        // Execute the load() method.
        try
        {
            next load(_queryTableBuffer, _referencedTableBuffer, _languageId, _documentKeyValue);

            /****** TRACING ******/
            if (reportRunController && DocTrace::isTraceCategoryEnabled(DocConstantDiagnostics::TracePrintMgmt))
            {
                DocTraceContextPrintMgmt traceContext = DocTraceContextPrintMgmt::construct(this, _queryTableBuffer, _referencedTableBuffer, _languageId, _documentKeyValue);
                DocTrace::info(DocConstantDiagnostics::TracePrintMgmt, DocConstantDiagnostics::TraceSsrsOnPrintMgmtLoad, traceContext.getTraceMessage(), traceContext);
            }
        }
        finally
        {
            // Free the PrintManagementPreview data slot.
            CallContext::FreeNamedDataSlot(DocConstant::PrintManagementPreview);
        }

        // Setting the value of a helping member.
        this.setFieldValue_DocumentKeyValue_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a SSRS Report by using the provided print management settings.
    /// </summary>
    /// <param name="_reportRun">The settings for the report.</param>
    /// <remarks>
    /// The PrintJobSettings object is converted to an SRSPrintDestinationSettings object and
    /// used to control the SSRS report.
    /// </remarks>
    public static void execute(PrintMgmtReportRun _reportRun)
    {
        if (_reportRun.settingDetail().parmSSRS() == PrintMgmtSSRS::SSRS)  // Note that there is another extension of this method used for ER CBD in the PrintMgmtReportRun_ApplicationSuite_Extension class
        {
            PrintMgmtPrintSettingDetail settingDetail = _reportRun.settingDetail();
            SRSPrintDestinationSettings printJobPds = settingDetail.parmPrintJobSettings();
            SrsReportRunController reportRunController = _reportRun.parmReportRunController();
            SrsReportDataContract reportContract = reportRunController.parmReportContract();

            // Change the print destination from Screen to Screen_DC if needed.
            if (printJobPds.printMediumType() == SRSPrintMediumType::Screen)
            {
                if (DocSrsReportRunUtil::useDocentricPreview(reportContract))
                {
                    printJobPds.printMediumType(SRSPrintMediumType::Screen_DC);
                    printJobPds.parmSrsPrintReportSettings_DC().parmTemplateId('');
                    printJobPds.parmSrsPrintReportSettings_DC().parmSaveToArchive(printJobPds.parmPrintToArchive());
                }
                else if (DocSrsReportRunUtil::useOnlyDocentricPreviewer(reportContract))
                {
                    printJobPds.printMediumType(SRSPrintMediumType::Screen_DC);
                    printJobPds.parmSrsPrintReportSettings_DC().parmTemplateId(DocConstant::BuiltInSsrsDesignPlaceholder);
                    printJobPds.parmSrsPrintReportSettings_DC().parmSaveToArchive(printJobPds.parmPrintToArchive());
                }
            }

            // Turn off the PrintToArchive flag, if this is a Docentric print destination.
            if (DocSrsReportRunUtil::isDocentricPrintDestination(printJobPds.printMediumType()))
            {
                printJobPds.parmPrintToArchive(false);
            }

            // Set number of copies if needed.
            if (!_reportRun.parmForcePrintJobSettings())
            {
                printJobPds.numberOfCopies(settingDetail.parmNumberOfCopies());
            }

            // Store the info about Copy and Original.
            if (settingDetail.parmType() == PrintMgmtDocInstanceType::Original)
            {
                printJobPds.parmSrsPrintReportSettings_DC().parmOriginalCopyType(DocPrintMgmtOriginalCopyType::Original);
                printJobPds.parmSrsPrintReportSettings_DC().parmPrintMgmtSettingName("@SYS13700");
            }
            else // if (settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
            {
                printJobPds.parmSrsPrintReportSettings_DC().parmOriginalCopyType(DocPrintMgmtOriginalCopyType::Copy);
                printJobPds.parmSrsPrintReportSettings_DC().parmPrintMgmtSettingName(settingDetail.parmInstanceName());
            }

            // Get Document Title Original no matter if Copy or Original is being printed and store it.
            // Document Title Original contains either Label ID or Label value (translation), depending on the report controller implementation of the documentTitle() method.
            // DocumentTitleOriginal will be added to the Parameters data section of DDSP in DocDataSourceProviderSrsReporting.addParameters().
            str originalDocumentTitle = PrintMgmtReportRun::getDocumentTitleOriginal_DC(reportRunController, reportContract);
            printJobPds.parmSrsPrintReportSettings_DC().parmDocumentTitleOriginal(originalDocumentTitle);


            /*-------------------------------------------------------------------*/
            // NOTE: In the execute() method, this will be executed:
            // reportContract.parmPrintSettings(settingDetail.parmPrintJobSettings()); or reportContract.parmPrintSettings(printJobPds);
            /*-------------------------------------------------------------------*/

            /**********************  REDIRECTION FOR PRINT MANAGEMENT PREVIEW  ***************************/
            // Change the print destination to Screen_DC if this is Print Management preview
            // and we are not running in batch. Also make sure that print to archive isn't set.
            if (reportRunController.parmArgs() && reportRunController.parmArgs().parm() == DocConstant::PrintManagementPreview &&
                !reportRunController.isInBatch_DC())
            {
                SRSPrintDestinationSettings changedSrsPds = new SRSPrintDestinationSettings(printJobPds.pack());

                changedSrsPds.printMediumType(SRSPrintMediumType::Screen_DC);
                changedSrsPds.parmSrsPrintReportSettings_DC().parmSaveToArchive(false);

                settingDetail.parmPrintJobSettings(changedSrsPds);
            
                // We will not perform redirection from Screen to File in case that max number of reports open in viewer is exceeded,
                // because this behaviour could confuse users, which expect to get the result(s) on the screen.
            }
            else
            {
                /**********************  REDIRECTION SCREEN_DC -> FILE_DC  ***************************/
                // Change Screen_DC to File_DC if needed, but only when not running in batch.
                // When running in batch, Screen_DC will be changed to Archive_DC in SrsPrintMgmtController.runReport() pre-event handler.
                if (printJobPds.printMediumType() == SRSPrintMediumType::Screen_DC && !reportRunController.isInBatch_DC())
                {
                    SRSPrintDestinationSettings changedSrsPds = _reportRun.incScreenOutput_DC(printJobPds, reportRunController);
                    settingDetail.parmPrintJobSettings(changedSrsPds);
                }
                // Set the output filename for the current document running in print management.
                else if(printJobPds.printMediumType() == SRSPrintMediumType::File_DC)
                {
                    _reportRun.setPrintDestinationFileName_DC(reportContract, printJobPds);
                }
            }
        }

        next execute(_reportRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads an instance of the PrintMgmtPrintSettingDetail class used to print a report.
    /// </summary>
    /// <param name="_settingDetail">An instance of the PrintMgmtPrintSettingDetail class.</param>
    /// <param name="_documentKeyValue">A human readable value that uniquely identifies the document to be printed.</param>
    /// <remarks>
    /// Either this method or the load method must be called before other instance methods.
    /// </remarks>
    public void loadSettingDetail(PrintMgmtPrintSettingDetail _settingDetail, str _documentKeyValue)
    {
        next loadSettingDetail(_settingDetail, _documentKeyValue);

        // Setting the value of a helping member.
        this.setFieldValue_DocumentKeyValue_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleOriginal_DC</Name>
				<Source><![CDATA[
    /***************************************************************************************************/
    /*                             GETTING DOCUMENT TITLE ORIGINAL                                     */
    /***************************************************************************************************/

    /// <summary>
    /// Gets the original Document title as a Label ID or Label value (translation), 
    /// depending on the report controller implementation of the documentTitle() method.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the report controller.</param>
    /// <param name = "_srsReportRunDataContract">An instance of the report contract.</param>
    /// <returns>
    /// Document title original Label ID or Label value (translated in the report runtime language).
    /// Returns Label ID for reports : SalesQuotation, SalesQuotationConfirmation, SalesOrderPackingSlip, SalesOrderConfirmation, PurchaseOrder, PurchaseOrderProductReceipt, PurchaseOrderReceiptsList, VendorInvoice.
    /// Returns Label value for reports : CustomerInvoice, FreeTextInvoice, ProjectInvoice, ProjectQuotation.
    /// </returns>
    public static str getDocumentTitleOriginal_DC(SrsReportRunController _srsReportRunController, SrsReportDataContract _srsReportRunDataContract)
    {
        str documentTitle;

        // Gets document title for Sales Invoice or FreeTextInvoice.
        if ((_srsReportRunController is SalesInvoiceController && _srsReportRunDataContract.parmRdpContract() is SalesInvoiceContract) ||
            (_srsReportRunController is FreeTextInvoiceController && _srsReportRunDataContract.parmRdpContract() is FreeTextInvoiceContract))
        {
            documentTitle = PrintMgmtReportRun::getDocumentTitleOriginalSalesFreeTextInvoice_DC(_srsReportRunController, _srsReportRunDataContract);
        }

        // Gets document title for folowing reports.
        else if (_srsReportRunController is SalesQuotationController ||
                 _srsReportRunController is SalesQuotationConfirmationController ||
                 _srsReportRunController is SalesPackingSlipController ||
                 _srsReportRunController is SalesConfirmController ||
                 _srsReportRunController is PurchPurchaseOrderController ||
                 _srsReportRunController is PurchPackingSlipController ||
                 _srsReportRunController is PurchReceiptsListController)
        {
            documentTitle = PrintMgmtReportRun::getDocumentTitleOriginalTradeDocumentReports_DC(_srsReportRunController);
        }

        // Gets document title for Vendor invoice. 
        else if (_srsReportRunController is VendInvoiceDocumentController)
        {
            documentTitle = PrintMgmtReportRun::getDocumentTitleOriginalVendInvoiceDocument_DC(_srsReportRunController, _srsReportRunDataContract);
        }

        // Gets document title for Project invoice.
        else if (_srsReportRunController is PSAProjAndContractInvoiceController)
        {
            documentTitle = PrintMgmtReportRun::getDocumentTitleOriginalPSAProjectInvoice_DC(_srsReportRunController, _srsReportRunDataContract);
        } 

        // Gets document title for Project quotation.
        else if (_srsReportRunController is PSAQuotationsController ||
                 _srsReportRunController is PSAQuotationsConfirmController)
        {
            documentTitle = PrintMgmtReportRun::getDocumentTitleOriginalPSAProjectQuotation_DC(_srsReportRunController);
        }
        
        else
        {
            documentTitle = '';
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleOriginalSalesFreeTextInvoice_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Sales Invoice or FreeTextInvoice report original title.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the report controller.</param>
    /// <param name = "_srsReportDataContract">An instance of the report contract.</param>
    /// <returns>Report title original text.</returns>
    public static str getDocumentTitleOriginalSalesFreeTextInvoice_DC(SrsReportRunController _srsReportRunController, SrsReportDataContract _srsReportDataContract)
    {
        PrintCopyOriginal printCopyOriginalContract;
        boolean changePrintCopyOriginal = false;
        Object controller = _srsReportRunController;
        Object contract = _srsReportDataContract.parmRdpContract();
        str documentTitle = '';

        if (_srsReportDataContract != null && _srsReportRunController != null && 
            objectHasMethod(contract, methodStr(SalesInvoiceContract, parmPrintCopyOriginal)) == true &&
            objectHasMethod(controller, methodStr(SalesInvoiceController, documentTitle)) == true)
        {
            // When the user has run the copy of the report, we need to change parmPrintCopyOriginal() to Original in order to get the original title from the documentTitle().
            if (contract.parmPrintCopyOriginal() == PrintCopyOriginal::Copy)
            {
                printCopyOriginalContract = contract.parmPrintCopyOriginal();
                contract.parmPrintCopyOriginal(PrintCopyOriginal::Original);
                changePrintCopyOriginal = true;
            }

            documentTitle = controller.documentTitle();
            // If the value of parmPrintCopyOriginal has been changed, revert the original value back to the controller.
            if (changePrintCopyOriginal)
            {
                contract.parmPrintCopyOriginal(printCopyOriginalContract);
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleOriginalTradeDocumentReports_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets label id of the original document title for Trade document reports.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the report controller.</param>
    /// <returns>Report title original text.</returns>
    /// <remarks>
    /// Trade document reports are reporst which controller is inherited from TradeDocumentReportController.
    /// Aplicable for SalesQuotation, SalesQuotationConfirmation, SalesPackingSlip, SalesConfirm, PurchPurchaseOrder, PurchPackingSlip and etc.
    /// </remarks>
    public static str getDocumentTitleOriginalTradeDocumentReports_DC(SrsReportRunController _srsReportRunController)
    {
        PrintCopyOriginal printCopyOriginalContract;
        boolean changePrintCopyOriginal = false;
        Object controller = _srsReportRunController;
        str documentTitle = '';
        
        if (_srsReportRunController != null &&
            objectHasMethod(controller, methodStr(TradeDocumentReportController, documentTitle)) == true &&
            objectHasMethod(controller, methodStr(TradeDocumentReportController, parmPrintCopyOriginal_DC)) == true)
        {
            // When the user has run the copy of the report, we need to change parmPrintCopyOriginal() to Original in order to get the original title from the documentTitle().
            if (controller.parmPrintCopyOriginal_DC() == PrintCopyOriginal::Copy)
            {
                printCopyOriginalContract = controller.parmPrintCopyOriginal_DC();
                controller.parmPrintCopyOriginal_DC(PrintCopyOriginal::Original);
                changePrintCopyOriginal = true;
            }

            documentTitle = controller.documentTitle();
            
            // If the value of parmPrintCopyOriginal has been changed, revert the original value back to the controller.
            if (changePrintCopyOriginal)
            {
                controller.parmPrintCopyOriginal_DC(printCopyOriginalContract);
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleOriginalVendInvoiceDocument_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets label id of the original document title for the Vendor Invoice report.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the report controller.</param>
    /// <param name = "_srsReportRunDataContract">An instance of the report contract.</param>
    /// <returns>Report title original text.</returns>
    public static str getDocumentTitleOriginalVendInvoiceDocument_DC(SrsReportRunController _srsReportRunController, SrsReportDataContract _srsReportRunDataContract)
    {
        #ISOCountryRegionCodes
        PrintCopyOriginal printCopyOriginalController;
        boolean changePrintCopyOriginal = false;
        Object controller = _srsReportRunController;
        str documentTitle = '';
        
        if (_srsReportRunController != null &&
            objectHasMethod(controller, methodStr(VendInvoiceDocumentController, parmPrintCopyOriginal_DC)) == true)
        {
            // When the user has run the copy of the report, we need to change parmPrintCopyOriginal() to Original in order to get the original title from the documentTitle().
            if (controller.parmPrintCopyOriginal_DC() == PrintCopyOriginal::Copy)
            {
                printCopyOriginalController = controller.parmPrintCopyOriginal_DC();
                controller.parmPrintCopyOriginal_DC(PrintCopyOriginal::Original);
                changePrintCopyOriginal = true;
            }

            // This is standard logic from the controller outputReport() method - BEGIN
            if (!BrazilParameters::isEnabled())
            {
                // <GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]) && objectHasMethod(controller, methodStr(VendInvoiceDocumentController, documentTitle_MY)))
                {
                    documentTitle = controller.documentTitle_MY();
                }
                else
                // </GMY>
                // <GSA>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]) && objectHasMethod(controller, methodStr(VendInvoiceDocumentController, documentTitle_SA)))
                {
                    documentTitle = controller.documentTitle_SA();
                }
                else
                // </GSA>
                // <GEEU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoLT, #isoLV]) && objectHasMethod(controller, methodStr(VendInvoiceDocumentController, documentTitleLocalization)))
                {
                    documentTitle = controller.documentTitleLocalization();
                }
                else
                {
                    // </GEEU>
                    if (objectHasMethod(controller, methodStr(VendInvoiceDocumentController, documentTitle)))
                    {
                        documentTitle = controller.documentTitle();
                    }
                    // <GEEU>
                }
                // </GEEU>

            }
            // This is standard logic from the controller outputReport() method - END

            // If the value of parmPrintCopyOriginal has been changed, revert the original value back to the controller.
            if (changePrintCopyOriginal)
            {
                controller.parmPrintCopyOriginal_DC(printCopyOriginalController);
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleOriginalPSAProjectInvoice_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Project Invoice report original title.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the report controller.</param>
    /// <param name = "_srsReportDataContract">An instance of the report contract.</param>
    /// <returns>Report title original text.</returns>
    public static str getDocumentTitleOriginalPSAProjectInvoice_DC(SrsReportRunController _srsReportRunController, SrsReportDataContract _srsReportDataContract)
    {
        Object controller = _srsReportRunController;
        Object contract = _srsReportDataContract.parmRdpContract();
        str documentTitle = '';

        if (_srsReportDataContract != null && _srsReportRunController != null &&  
            objectHasMethod(contract, methodStr(PSAProjInvoiceContract, parmProjInvoiceJourRecId)) == true &&
            objectHasMethod(controller, methodStr(PSAProjAndContractInvoiceController, getReportTitle)) == true)
        {
            ProjInvoiceJour invoiceJournal = ProjInvoiceJour::findRecId(contract.parmProjInvoiceJourRecId());

            if (invoiceJournal.RecId)
            {
                documentTitle = controller.getReportTitle(menuItemOutputStr(ProjInvoiceOriginalPrint), invoiceJournal.isProforma(), PrintCopyOriginal::Original);
            }
        }
        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleOriginalPSAProjectQuotation_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Project Quotations report original title.
    /// </summary>
    /// <param name = "_srsReportRunController">An instance of the report controller.</param>
    /// <returns>Report title original text.</returns>
    public static str getDocumentTitleOriginalPSAProjectQuotation_DC(SrsReportRunController _srsReportRunController)
    {
        PrintCopyOriginal printCopyOriginalContract;
        boolean changePrintCopyOriginal = false;
        Object controller = _srsReportRunController;
        str documentTitle = '';

        if (_srsReportRunController != null && 
                ((objectHasMethod(controller, methodStr(PSAQuotationsController, getReportTitle)) == true &&
                  objectHasMethod(controller, methodStr(PSAQuotationsController, parmPrintCopyOriginal_DC)) == true) || 
                 (objectHasMethod(controller, methodStr(PSAQuotationsConfirmController, getReportTitle)) == true &&
                  objectHasMethod(controller, methodStr(PSAQuotationsConfirmController, parmPrintCopyOriginal_DC)) == true)))
        {
            // When the user has run the copy of the report, we need to change parmPrintCopyOriginal() to Original in order to get the original title from the documentTitle().
            if (controller.parmPrintCopyOriginal_DC() == PrintCopyOriginal::Copy)
            {
                printCopyOriginalContract = controller.parmPrintCopyOriginal_DC();
                controller.parmPrintCopyOriginal_DC(PrintCopyOriginal::Original);
                changePrintCopyOriginal = true;
            }

            documentTitle = controller.getReportTitle();
            
            // If the value of parmPrintCopyOriginal has been changed, revert the original value back to the controller.
            if (changePrintCopyOriginal)
            {
                controller.parmPrintCopyOriginal_DC(printCopyOriginalContract);
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>changeDestination</c> method changes the destination of printing from Screen to PDF file.
    /// </summary>
    /// <param name="_docType">A document type.</param>
    /// <param name="_currentSettingDetail">An instance of the <c>PrintMgmtPrintSettingDetail</c> class.</param>
    /// <param name="_documentKeyValue">A document key value.</param>
    /// <param name="_filePath">The path that a PDF file will be saved to.</param>
    /// <param name="_settings">An instance of the <c>SRSPrintDestinationSettings</c> class.</param>
    /// <remarks>This method must be called when the number of reports printing on screen reaches #maxScreenOutput.</remarks>
    /// <returns>And instance of the <c>SRSPrintDestinationSettings</c> class.</returns>
    public static SRSPrintDestinationSettings changeDestination(PrintMgmtDocumentType _docType,
                                                            PrintMgmtPrintSettingDetail _currentSettingDetail,
                                                            str _documentKeyValue,
                                                            str _filePath,
                                                            SRSPrintDestinationSettings _settings)
    {
        next changeDestination(_docType, _currentSettingDetail, _documentKeyValue, _filePath, _settings);

        // When the maximum number of documents printed to the screen is reached,
        // the remaining documents are printed to the File print destination.
        // In this case, we need to redirect printing to the File_DC print destination
        // when Docentric Viewer and the template are used to preview the documents.
        DocReportTable reportTable = DocReportTable::findReportId(_currentSettingDetail.parmReportFormatName());

        if (reportTable && reportTable.UseDocentricPreviewForSrs)
        {
            _settings.printMediumType(SRSPrintMediumType::File_DC);
            _settings.parmSrsPrintReportSettings_DC().parmTemplateId('');
            _settings.parmFilePrintDestSettings_DC().parmOutputFileFormat(DocOutputFileFormat::PDF);

            str baseName = enum2str(_docType) + DocConstantFile::PrintMgmtFilenameConcatSymbol;
  
            str instanceName = _currentSettingDetail.parmType() == PrintMgmtDocInstanceType::Original || strLen(_currentSettingDetail.parmInstanceName()) == 0 ? '' : DocConstantFile::PrintMgmtFilenameConcatSymbol + _currentSettingDetail.parmInstanceName();
            str fileName = strFmt('%1%2%3', baseName, _documentKeyValue, instanceName);
            str fileExtension = _settings.parmFilePrintDestSettings_DC().getResolvedOutputFileType();
            str fileNameWithExtension = strFmt('%1.%2', fileName, fileExtension);

            _settings.parmFilePrintDestSettings_DC().parmOutputFilename(fileNameWithExtension);
        }

        return _settings;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>