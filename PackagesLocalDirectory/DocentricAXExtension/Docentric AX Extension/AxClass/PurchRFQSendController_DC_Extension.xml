<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSendController_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class PurchRFQSendController_DC_Extension is an extension of the class PurchRFQSendController.
/// </summary>
[ExtensionOf(classStr(PurchRFQSendController))]
final class PurchRFQSendController_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the Docentric email print destination.
    /// </summary>
    protected void initFormLetterReport()
    {
        next initFormLetterReport();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchRFQAmendmendEmailNotifier))
        {
            DocReportTable reportTable = DocReportTable::findReportId(this.parmReportContract().parmReportName());
            PurchRFQAmendmendEmailNotifier emailNotifier = this.parmArgs().caller() as PurchRFQAmendmendEmailNotifier;
            SRSPrintDestinationSettings pds = formLetterReport.parmDefaultOriginalPrintJobSettings();

            // Print the report via Docentric if all of the following conditions are met:
            // 1) the report ID is provided and the report is registered in the Docentric report setup.
            // 2) IsActiveSRS flag is set to true (it is active).
            // 3) UseOnlyWithPrintDestinations flag is set to false.
            // 4) The report has enabled templates.
            if (reportTable && reportTable.IsActiveSRS && !reportTable.UseOnlyWithPrintDestinations && reportTable.hasEnabledTemplates())
            {
                // Set the Docentric Email print destination settings.
                pds.printMediumType(SRSPrintMediumType::Email_DC);

                // Set report template.
                // Use '' for @DOCENTRIC_DEFAULT_TEMPLATE@ or use 'RFQSend.Report' for a specific report template.
                pds.parmSrsPrintReportSettings_DC().parmTemplateId('');

                DocPrintDestSettingsEmail docPrintDestSettingsEmail = pds.parmEmailPrintDestSettings_DC();
                // Set email recipient(s)
                docPrintDestSettingsEmail.parmEmailTo(pds.parmEMailContract().parmTo());

                // Resolve placeholders in the subject field. The standard MS code does not resolve placeholders in the subject field.
                str subject = SysEmailMessage::stringExpand(pds.parmEMailContract().parmSubject(), emailNotifier.parmEmailTagsRFQCaseMapping());
                // Set email subject.
                docPrintDestSettingsEmail.parmEmailSubject(subject);
                // Set email body.
                docPrintDestSettingsEmail.parmEmailBody(pds.parmEMailContract().parmBody());

                // Find the other emailing settings if the executing report is registered in Docentric report setup.
                DocEmailMessageReportSettings emailPrintDestSettings = DocEmailMessageReportSettings::getEmailMessageReportSettings(reportTable);

                // Find the sender display name.
                str senderDisplayName = DocReportTable::getEmailSenderDisplayName(curExt(), reportTable.ReportId);
                docPrintDestSettingsEmail.parmEmailFromDisplayName(senderDisplayName);
            
                docPrintDestSettingsEmail.parmEmailReplyTo(emailPrintDestSettings.parmReplyToAddress());
                docPrintDestSettingsEmail.parmEmailBounceTo(emailPrintDestSettings.parmBounceToAddress());
                docPrintDestSettingsEmail.parmEmailMsgPriority(DocEmailMessageReportSettings::reportSettingsPriorityToExt(emailPrintDestSettings.parmMessagePriority()));
                docPrintDestSettingsEmail.parmEmailSendingMode(DocEmailMessageReportSettings::sendingModeToExt(emailPrintDestSettings.parmSendingMode()));
                docPrintDestSettingsEmail.parmReadReceiptAddress(emailPrintDestSettings.parmReadReceiptAddress());
                docPrintDestSettingsEmail.parmDeliveryReceiptCondition(emailPrintDestSettings.parmDeliveryReceiptCondition());
            }

            // Publish event to enable subscribers to change the report destination settings.
            DocPurchRFQAmendmentDelegates delegates = DocPurchRFQAmendmentDelegates::instance();
            delegates.onBeforeSendToEmail(pds, reportTable, this, emailNotifier);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>