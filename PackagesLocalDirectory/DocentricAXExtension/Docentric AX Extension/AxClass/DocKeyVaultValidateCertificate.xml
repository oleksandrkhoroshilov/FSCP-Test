<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocKeyVaultValidateCertificate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Certificates;
using DSA = Docentric.AX.Documents.Pdf.DigitalSignature;
using Docentric.AX.Security.Azure.KeyVault;

/// <summary>
/// The class DocKeyVaultValidateCertificate is used to validate the Key Vault certificates.
/// </summary>
public class DocKeyVaultValidateCertificate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main class entry point.
    /// </summary>
    /// <param name = "_args">Args</param>
    public static void main(Args _args)
    {
        if (_args && _args.dataset() == tablenum(KeyVaultCertificateTable))
        {
            DocKeyVaultValidateCertificate kvValidateCert = new DocKeyVaultValidateCertificate();
            kvValidateCert.validate(_args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the certificate referenced by KeyVaultCertificateTable entry.
    /// </summary>
    /// <param name = "_certificateTable">The KeyVaultCertificateTable table buffer</param>
    private void validate(KeyVaultCertificateTable _certificateTable)
    {
        System.Exception ex;

        KeyVaultParameters keyVaultParameters = KeyVaultParameters::findRecId(_certificateTable.KeyVaultRef);

        // Validate the key vault parameter settings (Key Vault Url, etc.)
        str keyVaultSecretUrl;
        try
        {
            keyVaultSecretUrl = KeyVaultProtocolUtils::GetIdentifierUrlFromKeyVaultProtocol(
                                                        _certificateTable.KeyVaultCertificate,
                                                        KeyVaultObjectType::Secret,
                                                        keyVaultParameters.Url);
        }
        catch (ex)
        {
            DocGlobalHelper::handleClrException();
            return;
        }

        switch (_certificateTable.KeyVaultCertificateType)
        {
            case  KeyVaultCertificateType::Certificate:
                try
                {
                    // Reset the global cache - Test should always check the latest state
                    DocGlobalCache::upsert(DocGlobalCacheKey::AzureKeyVaultCertificate);

                    // Load certificate
                    var certificate = Certificate::GetCertificate(
                                                        keyVaultParameters.AppClientId,
                                                        keyVaultParameters.getClientSecretKey(),
                                                        keyVaultSecretUrl);

                    // Verify certificate
                    CertificateUtils::VerifyCertificate(certificate);

                    // No exception, report success.
                    DocGlobalHelper::handleInfo("@KeyVault:ValidateCertificate_Success");
                }
                catch (ex)
                {
                    str errorMsg = DocGlobalHelper::getLastClrExceptionMessage();

                    // Validation exceptions are reported as warnings, others as errors
                    if (ex is DSA.Exceptions.DocCertificateVerificationException)
                    {
                        DocGlobalHelper::handleWarning(errorMsg);
                    }
                    else
                    {
                        DocGlobalHelper::handleError(errorMsg);
                    }
                }
                break;

            case KeyVaultCertificateType::Manual:
                try
                {
                    // Reset the global cache - Test should always check the latest state
                    DocGlobalCache::upsert(DocGlobalCacheKey::AzureKeyVaultSecret);

                    // Get the secret from Azure Key Vault
                    Secret::GetSecret(keyVaultParameters.AppClientId, keyVaultParameters.getClientSecretKey(), keyVaultSecretUrl);

                    // No exception, report success.
                    DocGlobalHelper::handleInfo("@KeyVault:ValidateCertificate_Success");
                }
                catch (ex)
                {
                    DocGlobalHelper::handleClrException();
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>