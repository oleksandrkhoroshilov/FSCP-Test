<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysPrintArchive_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SysPrintArchive_DC_Extension is an extension of the form SysPrintArchive.
/// </summary>
[ExtensionOf(formStr(SysPrintArchive))]
final class SysPrintArchive_DC_Extension
{
    private boolean firstRowRefreshed_DC;
    private Set showPasswordSet_DC = new Set(Types::Int64);  // Initializes the set for records with the shown password


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFirstRowRefreshed_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the first row needs to be refreshed.
    /// </summary>
    /// <param name = "_firstRowRefreshed_DC">Specify if the first row needs to be refreshed</param>
    /// <returns>True if the first row needs to be refreshed; otherwise false</returns>
    public boolean parmFirstRowRefreshed_DC(boolean _firstRowRefreshed_DC = firstRowRefreshed_DC)
    {
        firstRowRefreshed_DC = _firstRowRefreshed_DC;
        return firstRowRefreshed_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowPasswordSet_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the set of records with the shown password.
    /// </summary>
    /// <param name = "_showPasswordSet_DC">The set of records with the shown password</param>
    public void setShowPasswordSet_DC(Set _showPasswordSet_DC)
    {
        showPasswordSet_DC = _showPasswordSet_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShowPasswordSet_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of records with the shown password. This method is called from a
    /// DocPrintJobHeader table display method passwordDisplay which returns the masked 
    /// or unmasked password.
    /// </summary>
    /// <returns>The set of records with the shown password</returns>
    public Set getShowPasswordSet_DC()
    {
        return showPasswordSet_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        FormBuildDataSource ds = this.form().dataSource(formDataSourceStr(SysPrintArchive, PrintJobHeader));
        ds.linkType(FormLinkType::Delayed);     // Passive -> Delayed otherwise dynalink does not work

        next init();

        // Set all the fields read-only
        this.setFieldsReadOnly();

        // This is needed so that the document preview window is shown to the right, instead of the at the bottom of the page.
        FormTabPageControl Overview = this.design().controlName(formControlStr(SysPrintArchive, Overview)) as FormTabPageControl;
        Overview.columns(2);

        // Toggles preview pane based on last user setting.
        DocDocuRefHelper::initDocumentPreviewBasedOnSysLastValue(this);

        DocPrintJobHeader_journalCaption.registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(SysPrintArchive, DocPrintJobHeader_journalCaption_jumpRef_DC), this);
        DocPrintJobHeader_JournalRecIdDetail.registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(SysPrintArchive, DocPrintJobHeader_journalCaption_jumpRef_DC), this);
        DocPrintJobHeader_SourceTableId.registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(SysPrintArchive, DocPrintJobHeader_SourceTableId_jumpRef_DC), this);
        DocPrintJobHeader_SourceTableIdDetail.registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(SysPrintArchive, DocPrintJobHeader_SourceTableId_jumpRef_DC), this);
        DocPrintJobHeader_DocumentTypeId.registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(SysPrintArchive, DocPrintJobHeader_DocumentTypeId_jumpRef_DC), this);
        DocPrintJobHeader_DocumentTypeIdDetail.registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(SysPrintArchive, DocPrintJobHeader_DocumentTypeId_jumpRef_DC), this);


        // Hide the standard buttons Print, Printer setup, Update and Print preview.
        FormControl buttonToHide = this.control(this.controlId(formControlStr(SysPrintArchive, PrintFile)));
        if (buttonToHide)
        {
            buttonToHide.visible(false);
        }
        buttonToHide = this.control(this.controlId(formControlStr(SysPrintArchive, PrinterSetup)));
        if (buttonToHide)
        {
            buttonToHide.visible(false);
        }
        buttonToHide = this.control(this.controlId(formControlStr(SysPrintArchive, Refresh)));
        if (buttonToHide)
        {
            buttonToHide.visible(false);
        }
        buttonToHide = this.control(this.controlId(formControlStr(SysPrintArchive, PrintPreview)));
        if (buttonToHide)
        {
            buttonToHide.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsReadOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields read-only.
    /// </summary>
    private void setFieldsReadOnly()
    {
        // List of fields that needs to be editable
        Set fieldIdsToEditSet = new Set(Types::Container);
        fieldIdsToEditSet.add([tableNum(PrintJobHeader), fieldNum(PrintJobHeader, jobDescription)]);
        fieldIdsToEditSet.add([tableNum(DocPrintJobHeader), fieldNum(DocPrintJobHeader, Comment)]);

        // Set the fields read-only
        for (int i = 1; i <= this.dataSourceCount(); i++)
        {
            FormDataSource fds = this.dataSource(i);
            TableId currentTableId = fds.table();

            QueryBuildFieldList fieldList = fds.queryBuildDataSource().fields();

            for (int j = 1; j <= fieldList.fieldCount(); j++)
            {
                FieldId currentFieldId = fieldList.field(j);

                FormDataObject fdsField = fds.object(currentFieldId);

                // Check if the field should be editable
                if (fieldIdsToEditSet.in([currentTableId, currentFieldId]))
                {
                    continue;
                }
                fdsField.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Information_OnPageActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the tab page Information is activated.
    /// </summary>
    public void Information_OnPageActivated_DC()
    {
        if (!this.parmFirstRowRefreshed_DC())
        {
            this.dataSource(formDataSourceStr(SysPrintArchive, PrintJobHeader)).research(true);
            this.parmFirstRowRefreshed_DC(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintJobHeader_OnInitialized_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is initialized.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void PrintJobHeader_OnInitialized_DC(FormDataSource _dataSource)
    {
        QueryBuildDataSource qbds = _dataSource.queryBuildDataSource();
        qbds.addRange(fieldNum(PrintJobHeader, jobDescription));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintJobHeader_OnInitialized_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is initialized.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    /// <remarks>Used for establishing dynalinks and setting up filters.</remarks>
    public void DocPrintJobHeader_OnInitialized_DC(FormDataSource _dataSource)
    {
        QueryBuildDataSource qbds = _dataSource.queryBuildDataSource();
        DocAccountRole accountRole;
        DocJournalType journalType;
        FieldId accountNumFieldId = 0;
        FieldId journalRecIdFieldId = 0;

        // Filter on ReportId is always present and it remains empty when the form is called
        _dataSource.query().addQueryFilter(qbds, fieldstr(DocPrintJobHeader, ReportId));

        Args args = this.args();
        if (args)
        {
            // In case when the form was opened from a common journal or All customers/vendors form, set up needed values for dynalinks.
            switch(args.dataset())
            {
                // All customers
                case tableNum(CustTable):
                    accountRole = DocAccountRole::Customer;
                    accountNumFieldId = fieldNum(CustTable, AccountNum);
                    break;

                // All vendors
                case tableNum(VendTable):
                    accountRole = DocAccountRole::Vendor;
                    accountNumFieldId = fieldNum(VendTable, AccountNum);
                    break;

                // Common journals start from here

                // Sales order confirmations
                case tableNum(CustConfirmJour):
                    journalType = DocJournalType::CustConfirmJour;
                    journalRecIdFieldId = fieldNum(CustConfirmJour, RecId);
                    break;

                // Invoice journal
                case tableNum(CustInvoiceJour):
                    journalType = DocJournalType::CustInvoiceJour;
                    journalRecIdFieldId = fieldNum(CustInvoiceJour, RecId);
                    break;

                // Packing slip journal
                case tableNum(CustPackingSlipJour):
                    journalType = DocJournalType::CustPackingSlipJour;
                    journalRecIdFieldId = fieldNum(CustPackingSlipJour, RecId);
                    break;

                // Sales quotation confirmations
                case tableNum(CustQuotationConfirmJour):
                    journalType = DocJournalType::CustQuotationConfirmJour;
                    journalRecIdFieldId = fieldNum(CustQuotationConfirmJour, RecId);
                    break;

                // Sales quotation journal
                case tableNum(CustQuotationJour):
                    journalType = DocJournalType::CustQuotationJour;
                    journalRecIdFieldId = fieldNum(CustQuotationJour, RecId);
                    break;

                // Project invoices
                case tableNum(ProjInvoiceJour):
                    journalType = DocJournalType::ProjInvoiceJour;
                    journalRecIdFieldId = fieldNum(ProjInvoiceJour, RecId);
                    break;
                
                // Purchase order confirmations
                case tableNum(VendPurchOrderJour):
                    journalType = DocJournalType::VendPurchOrderJour;
                    journalRecIdFieldId = fieldNum(VendPurchOrderJour, RecId);
                    break;
            }
        }

        // Filter on AccountRole and AccountNum are present if the form was not opened with dynalink on this field
        if (accountNumFieldId)
        {
            qbds.addDynalink(fieldNum(DocPrintJobHeader, AccountNum), args.record(), accountNumFieldId);
            qbds.joinMode(JoinMode::InnerJoin);

            // Used when opened from All customers/vendors form
            if (accountRole)
            {
                QueryFilter qfAccountRole = _dataSource.query().addQueryFilter(qbds, fieldstr(DocPrintJobHeader, AccountRole));
                qfAccountRole.value(queryValue(accountRole));
                qfAccountRole.status(RangeStatus::Locked);
            }
        }
        else
        {
            _dataSource.query().addQueryFilter(qbds, fieldstr(DocPrintJobHeader, AccountNum));
        }

        // Filter on JournalType and JournalRecId are present if the form was not opened with dynalink on this field
        if (journalRecIdFieldId)
        {
            qbds.addDynalink(fieldNum(DocPrintJobHeader, JournalRecId), args.record(), journalRecIdFieldId);
            qbds.joinMode(JoinMode::InnerJoin);

            // Used when opened from a common journal form
            if (journalType)
            {
                QueryFilter qfJournalType = _dataSource.query().addQueryFilter(qbds, fieldstr(DocPrintJobHeader, JournalType));
                qfJournalType.value(queryValue(journalType));
                qfJournalType.status(RangeStatus::Locked);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocDocumentViewerFormControl_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocDocumentViewerFormControl_DC form control from the SysPrintArchive form.
    /// </summary>
    /// <returns>DocDocumentViewerFormControl_DC form control.</returns>
    public DocDocumentViewer getDocDocumentViewerFormControl_DC()
    {
        return this.design().controlName(formControlStr(SysPrintArchive, DocDocumentViewerFormControl_DC));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentPreviewGroup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocumentPreviewGroup_DC form control from the SysPrintArchive form.
    /// </summary>
    /// <returns>DocumentPreviewGroup_DC form control.</returns>
    public FormGroupControl getDocumentPreviewGroup_DC()
    {
        return this.design().controlName(formControlStr(SysPrintArchive, DocumentPreviewGroup_DC));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToggleDocumentPreview_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ToggleDocumentPreview_DC form control from the SysPrintArchive form.
    /// </summary>
    /// <returns>ToggleDocumentPreview_DC form control.</returns>
    public FormButtonControl getToggleDocumentPreview_DC()
    {
        return this.design().controlName(formControlStr(SysPrintArchive, ToggleDocumentPreview_DC));
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintJobHeader_OnPostLinkActive_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after linkActive method execution on datasource.
    /// </summary>
    /// <remarks>Used for refreshing Document preview window on dynalink record change.</remarks>
    public void PrintJobHeader_OnPostLinkActive_DC()
    {
        DocDocuRefHelper::findAndShowDocumentForPreview(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintJobHeader_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is activated.
    /// </summary>
    public void DocPrintJobHeader_OnActivated_DC()
    {
        container srsPdPacked = DocPrintJobHeader.PrintDestinationSettingsPacked;
        PrintSettings_DC.enabled(srsPdPacked != conNull());

        ViewEmail_DC.enabled(DocPrintJobHeader.PrintDestination == DocPrintDestinationArchive::Email);

        // Clears the set of records with the shown password.
        showPasswordSet_DC = new Set(Types::Int64);
        DocPrintJobHeader_EncryptedPdfPasswordShowHide.enabled(DocPrintJobHeader.EncryptedPdf);

        DocDocuRefHelper::findAndShowDocumentForPreview(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintJobHeader_OnValidatingWrite_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is validating the data.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    /// <param name = "_e">Event args</param>
    public void DocPrintJobHeader_OnValidatingWrite_DC(FormDataSource _dataSource, FormDataSourceEventArgs _e)
    {
        FormDataSourceCancelEventArgs args = _e as FormDataSourceCancelEventArgs;
        if (_dataSource != null && args != null)
        {
            DocPrintJobHeader docPrintJobHeader = _datasource.cursor() as DocPrintJobHeader;
            if (docPrintJobHeader.RecId == 0)
            {
                // This means that the current record is not a report archived with Docentric.
                // In order to enable entering into the Comment field, set the reference to the parent table.
                docPrintJobHeader.PrintJobHeaderRecId = _datasource.formRun().dataSource(formDataSourceStr(SysPrintArchive, PrintJobHeader)).cursor().RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintJobHeader_EncryptedPdfPasswordShowHide_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows/Hides the password.
    /// </summary>
    public void DocPrintJobHeader_EncryptedPdfPasswordShowHide_OnClicked_DC()
    {
        FormDataSource dsDocPrintJobHeader = this.dataSource(formDataSourceStr(SysPrintArchive, DocPrintJobHeader));
        if (dsDocPrintJobHeader != null)
        {
            DocPrintJobHeader docPrintJobHeader = dsDocPrintJobHeader.cursor() as DocPrintJobHeader;

            Set showPaswordSet = this.getShowPasswordSet_DC();
            // Checks if the password is shown
            if (showPaswordSet.in(docPrintJobHeader.RecId))
            {
                // If the password is shown then the current record is removed from the set of records with the shown password.
                showPaswordSet.remove(docPrintJobHeader.RecId);
            }
            else
            {
                // If the password is masked then the current record is added to the set of records with the shown password.
                showPaswordSet.add(docPrintJobHeader.RecId);
            }
            this.setShowPasswordSet_DC(showPaswordSet);

            // The current record needs to be refreshed to force the execution of a table edit method passwordEdit
            // which returns the masked or umasked password.
            dsDocPrintJobHeader.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintSettings_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /*************************************************************************************************************/
    /*                       View Print settings, View email and Toggle preview buttons                          */
    /*************************************************************************************************************/

    /// <summary>
    /// Called when the PrintSettings_DC menu item is clicked.
    /// </summary>
    public void PrintSettings_DC_OnClicked_DC()
    {
        container srsPdPacked = DocPrintJobHeader.PrintDestinationSettingsPacked;
        SRSPrintDestinationSettings srsPd = new SRSPrintDestinationSettings(srsPdPacked);

        SrsReportRunUtil::showSettingsDialog(srsPd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ViewEmail_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the ViewEmail_DC menu item is clicked.
    /// </summary>
    public void ViewEmail_DC_OnClicked_DC()
    {
        DocPrintArchiveHelper::viewEmail(DocPrintJobHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Tabs_OnTabChanged_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when Tabs tab page is changed.
    /// </summary>
    /// <param name = "_sender">The "Tabs" form control</param>
    public void Tabs_OnTabChanged_DC(FormControl _sender)
    {
        FormTabControl tabs = _sender as FormTabControl;
        ToggleDocumentPreview_DC.enabled(tabs.getActivePage().name() == formControlStr(SysPrintArchive, Overview));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ToggleDocumentPreview_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the ToggleDocumentPreview_DC button is clicked.
    /// </summary>
    public void ToggleDocumentPreview_DC_OnClicked_DC()
    {
        DocDocuRefHelper::ToggleDocumentPreview(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DownloadFiles_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /*************************************************************************************************************/
    /*                         Download files buttons                                                            */
    /*************************************************************************************************************/

    /// <summary>
    /// Downloads files depending on specified parameters.
    /// </summary>
    /// <param name = "_nonPdfFiles">Specifies whether to download non-PDF files</param>
    /// <param name = "_onlyEncryptedPdfFiles">Specifies whether to download only encrypted PDF files</param>
    public void DownloadFiles_DC_OnClicked_DC(boolean _nonPdfFiles, boolean _onlyEncryptedPdfFiles = false)
    {
        // Main datasource is PrintJobHeader, its records will be selected, pass it further.
        DocPrintArchiveHelper::downloadFile(PrintJobHeader_ds, _nonPdfFiles, _onlyEncryptedPdfFiles);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DownloadZippedFiles_DC_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads zipped files depending on specified parameters.
    /// </summary>
    /// <param name = "_nonPdfFiles">Specifies whether to download non-PDF files</param>
    /// <param name = "_onlyEncryptedPdfFiles">Specifies whether to download only encrypted PDF files</param>
    public void DownloadZippedFiles_DC_OnClicked(boolean _nonPdfFiles, boolean _onlyEncryptedPdfFiles = false)
    {
        // Main datasource is PrintJobHeader, its records will be selected, pass it further.
        DocPrintArchiveHelper::downloadZip(PrintJobHeader_ds, _nonPdfFiles, _onlyEncryptedPdfFiles);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DownloadMergedPDF_DC_OnClicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads merged PDF file.
    /// </summary>
    public void DownloadMergedPDF_DC_OnClicked_DC()
    {
        // Main datasource is PrintJobHeader, its records will be selected, pass it further.
        DocPrintArchiveHelper::downloadMergedPDF(PrintJobHeader_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintJobHeader_journalCaption_jumpRef_DC</Name>
				<Source><![CDATA[
    /*************************************************************************************************************/
    /*    DocPrintJobHeader_journalCaption.jumpRef() and DocPrintJobHeader_SourceTableId.jumpRef() extensions    */
    /*************************************************************************************************************/

    /// <summary>
    /// Overrides the jumpRef method for the specified control.
    /// </summary>
    /// <param name = "_control">Form control</param>
    public void DocPrintJobHeader_journalCaption_jumpRef_DC(FormControl _control)
    {
        Args args;

        switch (DocPrintJobHeader.JournalType)
        {
            case DocJournalType::VendReceiptsListJour:
                args = new Args();
                args.lookupRecord(VendReceiptsListJour::findRecId(DocPrintJobHeader.JournalRecId));
                args.caller(this);      // element

                new MenuFunction(menuItemDisplayStr(VendReceiptsJournal), MenuItemType::Display).run(args);
                break;

            case DocJournalType::CustQuotationConfirmJour:
                args = new Args();
                args.lookupRecord(CustQuotationConfirmJour::findRecId(DocPrintJobHeader.JournalRecId));
                args.caller(this);      // element

                new MenuFunction(menuItemDisplayStr(CustQuotationJournalConfirmation), MenuItemType::Display).run(args);
                break;

            default:
                DocPrintJobHeader_ds.object(fieldNum(DocPrintJobHeader, JournalRecId)).jumpRef();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintJobHeader_SourceTableId_jumpRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified control.
    /// </summary>
    /// <param name = "_control">Form control</param>
    public void DocPrintJobHeader_SourceTableId_jumpRef_DC(FormStringControl _control)
    {
        Args args;

        switch (DocPrintJobHeader.SourceTableType)
        {
            case DocSourceTableType::SalesQuotationTable:
                args = new Args();
                args.lookupRecord(SalesQuotationTable::find(DocPrintJobHeader.SourceTableId));
                args.caller(this);      // element

                new MenuFunction(menuItemDisplayStr(SalesQuotationTable), MenuItemType::Display).run(args);
                break;

            case DocSourceTableType::CustInvoiceTable:
                CustInvoiceTable custInvoiceTable;
                select firstonly custInvoiceTable where custInvoiceTable.InvoiceId == DocPrintJobHeader.SourceTableId;

                args = new Args();
                args.lookupRecord(custInvoiceTable);
                args.caller(this);      // element

                new MenuFunction(menuItemDisplayStr(CustFreeInvoiceDetails), MenuItemType::Display).run(args);
                break;

            default:
                DocPrintJobHeader_ds.object(fieldNum(DocPrintJobHeader, SourceTableId)).jumpRef();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintJobHeader_DocumentTypeId_jumpRef_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified control.
    /// </summary>
    /// <param name = "_control">Form control</param>
    public void DocPrintJobHeader_DocumentTypeId_jumpRef_DC(FormStringControl _control)
    {
        Args args;

        DocuRef docuRef = DocuRef::findTableIdRecId(PrintJobHeader.DataAreaId, PrintJobHeader.TableId, PrintJobHeader.RecId);

        args = new Args();
        args.lookupRecord(DocuType::find(docuRef.TypeId));
        args.caller(this);      // element

        new MenuFunction(menuItemDisplayStr(DocuType), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>