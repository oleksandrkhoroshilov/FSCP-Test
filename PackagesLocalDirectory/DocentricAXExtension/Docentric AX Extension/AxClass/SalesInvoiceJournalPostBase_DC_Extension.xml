<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceJournalPostBase_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

/// <summary>
/// The class SalesInvoiceJournalPostBase_DC_Extension is an extension of the class SalesInvoiceJournalPostBase.
/// </summary>
[ExtensionOf(classStr(SalesInvoiceJournalPostBase))]
final class SalesInvoiceJournalPostBase_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data.
    /// </summary>
    /// <param name = "_formletterJournalPrint">An instance of the FormletterJournalPrint class</param>
    /// <returns>True if the report data was successfully created; otherwise false</returns>
    public boolean createReportData(FormletterJournalPrint _formletterJournalPrint)
    {       
        boolean res = next createReportData(_formletterJournalPrint);

        CustInvoiceJour journal;

        try
        {
            if (this.isProforma())
            {
                // Add the journal record.
                journal = this.parmJournalTable();

                // Add the journal lines.
                Map journalLineMap = new Map(Types::Int64, Types::Record);
                CustInvoiceTrans cit;
                while select cit
                    where cit.SalesId == journal.SalesId 
                       && cit.InvoiceId == journal.InvoiceId
                       && cit.InvoiceDate == journal.InvoiceDate
                       && cit.numberSequenceGroup == journal.numberSequenceGroup
                {
                    journalLineMap.insert(cit.RecId, cit);
                }

                DocReportProformaInvoiceDataSource proformaDsObject = new DocReportProformaInvoiceDataSource();
                proformaDsObject.parmJournal(journal);
                proformaDsObject.parmJournalLines(journalLineMap);

                
                // Add other tables specific for the invoice report.
                this.addPaymentSchedule_DC(proformaDsObject);
                this.addPrepaymentCustTrans_DC(proformaDsObject);


                // Add the proformaDsObject to the Docentric's report temporary storage.
                TemporaryReportDataStorage::AddDataObject(DocConstantDSP::Prefix_SalesInvoice, journal.RecId, proformaDsObject);
            }
        }
        catch (Exception::CLRError)
        {
            str clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
    
            setPrefix(DocConstant::Docentric);
            error(clrErrorMsg);
    
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX:FailedToStoreProforma", journal.SalesId), DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt("@DocentricAX:FailedToStoreProforma", journal.SalesId), DocConstantDiagnostics::ErrProformaReportTempStorage);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPaymentSchedule_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds customer payment schedule.
    /// </summary>
    /// <param name = "_proformaDsObject">An instance of the DocReportProformaInvoiceDataSource class</param>
    /// <remarks>
    /// /*** NOTE: This will be implemented on a customer demand. ***/
    /// Also note that the CustPaymSchedLine.RecId key should be included
    /// and filled into the SalesInvoiceTmp table as well.
    /// </remarks>
    private void addPaymentSchedule_DC(DocReportProformaInvoiceDataSource _proformaDsObject)
    {
        //CustPaymSched custPaymSched;
        //CustPaymSchedLine custPaymSchedLine;
        //CustInvoiceJour journal = this.parmJournalTable();
        //if (journal.PaymentSched)
        //{
        //    select firstonly custPaymSched
        //        where custPaymSched.ExtRecId == journal.RecId 
        //           && custPaymSched.ExtTableId == tablenum(CustInvoiceJour);

        //    Map custPaymSchedLineMap = new Map(Types::Int64, Types::Record);
        //    while select custPaymSchedLine
        //        exists join custPaymSched
        //            where custPaymSchedLine.ParentRecID == custPaymSched.RecId 
        //               && custPaymSched.ExtRecId == journal.RecId 
        //               && custPaymSched.ExtTableId == tablenum(CustInvoiceJour)
        //    {
        //        custPaymSchedLineMap.insert(custPaymSchedLine.RecId, custPaymSchedLine);
        //    }

        //    _proformaDsObject.parmCustPaymSched(custPaymSched);
        //    _proformaDsObject.parmCustPaymSchedLines(custPaymSchedLineMap);
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrepaymentCustTrans_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds prepayment customer transactions.
    /// </summary>
    /// <param name = "_proformaDsObject">An instance of the DocReportProformaInvoiceDataSource class</param>
    /// <remarks>
    /// /*** NOTE: This will be implemented on a customer demand. ***/
    /// Also note that the CustTrans.RecId key should be included and filled
    /// as PrepaymentCustTransRecId into the SalesInvoiceTmp table as well.
    /// </remarks>
    private void addPrepaymentCustTrans_DC(DocReportProformaInvoiceDataSource _proformaDsObject)
    {
        //CustTrans invoiceCustTrans = this.parmJournalTable().custTrans();
        //if (invoiceCustTrans)
        //{
        //    CustTrans prepaymentCustTrans;
        //    CompanyId offsetCompany;
        //    CustSettlement custSettlement;
        //    Map prepaymentCustTransMap = new Map(Types::Int64, Types::Record);

        //    // Find settlement records for this invoice.
        //    while select OffsetCompany, OffsetRecid from custSettlement
        //              where custSettlement.TransRecId == invoiceCustTrans.RecId
        //    {
        //        if (custSettlement.OffsetCompany)
        //        {
        //            offsetCompany = custSettlement.OffsetCompany;
        //        }
        //        else
        //        {
        //            offsetCompany = curext();
        //        }

        //        changecompany (offsetCompany)
        //        {
        //            // This is necessary to clear the DataAreaId in order to get
        //            // data from other companies.
        //            select firstonly prepaymentCustTrans
        //                where prepaymentCustTrans.RecId == custSettlement.OffsetRecid
        //                   && (prepaymentCustTrans.Prepayment == NoYes::Yes || prepaymentCustTrans.TransType == LedgerTransType::Payment);
        //            if (prepaymentCustTrans)
        //            {
        //                prepaymentCustTransMap.insert(prepaymentCustTrans.RecId, prepaymentCustTrans);
        //            }
        //        }
        //    }

        //    _proformaDsObject.parmInvoiceCustTrans(invoiceCustTrans);
        //    _proformaDsObject.parmPrepaymentCustTransLines(prepaymentCustTransMap);
        //}
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>