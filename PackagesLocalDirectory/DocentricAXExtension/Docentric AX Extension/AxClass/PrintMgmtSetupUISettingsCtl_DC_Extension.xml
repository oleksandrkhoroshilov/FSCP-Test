<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtSetupUISettingsCtl_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class PrintMgmtSetupUISettingsCtl_DC_Extension is an extension of the class PrintMgmtSetupUISettingsCtl.
/// </summary>
[ExtensionOf(classStr(PrintMgmtSetupUISettingsCtl))]
final class PrintMgmtSetupUISettingsCtl_DC_Extension
{
    /* Additional members */
    private boolean isDefaultPrinterSetup_DC;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsDefaultPrinterSetup_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether this is a default printer setup.
    /// </summary>
    /// <param name = "_isDefaultPrinterSetup_DC">Specifies whether this is a default printer setup</param>
    /// <returns>True if this is a default printer setup; otherwise false</returns>
    public boolean parmIsDefaultPrinterSetup_DC(boolean _isDefaultPrinterSetup_DC = isDefaultPrinterSetup_DC)
    {
        isDefaultPrinterSetup_DC = _isDefaultPrinterSetup_DC;
        return isDefaultPrinterSetup_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationDesc_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a descriptive label for the current destination.
    /// </summary>
    /// <returns>A string that contains the destination description.</returns>
    public str getDestinationDesc_DC()
    {
        str descr = '';
        if (this.destination != null)
        {
            descr = DocSrsReportRunUtil::getDocentricPrintDestDescription(this.destination);
        }
        return descr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesDestinationNeedCopies_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the destination will use the number of copies field value.
    /// </summary>
    /// <returns>True if the destination is a printer or the screen; otherwise, false.</returns>
    public boolean doesDestinationNeedCopies_DC()
    {
        if (this.destination != null)
        {
            switch (this.destination.printMediumType())
            {
                case SRSPrintMediumType::Printer:
                case SRSPrintMediumType::Screen:
                case SRSPrintMediumType::Printer_DC:
                case SRSPrintMediumType::Screen_DC:
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the destination by using the standard printer settings dialog box.
    /// </summary>
    /// <returns>True if the settings were modified; otherwise, false.</returns>
    protected boolean editPrinterSettings()
    {
        boolean isClosedOk = next editPrinterSettings();

        if (this.parmIsDefaultPrinterSetup_DC() && !isClosedOk)
        {
            this.parmDestination(null);
        }

        return isClosedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDestinationDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the value of the destination setting.
    /// </summary>
    /// <remarks>
    /// The destination description cannot be modified. The standard printer setup dialog box is used to
    /// modify the value of the destination.
    /// </remarks>
    public void displayDestinationDesc()
    {
        next displayDestinationDesc();

        FormStringControl destinationCtl = this.destinationCtl;
        if (destinationCtl != null)
        {
            str printDestDescription = this.getDestinationDesc_DC();
            if (printDestDescription != '')
            {
                destinationCtl.text(printDestDescription);
                destinationCtl.setSelection(0,0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets an instance of the SRSPrintDestinationSettings class.
    /// </summary>
    /// <param name = "_destination">An instance of the SRSPrintDestinationSettings class</param>
    /// <returns>An instance of the SRSPrintDestinationSettings class</returns>
    public SRSPrintDestinationSettings parmDestination(SRSPrintDestinationSettings _destination)
    {
        SRSPrintDestinationSettings destination = next parmDestination(_destination);

        // Update the copiesCtl form control.
        FormIntControl copiesCtl = this.copiesCtl;
        if (copiesCtl != null)
        {
            copiesCtl.enabled(this.doesDestinationNeedCopies_DC());
            if (destination != null && destination.printMediumType() == SRSPrintMediumType::Printer_DC)
            {
                copiesCtl.value(destination.parmPrinterPrintDestSettings_DC().parmNumberOfCopies());
            }
        }

        return destination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the destination popup menu and responds to the selected command.
    /// </summary>
    /// <param name="controlAction">A control action that will be updated with the new destination description.</param>
    public void editDestination(PrintMgmtSetupDestinationMenuAction controlAction)
    {
        if (this.destination == null)
        {
            this.parmIsDefaultPrinterSetup_DC(true);
            this.parmDestination(PrintMgmtSetupSettings::initDestination());
        }
        else
        {
            this.parmIsDefaultPrinterSetup_DC(false);
        }

        str srsReportName_DC = PrintMgmtReportFormat::findWithSystem(this.reportFormat, this.documentType).Name;

        SRSPrintDestinationSettings destination = this.destination;
        destination.parmTmpPrintDestSettings_DC().parmSrsReportName(srsReportName_DC);
        destination.parmTmpPrintDestSettings_DC().parmReportCaption(DocLabelHelper::getLabelForEnumValue(enumNum(PrintMgmtDocumentType), this.documentType));
        destination.parmTmpPrintDestSettings_DC().parmIsReportNameSetInPrintMgmt(true);

        next editDestination(controlAction);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>