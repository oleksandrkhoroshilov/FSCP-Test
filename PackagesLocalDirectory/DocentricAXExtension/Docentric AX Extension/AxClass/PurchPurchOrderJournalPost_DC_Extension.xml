<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchOrderJournalPost_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Docentric.AX.Reporting;

/// <summary>
/// The class PurchPurchOrderJournalPost_DC_Extension is an extension of the class PurchPurchOrderJournalPost.
/// </summary>
[ExtensionOf(classStr(PurchPurchOrderJournalPost))]
final class PurchPurchOrderJournalPost_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data.
    /// </summary>
    /// <param name = "_formletterJournalPrint">An instance of the FormletterJournalPrint class</param>
    /// <returns>True if the report data was successfully created; otherwise false</returns>
    public boolean createReportData(FormletterJournalPrint _formletterJournalPrint)
    {
        boolean res = next createReportData(_formletterJournalPrint);

        VendPurchOrderJour vendPurchOrderJour;

        try
        {
            if (this.isProforma())
            {
                // Add the journal record.
                vendPurchOrderJour = this.parmJournalTable();

                // Get the purchTableAllVersions record.
                PurchTableAllVersions purchTableAllVersions;
                purchTableAllVersions.initFromProformaPurchTableVersion(PurchTableVersion::find(vendPurchOrderJour.PurchTableVersion));
                
                // Get all related purchLineAllVersion lines.
                Map parmPurchLineAllVersionsMap = new Map(Types::Int64, Types::Record);
                PurchLineAllVersions purchLineAllVersion;
                while select purchLineAllVersion
                    where purchLineAllVersion.PurchId == vendPurchOrderJour.PurchId 
                       && purchLineAllVersion.PurchTableVersionRecId == vendPurchOrderJour.PurchTableVersion
                {
                    parmPurchLineAllVersionsMap.insert(purchLineAllVersion.LineNumber, purchLineAllVersion);
                }

                // Create proformaDsObject.
                DocReportProformaPurchOrderDataSource proformaDsObject = new DocReportProformaPurchOrderDataSource();
                proformaDsObject.parmJournal(vendPurchOrderJour);
                proformaDsObject.parmPurchTableAllVersions(purchTableAllVersions);
                proformaDsObject.parmPurchLineAllVersionsMap(parmPurchLineAllVersionsMap);

                // Add the proformaDsObject to the Docentric's report temporary storage.
                TemporaryReportDataStorage::AddDataObject(DocConstantDSP::Prefix_PurchPurchaseOrder, vendPurchOrderJour.RecId, proformaDsObject);
            }
        }
        catch (Exception::CLRError)
        {
            str clrErrorMsg = DocGlobalHelper::getLastClrExceptionMessage();
    
            setPrefix(DocConstant::Docentric);
            error(clrErrorMsg);
    
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToStoreJournalPO", DocConstantDiagnostics::ErrProformaReportTempStorage);
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX:FailedToStoreJournalPO", DocConstantDiagnostics::ErrProformaReportTempStorage);
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>