<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsReportRunUtil_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SrsReportRunUtil_DC_Extension is an extension of the class SrsReportRunUtil.
/// </summary>
[ExtensionOf(classStr(SrsReportRunUtil))]
final class SrsReportRunUtil_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPrinterNameDestination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Printer Name and printer destination for a given print settings.
    /// </summary>
    /// <param name="_printSettings">An instance of the SRSPrintDestinationSettings class</param>
    /// <param name="_showPrinterNameOnDestination">
    /// True: Show "Printer:[Printer Name]" on print destination when destination is printer. False: show the word "Printer" only.
    /// </param>
    /// <returns>Container of printer Name and printer destination strings.</returns>
    public static container getPrinterNameDestination(SRSPrintDestinationSettings _printSettings, boolean _showPrinterNameOnDestination)
    {
        container res = next getPrinterNameDestination(_printSettings, _showPrinterNameOnDestination);

        str printerName, printerDestination;
        boolean returnValueChanged;
        
        // Reset the target print destination to Screen or Screen_DC
        // depending on the global parameter DocParameters.PrintDestSettingsFormMode value.
        boolean resetToSrsScreen = DocSrsReportRunUtil::resetTargetPrintDestination(_printSettings);
        if (!resetToSrsScreen)
        {
            [printerName, printerDestination] = DocSrsReportRunUtil::getDocentricPrintDestDescriptionExt(_printSettings, _showPrinterNameOnDestination);
            returnValueChanged = printerName != '' || printerDestination != '';
        }
        else
        {
            printerName = '';
            printerDestination = "@SYS20533";
            returnValueChanged = true;
        }

        if (returnValueChanged)
        {
            res = [printerName, printerDestination];
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAxReportContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates string for the AX_ReportContext parameter
    /// </summary>
    /// <param name="companyName">Company Name</param>
    /// <param name="partitionKey">Partition Key</param>
    /// <param name="printMediumType">The medium on which the report is intended to be shown.</param>
    /// <param name="userLanguage">The user language id.</param>
    /// <param name="enableFileDrillThrough">Whether or not to enable drillthrough links in file; optional. Defaults to false.</param>
    /// <returns>A report context string.</returns>
    static str getAxReportContext(str companyName, str partitionKey, SRSPrintMediumType printMediumType, LanguageId userLanguage, boolean enableFileDrillThrough)
    {
        if (DocSrsReportRunUtil::isDocentricPrintDestination(printMediumType))
        {
            printMediumType = SRSPrintMediumType::Custom;
        }

        return next getAxReportContext(companyName, partitionKey, printMediumType, userLanguage, enableFileDrillThrough);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>