<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsReportRunController_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SrsReportRunController_DC_Extension is an extension of the class SrsReportRunController.
/// </summary>
[ExtensionOf(classStr(SrsReportRunController))]
final class SrsReportRunController_DC_Extension
{
    private const int DocentricPackVersion1 = DocConstant::DocentricBasePackVersion + 1;
    private const int DocentricPackVersion2 = DocConstant::DocentricBasePackVersion + 2;

    /* Additional members */
    private container containerGenerateDSPrintDestSettings_DC;
    private container containerPrinterPrintDestSettings_DC;
    private container containerEmailPrintDestSettings_DC;
    private container containerFilePrintDestSettings_DC;
    private container containerSrsPrintReportSettings_DC;
    private boolean   isInBatch_DC = false;
    private boolean   isInBatchFlagSet_DC = false;
    private boolean   isContractInitialized_DC = false;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ContainerGenerateDSPrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets a container with the Generate DSP print destination settings.
    /// </summary>
    /// <param name = "_containerGenerateDSPrintDestSettings_DC">A container with the Generate DSP print destination settings</param>
    /// <returns>A container with the Generate DSP print destination settings</returns>
    public container ContainerGenerateDSPrintDestSettings_DC(container _containerGenerateDSPrintDestSettings_DC = containerGenerateDSPrintDestSettings_DC)
    {
        containerGenerateDSPrintDestSettings_DC = _containerGenerateDSPrintDestSettings_DC;
        return containerGenerateDSPrintDestSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ContainerEmailPrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets a container with the Email print destination settings.
    /// </summary>
    /// <param name = "_containerEmailPrintDestSettings_DC">A container with the Email print destination settings</param>
    /// <returns>A container with the Email print destination settings</returns>
    public container ContainerEmailPrintDestSettings_DC(container _containerEmailPrintDestSettings_DC = containerEmailPrintDestSettings_DC)
    {
        containerEmailPrintDestSettings_DC = _containerEmailPrintDestSettings_DC;
        return containerEmailPrintDestSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ContainerFilePrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets a container with the File print destination settings.
    /// </summary>
    /// <param name = "_containerFilePrintDestSettings_DC">A container with the File print destination settings</param>
    /// <returns>A container with the File print destination settings</returns>
    public container ContainerFilePrintDestSettings_DC(container _containerFilePrintDestSettings_DC = containerFilePrintDestSettings_DC)
    {
        containerFilePrintDestSettings_DC = _containerFilePrintDestSettings_DC;
        return containerFilePrintDestSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ContainerPrinterPrintDestSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets a container with the Printer print destination settings.
    /// </summary>
    /// <param name = "_containerPrinterPrintDestSettings_DC">A container with the Printer print destination settings</param>
    /// <returns>A container with the Printer print destination settings</returns>
    public container ContainerPrinterPrintDestSettings_DC(container _containerPrinterPrintDestSettings_DC = containerPrinterPrintDestSettings_DC)
    {
        containerPrinterPrintDestSettings_DC = _containerPrinterPrintDestSettings_DC;
        return containerPrinterPrintDestSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ContainerSrsPrintReportSettings_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets a container with the SSRS print report settings.
    /// </summary>
    /// <param name = "_containerSrsPrintReportSettings_DC">A container with the SSRS print report settings</param>
    /// <returns>A container with the SSRS print report settings</returns>
    public container ContainerSrsPrintReportSettings_DC(container _containerSrsPrintReportSettings_DC = containerSrsPrintReportSettings_DC)
    {
        containerSrsPrintReportSettings_DC = _containerSrsPrintReportSettings_DC;
        return containerSrsPrintReportSettings_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInBatch_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the report is executed in batch.
    /// </summary>
    /// <returns>True if the report is executed in batch; otherwise false</returns>
    public boolean isInBatch_DC()
    {
        // Using a flag to prevent calling DocGlobalHelper::isRunningInBatch() more than once per execution.
        if(!isInBatchFlagSet_DC)
        {
            isInBatch_DC = DocGlobalHelper::isRunningInBatch();
            isInBatchFlagSet_DC = true;
        }

        return isInBatch_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContractInitialized_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether the contract is initialized.
    /// </summary>
    /// <param name = "_isContractInitialized_DC">Specifies whether the contract is initialized</param>
    /// <returns>The flag indicating whether the contract is initialized.</returns>
    public boolean isContractInitialized_DC(boolean _isContractInitialized_DC = isContractInitialized_DC)
    {
        isContractInitialized_DC = _isContractInitialized_DC;
        return isContractInitialized_DC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportCaption_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report caption.
    /// </summary>
    /// <returns>The report caption</returns>
    public str getReportCaption_DC()
    {
        MenuItemName  menuItemName;
        MenuItemType  menuItemType;
        str           reportCaption = '';

        // If args exist, we will always use that, so dialog will show the menuitem label.
        // If we dont do the below, we could get into a case where if 2 menuitem point to the same controller,
        // the dialog captions will get mixed up.
        if(this.parmArgs())
        {
            menuItemName = this.parmArgs().menuItemName();
            menuItemType = this.parmArgs().menuItemType();
            if (menuItemName)
            {
                reportCaption = DocLabelHelper::getLabelForMenuItem(menuItemName, menuItemType);
            }
        }

        return reportCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFileDrillThruInContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update drill through settings in the data contract if PDF viewer is in use.
    /// </summary>
    protected void updateFileDrillThruInContract()
    {
        next updateFileDrillThruInContract();

        // Enable drill-through links for the SSRS report design when the Docentric print destination is selected
        if (DocSrsReportRunUtil::isDocentricPrintDestination(reportContract.parmPrintSettings().printMediumType())
                && SrsReportRunUtil::useReportPdfViewer() 
                && SrsReportRunUtil::enableDrillThruInPDF())
        {
            reportContract.parmRdlContract().parmEnableFileDrillThrough(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRenderingComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the necessary logic when report rendering is completed.
    /// </summary>
    /// <param name="_executionInfo"><c>SrsReportExecutionInfo</c> instance containing report run details.</param>
    protected void onRenderingComplete(SRSReportExecutionInfo _executionInfo)
    {
        if (!DocConstantGlobal::isOnPremEnvironment())
        {
            this.downloadAndCompressFiles_DC(_executionInfo);
        }

        next onRenderingComplete(_executionInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadAndCompressFiles_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads and copresses the files.
    /// </summary>
    /// <param name = "executionInfo">An instance of the SRSReportExecutionInfo class</param>
    private void downloadAndCompressFiles_DC(SRSReportExecutionInfo executionInfo)
    {
        try
        {
            if (executionInfo)
            {
                // Only pull document from container when global cache is set for current execution,
                // which indicates at least one document is uploaded to the container.
                SysGlobalCache globalCache = classfactory.globalCache();
                if(globalCache.isSet(DocConstant::RunIdOwner, executionInfo.parmReportRunId()))
                {
                    globalCache.remove(DocConstant::RunIdOwner, executionInfo.parmReportRunId());
                    SRSFileUploadTempStorageStrategy uploadStrategy= new SRSFileUploadTempStorageStrategy();
                    
                    // <Docentric>
                    //str categoryName = SrsReportRunUtil::convertAndTrimGuidValue(executionInfo.parmReportRunId());
                    str categoryName = DocGlobalHelper::guid2strWithoutBraces(executionInfo.parmReportRunId());
                    // </Docentric>

                    List urls = uploadStrategy.GetDataInCategory(strLwr(categoryName));

                    if(urls.elements() > 0)
                    {
                        container filesCollection, cacheKey;
                        boolean collectionExists = false;
                        SysGlobalObjectCache globalObjectCache = classFactory.globalObjectCache();

                        // <Docentric>
                        if (this.fileURLsCollectionId)
                        {
                            container cacheValue;
                            cacheValue = globalObjectCache.find(classStr(Dynamics.AX.Application.File), [guidFromString(this.fileURLsCollectionId)]);
                            collectionExists = conLen(cacheValue) > 0;
                            filesCollection = conPeek(cacheValue, 1);
                            cacheKey = [guidFromString(this.fileURLsCollectionId)];
                        }
                        // </Docentric>

                        Enumerator urlEnumerator = urls.getEnumerator();

                        if(urls.elements() == 1)
                        {
                            if(urlEnumerator.moveNext())
                            {
                                str fileUrl = urlEnumerator.current();

                                if(fileUrl)
                                {
                                    if (collectionExists && conFind(filesCollection, fileUrl) == 0)
                                    {
                                        filesCollection += [fileUrl];
                                        globalObjectCache.insert(classStr(Dynamics.AX.Application.File), cacheKey, [filesCollection]);
                                        // <Docentric>
                                        //SSRSReportSharedEventSource::EventWriteSharedInformation(strfmt("Report execution %1. File %2 was added to collection %3", executionInfo.parmReportRunId(), fileUrl, this.fileURLsCollectionId));
                                        // </Docentric>
                                        return;
                                    }
                                    else if (!collectionExists)
                                    {
                                        Browser br = new Browser();
                                        // <Docentric>
                                        //br.navigate(fileUrl, false, false);
                                        br.navigate(fileUrl, true, false);
                                        // </Docentric>
                                    }
                                }
                            }
                        }
                        else
                        {
                            str fileName = this.parmDialogCaption() ? this.parmDialogCaption() : this.parmReportName();
                            using(System.IO.MemoryStream zipStream = new System.IO.MemoryStream())
                            {
                                using(System.IO.Compression.ZipArchive archive = new System.IO.Compression.ZipArchive(zipStream, System.IO.Compression.ZipArchiveMode::Create, true))
                                {
                                    Set names = new Set(Types::String);
                                    while(urlEnumerator.moveNext())
                                    {
                                        str currentUrl = urlEnumerator.current();
                                        if (collectionExists && conFind(filesCollection, currentUrl) == 0)
                                        {
                                            filesCollection += [currentUrl];
                                            // <Docentric>
                                            //SSRSReportSharedEventSource::EventWriteSharedInformation(strfmt("Report execution %1. File %2 was added to collection %3", executionInfo.parmReportRunId(), currentUrl, this.fileURLsCollectionId));
                                            // </Docentric>
                                            continue;
                                        }
                                        else if (!collectionExists)
                                        {
                                            System.Uri fileUri = null;
                                            System.IO.Compression.ZipArchiveEntry fileEntry = null;
                                            str archiveName = fileName;

                                            if(System.Uri::TryCreate(urlEnumerator.current(), System.UriKind::Absolute, byref fileUri))
                                            {
                                                archiveName = System.IO.Path::GetFileName(fileUri.LocalPath);
                                            }

                                            // Add a suffix to avoid duplicate file names in the archive
                                            // <Docentric>
                                            //archiveName = SrsReportRunController::getUniqueFileName(names, archiveName);
                                            archiveName = SrsReportRunController::getUniqueFileName_DC(names, archiveName);
                                            // </Docentric>
                                            names.add(archiveName);

                                            using(System.IO.MemoryStream reportFile = File::UseFileFromURL(urlEnumerator.current()))
                                            {
                                                fileEntry = archive.CreateEntry(archiveName);
                                                using(System.IO.Stream fileEntryStream = fileEntry.Open())
                                                {
                                                    reportFile.CopyTo(fileEntryStream);
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!collectionExists)
                                {
                                    // <Docentric>
                                    //File::SendFileToUser(zipStream, fileName + #zip);
                                    DocFileMngHelper::sendFileToUser(zipStream, fileName + DocConstantFile::FileExtensionDelimiter + DocConstantFile::FileExtZip, '', '', '', '', true, true);
                                    // </Docentric>
                                }
                                else
                                {
                                    globalObjectCache.insert(classStr(Dynamics.AX.Application.File), cacheKey, [filesCollection]);
                                }
                            }
                        }
                    }
                }
                // <Docentric>
                //else
                //{
                //    SSRSReportSharedEventSource::EventWriteSharedInformation(strfmt("Global cache is not found for report execution %1.", executionInfo.parmReportRunId()));
                //}
                // </Docentric>
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrError();
            DocGlobalHelper::handleWarning("@ApplicationPlatform:DownloadFailed");
        }
        catch
        {
            DocGlobalHelper::handleWarning("@ApplicationPlatform:DownloadFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueFileName_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the new file name that is not in the input set.
    /// </summary>
    /// <param name = "existingNames">Set of existing names</param>
    /// <param name = "newFileName">New name</param>
    /// <returns>The unique file name for the input set</returns>
    public static str getUniqueFileName_DC(Set existingNames, str newFileName)
    {
        int nameLength = strLen(newFileName);
        int extensionPos = strScan(newFileName, '.', nameLength, -nameLength);
        str name = newFileName;
        str extension = '';
        if (extensionPos > 0)
        {
            name = subStr(newFileName, 0, extensionPos - 1);
            extension = subStr(newFileName, extensionPos, nameLength - extensionPos + 1);
        }
        int suffix = 1;
        while (existingNames.in(newFileName))
        {
            newFileName = strFmt('%1 (%2)%3', name, suffix, extension);
            suffix++;
        }
        return newFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets an instance of the SrsReportDataContract class.
    /// </summary>
    /// <param name = "_reportContract">An instance of the SrsReportDataContract class</param>
    /// <returns>An instance of the SrsReportDataContract class</returns>
    public SrsReportDataContract parmReportContract(SrsReportDataContract _reportContract)
    {
        // The report contract must be initialized here because the getter 
        // in the base method is never called due to the prmisDefault check.
        if (!_reportContract && _reportContract == this.reportContract)
        {
            _reportContract = this.getReportContract();
        }
        if (_reportContract && !this.contractsInitialized)
        {
            this.getDataContractInfoObjects();
            this.contractsInitialized = true;
        }

        SrsReportDataContract reportContract = next parmReportContract(_reportContract);

        if (reportContract)
        {
            SRSPrintDestinationSettings pds = reportContract.parmPrintSettings();

            if (pds != null && !this.isContractInitialized_DC())
            {
                pds.parmTmpPrintDestSettings_DC().parmSrsReportName(reportContract.parmReportName());
                if (reportContract.parmReportCaption() != '' && reportContract.parmReportCaption() != reportContract.parmReportName())
                {
                    pds.parmTmpPrintDestSettings_DC().parmReportCaption(reportContract.parmReportCaption());
                }
                else
                {
                    str reportCaption = this.getReportCaption_DC();
                    if (reportCaption != '')
                    {
                        pds.parmTmpPrintDestSettings_DC().parmReportCaption(reportCaption);
                    }
                    else
                    {
                        pds.parmTmpPrintDestSettings_DC().parmReportCaption(reportContract.parmReportName());
                    }
                }

                this.isContractInitialized_DC(true);
            }
        }

        return reportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SrsReportRunController_Pre_runReport_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the report to various destinations.
    /// </summary>
    /// <param name = "_args">An instance of the XppPrePostArgs class</param>
    /// <remarks>
    /// This method takes care of calling <c>preRunModifyContract</c>, <c>preRunReport</c>, <c>postRunReport</c> as part of running report.
    /// </remarks>
    /// <exception cref="Exception::Error">If report contract was not found or if any other error encountered during running the report.</exception>
    /// <remarks>
    /// CoC extension has been replaced with pre-event handler, so that method is not visible in the callstack of later SSRS pipeline execution.
    /// If MS suport finds any custom code in the error callstack, they often refuse to help our customers (even for apparent errors in the standard).
    /// </remarks>
    [PreHandlerFor(classStr(SrsReportRunController), methodStr(SrsReportRunController, runReport))]
    public static void SrsReportRunController_Pre_runReport_DC(XppPrePostArgs _args)
    {
        SrsReportRunController srsReportRunController = _args.getThis();
        SrsReportDataContract reportContract = srsReportRunController.parmReportRun().parmReportContract();

        // Repeat the validation from the runReport method:
        if(!reportContract)
        {
            throw error(strFmt("@SYS322717", srsReportRunController.parmReportName()));
        }

        SRSPrintDestinationSettings pds = reportContract.parmPrintSettings();
        if (pds == null)
        {
            pds = new SRSPrintDestinationSettings();
            reportContract.parmPrintSettings(pds);
        }

        // Change the print destination from Screen to Screen_DC if needed.
        if (pds.printMediumType() == SRSPrintMediumType::Screen)
        {
            if (DocSrsReportRunUtil::useDocentricPreview(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId('');
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
            else if (DocSrsReportRunUtil::useOnlyDocentricPreviewer(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId(DocConstant::BuiltInSsrsDesignPlaceholder);
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
        }

        // Turn off the PrintToArchive flag, if this is a Docentric print destination.
        if (DocSrsReportRunUtil::isDocentricPrintDestination(pds.printMediumType()))
        {
            pds.parmPrintToArchive(false);
        }
                
        // Store the report execution context record.
        if (srsReportRunController.parmArgs() && srsReportRunController.parmArgs().record())
        {
            pds.parmSrsPrintReportSettings_DC().setReportExecutionContextRecord(srsReportRunController.parmArgs().record());
        }
        // Store the report menu item name.
        if (srsReportRunController.parmArgs() && srsReportRunController.parmArgs().menuItemName())
        {
            pds.parmSrsPrintReportSettings_DC().parmReportMenuItemName(srsReportRunController.parmArgs().menuItemName());
            pds.parmSrsPrintReportSettings_DC().parmReportMenuItemType(srsReportRunController.parmArgs().menuItemType());
        }
        
        if (srsReportRunController.isInBatch_DC())
        {
            // Store BatchJobID into the report print destination settings to be used later in the DocPlaceholderManager class.
            Batch currentBatchTask = DocGlobalHelper::getCurrentBatchTask();
            pds.parmSrsPrintReportSettings_DC().parmBatchId(currentBatchTask.RecId); // RecId of the Batch table
            pds.parmSrsPrintReportSettings_DC().parmBatchJobId(currentBatchTask.BatchJobId); // RecId of the BatchJob table
            
            // Change Screen_DC -> Archive_DC in case that the report is running in batch.
            if (pds.printMediumType() == SRSPrintMediumType::Screen_DC)
            {
                pds.printMediumType(SRSPrintMediumType::Archive_DC);
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ChangedPrintDestinationFromScreenToArchive",
                    reportContract.parmReportCaption() ? reportContract.parmReportCaption() : reportContract.parmReportName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the class variables into the container.
    /// </summary>
    /// <returns>Packed container with class variables</returns>
    public container pack()
    {
        container packedClass = next pack();

        // NOTE: We don't use srsReportRunController.parmReportContract().parmPrintSettings() because of the recursive calls.
        SRSPrintDestinationSettings pds = this.parmReportRun().parmReportContract().parmPrintSettings();

        if (pds != null)
        {
            return SysPackExtensions::appendExtension(packedClass, classStr(SrsReportRunController_DC_Extension), this.packInternal(pds));
        }
        return packedClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the class variables into the container.
    /// </summary>
    /// <param name = "_pds">An instance of the SRSPrintDestinationSettings class</param>
    /// <returns>Packed container with class variables</returns>
    private container packInternal(SRSPrintDestinationSettings _pds)
    {
        return [DocentricPackVersion2,
                _pds.parmGenerateDSPrintDestSettings_DC().pack(),
                _pds.parmPrinterPrintDestSettings_DC().pack(),
                _pds.parmEmailPrintDestSettings_DC().pack(),
                _pds.parmFilePrintDestSettings_DC().pack(),
                _pds.parmSrsPrintReportSettings_DC().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the class variables and re-instantiates them.
    /// </summary>
    /// <param name = "_packedClass">Packed container with class variables</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _packedClass)
    {
        boolean result;
        boolean newPackVersion;

        Integer version = RunBase::getVersion(_packedClass);
        container packedClass;

        switch (version)
        {
            case DocentricPackVersion1:
                [result, packedClass] = this.unpackInternal(_packedClass);
                break;

            default:
                container packedClassFound = this.findPackedContainer(_packedClass);
                if (packedClassFound != conNull())
                {
                    [result, packedClass] = this.unpackInternal(packedClassFound);
                    break;
                }

                newPackVersion = true;
                packedClass = _packedClass;
                result = false;
        }

        result = next unpack(packedClass) && (newPackVersion || result);

        if (newPackVersion && result)
        {
            container packedClassInternal = SysPackExtensions::findExtension(packedClass, classStr(SrsReportRunController_DC_Extension));
            if (!conPeek(this.unpackInternal(packedClassInternal), 1))
            {
                result = false;
            }
        }

        if (result)
        {
            // NOTE: We don't use srsReportRunController.parmReportContract().parmPrintSettings() because of the recursive calls.
            SRSPrintDestinationSettings pds = this.parmReportRun().parmReportContract().parmPrintSettings();
            if (pds != null)
            {
                pds.parmGenerateDSPrintDestSettings_DC().unpack(this.ContainerGenerateDSPrintDestSettings_DC());
                pds.parmPrinterPrintDestSettings_DC().unpack(this.ContainerPrinterPrintDestSettings_DC());
                pds.parmEmailPrintDestSettings_DC().unpack(this.ContainerEmailPrintDestSettings_DC());
                pds.parmFilePrintDestSettings_DC().unpack(this.ContainerFilePrintDestSettings_DC());
                pds.parmSrsPrintReportSettings_DC().unpack(this.ContainerSrsPrintReportSettings_DC());

                // Replace bare linefeeds in email body (fix for MS bug in xSysLastValue::getLast())
                pds.parmEmailPrintDestSettings_DC().fixBareLinefeeds();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPackedContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recursively searches the packed container for the packed version DocentricPackVersion1.
    /// </summary>
    /// <param name = "_item">Container item</param>
    /// <returns>Packed container with the DocentricPackVersion1 version or empty container</returns>
    private container findPackedContainer(anytype _item)
    {
        if (typeOf(_item) == Types::Container)
        {
            int conLen = conLen(_item);
            for (int i = 1; i <= conLen; i++)
            {
                if (i == 1)
                {
                    Integer version = RunBase::getVersion(_item);
                    switch (version)
                    {
                        case 0:
                            return conNull();

                        case DocentricPackVersion1:
                            // Check the number of items in the packed container to be sure it belongs to this extension
                            if (conLen != 7)
                            {
                                break;
                            }
                            return _item;
                    }
                    continue;
                }

                container item = this.findPackedContainer(conPeek(_item, i));
                if (item != conNull())
                {
                    return item;
                }
            }
        }
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the class variables and re-instantiates them.
    /// </summary>
    /// <param name = "_packedClass">Packed container with class variables</param>
    /// <returns>Container with result information</returns>
    private container unpackInternal(container _packedClass)
    {
        container result = [false, conNull()];

        Integer version = RunBase::getVersion(_packedClass);
        container packedGenerateDSPrintDestSettings_DC;
        container packedPrinterPrintDestSettings_DC;
        container packedEmailPrintDestSettings_DC;
        container packedFilePrintDestSettings_DC;
        container packedSrsPrintReportSettings_DC;
        container packedClass;

        void unpackItems()
        {
            this.ContainerGenerateDSPrintDestSettings_DC(packedGenerateDSPrintDestSettings_DC);
            this.ContainerPrinterPrintDestSettings_DC(packedPrinterPrintDestSettings_DC);
            this.ContainerEmailPrintDestSettings_DC(packedEmailPrintDestSettings_DC);
            this.ContainerFilePrintDestSettings_DC(packedFilePrintDestSettings_DC);
            this.ContainerSrsPrintReportSettings_DC(packedSrsPrintReportSettings_DC);
        }

        switch (version)
        {
            case DocentricPackVersion1:
                [version,
                    packedGenerateDSPrintDestSettings_DC,
                    packedPrinterPrintDestSettings_DC,
                    packedEmailPrintDestSettings_DC,
                    packedFilePrintDestSettings_DC,
                    packedSrsPrintReportSettings_DC,
                    packedClass
                ] = _packedClass;

                unpackItems();

                result = [true, packedClass];
                break;

            case DocentricPackVersion2:
                [version,
                    packedGenerateDSPrintDestSettings_DC,
                    packedPrinterPrintDestSettings_DC,
                    packedEmailPrintDestSettings_DC,
                    packedFilePrintDestSettings_DC,
                    packedSrsPrintReportSettings_DC
                ] = _packedClass;

                unpackItems();

                result = [true, conNull()];
                break;

            default:
                result = [false, conNull()];
        }
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>