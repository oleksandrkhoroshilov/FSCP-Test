<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustQuotationJournalForm_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class CustQuotationJournalForm_DC_Extension is an extension of the form CustQuotationJournal.
/// </summary>
[ExtensionOf(formStr(CustQuotationJournal))]
final class CustQuotationJournalForm_DC_Extension
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        next init();

        SalesQuotationPrintMgmtPreview_DC.registerOverrideMethod(methodStr(FormMenuButtonControl, clicked), formMethodStr(CustQuotationJournal, SalesQuotationPrintMgmtPreview_DC_Clicked_DC), this);
        PrintArchiveDownload_DC.registerOverrideMethod(methodStr(FormMenuButtonControl, clicked), formMethodStr(CustQuotationJournal, PrintArchiveDownload_DC_Clicked_DC), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustQuotationJour_OnActivated_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form data source is activated.
    /// </summary>
    public void CustQuotationJour_OnActivated_DC()
    {
        this.refreshPrintArchiveView_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesQuotation_OnLostFocus_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SalesQuotationConfirmation menu button loses focus.
    /// </summary>
    public void SalesQuotation_OnLostFocus_DC()
    {
        this.refreshPrintArchiveView_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesQuotationPrintMgmtPreview_DC_Clicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the SalesQuotationPrintMgmtPreview_DC menu item is clicked.
    /// </summary>
    /// <param name = "_control">A form control</param>
    public void SalesQuotationPrintMgmtPreview_DC_Clicked_DC(FormControl _control)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.launchReport_DC(PrintCopyOriginal::OriginalPrint);
        }
        else
        {
            Args args = new Args();
            args.caller(this);
            args.parm(DocConstant::PrintManagementPreview);
            args.record(CustQuotationJour);

            new MenuFunction(menuItemOutputStr(SalesQuotation), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchReport_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copied from CustQuotationJournal.
    /// Everything is same, we only added 2 lines where we set reportArgs.parm().
    /// </summary>
    /// <param name = "_printCopyOriginal">Enum that specifies print management or
    /// original or copy printing. We pass the print management type and
    /// add our specific parm to force previewing.</param>
    void launchReport_DC(PrintCopyOriginal _printCopyOriginal)
    {
        RecordSortedList salesQuotationList = this.createRecordSortedList(QuotationType::Sales);
        RecordSortedList projQuotationList  = this.createRecordSortedList(QuotationType::Project);

        str salesReportMenuItemName, projReportMenuItemName;

        switch (_printCopyOriginal)
        {
            case PrintCopyOriginal::OriginalPrint:
                salesReportMenuItemName = menuitemOutputStr(SalesQuotation);
                projReportMenuItemName  = menuitemOutputStr(PSAQuotationsPrint);
                break;

            case PrintCopyOriginal::Original:
                salesReportMenuItemName = menuitemOutputStr(SalesQuotationOriginal);
                projReportMenuItemName  = menuitemOutputStr(PSAQuotationsOriginal);
                break;

            case PrintCopyOriginal::Copy:
                salesReportMenuItemName = menuitemOutputStr(SalesQuotationCopy);
                projReportMenuItemName  = menuitemOutputStr(PSAQuotationsCopy);
                break;
        }

        MenuFunction    reportMenuFunction;
        Args            reportArgs;

        if (projQuotationList.len() > 0)
        {
            reportArgs = new Args();
            reportArgs.object(projQuotationList);
            reportArgs.parm(DocConstant::PrintManagementPreview);     // We added this line to the original method

            reportMenuFunction = new MenuFunction(projReportMenuItemName, MenuItemType::Output);
            reportMenuFunction.run(reportArgs);
        }

        if (salesQuotationList.len() > 0)
        {
            reportArgs = new Args();
            reportArgs.object(salesQuotationList);
            reportArgs.parm(DocConstant::PrintManagementPreview);     // We added this line to the original method

            reportMenuFunction = new MenuFunction(salesReportMenuItemName, MenuItemType::Output);
            reportMenuFunction.run(reportArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintArchiveDownload_DC_Clicked_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the PrintArchiveDownload_DC button is clicked.
    /// </summary>
    /// <param name = "_control">The form control object. PrintArchiveDownload_DC control expected</param>
    public void PrintArchiveDownload_DC_Clicked_DC(FormControl _control)
    {
        DocPrintArchiveDownload::printArchiveDownload(this, DocJournalType::CustQuotationJour, CustQuotationJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshPrintArchiveView_DC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to toggle Print archive -> View button and to display the number of related documents in print archive.
    /// </summary>
    public void refreshPrintArchiveView_DC()
    {
        DocPrintArchiveHelper::refreshPrintArchiveViewMenuButton(
            this.design().controlName(formControlStr(CustQuotationJournal, PrintArchiveView_DC)), DocJournalType::CustQuotationJour, CustQuotationJour);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>