<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsPrintDestinationTokensNone_DC_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SrsPrintDestinationTokensNone_DC_Extension is an extension of the class SrsPrintDestinationTokensNone.
/// </summary>
[ExtensionOf(classStr(SrsPrintDestinationTokensNone))]
final class SrsPrintDestinationTokensNone_DC_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>expandEmailToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the case when a token is unrecognized.
    /// </summary>
    /// <param name = "_token">A token</param>
    /// <param name = "_settings">Print destination settings</param>
    /// <returns>An unrecognized token</returns>
    public str expandEmailToken(SrsPrintDestinationToken _token, SRSPrintDestinationSettings _settings)
    {
        boolean mustSkipNext = true;
        str tokenNotFoundMsg;

        // Skip the next by using a follow trick with the try-catch block. The base expandEmailToken method generates a warning message that causes 
        // problems if infolog contains some old warnings or error messages.
        try
        {
            if (mustSkipNext)
            {
                // When an exception is thrown inside a ttsBegin-ttsCommit transaction block, no catch statement inside that transaction block can process the exception, 
                // unless it is a UpdateConflict or a DuplicateKeyException. We always want to be sure that the catch block is executed, so we use the UpdateConflict exception.
                throw Exception::UpdateConflict;
            }

            tokenNotFoundMsg = next expandEmailToken(_token, _settings);  
        }

        catch (Exception::UpdateConflict)
        {
            // Don't expand the token, and don't show the error. Let Docentric report DSP class to deal with this.
            tokenNotFoundMsg = DocConstantPlaceholder::PlaceholderStartSymbol + _token + DocConstantPlaceholder::PlaceholderEndSymbol;       
        }

        return tokenNotFoundMsg;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>