<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocPrintDestSettingsFileSaveToAttachmentsSettings</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocPrintDestSettingsFileSaveToAttachmentsSettings extends FormRun
{
    private FormRun callerFormRun;

    private DocPrintDestSettingsFile workingFilePrintDestSettings_DC;
    private str reportId;
    private PrintMgmtDocumentType reportType;
    private boolean isReportTypeProvided;
    private FormControl currentControl, previousControl;
    private str lastTagsText;


}
]]></Source>
			</Method>
			<Method>
				<Name>getReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected report ID.
    /// 
    /// NOTE: This method is required by CheckArgs method on the form DocReportAttachmentPlaceholderDropDialog.
    /// </summary>
    /// <returns>Report ID</returns>
    public str getReportId()
    {
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report type.
    /// 
    /// NOTE: This method is required by CheckArgs method on the form DocReportAttachmentPlaceholderDropDialog.
    /// </summary>
    /// <returns>Report type</returns>
    public PrintMgmtDocumentType getReportType()
    {
        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportTypeProvided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the information if the report type is provided.
    /// 
    /// NOTE: This method is required by CheckArgs method on the form DocReportAttachmentPlaceholderDropDialog.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isReportTypeProvided()
    {
        return isReportTypeProvided;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreviousControlDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inforamtion if the previous control is DispayName.
    /// 
    /// NOTE: This method is required by Init method on the form DocReportAttachmentPlaceholderDropDialog.
    /// </summary>
    /// <returns>True/False</returns>
    public boolean isPreviousControlDisplayName()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current control value to the selected placeholder.
    /// 
    /// NOTE: This method is required by CloseOk method on the form DocReportAttachmentPlaceholderDropDialog.
    /// </summary>
    /// <param name = "_placeholderName">Placeholder name</param>
    public void insertPlaceholder(str _placeholderName)
    {
        if (currentControl == Tags)
        {
            Tags.text(strFmt('%1%2%3%4',
                                lastTagsText,
                                DocConstantPlaceholder::PlaceholderStartSymbol,
                                _placeholderName,
                                DocConstantPlaceholder::PlaceholderEndSymbol));
  
            lastTagsText = Tags.text();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();

        // Checks the input parameters.
        this.checkArgs();

        // Sets the form controls.
        this.setControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the input parameters.
    /// </summary>
    private void checkArgs()
    {
        if (!element.args())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:FormCalledWithoutArguments");
        }
        
        Args args = element.args();
        
        if (!args.caller())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        
        if (!(args.caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        callerFormRun = args.caller() as FormRun;

        if (callerFormRun == null
            || (callerFormRun.name() != formStr(SRSPrintDestinationSettingsForm)))
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX2:InvalidCallerForm", "@SYS131685"));
        }

        reportId = callerFormRun.getReportId();
        reportType = callerFormRun.getReportType();
        isReportTypeProvided = callerFormRun.isReportTypeProvided();
        workingFilePrintDestSettings_DC = callerFormRun.workingFilePrintDestSettings_DC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form controls.
    /// </summary>
    private void setControls()
    {
        // Sets the form control values to the current file print destination settings.
        DocumentRestriction.selection(workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocumentRestriction());
        CategoryId.text(workingFilePrintDestSettings_DC.parmSaveToAttachmentsCategory());
        Tags.text(workingFilePrintDestSettings_DC.parmSaveToAttachmentsTags());
        LanguageMode.selection(workingFilePrintDestSettings_DC.parmSaveToAttachmentsLanguageMode());
        ActiveFrom.dateValue(workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveFrom());
        ActiveTo.dateValue(workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveTo());

        element.enableButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables/disables the menu buttons. 
    /// </summary>
    private void enableButtons()
    {
        // Inserting placeholders is allowed if:
        //      - Focus is on Tags field
        //      - The focused control is editable
        boolean isPlaceholderForTags = (element.selectedControl() == Tags) && Tags.allowEdit();

        InsertPlaceholderDropDialogButton.enabled(isPlaceholderForTags);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after OK button was clicked.
    /// </summary>
    public void closeOk()
    {
        // Sets the file print destination settings to the selected values.
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsDocumentRestriction(DocumentRestriction.selection());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsCategory(CategoryId.text());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsTags(Tags.text());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsLanguageMode(LanguageMode.selection());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveFrom(ActiveFrom.dateValue());
        workingFilePrintDestSettings_DC.parmSaveToAttachmentsActiveTo(ActiveTo.dateValue());

        super();

        // Set dirty indicator on the caller form
        if (element.args() && element.args().caller())
        {
            if (formHasMethod(element.args().caller(), identifierStr(setDirty_DC)))
            {
                Object formRunObject = element.args().caller();
                formRunObject.setDirty_DC(element.name());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables/disables selecting placeholder for current form control.
    /// </summary>
    /// <param name = "_control">A form control</param>
    /// <returns>True/False</returns>
    public boolean selectControl(FormControl _control)
    {
        boolean ret;
    
        ret = super(_control);
    
        // When button is clicked, it becomes currentControl, so store the previous
        // (caller) control as previousControl. We will need it to know where to add
        // the placeholder.
        previousControl = currentControl;
        currentControl = element.selectedControl();

        boolean isLastControlButton = (_control is FormButtonControl) || (_control is FormDropDialogButtonControl)|| (_control is FormCommandButtonControl);
        if (!isLastControlButton)
        {
            // When button is clicked, active is automatically executed and placeholder button would
            // become disabled, that's why we need this check.
            element.enableButtons();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>InsertPlaceholderDropDialogButton</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called on drop dialog button click.
        /// </summary>
        public void clicked()
        {
            lastTagsText = Tags.text();
    
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DocentricAX3:SaveToAttachmentsSettings</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>AttachmentSettingActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>SettingsButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>InsertPlaceholderDropDialogButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAX2:InsertPlaceholderHelp</HelpText>
								<Type>DropDialogButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>DocReportAttachmentPlaceholderDropDialog</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>AttachmentSettingsGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>DocumentRestriction</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX2:AttachmentRestrictionHelp</HelpText>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>DocDocumentRestriction</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CategoryId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX3:DocuViewCategoryHelp</HelpText>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocAttachmentCategoryId</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Tags</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocAttachmentTags</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>LanguageMode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAX3:SaveToAttachmentsLanguageModeHelp</HelpText>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>DocAttachmentLanguageMode</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ActiveFrom</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocReportAttachmentActiveFrom</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ActiveTo</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocReportAttachmentActiveTo</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>