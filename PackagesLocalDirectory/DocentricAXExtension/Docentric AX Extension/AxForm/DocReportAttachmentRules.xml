<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocReportAttachmentRules</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocReportAttachmentRules extends FormRun
{
    DocReportAttachmentRuleTmp tmpTable;

    FormRun callerFormRun;

    PrintMgmtDocumentType reportType;
    boolean isReportTypeProvided;
    str reportId;

    boolean isDescriptionInFocus;
    boolean isDisplayNameInFocus;

    FormControl currentControl, previousControl;
    boolean isLastControlButton;

    str lastDescriptionText, lastDisplayNameText, lastTags;
    real recordsInserted;


}
]]></Source>
			</Method>
			<Method>
				<Name>checkArgs</Name>
				<Source><![CDATA[
    private void checkArgs()
    {
        if (!element.args())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        Args args = element.args();
        
        if (!args.caller())
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        if (!(args.caller() is FormRun))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }
        callerFormRun = args.caller() as FormRun;

        if (callerFormRun == null || callerFormRun.name() != formStr(SRSPrintDestinationSettingsForm))
        {
            DocGlobalHelper::handleException(funcName(), "@DocentricAX2:InvalidCaller");
        }

        reportId = callerFormRun.getReportId();
        reportType = callerFormRun.getReportType();
        isReportTypeProvided = callerFormRun.isReportTypeProvided();

        isDescriptionInFocus = false;
        isDisplayNameInFocus = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportId</Name>
				<Source><![CDATA[
    public str getReportId()
    {
        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportType</Name>
				<Source><![CDATA[
    public PrintMgmtDocumentType getReportType()
    {
        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportTypeProvided</Name>
				<Source><![CDATA[
    public boolean isReportTypeProvided()
    {
        return isReportTypeProvided;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreviousControlDisplayName</Name>
				<Source><![CDATA[
    public boolean isPreviousControlDisplayName()
    {
        return (previousControl == DisplayName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPlaceholder</Name>
				<Source><![CDATA[
    public void insertPlaceholder(str _placeholderName)
    {        
        if (currentControl == Description)
        {
            DocReportAttachment.Description = strFmt('%1%2%3%4', 
                                                lastDescriptionText,
                                                DocConstantPlaceholder::PlaceholderStartSymbol, 
                                                _placeholderName,
                                                DocConstantPlaceholder::PlaceholderEndSymbol);  
  
            lastDescriptionText = DocReportAttachment.Description;
        }
        else if (currentControl == DisplayName)
        {
            DocReportAttachment.DisplayName = strFmt('%1%2%3%4',
                                                lastDisplayNameText,
                                                // skip @ if it exists at the beginning of the placeholder
                                                (subStr(_placeholderName, 1, 1) == DocConstantPlaceholder::PlaceholderStartSymbol 
                                                    ? '' : DocConstantPlaceholder::PlaceholderStartSymbol),
                                                _placeholderName,                                         
                                                // skip @ if it exists at the end of the placeholder       
                                                (subStr(_placeholderName, strLen(_placeholderName), 1) == DocConstantPlaceholder::PlaceholderEndSymbol
                                                    ? '' : DocConstantPlaceholder::PlaceholderEndSymbol));   
            
            lastDisplayNameText = DocReportAttachment.DisplayName;
            
            DocReportAttachment.modifiedField(fieldNum(DocReportAttachmentRuleTmp, DisplayName));
        }
        else if (currentControl == Tags)
        {
            DocReportAttachment.Tags = strFmt('%1%2%3%4',
                                               lastTags,
                                               DocConstantPlaceholder::PlaceholderStartSymbol,
                                               _placeholderName,
                                               DocConstantPlaceholder::PlaceholderEndSymbol);

            lastTags = DocReportAttachment.Tags;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttachmentDefinitionRecord</Name>
				<Source><![CDATA[
    public void insertAttachmentDefinitionRecord(
        DocReportAttachmentLoadFrom _loadFrom,
        DocAttachmentCategoryId     _categoryId,
        DocReportAttachmentSelect   _description,
        FilenameType                _extension,
        DataAreaId                  _attachmentCompanyId)
    {
        tmpTable.clear();
        tmpTable.initValue();
        
        recordsInserted += 1.0;
        tmpTable.Sequence = recordsInserted;

        tmpTable.LoadFrom = _loadFrom;
        tmpTable.CategoryId = _categoryId;
        tmpTable.Description = _description;
        tmpTable.FileExtension = _extension;
        tmpTable.CompanyId = _attachmentCompanyId;

        tmpTable.modifiedField(fieldNum(DocReportAttachmentRuleTmp, FileExtension));

        if (tmpTable.validateWrite())
        {
            tmpTable.insert();
        }
        
        DocReportAttachment_ds.research();
        DocReportAttachment_ds.positionToRecord(tmpTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        // If there is no valid licence, user will be warned, but we will still let him
        // specify the attachments. Later in the pipeline we will throw the exception
        // if Attachment rules are specified, but the license is invalid.
        DocLicenseMng::checkLicenseUI(DocConstant::FeatureEmailAttachments, this.name());

        element.checkArgs(); 
        
        DocReportAttachment.setTmpData(element.initAttachments());

        LinkToManual.text(DocConstant::ReportAttachmentsManualURL);
        //Instructions.text("@DocentricAX2:ReportAttachmentRuleInstructionsText");
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        DocReportAttachment_ds.research();
        int cnt = DocReportAttachment_ds.numberOfRowsLoaded();
        List attachmentList;

        if (cnt > 0)
        {
            attachmentList = new List(Types::Class);
            DocReportAttachmentRule attachmentRule;
            DocValidationResult validationResult;
            int ruleCounter = 1;

            DocReportAttachmentRuleTmp tmpTableRecord = DocReportAttachment_ds.getFirst() as DocReportAttachmentRuleTmp;
            while (tmpTableRecord)
            {
                attachmentRule = new DocReportAttachmentRule();
                attachmentRule.parmLoadFrom(tmpTableRecord.LoadFrom);
                attachmentRule.parmCategoryId(tmpTableRecord.CategoryId);
                attachmentRule.parmName(tmpTableRecord.Description);
                attachmentRule.parmSelectedAttachmentCompanyId(tmpTableRecord.CompanyId);
                attachmentRule.parmIfNotFoundAction(tmpTableRecord.IfNotFoundAction);
                attachmentRule.parmDisplayName(tmpTableRecord.DisplayName);
                attachmentRule.parmFileExtension(tmpTableRecord.FileExtension);
                attachmentRule.parmDocuTypeId(tmpTableRecord.DocuTypeId);
                attachmentRule.parmRestriction(tmpTableRecord.Restriction);
                attachmentRule.parmLanguageFilter(tmpTableRecord.LanguageFilter);
                attachmentRule.parmPrintAs(tmpTableRecord.PrintAs);
                attachmentRule.parmSetupRuleNumber(ruleCounter);
                attachmentRule.parmTags(tmpTableRecord.Tags);

                validationResult = attachmentRule.validate();
                if (!validationResult.parmIsValid())
                {
                    DocGlobalHelper::handleException(
                        funcName(), 
                        strFmt("@DocentricAX2:ErrorValidatingAttachmentDefinition", 
                                attachmentRule.toString(), validationResult.parmMessage()));
                }

                attachmentList.addEnd(attachmentRule);

                tmpTableRecord = DocReportAttachment_ds.getNext() as DocReportAttachmentRuleTmp;
                ruleCounter++;
            }
        }
        
        DocSrsPrintReportSettings srsPrintReportSettings = callerFormRun.workingSrsPrintReportSettings_DC();
        Debug::assert(srsPrintReportSettings != null);
        
        srsPrintReportSettings.parmAttachmentRuleList(attachmentList);

        super();

        callerFormRun.refreshReportAttachmentCaption_DC(cnt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAttachments</Name>
				<Source><![CDATA[
    private DocReportAttachmentRuleTmp initAttachments()
    {
        recordsInserted = 0.0;
        
        DocSrsPrintReportSettings srsPrintReportSettings = callerFormRun.workingSrsPrintReportSettings_DC();
        Debug::assert(srsPrintReportSettings != null);

        if (srsPrintReportSettings.parmAttachmentRuleList() != null)
        {
            List attachmentList = srsPrintReportSettings.parmAttachmentRuleList();
            
            ListEnumerator le = new ListEnumerator();
            le = attachmentList.getEnumerator();

            DocReportAttachmentRule attachmentRule;
            while (le.moveNext())
            {
                attachmentRule = le.current();

                tmpTable.clear();
                tmpTable.initValue();
                
                recordsInserted += 1.0;
                tmpTable.Sequence = recordsInserted;

                tmpTable.LoadFrom = attachmentRule.parmLoadFrom();
                tmpTable.CategoryId = attachmentRule.parmCategoryId();
                tmpTable.Description = attachmentRule.parmName();
                tmpTable.CompanyId = attachmentRule.parmSelectedAttachmentCompanyId();
                tmpTable.IfNotFoundAction = attachmentRule.parmIfNotFoundAction();
                tmpTable.DisplayName = attachmentRule.parmDisplayName();
                tmpTable.FileExtension = attachmentRule.parmFileExtension();
                tmpTable.DocuTypeId = attachmentRule.parmDocuTypeId();
                tmpTable.Restriction = attachmentRule.parmRestriction();
                tmpTable.LanguageFilter = attachmentRule.parmLanguageFilter();
                tmpTable.PrintAs = attachmentRule.parmPrintAs();
                tmpTable.Tags = attachmentRule.parmTags();

                tmpTable.modifiedField(fieldNum(DocReportAttachmentRuleTmp, FileExtension));

                tmpTable.insert();
            }
        }
                
        return tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsProperties</Name>
				<Source><![CDATA[
    private void setFieldsProperties()
    {
        // Description:
        //      - If LoadFrom = Global: Description is lookup into the global attachments
        //      - Otherwise it is standard editable string
        if (DocReportAttachment.LoadFrom == DocReportAttachmentLoadFrom::GlobalAttachments)
        {
            Description.lookupButton(FormLookupButton::Always);
        }
        else
        {
            Description.lookupButton(FormLookupButton::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    private void enableButtons()
    {
        // Inserting placeholders is allowed if:
        //      - Focus is on: 
        //          - Description or DisplayName field (if dynamic attachment), or
        //          - DisplayName field (if global attachment)
        //          - Tags field
        //        and
        //      - The focused control is editable
        boolean isPlaceholderForDescription = (element.selectedControl() == Description)
                                    && Description.allowEdit()
                                    && DocReportAttachment.LoadFrom != DocReportAttachmentLoadFrom::GlobalAttachments;
        boolean isPlaceholderForDisplayName = (element.selectedControl() == DisplayName)
                                    && DisplayName.allowEdit();
        boolean isPlaceholderForTags = (element.selectedControl() == Tags)
                                    && Tags.allowEdit();

        InsertPlaceholderDropDialogButton.enabled(isPlaceholderForDescription || isPlaceholderForDisplayName || isPlaceholderForTags);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectControl</Name>
				<Source><![CDATA[
    public boolean selectControl(FormControl _control)
    {
        boolean ret;

        ret = super(_control);

        // When button is clicked, it becomes currentControl, so store the previous 
        // (caller) control as previousControl. We will need it to know where to add
        // the placeholder.
        previousControl = currentControl;
        currentControl = element.selectedControl();        

        isLastControlButton = (_control is FormButtonControl) || (_control is FormDropDialogButtonControl)|| (_control is FormCommandButtonControl);
        if (!isLastControlButton)
        {
            // When button is clicked, active is automatically executed and placeholder button would
            // become disabled, that's why we need this check.
            element.enableButtons();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _p1)
    {
        int ret;
        #Task
    
        // prevent creating new blank records with Alt+N
        if (_p1 == #taskNew)
        {
            return 0;
        }

        ret = super(_p1);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapRecords</Name>
				<Source><![CDATA[
    private void swapRecords(int _position, boolean _isDirectionDown)
    {
        DocReportAttachmentRuleTmp sourceRecord = DocReportAttachment_ds.cursor(_position);
        DocReportAttachmentRuleTmp targetRecord = DocReportAttachment_ds.cursor(_position + (_isDirectionDown ? 1 : -1));

        DocReportAttachmentRuleSequence targetSequence = targetRecord.Sequence;
        DocReportAttachmentRuleSequence sourceSequence = sourceRecord.Sequence;

        DocReportAttachmentRuleTmp tmpBuffer = tmpTable;

        ttsbegin;

        select firstonly tmpBuffer where tmpBuffer.RecId == sourceRecord.RecId;
        tmpBuffer.Sequence = targetSequence;
        tmpBuffer.update();

        select firstonly tmpBuffer where tmpBuffer.RecId == targetRecord.RecId;
        tmpBuffer.Sequence = sourceSequence;
        tmpBuffer.update();

        ttscommit;

        DocReportAttachment_ds.executeQuery();
        DocReportAttachment_ds.setPosition(_position + (_isDirectionDown ? 1 : -1));
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocReportAttachment</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();

            lastDescriptionText = DocReportAttachment.Description;
            lastDisplayNameText = DocReportAttachment.DisplayName;
            lastTags = DocReportAttachment.Tags;
           
            element.setFieldsProperties();
            element.enableButtons();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            // Do not allow user to sort or filter on this grid because of ability to move values up or down in sequence
            if (this.queryRunQueryBuildDataSource())
            {
                this.queryRunQueryBuildDataSource().sortClear();
                this.queryRun().query().clearQueryFilters(this.queryRunQueryBuildDataSource());
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>MoveUp</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            int curPos = DocReportAttachment_ds.getPosition();

            if (curPos > 1)
            {
                element.swapRecords(curPos, false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveDown</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            int curPos = DocReportAttachment_ds.getPosition();
            int maxPos = DocReportAttachment_ds.numberOfRowsLoaded();

            if (curPos < maxPos)
            {
                element.swapRecords(curPos, true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InsertPlaceholderDropDialogButton</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            lastDescriptionText = DocReportAttachment.Description;
            lastDisplayNameText = DocReportAttachment.DisplayName;
            lastTags = DocReportAttachment.Tags;

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DocuTypeId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides standard DocuType lookup to only include supported actionc classes.
        /// </summary>
        public void lookup()
        {
            //super();

            // Call a lookup method that shows only document types that are bound to an action class which derives from the DocuActionFile class.
            DocuType::lookupDocuActionFile_DC(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocReportAttachment</Name>
			<Table>DocReportAttachmentRuleTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuTypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileExtension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FullFilename</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IfNotFoundAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageFilter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LoadFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintAs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Restriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Sequence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tags</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>SequenceIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@DocentricAX2:SelectReportAttachments</Caption>
		<DataSource xmlns="">DocReportAttachment</DataSource>
		<DialogSize xmlns="">Full</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>BodyTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>RulesTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ActionPaneButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDropDialogButtonControl">
												<Name>NewAttachmentDropDialogButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>DropDialogButton</Type>
												<FormControlExtension
													i:nil="true" />
												<DataSource>DocReportAttachment</DataSource>
												<MenuItemName>DocReportAttachmentNewDropDialog</MenuItemName>
												<MultiSelect>No</MultiSelect>
												<NormalImage>New</NormalImage>
												<Text>@DocentricAX2:NewAttachment</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>DeleteAttachment</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CommandButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<Command>DeleteRecord</Command>
												<MultiSelect>Yes</MultiSelect>
												<NormalImage>Delete</NormalImage>
												<Primary>Yes</Primary>
												<SaveRecord>No</SaveRecord>
												<ShowShortCut>No</ShowShortCut>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>MoveUp</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<MultiSelect>No</MultiSelect>
												<NeedsRecord>Yes</NeedsRecord>
												<NormalImage>Up</NormalImage>
												<Text>@DocentricAX2:AttachmentRuleUp</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>MoveDown</Name>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<MultiSelect>No</MultiSelect>
												<NeedsRecord>Yes</NeedsRecord>
												<NormalImage>Down</NormalImage>
												<Text>@DocentricAX2:AttachmentRuleDown</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDropDialogButtonControl">
												<Name>InsertPlaceholderDropDialogButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@DocentricAX2:InsertPlaceholderHelp</HelpText>
												<Type>DropDialogButton</Type>
												<FormControlExtension
													i:nil="true" />
												<DataSource>DocReportAttachment</DataSource>
												<MenuItemName>DocReportAttachmentPlaceholderDropDialog</MenuItemName>
												<MultiSelect>No</MultiSelect>
												<NeedsRecord>Yes</NeedsRecord>
												<SaveRecord>No</SaveRecord>
											</AxFormControl>
										</Controls>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>DocReportAttachment</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LoadFrom</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>LoadFrom</DataField>
										<DataSource>DocReportAttachment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CategoryId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAX2:AttachmentCategoryFullHelp</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Description</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>FileExtension</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FileExtension</DataField>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DocuTypeId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DocuTypeId</DataField>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Restriction</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Restriction</DataField>
										<DataSource>DocReportAttachment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LanguageFilter</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>LanguageFilter</DataField>
										<DataSource>DocReportAttachment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Tags</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAX4:AdditionalAttachmentRulesTagsHelp</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Tags</DataField>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>IfNotFoundAction</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IfNotFoundAction</DataField>
										<DataSource>DocReportAttachment</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DisplayName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DisplayName</DataField>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>FullFilename</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FullFilename</DataField>
										<DataSource>DocReportAttachment</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PrintAs</Name>
										<Type>ComboBox</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>PrintAs</DataField>
										<DataSource>DocReportAttachment</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>DocReportAttachment</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@DocentricAX2:ReportAttachmentRules</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>InstructionsTabPage</Name>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>Instructions</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>tabularFields_titleText</ExtendedStyle>
								<Type>StaticText</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@DocentricAX2:ReportAttachmentRuleInstructionsText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LinkToManual</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocHowToManualsURL</ExtendedDataType>
								<Label>@DocentricAX2:LinkToManual</Label>
							</AxFormControl>
						</Controls>
						<Caption>@DocentricAX2:ReportAttachmentRuleInstructions</Caption>
						<FastTabExpanded>No</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>