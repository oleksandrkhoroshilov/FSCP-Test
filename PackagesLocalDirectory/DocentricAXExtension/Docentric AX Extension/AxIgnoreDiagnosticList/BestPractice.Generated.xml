<?xml version="1.0" encoding="utf-8"?>
<IgnoreDiagnostics xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <!-- 
	*************************************************************************************************************************
	*** START OF XML SCHEMA
	*************************************************************************************************************************
	-->
  <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" id="defaultSchema" attributeFormDefault="unqualified" elementFormDefault="qualified">
    <xs:element name="Name" type="xsd:string" />
    <xs:element name="Items">
      <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="Diagnostic">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="DiagnosticType" type="xsd:string" />
                <xs:element name="Severity" type="xsd:string" />
                <xs:element name="Path" type="xsd:string" />
                <xs:element name="Moniker" type="xsd:string" />
                <xs:element name="Message" type="xsd:string" />
                <xs:element name="Justification" type="xsd:string" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
  </xs:schema>
  <!-- 
	*************************************************************************************************************************
	*** START OF XML BODY
	*************************************************************************************************************************
	-->
  <Name>BestPractice.Generated</Name>
  <Items>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Form/DocReportAttachmentNewDropDialog/Method/closeOk</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call callerFormRun.insertAttachmentDefinitionRecord is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Form/DocReportAttachmentRules/Method/closeOk</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call callerFormRun.refreshReportAttachmentCaption_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Form/DocPrintDestSettingsFileOutputFilenameSuffixSettings/Method/closeOk</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call callerFormRun.setDirty_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Form/DocPrintDestSettingsMoreOptionsSettings/Method/closeOk</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call formRunObject.setDirty_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Form/DocReportAttachmentPlaceholderDropDialog/Method/closeOk</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call callerFormRun.insertPlaceholder is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Form/DocPrintDestSettingsFileSaveToAttachmentsSettings/Method/closeOk</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call formRunObject.setDirty_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalVendInvoiceDocument_DC</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_srsReportRunDataContract' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalSalesFreeTextInvoice_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call contract.parmPrintCopyOriginal is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalSalesFreeTextInvoice_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call contract.parmPrintCopyOriginal is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalTradeDocumentReports_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call controller.parmPrintCopyOriginal_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalTradeDocumentReports_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call controller.parmPrintCopyOriginal_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalVendInvoiceDocument_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call controller.parmPrintCopyOriginal_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalVendInvoiceDocument_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call controller.parmPrintCopyOriginal_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalPSAProjectQuotation_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call controller.parmPrintCopyOriginal_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtReportRun_DC_Extension/Method/getDocumentTitleOriginalPSAProjectQuotation_DC</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call controller.parmPrintCopyOriginal_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationConfirmationJournalForm_DC_EventHandler/Method/CustQuotationConfirmJour_OnActivated</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationConfirmationJournalForm_DC_EventHandler/Method/SalesQuotationConfirmation_OnLostFocus</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationConfirmationJournalForm_DC_EventHandler/Method/CustQuotationConfirmJour_OnActivated</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call formRun.CustQuotationConfirmJour_OnActivated_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationConfirmationJournalForm_DC_EventHandler/Method/SalesQuotationConfirmation_OnLostFocus</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call formRun.SalesQuotationConfirmation_OnLostFocus_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/Information_OnPageActivated</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/PrintJobHeader_OnInitialized</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DocPrintJobHeader_OnInitialized</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DocPrintJobHeader_OnActivated</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/PrintJobHeader_OnPostLinkActive</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DocPrintJobHeader_EncryptedPdfPasswordShowHide_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadPdfFiles_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadZippedPDFs_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadMergedPDF_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadNonPdfFiles_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadZippedNonPDFs_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadEncryptedPdfFiles_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadZippedEncryptedPDFs_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/PrintSettings_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/ViewEmail_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/Tabs_OnTabChanged</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/ToggleDocumentPreview_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/Information_OnPageActivated</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.Information_OnPageActivated_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/PrintJobHeader_OnInitialized</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.PrintJobHeader_OnInitialized_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DocPrintJobHeader_OnInitialized</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DocPrintJobHeader_OnInitialized_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DocPrintJobHeader_OnActivated</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DocPrintJobHeader_OnActivated_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/PrintJobHeader_OnPostLinkActive</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.PrintJobHeader_OnPostLinkActive_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DocPrintJobHeader_OnValidatingWrite</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DocPrintJobHeader_OnValidatingWrite_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DocPrintJobHeader_EncryptedPdfPasswordShowHide_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DocPrintJobHeader_EncryptedPdfPasswordShowHide_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadPdfFiles_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DownloadFiles_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadZippedPDFs_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DownloadZippedFiles_DC_OnClicked is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadMergedPDF_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DownloadMergedPDF_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadNonPdfFiles_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DownloadFiles_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadZippedNonPDFs_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DownloadZippedFiles_DC_OnClicked is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadEncryptedPdfFiles_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DownloadFiles_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/DownloadZippedEncryptedPDFs_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DownloadZippedFiles_DC_OnClicked is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/PrintSettings_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.PrintSettings_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/ViewEmail_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.ViewEmail_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/Tabs_OnTabChanged</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.Tabs_OnTabChanged_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SysPrintArchive_DC_EventHandler/Method/ToggleDocumentPreview_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.ToggleDocumentPreview_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SrsReportRunUtil_DC_Extension/Method/getAxReportContext</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter printMediumType in method getAxReportContext is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationJournalForm_DC_EventHandler/Method/CustQuotationJour_OnActivated</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationJournalForm_DC_EventHandler/Method/SalesQuotation_OnLostFocus</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationJournalForm_DC_EventHandler/Method/CustQuotationJour_OnActivated</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call formRun.CustQuotationJour_OnActivated_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/CustQuotationJournalForm_DC_EventHandler/Method/SalesQuotation_OnLostFocus</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call formRun.SalesQuotation_OnLostFocus_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/KeyVaultParametersForm_DC_EventHandler/Method/KeyVaultCertificateTable_OnQueryExecuted</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/KeyVaultParametersForm_DC_EventHandler/Method/KeyVaultCertificateTable_OnQueryExecuted</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call formRun.KeyVaultCertificateTable_OnQueryExecuted_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SrsReportRunController_DC_Extension/Method/getUniqueFileName_DC</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter newFileName in method getUniqueFileName_DC is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SrsReportRunController_DC_Extension/Method/parmReportContract</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _reportContract in method parmReportContract is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SrsPrintDestinationTokens_DC_Extension/Method/replaceTokens_DC</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _dest in method replaceTokens_DC is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SalesInvoiceJournalPostBase_DC_Extension/Method/addPaymentSchedule_DC</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_proformaDsObject' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SalesInvoiceJournalPostBase_DC_Extension/Method/addPrepaymentCustTrans_DC</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_proformaDsObject' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtPrintDestinationTokens_DC_Extension/Method/setUIAddresses</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _addresses in method setUIAddresses is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtPrintDestinationTokens_DC_Extension/Method/setUIAddresses</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _addresses in method setUIAddresses is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtPrintDestinationTokens_DC_Extension/Method/setUIAddresses</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _addresses in method setUIAddresses is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtPrintDestinationTokens_DC_Extension/Method/setUIAddresses</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _addresses in method setUIAddresses is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtPrintDestinationTokens_DC_Extension/Method/setUIAddresses</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _addresses in method setUIAddresses is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/PrintMgmtPrintDestinationTokens_DC_Extension/Method/setUIAddresses</Path>
      <Moniker>BPCheckParametersModified</Moniker>
      <Message>Parameter _addresses in method setUIAddresses is modified inside the method.</Message>
      <Justification>Made intentional.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_Extension/Method/SRSPrintDestinationSettingsDelegates_buildSendToList</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.setSendToImageList_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_Extension/Method/SRSPrintDestinationSettingsDelegates_changeTarget</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call settingsForm.onChangedTarget_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/ShowDocentricPrintDest_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/ShowSrsPrintDest_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PrintArchive_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PreviewBeforePrint_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SelectedTemplate_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailTo_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailCc_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailBcc_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailFrom_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AttachmentFileFormat_DC_OnSelectionChanged</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AttachmentFileFormatSrs_DC_OnSelectionChanged</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AttachmentName_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/UseEmailTemplate_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SelectedEmailTemplate_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/IsHtmlBody_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/DsOutputFilename_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SharePointEditButton_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SharePointNavigateButton_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/OutputFilename_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/OutputFileFormat_DC_OnSelectionChanged</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/OutputFileFormatSrs_DC_OnSelectionChanged</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToAzureBlobStorage_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureBlobPath_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureStorageAccount_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToAzureFiles_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureFilesFolderPath_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureFilesStorageAccount_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToSharePoint_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SharePointFolderPath_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToAttachments_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToFileSystem_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/FileSystemFolder_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/ToPage_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/FromPage_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/NumberOfCopies_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PrintAsPdf_DC_OnClicked</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PrintAsPdfFilename_DC_OnModified</Path>
      <Moniker>BPParameterNotUsed</Moniker>
      <Message>The parameter '_e' is not used.</Message>
      <Justification>The parameter was added for future use or is required by the interface.</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/ShowDocentricPrintDest_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.ShowDocentricPrintDest_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/ShowSrsPrintDest_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.ShowSrsPrintDest_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PrintArchive_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.PrintArchive_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PreviewBeforePrint_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.PreviewBeforePrint_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SelectedTemplate_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SelectedTemplate_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailTo_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.EmailTo_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailCc_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.EmailCc_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailBcc_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.EmailBcc_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/EmailFrom_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.EmailFrom_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AttachmentFileFormat_DC_OnSelectionChanged</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.AttachmentName_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AttachmentFileFormatSrs_DC_OnSelectionChanged</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.AttachmentName_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AttachmentName_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.AttachmentName_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/UseEmailTemplate_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.UseEmailTemplate_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SelectedEmailTemplate_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SelectedEmailTemplate_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/IsHtmlBody_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.IsHtmlBody_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/DsOutputFilename_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.DsOutputFilename_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SharePointEditButton_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SharePointEditButton_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SharePointNavigateButton_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SharePointNavigateButton_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/OutputFilename_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.OutputFilename_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/OutputFileFormat_DC_OnSelectionChanged</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.OutputFileFormat_DC_OnSelectionChanged_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/OutputFileFormatSrs_DC_OnSelectionChanged</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.OutputFileFormatSrs_DC_OnSelectionChanged_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToAzureBlobStorage_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SaveToAzureBlobStorage_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureBlobPath_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.AzureBlobPath_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureStorageAccount_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.AzureStorageAccount_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToAzureFiles_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SaveToAzureFiles_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureFilesFolderPath_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.AzureFilesFolderPath_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/AzureFilesStorageAccount_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.AzureFilesStorageAccount_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToSharePoint_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SaveToSharePoint_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SharePointFolderPath_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SharePointFolderPath_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToAttachments_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SaveToAttachments_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToAttachmentsDocuType_DC_OnLookup</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SaveToAttachmentsDocuType_DC_OnLookup_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/SaveToFileSystem_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.SaveToFileSystem_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/FileSystemFolder_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.FileSystemFolder_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/ToPage_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.ToPage_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/FromPage_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.FromPage_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/NumberOfCopies_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.NumberOfCopies_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PrintAsPdf_DC_OnClicked</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.PrintAsPdf_DC_OnClicked_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
    <Diagnostic>
      <DiagnosticType>BestPractices</DiagnosticType>
      <Severity>Warning</Severity>
      <Path>dynamics://Class/SRSPrintDestinationSettingsForm_DC_EventHandler/Method/PrintAsPdfFilename_DC_OnModified</Path>
      <Moniker>BPUpgradeCodeLateBoundCall</Moniker>
      <Message>A late bound call fr.PrintAsPdfFilename_DC_OnModified_DC is made. In source system (AX 2012) it is possible to dynamically call methods where the number and type of the parameters does not match with the method definition. This is not supported in AX 7, where the number and types of parameters have to match. Even if the parameters do match, the late bound call is extremely expensive. Mitigation: Use a class or interface hierarchy to provide a type safe fast call, or use the IS and AS operators to cast to a known type before calling.</Message>
      <Justification>The recommended solution is not feasible</Justification>
    </Diagnostic>
  </Items>
</IgnoreDiagnostics>