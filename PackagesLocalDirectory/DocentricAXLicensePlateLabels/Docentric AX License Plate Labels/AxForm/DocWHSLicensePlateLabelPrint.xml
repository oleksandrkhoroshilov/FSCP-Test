<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>DocWHSLicensePlateLabelPrint</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class DocWHSLicensePlateLabelPrint extends FormRun
{
    private WHSLabelId licensePlateLabelIdVar;
    private DocWHSUserId labelPrintUsingSetupWhsUserIdVar;
    private boolean labelPrintUsingSetupPrintDocentricTemplatesVar;
    private boolean labelPrintUsingSetupPrintZplLayoutsVar;
    private DocReportTemplateId labelPrintUsingDocentricTemplateIdVar;
    private DocWHSLabelLanguageId labelPrintUsingDocentricLanguageIdVar;
    private boolean labelPrintUsingDocentricPrintPreviewVar;
    private boolean labelPrintUsingDocentricPrintToPrinterVar;
    private DocWHSPrinterName labelPrintUsingDocentricPrinterNameVar;
    private DocPrinterNumberOfCopies labelPrintUsingDocentricNumberOfCopiesVar;
    private boolean labelPrintUsingDocentricGenerateDdspVar;
    private WHSLayoutId labelPrintUsingZplLayoutIdVar;
    private DocWHSPrinterName labelPrintUsingZplPrinterNameVar;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        licensePlateLabelIdVar,
        labelPrintUsingSetupWhsUserIdVar,
        labelPrintUsingSetupPrintDocentricTemplatesVar,
        labelPrintUsingSetupPrintZplLayoutsVar,
        labelPrintUsingDocentricTemplateIdVar,
        labelPrintUsingDocentricLanguageIdVar,
        labelPrintUsingDocentricPrintPreviewVar,
        labelPrintUsingDocentricPrintToPrinterVar,
        labelPrintUsingDocentricPrinterNameVar,
        labelPrintUsingDocentricNumberOfCopiesVar,
        labelPrintUsingDocentricGenerateDdspVar,
        labelPrintUsingZplLayoutIdVar,
        labelPrintUsingZplPrinterNameVar
    #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        super();

        // Restore the values of the controls from the SysLastValue store
        xSysLastValue::getLast(element);
        element.setControlValuesFromSysLastValues();

        if (element.args() && element.args().dataset() == tableNum(WHSLicensePlateLabel))
        {
            WHSLicensePlateLabel whsLicensePlateLabel = element.args().record() as WHSLicensePlateLabel;
            if (whsLicensePlateLabel)
            {
                LicensePlateLabelId.text(whsLicensePlateLabel.LabelId);
            }
        }

        element.initForm();

        element.setControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form controls depending on caller.
    /// </summary>
    private void initForm()
    {
        switch (element.args().menuItemName())
        {
            // Print label using Document routing setup
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingSetup):
                element.design().caption("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupCaption");
                LabelPrintInstructions.text("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupInstructions");
                
                LabelPrintUsingSetupWhsUserId.visible(true);
                LabelPrintUsingSetupGroup.visible(true);
                LabelPrintUsingDocentricGroup.visible(false);
                LabelPrintUsingZplGroup.visible(false);
                break;

            // Print label without setup using Docentric templates
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingDocentric):
                // If there is no valid licence, user will be warned, but we will still let him
                // to print license plate labels. Later in the pipeline we will throw the exception
                // if printing of license plate labels is executed, but the license is invalid.
                DocLicenseMng::checkLicenseUI(DocConstant::FeatureWhsLicensePlateLabels, element.name());

                element.design().caption("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricCaption");
                LabelPrintInstructions.text("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricInstructions");

                LabelPrintUsingSetupWhsUserId.visible(false);
                LabelPrintUsingSetupGroup.visible(false);
                LabelPrintUsingDocentricGroup.visible(true);
                LabelPrintUsingZplGroup.visible(false);
                break;

            // Print label without setup using ZPL layouts
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingZpl):
                element.design().caption("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingZplCaption");
                LabelPrintInstructions.text("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingZplInstructions");

                LabelPrintUsingSetupWhsUserId.visible(false);
                LabelPrintUsingSetupGroup.visible(false);
                LabelPrintUsingDocentricGroup.visible(false);
                LabelPrintUsingZplGroup.visible(true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the controls.
    /// </summary>
    private void setControls()
    {
        switch (element.args().menuItemName())
        {
            // Print label using Document routing setup
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingSetup):
                OKButton.enabled(LicensePlateLabelId.valueStr() 
                                    && (LabelPrintUsingSetupPrintDocentricTemplates.value() || LabelPrintUsingSetupPrintZplLayouts.value()));
                break;

            // Print label without setup using Docentric templates
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingDocentric):
                OKButton.enabled(LicensePlateLabelId.valueStr() 
                                    && LabelPrintUsingDocentricTemplateId.valueStr() 
                                    && (LabelPrintUsingDocentricPrintPreview.value() 
                                            || (LabelPrintUsingDocentricPrintToPrinter.value() && LabelPrintUsingDocentricPrinterName.valueStr() && LabelPrintUsingDocentricNumberOfCopies.value())
                                            || LabelPrintUsingDocentricGenerateDdsp.value()));

                LabelPrintUsingDocentricTemplateId.mandatory(true);
                LabelPrintUsingDocentricPrinterName.mandatory(LabelPrintUsingDocentricPrintToPrinter.value());
                LabelPrintUsingDocentricPrinterName.enabled(LabelPrintUsingDocentricPrintToPrinter.value());
                LabelPrintUsingDocentricNumberOfCopies.enabled(LabelPrintUsingDocentricPrintToPrinter.value());
                break;

            // Print label without setup using ZPL layouts
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingZpl):
                OKButton.enabled(LicensePlateLabelId.valueStr() 
                                    && LabelPrintUsingZplLayoutId.valueStr()
                                    && LabelPrintUsingZplPrinterName.valueStr());

                LabelPrintUsingZplLayoutId.mandatory(true);
                LabelPrintUsingZplPrinterName.mandatory(true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form is closed with OK button.
    /// </summary>
    public void closeOk()
    {
        // Save the values of the controls to the SysLastValue store
        element.getControlValuesForSysLastValues();
        xSysLastValue::saveLast(element);

        super();

        WhsDocumentRouting whsDocumentRouting = WhsDocumentRouting::construct();
        
        switch (element.args().menuItemName())
        {
            // Print label using Document routing setup
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingSetup):
                try
                {
                    // Set the mobile device user Id
                    whsDocumentRouting.parmUserId(LabelPrintUsingSetupWhsUserId.valueStr());

                    int countZplLayouts = 0;
                    int countDocentricTemplates = 0;

                    // Check if any Document routing setting meets the printing criteria for license plate label
                    container documentRoutingSetupCnt = whsDocumentRouting.getDocumentRoutingSetupForLabel_DCL(LicensePlateLabelId.valueStr());
                    if (documentRoutingSetupCnt == conNull())
                    {
                        DocGlobalHelper::handleWarning(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingSetupNoMatch", LicensePlateLabelId.valueStr()));
                        break;
                    }

                    // Counts the number of Document routing printers settings meeting the printing criteria for license plate label
                    RefRecId routeRecId = conPeek(documentRoutingSetupCnt, 1);
                    Set routingLineSet = Set::create(conPeek(documentRoutingSetupCnt, 2));
                    SetEnumerator routingLineSetEnum = routingLineSet.getEnumerator();
                    while (routingLineSetEnum.moveNext())
                    {
                        Common record = routingLineSetEnum.current();
                        switch (record.TableId)
                        {
                            // Document routing setup for ZPL layouts
                            case tableNum(WHSDocumentRoutingLine):
                                countZplLayouts++;
                                break;
                            // Document routing setup for Docentric templates
                            case tableNum(DocWHSDocumentRoutingLine):
                                countDocentricTemplates++;
                                break;
                        }
                    }

                    WHSDocumentRoutingTable routingTable;
                    select firstonly routingTable
                        where routingTable.RecId == routeRecId;

                    // Check if any Document rounting printers setting meets the printing criteria for license plate label
                    if (LabelPrintUsingSetupPrintZplLayouts.value() && LabelPrintUsingSetupPrintDocentricTemplates.value())
                    {
                        if (countZplLayouts == 0 && countDocentricTemplates == 0)
                        {
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingSetupNoPrintersMatch",
                                LicensePlateLabelId.valueStr(), routingTable.InventLocationId, routingTable.WorkTransType, routingTable.SeqNum, routingTable.Name));
                            break;
                        }
                    }
                    // Check if any Document rounting printers setting for ZPL layouts meets the printing criteria for license plate label
                    if (LabelPrintUsingSetupPrintZplLayouts.value() && !LabelPrintUsingSetupPrintDocentricTemplates.value())
                    {
                        if (countZplLayouts == 0)
                        {
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingSetupNoPrintersForZplLayoutsMatch",
                                LicensePlateLabelId.valueStr(), routingTable.InventLocationId, routingTable.WorkTransType, routingTable.SeqNum, routingTable.Name));
                            break;
                        }
                    }
                    // Check if any Document rounting printers setting for Docentric templates meets the printing criteria for license plate label
                    if (!LabelPrintUsingSetupPrintZplLayouts.value() && LabelPrintUsingSetupPrintDocentricTemplates.value())
                    {
                        if (countDocentricTemplates == 0)
                        {
                            DocGlobalHelper::handleWarning(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingSetupNoPrintersForDocentricTemplatesMatch",
                                LicensePlateLabelId.valueStr(), routingTable.InventLocationId, routingTable.WorkTransType, routingTable.SeqNum, routingTable.Name));
                            break;
                        }
                    }

                    routeRecId = whsDocumentRouting.printLabelToPrinterUsingSetup_DCL(
                                    LicensePlateLabelId.valueStr(),
                                    LabelPrintUsingSetupPrintZplLayouts.value(),
                                    LabelPrintUsingSetupPrintDocentricTemplates.value());

                    DocGlobalHelper::handleInfo(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingSetupSucceded", 
                        LicensePlateLabelId.valueStr(), routingTable.InventLocationId, routingTable.WorkTransType, routingTable.SeqNum, routingTable.Name));
                }
                catch
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingSetupFailed", LicensePlateLabelId.valueStr()));
                }
                break;

            // Print label without setup using Docentric templates
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingDocentric):
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
                /*
                In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                the Docentric AX Free Edition product.
                You must keep intact all parts of the source code related to the licensing of the full product version.
                Read more: https://ax.docentric.com/free-edition-license/
                */
                /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

                // If the License plate labels are used, check the license. This feature cannot be used with Free Edition!
                // This call will throw an exception if the license is not found or if the license is invalid, expired or insufficient.
                DocLicenseMng::checkLicense(DocConstant::FeatureWhsLicensePlateLabels, "@DocentricAXLicensePlateLabels:LicensePlateLabelPrintPrintFailed");

                // Print label to screen
                if (LabelPrintUsingDocentricPrintPreview.value())
                {
                    try
                    {
                        whsDocumentRouting.printLabelToScreenUsingDocentricTemplate_DCL(
                            LicensePlateLabelId.valueStr(),
                            LabelPrintUsingDocentricTemplateId.valueStr(),
                            LabelPrintUsingDocentricLanguageId.valueStr());
                    }
                    catch
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToScreenUsingDocentricFailed",
                            LicensePlateLabelId.valueStr(), LabelPrintUsingDocentricTemplateId.valueStr()));
                    }
                }

                // Print label to printer
                if (LabelPrintUsingDocentricPrintToPrinter.value())
                {
                    try
                    {
                        whsDocumentRouting.printLabelToPrinterUsingDocentricTemplate_DCL(
                            LicensePlateLabelId.valueStr(),
                            LabelPrintUsingDocentricTemplateId.valueStr(),
                            LabelPrintUsingDocentricLanguageId.valueStr(),
                            LabelPrintUsingDocentricPrinterName.valueStr(),
                            LabelPrintUsingDocentricNumberOfCopies.value());

                        DocGlobalHelper::handleInfo(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingDocentricSucceded",
                            LicensePlateLabelId.valueStr(), LabelPrintUsingDocentricPrinterName.valueStr(), LabelPrintUsingDocentricTemplateId.valueStr()));
                    }
                    catch
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingDocentricFailed",
                            LicensePlateLabelId.valueStr(), LabelPrintUsingDocentricPrinterName.valueStr(), LabelPrintUsingDocentricTemplateId.valueStr()));
                    }
                }

                // Generate DDSP file
                if (LabelPrintUsingDocentricGenerateDdsp.value())
                {
                    try
                    {
                        whsDocumentRouting.printLabelAsGeneratedDdspUsingDocentricTemplate_DCL(
                            LicensePlateLabelId.valueStr(),
                            LabelPrintUsingDocentricTemplateId.valueStr(),
                            LabelPrintUsingDocentricLanguageId.valueStr());
                    }
                    catch
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintAsGeneratedDdspUsingDocentricFailed",
                            LicensePlateLabelId.valueStr()));
                    }
                }
                break;

            // Print label without setup using ZPL layouts
            case menuItemDisplayStr(DocWHSLicensePlateLabelPrintUsingZpl):
                try
                {
                    whsDocumentRouting.printLabelToPrinterUsingZplLayout_DCL(
                        LicensePlateLabelId.valueStr(),
                        LabelPrintUsingZplLayoutId.valueStr(),
                        LabelPrintUsingZplPrinterName.valueStr());

                    DocGlobalHelper::handleInfo(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingZplSucceded", 
                        LicensePlateLabelId.valueStr(), LabelPrintUsingZplPrinterName.valueStr(), LabelPrintUsingZplLayoutId.valueStr()));
                }
                catch
                {
                    DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LicensePlateLabelPrintToPrinterUsingZplFailed", 
                        LicensePlateLabelId.valueStr(), LabelPrintUsingZplPrinterName.valueStr(), LabelPrintUsingZplLayoutId.valueStr()));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current user Id.
    /// </summary>
    /// <returns>Current user Id</returns>
    /// <remarks>SysLastValue framework need this method.</remarks>
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the element.
    /// </summary>
    /// <returns>Element type</returns>
    /// <remarks>SysLastValue framework need this method.</remarks>
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the element.
    /// </summary>
    /// <returns>Element name</returns>
    /// <remarks>SysLastValue framework need this method.</remarks>
    private IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the design name.
    /// </summary>
    /// <returns>Design name</returns>
    /// <remarks>SysLastValue framework need this method.</remarks>
    private IdentifierName lastValueDesignName()
    {
        // Unique key: (user, company, type, elementName, designName)
        // We don't have such a need to save different sets of the form data.
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current data area.
    /// </summary>
    /// <returns>Data area Id</returns>
    /// <remarks>SysLastValue framework need this method.</remarks>
    DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values of the controls.
    /// </summary>
    /// <remarks>SysLastValue framework need this method.</remarks>
    void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the values of the controls into the container.
    /// </summary>
    /// <returns>Packed container</returns>
    /// <remarks>SysLastValue framework need this method.</remarks>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the values of the controls in the packed container.
    /// </summary>
    /// <param name = "packedClass">Packed container</param>
    /// <returns>True/False</returns>
    /// <remarks>SysLastValue framework need this method.</remarks>
    public boolean unpack(container packedClass)
    {
        int version = conPeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlValuesForSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the control values for SysLatValue store.
    /// </summary>
    private void getControlValuesForSysLastValues()
    {
        licensePlateLabelIdVar = LicensePlateLabelId.valueStr();
        labelPrintUsingSetupWhsUserIdVar = LabelPrintUsingSetupWhsUserId.valueStr();
        labelPrintUsingSetupPrintDocentricTemplatesVar = LabelPrintUsingSetupPrintDocentricTemplates.value();
        labelPrintUsingSetupPrintZplLayoutsVar = LabelPrintUsingSetupPrintZplLayouts.value();
        labelPrintUsingDocentricTemplateIdVar = LabelPrintUsingDocentricTemplateId.valueStr();
        labelPrintUsingDocentricLanguageIdVar = LabelPrintUsingDocentricLanguageId.valueStr();
        labelPrintUsingDocentricPrintPreviewVar = LabelPrintUsingDocentricPrintPreview.value();
        labelPrintUsingDocentricPrintToPrinterVar = LabelPrintUsingDocentricPrintToPrinter.value();
        labelPrintUsingDocentricPrinterNameVar = LabelPrintUsingDocentricPrinterName.valueStr();
        labelPrintUsingDocentricNumberOfCopiesVar = LabelPrintUsingDocentricNumberOfCopies.value();
        labelPrintUsingDocentricGenerateDdspVar = LabelPrintUsingDocentricGenerateDdsp.value();
        labelPrintUsingZplLayoutIdVar = LabelPrintUsingZplLayoutId.valueStr();
        labelPrintUsingZplPrinterNameVar = LabelPrintUsingZplPrinterName.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValuesFromSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the control values from SysLastValue store.
    /// </summary>
    private void setControlValuesFromSysLastValues()
    {
        LicensePlateLabelId.text(licensePlateLabelIdVar);
        LabelPrintUsingSetupWhsUserId.text(labelPrintUsingSetupWhsUserIdVar);
        LabelPrintUsingSetupPrintDocentricTemplates.value(labelPrintUsingSetupPrintDocentricTemplatesVar);
        LabelPrintUsingSetupPrintZplLayouts.value(labelPrintUsingSetupPrintZplLayoutsVar);
        LabelPrintUsingDocentricTemplateId.text(labelPrintUsingDocentricTemplateIdVar);
        LabelPrintUsingDocentricLanguageId.text(labelPrintUsingDocentricLanguageIdVar);
        LabelPrintUsingDocentricPrintPreview.value(labelPrintUsingDocentricPrintPreviewVar);
        LabelPrintUsingDocentricPrintToPrinter.value(labelPrintUsingDocentricPrintToPrinterVar);
        LabelPrintUsingDocentricPrinterName.text(labelPrintUsingDocentricPrinterNameVar);
        LabelPrintUsingDocentricNumberOfCopies.value(labelPrintUsingDocentricNumberOfCopiesVar);
        LabelPrintUsingDocentricGenerateDdsp.value(labelPrintUsingDocentricGenerateDdspVar);
        LabelPrintUsingZplLayoutId.text(labelPrintUsingZplLayoutIdVar);
        LabelPrintUsingZplPrinterName.text(labelPrintUsingZplPrinterNameVar);

        if (!LabelPrintUsingDocentricNumberOfCopies.value())
        {
            LabelPrintUsingDocentricNumberOfCopies.value(1);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>LicensePlateLabelId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
    
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingSetupWhsUserId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();
    
            element.setControls();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingSetupPrintDocentricTemplates</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            if (this.value())
            {
                // If there is no valid licence, user will be warned, but we will still let him
                // to print license plate labels. Later in the pipeline we will throw the exception
                // if printing of license plate labels is executed, but the license is invalid.
                DocLicenseMng::checkLicenseUI(DocConstant::FeatureWhsLicensePlateLabels, element.name());
            }

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingSetupPrintZplLayouts</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingDocentricTemplateId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calls a lookup form for selecting a Docentric template.
        /// </summary>
        public void lookup()
        {
            DocWHSDocumentRoutingLine::lookupTemplateId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides the jumpRef method for the specified control.
        /// </summary>
        public void jumpRef()
        {
            Args args = new Args();
            args.record(DocReportTable::findReportTemplateId(this.valueStr()));
            args.caller(this);

            new MenuFunction(menuItemDisplayStr(DocReportTable), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the value of the control.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean validate()
        {
            boolean ret = super();

            if (this.valueStr())
            {
                DocReportTemplate docReportTemplate;

                select firstonly docReportTemplate
                    where docReportTemplate.TemplateId == this.valueStr();

                if (!docReportTemplate)
                {
                    ret = ret && checkFailed(strFmt("@SCM:TableFieldValidation", this.valueStr(), fieldId2PName(tableNum(DocReportTemplate), fieldNum(DocReportTemplate, TemplateId)), tableId2PName(tableNum(DocReportTemplate))));
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingDocentricLanguageId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calls a lookup form for selecting a language.
        /// </summary>
        public void lookup()
        {
            DocWHSDocumentRoutingLine::lookupLanguageId(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingDocentricPrintPreview</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingDocentricPrintToPrinter</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingDocentricPrinterName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calls a lookup form for selecting a printer.
        /// </summary>
        public void lookup()
        {
            WHSDocumentRoutingLine::lookupPrinters(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingDocentricNumberOfCopies</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            if (this.value() <= 0)
            {
                this.value(1);
            }

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingDocentricGenerateDdsp</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingZplLayoutId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LabelPrintUsingZplPrinterName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calls a lookup form for selecting a printer.
        /// </summary>
        public void lookup()
        {
            WHSDocumentRoutingLine::lookupPrinters(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called when the value of the control is modified.
        /// </summary>
        /// <returns>True/False</returns>
        public boolean modified()
        {
            boolean ret = super();

            element.setControls();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupCaption</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>LabelPrintInstructions</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupInstructions</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>LabelPrintHeaderGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>LicensePlateLabelId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintLicensePlateLabelIdHelp</HelpText>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocWHSLabelId</ExtendedDataType>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>LabelPrintUsingSetupWhsUserId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocWHSUserId</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>LabelPrintContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LabelPrintUsingSetupGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>LabelPrintUsingSetupPrintDocentricTemplates</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupPrintDocentricTemplatesHelp</HelpText>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupPrintDocentricTemplates</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>LabelPrintUsingSetupPrintZplLayouts</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupPrintZplLayoutsHelp</HelpText>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingSetupPrintZplLayouts</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LabelPrintUsingDocentricGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>LabelPrintUsingDocentricTemplateGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LabelPrintUsingDocentricTemplateId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricSelectTemplateHelp</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocReportTemplateId</ExtendedDataType>
										<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricSelectTemplate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LabelPrintUsingDocentricLanguageId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocWHSLabelLanguageId</ExtendedDataType>
										<Label>@SYS58401</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>LabelPrintUsingDocentricPrintPreviewGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LabelPrintUsingDocentricPrintPreview</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricPrintPreviewHelp</HelpText>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricPrintPreview</Label>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>LabelPrintUsingDocentricPrintToPrinterGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LabelPrintUsingDocentricPrintToPrinter</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricPrintToPrinterHelp</HelpText>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricPrintToPrinter</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LabelPrintUsingDocentricPrinterName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricSelectPrinterHelp</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocWHSPrinterName</ExtendedDataType>
										<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricSelectPrinter</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>LabelPrintUsingDocentricNumberOfCopies</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrinterNumberOfCopiesHelp</HelpText>
										<Type>Integer</Type>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DocPrinterNumberOfCopies</ExtendedDataType>
										<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrinterNumberOfCopies</Label>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>LabelPrintUsingDocentricGenerateDdspGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>LabelPrintUsingDocentricGenerateDdsp</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricGenerateDdspHelp</HelpText>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingDocentricGenerateDdsp</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>LabelPrintUsingDocentricDocReportTable</Name>
										<HelpText>@DocentricAX4:ReportSetupHelp</HelpText>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>DocReportTable</MenuItemName>
										<Style>Link</Style>
										<Text>@DocentricAX4:ReportSetup</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LabelPrintUsingZplGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LabelPrintUsingZplLayoutId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingZplSelectLayoutHelp</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocWHSLayoutId</ExtendedDataType>
								<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingZplSelectLayout</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LabelPrintUsingZplPrinterName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingZplSelectPrinterHelp</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DocWHSPrinterName</ExtendedDataType>
								<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintUsingZplSelectPrinter</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@DocentricAXLicensePlateLabels:LicensePlateLabelPrintContentGroup</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>LabelPrintButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@SYS920</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>