<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSLabelLanguageTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocWHSLabelLanguageTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the temporary table with avaliable system languages and language placeholders.
    /// </summary>
    /// <param name = "_labelLanguageTmp">An instance of the DocWHSLabelLanguageTmp table</param>
    public static void fillTable(DocWHSLabelLanguageTmp _labelLanguageTmp)
    {
        ttsbegin;

        delete_from _labelLanguageTmp;

        // Add defined language placeholders
        _labelLanguageTmp.addLanguagePlaceholders(_labelLanguageTmp);

        // Get available system languages
        container langs = Global::languageList();

        for(int i = 1; i <= conlen(langs); i++)
        {
            container langEntry = conpeek(langs, i);

            _labelLanguageTmp.initValue();
            _labelLanguageTmp.LanguageId = conpeek(langEntry, 1);
            _labelLanguageTmp.LanguageDescription = conPeek(langEntry, 2);
            _labelLanguageTmp.doInsert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLanguagePlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds available language placeholders into provided temporary table. 
    /// </summary>
    /// <param name = "_labelLanguageTmp">An instace of the DocWHSLabelLanguageTmp temporary table</param>
    private void addLanguagePlaceholders(DocWHSLabelLanguageTmp _labelLanguageTmp)
    {
        // Add pre-defined language placeholders
        _labelLanguageTmp.insertLanguagePlaceholder(DocConstantLicensePlateLabel::CompanyLanguagePlaceholder, "@DocentricAXLicensePlateLabels:LabelLanguageCompanyLanguagePlaceholderDesc");
        _labelLanguageTmp.insertLanguagePlaceholder(DocConstantLicensePlateLabel::UserLanguagePlaceholder, "@DocentricAXLicensePlateLabels:LabelLanguageUserLanguagePlaceholderDesc");
        _labelLanguageTmp.insertLanguagePlaceholder(DocConstantLicensePlateLabel::OrderLanguagePlaceholder, "@DocentricAXLicensePlateLabels:LabelLanguageOrderLanguagePlaceholderDesc");
        _labelLanguageTmp.insertLanguagePlaceholder(DocConstantLicensePlateLabel::AccountLanguagePlaceholder, "@DocentricAXLicensePlateLabels:LabelLanguageAccountLanguagePlaceholderDesc");

        // Add custom language placeholders
        this.addCustomLanguagePlaceholders(_labelLanguageTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLanguagePlaceholder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts provided placeholder in the DocWHSLabelLanguageTmp table.
    /// </summary>
    /// <param name = "_languagePlaceholderId">Language placeholder Id</param>
    /// <param name = "_languagePlaceholderDesc">Language placeholder description</param>
    public void insertLanguagePlaceholder(str _languagePlaceholderId, str _languagePlaceholderDesc)
    {
        this.clear();
        this.initValue();
        this.LanguageId = _languagePlaceholderId;
        this.LanguageDescription = _languagePlaceholderDesc;
        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLanguagePlaceholdersDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for adding custom language placeholders to configure the runtime language when printing a license plate label.
    /// </summary>
    /// <param name = "_labelLanguageTmp">An instace of the DocWHSLabelLanguageTmp temporary table</param>
    delegate void addCustomLanguagePlaceholdersDelegate(DocWHSLabelLanguageTmp _labelLanguageTmp)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLanguagePlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for adding custom language placeholders to configure the runtime language when printing a license plate label.
    /// </summary>
    /// <param name = "_labelLanguageTmp">An instace of the DocWHSLabelLanguageTmp temporary table</param>
    private void addCustomLanguagePlaceholders(DocWHSLabelLanguageTmp _labelLanguageTmp)
    {
        try
        {
            this.addCustomLanguagePlaceholdersDelegate(_labelLanguageTmp);
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocWHSLabelLanguageTmp, addCustomLanguagePlaceholdersDelegate)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocWHSLabelLanguageTmp, addCustomLanguagePlaceholdersDelegate)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the DocWHSLabelLanguageTmp table.
    /// </summary>
    public void insert()
    {
        // Check if the language Id is a placeholder and validate its syntax 
        if (!LanguageTable::exist(this.LanguageId))
        {
            if (subStr(this.LanguageId, 1, 1) != DocConstantPlaceholder::PlaceholderStartSymbol 
                    || subStr(this.LanguageId, strLen(this.LanguageId), -1) != DocConstantPlaceholder::PlaceholderEndSymbol)
            {
                DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LabelLanguagePlaceholderError", this.LanguageId, DocConstantPlaceholder::PlaceholderStartSymbol, DocConstantPlaceholder::PlaceholderEndSymbol), true, funcName(), true);
            }
        }
       
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DocentricAXLicensePlateLabels:DocWHSLicensePlateLabelLanguageTableDD</DeveloperDocumentation>
	<Label>@DocentricAXLicensePlateLabels:DocWHSLicensePlateLabelLanguageTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>LanguageId</TitleField1>
	<TitleField2>LanguageDescription</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ReplacementKey>LanguageIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<ExtendedDataType>DocWHSLabelLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageDescription</Name>
			<ExtendedDataType>LanguageDescription</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LanguageIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>