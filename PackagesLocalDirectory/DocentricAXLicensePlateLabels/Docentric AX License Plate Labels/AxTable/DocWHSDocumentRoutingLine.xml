<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSDocumentRoutingLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocWHSDocumentRoutingLine extends common
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values with default values in a new record.
    /// </summary>
    public void initValue()
    {
        super();

        this.PackedQueryRun = this.defaultPackedQueryRun().pack();
        this.NumberOfCopies = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPackedQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default query run.
    /// </summary>
    /// <returns>The default query run.</returns>
    [Hookable(false)]
    internal QueryRun defaultPackedQueryRun()
    {
        return new QueryRun(DocConstantLicensePlateLabel::DefaultWHSLicensePlateLabelQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCriteriaConfigured</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method indicating if the default query criteria has been changed.
    /// </summary>
    /// <returns>True/False</returns>
    public display DocWHSQueryCriteriaConfigured queryCriteriaConfigured()
    {
        if (this.PackedQueryRun == conNull())
        {
            return false;
        }

        QueryRun qrCurrent = new QueryRun(this.PackedQueryRun);

        return DocGlobalHelper::getQueryCriteria(qrCurrent.query(), true, true) != DocGlobalHelper::getQueryCriteria(this.defaultPackedQueryRun().query(), true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for defined query criteria.
    /// </summary>
    /// <returns>Defined query criteria as string</returns>
    public display DocWHSQueryCriteria queryCriteria()
    {
        if (this.PackedQueryRun == conNull())
        {
            return '';
        }

        QueryRun qrCurrent = new QueryRun(this.PackedQueryRun);

        return DocGlobalHelper::getQueryCriteria(qrCurrent.query(), true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field values in the current record.
    /// </summary>
    /// <param name = "_fieldIdToCheck">The field to check</param>
    /// <returns>True/False</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(DocWHSDocumentRoutingLine, TemplateId):                
                ret = ret && DocWHSLicensePlateLabelHelper::validateTemplate(this.TemplateId);
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls a lookup form for selecting a Docentric report template.
    /// </summary>
    /// <param name = "_formControl">Form control</param>
    public static void lookupTemplateId(FormStringControl _formControl)
    {
        DocSysTableLookup sysTableLookup = DocSysTableLookup::newParameters(tableNum(DocReportTemplateSelectorTmp), _formControl);
        Query query = new Query();

        sysTableLookup.addLookupField(fieldNum(DocReportTemplateSelectorTmp, TemplateId), true);
        sysTableLookup.addLookupfield(fieldNum(DocReportTemplateSelectorTmp, CompanyId));
        sysTableLookup.addLookupfield(fieldNum(DocReportTemplateSelectorTmp, LanguageId));
        // If ER CBD feature is turned on, show the field IsERTemplate
        if (DocParameters::find().EnableCbdDs)
        {
            sysTableLookup.addLookupfield(fieldNum(DocReportTemplateSelectorTmp, IsERTemplate));
        }
        sysTableLookup.addLookupfield(fieldNum(DocReportTemplateSelectorTmp, ReportId));
        
        DocReportTemplateSelectorTmp docReportTemplateSelectorTmp;

        // Get a list of DSP classes that extend the DocWHSLicensePlateLabelDSPBase class
        SysDictClass dictClass = new SysDictClass(className2Id(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelDSPBaseClass));
        List extendedClassList = dictClass.extendedBy(true);        
        if (extendedClassList.elements())
        {
            ListEnumerator extendedClassListEnum = extendedClassList.getEnumerator();
            while (extendedClassListEnum.moveNext())
            {
                ClassId childClassId = extendedClassListEnum.current();
                // Populate the lookup table with report templates based on the DSP class that extends the DocWHSLicensePlateLabelDSPBase class
                DocWHSDocumentRoutingLine::fillReportTemplateSelectorTmp(classId2Name(childClassId), docReportTemplateSelectorTmp);
            }
        }
        // Populate the lookup table with report templates based on the DocWHSLicensePlateLabelDSPBase class
        DocWHSDocumentRoutingLine::fillReportTemplateSelectorTmp(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelDSPBaseClass, docReportTemplateSelectorTmp);

        sysTableLookup.parmTmpBuffer(docReportTemplateSelectorTmp);
        query.addDataSource(tableNum(DocReportTemplateSelectorTmp));        
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();

        sysTableLookup.datasource().positionToRecordByValue(fieldNum(DocReportTemplateSelectorTmp, TemplateId), _formControl.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportTemplateSelectorTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the lookup table with report templates based on the provided DSP class.
    /// </summary>
    /// <param name = "_className">DSP class name</param>
    /// <param name = "_docReportTemplateSelectorTmp">An instance od the DocReportTemplateSelectorTmp temporary table</param>
    private static void fillReportTemplateSelectorTmp(DocDataSourceProviderClassName _className, DocReportTemplateSelectorTmp _docReportTemplateSelectorTmp)
    {
        DocReportTable docReportTable;
        DocReportTemplate docReportTemplate;

        ttsbegin;

        while select TemplateId, CompanyId, LanguageId, DataSourceType
            from docReportTemplate
                where docReportTemplate.IsEnabled
                   && (docReportTemplate.CompanyId == '' || docReportTemplate.CompanyId == curExt())
            join ReportId
                from docReportTable
                    where docReportTable.RecId == docReportTemplate.Report
                       && docReportTable.IsActiveSRS
                       && !docReportTable.UseOnlyWithPrintDestinations
                       && docReportTable.DataSourceProviderClassName == _className
        {
            _docReportTemplateSelectorTmp.clear();
            _docReportTemplateSelectorTmp.TemplateId = docReportTemplate.TemplateId;
            _docReportTemplateSelectorTmp.CompanyId = docReportTemplate.CompanyId;
            _docReportTemplateSelectorTmp.LanguageId = docReportTemplate.LanguageId;
            _docReportTemplateSelectorTmp.ReportId = docReportTable.ReportId;
            _docReportTemplateSelectorTmp.IsERTemplate = (docReportTemplate.DataSourceType == DocTemplateDataSourceType::ERDataModel);
            _docReportTemplateSelectorTmp.doInsert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls a lookup form for selecting a language.
    /// </summary>
    /// <param name = "_formControl">Form control</param>
    public static void lookupLanguageId(FormStringControl _formControl)
    {
        DocSysTableLookup sysTableLookup = DocSysTableLookup::newParameters(tableNum(DocWHSLabelLanguageTmp), _formControl);
        Query query = new Query();

        sysTableLookup.addLookupField(fieldNum(DocWHSLabelLanguageTmp, LanguageId), true);
        sysTableLookup.addLookupfield(fieldNum(DocWHSLabelLanguageTmp, LanguageDescription));

        DocWHSLabelLanguageTmp labelLanguageTmp;
        DocWHSLabelLanguageTmp::fillTable(labelLanguageTmp);

        sysTableLookup.parmTmpBuffer(labelLanguageTmp);
        QueryBuildDataSource qbds = query.addDataSource(tableNum(DocWHSLabelLanguageTmp));
        qbds.addSortField(fieldnum(DocWHSLabelLanguageTmp, RecId));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();

        sysTableLookup.datasource().positionToRecordByValue(fieldNum(DocWHSLabelLanguageTmp, LanguageId), _formControl.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupUserIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the multi-select lookup control for the field UserIds.
    /// </summary>
    /// <param name = "_callingCtrl">The calling FormStringControl. This is the control that spawned the MultiSelectGridLookup.</param>
    /// <param name = "_ctrlRecIds">The FormStringControl that keeps tracks of the selected RecIDs for the calling control.</param>
    public static void lookupUserIds(FormStringControl _callingCtrl, FormStringControl _ctrlRecIds)
    {
        // Prepare a queryRun to work with the temporary table
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(WHSWorkUser));
        qbds.addSelectionField(fieldNum(WHSWorkUser, UserId));

        QueryRun qr = new QueryRun(q);

        // The field to select from the temporary table
        container selectField = [tableNum(WHSWorkUser), fieldNum(WHSWorkUser, UserId)];

        // This form string control is used to store the list of the selected RecIds from the multi-select lookup control.
        // It is mandatory for proper working of the multi-select lookup control.
        _ctrlRecIds.text('');

        // Call the multi-select lookup control
        DocSysLookupMultiSelectGrid lookupMS = DocSysLookupMultiSelectGrid::construct(_ctrlRecIds, _callingCtrl, '; ');
        lookupMS.parmCallingControl(_callingCtrl);
        lookupMS.parmQuery(q);
        lookupMS.parmQueryRun(qr);
        lookupMS.parmSelectField(selectField);
        lookupMS.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a next DocWHSDocumentRoutingLine record for the same document routing table.
    /// </summary>
    /// <returns>The next DocWHSDocumentRoutingLine record</returns>
    public DocWHSDocumentRoutingLine nextRecord()
    {
        DocWHSDocumentRoutingLine  docWHSDocumentRoutingLine;

        select firstonly DocumentRoutingTable, LineNum, RecId
            from docWHSDocumentRoutingLine
                order by docWHSDocumentRoutingLine.LineNum asc
                where docWHSDocumentRoutingLine.DocumentRoutingTable == this.DocumentRoutingTable
                   && docWHSDocumentRoutingLine.LineNum > this.LineNum;

        return docWHSDocumentRoutingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a previous DocWHSDocumentRoutingLine record for the same document routing table.
    /// </summary>
    /// <returns>The previous DocWHSDocumentRoutingLine record</returns>
    public DocWHSDocumentRoutingLine prevRecord()
    {
        DocWHSDocumentRoutingLine  docWHSDocumentRoutingLine;

        select firstonly DocumentRoutingTable, LineNum, RecId
            from docWHSDocumentRoutingLine
                order by docWHSDocumentRoutingLine.LineNum desc
                where docWHSDocumentRoutingLine.DocumentRoutingTable == this.DocumentRoutingTable
                   && docWHSDocumentRoutingLine.LineNum < this.LineNum;

        return docWHSDocumentRoutingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change DocWHSDocumentRoutingLine line numbers with adjacent line numbers based on up or down button click.
    /// </summary>
    /// <param name = "_moveUp">Boolean used to determine if the up button or down button was pressed</param>
    public void moveLine(boolean _moveUp)
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataSource dsDocWHSDocumentRoutingLine = FormDataUtil::getFormDataSource(this);

            DocWHSDocumentRoutingLine curRecordMove = this.data();

            if ((_moveUp && dsDocWHSDocumentRoutingLine.prev()) || (!_moveUp && dsDocWHSDocumentRoutingLine.next()))
            {
                // Find next line number
                dsDocWHSDocumentRoutingLine.create(!_moveUp);
                DocWHSDocumentRoutingLine newRecord = dsDocWHSDocumentRoutingLine.cursor().data();
                LineNum newLineNum = newRecord.LineNum;
                dsDocWHSDocumentRoutingLine.delete();

                ttsbegin;

                dsDocWHSDocumentRoutingLine.positionToRecord(curRecordMove);
                DocWHSDocumentRoutingLine curRecord = dsDocWHSDocumentRoutingLine.cursor();

                curRecord.LineNum = newLineNum;
                curRecord.update();

                ttscommit;

                dsDocWHSDocumentRoutingLine.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>True if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the specified field value is changed.
    /// </summary>
    /// <param name = "_fieldId">Field Id</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(DocWHSDocumentRoutingLine, NumberOfCopies):
                if (this.NumberOfCopies <= 0)
                {
                    this.NumberOfCopies = 1;
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@DocentricAXLicensePlateLabels:DocWHSDocumentRoutingLineDD</DeveloperDocumentation>
	<FormRef>WHSDocumentRouting</FormRef>
	<Label>@DocentricAXLicensePlateLabels:DocWHSDocumentRoutingLine</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PrinterName</TitleField1>
	<TitleField2>TemplateId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>DocumentRoutingTableLineNumIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>DocumentRoutingTableLineNumIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrinterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentRoutingTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentRoutingTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentRoutingTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrinterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfCopies</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserIds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RunQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackedQueryRun</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DocumentRoutingTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrinterName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocWHSPrinterName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocReportTemplateId</ExtendedDataType>
			<HelpText>@DocentricAXLicensePlateLabels:TemplateIdHelp</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<ExtendedDataType>DocWHSLabelLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfCopies</Name>
			<ExtendedDataType>DocPrinterNumberOfCopies</ExtendedDataType>
			<HelpText>@DocentricAXLicensePlateLabels:LicensePlateLabelPrinterNumberOfCopiesHelp</HelpText>
			<Label>@DocentricAXLicensePlateLabels:LicensePlateLabelPrinterNumberOfCopies</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserIds</Name>
			<ExtendedDataType>DocWHSUserIds</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RunQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRunQuery</ExtendedDataType>
			<HelpText>@DocentricAXLicensePlateLabels:RunQueryHelp</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedQueryRun</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackedQueryRun</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DocumentRoutingTableLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentRoutingTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DocumentRoutingTablePrinterNameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentRoutingTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PrinterName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TemplateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSDocumentRoutingTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSDocumentRoutingTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentRoutingTable</Name>
					<Field>DocumentRoutingTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysCorpNetPrinters</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SysCorpNetPrinters</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrinterName</Name>
					<Field>PrinterName</Field>
					<RelatedField>PrinterName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocReportTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocReportTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TemplateId</Name>
					<Field>TemplateId</Field>
					<RelatedField>TemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>