<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSLicensePlateLabelDSPBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSLicensePlateLabelDSPBase is a base Docentric data source provider class for the Licence plate label report.
/// </summary>
public class DocWHSLicensePlateLabelDSPBase extends DocDataSourceProviderSrsReporting
{
    protected WHSLabelId labelId;  // Used for populating placeholders

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>Class description</returns>
    public ClassDescription description()
    {
        return 'License plate label DSP base class';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        if (tableNum(WHSLicensePlateLabel) == _qbds.table())
        {
            // Setting the flag needed for Docentric NextGen.
            _addingRecord.setSingleRecord(true);

            labelId = (_common as WHSLicensePlateLabel).LabelId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.LabelId('LabelId')
    #define.WhsUserId('WhsUserId')
    #define.InventLocationId('InventLocationId')
    #define.AccountNum('AccountNum')
    #define.LicensePlateId('LicensePlateId')
    #define.WorkId('WorkId')
    #define.OrderNum('OrderNum')

    /// <summary>
    /// Replaces all standard placeholders if any is presented.
    /// </summary>
    /// <param name="_reportRunContext">Report run context.</param>
    /// <param name="_replaceStandardPlaceholders">Should be standard placeholders replaced.</param>
    /// <returns>DocPlaceholderManager instance to enable replacing of custom placeholders if the method is overridden.</returns>
    [DocPlaceholderAttribute(#LabelId, 'LPL - Label ID'),
     DocPlaceholderAttribute(#WhsUserId, 'LPL - Mobile device user ID'),
     DocPlaceholderAttribute(#InventLocationId, 'LPL - Warehouse'),
     DocPlaceholderAttribute(#AccountNum, 'LPL - Account number'),
     DocPlaceholderAttribute(#LicensePlateId, 'LPL - License plate'),
     DocPlaceholderAttribute(#WorkId, 'LPL - Work ID'),
     DocPlaceholderAttribute(#OrderNum, 'LPL - Order number')
    ]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Override the default report caption
        if (_reportRunContext.parmReportCaption() == this.getSrsReportDataContract().parmReportCaption())
        {
            _reportRunContext.parmReportCaption(strFmt('LPL: @%1@ | User: @%2@ | LP: @%3@', #LabelId, #WhsUserId, #LicensePlateId));
        }

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Get the License plate label record for the selected label Id
        WHSLicensePlateLabel whsLicensePlateLabel = WHSLicensePlateLabel::find(labelId);

        // Replace custom placeholders:
        // -- Placeholder @LabelId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LabelId, whsLicensePlateLabel.LabelId);

        // -- Placeholder @WhsUserId@
        WHSUserId whsUserId = '';
        if (this.getSrsReportDataContract().parmRdlContract().parameterExists(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelReportParamWhsUserId))
        {
            whsUserId = this.getSrsReportDataContract().parmRdlContract().getValue(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelReportParamWhsUserId);
        }
        placeholderMng.replacePlaceholderInCurrentPrintDest(#WhsUserId, whsUserId ? whsUserId : whsLicensePlateLabel.UserId);

        // -- Placeholder @InventLocationId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventLocationId, whsLicensePlateLabel.InventLocationId);

        // -- Placeholder @AccountNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#AccountNum, whsLicensePlateLabel.AccountNum);

        // -- Placeholder @LicensePlateId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LicensePlateId, whsLicensePlateLabel.LicensePlateId);

        // -- Placeholder @WorkId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#WorkId, whsLicensePlateLabel.WorkId);

        // -- Placeholder @OrderNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderNum, whsLicensePlateLabel.OrderNum);

        // Fill the Print archive contract
        _reportRunContext.archiveContract().setDocument(whsLicensePlateLabel.LabelId, whsLicensePlateLabel.PrintedDate);
        switch (whsLicensePlateLabel.WorkTransType)
        {
            case WHSWorkTransType::Purch:
                _reportRunContext.archiveContract().setVendAccount(whsLicensePlateLabel.AccountNum);
                _reportRunContext.archiveContract().setPurchId(whsLicensePlateLabel.OrderNum);
                break;
            case WHSWorkTransType::Sales:
                _reportRunContext.archiveContract().setCustAccount(whsLicensePlateLabel.AccountNum);
                _reportRunContext.archiveContract().setSalesId(whsLicensePlateLabel.OrderNum);
                break;
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>