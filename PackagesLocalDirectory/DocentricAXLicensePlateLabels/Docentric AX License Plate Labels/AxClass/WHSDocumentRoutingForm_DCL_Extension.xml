<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDocumentRoutingForm_DCL_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class WHSDocumentRoutingForm_DCL_Extension is an extension of the form WHSDocumentRouting.
/// </summary>
[ExtensionOf(formStr(WHSDocumentRouting))]
final class WHSDocumentRoutingForm_DCL_Extension
{
    private LineNum lineNum_DCL;  // Used to temporary store a calculated line number when a new record is created in the DocWHSDocumentRoutingLine table

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        next init();

        // Check if the feature License Plate Labels is enabled
        if (DocParameters::find().EnableWhsLicensePlateLabels)
        {
            // Register the default Docentric license plate label SSRS report in the Docentric AX reports setup if it is not regitered yet
            this.registerDocWHSLicensePlateLabelReport_DCL();
        }

        // Set the form controls depending on whether the License Plate Labels feature is enabled or disabled
        DocWHSLicensePlateLabelHelper::applyFeatureToFormRun(this);

        FormTabPageControl tabPage = this.design().controlName(formControlStr(WHSDocumentRouting, TabPage));
        tabPage.fastTabExpanded(FastTabExpanded::Auto);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_OnInitialized_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocWHSDocumentRoutingLine data source is initialized.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void DocWHSDocumentRoutingLine_OnInitialized_DCL(FormDataSource _dataSource)
    {
        // Override the jumpRef event for the field TemplateId in the DocWHSDocumentRoutingLine data source
        _dataSource.object(fieldNum(DocWHSDocumentRoutingLine, TemplateId)).
            registerOverrideMethod(methodStr(FormDataObject, jumpRef), formMethodStr(WhsDocumentRouting, TemplateId_OnJumpRef_DCL), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_OnCreating_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before creating a new record in the DocWHSDocumentRoutingLine data source.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    /// <param name = "_e">Event args</param>
    public void DocWHSDocumentRoutingLine_OnCreating_DCL(FormDataSource _dataSource, FormDataSourceCreateEventArgs _e)
    {
        boolean append = _e == null ? false : _e.append();

        // Initialize calculated line number
        lineNum_DCL = 0;

        // Get the current record
        DocWHSDocumentRoutingLine curRecord = _dataSource.cursor();

        if (append)  // A new record is added after current record position
        {
            // Get the next record
            DocWHSDocumentRoutingLine nextRecord = curRecord.nextRecord();

            // Calculate a new line number
            if (nextRecord.LineNum != 0)
            {
                lineNum_DCL = (curRecord.LineNum + nextRecord.LineNum) / 2;
            }
            else
            {
                lineNum_DCL = curRecord.LineNum + 1;
                lineNum_DCL = lineNum_DCL == 0 ? 1 : lineNum_DCL;
            }
        }
        else // A new record is added before current record position
        {
            // Get the previous record
            DocWHSDocumentRoutingLine prevRecord = curRecord.prevRecord();

            // Calculate a new line number
            if (prevRecord.LineNum != 0)
            {
                lineNum_DCL = (curRecord.LineNum + prevRecord.LineNum) / 2;
                lineNum_DCL = lineNum_DCL == 0 ? prevRecord.LineNum / 2 : lineNum_DCL;
            }
            else
            {
                if (curRecord.LineNum != 0)
                {
                    lineNum_DCL = curRecord.LineNum - 1;
                    lineNum_DCL = lineNum_DCL == 0 ? -1 : lineNum_DCL;
                }
                else
                {
                    lineNum_DCL = curRecord.LineNum + 1;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_OnCreated_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after a new record in the DocWHSDocumentRoutingLine data source has been created.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void DocWHSDocumentRoutingLine_OnCreated_DCL(FormDataSource _dataSource)
    {
        // Get the current record
        DocWHSDocumentRoutingLine curRecord = _dataSource.cursor();
        curRecord.LineNum = lineNum_DCL;

        // Reset calculated line number
        lineNum_DCL = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_OnActivated_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a record in the DocWHSDocumentRoutingLine data source is active.
    /// </summary>
    /// <param name = "_dataSource">Form data source</param>
    public void DocWHSDocumentRoutingLine_OnActivated_DCL(FormDataSource _dataSource)
    {
        this.setMoveButtons_DCL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSDocumentRoutingLine_UserIds_DCL_OnLookup_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the WHSDocumentRoutingLine_UserIds_DCL is fired.
    /// </summary>
    /// <param name = "_userIds">An instance of the WHSDocumentRoutingLine_UserIds_DCL control</param>
    public void WHSDocumentRoutingLine_UserIds_DCL_OnLookup_DCL(FormStringControl _userIds)
    {
        // Calls the multi-select lookup control.
        // The form string control WHSDocumentRoutingLine_UserIds_DCL is used to store
        // the list of the selected RecIds from the multi-select lookup control. It is mandatory
        // for proper working of the multi-select lookup control.
        DocWHSDocumentRoutingLine::lookupUserIds(_userIds, WHSDocumentRoutingLine_UserRecIds_DCL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TemplateId_OnJumpRef_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the jumpRef method for the specified field.
    /// </summary>
    /// <param name = "_field">Form data object</param>
    public void TemplateId_OnJumpRef_DCL(FormDataObject _field)
    {
        Args args = new Args();
        args.record(DocReportTable::findReportTemplateId(DocWHSDocumentRoutingLine.TemplateId));
        args.caller(this);

        new MenuFunction(menuItemDisplayStr(DocReportTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_PrinterName_OnLookup_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the DocWHSDocumentRoutingLine_PrinterName is fired.
    /// </summary>
    /// <param name = "_printerName">An instance of the DocWHSDocumentRoutingLine_PrinterName control</param>
    public void DocWHSDocumentRoutingLine_PrinterName_OnLookup_DCL(FormStringControl _printerName)
    {
        WHSDocumentRoutingLine::lookupPrinters(_printerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_TemplateId_OnLookup_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the DocWHSDocumentRoutingLine_TemplateId is fired.
    /// </summary>
    /// <param name = "_templateId">An instance of the DocWHSDocumentRoutingLine_TemplateId control</param>
    public void DocWHSDocumentRoutingLine_TemplateId_OnLookup_DCL(FormStringControl _templateId)
    {
        DocWHSDocumentRoutingLine::lookupTemplateId(_templateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_LanguageId_OnLookup_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the DocWHSDocumentRoutingLine_LanguageId is fired.
    /// </summary>
    /// <param name = "_languageId">An instance of the DocWHSDocumentRoutingLine_LanguageId control</param>
    public void DocWHSDocumentRoutingLine_LanguageId_OnLookup_DCL(FormStringControl _languageId)
    {
        DocWHSDocumentRoutingLine::lookupLanguageId(_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocWHSDocumentRoutingLine_UserIds_OnLookup_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the lookup event for the DocWHSDocumentRoutingLine_UserIds is fired.
    /// </summary>
    /// <param name = "_userIds">An instance of the DocWHSDocumentRoutingLine_UserIds control</param>
    public void DocWHSDocumentRoutingLine_UserIds_OnLookup_DCL(FormStringControl _userIds)
    {
        // Calls the multi-select lookup control.
        // The form string control DocWHSDocumentRoutingLine_UserRecIds is used to store
        // the list of the selected RecIds from the multi-select lookup control. It is mandatory
        // for proper working of the multi-select lookup control.
        DocWHSDocumentRoutingLine::lookupUserIds(_userIds, DocWHSDocumentRoutingLine_UserRecIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EditQueryButtonDetails_DCL_OnClicked_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the EditQueryButtonDetails_DCL button is clicked.
    /// </summary>
    public void EditQueryButtonDetails_DCL_OnClicked_DCL()
    {
        SysQueryRun queryRunDetails = WHSFormHelper::initializeQueryRunForEditing(
                WHSDocumentRoutingLine.PackedQueryRun_DCL,
                strfmt('%1 | %2 | %3', WHSDocumentRoutingTable.SeqNum, WHSDocumentRoutingLine.PrinterName, WHSDocumentRoutingLine.LayoutId),
                WHSDocumentRoutingLine.defaultPackedQueryRun_DCL());
        
        if (queryRunDetails.prompt())
        {
            WHSDocumentRoutingLine.PackedQueryRun_DCL = queryRunDetails.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintersEditQueryButtonDetails_DCL_OnClicked_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocPrintersEditQueryButtonDetails_DCL button is clicked.
    /// </summary>
    public void DocPrintersEditQueryButtonDetails_DCL_OnClicked_DCL()
    {
        this.checkLicense_DCL();

        SysQueryRun queryRunDocPrinterDetails = WHSFormHelper::initializeQueryRunForEditing(
                DocWHSDocumentRoutingLine.PackedQueryRun,
                strfmt('%1 | %2 | %3', WHSDocumentRoutingTable.SeqNum, DocWHSDocumentRoutingLine.PrinterName, DocWHSDocumentRoutingLine.TemplateId),
                DocWHSDocumentRoutingLine.defaultPackedQueryRun());
        
        if (queryRunDocPrinterDetails.prompt())
        {
            DocWHSDocumentRoutingLine.PackedQueryRun = queryRunDocPrinterDetails.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintersNewButtonDetails_DCL_OnClicked_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the DocPrintersNewButtonDetails_DCL button is clicked.
    /// </summary>
    public void DocPrintersNewButtonDetails_DCL_OnClicked_DCL()
    {
        this.checkLicense_DCL();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintersMoveUpLineButtonDetails_DCL_OnClicked_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the current DocWHSDocumentRoutingLine record one line up in the grid.
    /// </summary>
    public void DocPrintersMoveUpLineButtonDetails_DCL_OnClicked_DCL()
    {
        this.checkLicense_DCL();

        FormDataSource dsDocWHSDocumentRoutingLine = this.dataSource(formDataSourceStr(WhsDocumentRouting, DocWHSDocumentRoutingLine));
        if (dsDocWHSDocumentRoutingLine != null)
        {
            DocWHSDocumentRoutingLine docWHSDocumentRoutingLine = dsDocWHSDocumentRoutingLine.cursor();
            docWHSDocumentRoutingLine.moveLine(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocPrintersMoveDownLineButtonDetails_DCL_OnClicked_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the current DocWHSDocumentRoutingLine record one line down in the grid.
    /// </summary>
    public void DocPrintersMoveDownLineButtonDetails_DCL_OnClicked_DCL()
    {
        this.checkLicense_DCL();

        FormDataSource dsDocWHSDocumentRoutingLine = this.dataSource(formDataSourceStr(WhsDocumentRouting, DocWHSDocumentRoutingLine));
        if (dsDocWHSDocumentRoutingLine != null)
        {
            DocWHSDocumentRoutingLine docWHSDocumentRoutingLine = dsDocWHSDocumentRoutingLine.cursor();
            docWHSDocumentRoutingLine.moveLine(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMoveButtons_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable/disable move buttons for the active datasource depending on the row selected.
    /// </summary>
    private void setMoveButtons_DCL()
    {
        DocPrintersMoveDownLineButtonDetails_DCL.enabled(DocWHSDocumentRoutingLine.RecId != 0 && DocWHSDocumentRoutingLine.nextRecord().RecId != 0);
        DocPrintersMoveUpLineButtonDetails_DCL.enabled(DocWHSDocumentRoutingLine.RecId != 0 && DocWHSDocumentRoutingLine.prevRecord().RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDocWHSLicensePlateLabelReport_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register the default Docentric license plate label SSRS report in the Docentric AX reports setup if it is not regitered yet.
    /// </summary>
    private void registerDocWHSLicensePlateLabelReport_DCL()
    {
        if (!DocReportTable::existsReportId(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelReport))
        {
            // Temporary disable infolog
            SysInfologLevel currentInfoLogLevel = infolog.infologLevel();
            infolog.setInfoLogLevel(SysInfologLevel::None);

            try
            {
                DocReportTable docReportTable;

                str srsReportNameAndDesign = DocConstantLicensePlateLabel::DocWHSLicensePlateLabelReport;
                str srsReportName = '';
                str srsReportDesign = '';
                int pointPosition = strScan(srsReportNameAndDesign, '.', 1, strLen(srsReportNameAndDesign));
                if (pointPosition > 0)
                {
                    srsReportName = subStr(srsReportNameAndDesign, 1, pointPosition - 1);
                    srsReportDesign = subStr(srsReportNameAndDesign, pointPosition + 1, strLen(srsReportNameAndDesign));
                }

                ttsbegin;
                docReportTable.clear();
                docReportTable.ReportId = srsReportNameAndDesign;
                docReportTable.SRSReportName = srsReportNameAndDesign;
                docReportTable.SRSOnlyReportName = srsReportName;
                docReportTable.SRSReportDesignName = srsReportDesign;
                docReportTable.IsActiveSRS = true;
                docReportTable.doInsert();
                ttscommit;

                Set reportSet = new Set(Types::String);
                reportSet.add(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelReport);
                DocReportingSetupHelper::reloadSystemTemplatesForReportsV2(reportSet, false, true);
            }
            catch
            {
                exceptionTextFallThrough();
            }
            finally
            {
                // Restore infolog 
                infolog.setInfoLogLevel(currentInfoLogLevel);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLicense_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the license for Docentric Document routing setup.
    /// </summary>
    private void checkLicense_DCL()
    {
        // If there is no valid licence, user will be warned, but we will still let him
        // to use Docentric Document routing setup. Later in the pipeline we will throw the exception
        // if the printing or test of document rounting setup is executed, but the license is invalid.
        DocLicenseMng::checkLicenseUI(DocConstant::FeatureWhsLicensePlateLabels, this.name());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>