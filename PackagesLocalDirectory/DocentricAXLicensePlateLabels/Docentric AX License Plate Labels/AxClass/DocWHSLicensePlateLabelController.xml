<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSLicensePlateLabelController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSLicensePlateLabelController class is a controller class for the WHS license plate label SSRS report.
/// </summary>
public class DocWHSLicensePlateLabelController extends SrsReportRunController
{
    private DocWHSPrinterName printerName;
    private DocReportTemplateId templateId; 
    private WHSLabelId labelId;
    private WHSUserId whsUserId;
    private SRSPrintMediumType printMediumType;
    private DocWHSLabelLanguageId whsLabelLanguageId;
    private DocPrinterNumberOfCopies numberOfCopies;
    private boolean isReportGenerated = false;
    
    #define.CurrentkVersion(1)
    #localmacro.CurrentList
        printerName,
        templateId,
        labelId,
        whsUserId,
        printMediumType,
        whsLabelLanguageId,
        numberOfCopies
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPrinterName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the printer name.
    /// </summary>
    /// <param name = "_printerName">Printer name</param>
    /// <returns>Printer name</returns>
    public DocWHSPrinterName parmPrinterName(DocWHSPrinterName _printerName = printerName)
    {
        printerName = _printerName;
        return printerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Docentric report template Id.
    /// </summary>
    /// <param name = "_templateId">Docentric report template Id</param>
    /// <returns>Docentric report template Id</returns>
    public DocReportTemplateId parmTemplateId(DocReportTemplateId _templateId = templateId)
    {
        templateId = _templateId;
        return templateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the license plate label Id.
    /// </summary>
    /// <param name = "_labelId">License plate label Id</param>
    /// <returns>License plate label Id</returns>
    public WHSLabelId parmLabelId(WHSLabelId _labelId = labelId)
    {
        labelId = _labelId;
        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWhsUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the mobile device user Id.
    /// </summary>
    /// <param name = "_whsUserId">Mobile device user Id</param>
    /// <returns>License plate label Id</returns>
    public WHSUserId parmWhsUserId(WHSUserId _whsUserId = whsUserId)
    {
        whsUserId = _whsUserId;
        return whsUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMediumType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the print medium type.
    /// </summary>
    /// <param name = "_printMediumType">Print medium type</param>
    /// <returns>Print medium type</returns>
    public SRSPrintMediumType parmPrintMediumType(SRSPrintMediumType _printMediumType = printMediumType)
    {
        printMediumType = _printMediumType;
        return printMediumType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWhsLabelLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the WHS license plate label language Id.
    /// </summary>
    /// <param name = "_whsLabelLanguageId">WHS license plate label language Id</param>
    /// <returns>WHS license plate label language Id</returns>
    public DocWHSLabelLanguageId parmWhsLabelLanguageId(DocWHSLabelLanguageId _whsLabelLanguageId = whsLabelLanguageId)
    {
        whsLabelLanguageId = _whsLabelLanguageId;
        return whsLabelLanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfCopies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the number of copies when sending license plate label to the printer.
    /// </summary>
    /// <param name = "_numberOfCopies">Number of copies</param>
    /// <returns>Number of copies</returns>
    public DocPrinterNumberOfCopies parmNumberOfCopies(DocPrinterNumberOfCopies _numberOfCopies = numberOfCopies)
    {
        numberOfCopies = _numberOfCopies;
        return numberOfCopies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportGenerated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the flag indicating whether the report was generated successfully.
    /// </summary>
    /// <returns>True if the report was generated successfully; otherwise false</returns>
    public boolean isReportGenerated()
    {
        return isReportGenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the data contract before the dialog is shown to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        Query query =  this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        query.dataSourceTable(tableNum(WHSLicensePlateLabel)).addRange(fieldNum(WHSLicensePlateLabel, LabelId)).value(queryValue(labelId));

        if (this.parmReportContract().parmRdlContract().parameterExists(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelReportParamWhsUserId))
        {
            this.parmReportContract().parmRdlContract().setValue(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelReportParamWhsUserId, whsUserId);
        }

        // Resolve WHS license plate label languange
        LanguageId languageId = this.resolveWhsLabelLanguage();
        this.parmReportContract().parmRdlContract().parmLabelLanguageId(languageId);
        this.parmReportContract().parmRdlContract().parmLanguageId(languageId);

        switch (printMediumType)
        {
            case SRSPrintMediumType::Screen_DC:
                break;

            case SRSPrintMediumType::GenerateDataSource_DC:
                this.parmReportContract().parmPrintSettings().parmGenerateDSPrintDestSettings_DC().parmLanguageId(languageId);
                break;

            case SRSPrintMediumType::Printer_DC:
                if (!printerName)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAXLicensePlateLabels:PrinterNameNotDefined", printMediumType));
                }
                if (!numberOfCopies)
                {
                    DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAXLicensePlateLabels:PrinterNumberOfCopiesNotSet", printMediumType));
                }
                this.parmReportContract().parmPrintSettings().parmPrinterPrintDestSettings_DC(new DocPrintDestSettingsPrinter()).parmSelectedPrinterName(printerName);
                this.parmReportContract().parmPrintSettings().parmPrinterPrintDestSettings_DC().parmNumberOfCopies(numberOfCopies);
                break;

            default:
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAXLicensePlateLabels:PrintDestinationNotSupported", printMediumType));
        }

        this.parmReportContract().parmPrintSettings().printMediumType(printMediumType);
        this.parmReportContract().parmPrintSettings().parmSrsPrintReportSettings_DC().parmTemplateId(templateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveWhsLabelLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the specified WHS license plate language Id, which can be a language placeholder, a fixed system language or an empty value.
    /// </summary>
    /// <returns>Resolved label language Id</returns>
    /// <remarks>An empty value is always resolved to the current company language.</remarks>
    private LanguageId resolveWhsLabelLanguage()
    {
        LanguageId languageId = '';

        // Get the WHSLicensePlateLabel record for provided license plate label Id
        WHSLicensePlateLabel whsLicensePlateLabel = WHSLicensePlateLabel::find(labelId);

        // Resolve the WHS license plate label language Id
        switch (whsLabelLanguageId)
        {
            case '':
            case DocConstantLicensePlateLabel::CompanyLanguagePlaceholder:
                languageId = CompanyInfo::languageId();
                break;

            case DocConstantLicensePlateLabel::UserLanguagePlaceholder:
                languageId = currentUserLanguage();
                break;

            case DocConstantLicensePlateLabel::OrderLanguagePlaceholder:
                switch (whsLicensePlateLabel.WorkTransType)
                {
                    case WHSWorkTransType::Purch:
                        languageId = PurchTable::find(whsLicensePlateLabel.OrderNum).LanguageId;
                        break;

                    case WHSWorkTransType::Sales:
                        languageId = SalesTable::find(whsLicensePlateLabel.OrderNum).LanguageId;
                        break;
                }
                break;

            case DocConstantLicensePlateLabel::AccountLanguagePlaceholder:
                switch (whsLicensePlateLabel.WorkTransType)
                {
                    case WHSWorkTransType::Purch:
                        languageId = VendTable::find(whsLicensePlateLabel.AccountNum).languageId();
                        break;

                    case WHSWorkTransType::Sales:
                        languageId = CustTable::find(whsLicensePlateLabel.AccountNum).languageId();
                        break;
                }
                break;

            default:
                // Check if provided license plate label language is a system language
                if (LanguageTable::exist(whsLabelLanguageId))
                {
                    languageId = whsLabelLanguageId;
                }
                else
                {
                    EventHandlerResult result = null;
                    try
                    {
                        // Enable a subscriber to use a custom resolving algorithem if the WHS license plate label language Id is not resolved
                        result = this.resolveWhsLabelLanguageCustom(whsLabelLanguageId, whsLicensePlateLabel);
                    }
                    catch
                    {
                        DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LabelLanguageNotResolvedError", whsLabelLanguageId), true, funcName(), true);
                    }

                    if (result && result.hasResult())
                    {
                        languageId = result.result();
                        if (languageId && !LanguageTable::exist(languageId))
                        {
                            DocGlobalHelper::handleError(strFmt("@DocentricAXLicensePlateLabels:LabelLanguageResolvedError", whsLabelLanguageId, languageId), true, funcName(), true);
                        }
                    }
                }
        }

        // Fallback to company language if the WHS license plate label language is not resolved
        if (!languageId)
        {
            languageId = CompanyInfo::languageId();
        }

        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveWhsLabelLanguageDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for custom resolving algorithem for specified WHS license plate label language Id.
    /// </summary>
    /// <param name = "_whsLabelLanguageId">WHS license plate label language Id</param>
    /// <param name = "_whsLicensePlateLabel">The WHSLicensePlateLabel record</param>
    /// <param name = "_result">An EventHandlerResult instance, where subscribers can provide the new resolved LanguageId for the license plate label.</param>
    delegate void resolveWhsLabelLanguageDelegate(DocWHSLabelLanguageId _whsLabelLanguageId, WHSLicensePlateLabel _whsLicensePlateLabel, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveWhsLabelLanguageCustom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publisher for custom resolving algorithem for specified WHS license plate label language Id.
    /// </summary>
    /// <param name = "_whsLabelLanguageId">WHS license plate label language Id</param>
    /// <param name = "_whsLicensePlateLabel">The WHSLicensePlateLabel record</param>
    /// <returns>An EventHandlerResult instance, where subscribers can provide the new resolved LanguageId for the license plate label.</returns>
    private EventHandlerResult resolveWhsLabelLanguageCustom(DocWHSLabelLanguageId _whsLabelLanguageId, WHSLicensePlateLabel _whsLicensePlateLabel)
    {
        EventHandlerResult result = new EventHandlerResult();

        try
        {
            this.resolveWhsLabelLanguageDelegate(_whsLabelLanguageId, _whsLicensePlateLabel, result);
            if (!result.hasResult())
            {
                DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodResultError", delegateStr(DocWHSLicensePlateLabelController, resolveWhsLabelLanguageDelegate)));
            }
        }
        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocWHSLicensePlateLabelController, resolveWhsLabelLanguageDelegate)));
        }
        catch
        {
            DocGlobalHelper::handleException(funcName(), strFmt("@DocentricAX4:DocDelegateMethodError", delegateStr(DocWHSLicensePlateLabelController, resolveWhsLabelLanguageDelegate)));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the WHS license plate label to the specified print destination by using the specified Docentric template. 
    /// </summary>
    /// <param name = "_printerName">Printer name</param>
    /// <param name = "_templateId">Docentric report template Id</param>
    /// <param name = "_labelId">License plate label Id</param>
    /// <param name = "_whsUserId">Mobile device user Id</param>
    /// <param name = "_printMediumType">Print medium type</param>
    /// <param name = "_whsLabelLanguageId">WHS license plate label language Id</param>
    /// <param name = "_numberOfCopies">Number of copies</param>
    public static void printLabel(
        DocWHSPrinterName _printerName,
        DocReportTemplateId _templateId,
        WHSLabelId _labelId,
        WHSUserId _whsUserId,
        SRSPrintMediumType _printMediumType = SRSPrintMediumType::Printer_DC,
        DocWHSLabelLanguageId _whsLabelLanguageId = DocConstantLicensePlateLabel::CompanyLanguagePlaceholder,
        DocPrinterNumberOfCopies _numberOfCopies = 1)
    {
        DocWHSLicensePlateLabelController controller = new DocWHSLicensePlateLabelController();

        // Register event handler for the RenderingComplete event to get the report rendering result
        controller.renderingCompleted += eventhandler(controller.renderingComplete);

        controller.parmReportName(DocReportTable::findReportTemplateId(_templateId).ReportId);
        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmDialogCaption("@WAX915");
        controller.parmShowDialog(false);
        controller.parmLoadFromSysLastValue(false);

        controller.parmPrinterName(_printerName);
        controller.parmTemplateId(_templateId);
        controller.parmLabelId(_labelId);
        controller.parmWhsUserId(_whsUserId);
        controller.parmPrintMediumType(_printMediumType);
        controller.parmWhsLabelLanguageId(_whsLabelLanguageId);
        controller.parmNumberOfCopies(_numberOfCopies);

        controller.startOperation();

        // Unregister the event handler for the RenderingComplete event
        controller.renderingCompleted -= eventhandler(controller.renderingComplete);

        // Throw an exception if the report rendering was not successful
        if (!controller.isReportGenerated())
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Captures the result of the report rendering and saves it on the object.
    /// </summary>
    /// <param name="_sender">The report controller in which the execution happened</param>
    /// <param name="_eventArgs">The arguments of the event that represents that the rendering has been completed</param>
    private void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        SRSReportExecutionInfo srsReportExecutionInfo = _eventArgs.parmReportExecutionInfo();

        if (srsReportExecutionInfo != null && srsReportExecutionInfo.parmIsSuccessful())
        {
            isReportGenerated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the Docentric template for license plate label report.
    /// </summary>
    /// <returns>
    /// A container containing two items. The first item is the SrsReportPreRunState
    /// enumeration. The second item is the message to show to the user.
    /// </returns>
    protected container preRunValidate()
    {
        container validateResult = super();
    
        if (validateResult != conNull() && conPeek(validateResult, 1) != SrsReportPreRunState::Error && !DocWHSLicensePlateLabelHelper::validateTemplate(templateId))
        {
            validateResult = [SrsReportPreRunState::Error, strFmt("@DocentricAX:ExecutingReportErrorsEndUser", reportDialogCaption)];
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the class variables into the container.
    /// </summary>
    /// <returns>Packed container with class variables</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the class variables and re-instantiates them.
    /// </summary>
    /// <param name = "_packedClass">Packed container with class variables</param>
    /// <returns>True/False</returns>
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        container packedSuper;
        boolean result;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;
                result = super(packedSuper);
                break;

            default:
                result = false;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>