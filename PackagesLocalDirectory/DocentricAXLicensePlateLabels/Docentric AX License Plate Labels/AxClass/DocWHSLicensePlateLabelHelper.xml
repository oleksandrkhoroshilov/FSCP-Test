<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSLicensePlateLabelHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSLicensePlateLabelHelper class contains helper methods to manipulate the WHS license plate labels.
/// </summary>
public class DocWHSLicensePlateLabelHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified Docentric template for the license plate label report.
    /// </summary>
    /// <param name = "_templateId">Docentric template Id</param>
    /// <param name = "_printValidationErrors">Flag indicating whether to print the possible validation errors or not</param>
    /// <returns>True if the template is valid; otherwise false</returns>
    public static boolean validateTemplate(DocReportTemplateId _templateId, boolean _printValidationErrors = true)
    {
        // Check if the selected report template is based on the DocWHSLicensePlateLabelDSPBase DSP class
        // or the DSP class that extends the DocWHSLicensePlateLabelDSPBase DSP class
        DocReportTable docReportTable = DocReportTable::findReportTemplateId(_templateId);

        // Check if the DSP class is based on the DocWHSLicensePlateLabelDSPBase DSP class
        boolean isValidTemplate = (docReportTable.DataSourceProviderClassName == DocConstantLicensePlateLabel::DocWHSLicensePlateLabelDSPBaseClass);

        SysDictClass dictClass = new SysDictClass(className2Id(DocConstantLicensePlateLabel::DocWHSLicensePlateLabelDSPBaseClass));
        List extendedClassList = dictClass.extendedBy(true);
        if (extendedClassList.elements())
        {
            ListEnumerator extendedClassListEnum = extendedClassList.getEnumerator();
            while (extendedClassListEnum.moveNext())
            {
                ClassId childClassId = extendedClassListEnum.current();
                // Check if the DSP class extends the DocWHSLicensePlateLabelDSPBase DSP class
                if (childClassId == className2Id(docReportTable.DataSourceProviderClassName))
                {
                    isValidTemplate = true;
                    break;
                }
            }
        }

        if (!isValidTemplate && _printValidationErrors)
        {
            DocGlobalHelper::handleWarning(strFmt("@DocentricAXLicensePlateLabels:TemplateIdForReportNotValid", _templateId, docReportTable.ReportId, DocConstantLicensePlateLabel::DocWHSLicensePlateLabelDSPBaseClass));
        }

        return isValidTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFeatureToFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the feature to the selected form.
    /// Shows/hides the form controls and form data source fields belonging to the selected feature
    /// depending on whether the feature is enabled or disabled.
    /// </summary>
    /// <param name = "_formRun">An instance of the FormRun object</param>
    public static void applyFeatureToFormRun(FormRun _formRun)
    {
        boolean isFeatureEnabled = false;

        container controls = conNull();  // form controls [controlName]
        container fields = conNull();  // form data source fields [fieldId, formDataSourceName]

        // Form: WHSLicensePlateLabel (License plate labels)
        if (_formRun.name() == formStr(WHSLicensePlateLabel))
        {
            // Feature: License Plate Labels
            isFeatureEnabled = DocParameters::find().EnableWhsLicensePlateLabels;

            controls = [
                    formControlStr(WHSDocumentRouting, TestSetupButtonGroup_DCL),
                    formControlStr(WHSDocumentRouting, PrintLabelButtonGroup_DCL)
                ];
        }
        // Form: WHSDocumentRouting (Document routing)
        else if (_formRun.name() == formStr(WHSDocumentRouting))
        {
            // Feature: License Plate Labels
            isFeatureEnabled = DocParameters::find().EnableWhsLicensePlateLabels;

            controls = [
                    formControlStr(WHSDocumentRouting, TestSetupButtonGroup_DCL),
                    formControlStr(WHSDocumentRouting, PrintLabelButtonGroup_DCL),
                    formControlStr(WHSDocumentRouting, DocPrintersTabPage_DCL),
                    formControlStr(WHSDocumentRouting, ActionsGroupDetails_DCL),
                    formControlStr(WHSDocumentRouting, WHSDocumentRoutingTable_queryCriteria_DCL),
                    formControlStr(WHSDocumentRouting, WHSDocumentRoutingLine_queryCriteriaConfigured_DCL),
                    formControlStr(WHSDocumentRouting, WHSDocumentRoutingLine_queryCriteria_DCL)
                ];

            fields = [
                    fieldNum(WHSDocumentRoutingLine, UserIds_DCL), formDataSourceStr(WHSDocumentRouting, WHSDocumentRoutingLine),
                    fieldNum(WHSDocumentRoutingLine, RunQuery_DCL), formDataSourceStr(WHSDocumentRouting, WHSDocumentRoutingLine)
                ];
        }

        // Set the visibility for all marked form controls.
        for (int i = 1; i <= conLen(controls); i++)
        {
            str controlName = conPeek(controls, i);
            FormControl formControl = _formRun.control(_formRun.controlId(controlName));
            if (formControl)
            {
                formControl.visible(isFeatureEnabled);
            }
        }

        // Set the visibility for all marked form data source fields.
        for (int i = 1; i <= conLen(fields); i += 2)
        {
            int fieldId = conPeek(fields, i);
            str formDatasourceName = conPeek(fields, i+1);
            FormDataObject formDataObject = _formRun.dataSource(formDatasourceName).object(fieldId);
            if (formDataObject)
            {
                formDataObject.visible(isFeatureEnabled);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>