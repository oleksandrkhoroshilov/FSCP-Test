<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsDocumentRouting_DCL_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class WhsDocumentRouting_DCL_Extension is an extension of the class WhsDocumentRouting.
/// </summary>
[ExtensionOf(classStr(WhsDocumentRouting))]
final class WhsDocumentRouting_DCL_Extension
{
    private WHSLicensePlateLabel whsLicensePlateLabel_DCL;
    private RefRecId whsDocumentRoutingTableRecId_DCL;
    private boolean printZplLayout_DCL = true;
    private boolean printDocentricTemplate_DCL = true;
    private boolean isFeatureWhsLicensePlateLabelEnabled_DCL = DocParameters::find().EnableWhsLicensePlateLabels;
    private boolean isLicenseChecked_DCL = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPrintZplLayout_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether a ZPL layout can be used when printing a label.
    /// </summary>
    /// <param name = "_printZplLayout_DCL">Can print label using a ZPL layout</param>
    /// <returns>True if a ZPL layout can be used when printing a label; otherwise false</returns>
    public boolean parmPrintZplLayout_DCL(boolean _printZplLayout_DCL = printZplLayout_DCL)
    {
        printZplLayout_DCL = _printZplLayout_DCL;
        return printZplLayout_DCL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDocentricTemplate_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the flag indicating whether a Docentric template can be used when printing a label.
    /// </summary>
    /// <param name = "_printDocentricTemplate_DCL">Can print label using a Docentric template</param>
    /// <returns>True if a Docentric template can be used when printing a label; otherwise false</returns>
    public boolean parmPrintDocentricTemplate_DCL(boolean _printDocentricTemplate_DCL = printDocentricTemplate_DCL)
    {
        printDocentricTemplate_DCL = _printDocentricTemplate_DCL;
        return printDocentricTemplate_DCL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print the provided label to all relevant printers.
    /// </summary>
    /// <param name = "_workTransType">Work transaction type context.</param>
    /// <param name = "_label">The label being printed represented as a <c>WHSLicensePlateLabel</c> record.</param>
    public void printDocument(WHSWorkTransType _workTransType, WHSLicensePlateLabel _label)
    {
        RefRecId routeRecId = this.findRoute(_workTransType, _label);
                
        whsLicensePlateLabel_DCL = _label;
        whsDocumentRoutingTableRecId_DCL = routeRecId;

        next printDocument(_workTransType, _label);

        // Check if the feature License Plate Labels is enabled
        if (!isFeatureWhsLicensePlateLabelEnabled_DCL || !printDocentricTemplate_DCL)
        {
            return;
        }

        DocWHSDocumentRoutingLine routingLine;

        while select routingLine
            order by routingLine.LineNum asc
            where routingLine.DocumentRoutingTable == routeRecId
        {
            /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/
            /*
                In case that you are using Docentric AX Free Edition, changing these parts of the source code related to the licensing
                is STRICTLY FORBIDDEN and DOES NOT COMPLY with Docentric AX Free Edition License, which you accepted by installing
                the Docentric AX Free Edition product.
                You must keep intact all parts of the source code related to the licensing of the full product version.
                Read more: https://ax.docentric.com/free-edition-license/
            */
            /*********************************   DOCENTRIC AX FREE EDITION LICENSE NOTICE   *********************************/

            // If the License plate labels are used, check the license. This feature cannot be used with Free Edition!
            // This call will throw an exception if the license is not found or if the license is invalid, expired or insufficient.
            if (!isLicenseChecked_DCL)
            {
                DocLicenseMng::checkLicense(DocConstant::FeatureWhsLicensePlateLabels, "@DocentricAXLicensePlateLabels:LicensePlateLabelPrintPrintFailed");
                isLicenseChecked_DCL = true;
            }
            
            // Check if the label can be printed
            if (this.mustPrintLabel_DCL(routingLine))
            {
                // Print the Docentric license plate label
                DocWHSLicensePlateLabelController::printLabel(routingLine.PrinterName, routingLine.TemplateId, _label.LabelId, userId, SRSPrintMediumType::Printer_DC, routingLine.LanguageId, routingLine.NumberOfCopies);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the label must be printed.
    /// </summary>
    /// <param name = "_routingLine">An instance of the WHSDocumentRoutingLine record.</param>
    /// <returns>True if label should be printed; otherwise, false.</returns>
    protected boolean mustPrintLabel(WHSDocumentRoutingLine _routingLine)
    {
        boolean result = next mustPrintLabel(_routingLine) && printZplLayout_DCL;

        // Check if the feature License Plate Labels is enabled
        if (!isFeatureWhsLicensePlateLabelEnabled_DCL)
        {
            return result;
        }

        if (result && whsLicensePlateLabel_DCL)
        {
            // Check if the mobile device user can print the label
            if (!(!_routingLine.UserIds_DCL 
                    || (userId && DocGlobalHelper::containsTags(userId, _routingLine.UserIds_DCL, false)) 
                    || (!userId && DocGlobalHelper::containsTags(whsLicensePlateLabel_DCL.UserId, _routingLine.UserIds_DCL, false))))
            {
                result = false;
            }

            // Check if the query can be run
            if (result && _routingLine.RunQuery_DCL)
            {
                QueryRun qr = new QueryRun(_routingLine.PackedQueryRun_DCL);
                SysQuery::findOrCreateRange(qr.query().dataSourceTable(tableNum(WHSLicensePlateLabel)), fieldNum(WHSLicensePlateLabel, LabelId))
                    .value(whsLicensePlateLabel_DCL.LabelId);

                // If the query returns a record, the label can be printed
                if (!qr.next())
                {
                    result = false;
                }
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintLabel_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the label must be printed.
    /// </summary>
    /// <param name = "_routingLine">An instance of the DocWHSDocumentRoutingLine record.</param>
    /// <returns>True if label should be printed; otherwise, false.</returns>
    public boolean mustPrintLabel_DCL(DocWHSDocumentRoutingLine _routingLine)
    {
        boolean result = printDocentricTemplate_DCL;

        if (result && whsLicensePlateLabel_DCL)
        {
            // Check if the mobile device user can print the label
            if (!(!_routingLine.UserIds 
                    || (userId && DocGlobalHelper::containsTags(userId, _routingLine.UserIds, false)) 
                    || (!userId && DocGlobalHelper::containsTags(whsLicensePlateLabel_DCL.UserId, _routingLine.UserIds, false))))
            {
                result = false;
            }

            // Check if the query can be run
            if (result && _routingLine.RunQuery)
            {
                QueryRun qr = new QueryRun(_routingLine.PackedQueryRun);
                SysQuery::findOrCreateRange(qr.query().dataSourceTable(tableNum(WHSLicensePlateLabel)), fieldNum(WHSLicensePlateLabel, LabelId))
                    .value(whsLicensePlateLabel_DCL.LabelId);

                // If the query returns a record, the label can be printed
                if (!qr.next())
                {
                    result = false;
                }
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentRoutingSetupForLabel_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document routing setup for the provided license plate label.
    /// </summary>
    /// <param name = "_labelId">License plate label Id</param>
    /// <returns>The document routing setup as container [WHSDocumentRoutingTable.RecId, packed set of WHSDocumentRoutingLine and DocWHSDocumentRoutingLine records]</returns>
    public container getDocumentRoutingSetupForLabel_DCL(WHSLabelId _labelId)
    {
        Set routingLineSet = new Set(Types::Record);

        whsLicensePlateLabel_DCL = WHSLicensePlateLabel::find(_labelId);
        
        RefRecId routeRecId = this.findRoute(whsLicensePlateLabel_DCL.WorkTransType, whsLicensePlateLabel_DCL);
        if (!routeRecId)
        {
            return conNull();
        }

        // Get the document routing setup for ZPL layouts
        WHSDocumentRoutingLine routingLine;
        while select routingLine
            where routingLine.DocumentRoutingTable == routeRecId
        {
            // Check if the label can be printed
            if (this.mustPrintLabel(routingLine))
            {
                routingLineSet.add(routingLine);
            }
        }

        // Get the document routing setup for Docentric templates
        DocWHSDocumentRoutingLine docRoutingLine;
        while select docRoutingLine
            order by docRoutingLine.LineNum asc
            where docRoutingLine.DocumentRoutingTable == routeRecId
        {
            // Check if the label can be printed
            if (this.mustPrintLabel_DCL(docRoutingLine))
            {
                routingLineSet.add(docRoutingLine);
            }
        }

        return [routeRecId, routingLineSet.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelToPrinterUsingSetup_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the specified label to all printers using relevant Document routing setup.
    /// </summary>
    /// <param name = "_labelId">License plate label Id</param>
    /// <param name = "_printZplLayouts">Flag indicating whether to use ZPL layouts</param>
    /// <param name = "_printDocentricTemplates">Flag indicating wheter to use Docentric templates</param>
    /// <returns>The document route record id used by printing the label.</returns>
    public RefRecId printLabelToPrinterUsingSetup_DCL(
        WHSLabelId _labelId,
        boolean _printZplLayouts,
        boolean _printDocentricTemplates)
    {
        if (!_labelId)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParameterNotSet", identifierStr(_labelId)), true, funcName(), true);
        }

        WHSLicensePlateLabel label = WHSLicensePlateLabel::find(_labelId);
        printZplLayout_DCL = _printZplLayouts;
        printDocentricTemplate_DCL = _printDocentricTemplates;
        this.printDocument(label.WorkTransType, label);

        return whsDocumentRoutingTableRecId_DCL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelToPrinterUsingZplLayout_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the specified label to specified printer using provided ZPL layout.
    /// </summary>
    /// <param name = "_labelId">License plate label Id</param>
    /// <param name = "_layoutId">ZPL layouit Id</param>
    /// <param name = "_printerName">Printer name</param>
    public void printLabelToPrinterUsingZplLayout_DCL(
        WHSLabelId _labelId,
        WHSLayoutId _layoutId,
        DocWHSPrinterName _printerName)
    {
        if (!_labelId || !_layoutId || !_printerName)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2, %3', identifierStr(_labelId), identifierStr(_layoutId), identifierStr(_printerName))), true, funcName(), true);
        }

        WHSDocumentRoutingLine routingLine;

        WHSLicensePlateLabel label = WHSLicensePlateLabel::find(_labelId);
        this.instantiateTranslatorWithRoutingLine(routingLine);
        str labelStr = this.translate(WHSDocumentRoutingLayout::find(_layoutId).zpl, label);
        WhsDocumentRouting::printLabelToPrinter(_printerName, labelStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelToScreenUsingDocentricTemplate_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the specified label to screen using provided Docentric template.
    /// </summary>
    /// <param name = "_labelId">License plate label Id</param>
    /// <param name = "_templateId">Template Id</param>
    /// <param name = "_whsLabelLanguageId">WHS license plate label language Id</param>
    public void printLabelToScreenUsingDocentricTemplate_DCL(
        WHSLabelId _labelId,
        DocReportTemplateId _templateId,
        DocWHSLabelLanguageId _whsLabelLanguageId)
    {
        if (!_labelId || !_templateId)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_labelId), identifierStr(_templateId))), true, funcName(), true);
        }

        // Print label to screen
        DocWHSLicensePlateLabelController::printLabel('', _templateId, _labelId, userId, SRSPrintMediumType::Screen_DC, _whsLabelLanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelToPrinterUsingDocentricTemplate_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the specified label to specified printer using provided Docentric template.
    /// </summary>
    /// <param name = "_labelId">License plate label Id</param>
    /// <param name = "_templateId">Template Id</param>
    /// <param name = "_whsLabelLanguageId">WHS license plate label language Id</param>
    /// <param name = "_printerName">Printer name</param>
    /// <param name = "_numberOfCopies">Number of copies</param>
    public void printLabelToPrinterUsingDocentricTemplate_DCL(
        WHSLabelId _labelId,
        DocReportTemplateId _templateId,
        DocWHSLabelLanguageId _whsLabelLanguageId,
        DocWHSPrinterName _printerName,
        DocPrinterNumberOfCopies _numberOfCopies)
    {
        if (!_labelId || !_templateId || !_printerName || !_numberOfCopies)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2, %3, %4', identifierStr(_labelId), identifierStr(_templateId), identifierStr(_printerName), identifierStr(_numberOfCopies))), true, funcName(), true);
        }

        // Print label to printer
        DocWHSLicensePlateLabelController::printLabel(_printerName, _templateId, _labelId, userId, SRSPrintMediumType::Printer_DC, _whsLabelLanguageId, _numberOfCopies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelAsGeneratedDdspUsingDocentricTemplate_DCL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the specified label as generated DDSP file using provided Docentric template.
    /// </summary>
    /// <param name = "_labelId">License plate label Id</param>
    /// <param name = "_templateId">Template Id</param>
    /// <param name = "_whsLabelLanguageId">WHS license plate label language Id</param>
    public void printLabelAsGeneratedDdspUsingDocentricTemplate_DCL(
        WHSLabelId _labelId,
        DocReportTemplateId _templateId,
        DocWHSLabelLanguageId _whsLabelLanguageId)
    {
        if (!_labelId || !_templateId)
        {
            DocGlobalHelper::handleError(strFmt("@DocentricAX4:ParametersNotSet", strFmt('%1, %2', identifierStr(_labelId), identifierStr(_templateId))), true, funcName(), true);
        }

        // Generate DDSP file for label
        DocWHSLicensePlateLabelController::printLabel('', _templateId, _labelId, userId, SRSPrintMediumType::GenerateDataSource_DC, _whsLabelLanguageId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>