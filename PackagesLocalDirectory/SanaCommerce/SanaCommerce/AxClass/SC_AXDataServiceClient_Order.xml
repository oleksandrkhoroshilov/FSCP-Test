<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SC_AXDataServiceClient_Order</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SC_AXDataServiceClient_Order extends SC_AXDataServiceClient
{
    XmlNode                 notInStockLines, decreasedQuantityLines, nonOrderableLines;
    XmlNode                 salesLinesNode, salesLineNode, matchingAgreementsNode;
    XmlNodeList             commentLines, pickupLocationList;
    smmBusRelTable          smmBusRelTable;
    SalesQuotationTable     salesQuotationTable;
    SalesQuotationLine      salesQuotationLine, tmpSalesQuotationLine;
    SalesTable              salesTable;
    SalesLine               salesLine, tmpSalesLine;
    SysGuidString           lineId, agreementLineNo;
    Qty                     lineQty, lineQuantityPrecision;
    String50                lineType;
    SC_DiscountType         lineDiscountType;
    ItemId                  lineProductId;
    InventDimId             lineInventDimId, lineBOMconfigId;
    EcoResProductName       lineTitle;
    Price                   linePrice;
    Amount                  lineDiscountValue, totalPaymentShipmentCost;
    SalesTotals             salesTotals;
    SalesQuotationTotals    salesQuotationTotals;
    Amount                  subTotal, totalExclTax, totalInclTax, totalTaxAmount, totalRoundOff, totalInvoiceDisc, promotionCalculated, totalBalance, totalCashDisc;        
    container               orderTypesCon, ordersCon, updateLineCon, lineBOMConfigs; 
    Integer                 totalOrders;
    TransDate               requestedDeliveryDate, orderDueDate;
    String50                shippingMethodName, paymentMethodName, paymentTransactionId, sanaOrderId, externalPaymentMethodType;
    String30                orderAuthorizationStatus, paymentMethodType;
    ReturnCode              returnCode;
    SalesReturnItemNum      returnOrderId;
    boolean                 promotionCouponUsed, externalCouponUsed, referenceNoExists, commentLinesExists, altItemFound, skipSalesAgreement, allowPostPrepayments;
    boolean                 isBasketCalculation;
    ErrorMsg                postErrorMsg;   
    SC_Code                 configurationId;
    HcmWorker               hcmWorker;
    DiscCode                sanaCouponFound;
    SC_SalesTable           salesTableExt;
    SC_SalesQuotationTable  salesQuotationTableExt;  
    SC_GiftCardTable        giftCardTable;
    Filename                filePathAttachment, fileNameAttachment, fileTypeAttachment;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHistoryTaxes</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addHistoryTaxes(CustInvoiceJour _custInvoiceJour)
    {
        XmlNode     taxlines, taxline;
        TaxTrans    taxTrans;        
        
        taxlines = node.appendChild(resultXml.createElement(#taxLines));
        
        while select TaxCode, sum(TaxValue), sum(SourceRegulateAmountCur) from taxTrans
            group by TaxCode
            where taxTrans.TransDate == _custInvoiceJour.InvoiceDate &&
                    taxTrans.Voucher   == _custInvoiceJour.LedgerVoucher &&
                    taxTrans.SourceRegulateAmountCur
        {
            taxline = taxlines.appendChild(resultXml.createElement(#taxLine));
            
            this.initHistoryTaxDefaultFields(taxline, taxTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHistoryTaxDefaultFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initHistoryTaxDefaultFields(XmlNode _taxline, TaxTrans _taxTrans)
    {
        this.addFieldValue(#taxId, _taxline, _taxTrans.TaxCode);
        this.addFieldValue(#description, _taxline, TaxTable::find(_taxTrans.TaxCode).TaxName);
        this.addFieldValue(#percent, _taxline, _taxTrans.TaxValue);
        this.addFieldValue(#amount, _taxline, -_taxTrans.SourceRegulateAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPickupLocation</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addPickupLocation(XmlNode _parentNode, boolean _quotation = false)
    {
        XmlNode pickupLocationNode;        

        pickupLocationNode = _parentNode.appendChild(resultXml.createElement(#pickupLocation));

        if(_quotation)
        {
            this.addFieldValue(#id, pickupLocationNode, salesQuotationTable.SC_PickupLocationId);
            this.addFieldValue(#address, pickupLocationNode, salesQuotationTable.SC_PickupLocationAddress);
        }
        else
        {
            this.addFieldValue(#id, pickupLocationNode, salesTable.SC_PickupLocationId);
            this.addFieldValue(#address, pickupLocationNode, salesTable.SC_PickupLocationAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPromotion</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addPromotion(boolean _quotation = false)
    {        
        SC_DiscountType type;
        Amount          tmpValue;
        Description     titleValue, productValue;                

        if(promotionCalculated || promotionCouponUsed)
        {
            if(!_quotation && this.isRetailEnabled()) //coupons
            {
                [productValue, titleValue, type, tmpValue] = this.calcRetailPromotionValues();
            }

            if(!productValue && ((_quotation && salesQuotationTable.SC_PromotionAmount) || (!_quotation && salestable.SC_PromotionAmount)))
            {
                [productValue, titleValue, type, tmpValue] = this.calcPromotionValues(_quotation);
            }           

            salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

            this.addFieldValue(#productId, salesLineNode, productValue);
            this.addFieldValue(#title, salesLineNode, titleValue);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#price, salesLineNode, -promotionCalculated);
            this.addFieldValue(#lineAmount, salesLineNode, -promotionCalculated);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, externalCouponUsed ? #externalcoupon : #promotioncode);

            if(type == SC_DiscountType::Percent)
            {
                this.addFieldValue(#discountPercent, salesLineNode, tmpValue);
            }
            else
            {
                this.addFieldValue(#discountAmount, salesLineNode, tmpValue);
            }
        }

        if(sanaCouponFound ||
          (_quotation && !salesQuotationTable.SC_PromotionValue && salesQuotationTable.SC_PromotionCode && salesQuotationTable.SC_PromotionTitle) ||
          (!_quotation && !salesTable.SC_PromotionValue && salesTable.SC_PromotionCode && salesTable.SC_PromotionTitle))
        {
            salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

            this.addFieldValue(#productId, salesLineNode, _quotation ? salesQuotationTable.SC_PromotionCode : salestable.SC_PromotionCode);
            this.addFieldValue(#title, salesLineNode, _quotation ? salesQuotationTable.SC_PromotionTitle : salestable.SC_PromotionTitle);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#price, salesLineNode, 0);
            this.addFieldValue(#lineAmount, salesLineNode, 0);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, #externalcoupon);
        } 

        if(giftCardTable)
        {
            salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

            this.addFieldValue(#productId, salesLineNode, giftCardTable.GiftCardCode);
            this.addFieldValue(#title, salesLineNode, giftCardTable.Name);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#price, salesLineNode, 0);
            this.addFieldValue(#lineAmount, salesLineNode, 0);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, #externalcoupon);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetailPromotionValues</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcRetailPromotionValues()
    {      
        RetailPeriodicDiscount  retailPeriodicDiscount;
        RetailSalesDiscountLine retailSalesDiscountLine;
        RetailCouponCodeTable   retailCouponCodeTable;
        RetailCouponUsage       retailCouponUsage;
        SC_DiscountType         type;
        Amount                  tmpValue;
        Description             titleValue, productValue;

        select firstonly retailCouponUsage
            where retailCouponUsage.SalesId == salesTable.SalesId;
                
        select firstonly PeriodicDiscountOfferId, DiscountAmount, Percentage from retailSalesDiscountLine
            join salesLine
            where retailSalesDiscountLine.InventTransId == salesline.InventTransId &&
                  salesLine.salesId == salesTable.SalesId &&
                  retailSalesDiscountLine.PeriodicDiscountOfferId;
                                
        retailPeriodicDiscount = RetailPeriodicDiscount::findByOfferId(retailSalesDiscountLine.PeriodicDiscountOfferId);

        if(retailPeriodicDiscount && retailPeriodicDiscount.IsDiscountCodeRequired)
        {
            select firstonly retailCouponCodeTable
                where retailCouponCodeTable.CouponCodeId == retailCouponUsage.CouponCodeId;

            productValue        = retailCouponCodeTable.CouponCode;
            titleValue          = retailPeriodicDiscount.Name;
            type                = retailSalesDiscountLine.DiscountAmount ? SC_DiscountType::Fixed : SC_DiscountType::Percent;
            tmpValue            = retailSalesDiscountLine.DiscountAmount ? retailSalesDiscountLine.DiscountAmount : retailSalesDiscountLine.Percentage;
            promotionCalculated = 0;
        }
              
        if(!productValue)
        {
            select firstonly retailCouponCodeTable
                where retailCouponCodeTable.CouponCodeId == retailCouponUsage.CouponCodeId;

            productValue = retailCouponCodeTable.CouponCode;
            titleValue   = RetailCoupon::find(retailCouponCodeTable.CouponNumber).Description;
        }
        
        return [productValue, titleValue, type, tmpValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPromotionValues</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcPromotionValues(boolean _quotation = false)
    {
        SC_DiscountType         type;
        Amount                  tmpValue;
        Description             titleValue, productValue;

        productValue = _quotation ? salesQuotationTable.SC_PromotionCode : salestable.SC_PromotionCode;
        titleValue   = _quotation ? salesQuotationTable.SC_PromotionTitle : salestable.SC_PromotionTitle;
        type         = _quotation ? salesQuotationTable.SC_PromotionType : salestable.SC_PromotionType;

        //convert to framework style 10 > 0.1
        if(type == SC_DiscountType::Percent)
        {
            tmpValue = _quotation ?  salesQuotationTable.SC_PromotionValue / 100 : salestable.SC_PromotionValue / 100;
        }
        else
        {
            tmpValue = _quotation ?  salesQuotationTable.SC_PromotionValue : salestable.SC_PromotionValue;
        }

        return [productValue, titleValue, type, tmpValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuoteCouponDiscounts</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void calcQuoteCouponDiscounts()
    {
        SC_CouponDiscountTable     couponDiscountTable;
        SC_CouponDiscountLine      couponDiscountLine;
        SalesQuotationLine         salesQuotationLineLocal;
        InventTable                inventTableLocal;
        InventDim                  inventDimLine, inventDim;
        InventDimCombination       inventDimCombination;
        container                  salesQuotationLineLocalCon;

        if(!webShopsTable.DisableSanaDiscounts && SC_CouponDiscountTable::existsWebshopActive(webShopsTable.WebShopId))
        {
            if(accountType == #contact && smmBusRelTable)
            {
                custTable.Currency = smmBusRelTable.Currency;
            }

            select firstonly DiscountId, DiscPercent, DiscountConcurrencyMode from couponDiscountTable
                where couponDiscountTable.CouponCode   == lineProductId &&
                      couponDiscountTable.Currency     == custTable.Currency &&
                      couponDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                      couponDiscountTable.Active       == DirRelationshipStatus::Active &&
                      (couponDiscountTable.StartDate    <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.StartDate) &&
                      (couponDiscountTable.EndDate      >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.EndDate)
                notExists join couponDiscountLine
                    where couponDiscountLine.DiscountId == couponDiscountTable.DiscountId &&
                          couponDiscountLine.WebShopId  == couponDiscountTable.WebShopId;

            if(couponDiscountTable)
            {
                while select forUpdate salesQuotationLineLocal
                    where salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId
                {
                    [salesQuotationLineLocal.LinePercent, salesQuotationLineLocal.LineDisc, salesQuotationLineLocal.LineAmount] = this.setCouponLinePercent(salesQuotationLineLocal, couponDiscountTable);
                    salesQuotationLineLocal.update();
                    sanaCouponFound = couponDiscountTable.DiscountId;
                }
            }
            else if(SC_CouponDiscountTable::findCouponCode(webShopsTable.WebShopId, lineProductId))
            {
                while select Product, Category, DiscPercent, MaxQtyOfItems from couponDiscountLine
                    order by Variant desc, Product desc
                join DiscountId, DiscountConcurrencyMode from couponDiscountTable
                    where couponDiscountTable.DiscountId   == couponDiscountLine.DiscountId &&
                          couponDiscountTable.CouponCode   == lineProductId &&
                          couponDiscountTable.Currency     == custTable.Currency &&
                          couponDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                          couponDiscountTable.Active       == DirRelationshipStatus::Active &&
                         (couponDiscountTable.StartDate    <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.StartDate) &&
                         (couponDiscountTable.EndDate      >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.EndDate)
                join forUpdate salesQuotationLineLocal
                    where salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId &&
                          salesQuotationLineLocal.SalesUnit   == couponDiscountLine.SalesUnit &&
                          salesQuotationLineLocal.SalesQty    >= couponDiscountLine.NumberOfItemsNeeded &&
                          !salesQuotationLineLocal.SC_SuppItem &&
                          !salesQuotationLineLocal.SC_MixMatchDiscountId
                     exists join TableId from inventTableLocal
                        where ((salesQuotationLineLocal.ItemId  == inventTableLocal.ItemId &&
                                inventTableLocal.Product == couponDiscountLine.Product && couponDiscountLine.Product) ||
                               (couponDiscountLine.Category && !couponDiscountLine.Product))
                     exists join TableId from inventDimLine
                        where inventDimLine.inventDimId == salesQuotationLineLocal.InventDimId
                     exists join TableId from inventDimCombination
                        where inventDimCombination.DistinctProductVariant == couponDiscountLine.Variant || !couponDiscountLine.Variant
                        exists join TableId from inventDim
                            where inventDim.inventDimId   == inventDimCombination.inventDimId || !couponDiscountLine.Variant &&
                                  inventDim.InventColorId == inventDimLine.InventColorId &&
                                  inventDim.InventSizeId  == inventDimLine.InventSizeId &&
                                  inventDim.configId      == inventDimLine.configId &&
                                  inventDim.InventStyleId == inventDimLine.InventStyleId                
                {
                    if(!conFind(salesQuotationLineLocalCon, salesQuotationLineLocal.RecId) &&
                      (couponDiscountLine.Product || !couponDiscountLine.Category || this.isProductBelongCategory(couponDiscountLine.Category, InventTable::find(salesQuotationLineLocal.ItemId).Product)))
                    {
                        [salesQuotationLineLocal.LinePercent, salesQuotationLineLocal.LineDisc, salesQuotationLineLocal.LineAmount] = this.setCouponLinePercent(salesQuotationLineLocal, couponDiscountTable, couponDiscountLine);
                        salesQuotationLineLocal.update();
                        sanaCouponFound = couponDiscountTable.DiscountId;
                        salesQuotationLineLocalCon += salesQuotationLineLocal.RecId;                        
                    }
                }
            }

            if(sanaCouponFound)
            {
                couponDiscountTable                   = SC_CouponDiscountTable::find(webShopsTable.WebShopId, sanaCouponFound);
                salesQuotationTable.SC_PromotionCode  = couponDiscountTable.CouponCode;
                salesQuotationTable.SC_PromotionTitle = couponDiscountTable.Name;
                salesQuotationTable.SC_PromotionType  = SC_DiscountType::Percent;
                salesQuotationTable.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesAgreementItemPrice</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Price calcSalesAgreementItemPrice (AgreementLine _agreementLine, UnitOfMeasureSymbol _parmUnitId)
    {
        Price               unitPrice;
        PriceDisc           priceDisc;
        InventDim           agreementDim    = _agreementLine.inventDim();
        PriceDiscParameters priceParameters = PriceDiscParameters::construct();
    
        inventTable = InventTable::find(_agreementLine.ItemId);
        
        if(!agreementDim.InventSiteId && !agreementDim.InventLocationId)
        {
            agreementDim = this.setProductStorageDim();
        }
        else if(agreementDim.InventSiteId)
        {
            agreementDim.InventLocationId = inventTable.inventItemOrderSetupMap(InventItemOrderSetupType::Sales,
                                                        agreementDim.InventDimId).inventLocationId(agreementDim.InventLocationId,
                                                                                                   inventTable,
                                                                                                   agreementDim.InventSiteId);
        }

        priceParameters.parmModuleType(ModuleInventPurchSales::Sales);
        priceParameters.parmItemId(inventTable.ItemId);
        priceParameters.parmInventDim(agreementDim);
        priceParameters.parmUnitID(_parmUnitId ? _parmUnitId : inventTable.salesUnitId());
        priceParameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        priceParameters.parmQty(1);
        priceParameters.parmAccountNum(custTable.AccountNum);
        priceParameters.parmCurrencyCode(custTable.Currency);        

        priceDisc = PriceDisc::newFromPriceDiscParameters(priceParameters);
       
        if(priceDisc.findPrice(custTable.PriceGroup))
        {
            unitPrice = CurrencyExchangeHelper::amount(priceDisc.price() / priceDisc.priceUnit() + abs(priceDisc.markup()), custTable.Currency);             

            if(!_agreementLine.LineDiscountPercent)
            {
                priceDisc.findLineDisc(inventTable.salesLineDisc(), custTable.LineDisc);
                unitPrice = PriceDisc::price2Amount(unitPrice, 1, priceDisc.getDiscAmount(),
                                                1, 1, 0, priceDisc.getDiscPercent(), custTable.Currency, 0, true);
            }

        }

        return unitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesCouponDiscounts</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void calcSalesCouponDiscounts()
    {
        SC_CouponDiscountTable     couponDiscountTable;
        SC_CouponDiscountLine      couponDiscountLine;
        SalesLine                  salesLineLocal;
        InventTable                inventTableLocal;
        InventDim                  inventDimLine, inventDim;
        InventDimCombination       inventDimCombination;
        container                  salesLineLocalCon;

        if(!webShopsTable.DisableSanaDiscounts && SC_CouponDiscountTable::existsWebshopActive(webShopsTable.WebShopId))
        {
            select firstonly DiscountId, DiscPercent, DiscountConcurrencyMode from couponDiscountTable
                where couponDiscountTable.CouponCode   == lineProductId &&
                      couponDiscountTable.Currency     == custTable.Currency &&
                      couponDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                      couponDiscountTable.Active       == DirRelationshipStatus::Active &&
                      (couponDiscountTable.StartDate    <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.StartDate) &&
                      (couponDiscountTable.EndDate      >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.EndDate)
                notExists join couponDiscountLine
                    where couponDiscountLine.DiscountId == couponDiscountTable.DiscountId &&
                          couponDiscountLine.WebShopId  == couponDiscountTable.WebShopId;

            if(couponDiscountTable)
            {
                while select forUpdate salesLineLocal
                    where salesLineLocal.SalesId == salesTable.SalesId
                {
                    [salesLineLocal.LinePercent, salesLineLocal.LineDisc, salesLineLocal.LineAmount] = this.setCouponLinePercent(salesLineLocal, couponDiscountTable);
                    salesLineLocal.update();
                    sanaCouponFound = couponDiscountTable.DiscountId;
                }
            }
            else if(SC_CouponDiscountTable::findCouponCode(webShopsTable.WebShopId, lineProductId))
            {
                while select Product, Category, DiscPercent, MaxQtyOfItems from couponDiscountLine
                    order by Variant desc, Product desc
                join DiscountId, DiscountConcurrencyMode from couponDiscountTable
                    where couponDiscountTable.DiscountId   == couponDiscountLine.DiscountId &&
                          couponDiscountTable.CouponCode   == lineProductId &&
                          couponDiscountTable.Currency     == custTable.Currency &&
                          couponDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                          couponDiscountTable.Active       == DirRelationshipStatus::Active &&
                         (couponDiscountTable.StartDate    <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.StartDate) &&
                         (couponDiscountTable.EndDate      >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !couponDiscountTable.EndDate)
                join forUpdate salesLineLocal
                    where salesLineLocal.SalesId   == salesTable.SalesId &&
                          salesLineLocal.SalesUnit == couponDiscountLine.SalesUnit &&
                          salesLineLocal.SalesQty  >= couponDiscountLine.NumberOfItemsNeeded &&
                          !salesLineLocal.SC_SuppItem &&
                          !salesLineLocal.MatchingAgreementLine &&
                          !salesLineLocal.SC_MixMatchDiscountId
                     exists join TableId from inventTableLocal
                        where ((salesLineLocal.ItemId  == inventTableLocal.ItemId &&
                                inventTableLocal.Product == couponDiscountLine.Product && couponDiscountLine.Product) ||
                               (couponDiscountLine.Category && !couponDiscountLine.Product))
                     exists join TableId from inventDimLine
                        where inventDimLine.inventDimId == salesLineLocal.InventDimId
                     exists join TableId from inventDimCombination
                        where inventDimCombination.DistinctProductVariant == couponDiscountLine.Variant || !couponDiscountLine.Variant
                        exists join TableId from inventDim
                            where inventDim.inventDimId   == inventDimCombination.inventDimId || !couponDiscountLine.Variant &&
                                  inventDim.InventColorId == inventDimLine.InventColorId &&
                                  inventDim.InventSizeId  == inventDimLine.InventSizeId &&
                                  inventDim.configId      == inventDimLine.configId &&
                                  inventDim.InventStyleId == inventDimLine.InventStyleId                
                {
                    if(!conFind(salesLineLocalCon, salesLineLocal.RecId) &&
                      (couponDiscountLine.Product || !couponDiscountLine.Category || this.isProductBelongCategory(couponDiscountLine.Category, InventTable::find(salesLineLocal.ItemId).Product)))
                    {
                        [salesLineLocal.LinePercent, salesLineLocal.LineDisc, salesLineLocal.LineAmount] = this.setCouponLinePercent(salesLineLocal, couponDiscountTable, couponDiscountLine);
                        salesLineLocal.update();
                        sanaCouponFound = couponDiscountTable.DiscountId;
                        salesLineLocalCon += salesLineLocal.RecId;                        
                    }
                }
            }

            if(sanaCouponFound)
            {
                couponDiscountTable          = SC_CouponDiscountTable::find(webShopsTable.WebShopId, sanaCouponFound);
                salesTable.SC_PromotionCode  = couponDiscountTable.CouponCode;
                salesTable.SC_PromotionTitle = couponDiscountTable.Name;
                salesTable.SC_PromotionType  = SC_DiscountType::Percent;
                salesTable.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesMixAndMatchDiscounts</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void calcSalesMixAndMatchDiscounts()
    {
        SC_MixMatchDiscountTable    mixMatchDiscountTable;
        SC_MixMatchDiscountLine     mixMatchDiscountLine, mixMatchDiscountLineCount;
        SalesLine                   salesLineLocal, salesLineCopy;
        InventTable                 inventTableLocal;
        InventDim                   inventDimLine, inventDim;
        InventDimCombination        inventDimCombination;
        SC_DiscountConcurrencyMode  concurrencyMode;
        DiscCode                    prevDiscount, foundDiscountId = '1';
        Counter                     totalDiscLines, foundDiscLines, multiply;
        container                   foundItemsCon, salesLineLocalCon, mixMatchDiscountLineCon;
        DiscPct                     webshopDiscPct;

        if(!sanaCouponFound && !webShopsTable.DisableSanaDiscounts && SC_MixMatchDiscountTable::existsWebshopActive(webShopsTable.WebShopId))
        {
            while(foundDiscountId)
            {
                foundDiscountId = '';
                foundDiscLines  = 0;
                prevDiscount = '';
                salesLineCopy.clear();
                foundItemsCon = conNull();
                salesLineLocalCon = conNull();
                mixMatchDiscountLineCon = conNull();
                multiply = maxInt();

                select count(RecId) from salesLine
                where salesLine.SalesId == salesTable.SalesId &&
                      !salesLine.MatchingAgreementLine &&
                      !salesLine.SC_MixMatchDiscountId;

                if(salesLine.RecId == 1) // if only one line check if auto items exist for MM trigers
                {
                    select firstOnly mixMatchDiscountLine
                    where mixMatchDiscountLine.AutoAdd
                    exists join TableId from mixMatchDiscountTable
                        where mixMatchDiscountTable.DiscountId   == mixMatchDiscountLine.DiscountId &&
                              mixMatchDiscountTable.Currency     == custTable.Currency &&
                             (mixMatchDiscountTable.DiscGroupId  == custTable.LineDisc || !mixMatchDiscountTable.DiscGroupId) &&
                              mixMatchDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                              mixMatchDiscountTable.Active       == DirRelationshipStatus::Active &&
                             (mixMatchDiscountTable.StartDate    <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.StartDate) &&
                             (mixMatchDiscountTable.EndDate      >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.EndDate);
                }

                if(salesLine.RecId >= 2 || mixMatchDiscountLine) //atleast two lines without discounts exist in order for mix&match search or Auto items exist
                {
                    while select DiscountId, DiscountConcurrencyMode from mixMatchDiscountTable
                    order by PricingPriority, DiscountId
                    where mixMatchDiscountTable.Currency     == custTable.Currency &&
                          (mixMatchDiscountTable.DiscGroupId == custTable.LineDisc || !mixMatchDiscountTable.DiscGroupId) &&
                          mixMatchDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                          mixMatchDiscountTable.Active       == DirRelationshipStatus::Active &&
                          (mixMatchDiscountTable.StartDate   <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.StartDate) &&
                          (mixMatchDiscountTable.EndDate     >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.EndDate)
                    join mixMatchDiscountLine
                        order by Variant desc, Product desc
                        where mixMatchDiscountLine.DiscountId == mixMatchDiscountTable.DiscountId &&
                              mixMatchDiscountLine.WebShopId  == mixMatchDiscountTable.WebShopId &&
                              !mixMatchDiscountLine.AutoAdd
                    join RecId, ItemId, SalesQty from salesLineLocal
                        order by SalesPrice
                        where salesLineLocal.SalesId   == salesTable.SalesId &&
                              salesLineLocal.SalesUnit == mixMatchDiscountLine.SalesUnit &&
                              salesLineLocal.SalesQty  >= mixMatchDiscountLine.NumberOfItemsNeeded &&
                             !salesLineLocal.SC_SuppItem &&
                             !salesLineLocal.MatchingAgreementLine &&
                             !salesLineLocal.SC_MixMatchDiscountId
                        exists join TableId from inventTableLocal
                            where ((salesLineLocal.ItemId    == inventTableLocal.ItemId &&
                                    inventTableLocal.Product == mixMatchDiscountLine.Product && mixMatchDiscountLine.Product) ||
                                   (mixMatchDiscountLine.Category && !mixMatchDiscountLine.Product))
                        exists join TableId from inventDimLine
                            where inventDimLine.inventDimId == salesLineLocal.InventDimId
                        exists join TableId from inventDimCombination
                            where inventDimCombination.DistinctProductVariant == mixMatchDiscountLine.Variant || !mixMatchDiscountLine.Variant
                            exists join TableId from inventDim
                                where inventDim.inventDimId   == inventDimCombination.inventDimId || !mixMatchDiscountLine.Variant &&
                                      inventDim.InventColorId == inventDimLine.InventColorId &&
                                      inventDim.InventSizeId  == inventDimLine.InventSizeId &&
                                      inventDim.configId      == inventDimLine.configId &&
                                      inventDim.InventStyleId == inventDimLine.InventStyleId
                    {
                        if(!prevDiscount || (prevDiscount && mixMatchDiscountTable.DiscountId != prevDiscount))
                        {
                            select count(RecId) from mixMatchDiscountLineCount
                            where mixMatchDiscountLineCount.WebShopId  == webShopsTable.WebShopId &&
                                    mixMatchDiscountLineCount.DiscountId == mixMatchDiscountTable.DiscountId &&
                                    !mixMatchDiscountLineCount.AutoAdd;

                            totalDiscLines          = any2int(mixMatchDiscountLineCount.RecId);
                            foundDiscLines          = 0;
                            foundItemsCon           = conNull();
                            mixMatchDiscountLineCon = conNull();
                            multiply                = maxInt();
                        }

                        if(!confind(foundItemsCon, salesLineLocal.RecId) && !conFind(mixMatchDiscountLineCon, mixMatchDiscountLine.RecId) &&
                        (mixMatchDiscountLine.Product || !mixMatchDiscountLine.Category || this.isProductBelongCategory(mixMatchDiscountLine.Category, InventTable::find(salesLineLocal.ItemId).Product)))
                        {
                            foundDiscLines++;
                            foundItemsCon += salesLineLocal.RecId;
                            mixMatchDiscountLineCon += mixMatchDiscountLine.RecId;
                            multiply = multiply < salesLineLocal.SalesQty / mixMatchDiscountLine.NumberOfItemsNeeded ? multiply : salesLineLocal.SalesQty / mixMatchDiscountLine.NumberOfItemsNeeded;
                        }

                        if(totalDiscLines && totalDiscLines == foundDiscLines)
                        {
                            foundDiscountId = mixMatchDiscountTable.DiscountId;
                            concurrencyMode = mixMatchDiscountTable.DiscountConcurrencyMode;
                            break; //first available m&m discount found skip further search
                        }

                        prevDiscount = mixMatchDiscountTable.DiscountId;
                    }

                    if(foundDiscountId)
                    {
                        foundItemsCon           = conNull();
                        mixMatchDiscountLineCon = conNull();

                        this.addAutoMixAndMatchDiscountLines(foundDiscountId, multiply);

                        while select forUpdate salesLineLocal
                        order by SalesPrice
                        where salesLineLocal.SalesId == salesTable.SalesId &&
                             !salesLineLocal.SC_SuppItem &&
                             !salesLineLocal.MatchingAgreementLine &&
                             !salesLineLocal.SC_MixMatchDiscountId
                        join mixMatchDiscountLine
                            order by Variant desc, Product desc
                            where mixMatchDiscountLine.DiscountId == foundDiscountId &&
                                  mixMatchDiscountLine.WebShopId  == webShopsTable.WebShopId &&
                                  mixMatchDiscountLine.SalesUnit  == salesLineLocal.SalesUnit &&
                                  mixMatchDiscountLine.NumberOfItemsNeeded <= salesLineLocal.SalesQty
                        exists join TableId from inventTableLocal
                                  where inventTableLocal.ItemId  == salesLineLocal.ItemId &&
                                      ((inventTableLocal.Product == mixMatchDiscountLine.Product && mixMatchDiscountLine.Product) ||
                                       (mixMatchDiscountLine.Category && !mixMatchDiscountLine.Product))
                        exists join TableId from inventDimLine
                            where inventDimLine.inventDimId == salesLineLocal.InventDimId
                        exists join TableId from inventDimCombination
                            where inventDimCombination.DistinctProductVariant == mixMatchDiscountLine.Variant || !mixMatchDiscountLine.Variant
                            exists join TableId from inventDim
                                where inventDim.inventDimId   == inventDimCombination.inventDimId || !mixMatchDiscountLine.Variant &&
                                      inventDim.InventColorId == inventDimLine.InventColorId &&
                                      inventDim.InventSizeId  == inventDimLine.InventSizeId &&
                                      inventDim.configId      == inventDimLine.configId &&
                                      inventDim.InventStyleId == inventDimLine.InventStyleId
                        {
                            if(mixMatchDiscountLine.Category && !mixMatchDiscountLine.Product && !this.isProductBelongCategory(mixMatchDiscountLine.Category, InventTable::find(salesLineLocal.ItemId).Product))
                            {
                                continue;
                            }

                            if(!confind(foundItemsCon, salesLineLocal.ItemId + salesLineLocal.SalesUnit) &&
                           !conFind(salesLineLocalCon, salesLineLocal.RecId) &&
                           !conFind(mixMatchDiscountLineCon, mixMatchDiscountLine.RecId))
                            {
                                if(mixMatchDiscountLine.AutoAdd)
                                {
                                    salesLineLocal.SalesQty = salesLineLocal.SalesQty >= mixMatchDiscountLine.NumberOfItemsNeeded * multiply ? salesLineLocal.SalesQty : mixMatchDiscountLine.NumberOfItemsNeeded * multiply;
                                }

                                if((salesLineLocal.SalesQty - mixMatchDiscountLine.NumberOfItemsNeeded * multiply) > 0)
                                {
                                    webshopDiscPct = salesLineLocal.LinePercent ? this.getWebshopDiscountPct() : 0;

                                    salesLineCopy.data(salesLineLocal);
                                    salesLineCopy.RecId      = 0;
                                    salesLineCopy.LineCreationSequenceNumber = 0;
                                    salesLineCopy.LineNum    = 0;
                                    salesLineCopy.SalesQty   = salesLineCopy.SalesQty - mixMatchDiscountLine.NumberOfItemsNeeded * multiply;
                                    
                                    salesLineCopy.setPriceDisc(salesLineCopy.inventDim());
                                    salesLineCopy.LinePercent += webshopDiscPct;
                                    salesLineCopy.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesLine, LinePercent));
                                    salesLineCopy.createLine(false, false, false, true, true, false);

                                    salesLineLocal.SalesQty             = mixMatchDiscountLine.NumberOfItemsNeeded * multiply;
                                    salesLineLocal.QtyOrdered           = salesLineLocal.SalesQty;
                                    salesLineLocal.RemainInventPhysical = salesLineLocal.SalesQty;
                                    salesLineLocal.RemainSalesPhysical  = salesLineLocal.SalesQty;
                                    salesLineLocal.setPriceDisc(salesLineLocal.inventDim());
                                    salesLineLocal.LinePercent += webshopDiscPct;
                                }

                                [salesLineLocal.LinePercent, salesLineLocal.LineDisc, salesLineLocal.LineAmount] = this.setMixAndMatchLinePercent(salesLineLocal, mixMatchDiscountLine, concurrencyMode);

                                salesLineLocal.SC_SuppItem           = mixMatchDiscountLine.AutoAdd;
                                salesLineLocal.SC_MixMatchDiscountId = mixMatchDiscountLine.DiscountId;
                                salesLineLocal.update();

                                if(!mixMatchDiscountLine.Variant)
                                {
                                    foundItemsCon += salesLineLocal.ItemId + salesLineLocal.SalesUnit;
                                }

                                salesLineLocalCon += salesLineLocal.RecId;
                                mixMatchDiscountLineCon += mixMatchDiscountLine.RecId;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuoteMixAndMatchDiscounts</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void calcQuoteMixAndMatchDiscounts()
    {
        SC_MixMatchDiscountTable    mixMatchDiscountTable;
        SC_MixMatchDiscountLine     mixMatchDiscountLine, mixMatchDiscountLineCount;
        SalesQuotationLine          salesQuotationLineLocal, salesQuotationLineCopy;
        InventTable                 inventTableLocal;
        InventDim                   inventDimLine, inventDim;
        InventDimCombination        inventDimCombination;
        SC_DiscountConcurrencyMode  concurrencyMode;
        DiscCode                    prevDiscount, foundDiscountId = '1';
        Counter                     totalDiscLines, foundDiscLines, multiply;
        container                   foundItemsCon, salesQuoteLineLocalCon, mixMatchDiscountLineCon;
        DiscPct                     webshopDiscPct;

        if(!sanaCouponFound && !webShopsTable.DisableSanaDiscounts && SC_MixMatchDiscountTable::existsWebshopActive(webShopsTable.WebShopId))
        {
            if(accountType == #contact && smmBusRelTable)
            {
                custTable.Currency = smmBusRelTable.Currency;
            }

            while(foundDiscountId)
            {
                foundDiscountId = '';
                foundDiscLines  = 0;
                prevDiscount = '';
                salesQuotationLineCopy.clear();
                foundItemsCon = conNull();
                salesQuoteLineLocalCon = conNull();
                mixMatchDiscountLineCon = conNull();
                multiply = maxInt();

                select count(RecId) from salesQuotationLine
                where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId &&
                      !salesQuotationLine.SC_MixMatchDiscountId;

                if(salesQuotationLine.RecId == 1) // if only one line check if auto items exist for MM trigers
                {
                    select firstOnly mixMatchDiscountLine
                    where mixMatchDiscountLine.AutoAdd
                    exists join TableId from mixMatchDiscountTable
                        where mixMatchDiscountTable.DiscountId   == mixMatchDiscountLine.DiscountId &&
                              mixMatchDiscountTable.Currency     == custTable.Currency &&
                             (mixMatchDiscountTable.DiscGroupId  == custTable.LineDisc || !mixMatchDiscountTable.DiscGroupId) &&
                              mixMatchDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                              mixMatchDiscountTable.Active       == DirRelationshipStatus::Active &&
                             (mixMatchDiscountTable.StartDate    <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.StartDate) &&
                             (mixMatchDiscountTable.EndDate      >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.EndDate);
                }

                if(salesQuotationLine.RecId >= 2 || mixMatchDiscountLine) //atleast two lines without discounts exist in order for mix&match search or Auto items exist
                {
                    while select DiscountId, DiscountConcurrencyMode from mixMatchDiscountTable
                    order by PricingPriority, DiscountId
                    where mixMatchDiscountTable.Currency     == custTable.Currency &&
                          (mixMatchDiscountTable.DiscGroupId == custTable.LineDisc || !mixMatchDiscountTable.DiscGroupId) &&
                          mixMatchDiscountTable.WebShopId    == webShopsTable.WebShopId &&
                          mixMatchDiscountTable.Active       == DirRelationshipStatus::Active &&
                          (mixMatchDiscountTable.StartDate   <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.StartDate) &&
                          (mixMatchDiscountTable.EndDate     >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.EndDate)
                    join mixMatchDiscountLine
                        order by Variant desc, Product desc
                        where mixMatchDiscountLine.DiscountId == mixMatchDiscountTable.DiscountId &&
                              mixMatchDiscountLine.WebShopId  == mixMatchDiscountTable.WebShopId &&
                              !mixMatchDiscountLine.AutoAdd
                    join RecId, ItemId, SalesQty from salesQuotationLineLocal
                        order by SalesPrice
                        where salesQuotationLineLocal.QuotationId   == salesQuotationTable.QuotationId &&
                              salesQuotationLineLocal.SalesUnit == mixMatchDiscountLine.SalesUnit &&
                              salesQuotationLineLocal.SalesQty  >= mixMatchDiscountLine.NumberOfItemsNeeded &&
                             !salesQuotationLineLocal.SC_SuppItem &&
                             !salesQuotationLineLocal.SC_MixMatchDiscountId
                        exists join TableId from inventTableLocal
                            where ((salesQuotationLineLocal.ItemId    == inventTableLocal.ItemId &&
                                    inventTableLocal.Product == mixMatchDiscountLine.Product && mixMatchDiscountLine.Product) ||
                                   (mixMatchDiscountLine.Category && !mixMatchDiscountLine.Product))
                        exists join TableId from inventDimLine
                            where inventDimLine.inventDimId == salesQuotationLineLocal.InventDimId
                        exists join TableId from inventDimCombination
                            where inventDimCombination.DistinctProductVariant == mixMatchDiscountLine.Variant || !mixMatchDiscountLine.Variant
                            exists join TableId from inventDim
                                where inventDim.inventDimId   == inventDimCombination.inventDimId || !mixMatchDiscountLine.Variant &&
                                      inventDim.InventColorId == inventDimLine.InventColorId &&
                                      inventDim.InventSizeId  == inventDimLine.InventSizeId &&
                                      inventDim.configId      == inventDimLine.configId &&
                                      inventDim.InventStyleId == inventDimLine.InventStyleId
                    {
                        if(!prevDiscount || (prevDiscount && mixMatchDiscountTable.DiscountId != prevDiscount))
                        {
                            select count(RecId) from mixMatchDiscountLineCount
                            where mixMatchDiscountLineCount.WebShopId  == webShopsTable.WebShopId &&
                                    mixMatchDiscountLineCount.DiscountId == mixMatchDiscountTable.DiscountId &&
                                    !mixMatchDiscountLineCount.AutoAdd;

                            totalDiscLines          = any2int(mixMatchDiscountLineCount.RecId);
                            foundDiscLines          = 0;
                            foundItemsCon           = conNull();
                            mixMatchDiscountLineCon = conNull();
                            multiply                = maxInt();
                        }

                        if(!confind(foundItemsCon, salesQuotationLineLocal.RecId) && !conFind(mixMatchDiscountLineCon, mixMatchDiscountLine.RecId) &&
                        (mixMatchDiscountLine.Product || !mixMatchDiscountLine.Category || this.isProductBelongCategory(mixMatchDiscountLine.Category, InventTable::find(salesQuotationLineLocal.ItemId).Product)))
                        {
                            foundDiscLines++;
                            foundItemsCon += salesQuotationLineLocal.RecId;
                            mixMatchDiscountLineCon += mixMatchDiscountLine.RecId;
                            multiply = multiply < salesQuotationLineLocal.SalesQty / mixMatchDiscountLine.NumberOfItemsNeeded ? multiply : salesQuotationLineLocal.SalesQty / mixMatchDiscountLine.NumberOfItemsNeeded;
                        }

                        if(totalDiscLines && totalDiscLines == foundDiscLines)
                        {
                            foundDiscountId = mixMatchDiscountTable.DiscountId;
                            concurrencyMode = mixMatchDiscountTable.DiscountConcurrencyMode;
                            break; //first available m&m discount found skip further search
                        }

                        prevDiscount = mixMatchDiscountTable.DiscountId;
                    }

                    if(foundDiscountId)
                    {
                        foundItemsCon           = conNull();
                        mixMatchDiscountLineCon = conNull();

                        this.addAutoMixAndMatchDiscountLines(foundDiscountId, multiply, true);

                        while select forUpdate salesQuotationLineLocal
                        order by SalesPrice
                        where salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId &&
                             !salesQuotationLineLocal.SC_SuppItem &&
                             !salesQuotationLineLocal.SC_MixMatchDiscountId
                        join mixMatchDiscountLine
                            order by Variant desc, Product desc
                            where mixMatchDiscountLine.DiscountId == foundDiscountId &&
                                  mixMatchDiscountLine.WebShopId  == webShopsTable.WebShopId &&
                                  mixMatchDiscountLine.SalesUnit  == salesQuotationLineLocal.SalesUnit &&
                                  mixMatchDiscountLine.NumberOfItemsNeeded <= salesQuotationLineLocal.SalesQty
                        exists join TableId from inventTableLocal
                                  where inventTableLocal.ItemId  == salesQuotationLineLocal.ItemId &&
                                      ((inventTableLocal.Product == mixMatchDiscountLine.Product && mixMatchDiscountLine.Product) ||
                                       (mixMatchDiscountLine.Category && !mixMatchDiscountLine.Product))
                        exists join TableId from inventDimLine
                            where inventDimLine.inventDimId == salesQuotationLineLocal.InventDimId
                        exists join TableId from inventDimCombination
                            where inventDimCombination.DistinctProductVariant == mixMatchDiscountLine.Variant || !mixMatchDiscountLine.Variant
                            exists join TableId from inventDim
                                where inventDim.inventDimId   == inventDimCombination.inventDimId || !mixMatchDiscountLine.Variant &&
                                      inventDim.InventColorId == inventDimLine.InventColorId &&
                                      inventDim.InventSizeId  == inventDimLine.InventSizeId &&
                                      inventDim.configId      == inventDimLine.configId &&
                                      inventDim.InventStyleId == inventDimLine.InventStyleId
                        {
                            if(mixMatchDiscountLine.Category && !mixMatchDiscountLine.Product && !this.isProductBelongCategory(mixMatchDiscountLine.Category, InventTable::find(salesQuotationLineLocal.ItemId).Product))
                            {
                                continue;
                            }

                            if(!confind(foundItemsCon, salesQuotationLineLocal.ItemId + salesQuotationLineLocal.SalesUnit) &&
                           !conFind(salesQuoteLineLocalCon, salesQuotationLineLocal.RecId) &&
                           !conFind(mixMatchDiscountLineCon, mixMatchDiscountLine.RecId))
                            {
                                if(mixMatchDiscountLine.AutoAdd)
                                {
                                    salesQuotationLineLocal.SalesQty = salesQuotationLineLocal.SalesQty >= mixMatchDiscountLine.NumberOfItemsNeeded * multiply ? salesQuotationLineLocal.SalesQty : mixMatchDiscountLine.NumberOfItemsNeeded * multiply;
                                }

                                if((salesQuotationLineLocal.SalesQty - mixMatchDiscountLine.NumberOfItemsNeeded * multiply) > 0)
                                {
                                    webshopDiscPct = salesQuotationLineLocal.LinePercent ? this.getWebshopDiscountPct() : 0;

                                    salesQuotationLineCopy.data(salesQuotationLineLocal);
                                    salesQuotationLineCopy.RecId      = 0;
                                    salesQuotationLineCopy.LineCreationSequenceNumber = 0;
                                    salesQuotationLineCopy.LineNum    = 0;
                                    salesQuotationLineCopy.SalesQty   = salesQuotationLineCopy.SalesQty - mixMatchDiscountLine.NumberOfItemsNeeded * multiply;

                                    salesQuotationLineCopy.setPriceDisc(salesQuotationLineCopy.inventDim());
                                    salesQuotationLineCopy.LinePercent += webshopDiscPct;
                                    salesQuotationLineCopy.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesQuotationLine, LinePercent));
                                    salesQuotationLineCopy.createLine(false, false, false, true, true, false);

                                    salesQuotationLineLocal.SalesQty             = mixMatchDiscountLine.NumberOfItemsNeeded * multiply;
                                    salesQuotationLineLocal.QtyOrdered           = salesQuotationLineLocal.SalesQty;
                                    salesQuotationLineLocal.RemainInventPhysical = salesQuotationLineLocal.SalesQty;
                                    salesQuotationLineLocal.RemainSalesPhysical  = salesQuotationLineLocal.SalesQty;
                                    salesQuotationLineLocal.setPriceDisc(salesQuotationLineLocal.inventDim());
                                    salesQuotationLineLocal.LinePercent += webshopDiscPct;
                                }

                                [salesQuotationLineLocal.LinePercent, salesQuotationLineLocal.LineDisc, salesQuotationLineLocal.LineAmount] = this.setMixAndMatchLinePercent(salesQuotationLineLocal, mixMatchDiscountLine, concurrencyMode);

                                salesQuotationLineLocal.SC_SuppItem           = mixMatchDiscountLine.AutoAdd;
                                salesQuotationLineLocal.SC_MixMatchDiscountId = mixMatchDiscountLine.DiscountId;
                                salesQuotationLineLocal.update();

                                if(!mixMatchDiscountLine.Variant)
                                {
                                    foundItemsCon += salesQuotationLineLocal.ItemId + salesQuotationLineLocal.SalesUnit;
                                }

                                salesQuoteLineLocalCon += salesQuotationLineLocal.RecId;
                                mixMatchDiscountLineCon += mixMatchDiscountLine.RecId;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCouponLinePercent</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container setCouponLinePercent(SalesPurchLine _buffer, SC_CouponDiscountTable _couponDiscountTable, SC_CouponDiscountLine _couponDiscountLine = null)
    {
        AmountCur  lineAmount;
        DiscAmount discAmount;
        DiscPct    discPct, webshopDiscPct;
        DiscPct    couponDiscPercent = _couponDiscountLine ? _couponDiscountLine.DiscPercent : _couponDiscountTable.DiscPercent;        

        switch(_buffer.TableId)
        {
            case tableNum(SalesLine):
                salesLine      = _buffer as SalesLine;
                webshopDiscPct = salesLine.LinePercent ? this.getWebshopDiscountPct() : 0;

                if(_couponDiscountLine.MaxQtyOfItems && salesLine.SalesQty > _couponDiscountLine.MaxQtyOfItems)
                {
                    couponDiscPercent = round(((_couponDiscountLine.MaxQtyOfItems * (couponDiscPercent / 100)) / salesLine.SalesQty) * 100, 0.00001);
                }

                switch(_couponDiscountTable.DiscountConcurrencyMode)
                {
                    case SC_DiscountConcurrencyMode::SanaDiscount:
                        salesLine.LinePercent  = couponDiscPercent + webshopDiscPct >= 100 ? 100 : couponDiscPercent + webshopDiscPct;
                        salesLine.LineDisc     = 0;

                        this.setManualDiscChangePolicy(_buffer, true);
                        salesLine.LineAmount   = salesLine.calcLineAmountForced();
                        break;

                    case SC_DiscountConcurrencyMode::BestPrice,
                        SC_DiscountConcurrencyMode::BestRevenue:
                        discAmount = salesLine.LineDisc;
                        discPct    = salesLine.LinePercent;
                        lineAmount = salesLine.calcLineAmountForced();

                        salesLine.LinePercent = couponDiscPercent + webshopDiscPct >= 100 ? 100 : couponDiscPercent + webshopDiscPct;
                        salesLine.LineDisc    = 0;
                        salesLine.LineAmount  = salesLine.calcLineAmountForced();

                        if((discAmount || discPct) &&
                          ((salesLine.LineAmount > lineAmount && _couponDiscountTable.DiscountConcurrencyMode == SC_DiscountConcurrencyMode::BestPrice) ||
                           (salesLine.LineAmount < lineAmount && _couponDiscountTable.DiscountConcurrencyMode == SC_DiscountConcurrencyMode::BestRevenue)))
                        {
                            salesLine.LineAmount  = lineAmount;
                            salesLine.LineDisc    = discAmount;
                            salesLine.LinePercent = discPct;

                            this.setManualDiscChangePolicy(_buffer);
                        }
                        else
                        {
                            this.setManualDiscChangePolicy(_buffer, true);
                        }
                        break;

                    case SC_DiscountConcurrencyMode::Compounded:
                        salesLine.LinePercent  = couponDiscPercent + salesLine.LinePercent >= 100 ? 100 : couponDiscPercent + salesLine.LinePercent;

                        this.setManualDiscChangePolicy(_buffer);
                        salesLine.LineAmount   = salesLine.calcLineAmountForced();
                        break;
                }
                break;

            case tableNum(SalesQuotationLine):
                salesQuotationLine = _buffer as SalesQuotationLine;
                webshopDiscPct     = salesQuotationLine.LinePercent ? this.getWebshopDiscountPct() : 0;

                if(_couponDiscountLine.MaxQtyOfItems && salesQuotationLine.SalesQty > _couponDiscountLine.MaxQtyOfItems)
                {
                    couponDiscPercent = round(((_couponDiscountLine.MaxQtyOfItems * (couponDiscPercent / 100)) / salesQuotationLine.SalesQty) * 100, 0.00001);
                }

                switch(_couponDiscountTable.DiscountConcurrencyMode)
                {
                    case SC_DiscountConcurrencyMode::SanaDiscount:
                        salesQuotationLine.LinePercent  = couponDiscPercent + webshopDiscPct >= 100 ? 100 : couponDiscPercent + webshopDiscPct;
                        salesQuotationLine.LineDisc     = 0;
                        salesQuotationLine.LineAmount   = salesQuotationLine.calcLineAmountForced();
                        break;

                    case SC_DiscountConcurrencyMode::BestPrice,
                        SC_DiscountConcurrencyMode::BestRevenue:
                        discAmount = salesQuotationLine.LineDisc;
                        discPct    = salesQuotationLine.LinePercent;
                        lineAmount = salesQuotationLine.calcLineAmountForced();

                        salesQuotationLine.LinePercent = couponDiscPercent + webshopDiscPct >= 100 ? 100 : couponDiscPercent + webshopDiscPct;
                        salesQuotationLine.LineDisc    = 0;
                        salesQuotationLine.LineAmount  = salesQuotationLine.calcLineAmountForced();

                        if((discAmount || discPct) &&
                          ((salesQuotationLine.LineAmount > lineAmount && _couponDiscountTable.DiscountConcurrencyMode == SC_DiscountConcurrencyMode::BestPrice) ||
                           (salesQuotationLine.LineAmount < lineAmount && _couponDiscountTable.DiscountConcurrencyMode == SC_DiscountConcurrencyMode::BestRevenue)))
                        {
                            salesQuotationLine.LineAmount  = lineAmount;
                            salesQuotationLine.LineDisc    = discAmount;
                            salesQuotationLine.LinePercent = discPct;
                        }
                        break;

                    case SC_DiscountConcurrencyMode::Compounded:
                        salesQuotationLine.LinePercent  = couponDiscPercent + salesQuotationLine.LinePercent >= 100 ? 100 : couponDiscPercent + salesQuotationLine.LinePercent;
                        salesQuotationLine.LineAmount   = salesQuotationLine.calcLineAmountForced();
                        break;
                }
                break;
        }

        return salesLine ? [salesLine.LinePercent, salesLine.LineDisc, salesLine.LineAmount] : [salesQuotationLine.LinePercent, salesQuotationLine.LineDisc, salesQuotationLine.LineAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMixAndMatchLinePercent</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container setMixAndMatchLinePercent(SalesPurchLine _buffer, SC_MixMatchDiscountLine _mixMatchDiscountLine, SC_DiscountConcurrencyMode _concurrencyMode)
    {
        AmountCur  lineAmount;
        DiscAmount discAmount;
        DiscPct    discPct, webshopDiscPct;

        switch(_buffer.TableId)
        {
            case tableNum(SalesLine):
                salesLine      = _buffer as SalesLine;
                webshopDiscPct = salesLine.LinePercent ? this.getWebshopDiscountPct() : 0;

                switch(_concurrencyMode)
                {
                    case SC_DiscountConcurrencyMode::SanaDiscount:
                        salesLine.LinePercent  = _mixMatchDiscountLine.DiscPercent + webshopDiscPct >= 100 ? 100 : _mixMatchDiscountLine.DiscPercent + webshopDiscPct;
                        salesLine.LineDisc     = 0;

                        this.setManualDiscChangePolicy(_buffer, true);
                        salesLine.LineAmount   = salesLine.calcLineAmountForced();
                        break;
            
                    case SC_DiscountConcurrencyMode::BestPrice,
                         SC_DiscountConcurrencyMode::BestRevenue:
                        if(!_mixMatchDiscountLine.AutoAdd)
                        {
                            discAmount = salesLine.LineDisc;
                            discPct    = salesLine.LinePercent;
                            lineAmount = salesLine.calcLineAmountForced();
                        }

                        salesLine.LinePercent = _mixMatchDiscountLine.DiscPercent + webshopDiscPct >= 100 ? 100 : _mixMatchDiscountLine.DiscPercent + webshopDiscPct;
                        salesLine.LineDisc    = 0;
                        salesLine.LineAmount  = salesLine.calcLineAmountForced();

                        if(!_mixMatchDiscountLine.AutoAdd && (discAmount || discPct) &&
                          ((salesLine.LineAmount > lineAmount && _concurrencyMode == SC_DiscountConcurrencyMode::BestPrice) ||
                           (salesLine.LineAmount < lineAmount && _concurrencyMode == SC_DiscountConcurrencyMode::BestRevenue)))
                        {
                            salesLine.LineAmount  = lineAmount;
                            salesLine.LineDisc    = discAmount;
                            salesLine.LinePercent = discPct;

                            this.setManualDiscChangePolicy(_buffer);
                        }
                        else
                        {
                            this.setManualDiscChangePolicy(_buffer, true);
                        }
                        break;
            
                    case SC_DiscountConcurrencyMode::Compounded:
                        salesLine.LinePercent  = _mixMatchDiscountLine.DiscPercent + salesLine.LinePercent >= 100 ? 100 : _mixMatchDiscountLine.DiscPercent + salesLine.LinePercent;

                        this.setManualDiscChangePolicy(_buffer);
                        salesLine.LineAmount   = salesLine.calcLineAmountForced();
                        break;
                }

                break;

            case tableNum(SalesQuotationLine):
                salesQuotationLine = _buffer as SalesQuotationLine;
                webshopDiscPct     = salesQuotationLine.LinePercent ? this.getWebshopDiscountPct() : 0;

                switch(_concurrencyMode)
                {
                    case SC_DiscountConcurrencyMode::SanaDiscount:
                        salesQuotationLine.LinePercent  = _mixMatchDiscountLine.DiscPercent + webshopDiscPct >= 100 ? 100 : _mixMatchDiscountLine.DiscPercent + webshopDiscPct;
                        salesQuotationLine.LineDisc     = 0;
                        salesQuotationLine.LineAmount   = salesQuotationLine.calcLineAmountForced();
                        break;
            
                    case SC_DiscountConcurrencyMode::BestPrice,
                         SC_DiscountConcurrencyMode::BestRevenue:
                        if(!_mixMatchDiscountLine.AutoAdd)
                        {
                            discAmount = salesQuotationLine.LineDisc;
                            discPct    = salesQuotationLine.LinePercent;
                            lineAmount = salesQuotationLine.calcLineAmountForced();
                        }

                        salesQuotationLine.LinePercent = _mixMatchDiscountLine.DiscPercent + webshopDiscPct >= 100 ? 100 : _mixMatchDiscountLine.DiscPercent + webshopDiscPct;
                        salesQuotationLine.LineDisc    = 0;
                        salesQuotationLine.LineAmount  = salesQuotationLine.calcLineAmountForced();

                        if(!_mixMatchDiscountLine.AutoAdd && (discAmount || discPct) &&
                          ((salesQuotationLine.LineAmount > lineAmount && _concurrencyMode == SC_DiscountConcurrencyMode::BestPrice) ||
                           (salesQuotationLine.LineAmount < lineAmount && _concurrencyMode == SC_DiscountConcurrencyMode::BestRevenue)))
                        {
                            salesQuotationLine.LineAmount  = lineAmount;
                            salesQuotationLine.LineDisc    = discAmount;
                            salesQuotationLine.LinePercent = discPct;
                        }
                        break;
            
                    case SC_DiscountConcurrencyMode::Compounded:
                        salesQuotationLine.LinePercent  = _mixMatchDiscountLine.DiscPercent + salesQuotationLine.LinePercent >= 100 ? 100 : _mixMatchDiscountLine.DiscPercent + salesQuotationLine.LinePercent;
                        salesQuotationLine.LineAmount   = salesQuotationLine.calcLineAmountForced();
                        break;
                }
                break;
        }

        return salesLine ? [salesLine.LinePercent, salesLine.LineDisc, salesLine.LineAmount] : [salesQuotationLine.LinePercent, salesQuotationLine.LineDisc, salesQuotationLine.LineAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymReference</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected PaymReference findPaymReference(CustInvoiceJour _custInvoiceJour = null)
    {
        PaymReference   paymentReference;
    
        switch(webShopsTable.PaymentReferenceSource)
        {
            case SC_PaymentReferenceSource::SalesOrder:
                paymentReference = _custInvoiceJour ? _custInvoiceJour.SalesId : salesTable.SalesId;
                break;
            case SC_PaymentReferenceSource::PSP:
                paymentReference = _custInvoiceJour ? paymentTransactionId : salesTable.SC_PaymentTransactionId;
                break;
            case SC_PaymentReferenceSource::Customer:
                paymentReference = _custInvoiceJour ? _custInvoiceJour.InvoiceAccount : salesTable.CustAccount;
                break;
        }
    
        return paymentReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProductCategoryRelationData</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable, SysObsolete('Not used anymore.', false, 27\03\2024)]
    protected void fillProductCategoryRelationData(EcoResCategoryId _category, RefrecId _lineId, boolean _categoryExists)
    {
        GiroReportTmp   tmpData;
        EcoResCategory  ecoResCategoryChild;

        select firstOnly tmpData
        where tmpData.AltRecId     == (_categoryExists ? _category : 0) &&
              tmpData.JournalRecId == _lineId;

        if(!tmpData)
        {
            tmpData.AltRecId     = _categoryExists ? _category : 0;
            tmpData.JournalRecId = _lineId;
            tmpData.insert();
        }

        if(_categoryExists)
        {
            while select RecId from ecoResCategoryChild
            where ecoResCategoryChild.ParentCategory == _category
            {
                this.fillProductCategoryRelationData(ecoResCategoryChild.RecId, _lineId, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuoteMiscCharges</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addQuoteMiscCharges(salesQuotationLine _quoteLine = null, LineNum _chargeLineNum = 0.0, boolean _persistedBasket = false)
    {
        MarkupTrans markupTrans;                
        
        if(_quoteLine && _persistedBasket)
        {
            _quoteLine = SalesQuotationLine::findInventTransId(_quoteLine.InventTransId);
        }
        
        while select markupTrans
            where (markupTrans.TransTableId == tablenum(SalesQuotationLine) &&
                   markupTrans.TransRecId   == _quoteLine.RecId && _quoteLine) ||
                  (markupTrans.TransTableId == tablenum(SalesQuotationTable) &&
                   markupTrans.TransRecId   == salesQuotationTable.RecId && !_quoteLine)
        {
            this.initDefaultMiscChargesFields(markupTrans, _quoteLine, _chargeLineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultMiscChargesFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultMiscChargesFields(MarkupTrans _markupTrans, Common _buffer, LineNum _chargeLineNum)
    {
        SalesLine           salesLineLocal;
        CustInvoiceTrans    custInvoiceTrans;
        SalesQuotationLine  salesQuotationLineLocal;
        LanguageTxtText     tmpStr;
        SysGuidString       scMarkupCode;
        boolean             isShippingCost;
        LineNum             parentLineNum;
        Amount              tmpValue, lineMarkup;
        Qty                 markupQty;

        scMarkupCode   = MarkupTable::find(MarkupModuleType::Cust, _markupTrans.MarkupCode).SC_MarkupCode;
        isShippingCost = scMarkupCode && strscan(_markupTrans.MarkupCode, #dlvCost, 1, 7);

        //Do not show auto charges with a zero value. Except of shipping method
        if(this.skipMiscCharges(_markupTrans, isShippingCost))
        {
            return;
        }

        salesLineNode  = salesLinesNode.appendChild(resultXml.createElement(#salesLine));
        _chargeLineNum += _markupTrans.LineNum * 0.01;        
            
        this.addFieldValue(#id, salesLineNode, scMarkupCode);
        this.addFieldValue(#lineNo, salesLineNode, _chargeLineNum * 10000);
        this.addFieldValue(#serviceChargeId, salesLineNode, _markupTrans.MarkupCode);
        this.addFieldValue(#productId, salesLineNode, _markupTrans.MarkupCode);

        switch(_buffer.TableId)
        {
            case tablenum(SalesQuotationLine):
                salesQuotationLineLocal = _buffer as SalesQuotationLine;
                lineMarkup              = salesQuotationLineLocal.LineAmount;
                markupQty               = salesQuotationLineLocal.SalesQty;
                parentLineNum           = salesQuotationLineLocal.LineNum * 10000;
                this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(salesQuotationLineLocal.inventDim(), salesQuotationLineLocal.ItemId, true));
                break;
            case tablenum(salesLine):
                salesLineLocal = _buffer as SalesLine;
                lineMarkup     = salesLineLocal.LineAmount;
                markupQty      = salesLineLocal.SalesQty;
                parentLineNum  = salesLineLocal.LineNum * 10000;
                this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(salesLineLocal.inventDim(), salesLineLocal.ItemId, true));
                break;
            case tablenum(custInvoiceTrans):
                custInvoiceTrans = _buffer as CustInvoiceTrans;
                lineMarkup       = custInvoiceTrans.LineAmount;
                markupQty        = custInvoiceTrans.Qty;
                parentLineNum = custInvoiceTrans.LineNum * 10000;
                this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(custInvoiceTrans.inventDim(), custInvoiceTrans.ItemId, true));
                break;
        }
            
        tmpStr = LanguageTxt::find(tablenum(MarkupTable), _markupTrans.markupTable().RecId, languageId).Txt;
        tmpStr = tmpStr ? tmpStr : _markupTrans.Txt;

        tmpValue = this.calcMiscChargeValue(_markupTrans, markupQty ? markupQty : 1, lineMarkup ? lineMarkup : totalBalance);
            
        this.addFieldValue(#productTitle, salesLineNode, tmpStr);
        this.addFieldValue(#title, salesLineNode, tmpStr);
        this.addFieldValue(#quantity, salesLineNode, 1);
        this.addFieldValue(#price, salesLineNode, tmpValue);
        this.addFieldValue(#taxPercent, salesLineNode, 0);
        this.addFieldValue(#discountAmount, salesLineNode, 0);
        this.addFieldValue(#discountPercent, salesLineNode, 0);
        this.addFieldValue(#lineAmount, salesLineNode, tmpValue);
        this.addFieldValue(#parentLineNo, salesLineNode, parentLineNum ? this.convertAny2Str(parentLineNum) : '');
        this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
        this.addFieldValue(#lineType, salesLineNode, isShippingCost ? #shippingcosts : scMarkupCode ? #paymentcosts : #service);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMiscCharges</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean skipMiscCharges(MarkupTrans _markupTrans, boolean _isShippingCost)
    {               
        return webShopsTable.DisableAutoCharges && !_markupTrans.ledgerAccountAmount(-_markupTrans.Value) && !_isShippingCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMiscChargeValue</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Amount calcMiscChargeValue(MarkupTrans _markupTrans, Qty _qty, AmountCur _value)
    {
        Amount value;
        
        value = Markup::calcTrans(_markupTrans, _qty, _value, _value, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 0, '', false, _markupTrans.InterCompanyMarkupUseValue);

        return _markupTrans.ledgerAccountAmount(-value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuoteResponseAddress</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addQuoteResponseAddress(XmlNode _parentNode, LogisticsPostalAddress  _address, String50 _addressType)
    {
        LogisticsAddressCountryRegionName addressCountryName;        
        
        switch(_addressType)
        {
            case #sellToAddress:
                this.addFieldValue(#bigName, _parentNode, custTable ? custTable.Name() : smmBusRelTable.Name());
                this.addFieldValue(#customerId, _parentNode, custTable.AccountNum);
                this.addFieldValue(#contactId, _parentNode, custTable.ContactPersonId);
                this.addFieldValue(#contactName, _parentNode, ContactPerson::find(custTable.ContactPersonId).personName());
                break;
            case #billToAddress:
                this.addFieldValue(#bigName, _parentNode, salesQuotationTable.SC_BillToName);
                this.addFieldValue(#customerId, _parentNode, salesQuotationTable.InvoiceAccount);
                this.addFieldValue(#contactId, _parentNode, salesQuotationTable.ContactPersonId);
                this.addFieldValue(#contactName, _parentNode, ContactPerson::find(salesQuotationTable.ContactPersonId).personName());
                break;
            case #shipToAddress:
                this.addFieldValue(#id, _parentNode, salesQuotationTable.DeliveryPostalAddress);
                this.addFieldValue(#bigName, _parentNode, salesQuotationTable.DeliveryName);

                //add extra fields
                this.addSavedCustomFields(_parentNode, _address, true);
                this.addExtraFieldsGlobal(_parentNode, shippingAddressExtraFields, _address);
                break;
        }
        
        this.addFieldValue(#address, _parentNode, this.splitBeforeSeparator(_address.Street, '\n'));
        this.addFieldValue(#address2, _parentNode, this.splitAfterSeparator(_address.Street, '\n'));
        this.addFieldValue(#city, _parentNode, _address.City);
        this.addFieldValue(#zipCode, _parentNode, _address.ZipCode);
        this.addFieldValue(#countryId, _parentNode, LogisticsAddressCountryRegion::find(_address.CountryRegionId).ISOcode);
        
        addressCountryName = LogisticsAddressCountryRegionTranslation::find(_address.CountryRegionId, languageId).ShortName;
        addressCountryName = !addressCountryName || strContains(addressCountryName, '@') ? LogisticsAddressCountryRegion::find(_address.CountryRegionId).displayName() : addressCountryName;
        this.addFieldValue(#countryName, _parentNode, addressCountryName);
        this.addFieldValue(#state, _parentNode, _address.State);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuoteSuppItem</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addQuoteSuppItem()
    {
        SuppItem_SalesQuotation suppItem = SuppItem_SalesQuotation::constuct();
        List                    tmpSuppItemlist;
        ListEnumerator          listEnumerator;
        TmpSuppItem             tmpSuppItem;
        InventDim               inventDim;        
        
        if(!webShopsTable.DisableSuppItems)
        {
            infolog.clear(0);
            suppItem.parmSalesPurchTable(salesQuotationTable);
            suppItem.createTmpSuppItem();
            
            tmpSuppItemlist = List::create(suppItem.getPackedTmpSuppItemList());
            listEnumerator  = tmpSuppItemlist.getEnumerator();
            
            while (listEnumerator.moveNext())
            {
                tmpSuppItem     = listEnumerator.current();
                inventTable     = InventTable::find(tmpSuppItem.ItemId);
                lineInventDimId = tmpSuppItem.InventDimId; //lineInventDimId used in isLineOrderable
                
                if(this.validateSuppItem(tmpSuppItem))
                {                    
                    if(this.findDuplicateSuppItem(tmpSuppItem))
                    {
                        continue;
                    }
                    
                    salesQuotationLine.clear();
                    salesQuotationLine.initFromSalesQuotationTable(salesQuotationTable);
                    salesQuotationLine.initFromTmpSuppItem(tmpSuppItem);
                    
                    inventDim = salesQuotationLine.inventDim();
                    
                    if(!inventDim.InventSiteId || !inventDim.InventLocationId)
                    {
                        inventDim = this.setDefaultSiteWarehouse(inventTable, inventDim);
                    }
                    
                    salesQuotationLine.setInventDimIdFromInventDim(inventDim);
                    
                    salesQuotationLine.ProjTransType         = QuotationProjTransType::Item;
                    salesQuotationLine.SC_SuppItem           = NoYes::Yes;
                    salesQuotationLine.SC_SuppAttachRecId    = tmpSuppItem.AttachRecId;
                    salesQuotationLine.SC_SuppItemTableRecid = tmpSuppItem.SuppItemTableRecid;
                    salesQuotationLine.createLine();

                    updateLineCon += salesQuotationLine.RecId; //Big basket functionality                    

                    infolog.clear(0);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSuppItem</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean validateSuppItem(TmpSuppItem _tmpSuppItem)
    {        
        return _tmpSuppItem && _tmpSuppItem.Include && this.isLineOrderable(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDuplicateSuppItem</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean findDuplicateSuppItem(TmpSuppItem _tmpSuppItem)
    {
        boolean ret; 

        switch(_tmpSuppItem.AttachTableId)
        {
            case tableNum(SalesQuotationLine):
                select firstOnly RecId from salesQuotationLine
                    where salesQuotationLine.QuotationId == _tmpSuppItem.SalesPurchId &&
                          salesQuotationLine.SC_SuppAttachRecId == _tmpSuppItem.AttachRecId &&
                          salesQuotationLine.SC_SuppItemTableRecid == _tmpSuppItem.SuppItemTableRecid;

                ret = salesQuotationLine || SalesQuotationLine::findInventTransId(_tmpSuppItem.InventTransId).SC_SuppItem;
                break;

            case tableNum(SalesLine):
                select firstOnly RecId from salesLine
                    where salesLine.SalesId == _tmpSuppItem.SalesPurchId &&
                            salesLine.SC_SuppAttachRecId == _tmpSuppItem.AttachRecId &&
                            salesLine.SC_SuppItemTableRecid == _tmpSuppItem.SuppItemTableRecid;

                ret = salesLine || SalesLine::findInventTransId(_tmpSuppItem.InventTransId).SC_SuppItem;
                break;
        }
                    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRetailDiscountsLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addRetailDiscountsLines()
    {
        SalesLine               saleslineLocal;
        RetailSalesDiscountLine retailSalesDiscountLine;
        RetailPeriodicDiscount  retailPeriodicDiscount;        

        while select ItemId, LineNum from saleslineLocal
            where saleslineLocal.SalesId == salesTable.SalesId
            join PeriodicDiscountOfferId from retailSalesDiscountLine
                where retailSalesDiscountLine.InventTransId == saleslineLocal.InventTransId &&
                      retailSalesDiscountLine.PeriodicDiscountOfferId
        {
            salesLineNode          = salesLinesNode.appendChild(resultXml.createElement(#salesLine));
            retailPeriodicDiscount = RetailPeriodicDiscount::findByOfferId(retailSalesDiscountLine.PeriodicDiscountOfferId);

            this.addFieldValue(#lineNo, salesLineNode, saleslinelocal.LineNum * 10000 + 1);
            this.addFieldValue(#productId, salesLineNode, saleslinelocal.ItemId);
            this.addFieldValue(#variantId, salesLineNode, newGuid());
            this.addFieldValue(#productTitle, salesLineNode, retailPeriodicDiscount.Name);
            this.addFieldValue(#title, salesLineNode, retailPeriodicDiscount.Name);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#price, salesLineNode, 0);
            this.addFieldValue(#taxPercent, salesLineNode, 0);
            this.addFieldValue(#discountAmount, salesLineNode, 0);
            this.addFieldValue(#discountPercent, salesLineNode, 0);            
            this.addFieldValue(#lineAmount, salesLineNode, 0);
            this.addFieldValue(#parentLineNo, salesLineNode, saleslinelocal.LineNum * 10000);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, #extendedtext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSanaDiscountsLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addSanaDiscountsLines(boolean _quote = false)
    {
        Name                    discName;
        SC_WebshopDiscountTable webshopDiscountTable;

        if(!webShopsTable.DisableSanaDiscounts && (_quote ? salesQuotationLine.SC_MixMatchDiscountId : salesLine.SC_MixMatchDiscountId))
        {
            discName      = SC_MixMatchDiscountTable::find(webShopsTable.WebShopId, _quote ? salesQuotationLine.SC_MixMatchDiscountId : salesLine.SC_MixMatchDiscountId).Name;
            salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

            this.addFieldValue(#lineNo, salesLineNode, (_quote ? salesQuotationLine.LineNum : salesLine.LineNum) * 10000 + 1);
            this.addFieldValue(#productId, salesLineNode, _quote ? salesQuotationLine.ItemId : salesLine.ItemId);
            this.addFieldValue(#productTitle, salesLineNode, discName);
            this.addFieldValue(#title, salesLineNode, discName);
            this.addFieldValue(#parentLineNo, salesLineNode, (_quote ? salesQuotationLine.LineNum : salesLine.LineNum) * 10000);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, #extendedtext);
        }

        if(!webShopsTable.DisableSanaDiscounts && (_quote ? salesQuotationLine.LinePercent : salesLine.LinePercent))
        {
            webshopDiscountTable = SC_WebshopDiscountTable::findActive(webShopsTable.WebShopId, custTable.Currency, custTable.LineDisc);

            if(webshopDiscountTable)
            {
                salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

                this.addFieldValue(#lineNo, salesLineNode, (_quote ? salesQuotationLine.LineNum : salesLine.LineNum) * 10000 + 1);
                this.addFieldValue(#productId, salesLineNode, _quote ? salesQuotationLine.ItemId : salesLine.ItemId);
                this.addFieldValue(#productTitle, salesLineNode, strFmt('%1 (%2\%)', webshopDiscountTable.Name, webshopDiscountTable.DiscPercent));
                this.addFieldValue(#title, salesLineNode, strFmt('%1 (%2\%)', webshopDiscountTable.Name, webshopDiscountTable.DiscPercent));
                this.addFieldValue(#parentLineNo, salesLineNode, (_quote ? salesQuotationLine.LineNum : salesLine.LineNum) * 10000);
                this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
                this.addFieldValue(#quantity, salesLineNode, 1);
                this.addFieldValue(#lineType, salesLineNode, #extendedtext);
            }
        } 

        if(_quote ? (!salesQuotationLine.ItemId && !salesQuotationLine.SalesPrice) : (!salesLine.ItemId && !salesLine.SalesPrice))
        {
            salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

            this.addFieldValue(#lineNo, salesLineNode, (_quote ? salesQuotationLine.LineNum : salesLine.LineNum) * 10000 + 1);
            this.addFieldValue(#productId, salesLineNode, #service);
            this.addFieldValue(#productTitle, salesLineNode, 'The price is to be discussed.');
            this.addFieldValue(#title, salesLineNode, 'The price is to be discussed.');
            this.addFieldValue(#parentLineNo, salesLineNode, (_quote ? salesQuotationLine.LineNum : salesLine.LineNum) * 10000);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, #extendedtext);
        }

        if(strscan(salesLine.Name, 'Gift card used:', 1, 13))
        {
            salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

            this.addFieldValue(#lineNo, salesLineNode, salesLine.LineNum * 10000 + 1);
            this.addFieldValue(#productId, salesLineNode, salesLine.ItemId);
            this.addFieldValue(#productTitle, salesLineNode, salesLine.Name);
            this.addFieldValue(#title, salesLineNode, salesLine.Name);
            this.addFieldValue(#parentLineNo, salesLineNode, salesLine.LineNum * 10000);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, #extendedtext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGiftCardTextLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addGiftCardTextLines()
    {
        if(!webShopsTable.DisableSanaDiscounts && InventTable::find(salesLine.ItemId).SC_GiftCard) //return gift card number with line as extended text
        {
            salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

            this.addFieldValue(#lineNo, salesLineNode, salesLine.LineNum * 10000 + 1);
            this.addFieldValue(#productId, salesLineNode, salesLine.ItemId);
            this.addFieldValue(#productTitle, salesLineNode, salesLine.Name);
            this.addFieldValue(#title, salesLineNode, salesLine.Name);
            this.addFieldValue(#parentLineNo, salesLineNode, salesLine.LineNum * 10000);
            this.addFieldValue(#isReadOnlyLine, salesLineNode, 1);
            this.addFieldValue(#quantity, salesLineNode, 1);
            this.addFieldValue(#lineType, salesLineNode, #extendedtext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesMiscCharges</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addSalesMiscCharges(Common _buffer, LineNum _chargeLineNum = 0.0, boolean _persistedBasket = false)
    {
        MarkupTrans markupTrans;        
        SalesLine   salesLineLocal;                

        if(_buffer.TableId == tableNum(SalesLine) && _persistedBasket)
        {
            salesLineLocal = _buffer as SalesLine;
            _buffer = SalesLine::findInventTransId(salesLineLocal.InventTransId);
        }

        if(_buffer)
        {
            while select markupTrans
                   where markupTrans.TransTableId == _buffer.TableId &&
                         markupTrans.TransRecId   == _buffer.RecId &&
                        !markupTrans.MCRCouponMarkup
            {
                this.initDefaultMiscChargesFields(markupTrans, _buffer, _chargeLineNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesResponseAddress</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addSalesResponseAddress(XmlNode _parentNode, LogisticsPostalAddress  _address, String50 _addressType, Common _buffer = null)
    {
        LogisticsAddressCountryRegionName addressCountryName;        

        switch(_addressType)
        {
            case #sellToAddress:
                this.addFieldValue(#bigName, _parentNode, custTable.Name());
                this.addFieldValue(#customerId, _parentNode, custTable.AccountNum);
                this.addFieldValue(#contactId, _parentNode, custTable.ContactPersonId);
                this.addFieldValue(#contactName, _parentNode, ContactPerson::find(custTable.ContactPersonId).personName());
                break;
            case #billToAddress:
                this.addFieldValue(#bigName, _parentNode, _buffer ? this.convertAny2Str(_buffer.(fieldName2id(_buffer.TableId, 'SC_BillToName'))) : salesTable.SC_BillToName);
                this.addFieldValue(#customerId, _parentNode, _buffer ? this.convertAny2Str(_buffer.(fieldName2id(_buffer.TableId, 'InvoiceAccount'))) : salesTable.InvoiceAccount);
                this.addFieldValue(#contactId, _parentNode, _buffer ? this.convertAny2Str(_buffer.(fieldName2id(_buffer.TableId, 'ContactPersonId'))) : salesTable.ContactPersonId);
                this.addFieldValue(#contactName, _parentNode, ContactPerson::find(_buffer ? this.convertAny2Str(_buffer.(fieldName2id(_buffer.TableId, 'ContactPersonId'))) : salesTable.ContactPersonId).personName());
                break;
            case #shipToAddress:
                this.addFieldValue(#id, _parentNode, _address.RecId);
            
                if(_buffer)
                {
                    this.addFieldValue(#bigName, _parentNode, this.convertAny2Str(_buffer.(fieldName2id(_buffer.TableId, 'DeliveryName'))));
                }
                else
                {
                    this.addFieldValue(#bigName, _parentNode, salesTable.DeliveryName ? salesTable.DeliveryName : _address.PostBox);
                }

                //add extra fields
                this.addSavedCustomFields(_parentNode, _address, true);
                this.addExtraFieldsGlobal(_parentNode, shippingAddressExtraFields, _address);
                break;
        }

        this.addFieldValue(#address, _parentNode, this.splitBeforeSeparator(_address.Street, '\n'));
        this.addFieldValue(#address2, _parentNode, this.splitAfterSeparator(_address.Street, '\n'));
        this.addFieldValue(#city, _parentNode, _address.City);
        this.addFieldValue(#zipCode, _parentNode, _address.ZipCode);
        this.addFieldValue(#countryId, _parentNode, LogisticsAddressCountryRegion::find(_address.CountryRegionId).ISOcode);

        addressCountryName = LogisticsAddressCountryRegionTranslation::find(_address.CountryRegionId, languageId).ShortName;
        addressCountryName = !addressCountryName || strContains(addressCountryName, '@') ? LogisticsAddressCountryRegion::find(_address.CountryRegionId).displayName() : addressCountryName;
        this.addFieldValue(#countryName, _parentNode, addressCountryName);
        this.addFieldValue(#state, _parentNode, _address.State);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRetailCoupon</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void applyRetailCoupon()
    {
        RetailCouponUsage       retailCouponUsage;
        RetailCouponCodeTable   retailCouponCodeTable;        
        RetailChannelTable      retailChannelTable;
                
        select firstonly retailCouponCodeTable
            where retailCouponCodeTable.CouponCode == lineProductId &&
                  retailCouponCodeTable.Status == RetailCouponStatus::Active &&
                 (retailCouponCodeTable.ValidFrom <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !retailCouponCodeTable.ValidFrom) &&
                 (retailCouponCodeTable.ValidTo >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !retailCouponCodeTable.ValidTo);

        if(retailCouponCodeTable)
        {
            retailChannelTable = this.getRetailChannelTable();

            delete_from retailCouponUsage
                where retailCouponUsage.SalesId == salesTable.SalesId;

            retailCouponUsage.CouponCodeId      = retailCouponCodeTable.CouponCodeId;
            retailCouponUsage.SalesId           = salesTable.SalesId;
            retailCouponUsage.CustomerAccount   = salesTable.InvoiceAccount;
            retailCouponUsage.RetailChannelId   = retailChannelTable.RetailChannelId;
            retailCouponUsage.Status            = RetailCouponUsageStatus::NotApplied;
            retailCouponUsage.UsageId           = newGuid();

            if(retailCouponUsage.validateWrite())
            {
                retailCouponUsage.insert();   
             
                if(lineType == #externalcoupon)
                {
                    externalCouponUsed = true;
                }     
                promotionCouponUsed = true;
            }
        }                    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesSuppItem</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addSalesSuppItem()
    {
        SuppItem_Sales  suppItem = SuppItem_Sales::constuct();
        List            tmpSuppItemlist;
        ListEnumerator  listEnumerator;
        TmpSuppItem     tmpSuppItem;
        SalesLine       baseSalesLine;
        InventDim       inventDim;        

        if(!webShopsTable.DisableSuppItems)
        {
            infolog.clear(0);
            suppItem.parmSalesPurchTable(salesTable);
            suppItem.createTmpSuppItem();

            tmpSuppItemlist = List::create(suppItem.getPackedTmpSuppItemList());
            listEnumerator  = tmpSuppItemlist.getEnumerator();

            while (listEnumerator.moveNext())
            {
                tmpSuppItem     = listEnumerator.current();
                inventTable     = InventTable::find(tmpSuppItem.ItemId);
                lineInventDimId = tmpSuppItem.InventDimId; //lineInventDimId used in isLineOrderable

                if(this.validateSuppItem(tmpSuppItem))
                {
                    if(this.findDuplicateSuppItem(tmpSuppItem))
                    {
                        continue;
                    }                
                
                    baseSalesLine = SalesLine::findInventTransId(tmpSuppItem.InventTransId);

                    salesLine.clear();
                    salesLine.initFromSalesTable(salesTable);
                    salesLine.initFromTmpSuppItem(tmpSuppItem);

                    inventDim = salesLine.inventDim();

                    if(!inventDim.InventSiteId || !inventDim.InventLocationId)
                    {
                        inventDim = this.setDefaultSiteWarehouse(inventTable, inventDim);
                    }

                    salesLine.setInventDimIdFromInventDim(inventDim);

                    salesLine.ReceiptDateRequested    = baseSalesLine.ReceiptDateRequested;
                    salesLine.ShippingDateRequested   = baseSalesLine.ShippingDateRequested;
                    salesLine.ReceiptDateConfirmed    = baseSalesLine.ReceiptDateConfirmed;
                    salesLine.ShippingDateConfirmed   = baseSalesLine.ShippingDateConfirmed;
                    salesLine.DeliveryDateControlType = SalesDeliveryDateControlType::None;
                    salesLine.SC_SuppItem             = NoYes::Yes;
                    salesLine.SC_SuppAttachRecId      = baseSalesLine.RecId;
                    salesLine.SC_SuppItemTableRecid   = tmpSuppItem.SuppItemTableRecid;

                    if(salesTable.SC_IsPersistedBasket)
                    {
                        ttsbegin;
                        salesLine.createLine();
                        ttscommit;
                    }
                    else
                    {
                        salesLine.createLine();
                    }


                    updateLineCon += salesLine.RecId; //Big basket functionality

                    infolog.clear(0);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipTrackingData</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addShipTrackingData(XmlNode _parentNode, CustPackingSlipJour _custPackingSlipJour = null, SalesId _salesId = '')
    {
        SalesPackingSlipTrackingInformation         salesPackingSlipTrackingInformation;
        SalesPackingSlipTrackingInformationStaging  salesPackingSlipTrackingInformationStaging;
        ShipCarrierTrackingNum                      trackingNum;
        SalesPackingSlipTrackingURL                 trackingURL;   
        WHSShipmentTable                            WHSShipmentTable;

        if(_custPackingSlipJour || _salesId)
        {
            select firstonly ProNum, CarrierCode from WHSShipmentTable
                where WHSShipmentTable.OrderNum == (_custPackingSlipJour ? _custPackingSlipJour.SalesId : _salesId) &&
                      WHSShipmentTable.WorkTransType == WHSWorkTransType::Sales;

            if(WHSShipmentTable.ProNum)
            {
                trackingNum = WHSShipmentTable.ProNum;
                trackingURL = TMSCarrier::find(WHSShipmentTable.CarrierCode).TrackingURL;
                trackingURL = strContains(trackingURL, '%1') ? strFmt(trackingURL, trackingNum) : trackingURL;
            }
            else
            {
                if(!_custPackingSlipJour)
                {
                    select firstOnly SalesId, PackingSlipId from _custPackingSlipJour
                           order by PackingSlipId DESC
                           where _custPackingSlipJour.SalesId == _salesId;
                }

                select firstOnly TrackingNumber, TrackingURL from salesPackingSlipTrackingInformation
                           where salesPackingSlipTrackingInformation.SalesId       == _custPackingSlipJour.SalesId &&
                                 salesPackingSlipTrackingInformation.PackingSlipId == _custPackingSlipJour.PackingSlipId &&
                                 salesPackingSlipTrackingInformation.SalesId;

                if(!salesPackingSlipTrackingInformation)
                {
                    select firstOnly TrackingNumber, TrackingURL from salesPackingSlipTrackingInformationStaging
                           where salesPackingSlipTrackingInformationStaging.SalesOrderNumber  == _custPackingSlipJour.SalesId &&
                                 salesPackingSlipTrackingInformationStaging.PackingSlipNumber == _custPackingSlipJour.PackingSlipId &&
                                 salesPackingSlipTrackingInformationStaging.SalesOrderNumber;

                    trackingNum = salesPackingSlipTrackingInformationStaging.TrackingNumber;
                    trackingURL = salesPackingSlipTrackingInformationStaging.TrackingURL;
                }
                else
                {
                    trackingNum = salesPackingSlipTrackingInformation.TrackingNumber;
                    trackingURL = salesPackingSlipTrackingInformation.TrackingURL;
                }
            }
        }

        if(trackingNum)
        {
            this.addFieldValue(#shippingTrackingNumber, _parentNode, trackingNum, true);
        }

        if(trackingURL)
        {
            trackingURL = strContains(trackingURL, '%1') ? strFmt(trackingURL, trackingNum) : trackingURL;
            this.addFieldValue(#shippingTrackingLink, _parentNode, trackingURL, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxes</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addTaxes(XmlNode _parentNode, boolean _quote = false)
    {        
        TmpTaxWorkTrans tmpTaxWorkTrans;
        XmlNode         taxlines, taxline;        

        if(!webShopsTable.DisableTax)
        {
            taxlines        = _parentNode.appendChild(resultXml.createElement(#taxLines));
            tmpTaxWorkTrans = this.calcOrderTaxes(_quote);

            while select TaxCode, sum(TaxBaseAmountOrig), sum(TaxAmount) from tmpTaxWorkTrans
                   group by TaxCode
                   where tmpTaxWorkTrans.SourceRegulateAmountCur
            {
                taxline = taxlines.appendChild(resultXml.createElement(#taxLine));

                this.initDefaultTaxFields(taxline, tmpTaxWorkTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultTaxFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultTaxFields(XmlNode _taxLineNode, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TaxTable taxTable = TaxTable::find(_tmpTaxWorkTrans.TaxCode);
        LanguageTxtText taxTranslation = LanguageTxt::find(taxTable.TableId, taxTable.RecId, languageId).Txt;

        this.addFieldValue(#taxId, _taxLineNode, _tmpTaxWorkTrans.TaxCode);
        this.addFieldValue(#description, _taxLineNode, taxTranslation ? taxTranslation : taxTable.TaxName);
        this.addFieldValue(#percent, _taxLineNode, _tmpTaxWorkTrans.TaxBaseAmountOrig);
        this.addFieldValue(#amount, _taxLineNode, _tmpTaxWorkTrans.TaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOrderTaxes</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected TmpTaxWorkTrans calcOrderTaxes(boolean _quote = false)
    {
        TaxSales          salesTax;
        TaxSalesQuotation quoteTax;
        TmpTaxWorkTrans   tmpTaxWorkTrans;

        if(_quote)
        {
            quoteTax = salesQuotationTotals.tax();
        }
        else
        {
            salesTax = salesTotals.tax();
        }

        tmpTaxWorkTrans.setTmpData(_quote ? quoteTax.tmpTaxWorkTrans() : salesTax.tmpTaxWorkTrans());        

        while select tmpTaxWorkTrans
                   where tmpTaxWorkTrans.SourceRegulateAmountCur
        {
            tmpTaxWorkTrans.TaxBaseAmountOrig = tmpTaxWorkTrans.showTaxValue();
            tmpTaxWorkTrans.TaxAmount = tmpTaxWorkTrans.SourceRegulateAmountCur * tmpTaxWorkTrans.taxChangeDisplaySign(new Map(Types::String, Types::Enum));
            tmpTaxWorkTrans.update();
        }

        return tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDiscountExclPromotion</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Amount calcDiscountExclPromotion(boolean _inclTax)
    {
        return subTotal - ((_inclTax ? totalInclTax : totalExclTax) + promotionCalculated - totalPaymentShipmentCost) + totalRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryMiscCharges</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Qty calcHistoryMiscCharges(CustInvoiceJour _custInvoiceJour)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;        

        select sum(Value) from markupTrans
                   where markupTrans.TransTableId == _custInvoiceJour.TableId &&
                         markupTrans.TransRecId   == _custInvoiceJour.RecId
               exists join TableId from markupTable
                   where markupTable.ModuleType == MarkupModuleType::Cust &&
                         markupTable.MarkupCode == markupTrans.MarkupCode &&
                         markupTable.SC_MarkupCode;

        return markupTrans.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CalculateBasket</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument CalculateBasket(XmlDocument _request)
    {
        boolean ret;                

        this.createHeaderXml();

        this.getParameters(_request);

        notInStockLines        = resultNode.appendChild(resultXml.createElement(#notInStockLines));
        decreasedQuantityLines = resultNode.appendChild(resultXml.createElement(#decreasedQuantityLines));
        nonOrderableLines      = resultNode.appendChild(resultXml.createElement(#nonOrderableLines));     
        isBasketCalculation    = true;

        ttsbegin;
        this.setSalesParametersForBasketCalc();

        if(documentType == #quote || accountType == #contact)
        {
            ret = this.createQuotationTable(true);
        }
        else
        {
            ret = this.createSalesTable(true);
        }

        if(ret)
        {
            this.getOrderLinesParams();
        }

        if(salesQuotationTable)
        {
            this.addQuoteSuppItem();
            this.calcQuoteMixAndMatchDiscounts();

            if(!webShopsTable.DisableMultilineDiscounts)
            {
                salesQuotationTable.updateMultiLineDisc(); //calc multiline disc
            }

            if(!webShopsTable.DisableTotalDiscounts)
            {
                salesQuotationTable.updateFinalDisc(); //calc total order disc
            }            
            
            this.createCalcQuoteRespons();
            this.setWebshopDataMappingGetAPI('CalculateBasket', salesQuotationTable);
        }

        if(salesTable)
        {
            this.addSalesSuppItem();            

            if(!this.isRetailEnabled())
            {
                this.calcSalesMixAndMatchDiscounts();

                if(!webShopsTable.DisableMultilineDiscounts)
                {
                    salesTable.updateMultiLineDisc();
                }

                if(!webShopsTable.DisableTotalDiscounts)
                {
                    salesTable.updateFinalDisc();
                }                
            }

            this.applyGiftCard();

            if(!webShopsTable.DisableTieredCharges)
            {
                salesTable.createMarkupTrans(false, true); //calc tiered charges
            }
            
            this.createCalcSalesRespons();
            this.setWebshopDataMappingGetAPI('CalculateBasket', salesTable);
        }
        ttsabort;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSalesTotals</Name>
				<Source><![CDATA[
    // method calculate totals
    // for customers who not pay taxes, emulating calculation with tax
    // for intuitive display on webshop
    [HookableAttribute(true), Replaceable]    
    protected void calculateSalesTotals(boolean _quote = false)
    {
        #OCCRetryCount
        MarkupTrans markupTrans;

        try
        {
            if(_quote)
            {
                salesQuotationTotals = SalesQuotationTotals::construct(salesQuotationTable);
                salesQuotationTotals.calc();

                subTotal            = salesQuotationTotals.totalBalance() + salesQuotationTotals.totalMarkup() - totalPaymentShipmentCost;
                totalBalance        = salesQuotationTotals.totalBalance();
                totalRoundOff       = salesQuotationTotals.totalRoundOff();
                totalInvoiceDisc    = salesQuotationTotals.totalEndDisc();
                totalExclTax        = salesQuotationTotals.totalAmount() - salesQuotationTotals.totalTaxAmount();
                totalInclTax        = salesQuotationTotals.totalAmount();
                totalTaxAmount      = salesQuotationTotals.totalTaxAmount();
                totalCashDisc       = CustTable::find(salesQuotationTable.InvoiceAccount).UseCashDisc != UseCashDisc::Never ? salesQuotationTotals.totalCashDisc() : 0;
                promotionCalculated = salesQuotationTable.SC_PromotionAmount;

                if(salesQuotationTable.InclTax)
                {
                    salesQuotationTable.InclTax = NoYes::No;

                    if(salesQuotationTable.SC_PromotionValue)
                    {
                        salesQuotationTable.modifiedField(fieldnum(salesQuotationTable, SC_PromotionValue));
                    }

                    subTotal = (select sum(LineAmount) from salesQuotationLine where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId && salesQuotationLine.ItemId).LineAmount;
                    subTotal           += this.calcOrderMiscChargesInclTax(true) - totalPaymentShipmentCost;
                    promotionCalculated = salesQuotationTable.SC_PromotionAmount;

                    salesQuotationTable.InclTax = NoYes::Yes;
                }
            }
            else
            {
                salesTotals = SalesTotals::construct(salesTable);
                salesTotals.calc();

                if(salesTable.custTable_CustAccount().shouldEstimateBeCalculated())
                {
                    ttsbegin;
                    salesTable.selectForUpdate(true);
                    salesTable.setEstimate(salesTotals);
                    salesTable.doUpdate();
                    ttsCommit;
                }

                subTotal            = salesTotals.totalBalance() + salesTotals.totalMarkup() - totalPaymentShipmentCost;
                totalBalance        = salesTotals.totalBalance();
                totalRoundOff       = salesTotals.totalRoundOff();
                totalInvoiceDisc    = salesTotals.totalEndDisc();
                totalExclTax        = salesTotals.totalAmount() - salesTotals.totalTaxAmount();
                totalInclTax        = salesTotals.totalAmount();
                totalTaxAmount      = salesTotals.totalTaxAmount();
                totalCashDisc       = CustTable::find(salesTable.InvoiceAccount).UseCashDisc != UseCashDisc::Never ? salesTotals.totalCashDisc() : 0;
                promotionCalculated = salesTable.SC_PromotionAmount;

                if(salesTable.InclTax)
                {
                    salesTable.InclTax = NoYes::No;

                    if(salesTable.SC_PromotionValue)
                    {
                        salesTable.type().modifiedField(fieldnum(salesTable, SC_PromotionValue));
                    }

                    subTotal = (select sum(LineAmount) from salesLine where salesLine.SalesId == salesTable.salesId && salesLine.ItemId).LineAmount;
                    subTotal           += this.calcOrderMiscChargesInclTax() - totalPaymentShipmentCost;
                    promotionCalculated = salesTable.SC_PromotionAmount;

                    salesTable.InclTax = NoYes::Yes;
                }

                if(this.isRetailEnabled())
                {
                    select firstOnly Value from markupTrans
                    where markupTrans.TransTableId == tablenum(SalesTable) &&
                            markupTrans.TransRecId   == salesTable.RecId &&
                            markupTrans.MCRCouponMarkup;

                    promotionCalculated = markupTrans.Value;
                    subTotal           += promotionCalculated;
                }
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLinkAgreement</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean canLinkAgreement(AgreementLine _agreementLine, SalesLine _salesLine)
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        SalesLine                       salesLineLocal;
        boolean                         ret = true;        

        salesLineLocal.data(_salesLine);
        salesLineLocal.initFromAgreementLine(_agreementLine);

        ret = this.checkInventSiteLocationId(salesLineLocal.inventDim());

        if(ret && (_agreementLine.AgreedReleaseLineMinAmount && _agreementLine.AgreedReleaseLineMinAmount > salesLineLocal.LineAmount) ||
                  (_agreementLine.AgreedReleaseLineMaxAmount && _agreementLine.AgreedReleaseLineMaxAmount < salesLineLocal.LineAmount))
        {
            ret = false;
        }

        ret = ret && salesLineLocal.ReceiptDateRequested <= _agreementLine.ExpirationDate;        
    
        if(ret && _agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
        {
            agreementLineQuantityCommitment  = _agreementLine as AgreementLineQuantityCommitment;

            ret = agreementLineQuantityCommitment.ProductUnitOfMeasure != '';
              
            ret = ret && (PdsGlobal::pdsIsCWItem(salesLineLocal.ItemId) ? _agreementLine.pdsCWQuantityCheckRemaining(salesLineLocal.SalesQty) : _agreementLine.checkRemaining(salesLineLocal.SalesQty));
        
            if(ret && _agreementLine.IsPriceInformationMandatory)
            {
                if(salesLineLocal.CurrencyCode != agreementLineQuantityCommitment.currencyCode() || salesLineLocal.PriceUnit != agreementLineQuantityCommitment.PriceUnit ||
                   salesLineLocal.SalesPrice != agreementLineQuantityCommitment.PricePerUnit || salesLineLocal.LineDisc != agreementLineQuantityCommitment.LineDiscountAmount)
                {
                    ret = false;
                }
            }
        }
        else if(ret && (_agreementLine.AgreementLineType == CommitmentType::ProductCategory || _agreementLine.AgreementLineType == CommitmentType::ProductRootCategory))
        {
            ret = this.isProductBelongCategory(_agreementLine.Category, InventTable::find(salesLine.ItemId).Product);
            ret = ret && _agreementLine.checkRemaining(salesLineLocal.LineAmount);
        }
        else
        {
            ret = ret && _agreementLine.checkRemaining(salesLineLocal.LineAmount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesPromotion</Name>
				<Source><![CDATA[
    [Replaceable]
    static void calcSalesPromotion(SalesTable _salestable)
    {
        Amount              balanceEndDisc;
        SalesLine           salesLine;
        SalesTotals         salesTotals;
        InventTableModule   inventTableModule;
        PriceParameters     priceParameters = PriceParameters::find();        

        if(_salestable.SC_PromotionAmount || _salestable.SC_PromotionValue)
        {
            ttsbegin;
            _salestable.SC_PromotionAmount      = 0;
            _salestable.SC_PromotionDiscPercent = 0;

            if(priceParameters.SalesEndAllAll)
            {
                select sum(LineAmount) from salesLine
                    where salesLine.SalesId == _salestable.SalesId &&
                          salesLine.ItemId
                    exists join TableId from inventTableModule
                        where inventTableModule.ItemId     == salesLine.ItemId &&
                              inventTableModule.ModuleType == ModuleInventPurchSales::Sales &&
                              inventTableModule.EndDisc    == NoYes::Yes;
                
                balanceEndDisc = salesLine.LineAmount;                                
                salesTotals    = SalesTotals::construct(_salestable);

                //fixed amount
                if(_salestable.SC_PromotionType == SC_DiscountType::Fixed)
                {
                    //no more than total amount
                    if(_salestable.SC_PromotionValue > balanceEndDisc)
                    {
                        _salestable.SC_PromotionValue = balanceEndDisc;
                    }

                    _salestable.SC_PromotionDiscPercent = balanceEndDisc ? 100 * _salestable.SC_PromotionValue / balanceEndDisc : 0;

                    //if order discount exist, then sum of discounts can't be more 100%
                    if(_salestable.SC_PromotionDiscPercent + _salestable.DiscPercent > 100)
                    {
                        salesTotals.calc();
                        _salestable.SC_PromotionDiscPercent = 100 - _salestable.DiscPercent;
                        _salestable.SC_PromotionValue       = CurrencyExchangeHelper::amount(_salestable.SC_PromotionDiscPercent * (_salestable.InclTax ? salesTotals.totalBalance() : balanceEndDisc) / 100, _salestable.CurrencyCode);
                    }
                }

                //percent
                if(_salestable.SC_PromotionType == SC_DiscountType::Percent)
                {
                    //no more than 100%
                    if(_salestable.SC_PromotionValue > 100)
                    {
                        _salestable.SC_PromotionValue = 100;
                    }

                    _salestable.SC_PromotionDiscPercent = _salestable.SC_PromotionValue;

                    //if order discount exist, then sum of discounts can't be more 100%
                    if(_salestable.SC_PromotionDiscPercent + _salestable.DiscPercent > 100)
                    {
                        _salestable.SC_PromotionDiscPercent = 100 - _salestable.DiscPercent;
                        _salestable.SC_PromotionValue       = _salestable.SC_PromotionDiscPercent;
                    }
                }

                //discPercent needed before calculation that why we need update twice
                //without real discPercent difference in 1 cent for priceIncTax can appear
                _salestable.DiscPercent += _salestable.SC_PromotionDiscPercent;

                if(_salestable.InclTax)
                {
                    _salestable.update();
                    salesTotals.calc();
                }

                _salestable.SC_PromotionAmount = CurrencyExchangeHelper::amount(_salestable.SC_PromotionDiscPercent * (_salestable.InclTax ? salesTotals.totalBalance() : balanceEndDisc) / 100, _salestable.CurrencyCode);
            }

            _salestable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuotePromotion</Name>
				<Source><![CDATA[
    [Replaceable]
    static void calcQuotePromotion(SalesQuotationTable _salesQuotationTable)
    {
        Amount                  balanceEndDisc;
        SalesQuotationLine      salesQuotationLine;
        SalesQuotationTotals    salesQuotationTotals;
        InventTableModule       inventTableModule;
        PriceParameters         priceParameters = PriceParameters::find();
        
        if(_salesQuotationTable.SC_PromotionAmount || _salesQuotationTable.SC_PromotionValue)
        {
            ttsbegin;
            _salesQuotationTable.SC_PromotionAmount      = 0;
            _salesQuotationTable.SC_PromotionDiscPercent = 0;

            if(priceParameters.SalesEndAllAll)
            {
                select sum(LineAmount) from salesQuotationLine
                    where salesQuotationLine.QuotationId == _salesQuotationTable.QuotationId &&
                          salesQuotationLine.ItemId
                    exists join TableId from inventTableModule
                        where inventTableModule.ItemId     == salesQuotationLine.ItemId &&
                              inventTableModule.ModuleType == ModuleInventPurchSales::Sales &&
                              inventTableModule.EndDisc    == NoYes::Yes;
                
                balanceEndDisc       = salesQuotationLine.LineAmount;
                salesQuotationTotals = SalesQuotationTotals::construct(_salesQuotationTable);

                //fixed amount
                if(_salesQuotationTable.SC_PromotionType == SC_DiscountType::Fixed)
                {
                    //no more than total amount
                    if(_salesQuotationTable.SC_PromotionValue > balanceEndDisc)
                    {
                        _salesQuotationTable.SC_PromotionValue = balanceEndDisc;
                    }

                    _salesQuotationTable.SC_PromotionDiscPercent = balanceEndDisc ? 100 * _salesQuotationTable.SC_PromotionValue / balanceEndDisc : 0;

                    //if order discount exist, then sum of discounts can't be more 100%
                    if(_salesQuotationTable.SC_PromotionDiscPercent + _salesQuotationTable.DiscPercent > 100)
                    {
                        salesQuotationTotals.calc();
                        _salesQuotationTable.SC_PromotionDiscPercent = 100 - _salesQuotationTable.DiscPercent;
                        _salesQuotationTable.SC_PromotionValue       = CurrencyExchangeHelper::amount(_salesQuotationTable.SC_PromotionDiscPercent * (_salesQuotationTable.InclTax ? SalesQuotationTotals.totalBalance() : balanceEndDisc) / 100, _salesQuotationTable.CurrencyCode);
                    }
                }

                //percent
                if(_salesQuotationTable.SC_PromotionType == SC_DiscountType::Percent)
                {
                    //no more than 100%
                    if(_salesQuotationTable.SC_PromotionValue > 100)
                    {
                        _salesQuotationTable.SC_PromotionValue = 100;
                    }

                    _salesQuotationTable.SC_PromotionDiscPercent = _salesQuotationTable.SC_PromotionValue;

                    //if order discount exist, then sum of discounts can't be more 100%
                    if(_salesQuotationTable.SC_PromotionDiscPercent + _salesQuotationTable.DiscPercent > 100)
                    {
                        _salesQuotationTable.SC_PromotionDiscPercent = 100 - _salesQuotationTable.DiscPercent;
                        _salesQuotationTable.SC_PromotionValue       = _salesQuotationTable.SC_PromotionDiscPercent;
                    }
                }

                //discPercent needed before calculation that why we need update twice
                //without real discPercent difference in 1 cent for priceIncTax can appear
                _salesQuotationTable.DiscPercent += _salesQuotationTable.SC_PromotionDiscPercent;

                if(_salesQuotationTable.InclTax)
                {
                    _salesQuotationTable.update();
                    salesQuotationTotals.calc();
                }

                _salesQuotationTable.SC_PromotionAmount = CurrencyExchangeHelper::amount(_salesQuotationTable.SC_PromotionDiscPercent * (_salesQuotationTable.InclTax ? salesQuotationTotals.totalBalance() : balanceEndDisc) / 100, _salesQuotationTable.CurrencyCode);
            }

            _salesQuotationTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimit</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean checkCreditLimit(XmlNode _parentNode, SalesTable _salesTable = salesTable, boolean _altResponse = false)
    {
        CustCreditLimit custCreditLimit;
        AmountMST       creditAvailable, orderBalance;

        if(!webShopsTable.DisableCreditLimit && (CustParameters::find().salesCheckCreditOnHeader() || _salesTable.custTable_InvoiceAccount().MandatoryCreditLimit))
        {
            custCreditLimit = CustCreditLimit::construct(_salesTable);     
            orderBalance    = B2bOnlinePayments == #payOnline ? totalInclTax - totalCashDisc : 0;
            creditAvailable = CurrencyExchangeHelper::curAmount(custCreditLimit.calcCreditAvailable(), _salesTable.currencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown);

            if(creditAvailable + orderBalance < 0)
            {
                if(_altResponse)
                {
                    _parentNode.appendChild(resultXml.createElement(#isBlocked)).innerText(CustParameters::find().CreditLineError == CreditLineErrorType::Warning ? #zero : #one);
                    _parentNode.appendChild(resultXml.createElement(#exceededCreditLimit)).innerText(this.convertAny2Str(abs(creditAvailable)));
                }
                else
                {
                    this.addFieldValue(#isBlocked, _parentNode, CustParameters::find().CreditLineError == CreditLineErrorType::Warning ? #zero : #one);
                    this.addFieldValue(#exceededCreditLimit, _parentNode, abs(creditAvailable));
                }
            }
        }

        return !(creditAvailable < 0 && CustParameters::find().CreditLineError != CreditLineErrorType::Warning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrderDuplicates</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean checkOrderDuplicates()
    {
        SalesTableDelete salesTableDelete;        

        if(sanaOrderId)
        {
            if(documentType == #quote || accountType == #contact)
            {
                select firstonly salesQuotationTable where salesQuotationTable.SC_OrderId == sanaOrderId;

                if(salesQuotationTable)
                {
                    this.createSaveQuoteRespons();
                }
            }
            else
            {
                select firstonly salesTable where salesTable.SC_OrderId == sanaOrderId;

                ttsBegin;
                if(!salesTable)
                {
                    select firstonly salesTableDelete where salesTableDelete.SC_OrderId == sanaOrderId;
                    if(salesTableDelete)
                    {
                        //BP deviation documented
                        salesTable.setTmp();
                        salesTable.data(conPeek(salesTableDelete.SalesTable,1));
                        salesTable.insert();
                    }
                }

                if(salesTable)
                {
                    this.createSaveSalesRespons();
                }
                ttsAbort;
            }
        }

        return salesQuotationTable || salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLineVar</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void clearLineVar()
    {
        lineType = '';
        lineProductId = '';
        lineInventDimId = '';
        lineTitle = '';
        lineQty = 0;
        lineQuantityPrecision = 0;
        linePrice = 0;
        lineDiscountValue = 0;
        parmUnitId = '';
        skipSalesAgreement = 0;
        agreementLineNo = '';
        configurationId = '';

        if(lineBOMconfigId)
        {
            lineBOMConfigs += [salesLine.Recid, lineBOMconfigId];
            lineBOMconfigId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotProductDimension</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected InventDimId clearNotProductDimension(InventDim _inventDim, ItemId _itemId, boolean _returnOrig = false)
    {
        InventDimId ret;        

        if(_inventDim.anyProductDimensionSpecified())
        {
            _inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_itemId));
            _inventDim = InventDim::findDim(_inventDim);
            ret = _inventDim.inventDimId;
        }
        else
        {
            ret = _returnOrig ? _inventDim.inventDimId : '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDynamicLineParams</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void convertDynamicLineParams()
    {
        InventDim               inventDimLocal;
        ConfigChoice            choice;
        BOMConfigRoute          BOMConfigRoute;
        InventDimCombination    inventDimCombination;
        container               configValues, configs, allBOMRoutes, productDimensions;
        BOMId                   BOMId;
        Integer                 configNumber, a;
        EcoResProductRecId      distincProductVariantRecId;
        EcoResConfigurationName configName, tmpName;
        EcoResProductTranslation ecoResProductTranslation;


        inventTable = inventtable::find(lineProductId);

        if(strContains(lineInventDimId, ';') && EcoResProductMaster::find(inventTable.Product).VariantConfigurationTechnology == EcoResVariantConfigurationTechnologyType::DimensionBased)
        {
            [BOMId, configNumber] = str2con(lineInventDimId, ';', false);
            configName = strFmt('Config%1', configNumber);
            lineBOMconfigId = lineInventDimId;

            select firstOnly BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == BOMId;

            allBOMRoutes = this.findBOMRouteCombinations(BOMConfigRoute);

            while select ConfigGroupId from BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == BOMId
            {
                configValues += [[BOMConfigRoute.ConfigGroupId, conPeek(conPeek(allBOMRoutes, configNumber), conLen(configValues)+1), '']];
            }

            configs = ConfigChoice::findConfig(lineProductId, configValues);
            tmpName = conLen(configs) == 4 ? any2str(conPeek(configs, 4)) : '';

            if(tmpName)
            {
                select firstOnly inventDimLocal where inventDimLocal.configId == tmpName;
                lineInventDimId = this.clearNotProductDimension(inventDimLocal, inventTable.ItemId);
            }
            else
            {
                if (!EcoResProductVariantDimValue::newProductVariantDim_ConfigId().exist(inventTable.Product, configName))
                {
                    EcoResProductMasterManager::addProductDimensionValue(
                    inventTable.Product,
                    EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId)),
                    configName, '', '');
                }
                                
                select firstOnly inventDimCombination
                    where inventDimCombination.ItemId == inventTable.ItemId
                    exists join inventDimLocal
                        where inventDimLocal.inventDimId == inventDimCombination.InventDimId &&
                              inventDimLocal.configId == configName;

                if(!inventDimCombination)
                {                    
                    productDimensions = EcoResProductVariantDimValue::getDimensionValuesContainerForConfiguration(configName);

                    distincProductVariantRecId = EcoResProductVariantManager::createProductVariant(inventTable.Product, '', productDimensions);

                    EcoResProductReleaseManagerBase::releaseProduct(distincProductVariantRecId, CompanyInfo::findDataArea(curext()).RecId);

                    ecoResProductTranslation = EcoResProductTranslation::findByProductLanguage(distincProductVariantRecId, languageId, true);
                    ecoResProductTranslation.Name = strFmt("@SCL525", configNumber);
                    ecoResProductTranslation.doUpdate();

                    select firstonly forUpdate inventDimCombination where inventDimCombination.DistinctProductVariant == distincProductVariantRecId;
                    inventDimCombination.SC_VisibleInWebShop = true;
                    inventDimCombination.doUpdate();
                }

                for(a=1;a<=conlen(configValues);a++)
                {
                    choice.ItemId   = inventTable.ItemId;
                    choice.ConfigId = configName;
                    choice.ChosenGroupId = conPeek(conPeek(configValues, a), 1);
                    choice.ChosenItemId  = conPeek(conPeek(configValues, a), 2);

                    if ((select configChoice
                        where configChoice.ItemId           == choice.ItemId        &&
                              configChoice.ConfigId         == choice.ConfigId      &&
                              configChoice.ChosenGroupId    == choice.ChosenGroupId &&
                              configChoice.ChosenItemId     == choice.ChosenItemId  &&
                              configChoice.ChosenConfigId   == choice.ChosenConfigId).RecId == 0)
                    {
                        choice.Autogenerated = true;
                        choice.insert();
                    }                    
                }

                select firstOnly inventDimLocal where inventDimLocal.configId == configName;

                if(!inventDimLocal)
                {
                    throw error("@SYS135235");
                }

                lineInventDimId = this.clearNotProductDimension(inventDimLocal, inventTable.ItemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ClearPersistedBasket</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [Replaceable]
    public XmlDocument ClearPersistedBasket(XmlDocument _request)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;                

        this.createHeaderXml();

        this.getParameters(_request);        

        if(syncOrderType == #quote || accountType == #contact)
        {
            salesQuotationTable = SalesQuotationTable::find(originalOrderId, true);
        }
        else
        {
            salesTable = SalesTable::find(originalOrderId, true);
        }

        ttsbegin;

        if(this.checkQuoteOpen(salesQuotationTable) && this.validateQuoteDelete(salesQuotationTable.QuotationId))
        {
            delete_from salesQuotationLine
                where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId;
            
            //clear payment and shippment
            delete_from markupTrans
                where markupTrans.TransTableId == salesQuotationTable.TableId &&
                        markupTrans.TransRecId == salesQuotationTable.RecId
                exists join markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode &&
                            markupTable.SC_MarkupCode;

            //clear promotion
            salesQuotationTable.reread(); //to prevent update issues after lines delete
            salesQuotationTable.SC_PromotionCode  = '';
            salesQuotationTable.SC_PromotionTitle = '';
            salesQuotationTable.SC_PromotionType  = SC_DiscountType::None;
            salesQuotationTable.SC_PromotionValue = 0;
            salesQuotationTable.doUpdate();
            salesQuotationTable.modifiedField(fieldnum(salesQuotationTable, SC_PromotionValue));            
        }

        if(this.checkOrderOpen(salesTable) && this.validateOrderDelete(salesTable.SalesId))
        {            
            delete_from salesLine
                where salesLine.SalesId == salesTable.SalesId;
            
            //clear payment and shippment
            delete_from markupTrans
                where markupTrans.TransTableId == salesTable.TableId &&
                        markupTrans.TransRecId == salesTable.RecId
                exists join markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode &&
                            markupTable.SC_MarkupCode;

            //clear promotion
            salesTable.reread(); //to prevent update issues after lines delete
            salesTable.SC_PromotionCode  = '';
            salesTable.SC_PromotionTitle = '';
            salesTable.SC_PromotionType  = SC_DiscountType::None;
            salesTable.SC_PromotionValue = 0;
            salesTable.doUpdate();
            salesTable.type().modifiedField(fieldnum(salesTable, SC_PromotionValue));            
        }
        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuoteOpen</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean checkQuoteOpen(SalesQuotationTable _salesQuotationTable)
    {
        return _salesQuotationTable && _salesQuotationTable.QuotationStatus != SalesQuotationStatus::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrderOpen</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean checkOrderOpen(SalesTable _salesTable)
    {
        return _salesTable && (_salesTable.SalesStatus == SalesStatus::Backorder || _salesTable.SalesStatus == SalesStatus::Canceled) &&
               enum2int(_salesTable.DocumentStatus) <= enum2int(DocumentStatus::Confirmation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuoteDelete</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean validateQuoteDelete(QuotationId _quotationId)
    {
        boolean ret = true;

        while select salesQuotationLine
            where salesQuotationLine.QuotationId == _quotationId
        {
            ret = ret && salesQuotationLine.validateDelete();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderDelete</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean validateOrderDelete(SalesId _salesId)
    {
        boolean ret = true;

        while select salesLine
            where salesLine.SalesId == _salesId
        {
            ret = ret && salesLine.validateDelete();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertOrder2PersistedBasket</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [HookableAttribute(true), Replaceable]
    protected boolean convertOrder2PersistedBasket()
    {
        boolean ret;        

        if(syncOrderType == #order)
        {
            salesTable = SalesTable::find(originalOrderId, true);
        }
        else
        {
            salesQuotationTable = SalesQuotationTable::find(originalOrderId, true);
        }

        ttsbegin;
        if(this.checkOrderOpen(salesTable))
        {
            salesTable.SC_IsPersistedBasket = NoYes::Yes;
            salesTable.doUpdate();
            ret = true;
        }

        if(this.checkQuoteOpen(salesQuotationTable))
        {
            salesQuotationTable.SC_IsPersistedBasket = NoYes::Yes;
            salesQuotationTable.doUpdate();
            ret = true;
        }
        ttscommit;

        if(!ret)
        {
            this.errorHandler(strfmt("@SCL85", documentId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQuote2Order</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected SalesTable convertQuote2Order(SalesQuotationTable _salesQuotationTable)
    {
        SalesQuotationEditLinesForm  salesQuotationEditLinesForm;
        ParmId                       parmId;        

        error(strFmt("@SCL312", _salesQuotationTable.QuotationId)); //if something goes wrong we need this message in response

        //Send quotation
        salesQuotationEditLinesForm = SalesQuotationEditLinesForm::construct(DocumentStatus::Quotation); 
        parmId                      = salesQuotationEditLinesForm.parmId();

        salesQuotationEditLinesForm.initParmSalesQuotationTable(_salesQuotationTable);

        salesQuotationEditLinesForm.parmId(parmId);
        salesQuotationEditLinesForm.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        salesQuotationEditLinesForm.prePromptInit();
        salesQuotationEditLinesForm.initParameters(false, false, false, false, false, '', false);
        salesQuotationEditLinesForm.run();        

        //Confirm quotation
        salesQuotationEditLinesForm = SalesQuotationEditLinesForm::construct(DocumentStatus::Confirmation); 
        parmId                      = salesQuotationEditLinesForm.parmId();

        salesQuotationEditLinesForm.initParmSalesQuotationTable(_salesQuotationTable);

        salesQuotationEditLinesForm.parmId(parmId);
        salesQuotationEditLinesForm.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        salesQuotationEditLinesForm.prePromptInit();
        salesQuotationEditLinesForm.initParameters(false, false, false, false, false, '', false);
        salesQuotationEditLinesForm.run();

        if(!salesQuotationEditLinesForm.parmSalesTableCreated())
        {
            throw Exception::Error;
        }

        if(this.checkCreditLimit(resultNode, salesQuotationEditLinesForm.parmSalesTableCreated(), true))
        {
            salesTable = salesQuotationEditLinesForm.parmSalesTableCreated();
            this.setWebshopDataMapping([salesQuotationTable.TableId], [salesTable.TableId]);

            if(!bufCmp(salesTable, salesTable.orig()))
            {
                salesTable.update();
            }
        }

        infolog.clear(0); //clear above error message

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAttachmentURL</Name>
				<Source><![CDATA[
    [Replaceable]
    public void createAttachmentURL(boolean _quote = false)
    {
        DocuRef  docuRef;
        DocuType docuTypeLocal;
        Integer  b;
        RefRecId docRecId = _quote ? salesQuotationTable.RecId : salesTable.RecId;
        TableId  docTableId = _quote ? salesQuotationTable.TableId : salesTable.TableId;

        if(attachments && attachments.length())
        {
            docuTypeLocal = SC_AXDataServiceClient::findOrCreateUrlAttachmentType();

            delete_from docuRef
                where docuRef.RefRecId == docRecId &&
                      docuRef.RefTableId == docTableId &&
                      docuRef.TypeId == docuTypeLocal.TypeId &&
                      docuRef.RefCompanyId == curext();            

            for(b=0;attachments && b < attachments.length();b++)
            {
                node = attachments.item(b);
                [filePathAttachment, fileNameAttachment, fileTypeAttachment] = fileNameSplit(node.innerText());

                if(docuTypeLocal.RecId)
                {
                    docuRef.clear();
                    docuRef.RefRecId            = docRecId;
                    docuRef.RefTableId          = docTableId;
                    docuRef.RefCompanyId        = curext();
                    new InteropPermission(InteropKind::ClrInterop).assert();
                    docuRef.Name                = System.Web.HttpUtility::UrlDecode(fileNameAttachment + fileTypeAttachment);
                    CodeAccessPermission::revertAssert();
                    docuRef.TypeId              = docuTypeLocal.TypeId;
                    docuRef.Notes               = node.innerText();
                    docuRef.SC_VisibleInWebShop = NoYes::Yes;
                    docuRef.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcQuoteRespons</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createCalcQuoteRespons(boolean _addHeader = true, boolean _addLines = true, boolean _persistedBasket = false, SalesQuotationLine _salesQuotationLine = null)
    {        
        this.calculateSalesTotals(true);

        salesLinesNode = resultNode.appendChild(resultXml.createElement(#salesLines));

        if(_addHeader)
        {
            this.createCalcHeaderResponse(true);
            this.addTaxes(resultNode, true);
        }

        if(_addLines)
        {
            if(_persistedBasket)
            {
                salesQuotationLine = _salesQuotationLine;
            }

            while select salesQuotationLine
                   order by LineNum
                   where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId && salesQuotationLine.SalesQty
            {
                inventTable = InventTable::find(salesQuotationLine.ItemId); //used in validations below

                if(!this.validateCalcPersistedLine(_persistedBasket, salesQuotationLine.SC_SuppItem, salesQuotationLine.inventDim(), salesQuotationLine.ItemId, _salesQuotationLine ? true : false))
                {
                    continue;
                }                

                salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

                this.createCalcQuoteLinesResponse();
                this.addQuoteMiscCharges(salesQuotationLine, salesQuotationLine.LineNum, _persistedBasket); //for line
                this.addSanaDiscountsLines(true);
            }
        }

        this.addPromotion(true);
        this.addQuoteMiscCharges(); //for order
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCallCenterOrderPayment</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createCallCenterOrderPayment()
    {
        MCRCustPaymTable mcrCustPaymTable;

        this.calculateSalesTotals();

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(salesTable.RecId, salesTable.TableId);

        if(!mcrCustPaymTable)
        {
            ttsbegin;
            mcrCustPaymTable.clear();
            mcrCustPaymTable.Channel        = salesTable.retailSalesTable().RetailChannel;
            mcrCustPaymTable.CurrencyCode   = salesTable.CurrencyCode;
            mcrCustPaymTable.TenderTypeId   = paymentMethodCode ? paymentMethodCode : webShopsTable.RetailPaymMethod;
            mcrCustPaymTable.RefTableId     = salesTable.TableId;
            mcrCustPaymTable.RefRecId       = salesTable.RecId;
            mcrCustPaymTable.CustAccount    = salesTable.CustAccount;
            mcrCustPaymTable.Status         = MCRCustPaymStatus::NotSubmitted;
            mcrCustPaymTable.CustPaymType   = MCRCustPaymTable::getMCRTypeFromTender(mcrCustPaymTable.TenderTypeId, mcrCustPaymTable.Channel);
            mcrCustPaymTable.Amount         = totalInclTax - totalCashDisc;
            mcrCustPaymTable.IsPrepay       = mcrCustPaymTable.CustPaymType == MCRCustPaymType::OnAccount ? NoYes::No : NoYes::Yes;
            mcrCustPaymTable.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcHeaderResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createCalcHeaderResponse(boolean _quote = false)
    {
        Qty prepaymentPercentage, prepaymentAmount;        
        
        this.addFieldValue(#subTotal, resultNode, subTotal);
        this.addFieldValue(#totalExclTax, resultNode, totalExclTax);
        this.addFieldValue(#totalInclTax, resultNode, totalInclTax - totalCashDisc);
        this.addFieldValue(#invoiceDiscount, resultNode, this.calcDiscountExclPromotion(_quote ? salesQuotationTable.InclTax : salesTable.InclTax));
        this.addFieldValue(#taxAmount, resultNode, totalTaxAmount);
        this.addFieldValue(#taxPercent, resultNode, #zero);
        this.addFieldValue(#roundOff, resultNode, totalRoundOff);
        this.addFieldValue(#paymentDiscount, resultNode, totalCashDisc);

        if((shopAccountType == #customer || shopAccountType == #contact && accountType == #customer) &&
                B2bOnlinePayments == #payOnline || custTable.SC_B2cCustomer)
        {
            prepaymentPercentage = 100;
            prepaymentAmount     = totalInclTax - totalCashDisc;
        }

        this.addFieldValue(#prepaymentPercentage, resultNode, prepaymentPercentage);
        this.addFieldValue(#prepaymentAmount, resultNode, prepaymentAmount);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCalcPersistedLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean validateCalcPersistedLine(boolean _persistedBasket, boolean _isSuppItem, InventDim _inventDim, ItemId _itemId, boolean _origLinesExist)
    {
        boolean ret = true;
        
        if(_persistedBasket && !_isSuppItem && !_origLinesExist && !configurationId) //do checks only for getPersistedBasket, lines was not sent and skip e-Con
        {
            lineInventDimId = this.clearNotProductDimension(_inventDim, _itemId);

            ret = this.isLineOrderable() && this.isLineInStock();

            this.isDecreasedQuantity();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcQuoteLinesResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createCalcQuoteLinesResponse()
    {
        Qty                                 tmpValue, discValue, discAmount, grossWeight, variantWeight;
        SC_LargeText                        productTitle, variantTtitle;
        InventDim                           quoteLineDim;
        WHSPhysDimUOM                       WHSPhysDimUOM;
        InventDimCombination                inventDimCombination;
        EcoResProductVariantDimensionValue  ecoResProductVariantDimensionValue;

        this.addFieldValue(#lineNo, salesLineNode, salesQuotationLine.LineNum * 10000);
        this.addFieldValue(#productId, salesLineNode, salesQuotationLine.ItemId ? salesQuotationLine.ItemId : EcoResCategory::find(salesQuotationLine.SalesCategory).Name);

        quoteLineDim = salesQuotationLine.inventDim();
        this.addFieldValue(#variantId, salesLineNode, this.isProductVariantConfigurable() ? lineBOMconfigId : this.clearNotProductDimension(quoteLineDim, salesQuotationLine.ItemId));
    
        if(salesQuotationLine.ItemId)
        {
            inventDimCombination = InventDimCombination::findByInventDim(salesQuotationLine.ItemId, quoteLineDim);            
        }
        
        [productTitle, variantTtitle] = this.getOrderLineTitle(salesQuotationLine.ItemId, inventDimCombination, salesQuotationLine.SalesCategory);
    
        this.addFieldValue(#productTitle, salesLineNode, productTitle);
        this.addFieldValue(#title, salesLineNode, variantTtitle ? variantTtitle : productTitle);
        this.addFieldValue(#quantity, salesLineNode, salesQuotationLine.SalesQty);

        [tmpValue, discAmount, discValue] = this.calcLinePriceDiscValues(true);
                
        this.addFieldValue(#price, salesLineNode, tmpValue + discValue);
        this.addFieldValue(#taxPercent, salesLineNode, 0);
        this.addFieldValue(#discountAmount, salesLineNode, discAmount);

        if(salesQuotationLine.LineDisc || salesQuotationLine.MultiLnDisc)
        {
            tmpValue = discValue ? discValue / (tmpValue + discValue) * 100 : 0;
        }
        else
        {
            tmpValue = salesQuotationLine.discPercent();
        }
        this.addFieldValue(#discountPercent, salesLineNode, tmpValue);
        this.addFieldValue(#lineAmount, salesLineNode, salesQuotationLine.LineAmount);
        this.addFieldValue(#parentLineNo, salesLineNode, (salesQuotationLine.SC_SuppItem ? SalesQuotationLine::findRecId(salesQuotationLine.SC_SuppAttachRecId).LineNum : salesQuotationLine.LineNum) * 10000);
        this.addFieldValue(#isReadOnlyLine, salesLineNode, salesQuotationLine.SC_SuppItem);
        this.addFieldValue(#isSupplementary, salesLineNode, salesQuotationLine.SC_SuppItem);
        this.addFieldValue(#lineType, salesLineNode, #item);
        this.addFieldValue(#unitOfMeasureId, salesLineNode, salesQuotationLine.SalesUnit);
        this.addFieldValue(#unitOfMeasureDescription, salesLineNode, UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(salesQuotationLine.SalesUnit).RecId, languageId).Description);
        this.addFieldValue(#configurationId, salesLineNode, salesQuotationLine.SC_ConfigurationId);

        //line weight calculation
        if(inventDimCombination && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            select firstOnly RecId from ecoResProductVariantDimensionValue
                where ecoResProductVariantDimensionValue.DistinctProductVariant == inventDimCombination.DistinctProductVariant &&
                      ecoResProductVariantDimensionValue.RetailWeight;            

            variantWeight = ecoResProductVariantDimensionValue ? EcoResDistinctProductVariant::find(inventDimCombination.DistinctProductVariant).RetaiTotalWeight : 0;
        }
        else
        {
            variantWeight = 0;
        }

        if(isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            WHSPhysDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(inventTable.ItemId, salesQuotationLine.SalesUnit);

            this.addFieldValue(#length, salesLineNode, WHSPhysDimUOM ? WHSPhysDimUOM.Depth : inventTable.grossDepth);
            this.addFieldValue(#width, salesLineNode, WHSPhysDimUOM ? WHSPhysDimUOM.Width : inventTable.grossWidth);
            this.addFieldValue(#height, salesLineNode, WHSPhysDimUOM ? WHSPhysDimUOM.Height : inventTable.grossHeight);
            grossWeight = WHSPhysDimUOM.Weight ? WHSPhysDimUOM.Weight: inventTable.grossWeight();
        }
        else
        {
            this.addFieldValue(#length, salesLineNode, inventTable.grossDepth);
            this.addFieldValue(#width, salesLineNode, inventTable.grossWidth);
            this.addFieldValue(#height, salesLineNode, inventTable.grossHeight);
            grossWeight = inventTable.grossWeight();
        }

        if(salesQuotationLine.SalesUnit != inventTable.inventUnitId() && !WHSPhysDimUOM)
        {
            tmpValue = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, salesQuotationLine.inventDimId, salesQuotationLine.SalesQty,
                                                                             UnitOfMeasure::unitOfMeasureIdBySymbol(salesQuotationLine.SalesUnit),
                                                                             UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId()),
                                                                             NoYes::Yes);            
            tmpValue = tmpValue * (grossWeight + variantWeight);
        }
        else
        {
            tmpValue = salesQuotationLine.SalesQty * (grossWeight + variantWeight);
        }

        this.addFieldValue(#grossWeight, salesLineNode, tmpValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLinePriceDiscValues</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcLinePriceDiscValues(boolean _quote = false)
    {
        Qty tmpValue, discValue, discAmount;

        if(_quote)
        {
            tmpValue   = salesQuotationLine.SalesQty ? salesQuotationLine.LineAmount / salesQuotationLine.SalesQty : salesQuotationLine.LineAmount;
            discAmount = salesQuotationLine.salesPurchLineInterface().calcLineDisc();
            discValue  = salesQuotationLine.SalesQty ? discAmount / salesQuotationLine.SalesQty : discAmount;
        }
        else
        {
            tmpValue   = salesLine.SalesQty ? salesline.LineAmount / salesLine.SalesQty : salesline.LineAmount;
            discAmount = salesLine.calcLineDisc();
            discValue  = salesLine.SalesQty ? discAmount / salesLine.SalesQty : discAmount;
        }

        return [tmpValue, discAmount, discValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcSalesRespons</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createCalcSalesRespons(boolean _addHeader = true, boolean _addLines = true, boolean _persistedBasket = false, SalesLine _salesLine = null)
    {
        this.calculateSalesTotals();

        salesLinesNode = resultNode.appendChild(resultXml.createElement(#salesLines));

        if(_addHeader)
        {
            this.createCalcHeaderResponse();            
            this.addTaxes(resultNode);            
        }

        if(_addLines)
        {
            if(_persistedBasket)
            {
                salesLine = _salesLine;
            }

            while select salesLine
                   order by LineNum
                   where salesLine.SalesId == salesTable.SalesId && salesLine.SalesQty
            {
                inventTable = InventTable::find(salesLine.ItemId); //used in validations below

                if(!this.validateCalcPersistedLine(_persistedBasket, salesLine.SC_SuppItem, salesLine.inventDim(), salesLine.ItemId, _salesLine ? true : false))
                {
                    continue;
                }                              

                salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

                this.createCalcSalesLinesResponse();
                this.addSalesMiscCharges(salesLine, salesLine.LineNum, _persistedBasket); //for line
                this.addSanaDiscountsLines();
            }

            if(this.isRetailEnabled())
            {
                this.addRetailDiscountsLines();
            }
        }

        this.addPromotion();
        this.addSalesMiscCharges(salesTable); //for order    
        this.checkCreditLimit(resultNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcSalesLinesResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createCalcSalesLinesResponse()    
    {
        Qty                                 tmpValue, discValue, discAmount, grossWeight, variantWeight;
        SC_LargeText                        productTitle, variantTtitle;
        InventDim                           salesLineDim;
        WHSPhysDimUOM                       WHSPhysDimUOM;
        InventDimCombination                inventDimCombination;  
        EcoResProductVariantDimensionValue  ecoResProductVariantDimensionValue;

        this.addFieldValue(#lineNo, salesLineNode, salesLine.LineNum * 10000);
        this.addFieldValue(#productId, salesLineNode, salesLine.ItemId ? salesLine.ItemId : EcoResCategory::find(salesLine.SalesCategory).Name);

        salesLineDim = salesLine.inventDim();
        this.addFieldValue(#variantId, salesLineNode, this.isProductVariantConfigurable() ? lineBOMconfigId : this.clearNotProductDimension(salesLineDim, salesLine.ItemId));

        if(salesLine.ItemId)
        {
            inventDimCombination = InventDimCombination::findByInventDim(salesLine.ItemId, salesLineDim);           
        }
        
        [productTitle, variantTtitle] = this.getOrderLineTitle(salesLine.ItemId, inventDimCombination, salesLine.SalesCategory);

        this.addFieldValue(#productTitle, salesLineNode, productTitle);
        this.addFieldValue(#title, salesLineNode, variantTtitle ? variantTtitle : productTitle);
        this.addFieldValue(#quantity, salesLineNode, salesLine.SalesQty);

        [tmpValue, discAmount, discValue] = this.calcLinePriceDiscValues();

        this.addFieldValue(#price, salesLineNode, tmpValue + discValue);
        this.addFieldValue(#taxPercent, salesLineNode, 0);
        this.addFieldValue(#discountAmount, salesLineNode, discAmount);

        if(salesLine.LineDisc || salesLine.MultiLnDisc)
        {
            tmpValue = discValue ? discValue / (tmpValue + discValue) * 100 : 0;
        }
        else
        {
            tmpValue = salesLine.discPercent();
        }
        this.addFieldValue(#discountPercent, salesLineNode, tmpValue);
        this.addFieldValue(#lineAmount, salesLineNode, salesLine.LineAmount);
        this.addFieldValue(#parentLineNo, salesLineNode, (salesLine.SC_SuppItem ? SalesLine::findRecId(salesLine.SC_SuppAttachRecId).LineNum : salesLine.LineNum) * 10000);
        this.addFieldValue(#isReadOnlyLine, salesLineNode, salesLine.SC_SuppItem);
        this.addFieldValue(#isSupplementary, salesLineNode, salesLine.SC_SuppItem);
        this.addFieldValue(#lineType, salesLineNode, #item);
        this.addFieldValue(#unitOfMeasureId, salesLineNode, salesLine.SalesUnit);
        this.addFieldValue(#unitOfMeasureDescription, salesLineNode, UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(salesLine.SalesUnit).RecId, languageId).Description);
        this.addFieldValue(#configurationId, salesLineNode, salesLine.SC_ConfigurationId);

        //line weight calculation
        if(inventDimCombination && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            select firstOnly RecId from ecoResProductVariantDimensionValue
                where ecoResProductVariantDimensionValue.DistinctProductVariant == inventDimCombination.DistinctProductVariant &&
                      ecoResProductVariantDimensionValue.RetailWeight;

            variantWeight = ecoResProductVariantDimensionValue ? EcoResDistinctProductVariant::find(inventDimCombination.DistinctProductVariant).RetaiTotalWeight : 0;
        }
        else
        {
            variantWeight = 0;
        }

        if(isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            WHSPhysDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(inventTable.ItemId, salesLine.SalesUnit);

            this.addFieldValue(#length, salesLineNode, WHSPhysDimUOM ? WHSPhysDimUOM.Depth : inventTable.grossDepth);
            this.addFieldValue(#width, salesLineNode, WHSPhysDimUOM ? WHSPhysDimUOM.Width : inventTable.grossWidth);
            this.addFieldValue(#height, salesLineNode, WHSPhysDimUOM ? WHSPhysDimUOM.Height : inventTable.grossHeight);
            grossWeight = WHSPhysDimUOM.Weight ? WHSPhysDimUOM.Weight: inventTable.grossWeight();
        }
        else
        {
            this.addFieldValue(#length, salesLineNode, inventTable.grossDepth);
            this.addFieldValue(#width, salesLineNode, inventTable.grossWidth);
            this.addFieldValue(#height, salesLineNode, inventTable.grossHeight);
            grossWeight = inventTable.grossWeight();
        }

        if(salesLine.SalesUnit != inventTable.inventUnitId() && !WHSPhysDimUOM)
        {
            tmpValue = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, salesLine.inventDimId, salesLine.SalesQty,
                                                                             UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.SalesUnit), 
                                                                             UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId()), 
                                                                             NoYes::Yes);            
            tmpValue = tmpValue * (grossWeight + variantWeight);
        }
        else
        {
            tmpValue = salesLine.SalesQty * (grossWeight + variantWeight);
        }

        this.addFieldValue(#grossWeight, salesLineNode, tmpValue);

        this.addAvailableSalesAgreementLines(salesLineNode);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAvailableSalesAgreementLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addAvailableSalesAgreementLines(XmlNode _salesLineNode)
    {
        List                            agreementLinesList;
        ListEnumerator                  agreementLinesListEnumerator;
        AgreementLine                   agreementLine;
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;     
        SalesOrderedQty                 remainQty;

        if(salesTable.MatchingAgreement && !salesLine.SC_SuppItem) //sales agreements
        {
            if(salesLine.MatchingAgreementLine)
            {
                this.addFieldValue(#agreementLineNo, _salesLineNode, AgreementLine::find(salesLine.MatchingAgreementLine).LineNumber);
            }

            matchingAgreementsNode = _salesLineNode.appendChild(resultXml.createElement(#availableSalesAgreementLines));

            this.clearAgreementsStorageDim(salesTable.MatchingAgreement);

            agreementLinesList           = AgreementLine::getAgreementLinesForOrderLine(salesLine, salesTable.MatchingAgreement, true);
            agreementLinesListEnumerator = agreementLinesList.getEnumerator();

            while(agreementLinesListEnumerator.moveNext())
            {
                agreementLine = agreementLinesListEnumerator.current();
                agreementLine = AgreementLine::find(agreementLine.RecId);

                if(agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
                {
                    agreementLineQuantityCommitment = AgreementLineQuantityCommitment::find(agreementLine.RecId);

                    if(agreementLineQuantityCommitment.ProductUnitOfMeasure != salesLine.SalesUnit)
                    {
                        continue;
                    }

                    if(agreementLine.IsMaxEnforced)
                    {
                        remainQty = agreementLine.quantityRemainingRelease();

                        if((agreementLine.RecId == salesLine.MatchingAgreementLine && !remainQty) ||
                           (agreementLine.RecId != salesLine.MatchingAgreementLine && salesLine.SalesQty > remainQty))
                        {
                            continue;
                        }
                    }
                }

                matchingAgreementsNode.appendChild(resultXml.createElement(#lineNo)).innerText(this.convertAny2Str(agreementLine.LineNumber));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAutoMixAndMatchDiscountLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addAutoMixAndMatchDiscountLines(DiscCode _discountId, Counter _multiply, boolean _quote = false)
    {
        SC_MixMatchDiscountLine mixMatchDiscountLine;

        while select Product, Variant, NumberOfItemsNeeded, SalesUnit from  mixMatchDiscountLine
        where mixMatchDiscountLine.DiscountId  == _discountId &&
                mixMatchDiscountLine.WebShopId   == webShopsTable.WebShopId &&
                mixMatchDiscountLine.AutoAdd
        {
            lineProductId   = InventTable::findByProduct(mixMatchDiscountLine.Product).ItemId;
            lineInventDimId = InventDimCombination::findByDistinctProductVariant(mixMatchDiscountLine.Variant).InventDimId;
            parmUnitId      = mixMatchDiscountLine.SalesUnit;
            lineQty         = mixMatchDiscountLine.NumberOfItemsNeeded * _multiply;

            if(_quote)
            {
                this.createQuoteItemTypeLine(false);
            }
            else
            {
                this.createSalesItemTypeLine(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderHistoryRespons</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createOrderHistoryRespons(Common _journal, String50 _orderType)
    {        
        SC_LargeText           tmpStr;
        LogisticsPostalAddress address;                
        CustInvoiceJour        custInvoiceJour;
        CustInvoiceTrans       custInvoiceTrans;
        CustPackingSlipJour    custPackingSlipJour;
        CustPackingSlipTrans   custPackingSlipTrans;
        XmlNode                addressNode, commentsNode;
        container              commentsCon; 
        Integer                b;
        
        if(_journal.TableId == tablenum(CustInvoiceJour))
        {
            custInvoiceJour = _journal as CustInvoiceJour;
            custTable       = CustTable::find(custInvoiceJour.OrderAccount);
        }
        else
        {
            custPackingSlipJour = _journal as CustPackingSlipJour;
            custTable           = CustTable::find(custPackingSlipJour.OrderAccount);
        }

        node = resultNode.appendChild(resultXml.createElement(#order));        

        //header
        this.createHistoryHeaderResponse(_journal, _orderType);   
     
        //add extra fields
        this.addSavedCustomFields(node, _journal);
        this.addExtraFields(node, _journal);

        //sell address
        addressNode = node.appendChild(resultXml.createElement(#sellToAddress));
        address     = DirParty::primaryPostalAddress(custTable.Party);
        this.addSalesResponseAddress(addressNode, address, #sellToAddress);

        //bill address
        addressNode = node.appendChild(resultXml.createElement(#billToAddress));
        address = DirParty::postalAddress(CustTable::find(custInvoiceJour ? custInvoiceJour.InvoiceAccount : custPackingSlipJour.InvoiceAccount).Party, LogisticsLocationRoleType::Invoice);
        address = address ? address : DirParty::primaryPostalAddress(CustTable::find(custInvoiceJour ? custInvoiceJour.InvoiceAccount : custPackingSlipJour.InvoiceAccount).Party);
        this.addSalesResponseAddress(addressNode, address, #billToAddress, _journal);

        //ship address
        addressNode = node.appendChild(resultXml.createElement(#shipToAddress));
        address     = LogisticsPostalAddress::findRecId(custInvoiceJour ? custInvoiceJour.DeliveryPostalAddress : custPackingSlipJour.DeliveryPostalAddress);
        this.addSalesResponseAddress(addressNode, address, #shipToAddress, _journal);

        if(salesTable.SC_Comments)
        {
            commentsNode = node.appendChild(resultXml.createElement(#commentLines));
            commentsCon  = str2con(salesTable.SC_Comments, '\n', false);

            for(b=1;b<=conLen(commentsCon);b++)
            {
                tmpStr   = conPeek(commentsCon, b);
                commentsNode.appendChild(resultXml.createElement(#commentLine)).innerText(tmpStr);
            }
        }

        //lines
        switch(_orderType)
        {
            case #invoice, #creditNote:
                //invoice lines
                if(loadOrderLines)
                {
                    salesLinesNode = node.appendChild(resultXml.createElement(#salesLines));

                    while select custInvoiceTrans
                           order by LineNum
                           where custInvoiceTrans.SalesId   == custInvoiceJour.SalesId &&
                                 custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
                    {
                        this.createHistoryLinesResponse(null, custInvoiceTrans);
                    }
                    this.addHistoryTaxes(custInvoiceJour);
                    this.addSalesMiscCharges(custInvoiceJour); //for order
                }
                break;
            case #shipment, #returnReceipt:
                this.addShipTrackingData(node, custPackingSlipJour);
                //shipment lines
                if(loadOrderLines)
                {
                    salesLinesNode = node.appendChild(resultXml.createElement(#salesLines));

                    while select custPackingSlipTrans
                           order by LineNum
                           where custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId &&
                                 custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                    {                        
                        this.createHistoryLinesResponse(custPackingSlipTrans);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryTotals</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcHistoryTotals(CustInvoiceJour _custInvoiceJour)
    {
        CustTransOpen     custTransOpen = _custInvoiceJour.custTrans().transOpen();
        CustInvoiceTrans  custInvoiceTrans;
        CustTransCashDisc custTransCashDisc;
        Amount            shipPaymAmount, amountFull, cashDiscAmount, balance, invoiceDiscount, invoiceAmount, sumMarkup;

        invoiceAmount   = _custInvoiceJour.InvoiceAmount;
        sumMarkup       = _custInvoiceJour.SumMarkup;
        totalTaxAmount  = _custInvoiceJour.SumTax;
        totalRoundOff   = _custInvoiceJour.InvoiceRoundOff;
            
        if(_custInvoiceJour.CashDisc && custTransOpen.UseCashDisc != UseCashDisc::Never)
        {
            custTransCashDisc = custTransOpen.transOpenData().findCashDisc(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            cashDiscAmount    = custTransOpen.getCashDiscAmountToTake(custTransCashDisc.CashDiscAmount);
        }

        if(_custInvoiceJour.InclTax)
        {
            while select custInvoiceTrans
                    where custInvoiceTrans.SalesId   == _custInvoiceJour.SalesId &&
                          custInvoiceTrans.InvoiceId == _custInvoiceJour.InvoiceId
            {
                amountFull += custInvoiceTrans.lineAmountInclTax();
            }

            shipPaymAmount  = this.calcHistoryMiscCharges(_custInvoiceJour);
            balance         = amountFull - shipPaymAmount;
            totalBalance    = amountFull;
            invoiceDiscount = balance + sumMarkup - invoiceAmount + shipPaymAmount;
        }
        else
        {
            balance         = _custInvoiceJour.SalesBalance - this.calcHistoryMiscCharges(_custInvoiceJour);
            totalBalance    = _custInvoiceJour.SalesBalance;
            invoiceDiscount = _custInvoiceJour.EndDisc;
        }

        return [invoiceAmount, sumMarkup, cashDiscAmount, custTransCashDisc.CashDiscdate, balance, invoiceDiscount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistoryHeaderResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createHistoryHeaderResponse(Common _journal, String50 _orderType)
    {
        CustInvoiceJour             custInvoiceJour;
        CustPackingSlipJour         custPackingSlipJour;  
        CustInvoiceTrans            custInvoiceTrans;
        CustPackingSlipTrans        custPackingSlipTrans;
        SpecTrans                   specTrans;
        CustVendTransOpen           custVendTransOpen;
        CustVendPaymProposalLine    custVendPaymProposalLine;
        CustTransOpen               custTransOpen;
        Amount                      cashDiscAmount, balance, invoiceDiscount, invoiceAmount, sumMarkup;
        TransDate                   cashDiscDate;
        SC_LargeText                tmpStr;
        InventTransOriginId         inventTransOriginId;
        MCRRetailStoreTenderTypeId  paymCode;

        //calculate order totals
        if(_journal.TableId == tablenum(CustInvoiceJour))
        {
            custInvoiceJour = _journal as CustInvoiceJour;            
            
            [invoiceAmount, sumMarkup, cashDiscAmount, cashDiscDate, balance, invoiceDiscount] = this.calcHistoryTotals(custInvoiceJour);
        }
        else
        {
            custPackingSlipJour = _journal as CustPackingSlipJour;            
        }

        //sales order can be deleted. information mostly takken from journal and partially from order
        salesTable = custInvoiceJour ? custInvoiceJour.salesTable() : custPackingSlipJour.salesTable();

        this.addFieldValue(#documentId, node, custInvoiceJour ? custInvoiceJour.InvoiceId : custPackingSlipJour.PackingSlipId);
        this.addFieldValue(#documentType, node, _orderType);
        this.addFieldValue(#originalOrderId, node, custInvoiceJour ? custInvoiceJour.SalesId : custPackingSlipJour.SalesId);
        this.addFieldValue(#currencyId, node, Currency::find(custInvoiceJour ? custInvoiceJour.CurrencyCode : salesTable.CurrencyCode).CurrencyCodeISO);
        this.addFieldValue(#pricesInclTax, node, custInvoiceJour ? custInvoiceJour.InclTax : salesTable.InclTax);
        this.addFieldValue(#status, node, #released);
        this.addFieldValue(#salesPersonId, node, HcmWorker::find(salesTable.WorkerSalesResponsible).PersonnelNumber);
        this.addFieldValue(#salesPersonName, node, HcmWorker::find(salesTable.WorkerSalesResponsible).name());
        this.addFieldValue(#contactId, node, custInvoiceJour ? custInvoiceJour.ContactPersonId : custPackingSlipJour.ContactPersonId);
        this.addFieldValue(#contactName, node, ContactPerson::find(custInvoiceJour ? custInvoiceJour.ContactPersonId : custPackingSlipJour.ContactPersonId).personName());
        this.addFieldValue(#taxPercent, node, 0);
        this.addFieldValue(#taxAmount, node, totalTaxAmount);
        this.addFieldValue(#invoiceDiscount, node, invoiceDiscount);
        this.addFieldValue(#subTotal, node, balance + sumMarkup);
        this.addFieldValue(#totalExclTax, node, invoiceAmount - totalTaxAmount);
        this.addFieldValue(#totalInclTax, node, invoiceAmount);
        this.addFieldValue(#orderDate, node, DateTimeUtil::date(salesTable.createdDateTime));
        this.addFieldValue(#postingDate, node, custInvoiceJour ? custInvoiceJour.InvoiceDate : custPackingSlipJour.DeliveryDate);
        this.addFieldValue(#documentDate, node, custInvoiceJour ? custInvoiceJour.InvoiceDate : custPackingSlipJour.DeliveryDate);
        this.addFieldValue(#dueDate, node, custInvoiceJour ? custInvoiceJour.custTrans().DueDate : dateNull());
        this.addFieldValue(#shipmentDate, node, custPackingSlipJour ? custPackingSlipJour.DeliveryDate : dateNull());
        this.addFieldValue(#requestedDeliveryDate, node, salesTable.ReceiptDateRequested);
        this.addFieldValue(#promisedDeliveryDate, node, salesTable.ReceiptDateConfirmed);
        this.addFieldValue(#paymentTermsCode, node, custInvoiceJour ? custInvoiceJour.Payment : salesTable.Payment);
        
        tmpStr = LanguageTxt::find(tableNum(PaymTerm), PaymTerm::find(custInvoiceJour ? custInvoiceJour.Payment : salesTable.Payment).RecId, languageId).Txt;
        this.addFieldValue(#paymentTermsDescription, node, tmpStr ? tmpStr : PaymTerm::find(custInvoiceJour ? custInvoiceJour.Payment : salesTable.Payment).Description);
        this.addFieldValue(#paymentDiscount, node, cashDiscAmount ? cashDiscAmount : custInvoiceJour.CashDisc);
        this.addFieldValue(#paymentDiscountDate, node, cashDiscDate ? cashDiscDate : custInvoiceJour.CashDiscDate);
        this.addFieldValue(#paymentMethodName, node, custInvoiceJour ? custInvoiceJour.SC_PaymentMethod : custPackingSlipJour.SC_PaymentMethod);
        this.addFieldValue(#paymentStatus, node, salesTable.SC_PaymentStatus);
        this.addFieldValue(#paymentTransactionId, node, salesTable.SC_PaymentTransactionId);
        this.addFieldValue(#locationCode, node, custInvoiceJour ? custInvoiceJour.inventLocationId : custPackingSlipJour.inventLocationId);
        this.addFieldValue(#locationTitle, node, InventLocation::find(custInvoiceJour ? custInvoiceJour.inventLocationId : custPackingSlipJour.inventLocationId).Name);
        this.addFieldValue(#shippingMethodCode, node, custInvoiceJour ? custInvoiceJour.DlvMode : custPackingSlipJour.DlvMode);
        
        paymCode = MCRCustPaymTable::findByRefRecIDRefTableID(salesTable.RecId, salesTable.TableId).TenderTypeId;
        this.addFieldValue(#paymentMethodCode, node, salesTable.mcrIsCallCenter() ? paymCode : custInvoiceJour ? custInvoiceJour.paymMode() : salesTable.PaymMode);
        this.addFieldValue(#customerId, node, custInvoiceJour ? custInvoiceJour.OrderAccount : custPackingSlipJour.OrderAccount);
        this.addFieldValue(#referenceNo, node, custInvoiceJour ? custInvoiceJour.CustomerRef : custPackingSlipJour.CustomerRef);
        this.addFieldValue(#shopAccountEmail, node, salesTable.SC_ShopAccountCode);
        this.addFieldValue(#adminUserEmail, node, salesTable.SC_AdminAccountCode);
        this.addFieldValue(#roundOff, node, totalRoundOff);        
        this.addFieldValue(#shippingMethodName, node, salesTable.SC_ShipmentMethodName);
        this.addFieldValue(#shippingStatus, node, salesTable.SalesStatus == SalesStatus::Backorder ? #pending : #complete);
        this.addFieldValue(#hasReport, node, webshopsTable.EnableReports);

        if(_orderType == #creditNote)
        {
            this.addFieldValue(#outstandingAmount, node, custInvoiceJour.custTrans().remainAmountCur() - cashDiscAmount);
        }
        else
        {
            this.addFieldValue(#outstandingAmount, node, max(custInvoiceJour.custTrans().remainAmountCur() - cashDiscAmount, 0));
        }

        if(custInvoiceJour)
        {
            if(salesTable.MatchingAgreement)
            {
                this.addFieldValue(#salesAgreementId, node, SalesAgreementHeader::find(custInvoiceJour.salesTable().MatchingAgreement).SalesNumberSequence);
            }
            
            custTransOpen       = custInvoiceJour.custTrans().transOpen();
            custVendTransOpen   = custTransOpen.transOpenData().custVendTransOpen();
            inventTransOriginId = InventTrans::findTransId((select firstonly InventTransId from CustInvoiceTrans
                                                                where CustInvoiceTrans.SalesId   == custInvoiceJour.SalesId &&
                                                                      CustInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId).InventTransId).InventTransOrigin;
            if(inventTransOriginId)
            {
                this.addFieldValue(#OriginalInvoiceId, node, (select firstOnly InvoiceId from inventTrans where InventTrans.ReturnInventTransOrigin == inventTransOriginId).InvoiceId);
            }

            if(custVendTransOpen)
            {
                select sum(Balance01), sum(CashDiscToTake) from specTrans
                    where specTrans.RefCompany == custVendTransOpen.company()
                        && specTrans.RefTableId == custVendTransOpen.TableId
                        && specTrans.RefRecId == custVendTransOpen.RecId
                    notexists join custVendPaymProposalLine
                        where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                            && custVendPaymProposalLine.LedgerJournalTransRecId == specTrans.SpecRecId;
            }
        
            this.addFieldValue(#invoicePaymentInProgress, node, specTrans.Balance01 ? #one : #zero);

            select count(RecId) from custInvoiceTrans
                where custInvoiceTrans.SalesId   == custInvoiceJour.SalesId &&
                      custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId;

            this.addFieldValue(#orderLinesCount, node, custInvoiceTrans.RecId);

            loadOrderLines = loadOrderLines && maxOrderLinesToLoad >= custInvoiceTrans.RecId;
            
            if(webshopsTable.EnableDocAttachments)
            {
                this.addAttachments(node, custInvoiceJour.RecId, custInvoiceJour.TableId);
            }
        }
        else
        {
            select count(RecId) from custPackingSlipTrans
                where custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId &&
                      custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId;
            this.addFieldValue(#orderLinesCount, node, custPackingSlipTrans.RecId);

            loadOrderLines = loadOrderLines && maxOrderLinesToLoad >= custPackingSlipTrans.RecId;

            if(webshopsTable.EnableDocAttachments)
            {
                this.addAttachments(node, custPackingSlipJour.RecId, custPackingSlipJour.TableId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistoryLinesResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createHistoryLinesResponse(CustPackingSlipTrans _custPackingSlipTrans = null, CustInvoiceTrans _custInvoiceTrans = null)
    {
        SC_LargeText                productTitle, variantTtitle;
        InventDim                   historyDim;
        Qty                         tmpValue, discValue, discAmount;
        InventTransId               inventTransId;

        salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));
        inventTable   = InventTable::find(_custPackingSlipTrans ? _custPackingSlipTrans.ItemId : _custInvoiceTrans.ItemId);
        historyDim    = _custPackingSlipTrans ? _custPackingSlipTrans.InventDim() : _custInvoiceTrans.InventDim();        

        [productTitle, variantTtitle] = this.getOrderLineTitle(inventTable.ItemId, InventDimCombination::findByInventDim(inventTable.ItemId, historyDim), 
                                                               _custPackingSlipTrans ? _custPackingSlipTrans.SalesCategory : _custInvoiceTrans.SalesCategory);

        if(_custInvoiceTrans && !productTitle) //free text invoice
        {
            productTitle = _custInvoiceTrans.Name;
            _custInvoiceTrans.ItemId = "@SYS23028";
        }
        
        this.addFieldValue(#lineNo, salesLineNode, (_custPackingSlipTrans ? _custPackingSlipTrans.LineNum : _custInvoiceTrans.LineNum) * 10000);

        if(_custPackingSlipTrans) //switch to category name for display only
        {
            _custPackingSlipTrans.ItemId = _custPackingSlipTrans.ItemId ? _custPackingSlipTrans.ItemId : EcoResCategory::find(_custPackingSlipTrans.SalesCategory).Name;
        }
        else
        {
            _custInvoiceTrans.ItemId = _custInvoiceTrans.ItemId ? _custInvoiceTrans.ItemId : EcoResCategory::find(_custInvoiceTrans.SalesCategory).Name;
        }
        this.addFieldValue(#productId, salesLineNode, _custPackingSlipTrans ? _custPackingSlipTrans.ItemId : _custInvoiceTrans.ItemId);
        this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(historyDim, inventTable.ItemId));
        this.addFieldValue(#productTitle, salesLineNode, productTitle);
        this.addFieldValue(#title, salesLineNode,  variantTtitle ? variantTtitle : productTitle);
        this.addFieldValue(#quantity, salesLineNode, _custPackingSlipTrans ? _custPackingSlipTrans.Qty : _custInvoiceTrans.Qty);

        if(_custInvoiceTrans)
        {            
            this.addFieldValue(#availableReturnQuantity, salesLineNode, this.calcAvailableReturnQty(_custInvoiceTrans));

            [tmpValue, discAmount, discValue] = this.calcHistoryLinePriceDiscValues(_custInvoiceTrans);
        }
        this.addFieldValue(#price, salesLineNode, _custPackingSlipTrans ? 0 : tmpValue + discValue);
        this.addFieldValue(#taxPercent, salesLineNode, 0);
        this.addFieldValue(#discountAmount, salesLineNode, _custPackingSlipTrans ? 0 : discAmount);

        if(_custInvoiceTrans.DiscAmount)
        {
            tmpValue = discValue ? discValue / (tmpValue + discValue) * 100 : 0;
        }
        else
        {
            tmpValue = _custInvoiceTrans.DiscPercent;
        }
        this.addFieldValue(#discountPercent, salesLineNode, _custPackingSlipTrans ? 0 : tmpValue);
        this.addFieldValue(#lineAmount, salesLineNode, _custPackingSlipTrans ? 0 : _custInvoiceTrans.lineAmountInclTax());
        this.addFieldValue(#parentLineNo, salesLineNode, (_custPackingSlipTrans ? _custPackingSlipTrans.LineNum : _custInvoiceTrans.LineNum) * 10000);
        this.addFieldValue(#isReadOnlyLine, salesLineNode, 0);
        this.addFieldValue(#lineType, salesLineNode, #item);
        this.addFieldValue(#unitOfMeasureId, salesLineNode, _custPackingSlipTrans ? _custPackingSlipTrans.SalesUnit : _custInvoiceTrans.SalesUnit);
        this.addFieldValue(#unitOfMeasureDescription, salesLineNode, UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(_custPackingSlipTrans ? _custPackingSlipTrans.SalesUnit : _custInvoiceTrans.SalesUnit).RecId, languageId).Description);
        this.addFieldValue(#shipmentDate, salesLineNode, _custPackingSlipTrans ? _custPackingSlipTrans.DeliveryDate : dateNull());
        this.addFieldValue(#quantityShipped, salesLineNode, _custPackingSlipTrans ? _custPackingSlipTrans.Qty : _custInvoiceTrans.Qty);
        this.addFieldValue(#quantityInvoiced, salesLineNode, _custPackingSlipTrans ? 0 : _custInvoiceTrans.Qty);
        this.addFieldValue(#quantityOutstanding, salesLineNode, _custPackingSlipTrans ? _custPackingSlipTrans.Remain : _custInvoiceTrans.Remain);
        this.addFieldValue(#originalOrderId, salesLineNode, _custPackingSlipTrans ? _custPackingSlipTrans.OrigSalesId : _custInvoiceTrans.OrigSalesId);
        this.addFieldValue(#shopAccountEmail, salesLineNode, SalesTable::find(_custPackingSlipTrans ? _custPackingSlipTrans.OrigSalesId : _custInvoiceTrans.OrigSalesId).SC_ShopAccountCode);
        this.addFieldValue(#shippingStatus, salesLineNode, #shipped);

        inventTransId  = _custPackingSlipTrans ? _custPackingSlipTrans.InventTransId : _custInvoiceTrans.InventTransId;
        this.addFieldValue(#configurationId, salesLineNode, SalesLine::findInventTransId(inventTransId).SC_ConfigurationId);

        if(_custInvoiceTrans)
        {
            if(salesTable.MatchingAgreement)
            {
                tmpValue = AgreementLine::findCustInvoiceTrans(_custInvoiceTrans.RecId).LineNumber;
                
                if(tmpValue)
                {
                    this.addFieldValue(#agreementLineNo, salesLineNode, tmpValue);
                }
            }

            this.addSalesMiscCharges(_custInvoiceTrans, _custInvoiceTrans.LineNum); //for line
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryLinePriceDiscValues</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcHistoryLinePriceDiscValues(CustInvoiceTrans _custInvoiceTrans)
    {
        Qty tmpValue, discValue, discAmount;       

        tmpValue   = _custInvoiceTrans.Qty ? _custInvoiceTrans.lineAmountInclTax() / _custInvoiceTrans.Qty : _custInvoiceTrans.lineAmountInclTax();
        discAmount = _custInvoiceTrans.grossAmountInclTax() - _custInvoiceTrans.lineAmountInclTax();
        discValue  = _custInvoiceTrans.Qty ? discAmount / _custInvoiceTrans.Qty : discAmount;

        return [tmpValue, discAmount, discValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAvailableReturnQty</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Qty calcAvailableReturnQty(CustInvoiceTrans _custInvoiceTrans)
    {
        Qty remainQty;

        [remainQty, _custInvoiceTrans.PdsCWQty] = SalesLine::pdsRemainReturnLotQtyAllCreditNote(_custInvoiceTrans.InventTransId, '', _custInvoiceTrans.SalesUnit);

        return _custInvoiceTrans.Qty - remainQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderPrepayments</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createOrderPrepayments(SalesTable _salesTable)
    {
        LedgerJournalTable journalTable;

        ttsBegin;
        this.calculateSalesTotals();

        journalTable = this.createPaymentJournal(_salesTable);

        this.createPaymentTrans(journalTable, _salesTable);

        this.postOrderPrepayments(_salesTable, journalTable);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentJournal</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected LedgerJournalTable createPaymentJournal(SalesTable _salesTable)
    {
        LedgerJournalName  ledgerJournalName;
        LedgerJournalTable journalTable;  

        journalTable.initValue();

        if(webShopsTable.CustPaymJournalName)
        {
            journalTable.initFromLedgerJournalName(webShopsTable.CustPaymJournalName);
            select firstOnly ledgerJournalName where ledgerJournalName.JournalName == webShopsTable.CustPaymJournalName;
        }
        else
        {
            select firstOnly ledgerJournalName where ledgerJournalName.JournalType == LedgerJournalType::CustPayment;

            if(!ledgerJournalName)
            {
                throw error("@SCL325");
            }
            journalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);
        }

        journalTable.insert();
        journalTable.Name             = strFmt("@SCL462", _salesTable.SalesId, _salesTable.SC_PaymentTransactionId);
        journalTable.DefaultDimension = _salesTable.DefaultDimension;

        if(ledgerJournalName.ApproveActive)
        {
            journalTable.Approver     = HcmWorker::userId2Worker(curUserId());
        }
        journalTable.doUpdate();

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentTrans</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createPaymentTrans(LedgerJournalTable _journalTable, SalesTable _salesTable)
    {        
        LedgerJournalTrans  journalTrans;
        LedgerJournalName   ledgerJournalName;
        ExchangeRateHelper  helper;
        CustPaymModeTable   custPaymModeTable;

        journalTrans.clear();
        journalTrans.initValue();
        journalTrans.LineNum                = 1;
        journalTrans.AccountType            = LedgerJournalACType::Cust;
        journalTrans.JournalNum             = _journalTable.JournalNum;
        journalTrans.Voucher                = NumberSeq::newGetVoucherFromId(_journalTable.NumberSequenceTable).voucher();
        journalTrans.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        journalTrans.CurrencyCode           = _salesTable.CurrencyCode;

        helper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curExt()).RecId), journalTrans.CurrencyCode, journalTrans.TransDate);
            
        journalTrans.ExchRate               = helper.getExchangeRate1();
        journalTrans.ExchRateSecond         = helper.getExchangeRate2();
        journalTrans.Triangulation          = journalTrans.ExchRateSecond != 0 ? true : false;
        journalTrans.LedgerDimension        = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumberEnumModule(_salesTable.InvoiceAccount, enum2int(LedgerJournalACType::Cust), enumNum(LedgerJournalACType), ModuleInventCustVend::Cust);
        journalTrans.AmountCurCredit        = totalInclTax - totalCashDisc;

        ledgerJournalName = LedgerJournalName::find(_journalTable.JournalName);
    
        if(ledgerJournalName.FixedOffsetAccount)
        {
            journalTrans.OffsetLedgerDimension  = ledgerJournalName.OffsetLedgerDimension;
            journalTrans.OffsetAccountType      = ledgerJournalName.OffsetAccountType;
            journalTrans.OffsetCompany          = curext();
        }
        else if(!webShopsTable.OffsetLedgerDimension)
        {
            custPaymModeTable = CustPaymModeTable::find(_salesTable.PaymMode);
            
            journalTrans.OffsetAccountType      = custPaymModeTable.AccountType;
            journalTrans.OffsetLedgerDimension  = custPaymModeTable.PaymentLedgerDimension;
            journalTrans.OffsetCompany          = curext();
        }
        else
        {
            journalTrans.OffsetLedgerDimension  = webShopsTable.OffsetLedgerDimension;
            journalTrans.OffsetAccountType      = webShopsTable.OffsetLedgerAccountType;
            journalTrans.OffsetCompany          = webShopsTable.OffsetLedgerCompany;
        }

        if(journalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {            
            journalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerJournalName.FixedOffsetAccount ? ledgerJournalName.OffsetLedgerDimension : webShopsTable.OffsetLedgerDimension, _salesTable.DefaultDimension);
        }
        
        journalTrans.OffsetTxt              = webShopsTable.OffsetLedgerTxt;
        journalTrans.PaymMode               = _salesTable.PaymMode;
        journalTrans.TransactionType        = LedgerTransType::Payment;
        journalTrans.TaxGroup               = _salesTable.TaxGroup;
        journalTrans.SettleVoucher          = SettlementType::OpenTransact;
        journalTrans.Payment                = _salesTable.Payment;
        journalTrans.DefaultDimension       = _salesTable.DefaultDimension;
        journalTrans.OffsetDefaultDimension = _salesTable.DefaultDimension;
        journalTrans.PaymentStatus          = CustPaymModeTable::find(_salesTable.PaymMode).PaymStatus;
        journalTrans.Prepayment             = NoYes::Yes;
        journalTrans.PostingProfile         = CustParameters::find().PrepaymentPostingProfile;
        journalTrans.PaymReference          = this.findPaymReference();

        if(CustParameters::find().TaxOnPrepayment)
        {
            journalTrans.TaxItemGroup       = TaxParameters::find().TaxItemGroup;
        }       

        if(ledgerJournalName.ApproveActive)
        {
            journalTrans.Approved           = NoYes::Yes;
        }
        journalTrans.insert();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesAgreementRespons</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSalesAgreementRespons(SalesAgreementHeader _salesAgreementHeader)
    {
        XmlNode                         addressNode;
        LogisticsPostalAddress          address;
        AgreementHeaderDefault          agreementHeaderDefault = AgreementHeaderDefault::findAgreementHeader(_salesAgreementHeader.RecId);
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLine                   agreementLine;                
        
        custTable = CustTable::find(accountId);
        node      = resultNode.appendChild(resultXml.createElement(#salesAgreement));

        this.createSalesAgreementHeaderResponse(_salesAgreementHeader);

        //shipping address
        addressNode     = node.appendChild(resultXml.createElement(#shipToAddress));
        address         = LogisticsPostalAddress::findRecId(agreementHeaderDefault.DeliveryPostalAddress);
        address.PostBox = agreementHeaderDefault.DeliveryName; //if sales order deleted, we will use this name
        this.addSalesResponseAddress(addressNode, address, #shipToAddress);

        select count(RecId) from agreementLine where agreementLine.Agreement == _salesAgreementHeader.RecId;

        loadOrderLines = loadOrderLines && maxOrderLinesToLoad >= agreementLine.RecId;

        if(loadOrderLines)
        {
            salesLinesNode = node.appendChild(resultXml.createElement(#salesAgreementLines));

            while select agreementLine
                where agreementLine.Agreement == _salesAgreementHeader.RecId &&
                     (agreementLine.Currency == custTable.Currency || agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
                exists join TableId from agreementLineQuantityCommitment
                    where agreementLineQuantityCommitment.RecId == agreementLine.RecId && agreementLineQuantityCommitment.ProductUnitOfMeasure ||
                          agreementLine.AgreementLineType != CommitmentType::ProductQuantity
            {
                salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesAgreementLine));

                this.createSalesAgreementLinesResponse(agreementLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFulfilmentValues</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addFulfilmentValues(AgreementLine _agreementLine, boolean isQty = false)
    {
        #AgreementsRemains
        container fulfillmentValues;

        fulfillmentValues = AgreementLine::calculateFulfillmentForLine(_agreementLine);

        this.addFieldValue(isQty ? #quantityShipped          : #amountShipped, salesLineNode, conPeek(fulfillmentValues, #DeliveredNotInvoicedIndex));
        this.addFieldValue(isQty ? #quantityInvoiced         : #amountInvoiced, salesLineNode, conPeek(fulfillmentValues, #InvoicedIndex));
        this.addFieldValue(isQty ? #remainingReleaseQuantity : #remainingReleaseAmount, salesLineNode, conPeek(fulfillmentValues, #RemainingIndex));
        this.addFieldValue(isQty ? #quantityReleased         : #amountReleased, salesLineNode, conPeek(fulfillmentValues, #ReleasedNotInvoicedNorDeliveredIndex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesAgreementHeaderResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSalesAgreementHeaderResponse(SalesAgreementHeader _salesAgreementHeader)
    {
        this.addFieldValue(#documentId, node, _salesAgreementHeader.SalesNumberSequence);
        this.addFieldValue(#documentTitle, node, _salesAgreementHeader.DocumentTitle);
        this.addFieldValue(#earliestLineEffectiveDate, node, _salesAgreementHeader.EarliestLineEffectiveDate);
        this.addFieldValue(#latestLineExpirationDate, node, _salesAgreementHeader.LatestLineExpirationDate);
        this.addFieldValue(#status, node, activeOnly && !documentId ? #active : this.getAgreementStatus(_salesAgreementHeader));
        this.addFieldValue(#currencyId, node, Currency::find(_salesAgreementHeader.Currency).CurrencyCodeISO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesAgreementLinesResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSalesAgreementLinesResponse(AgreementLine _agreementLine)
    {
        AgreementLineDefault            agreementLineDefault;
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLineVolumeCommitment   agreementLineVolumeCommitment;

        categoryName                    = '';
        agreementLineDefault            = AgreementLineDefault::findAgreementLine(_agreementLine.RecId);
        agreementLineVolumeCommitment   = AgreementLineVolumeCommitment::find(_agreementLine.RecId);
        agreementLineQuantityCommitment = AgreementLineQuantityCommitment::find(_agreementLine.RecId);

        switch(_agreementLine.AgreementLineType)
        {
            case CommitmentType::ProductCategory:
                this.addFieldValue(#lineNo, salesLineNode, _agreementLine.LineNumber);
                this.mergeCategoryHierarchyNames(_agreementLine.Category);
                this.addFieldValue(#categoryId, salesLineNode, categoryName);
                this.addFieldValue(#title, salesLineNode, EcoResCategory::find(_agreementLine.Category).Name);
                this.addFieldValue(#lineDiscountPercent, salesLineNode, _agreementLine.LineDiscountPercent);
                this.addFieldValue(#effectiveDate, salesLineNode, _agreementLine.EffectiveDate);
                this.addFieldValue(#expirationDate, salesLineNode, _agreementLine.ExpirationDate);
                this.addFieldValue(#bigValue, salesLineNode, agreementLineVolumeCommitment.CommitedAmount);
                this.addFieldValue(#minAmount, salesLineNode, _agreementLine.AgreedReleaseLineMinAmount);
                this.addFieldValue(#maxAmount, salesLineNode, _agreementLine.AgreedReleaseLineMaxAmount);
                this.addFieldValue(#isMaxEnforced, salesLineNode, _agreementLine.IsMaxEnforced);

                if(_agreementLine.inventDim().InventSiteId)
                {
                    this.addFieldValue(#locationCode, salesLineNode, _agreementLine.inventDim().InventLocationId);
                    this.addFieldValue(#locationTitle, salesLineNode, _agreementLine.inventDim().inventSite().Name + ' ' + _agreementLine.inventDim().inventLocationName());
                }
                this.addFulfilmentValues(_agreementLine);
                break;

            case CommitmentType::ProductQuantity:
                this.addFieldValue(#lineNo, salesLineNode, _agreementLine.LineNumber);
                this.addFieldValue(#productId, salesLineNode, _agreementLine.ItemId);
                this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(_agreementLine.inventDim(), _agreementLine.ItemId));
                this.addFieldValue(#lineDiscountPercent, salesLineNode, _agreementLine.LineDiscountPercent);
                this.addFieldValue(#effectiveDate, salesLineNode, _agreementLine.EffectiveDate);
                this.addFieldValue(#expirationDate, salesLineNode, _agreementLine.ExpirationDate);
                this.addFieldValue(#quantity, salesLineNode, agreementLineQuantityCommitment.CommitedQuantity);
                this.addFieldValue(#unitOfMeasureId, salesLineNode, agreementLineQuantityCommitment.ProductUnitOfMeasure);
                
                if(!agreementLineQuantityCommitment.PricePerUnit && !_agreementLine.IsPriceInformationMandatory && webShopsTable.CalculateZeroSAPrice)
                {
                    this.addFieldValue(#price, salesLineNode, this.calcSalesAgreementItemPrice(_agreementLine, agreementLineQuantityCommitment.ProductUnitOfMeasure));
                }
                else
                {
                    this.addFieldValue(#price, salesLineNode, agreementLineQuantityCommitment.PricePerUnit);
                }

                this.addFieldValue(#minAmount, salesLineNode, _agreementLine.AgreedReleaseLineMinAmount);
                this.addFieldValue(#maxAmount, salesLineNode, _agreementLine.AgreedReleaseLineMaxAmount);
                this.addFieldValue(#isMaxEnforced, salesLineNode, _agreementLine.IsMaxEnforced);

                if(_agreementLine.inventDim().InventSiteId)
                {
                    this.addFieldValue(#locationCode, salesLineNode, _agreementLine.inventDim().InventLocationId);
                    this.addFieldValue(#locationTitle, salesLineNode, _agreementLine.inventDim().inventSite().Name + ' ' + _agreementLine.inventDim().inventLocationName());
                }
                this.addFulfilmentValues(_agreementLine, true);
                break;

            case CommitmentType::ProductRootCategory:
                this.addFieldValue(#lineNo, salesLineNode, _agreementLine.LineNumber);
                this.mergeCategoryHierarchyNames(_agreementLine.Category);
                this.addFieldValue(#categoryId, salesLineNode, categoryName);
                this.addFieldValue(#title, salesLineNode, EcoResCategory::find(_agreementLine.Category).Name);
                this.addFieldValue(#lineDiscountPercent, salesLineNode, _agreementLine.LineDiscountPercent);
                this.addFieldValue(#effectiveDate, salesLineNode, _agreementLine.EffectiveDate);
                this.addFieldValue(#expirationDate, salesLineNode, _agreementLine.ExpirationDate);
                this.addFieldValue(#bigValue, salesLineNode, agreementLineVolumeCommitment.CommitedAmount);
                this.addFieldValue(#minAmount, salesLineNode, _agreementLine.AgreedReleaseLineMinAmount);
                this.addFieldValue(#maxAmount, salesLineNode, _agreementLine.AgreedReleaseLineMaxAmount);
                this.addFieldValue(#isMaxEnforced, salesLineNode, _agreementLine.IsMaxEnforced);

                if(_agreementLine.inventDim().InventSiteId)
                {
                    this.addFieldValue(#locationCode, salesLineNode, _agreementLine.inventDim().InventLocationId);
                    this.addFieldValue(#locationTitle, salesLineNode, _agreementLine.inventDim().inventSite().Name + ' ' + _agreementLine.inventDim().inventLocationName());
                }
                this.addFulfilmentValues(_agreementLine);
                break;

            case CommitmentType::ProductVolume:
                this.addFieldValue(#lineNo, salesLineNode, _agreementLine.LineNumber);
                this.addFieldValue(#productId, salesLineNode, _agreementLine.ItemId);
                this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(_agreementLine.inventDim(), _agreementLine.ItemId));
                this.addFieldValue(#lineDiscountPercent, salesLineNode, _agreementLine.LineDiscountPercent);
                this.addFieldValue(#effectiveDate, salesLineNode, _agreementLine.EffectiveDate);
                this.addFieldValue(#expirationDate, salesLineNode, _agreementLine.ExpirationDate);
                this.addFieldValue(#bigValue, salesLineNode, agreementLineVolumeCommitment.CommitedAmount);
                this.addFieldValue(#minAmount, salesLineNode, _agreementLine.AgreedReleaseLineMinAmount);
                this.addFieldValue(#maxAmount, salesLineNode, _agreementLine.AgreedReleaseLineMaxAmount);
                this.addFieldValue(#isMaxEnforced, salesLineNode, _agreementLine.IsMaxEnforced);

                if(_agreementLine.inventDim().InventSiteId)
                {
                    this.addFieldValue(#locationCode, salesLineNode, _agreementLine.inventDim().InventLocationId);
                    this.addFieldValue(#locationTitle, salesLineNode, _agreementLine.inventDim().inventSite().Name + ' ' + _agreementLine.inventDim().inventLocationName());
                }
                this.addFulfilmentValues(_agreementLine);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePersistedBasket</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [Replaceable]
    public XmlDocument CreatePersistedBasket(XmlDocument _request)
    {
        boolean ret;        

        this.createHeaderXml();

        this.getParameters(_request);            
                
        ttsbegin;

        if(syncOrderType == #quote || accountType == #contact)
        {
            ret = originalOrderId ? this.convertOrder2PersistedBasket() : this.createQuotationTable(false, true);
        }
        else
        {
            ret = originalOrderId ? this.convertOrder2PersistedBasket() : this.createSalesTable(false, true);
        }

        if(ret)
        {
            resultNode.appendChild(resultXml.createElement(#documentId)).innerText(salesTable ? salesTable.SalesId : salesQuotationTable.QuotationId);
            resultNode.appendChild(resultXml.createElement(#documentType)).innerText(salesTable ? #order : #quote);
        }
        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuotationLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createQuotationLine(boolean _doProductChecks = true)
    {
        infolog.clear(0);
        
        //add simple item line
        if(lineType == #item)
        {            
            if(salesQuotationTable.SC_IsPersistedBasket)
            {
                if(!SC_AXDataServiceClient_Order::createQuoteCategoryItemTypeLineStatic(this))
                {                    
                    if(!SC_AXDataServiceClient_Order::createQuoteItemTypeLineStatic(this, _doProductChecks))
                    {
                        node = nonOrderableLines.appendChild(resultXml.createElement(#line));
                        this.initNonOrderableDefaultFields(this.getProductName());
                    }
                }
            }
            else
            {
                if(!this.createQuoteSalesCategoryItemTypeLine())
                {
                    this.createQuoteItemTypeLine(_doProductChecks);                    
                }
            }                            
        }

        //add payment or shipping as misc charges
        if((lineType == #paymentcosts && linePrice) || lineType == #shippingcosts && salesQuotationTable)
        {
            this.createChargeLineType(true);
        }

        //add promotion
        if(lineType == #promotioncode && salesQuotationTable)
        {
            this.createPromotionLineType(true);
        }

        //externalcoupon
        if(lineType == #externalcoupon && salesQuotationTable && !salesQuotationTable.SC_IsPersistedBasket)
        {
            this.calcQuoteCouponDiscounts();
        }

        infolog.clear(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuoteItemTypeLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createQuoteItemTypeLine(boolean _doProductChecks = true)
    {
        InventDim inventDim;
        Qty       maxQty;
        boolean   ret;
        Integer   a;

        inventTable = InventTable::find(lineProductId);

        if(!inventTable)
        {
            return;
        }

        //do not search alt items for basket with originalQuoteId and for promotableQuote saveOrder
        altItemFound = this.findAlternativeItem(_doProductChecks) || altItemFound;        

        if(_doProductChecks && !configurationId) //skip all checks for configured product from e-Con
        {
            [ret, maxQty] = this.validateProductLineChecks();

            if(!ret)
            {
                return;
            }
        }

        try
        {
            salesQuotationLine.clear();
            salesQuotationLine.initValue();
            salesQuotationLine.initFromSalesQuotationTable(salesQuotationTable);

            salesQuotationLine.ItemId               = lineProductId;
            salesQuotationLine.SC_ConfigurationId   = configurationId;

            using(RetailSalesQuotationLineContext context = RetailSalesQuotationLineContext::construct())
            {
                context.searchPrice(false);
                salesQuotationLine.initFromInventTable(inventTable);
            }

            salesQuotationLine.SalesUnit            = parmUnitId ? parmUnitId : salesQuotationLine.SalesUnit;
            salesQuotationLine.SalesQty             = lineQuantityPrecision ? roundDown(lineQty, lineQuantityPrecision) : lineQty;
            salesQuotationLine.PdsCWQty             = PdsCatchWeight::convertQtyToCWQty(lineProductId, salesQuotationLine.SalesQty, parmUnitId ? parmUnitId : salesQuotationLine.SalesUnit, true);

            salesQuotationLine.modifiedField(fieldnum(SalesQuotationLine, SalesUnit));

            inventDim = this.setItemVariantSpecificStorageDim(true);

            salesQuotationLine.setInventDimIdFromInventDim(inventDim);
            salesQuotationLine.setDeliveryDateControlType(salesQuotationLine.InventDimId, salesQuotationTable);

            if(!this.mergeDuplicateLines(maxQty, true)) //check order lines for duplicate and update qty if found
            {
                salesQuotationLine.setPriceDisc(salesQuotationLine.inventDim());

                if(linePrice && salesQuotationLine.SalesPrice != linePrice)
                {
                    salesQuotationLine.SalesPrice = linePrice;
                    salesQuotationLine.LineAmount = salesQuotationLine.calcLineAmountForced();
                }

                salesQuotationLine.initFromProductDimensions();

                this.setWebshopDiscount(true);

                //set custom default values and field mapping
                this.setWebshopDataMapping([custTable.TableId, salesQuotationTable.TableId, salesQuotationLine.TableId], [salesQuotationLine.TableId]);

                salesQuotationLine.createLine(false, false, false, !isBasketCalculation, true, false);

                updateLineCon += salesQuotationLine.RecId; //Big basket functionality
            }
        }
        catch
        {
            for(a=1;a<=infologLine();a++)
            {
                this.errorHandler(infolog.text(a));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuoteSalesCategoryItemTypeLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean createQuoteSalesCategoryItemTypeLine()
    {
        Integer         a;
        InventDim       inventDim;
        SalesQuotationLineForeignTradeCategory salesQuotationLineForeignTradeCategory;
        EcoResCategory  ecoResCategoryLocal = EcoResCategory::findByName(lineProductId,
                                          EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales).CategoryHierarchy).RecId);
        if(ecoResCategoryLocal)
        {
            try
            {
                salesQuotationLine.clear();
                salesQuotationLine.initValue();
                salesQuotationLine.initFromSalesQuotationTable(salesQuotationTable);

                salesQuotationLine.SalesUnit  = parmUnitId ? parmUnitId : salesQuotationLine.SalesUnit;
                salesQuotationLine.SalesQty   = lineQuantityPrecision ? roundDown(lineQty, lineQuantityPrecision) : lineQty;
                salesQuotationLine.SalesPrice = ecoResCategoryLocal.SC_SalesPrice;
                salesQuotationLine.initFromItemOrCategory('', ecoResCategoryLocal.RecId, '');

                inventDim = salesQuotationLine.inventDim();

                if(!inventDim.InventSiteId || !inventDim.InventLocationId)
                {
                    inventDim = this.setDefaultSiteWarehouse(inventTable, inventDim);
                }

                salesQuotationLine.setInventDimIdFromInventDim(inventDim);


                if(linePrice && salesQuotationLine.SalesPrice != linePrice)
                {
                    salesQuotationLine.SalesPrice = linePrice;
                    salesQuotationLine.LineAmount = salesQuotationLine.calcLineAmountForced();
                }

                this.setWebshopDiscount(true);

                //set custom default values and field mapping
                this.setWebshopDataMapping([custTable.TableId, salesQuotationTable.TableId, salesQuotationLine.TableId], [salesQuotationLine.TableId]);

                salesQuotationLine.createLine(false, false, false, true, true, false);

                salesQuotationLineForeignTradeCategory.initFromSalesQuotationLine(salesQuotationLine);
                salesQuotationLineForeignTradeCategory.insert();                

                updateLineCon += salesQuotationLine.RecId; //Big basket functionality
            }
            catch
            {
                for(a=1;a<=infologLine();a++)
                {
                    this.errorHandler(infolog.text(a));
                }
            }
        }

        return ecoResCategoryLocal.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductLineChecks</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container validateProductLineChecks()
    {
        InventDim inventDim;
        Qty       maxQty, inventory;
        boolean   ret, isSalesQtyOk;

        if(this.isCheckStock())
        {
            inventDim  = InventDim::find(lineInventDimId);
            inventory  = this.calcInventory(inventDim);
            inventory  = this.calcInventoryByDocumentId(inventDim, inventory); //take all qty from lines for edit order and ignore existing negative inventory
        }

        [maxQty, isSalesQtyOk] = this.isSalesQtyOk();

        ret = this.isLineOrderable() && this.isLineInStock(inventory, false) && this.isDecreasedQuantity(inventory, false) && isSalesQtyOk;

        return [ret, maxQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventoryByDocumentId</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Qty calcInventoryByDocumentId(InventDim _inventDim, Qty _inventory)
    {
        SalesLine   salesLineLocal;
        InventDim   inventDimLocal;        

        if(isBasketCalculation && documentId && SalesTable::find(documentId).SalesType == SalesType::Sales)
        {            
            select sum(SalesQty) from salesLineLocal
                where salesLineLocal.SalesId == documentId &&
                      salesLineLocal.ItemId == lineProductId &&
                      salesLineLocal.SalesUnit == parmUnitId &&
                      !salesLineLocal.SC_SuppItem
                exists join inventDimLocal
                    where inventDimLocal.inventDimId == salesLineLocal.InventDimId &&                          
                          _inventDim.InventColorId == inventDimLocal.InventColorId &&
                          _inventDim.InventSizeId == inventDimLocal.InventSizeId &&
                          _inventDim.configId == inventDimLocal.configId &&
                          _inventDim.InventStyleId == inventDimLocal.InventStyleId;

            _inventory = max(0, _inventory) + salesLineLocal.SalesQty;
        }

        return _inventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChargeLineType</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createChargeLineType(boolean _quote = false)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;
                
        markupTable = this.findOrCreateMarkupTable(lineType == #shippingcosts);
            
        markupTrans.clear();

        if(_quote)
        {
            markupTrans.initFromSalesQuotationTable(salesQuotationTable);
            markupTrans.LineNum = MarkupTrans::lastLineNum(salesQuotationTable.TableId, salesQuotationTable.RecId) + 1;
        }
        else
        {
            markupTrans.initFromSalesTable(salesTable);
            markupTrans.LineNum = MarkupTrans::lastLineNum(salesTable.TableId, salesTable.RecId) + 1;
        }

        markupTrans.initFromMarkupTable(markupTable);
        markupTrans.MarkupCategory = MarkupCategory::Fixed;
        markupTrans.Value          = linePrice;        
        markupTrans.insert();

        totalPaymentShipmentCost += linePrice;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPromotionLineType</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createPromotionLineType(boolean _quote = false)
    {
        if(_quote)
        {
            salesQuotationTable.SC_PromotionCode  = lineProductId;
            salesQuotationTable.SC_PromotionTitle = lineTitle;
            salesQuotationTable.SC_PromotionType  = lineDiscountType;
            salesQuotationTable.SC_PromotionValue = salesQuotationTable.SC_PromotionType == SC_DiscountType::Percent ? lineDiscountValue * 100 : lineDiscountValue;            
            salesQuotationTable.modifiedField(fieldnum(salesQuotationTable, SC_PromotionValue));
        }
        else
        {
            salesTable.SC_PromotionCode  = lineProductId;
            salesTable.SC_PromotionTitle = lineTitle;
            salesTable.SC_PromotionType  = lineDiscountType;
            salesTable.SC_PromotionValue = salesTable.SC_PromotionType == SC_DiscountType::Percent ? lineDiscountValue * 100 : lineDiscountValue;            
            salesTable.type().modifiedField(fieldnum(salesTable, SC_PromotionValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuotationTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean createQuotationTable(boolean _isBasketCalculation = false, boolean _isPersistedBasket = false)
    {
        int                    a;
        boolean                ret;
        utcDateTime            utcDateTimeNow;        

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        if(accountType == #contact)
        {
            smmBusRelTable = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty);
        }

        if(custTable || smmBusRelTable)
        {
            try
            {
                salesQuotationTable.clear();
                salesQuotationTable.initValue();
                salesQuotationTable.QuotationId          = _isBasketCalculation ? strrem(guid2str(newguid()), '{}-') : this.getNumberSeq(true);
                salesQuotationTable.QuotationType        = QuotationType::Sales;
                salesQuotationTable.SC_SanaOrder         = NoYes::Yes;
                utcDateTimeNow                           = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone());
                salesQuotationTable.SC_DateReceived      = DateTimeUtil::date(utcDateTimeNow);
                salesQuotationTable.SC_TimeReceived      = DateTimeUtil::time(utcDateTimeNow);
                salesQuotationTable.SC_ShopAccountCode   = shopAccountEmail;
                salesQuotationTable.SC_AdminAccountCode  = adminUserEmail;
                salesQuotationTable.CustomerRef          = referenceNo;
                salesQuotationTable.SC_WebshopId         = webShopsTable.WebShopId;
                salesQuotationTable.SC_isPersistedBasket = _isPersistedBasket; //BigBasket functionality

                if(orderDueDate)
                {
                    salesQuotationTable.QuotationExpiryDate = orderDueDate < salesQuotationTable.QuotationExpiryDate ? orderDueDate : salesQuotationTable.QuotationExpiryDate;
                }


                for(i=0;commentLines && i<commentLines.length();i++)
                {
                    node = commentLines.item(i);
                    salesQuotationTable.SC_Comments     += salesQuotationTable.SC_Comments ? '\n' + node.innerText() : node.innerText();
                }

                if(custTable)
                {
                    salesQuotationTable.CustAccount      = custTable.AccountNum;
                    salesQuotationTable.initFromCustTable();

                    if(salesQuotationTable.CustAccount != salesQuotationTable.InvoiceAccount)
                    {
                        salesQuotationTable.initInvoiceAccount();
                    }

                    if(!salesQuotationTable.checkAccount() || !salesQuotationTable.checkInvoiceAccount())
                    {
                        throw Exception::Error;
                    }
                }
                else
                {
                    salesQuotationTable.BusRelAccount     = smmBusRelTable.BusRelAccount;
                    salesQuotationTable.initFromBusinessRelationTable();
                }

                this.initDeliveryAddress(true);
                this.setPickupLocationFromParams(true);

                salesQuotationTable.InventSiteId            = this.setProductStorageDim().InventSiteId;
                salesQuotationTable.InventLocationId        = this.setProductStorageDim().InventLocationId;
                salesQuotationTable.LanguageId              = languageId ? languageId : salesQuotationTable.LanguageId;
                salesQuotationTable.SC_PaymentMethod        = paymentMethodName;
                salesQuotationTable.SC_PaymentStatus        = paymentStatus;
                salesQuotationTable.SC_PaymentTransactionId = paymentTransactionId;
                salesQuotationTable.SC_ShipmentMethodName   = shippingMethodName;
                salesQuotationTable.SC_OrderId              = sanaOrderId ? sanaOrderId : salesQuotationTable.SC_OrderId;
                salesQuotationTable.PaymMode                = this.getOrderPaymentMethodCode(salesQuotationTable.PaymMode);
                salesQuotationTable.DlvMode                 = shippingMethodCode ? shippingMethodCode : salesQuotationTable.DlvMode;
                salesQuotationTable.SC_IsPromotable         = webShopsTable.QuotePromotableDefault;
                salesQuotationTable.SC_AuthorizationStatus  = orderAuthorizationStatus;

                if(salesPersonId)
                {
                    salesQuotationTable.WorkerSalesResponsible = HcmWorker::findByPersonnelNumber(salesPersonId).RecId;
                }
                if(contactId)
                {
                    salesQuotationTable.ContactPersonId        = contactId;
                }

                this.setSavedCustomFields(salesQuotationTable);

                this.setQuoteDeliveryDates();

                //set custom default values and field mapping
                this.setWebshopDataMapping([custTable.TableId, salesQuotationTable.TableId], [salesQuotationTable.TableId]);

                salesQuotationTable.insert();

                this.createAttachmentURL(true);
                this.updateSalesQuotationTableExt();

                ret = true;
            }
            catch
            {
                for(a=1;a<=infologLine();a++)
                {
                    this.errorHandler(infolog.text(a));
                }
            }
        }
        else
        {
            this.errorHandler(strfmt(#error0011, accountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuoteDeliveryDates</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]        
    protected void setQuoteDeliveryDates() //set dates according delivery date control
    {
        SalesCalcAvailableDlvDates  salesCalcAvailableDlvDates;
        SalesQuotationLine          salesQuotationLineLocal;

        //update quotation order (only if new requestedDeliveryDate) or new quotation order
        if((salesQuotationTable && requestedDeliveryDate && requestedDeliveryDate != salesQuotationTable.ShippingDateRequested) || !salesQuotationTable)
        {
            salesQuotationTable.ShippingDateRequested = requestedDeliveryDate ? requestedDeliveryDate : salesQuotationTable.ShippingDateRequested;
            salesQuotationTable.ReceiptDateRequested  = requestedDeliveryDate ? requestedDeliveryDate : salesQuotationTable.ShippingDateRequested;

            if(salesQuotationTable.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(salesQuotationTable, fieldNum(salesQuotationTable,ShippingDateRequested));
                salesCalcAvailableDlvDates.createPossibleShippingAndReceiptDates(true);

                salesQuotationTable.ShippingDateRequested = salesCalcAvailableDlvDates.parmSalesAvailableDlvDatesTmp().AvailableShippingDate;
                salesQuotationTable.ReceiptDateRequested  = salesCalcAvailableDlvDates.parmSalesAvailableDlvDatesTmp().AvailableReceiptDate;
            }

            if(salesQuotationTable && salesQuotationTable.orig().SC_IsPersistedBasket)
            {
                while select forupdate salesQuotationLineLocal
                where salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId &&
                        (salesQuotationLineLocal.ReceiptDateRequested  != salesQuotationTable.ReceiptDateRequested ||
                        salesQuotationLineLocal.ShippingDateRequested != salesQuotationTable.ShippingDateRequested)
                {
                    salesQuotationLineLocal.ReceiptDateRequested  = salesQuotationTable.ReceiptDateRequested;
                    salesQuotationLineLocal.ShippingDateRequested = salesQuotationTable.ShippingDateRequested;
                    salesQuotationLineLocal.doUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSalesLine(boolean _doProductChecks = true)
    {
        infolog.clear(0);

        //add simple item line
        if(lineType == #item)
        {            
            if(salesTable.SC_IsPersistedBasket)
            {
                if(!SC_AXDataServiceClient_Order::createSalesCategoryItemTypeLineStatic(this))
                {
                    inventTable = InventTable::find(lineProductId);

                    if(inventTable.SC_GiftCard || !SC_AXDataServiceClient_Order::createSalesItemTypeLineStatic(this, _doProductChecks))
                    {
                        node = nonOrderableLines.appendChild(resultXml.createElement(#line));
                        this.initNonOrderableDefaultFields(this.getProductName());
                    }
                }
            }
            else
            {
                if(!this.createSalesCategoryItemTypeLine())
                {
                    this.createSalesItemTypeLine(_doProductChecks);
                    this.explodeBOMLines();
                }

                if(inventTable.SC_GiftCard)
                {
                    this.createGiftCard();
                }
            }
        }

        //add payment or shipping as misc charges
        if((lineType == #paymentcosts && linePrice) || lineType == #shippingcosts && salesTable)
        {
            this.createChargeLineType();
        }

        //add promotion
        if(lineType == #promotionCode && salesTable)
        {
            if(this.isRetailEnabled())
            {
                this.applyRetailCoupon();
            }
            else
            {
                this.createPromotionLineType();
            }
        }

        //externalcoupon
        if(lineType == #externalcoupon && salesTable)
        {
            if(this.isRetailEnabled())
            {
                this.applyRetailCoupon();
            }
            
            if(!externalCouponUsed && !salesTable.SC_IsPersistedBasket && !this.isCouponGiftCard())
            {
                this.calcSalesCouponDiscounts();
            }
        }

        infolog.clear(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesItemTypeLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSalesItemTypeLine(boolean _doProductChecks = true)
    {
        InventDim       inventDim;
        Qty             maxQty, lineDisc;
        boolean         ret, isLinkedWithoutPrice;
        Integer         a;
        RecId           tmpAgreementLine;

        inventTable = InventTable::find(lineProductId);

        if(!inventTable)
        {
            return;
        }

        //do not search alt items for basket with originalQuoteId
        altItemFound = this.findAlternativeItem(_doProductChecks) || altItemFound;

        if(_doProductChecks && !configurationId) //skip all checks for configured product from e-Con
        {
            [ret, maxQty] = this.validateProductLineChecks();

            if(!ret)
            {
                return;
            }
        }

        try
        {
            salesLine.clear();
            salesline.initValue();
            salesline.initFromSalesTable(salesTable);

            salesline.ItemId                = lineProductId;
            salesline.SC_ConfigurationId    = configurationId;
            salesline.SalesUnit             = parmUnitId ? parmUnitId : salesline.SalesUnit;
            salesline.SalesQty              = lineQuantityPrecision ? roundDown(lineQty, lineQuantityPrecision) : lineQty;
            salesline.PdsCWQty              = PdsCatchWeight::convertQtyToCWQty(lineProductId, salesline.SalesQty, salesline.SalesUnit, true);
            salesline.initFromInventTable(inventTable, false);
            salesline.PriceUnit             = this.isRetailEnabled() ? 1 : salesline.PriceUnit;
            //skip intercompany update
            salesline.SkipUpdate            = isBasketCalculation ? InterCompanySkipUpdate::Both : salesline.SkipUpdate;
            salesline.SourcingOrigin        = isBasketCalculation ? SalesSourcingOrigin::Inventory : salesline.SourcingOrigin;
            salesline.DeliveryType          = isBasketCalculation ? TradeLineDlvType::None : salesline.DeliveryType;
            
            inventDim = this.setItemVariantSpecificStorageDim();
            salesLine.setInventDimIdFromInventDim(inventDim);            

            isLinkedWithoutPrice = this.linkSalesAgreementOrderLine();

            if(!this.mergeDuplicateLines(maxQty)) //check order lines for duplicate and update qty if found
            {
                if(!this.isRetailEnabled())
                {
                    if(isLinkedWithoutPrice && webShopsTable.CalculateZeroSAPrice)
                    {
                        tmpAgreementLine                = salesline.MatchingAgreementLine;
                        salesline.MatchingAgreementLine = 0; //clear SA link
                        lineDisc                        = salesLine.LinePercent; //save SA discount
                    
                        salesline.setPriceDisc(salesLine.inventDim(), salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None && !isBasketCalculation);
                    
                        linePrice                       = salesline.SalesPrice; //save orig price

                        if(lineDisc) //use it only if SA has line discount if not using existind sales line discount
                        {
                            salesline.LinePercent           = lineDisc; // restore SA discount
                            salesLine.LineDisc              = 0; //clear not SA discount
                        }
                        salesLine.SalesPrice            = 0; //to force recalculate line amount below
                        salesline.MatchingAgreementLine = tmpAgreementLine; //restore SA link
                    }
                    else
                    {
                        salesline.setPriceDisc(salesLine.inventDim(), salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None && !isBasketCalculation);
                    }
                }

                if(linePrice && salesline.SalesPrice != linePrice)
                {
                    salesline.SalesPrice = linePrice;
                    salesline.LineAmount = salesline.calcLineAmountForced();
                }

                salesline.initFromProductDimensions();

                this.setWebshopDiscount();

                //set custom default values and field mapping
                this.setWebshopDataMapping([custTable.TableId, salesTable.TableId, salesline.TableId], [salesline.TableId]);
                
                this.salesLineCreateLine(isBasketCalculation);

                if(!isBasketCalculation)
                {
                    this.setCTPConfirmedDates();
                }

                updateLineCon += salesline.RecId; //Big basket functionality
            }
        }
        catch
        {
            for(a=1;a<=infologLine();a++)
            {
                this.errorHandler(infolog.text(a));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesItemTypeLineStatic</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    public static boolean createSalesItemTypeLineStatic(SC_AXDataServiceClient_Order _this, boolean _doProductChecks = true)
    {
        boolean ret = true;

        try
        {
            ttsBegin;
            _this.createSalesItemTypeLine(_doProductChecks);
            _this.explodeBOMLines();
            ttsCommit;
        }
        catch
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesCategoryItemTypeLineStatic</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    public static boolean createSalesCategoryItemTypeLineStatic(SC_AXDataServiceClient_Order _this)
    {
        boolean ret;

        ttsBegin;
        ret = _this.createSalesCategoryItemTypeLine();            
        ttsCommit;        

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuoteCategoryItemTypeLineStatic</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    public static boolean createQuoteCategoryItemTypeLineStatic(SC_AXDataServiceClient_Order _this)
    {
        boolean ret;
       
        ttsBegin;
        ret = _this.createQuoteSalesCategoryItemTypeLine();
        ttsCommit;
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuoteItemTypeLineStatic</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    public static boolean createQuoteItemTypeLineStatic(SC_AXDataServiceClient_Order _this, boolean _doProductChecks = true)
    {
        boolean ret = true;

        try
        {
            ttsBegin;
            _this.createQuoteItemTypeLine(_doProductChecks);            
            ttsCommit;
        }
        catch
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemVariantSpecificStorageDim</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected InventDim setItemVariantSpecificStorageDim(boolean _quote = false)
    {
        InventDim inventDim = _quote ? salesQuotationLine.inventDim() : salesline.inventDim();

        inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(_quote ? salesQuotationLine.ItemId : salesLine.ItemId), InventDim::find(lineInventDimId));
        inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, inventDim); //search item/variant specific site/location

        if(inventDim.InventSiteId && !inventDim.InventLocationId) //retry to search default location if site found
        {
            inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, inventDim);
        }

        if(!inventDim.InventSiteId || !inventDim.InventLocationId)
        {
            inventDim.InventSiteId = _quote ? salesQuotationTable.InventSiteId : salesTable.InventSiteId;
            inventDim.InventLocationId = _quote ? salesQuotationTable.InventLocationId : salesTable.InventLocationId;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesCategoryItemTypeLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean createSalesCategoryItemTypeLine()
    {
        Integer         a;
        InventDim       inventDim;
        SalesLineForeignTradeCategory salesLineForeignTradeCategory;
        EcoResCategory  ecoResCategoryLocal = EcoResCategory::findByName(lineProductId,
                                          EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales).CategoryHierarchy).RecId);
        if(ecoResCategoryLocal)
        {
            try
            {
                salesLine.clear();
                salesline.initValue();
                salesline.initFromSalesTable(salesTable);

                salesline.SalesUnit  = parmUnitId ? parmUnitId : salesline.SalesUnit;
                salesline.SalesQty   = lineQuantityPrecision ? roundDown(lineQty, lineQuantityPrecision) : lineQty;
                salesline.SalesPrice = ecoResCategoryLocal.SC_SalesPrice;
                salesline.initFromItemOrCategory('', ecoResCategoryLocal.RecId, '');

                inventDim = salesline.inventDim();

                if(!inventDim.InventSiteId || !inventDim.InventLocationId)
                {
                    inventDim = this.setDefaultSiteWarehouse(inventTable, inventDim);
                }

                salesLine.setInventDimIdFromInventDim(inventDim);


                if(linePrice && salesline.SalesPrice != linePrice)
                {
                    salesline.SalesPrice = linePrice;
                    salesline.LineAmount = salesline.calcLineAmountForced();
                }

                this.setWebshopDiscount();

                //set custom default values and field mapping
                this.setWebshopDataMapping([custTable.TableId, salesTable.TableId, salesline.TableId], [salesline.TableId]);

                salesline.createLine(false, false, false, true, true, false);

                salesLineForeignTradeCategory.initFromSalesLine(salesLine);
                salesLineForeignTradeCategory.insert();
                salesLine.type().updatePendingRegistrationsNonStocked(false);
                
                updateLineCon += salesline.RecId; //Big basket functionality
            }
            catch
            {
                for(a=1;a<=infologLine();a++)
                {
                    this.errorHandler(infolog.text(a));
                }
            }
        }

        return ecoResCategoryLocal.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCTPConfirmedDates</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void setCTPConfirmedDates()
    {        
        if (salesLine.DeliveryDateControlType == SalesDeliveryDateControlType::CTP)
        {
            InventUpdateOnhandGlobal::Instance().ttsNotifyPreCommit();
            
            salesLine.type().setConfirmedDates(SalesConfirmDatesCommandStrategy::newParameters(salesline.DeliveryDateControlType));
            salesLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpSalesLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createTmpSalesLine()
    {
        RecordInsertList    dataRealInsertList = new RecordInsertList(tableNum(SalesLine), false, false, false, false, false, tmpSalesLine);
        Counter             lineCounter;        

        for(lineCounter = 1; lineCounter <= conLen(updateLineCon); lineCounter++)
        {
            tmpSalesLine.data(SalesLine::findRecId(conPeek(updateLineCon, lineCounter))); //Big basket functionality
            dataRealInsertList.add(tmpSalesLine);
        }

        dataRealInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpSalesQuotationLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createTmpSalesQuotationLine()
    {
        RecordInsertList    dataRealInsertList = new RecordInsertList(tableNum(SalesQuotationLine), false, false, false, false, false, tmpSalesQuotationLine);
        Counter             lineCounter;        

        for(lineCounter = 1; lineCounter <= conLen(updateLineCon); lineCounter++)
        {
            tmpSalesQuotationLine.data(SalesQuotationLine::findRecId(conPeek(updateLineCon, lineCounter))); //Big basket functionality
            dataRealInsertList.add(tmpSalesQuotationLine);
        }

        dataRealInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkSalesAgreementOrderLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean linkSalesAgreementOrderLine()
    {
        AgreementLine                   agreementLine;
        SalesAgreementHeader            salesAgreementHeader;
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;

        if(salesTable.MatchingAgreement && !skipSalesAgreement && !altItemFound) //sales agreements
        {
            if(agreementLineNo) //manually set
            {
                salesAgreementHeader = SalesAgreementHeader::findAgreementId(salesAgreementId);

                select firstOnly agreementLine
                    where agreementLine.Agreement == salesAgreementHeader.RecId &&
                            agreementLine.LineNumber == str2int(agreementLineNo);

                if(agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
                {
                    agreementLineQuantityCommitment = agreementLine as AgreementLineQuantityCommitment;
                }
                                                
                salesline.setPriceDisc(salesLine.inventDim(), salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None);

                if (agreementLine.RecId && this.canLinkAgreement(agreementLine, salesLine))
                {
                    salesline.initFromAgreementLine(agreementLine);
                }
            }
            else //auto sales agreement
            {
                SalesCalcAvailableDlvDates::initDateFields(salesLine); //calc dates for correct expiration SA date check

                agreementLine = AgreementLine::findLineForAutoMatch(salesline, salesTable.MatchingAgreement, true);

                if(agreementLine.AgreementLineType == CommitmentType::ProductQuantity)
                {
                    agreementLineQuantityCommitment = agreementLine as AgreementLineQuantityCommitment;
                }

                if(agreementLine && (agreementLineQuantityCommitment.ProductUnitOfMeasure || !agreementLineQuantityCommitment))
                {
                    salesline.initFromAgreementLine(agreementLine);
                }
            }
        }
        //return true if linked without price
        return agreementLine && agreementLine.AgreementLineType == CommitmentType::ProductQuantity && !agreementLineQuantityCommitment.PricePerUnit && !agreementLine.IsPriceInformationMandatory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean createSalesTable(boolean _isBasketCalculation = false, boolean _isPersistedBasket = false)
    {
        Integer                     a, b;
        boolean                     ret;
        utcDateTime                 utcDateTimeNow;
        SalesAgreementHeader        salesAgreementHeader;        

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        if(accountType == #contact)
        {
            select firstonly custTable
                where custTable.Party == ContactPerson::find(accountId).ContactForParty;
        }

        if(custTable)
        {
            try
            {
                salesTable.clear();
                salesTable.initValue();

                if(salesAgreementId)
                {
                    salesAgreementHeader = SalesAgreementHeader::findAgreementId(salesAgreementId);
                    salesTable.initFromSalesAgreementHeader(salesAgreementHeader);
                }

                salesTable.SalesId                    = _isBasketCalculation ? strrem(guid2str(newguid()), '{}-') : this.getNumberSeq();
                salesTable.CustAccount                = custTable.AccountNum;
                
                if(_isPersistedBasket)
                {
                    salesTable.SalesType              = webShopsTable.SyncOrderType == SC_SalesType::Sales ? SalesType::Sales : SalesType::Journal;
                }
                else
                {
                    salesTable.SalesType              = !isBasketCalculation && webShopsTable.OrderType == SC_SalesType::Sales ? SalesType::Sales : SalesType::Journal;
                }
                salesTable.SC_SanaOrder               = NoYes::Yes;
                utcDateTimeNow                        = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone());
                salesTable.SC_DateReceived            = DateTimeUtil::date(utcDateTimeNow);
                salesTable.SC_TimeReceived            = DateTimeUtil::time(utcDateTimeNow);
                salesTable.SC_ShopAccountCode         = shopAccountEmail;
                salesTable.SC_AdminAccountCode        = adminUserEmail;
                salesTable.SC_WebshopId               = webShopsTable.WebshopId;
                salesTable.SC_isPersistedBasket       = _isPersistedBasket; //BigBasket functionality

                salesTable.initFromCustTable();

                salesTable.InventSiteId               = this.setProductStorageDim().InventSiteId;
                salesTable.InventLocationId           = this.setProductStorageDim().InventLocationId;

                if(salesTable.CustAccount != salesTable.InvoiceAccount)
                {
                    salesTable.initInvoiceAccount();
                }

                if(!salesTable.checkAccount() || !salesTable.checkInvoiceAccount())
                {
                    throw Exception::Error;
                }

                this.initDeliveryAddress();
                this.setPickupLocationFromParams();

                salesTable.LanguageId                 = languageId ? languageId : salesTable.LanguageId;
                salesTable.SC_AuthorizationStatus     = orderAuthorizationStatus;
                salesTable.SC_PaymentMethod           = paymentMethodName;
                salesTable.SC_PaymentStatus           = paymentStatus;
                salesTable.SC_PaymentTransactionId    = paymentTransactionId;
                salesTable.CustomerRef                = referenceNo;
                salesTable.SC_ShipmentMethodName      = shippingMethodName;
                salesTable.SC_OrderId                 = sanaOrderId ? sanaOrderId : salesTable.SC_OrderId;
                salesTable.PaymMode                   = this.getOrderPaymentMethodCode(salesTable.PaymMode);
                salesTable.DlvMode                    = shippingMethodCode ? shippingMethodCode : salesTable.DlvMode;

                for(b=0;commentLines && b<commentLines.length();b++)
                {
                    node = commentLines.item(b);
                    salesTable.SC_Comments           += salesTable.SC_Comments ? '\n' + node.innerText() : node.innerText();
                }

                if(salesPersonId)
                {
                    salesTable.WorkerSalesResponsible = HcmWorker::findByPersonnelNumber(salesPersonId).RecId;
                }
                if(contactId)
                {
                    salesTable.ContactPersonId        = contactId;
                }

                this.setSavedCustomFields(salesTable);

                salesTable.setShipCarrierInformation(salesTable);

                if(this.isRetailEnabled())
                {
                    salesTable.DefaultDimension = salesTable.mergeDimension(this.getRetailChannelTable().DefaultDimension);                    
                }

                if(!isBasketCalculation)
                {
                    this.setSalesDeliveryDates();
                }

                //set custom default values and field mapping
                this.setWebshopDataMapping([custTable.TableId, salesTable.TableId], [salesTable.TableId]);

                salesTable.insert();

                if(!isBasketCalculation)
                {
                    this.createAttachmentURL();
                }

                this.updateRetailInformation();
                this.updateSalesTableExt();

                ret = true;
            }
            catch
            {
                for(a=1;a<=infologLine();a++)
                {
                    this.errorHandler(infolog.text(a));
                }
            }
        }
        else
        {
            this.errorHandler(strfmt(#error0011, accountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesDeliveryDates</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]        
    protected void setSalesDeliveryDates() //set dates according delivery date control
    {
        SalesCalcAvailableDlvDates  salesCalcAvailableDlvDates;
        SalesLine                   salesLineLocal;

        //update sales order (only if new requestedDeliveryDate) or new sales order
        if((salesTable && requestedDeliveryDate && requestedDeliveryDate != salesTable.ShippingDateRequested) || !salesTable)
        {
            salesTable.ShippingDateRequested = requestedDeliveryDate ? requestedDeliveryDate : salesTable.ShippingDateRequested;
            salesTable.ReceiptDateRequested  = requestedDeliveryDate ? requestedDeliveryDate : salesTable.ShippingDateRequested;

            if(salesTable.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(salesTable, fieldNum(SalesTable,ShippingDateRequested));
                salesCalcAvailableDlvDates.createPossibleShippingAndReceiptDates(true);

                salesTable.ShippingDateRequested = salesCalcAvailableDlvDates.parmSalesAvailableDlvDatesTmp().AvailableShippingDate;
                salesTable.ReceiptDateRequested  = salesCalcAvailableDlvDates.parmSalesAvailableDlvDatesTmp().AvailableReceiptDate;
            }

            if(salesTable && salesTable.orig().SC_IsPersistedBasket)
            {
                while select forupdate salesLineLocal
                where salesLineLocal.SalesId == salesTable.SalesId &&
                        (salesLineLocal.ReceiptDateRequested  != salesTable.ReceiptDateRequested ||
                        salesLineLocal.ShippingDateRequested != salesTable.ShippingDateRequested)
                {
                    salesLineLocal.ReceiptDateRequested  = salesTable.ReceiptDateRequested;
                    salesLineLocal.ShippingDateRequested = salesTable.ShippingDateRequested;
                    salesLineLocal.doUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWebshopDiscount</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void setWebshopDiscount(boolean _quote = false)
    {
        SC_WebshopDiscountTable webshopDiscountTable;

        if(!webShopsTable.DisableSanaDiscounts)
        {
            if(accountType == #contact && smmBusRelTable)
            {
                custTable.Currency = smmBusRelTable.Currency;
            }
            webshopDiscountTable = SC_WebshopDiscountTable::findActive(webShopsTable.WebShopId, custTable.Currency, custTable.LineDisc);
        }

        if(webshopDiscountTable.DiscPercent)
        {
            if(_quote && salesQuotationLine.LinePercent < 100)
            {
                salesQuotationLine.LinePercent = salesQuotationLine.LinePercent + webshopDiscountTable.DiscPercent <= 100 ? salesQuotationLine.LinePercent + webshopDiscountTable.DiscPercent : 100;
                salesQuotationLine.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesQuotationLine, LinePercent));
                salesQuotationLine.LineAmount  = salesQuotationLine.calcLineAmountForced();
            }
            else if(salesLine.LinePercent < 100 && !salesLine.inventTable().SC_GiftCard)
            {
                salesLine.LinePercent = salesLine.LinePercent + webshopDiscountTable.DiscPercent <= 100 ? salesLine.LinePercent + webshopDiscountTable.DiscPercent : 100;
                salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesLine, LinePercent));
                salesLine.LineAmount  = salesLine.calcLineAmountForced();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSaveQuoteRespons</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSaveQuoteRespons(boolean _promotableQuote = false)
    {        
        SC_LargeText            tmpStr;
        LogisticsPostalAddress  address;        
        container               commentsCon;
        XmlNode                 commentsNode, addressNode;
        Integer                 b;

        //payment cost
        totalPaymentShipmentCost = this.getOrderPaymentShipmentCost();

        //shippping cost
        totalPaymentShipmentCost += this.getOrderPaymentShipmentCost(true);

        this.calculateSalesTotals(true);

        node = resultNode.appendChild(resultXml.createElement(#order));

        //header
        this.createSaveQuoteHeaderResponse(_promotableQuote);

        //add extra fields
        this.addSavedCustomFields(node, salesQuotationTable);
        this.addExtraFields(node, salesQuotationTable);
    
        //add attachments
        if(webshopsTable.EnableDocAttachments)
        {
            this.addAttachments(node, salesQuotationTable.RecId, salesQuotationTable.TableId);
        }

        //add comments
        if(salesQuotationTable.SC_Comments)
        {
            commentsNode = node.appendChild(resultXml.createElement(#commentLines));
            commentsCon  = str2con(salesQuotationTable.SC_Comments, '\n', false);

            for(b=1;b<=conLen(commentsCon);b++)
            {
                tmpStr   = conPeek(commentsCon, b);
                commentsNode.appendChild(resultXml.createElement(#commentLine)).innerText(tmpStr);
            }
        }

        //sell address
        addressNode = node.appendChild(resultXml.createElement(#sellToAddress));
        address     = smmBusRelTable ? DirParty::primaryPostalAddress(smmBusRelTable.Party) : DirParty::primaryPostalAddress(custTable.Party);
        this.addQuoteResponseAddress(addressNode, address, #sellToAddress);

        //bill address
        addressNode = node.appendChild(resultXml.createElement(#billToAddress));
        if(custTable)
        {
            address = DirParty::postalAddress(CustTable::find(salesQuotationTable.InvoiceAccount).Party, LogisticsLocationRoleType::Invoice);
            address = address ? address : DirParty::primaryPostalAddress(CustTable::find(salesQuotationTable.InvoiceAccount).Party);
        }
        else
        {
            address = DirParty::postalAddress(smmBusRelTable.Party, LogisticsLocationRoleType::Invoice);
            address = address ? address : DirParty::primaryPostalAddress(smmBusRelTable.Party);
        }
        this.addQuoteResponseAddress(addressNode, address, #billToAddress);

        //ship address
        addressNode = node.appendChild(resultXml.createElement(#shipToAddress));
        address     = salesQuotationTable.deliveryAddress();
        this.addQuoteResponseAddress(addressNode, address, #shipToAddress);

        //add pickup location
        this.addPickupLocation(node, true);

        //lines
        salesLinesNode = node.appendChild(resultXml.createElement(#salesLines));

        if(loadOrderLines && maxOrderLinesToLoad >= salesQuotationLine.RecId)
        {
            while select salesQuotationLine
                   where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId && salesQuotationLine.SalesQty
            {
                this.createSaveQuoteLinesResponse();
                this.addQuoteMiscCharges(salesQuotationLine, salesQuotationLine.LineNum); //for line
                this.addSanaDiscountsLines(true);
            }            
        }

        this.addTaxes(node, true);
        this.addQuoteMiscCharges(); //for order
        this.addPromotion(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderStatus</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected SC_LargeText findOrderStatus(boolean _quote = false)
    {
        SC_LargeText orderStatus;

        if(_quote)
        {
            if(salesQuotationTable.QuotationStatus == SalesQuotationStatus::Cancelled || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Lost)
            {
                orderStatus = #bigCancelled;
            }
            else
            {
                orderStatus = salesQuotationTable.QuotationStatus == SalesQuotationStatus::Created || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent ? #open : #released;
            }
        }
        else
        {
            if(salesTable.ReturnStatus == ReturnStatusHeader::Canceled || salesTable.SalesStatus == SalesStatus::Canceled ||
               salesTable.DocumentStatus == DocumentStatus::Cancelled)
            {
                orderStatus = #bigCancelled;
            }
            else
            {
                orderStatus = (salesTable.SalesType == SalesType::ReturnItem && salesTable.ReturnStatus == ReturnStatusHeader::Created) ||
                             ((salesTable.SalesType == SalesType::Sales || salesTable.SalesType == SalesType::Journal) && salesTable.SalesStatus == SalesStatus::Backorder) &&
                               enum2int(salesTable.DocumentStatus) <= enum2int(DocumentStatus::Confirmation) &&
                               salesTable.ReleaseStatus == WHSReleaseStatus::Open ? #open : #released;
            }
        }

        return orderStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSaveQuoteHeaderResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSaveQuoteHeaderResponse(boolean _promotableQuote = false)
    {        
        SC_LargeText tmpStr;
        
        this.addFieldValue(#documentId, node, salesQuotationTable.QuotationId);
        this.addFieldValue(#sanaOrderId, node, salesQuotationTable.SC_OrderId);
        this.addFieldValue(#documentType, node, _promotableQuote ? #promotableQuote : #quote);
        this.addFieldValue(#currencyId, node, Currency::find(salesQuotationTable.CurrencyCode).CurrencyCodeISO);
        this.addFieldValue(#pricesInclTax, node, salesQuotationTable.InclTax);
        this.addFieldValue(#status, node, this.findOrderStatus(true));

        hcmWorker = HcmWorker::find(smmBusRelTable ? smmBusRelTable.MainContactWorker : salesQuotationTable.WorkerSalesResponsible);
        this.addFieldValue(#salesPersonId, node, hcmWorker.PersonnelNumber);
        this.addFieldValue(#salesPersonName, node, hcmWorker.name());
        this.addFieldValue(#contactId, node, salesQuotationTable.ContactPersonId);
        this.addFieldValue(#contactName, node, ContactPerson::find(salesQuotationTable.ContactPersonId).personName());
        this.addFieldValue(#taxPercent, node, 0);
        this.addFieldValue(#taxAmount, node, totalTaxAmount);
        this.addFieldValue(#invoiceDiscount, node, this.calcDiscountExclPromotion(salesQuotationTable.InclTax));
        this.addFieldValue(#subTotal, node, subTotal);
        this.addFieldValue(#totalExclTax, node, totalExclTax);
        this.addFieldValue(#totalInclTax, node, totalInclTax - totalCashDisc);
        this.addFieldValue(#orderDate, node, DateTimeUtil::date(salesQuotationTable.createdDateTime));
        this.addFieldValue(#postingDate, node, salesQuotationTable.lastConfirmationDate());
        this.addFieldValue(#documentDate, node, DateTimeUtil::date(salesQuotationTable.createdDateTime));
        this.addFieldValue(#dueDate, node, salesQuotationTable.QuotationExpiryDate);
        this.addFieldValue(#requestedDeliveryDate, node, salesQuotationTable.ShippingDateRequested);
        this.addFieldValue(#paymentTermsCode, node, salesQuotationTable.Payment);

        tmpStr = LanguageTxt::find(tableNum(PaymTerm), PaymTerm::find(salesQuotationTable.Payment).RecId, languageId).Txt;
        this.addFieldValue(#paymentTermsDescription, node, tmpStr ? tmpStr : PaymTerm::find(salesQuotationTable.Payment).Description);
        this.addFieldValue(#paymentDiscount, node, totalCashDisc);
        this.addFieldValue(#paymentDiscountDate, node, CashDisc::cashDiscDate(salesQuotationTable.CashDisc));
        this.addFieldValue(#paymentMethodName, node, salesQuotationTable.SC_PaymentMethod);
        this.addFieldValue(#paymentStatus, node, salesQuotationTable.SC_PaymentStatus);
        this.addFieldValue(#paymentTransactionId, node, salesQuotationTable.SC_PaymentTransactionId);
        this.addFieldValue(#locationCode, node, salesQuotationTable.InventLocationId);
        this.addFieldValue(#locationTitle, node, InventLocation::find(salesQuotationTable.InventLocationId).Name);
        this.addFieldValue(#shippingMethodCode, node, salesQuotationTable.DlvMode);
        this.addFieldValue(#paymentMethodCode, node, salesQuotationTable.PaymMode);
        this.addFieldValue(#customerId, node, salesQuotationTable.CustAccount);
        this.addFieldValue(#referenceNo, node, salesQuotationTable.CustomerRef);
        this.addFieldValue(#shopAccountEmail, node, salesQuotationTable.SC_ShopAccountCode);
        this.addFieldValue(#adminUserEmail, node, salesQuotationTable.SC_AdminAccountCode);
        this.addFieldValue(#roundOff, node, totalRoundOff);
        this.addFieldValue(#shippingMethodName, node, salesQuotationTable.SC_ShipmentMethodName);
        this.addFieldValue(#promotable, node, salesQuotationTable.SC_IsPromotable);
        this.addFieldValue(#orderAuthorizationStatus, node, salesQuotationTable.SC_AuthorizationStatus);
        this.addFieldValue(#hasReport, node, webshopsTable.EnableReports && salesQuotationTable.lastQuotation() ? #one : #zero);

        if(!salesQuotationTableExt)
        {
            salesQuotationTableExt = SC_SalesQuotationTable::find(salesQuotationTable.RecId);
        }

        this.addFieldValue(#sanaLocationId, node, salesQuotationTableExt.SanaLocationId);
        this.addFieldValue(#storeLocationCode, node, salesQuotationTableExt.StoreLocationCode);
        
        select count(RecId) from salesQuotationLine where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId;
        this.addFieldValue(#orderLinesCount, node, salesQuotationLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSaveQuoteLinesResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSaveQuoteLinesResponse()
    {
        InventDim    quoteLineDim;
        Qty          tmpValue, discValue, discAmount;
        SC_LargeText productTitle, variantTtitle;

        inventTable   = InventTable::find(salesQuotationLine.ItemId);
        salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

        this.addFieldValue(#lineNo, salesLineNode, salesQuotationLine.LineNum * 10000);
        this.addFieldValue(#productId, salesLineNode, salesQuotationLine.ItemId ? salesQuotationLine.ItemId : EcoResCategory::find(salesQuotationLine.SalesCategory).Name);

        quoteLineDim = salesQuotationLine.inventDim();
        this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(quoteLineDim, salesQuotationLine.ItemId));       

        [productTitle, variantTtitle] = this.getOrderLineTitle(salesQuotationLine.ItemId, InventDimCombination::findByInventDim(salesQuotationLine.ItemId, quoteLineDim), salesQuotationLine.SalesCategory);

        this.addFieldValue(#productTitle, salesLineNode, productTitle);
        this.addFieldValue(#title, salesLineNode, variantTtitle ? variantTtitle : productTitle);
        this.addFieldValue(#quantity, salesLineNode, salesQuotationLine.SalesQty);

        [tmpValue, discAmount, discValue] = this.calcLinePriceDiscValues(true);

        this.addFieldValue(#price, salesLineNode, tmpValue + discValue);
        this.addFieldValue(#baseSalesPrice, salesLineNode, salesQuotationLine.SalesPrice);
        this.addFieldValue(#taxPercent, salesLineNode, 0);
        this.addFieldValue(#discountAmount, salesLineNode, discAmount);

        if(salesQuotationLine.LineDisc || salesQuotationLine.MultiLnDisc)
        {
            tmpValue = discValue ? discValue / (tmpValue + discValue) * 100 : 0;
        }
        else
        {
            tmpValue = salesQuotationLine.discPercent();
        }
        this.addFieldValue(#discountPercent, salesLineNode, tmpValue);
        this.addFieldValue(#lineAmount, salesLineNode, salesQuotationLine.LineAmount);
        this.addFieldValue(#parentLineNo, salesLineNode, (salesQuotationLine.SC_SuppItem ? SalesQuotationLine::findRecId(salesQuotationLine.SC_SuppAttachRecId).LineNum : salesQuotationLine.LineNum) * 10000);
        this.addFieldValue(#isReadOnlyLine, salesLineNode, salesQuotationLine.SC_SuppItem);
        this.addFieldValue(#isSupplementary, salesLineNode, salesQuotationLine.SC_SuppItem);
        this.addFieldValue(#lineType, salesLineNode, #item);
        this.addFieldValue(#unitOfMeasureId, salesLineNode, salesQuotationLine.SalesUnit);
        this.addFieldValue(#unitOfMeasureDescription, salesLineNode, UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(salesQuotationLine.SalesUnit).RecId, languageId).Description);
        this.addFieldValue(#shipmentDate, salesLineNode, salesQuotationLine.ShippingDateRequested);
        this.addFieldValue(#quantityOutstanding, salesLineNode, salesQuotationLine.RemainSalesPhysical);
        this.addFieldValue(#grossWeight, salesLineNode, inventTable.grossWeight());
        this.addFieldValue(#length, salesLineNode, inventTable.grossDepth);
        this.addFieldValue(#width, salesLineNode, inventTable.grossWidth);
        this.addFieldValue(#height, salesLineNode, inventTable.grossHeight);   
        this.addFieldValue(#configurationId, salesLineNode, salesQuotationLine.SC_ConfigurationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSaveSalesRespons</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSaveSalesRespons()
    {        
        SC_LargeText            tmpStr;
        LogisticsPostalAddress  address;        
        container               commentsCon;
        XmlNode                 commentsNode, addressNode;    
        Integer                 b;

        if(salesTable.SalesType != SalesType::ReturnItem)
        {
            //payment cost
            totalPaymentShipmentCost = this.getOrderPaymentShipmentCost();

            //shippping cost
            totalPaymentShipmentCost += this.getOrderPaymentShipmentCost(true);

            this.calculateSalesTotals();
        }

        node = resultNode.appendChild(resultXml.createElement(#order));

        //header
        this.createSaveSalesHeaderResponse();

        //add extra fields
        this.addSavedCustomFields(node, salesTable);
        this.addExtraFields(node, salesTable);
    
        //add shipping tracking data
        this.addShipTrackingData(node, null, salesTable.SalesId);
        
        //add attachments
        if(webshopsTable.EnableDocAttachments)
        {
            this.addAttachments(node, salesTable.RecId, salesTable.TableId);
        }

        //add comments
        if(salesTable.SC_Comments)
        {
            commentsNode = node.appendChild(resultXml.createElement(#commentLines));
            commentsCon  = str2con(salesTable.SC_Comments, '\n', false);

            for(b=1;b<=conLen(commentsCon);b++)
            {
                tmpStr   = conPeek(commentsCon, b);
                commentsNode.appendChild(resultXml.createElement(#commentLine)).innerText(tmpStr);
            }
        }

        //sell address
        addressNode = node.appendChild(resultXml.createElement(#sellToAddress));
        address     = DirParty::primaryPostalAddress(custTable.Party);
        this.addSalesResponseAddress(addressNode, address, #sellToAddress);

        //bill address
        addressNode = node.appendChild(resultXml.createElement(#billToAddress));
        address = DirParty::postalAddress(CustTable::find(salesTable.InvoiceAccount).Party, LogisticsLocationRoleType::Invoice);
        address = address ? address : DirParty::primaryPostalAddress(CustTable::find(salesTable.InvoiceAccount).Party);
        this.addSalesResponseAddress(addressNode, address, #billToAddress);

        //ship address
        addressNode = node.appendChild(resultXml.createElement(#shipToAddress));
        address     = salesTable.deliveryAddress();
        this.addSalesResponseAddress(addressNode, address, #shipToAddress);

        //add pickup location
        this.addPickupLocation(node);

        //lines
        salesLinesNode = node.appendChild(resultXml.createElement(#salesLines));

        if(loadOrderLines && maxOrderLinesToLoad >= salesLine.RecId)
        {
            while select salesLine
                   where salesLine.SalesId == salesTable.SalesId && 
                        (salesLine.SalesQty || salesLine.ExpectedRetQty || salesLine.SalesStatus == SalesStatus::Canceled) &&
                        (salesLine.ReturnStatus != ReturnStatusLine::Awaiting || (salesLine.ReturnStatus == ReturnStatusLine::Awaiting && salesLine.ExpectedRetQty < 0))
            {
                this.createSaveSalesLinesResponse();
                this.addSalesMiscCharges(salesLine, salesLine.LineNum);
                this.addSanaDiscountsLines();
                this.addGiftCardTextLines();
            }            
        }
        
        if(salesTable.SalesType != SalesType::ReturnItem)
        {
            this.addTaxes(node);
        }

        if(this.isRetailEnabled())
        {
            this.addRetailDiscountsLines();
        }

        this.addSalesMiscCharges(salesTable); //for order
        this.addPromotion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSaveSalesHeaderResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSaveSalesHeaderResponse()
    {
        SC_LargeText               tmpStr;
        MCRRetailStoreTenderTypeId paymCode;

        this.addFieldValue(#documentId, node, salesTable.SalesType == SalesType::ReturnItem ? salesTable.ReturnItemNum : salesTable.SalesId);
        this.addFieldValue(#sanaOrderId, node, salesTable.SC_OrderId);
        this.addFieldValue(#documentType, node, salesTable.SalesType == SalesType::ReturnItem ? #returnOrder : #order);
        this.addFieldValue(#currencyId, node, Currency::find(salesTable.CurrencyCode).CurrencyCodeISO);
        this.addFieldValue(#pricesInclTax, node, salesTable.InclTax);
        this.addFieldValue(#status, node, this.findOrderStatus());
        this.addFieldValue(#salesPersonId, node, HcmWorker::find(salesTable.WorkerSalesResponsible).PersonnelNumber);
        this.addFieldValue(#salesPersonName, node, HcmWorker::find(salesTable.WorkerSalesResponsible).name());
        this.addFieldValue(#contactId, node, salesTable.ContactPersonId);
        this.addFieldValue(#contactName, node, ContactPerson::find(salesTable.ContactPersonId).personName());
        this.addFieldValue(#taxPercent, node, 0);
        this.addFieldValue(#taxAmount, node, totalTaxAmount);
        this.addFieldValue(#invoiceDiscount, node, this.calcDiscountExclPromotion(salesTable.InclTax));
        this.addFieldValue(#subTotal, node, subTotal);
        this.addFieldValue(#totalExclTax, node, totalExclTax);
        this.addFieldValue(#totalInclTax, node, totalInclTax - totalCashDisc);
        this.addFieldValue(#orderDate, node, DateTimeUtil::date(salesTable.createdDateTime));
        this.addFieldValue(#postingDate, node, salesTable.lastInvoiceDate());
        this.addFieldValue(#documentDate, node, DateTimeUtil::date(salesTable.createdDateTime));
        this.addFieldValue(#dueDate, node, salesTable.SalesType == SalesType::ReturnItem ? salesTable.ReturnDeadline : salesTable.FixedDueDate);
        this.addFieldValue(#shipmentDate, node, salesTable.LastPackingSlipDate());
        this.addFieldValue(#requestedDeliveryDate, node, salesTable.ShippingDateRequested);
        this.addFieldValue(#promisedDeliveryDate, node, salesTable.ShippingDateConfirmed);
        this.addFieldValue(#paymentTermsCode, node, salesTable.Payment);
       
        tmpStr = LanguageTxt::find(tableNum(PaymTerm), PaymTerm::find(salesTable.Payment).RecId, languageId).Txt;
        this.addFieldValue(#paymentTermsDescription, node, tmpStr ? tmpStr : PaymTerm::find(salesTable.Payment).Description);
        this.addFieldValue(#paymentDiscount, node, totalCashDisc);
        this.addFieldValue(#paymentDiscountDate, node, CashDisc::cashDiscDate(salesTable.CashDisc));
        this.addFieldValue(#paymentMethodName, node, salesTable.SC_PaymentMethod);
        this.addFieldValue(#paymentStatus, node, salesTable.SC_PaymentStatus);
        this.addFieldValue(#paymentTransactionId, node, salesTable.SC_PaymentTransactionId);
        this.addFieldValue(#locationCode, node, salesTable.InventLocationId);
        this.addFieldValue(#locationTitle, node, InventLocation::find(salesTable.InventLocationId).Name);
        this.addFieldValue(#shippingMethodCode, node, salesTable.DlvMode);
        
        paymCode = MCRCustPaymTable::findByRefRecIDRefTableID(salesTable.RecId, salesTable.TableId).TenderTypeId;
        this.addFieldValue(#paymentMethodCode, node, salesTable.mcrIsCallCenter() ? paymCode : salesTable.PaymMode);
        this.addFieldValue(#customerId, node, salesTable.CustAccount);
        this.addFieldValue(#referenceNo, node, salesTable.CustomerRef);
        this.addFieldValue(#shopAccountEmail, node, salesTable.SC_ShopAccountCode);
        this.addFieldValue(#adminUserEmail, node, salesTable.SC_AdminAccountCode);
        this.addFieldValue(#roundOff, node, totalRoundOff);
        this.addFieldValue(#shippingStatus, node, salesTable.SalesStatus == SalesStatus::Backorder ? #pending : #complete);
        this.addFieldValue(#shippingMethodName, node, salesTable.SC_ShipmentMethodName);
        this.addFieldValue(#orderAuthorizationStatus, node, salesTable.SC_AuthorizationStatus);
        this.addFieldValue(#hasReport, node, webshopsTable.EnableReports && (salesTable.SalesType == SalesType::ReturnItem || CustConfirmJour::exist(salesTable.SalesId)));

        if(!salesTableExt)
        {
            salesTableExt = SC_SalesTable::find(salesTable.RecId);
        }

        this.addFieldValue(#sanaLocationId, node, salesTableExt.SanaLocationId);
        this.addFieldValue(#storeLocationCode, node, salesTableExt.StoreLocationCode);

        if(salesTable.MatchingAgreement)
        {
            this.addFieldValue(#salesAgreementId, node, SalesAgreementHeader::find(salesTable.MatchingAgreement).SalesNumberSequence);
        }

        if(salesTable.SalesType == SalesType::ReturnItem)
        {
            this.addFieldValue(#returnReasonCode, node, salesTable.ReturnReasonCodeId);
        }
        
        select count(RecId) from salesLine
            where salesLine.SalesId == salesTable.SalesId &&
                 (salesLine.SalesQty || salesLine.ExpectedRetQty || salesLine.SalesStatus == SalesStatus::Canceled) &&
                 (salesLine.ReturnStatus != ReturnStatusLine::Awaiting || (salesLine.ReturnStatus == ReturnStatusLine::Awaiting && salesLine.ExpectedRetQty < 0));
        this.addFieldValue(#orderLinesCount, node, salesLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSaveSalesLinesResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createSaveSalesLinesResponse()
    {        
        InventDim    salesLineDim;
        SC_LargeText productTitle, variantTtitle, tmpStr;
        Qty          tmpValue, discValue, discAmount;
        container    commentsCon;
        XmlNode      commentsNode;
        Integer      b;

        inventTable   = InventTable::find(salesLine.ItemId);
        salesLineNode = salesLinesNode.appendChild(resultXml.createElement(#salesLine));

        this.addFieldValue(#lineNo, salesLineNode, salesLine.LineNum * 10000);
        this.addFieldValue(#productId, salesLineNode, salesLine.ItemId ? salesLine.ItemId : EcoResCategory::find(salesLine.SalesCategory).Name);

        salesLineDim = salesLine.inventDim();
        this.addFieldValue(#variantId, salesLineNode, this.clearNotProductDimension(salesLineDim, salesLine.ItemId));

        [productTitle, variantTtitle] = this.getOrderLineTitle(salesLine.ItemId, InventDimCombination::findByInventDim(salesLine.ItemId, salesLineDim), salesLine.SalesCategory);

        this.addFieldValue(#productTitle, salesLineNode, productTitle);
        this.addFieldValue(#title, salesLineNode, variantTtitle ? variantTtitle : productTitle);

        salesLine.SalesQty = salesTable.SalesType == SalesType::ReturnItem ? salesLine.ExpectedRetQty : salesLine.SalesQty;
        this.addFieldValue(#quantity, salesLineNode, salesLine.SalesQty);

        [tmpValue, discAmount, discValue] = this.calcLinePriceDiscValues();

        this.addFieldValue(#price, salesLineNode, tmpValue + discValue);
        this.addFieldValue(#baseSalesPrice, salesLineNode, salesLine.SalesPrice);
        this.addFieldValue(#taxPercent, salesLineNode, 0);
        this.addFieldValue(#discountAmount, salesLineNode, discAmount);

        if(salesLine.LineDisc || salesLine.MultiLnDisc)
        {
            tmpValue = discValue ? discValue / (tmpValue + discValue) * 100 : 0;
        }
        else
        {
            tmpValue = salesLine.discPercent();
        }
        this.addFieldValue(#discountPercent, salesLineNode, tmpValue);
        this.addFieldValue(#lineAmount, salesLineNode, salesLine.LineAmount);
        this.addFieldValue(#parentLineNo, salesLineNode, (salesLine.SC_SuppItem ? SalesLine::findRecId(salesLine.SC_SuppAttachRecId).LineNum : salesLine.LineNum) * 10000);
        this.addFieldValue(#isReadOnlyLine, salesLineNode, salesLine.SC_SuppItem);
        this.addFieldValue(#isSupplementary, salesLineNode, salesLine.SC_SuppItem);
        this.addFieldValue(#lineType, salesLineNode, #item);
        this.addFieldValue(#unitOfMeasureId, salesLineNode, salesLine.SalesUnit);
        this.addFieldValue(#unitOfMeasureDescription, salesLineNode, UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(salesLine.SalesUnit).RecId, languageId).Description);
        this.addFieldValue(#quantityShipped, salesLineNode, salesLine.deliveredInTotal());
        this.addFieldValue(#quantityInvoiced, salesLineNode, salesLine.invoicedInTotal());
        this.addFieldValue(#quantityOutstanding, salesLineNode, salesline.RemainSalesPhysical);
        this.addFieldValue(#shipmentDate, salesLineNode, salesLine.ShippingDateConfirmed ? salesLine.ShippingDateConfirmed : salesLine.ShippingDateRequested);
        this.addFieldValue(#grossWeight, salesLineNode, inventTable.grossWeight());
        this.addFieldValue(#length, salesLineNode, inventTable.grossDepth);
        this.addFieldValue(#width, salesLineNode, inventTable.grossWidth);
        this.addFieldValue(#height, salesLineNode, inventTable.grossHeight);
        this.addFieldValue(#bigCancelled, salesLineNode, salesLine.SalesStatus == SalesStatus::Canceled ? #one : #zero);
        this.addFieldValue(#configurationId, salesLineNode, salesLine.SC_ConfigurationId);

        if(salesLine.MatchingAgreementLine)
        {
            this.addFieldValue(#agreementLineNo, salesLineNode, AgreementLine::find(salesLine.MatchingAgreementLine).LineNumber);
        }

        if(salesTable.SalesType == SalesType::ReturnItem)
        {
            this.addFieldValue(#shippingStatus, salesLineNode, salesline.ReturnStatus == ReturnStatusLine::Awaiting ? #notShipped : #shipped);

            commentsCon  = str2con(salesLine.Name, #comment +': ', false);
            commentsCon  = conlen(commentsCon) >=2 ? str2con(conPeek(commentsCon, 2), '\n', false) : conNull();
            commentsNode = salesLineNode.appendChild(resultXml.createElement(#commentLines));

            for(b=1;b<=conLen(commentsCon);b++)
            {
                tmpStr   = conPeek(commentsCon, b);
                commentsNode.appendChild(resultXml.createElement(#commentLine)).innerText(tmpStr);
            }
        }
        else
        {
            this.addFieldValue(#shippingStatus, salesLineNode, salesline.RemainSalesPhysical == 0 && salesLine.SalesStatus != SalesStatus::Canceled ? #shipped : salesline.DeliveredInTotal() ? #partiallyShipped : #notShipped);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteOrder</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument DeleteOrder(XmlDocument _request)
    {
        boolean ret;

        this.createHeaderXml();

        this.getParameters(_request);

        ttsbegin;

        if(documentId)
        {
            switch(documentType)
            {
                case #order, #returnOrder:
                    select forUpdate firstonly salesTable
                        where salesTable.SalesId     == documentId &&
                              salesTable.CustAccount == accountId;

                    if(salesTable && salesTable.SC_PaymentStatus != #paid && salesTable.validateDelete())
                    {
                        this.deleteGiftCardHistory(salesTable.SalesId);
                        salesTable.delete();
                        ret = true;
                    }
                    break;

                case #quote, #promotableQuote:
                    select forUpdate firstonly salesQuotationTable
                        where salesQuotationTable.QuotationId == documentId &&
                              salesQuotationTable.CustAccount == accountId;

                    if(salesQuotationTable && salesQuotationTable.validateDelete())
                    {
                        salesQuotationTable.delete();
                        ret = true;
                    }
                    break;
            }
        }

        ttscommit;

        if(!ret)
        {
            this.errorHandler("@SYS103593");
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePersistedBasketLine</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [HookableAttribute(true), Replaceable]
    protected void deletePersistedBasketLine()
    {
        InventDim           inventDim, inventDimLocal = InventDim::find(lineInventDimId);
        SalesLine           salesLineLocal;
        SalesQuotationLine  salesQuotationLineLocal;
        MarkupTrans         markupTrans;
        MarkupTable         markupTable;
        String30            lineCost = lineType == #shippingcosts ? #dlvCostWildCard : #pymCostWildCard;  
        EcoResCategory      salesCategory = EcoResCategory::findByName(lineProductId,
                            EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales).CategoryHierarchy).RecId);

        ttsBegin;
        if(salesQuotationTable)
        {
            switch(lineType)
            {
                case #promotionCode:
 //clear promotion
                    salesQuotationTable.SC_PromotionCode  = '';
                    salesQuotationTable.SC_PromotionTitle = '';
                    salesQuotationTable.SC_PromotionType  = SC_DiscountType::None;
                    salesQuotationTable.SC_PromotionValue = 0;  
                    salesQuotationTable.doUpdate();
                    salesQuotationTable.modifiedField(fieldnum(salesQuotationTable, SC_PromotionValue));
                    break;
//clear payment and shipping charges
                case #shippingcosts, #paymentcosts:                    

                    delete_from markupTrans
                        where markupTrans.TransTableId == salesQuotationTable.TableId &&
                              markupTrans.TransRecId   == salesQuotationTable.RecId
                        exists join markupTable
                        where markupTable.MarkupCode == markupTrans.MarkupCode &&
                              markupTable.MarkupCode like lineCost &&
                              markupTable.SC_MarkupCode;
                    break;

                default:
//delete specific lines
                    select forUpdate firstOnly salesQuotationLine
                        where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId &&
                                (salesQuotationLine.ItemId == lineProductId || (!salesQuotationLine.ItemId && salesCategory.RecId == salesQuotationLine.SalesCategory)) &&
                                salesQuotationLine.SalesUnit == parmUnitId &&
                                !salesQuotationLine.SC_SuppItem
                        exists join inventDim
                            where inventDim.inventDimId == SalesQuotationLine.InventDimId &&
                                  inventDim.InventColorId == inventDimLocal.InventColorId &&
                                  inventDim.InventSizeId == inventDimLocal.InventSizeId &&
                                  inventDim.configId == inventDimLocal.configId &&
                                  inventDim.InventStyleId == inventDimLocal.InventStyleId;

                    if(salesQuotationLine && salesQuotationLine.validateDelete())
                    {
                        delete_from salesQuotationLineLocal
                               where salesQuotationLineLocal.SC_SuppAttachRecId == salesQuotationLine.RecId; //delete supplementary items for line

                        salesQuotationLine.delete();
                    }
                    break;
            }
        }

        if(salesTable)
        {
            switch(lineType)
            {
                case #promotionCode:
//clear promotion
                    salesTable.SC_PromotionCode  = '';
                    salesTable.SC_PromotionTitle = '';
                    salesTable.SC_PromotionType  = SC_DiscountType::None;
                    salesTable.SC_PromotionValue = 0;
                    salesTable.doUpdate();
                    salesTable.type().modifiedField(fieldnum(salesTable, SC_PromotionValue));
                    break;
//clear payment and shipping charges
                case #shippingcosts, #paymentcosts:

                    delete_from markupTrans
                        where markupTrans.TransTableId == salesTable.TableId &&
                              markupTrans.TransRecId   == salesTable.RecId
                        exists join markupTable
                            where markupTable.MarkupCode == markupTrans.MarkupCode &&
                                  markupTable.MarkupCode like lineCost &&
                                  markupTable.SC_MarkupCode;
                    break;

                default:
//delete specific lines
                    select forUpdate firstOnly salesLine
                        where salesLine.SalesId == salesTable.SalesId &&
                              (salesLine.ItemId == lineProductId || (!salesLine.ItemId && salesCategory.RecId == salesLine.SalesCategory)) &&
                              salesLine.SalesUnit == parmUnitId &&
                              !salesLine.SC_SuppItem
                        exists join inventDim
                            where inventDim.inventDimId == salesLine.InventDimId &&
                                  inventDim.InventColorId == inventDimLocal.InventColorId &&
                                  inventDim.InventSizeId == inventDimLocal.InventSizeId &&
                                  inventDim.configId == inventDimLocal.configId &&
                                  inventDim.InventStyleId == inventDimLocal.InventStyleId;

                    if(salesLine && salesLine.validateDelete())
                    {   
                        delete_from salesLineLocal
                               where salesLineLocal.SC_SuppAttachRecId == salesline.RecId; //delete supplementary items for line

                        salesLine.delete();
                    }
                    break;
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>explodeBOMLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void explodeBOMLines()
    {
        TmpFrmVirtual       tmpFrmVirtual;
        BOM                 tmpBOM;
        SalesLine           salesLineLocal, salesLineTmp;
        container           conBOM;
        int                 numBOMLines, lineCnt;
        RecordInsertList    tmpFrmVirtualInsertList = new RecordInsertList(tableNum(TmpFrmVirtual), false, false, false, false, false, tmpFrmVirtual);
        RecordInsertList    tmpBOMInsertList = new RecordInsertList(tableNum(BOM), true, true, true, true, true, tmpBOM);
        RecordInsertList    tmpSalesLineInsertList = new RecordInsertList(tableNum(SalesLine), true, true, true, true, true, salesLineTmp);

        if(this.canExplodeBom())
        {
            //BP Deviation documented
            tmpBOM.setTmp();
            conBOM = BOMSearch::bomTreePackLevelConfig(inventTable.bomId(salesLine.deliveryDate(), salesLine.QtyOrdered, salesLine.inventDim()),
                                                    salesLine.deliveryDate(),
                                                    salesLine.ItemId,
                                                    salesLine.inventDim().ConfigId,
                                                    true,
                                                    true);
            numBOMLines = conLen(conBOM);

            for (lineCnt=1; lineCnt<=numBOMLines; lineCnt++)
            {
                tmpBOM.data(conPeek(conBOM, lineCnt));
                tmpBOMInsertList.add(tmpBOM);                
            }          
            

            if(numBOMLines)
            {
                tmpBOMInsertList.insertDatabase();

                while select tmpBOM
                {
                    tmpFrmVirtual.TableNum      = tmpBOM.TableId;
                    tmpFrmVirtual.RecordNo      = tmpBOM.RecId;
                    tmpFrmVirtualInsertList.add(tmpFrmVirtual);
                }

                tmpFrmVirtualInsertList.insertDatabase();                

                try
                {
                    //BP Deviation documented
                    salesLineTmp.setTmp();                    
                
                    while select salesLineLocal
                        where salesLineLocal.SalesId == salesLine.SalesId
                    {
                        salesLineTmp.data(salesLineLocal);
                        tmpSalesLineInsertList.add(salesLineTmp);                        
                    }

                    tmpSalesLineInsertList.insertDatabase();
                    salesLine.expandBOM(tmpFrmVirtual, tmpBOM);

                    while select forUpdate salesLine
                        where salesLine.SalesId == salesTable.SalesId
                        notexists join salesLineTmp
                            where salesLineTmp.InventTransId == salesLine.InventTransId
                    {
                        this.setWebshopDiscount();
                        salesLine.doUpdate();
                        updateLineCon += salesline.RecId; //Big basket functionality
                    }
                }
                catch (Exception::Error)
                {
                    return;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExplodeBom</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean canExplodeBom()
    {
        return !webShopsTable.DisableBOM && webShopsTable.ExplodeBOMLines && !salesTable.SC_IsPersistedBasket && inventTable.inventItemType().canHaveBOM() &&
               EcoResProductMaster::find(inventtable.Product).VariantConfigurationTechnology != EcoResVariantConfigurationTechnologyType::DimensionBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAddressDuplicate</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected LogisticsPostalAddress findAddressDuplicate(LogisticsPostalAddressView _newAddress)
    {
        LogisticsPostalAddress  existAddress, foundAddress;
        DirPartyLocation        partyLocation;
        DirPartyLocationRole    partyLocationRole;
        LogisticsLocationRole   locationRole;
        TransDateTime           transDateTime = DatetimeUtil::utcNow();        

        while select validTimeState(transDateTime) Location from partyLocation
            where partyLocation.Party == CustTable.Party
            exists join partyLocationRole
                where partyLocationRole.PartyLocation == partyLocation.RecId
            exists join locationRole
                where locationRole.Type == LogisticsLocationRoleType::Delivery &&
                partyLocationRole.LocationRole == locationRole.RecId
        {
            existAddress = LogisticsPostalAddress::findByLocation(partyLocation.Location);

            if(existAddress.CountryRegionId == _newAddress.CountryRegionId && existAddress.ZipCode == _newAddress.ZipCode &&
               existAddress.Street == _newAddress.Street && existAddress.City == _newAddress.City &&
               existAddress.State  == _newAddress.State && LogisticsLocation::find(existAddress.Location).Description == _newAddress.LocationName)
            {
                foundAddress = existAddress;
                break;
            }
        }

        return foundAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAlternativeItem</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean findAlternativeItem(boolean _doProductCheck)
    {
        SC_LargeText tmpStr, tmpStrUnitId, origProductId = lineProductId, origDimId = lineInventDimId, origUnitId = parmUnitId;
        boolean      alternativeFound, ret;
        InventDim    altItemDim      = InventDim::find(lineInventDimId);
        InventTable  inventTableOrig = inventTable;
        Set          visitedItems    = new Set(Types::String);
        ItemId       newItemId       = inventTable.AltItemId;        
        
        if(this.allowAlternativeItem(salesQuotationTable.RecId != 0))
        {
            if(inventTable.UseAltItemId != ItemNumAlternative::Never)
            {
                while(newItemId && !visitedItems.in(newItemId))
                {
                    visitedItems.add(newItemId);
                
                    switch(inventTable.UseAltItemId)
                    {
                        case ItemNumAlternative::InventWhen0:
                            if (this.calcInventory(altItemDim) < lineQty)
                            {
                                alternativeFound = true;
                            }
                            break;

                        case ItemNumAlternative::Always:
                            alternativeFound = true;
                            break;
                    }
                
                    if(alternativeFound)
                    {
                        altItemDim.ConfigId      = inventTable.AltConfigId;
                        altItemDim.InventSizeId  = inventTable.AltInventSizeId;
                        altItemDim.InventColorId = inventTable.AltInventColorId;
                        altItemDim.InventStyleId = inventTable.AltInventStyleId;
                        altItemDim               = InventDim::findDim(altItemDim);
                        lineInventDimId          = altItemDim.inventDimId == InventDim::findOrCreateBlank().inventDimId ? '' : altItemDim.inventDimId;
                        inventTable              = InventTable::find(inventTable.AltItemId);
                        lineProductId            = inventTable.ItemId;
                        parmUnitId               = parmUnitId ? parmUnitId == inventTable.salesUnitId() ? parmUnitId : inventTable.salesUnitId() : '';
                        newItemId                = inventTable.AltItemId;
                        alternativeFound         = false;
                    }
                }
            }
        
            ret = lineProductId != origProductId || origDimId != lineInventDimId || parmUnitId != origUnitId;

            if(_doProductCheck && ret)
            {
                node    = nonOrderableLines.appendChild(resultXml.createElement(#line));
                tmpStr  = this.getProductName(inventTableOrig);

                if(origDimId)
                {
                    tmpStr += ' - ' + this.findVariantDescription(InventDimCombination::findByInventDim(inventTableOrig.ItemId, InventDim::find(origDimId)));
                }

                if(origUnitId)
                {
                    tmpStrUnitId = UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(origUnitId).RecId, languageId).Description;
                    tmpStr      += ' - ' + tmpStrUnitId;
                }

                tmpStr  += "@SCL313" + ' ' + inventTable.ItemId + ' - ' + this.getProductName();

                if(lineInventDimId)
                {
                    tmpStr += ' - ' + this.findVariantDescription(InventDimCombination::findByInventDim(inventTable.ItemId, altItemDim));
                }

                if(parmUnitId != origUnitId)
                {
                    tmpStrUnitId = UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(parmUnitId).RecId, languageId).Description;
                    tmpStr      += ' - ' + tmpStrUnitId;
                }
                else if(parmUnitId)
                {
                    tmpStr += ' - ' + tmpStrUnitId;
                }

                this.addFieldValue(#description, node, tmpStr);
                this.addFieldValue(#productId, node, origProductId);
                this.addFieldValue(#variantId, node, origDimId);
                this.addFieldValue(#unitOfMeasureId, node, origUnitId ? origUnitId : parmUnitId ? parmUnitId : inventTable.salesUnitId());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateMarkupTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected MarkupTable findOrCreateMarkupTable(boolean _shipping = false)
    {
        MarkupTable                    markupTable;
        DimensionDynamicDefaultAccount accountDim = _shipping ? webShopsTable.ShippingLedgerDimension : webShopsTable.PaymentLedgerDimension;        
        int                            maxNum, num;        
               
        if(!accountDim)
        {
            throw error(strfmt(_shipping ? "@SCL158" : "@SCL157", webShopsTable.WebshopId));
        }

        select firstonly markupTable
               where markupTable.SC_MarkupCode == lineId &&
                     markupTable.MarkupCode like (_shipping ? #dlvCostWildCard : #pymCostWildCard)
                     && markupTable.VendorLedgerDimension == accountDim;

        if(!markupTable)
        {
            while select MarkupCode from markupTable
                   where markupTable.MarkupCode like (_shipping ? #dlvCostWildCard : #pymCostWildCard)
            {
                num = str2int(strKeep(markupTable.MarkupCode, '0123456789'));
                maxNum = num > maxNum ? num : maxNum;
            }

            markupTable.clear();
            markupTable.initValue();
            markupTable.Txt                   = lineTitle;
            markupTable.VendorLedgerDimension = accountDim;
            markupTable.CustType              = MarkupType::CustVend;
            markupTable.ModuleType            = MarkupModuleType::Cust;
            markupTable.TaxItemGroup          = TaxParameters::find().CheckIntersection == CheckTaxGroups::Error ? webShopsTable.DefaultItemSalesTaxGroup : '';
            markupTable.SC_MarkupCode         = lineId;
            markupTable.VendPosting           = _shipping ? LedgerPostingType::SalesFee : LedgerPostingType::PaymentFee;
            markupTable.MarkupCode            = (_shipping ? #dlvCost : #pymCost) + int2str(maxNum + 1);
            markupTable.insert();
        }

        this.createOrUpdateMarkupTranslation(markupTable);

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateMarkupTranslation</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createOrUpdateMarkupTranslation(MarkupTable _markupTable)
    {
        SC_LargeText tmpStr;
        LanguageTxt  languageTxt;

        tmpStr = LanguageTxt::find(_markupTable.TableId, _markupTable.RecId, languageId).Txt;

        if(lineTitle && tmpStr && lineTitle != tmpStr)
        {
            ttsBegin;
            select firstonly forUpdate languageTxt
                where languageTxt.TxtTableId == _markupTable.TableId &&
                        languageTxt.TxtRecId   == _markupTable.RecId &&
                        languageTxt.LanguageId == languageId;

            languageTxt.Txt = lineTitle;
            languageTxt.update();
            ttsCommit;
        }

        if(lineTitle && !tmpStr)
        {
            languageTxt.initValue();
            languageTxt.TxtTableId = _markupTable.TableId;
            languageTxt.TxtRecId   = _markupTable.RecId;
            languageTxt.LanguageId = languageId;
            languageTxt.Txt        = lineTitle;
            languageTxt.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementStatus</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected SC_Code getAgreementStatus(SalesAgreementHeader _salesAgreementHeader)
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        SalesTable                      salesTableLocal;
        SC_Code                         salesAgreementStatus;
        AgreementLine                   agreementLine;
        boolean                         ret;        

        salesTableLocal.initValue();
        salesTableLocal.CustAccount = accountId;
        salesTableLocal.initFromCustTable();

        if(_salesAgreementHeader.AgreementState == AgreementState::OnHold)
        {
            salesAgreementStatus = #onHold;
            ret = true;
        }

        if(!ret)
        {
            ret = salesTableLocal.ShippingDateRequested < _salesAgreementHeader.EarliestLineEffectiveDate || salesTableLocal.ShippingDateRequested > _salesAgreementHeader.LatestLineExpirationDate;
        }

        if(!ret)
        {
            select firstOnly RecId from agreementLine
                where agreementLine.Agreement      == _salesAgreementHeader.RecId &&
                      agreementLine.expirationDate >= salesTableLocal.ShippingDateRequested &&
                      agreementLine.effectiveDate  <= salesTableLocal.ShippingDateRequested &&
                     (agreementLine.Currency       == salesTableLocal.CurrencyCode || agreementLine.AgreementLineType == CommitmentType::ProductQuantity) &&
                     !agreementLine.IsMaxEnforced
                exists join TableId from agreementLineQuantityCommitment
                    where agreementLineQuantityCommitment.RecId == agreementLine.RecId && agreementLineQuantityCommitment.ProductUnitOfMeasure ||
                          agreementLine.AgreementLineType != CommitmentType::ProductQuantity;

            if(!agreementLine)
            {
                ret = true;

                while select agreementLine
                    where agreementLine.Agreement      == _salesAgreementHeader.RecId &&
                          agreementLine.expirationDate >= salesTableLocal.ShippingDateRequested &&
                          agreementLine.effectiveDate  <= salesTableLocal.ShippingDateRequested &&
                         (agreementLine.Currency       == salesTableLocal.CurrencyCode || agreementLine.AgreementLineType == CommitmentType::ProductQuantity) &&
                          agreementLine.IsMaxEnforced
                    exists join TableId from agreementLineQuantityCommitment
                        where agreementLineQuantityCommitment.RecId == agreementLine.RecId && agreementLineQuantityCommitment.ProductUnitOfMeasure ||
                              agreementLine.AgreementLineType != CommitmentType::ProductQuantity
                {
                    if(agreementLine.remainingQueried() > 0)
                    {
                        ret = false;
                        break;
                    }
                }
            }
        }

        salesAgreementStatus = salesAgreementStatus ? salesAgreementStatus : ret ? #closed : #active;

        return salesAgreementStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderHistory</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getOrderHistory()
    {
        QueryRun            queryRun;
        Counter             pageStart;  
        CustPackingSlipJour custPackingSlipJour;
        CustInvoiceJour     custInvoiceJour;

        pageStart = pageIndex * pageSize + 1;
        queryRun  = this.salesTableHistoryFilter();

        if(pageSize)
        {
            queryRun.enablePositionPaging(true);
            queryRun.addPageRange(pageStart, pageSize);
        }

        while(queryRun.next())
        {
            if(documentType == #shipment || documentType == #returnReceipt)
            {
                custPackingSlipJour = queryRun.get(tablenum(CustPackingslipJour));

                this.createOrderHistoryRespons(custPackingSlipJour, documentType);
                this.setWebshopDataMappingGetAPI('GetOrders', custPackingSlipJour);
            }
            else
            {
                custInvoiceJour = queryRun.get(tablenum(CustInvoiceJour));

                this.createOrderHistoryRespons(custInvoiceJour, documentType);
                this.setWebshopDataMappingGetAPI('GetOrders', custInvoiceJour);
            }
        }

        resultNode.appendChild(resultXml.createElement(#totalCount)).innerText(int2str(this.countQuerytotal(queryRun.pack(false))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLinesParams</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getOrderLinesParams(boolean _doProductChecks = true, String20 _basketLinesAction = #added)
    {
        XmlNodeList     salesLineFields;
        SC_LargeText    nodeXml;                

        //BP deviation documented
        tmpSalesLine.setTmp();

        if(isConfigurationkeyEnabled(configurationKeyNum(QuotationBasic)))
        {
            //BP deviation documented
            tmpSalesQuotationLine.setTmp();
        }

        //move externalcoupon/promotion lines to the end of list for correct amount calculation
        for(i=0;salesLinesList && i<salesLinesList.length();i++)
        {
            if(strContains(salesLinesList.item(i).innerXml(), #externalcoupon) || strContains(salesLinesList.item(i).innerXml(), #promotionCode))
            {         
                nodeXml = salesLinesList.item(salesLinesList.length()-1).innerXml();
                salesLinesList.item(salesLinesList.length()-1).innerXml(salesLinesList.item(i).innerXml());
                salesLinesList.item(i).innerXml(nodeXml);
                break;
            }
        }

        for(i=0;salesLinesList && i<salesLinesList.length();i++)
        {
            salesLineFields = salesLinesList.item(i).childNodes();

            for(k=0;salesLineFields && k<salesLineFields.length();k++)
            {
                node = salesLineFields.item(k);

                if(!node.attributes().getNamedItem(#value))
                {
                    continue;
                }

                switch(node.attributes().getNamedItem(#name).innerText())
                {
                    case #id:
                        lineId = node.attributes().getNamedItem(#value).innerText();
                        break;

                    case #lineType:
                        lineType = node.attributes().getNamedItem(#value).innerText();
                        break;

                    case #productId:
                        lineProductId = node.attributes().getNamedItem(#value).innerText();
                        break;

                    case #variantId:
                        lineInventDimId = node.attributes().getNamedItem(#value).innerText();
                        break;

                    case #title:
                        lineTitle = node.attributes().getNamedItem(#value).innerText();
                        break;

                    case #quantity:
                        lineQty = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Real);
                        break;

                    case #quantityPrecision:
                        lineQuantityPrecision = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Real);
                        break;

                    case #price:
                        linePrice = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Real);
                        break;

                    case #discountValue:
                        lineDiscountValue = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Real);
                        break;

                    case #discountType:
                        lineDiscountType = node.attributes().getNamedItem(#value).innerText() == #percentage ? SC_DiscountType::Percent : SC_DiscountType::Fixed;
                        break;

                    case #unitOfMeasureId:
                        parmUnitId = node.attributes().getNamedItem(#value).innerText();
                        break;

                    case #agreementLineNo:
                        agreementLineNo = node.attributes().getNamedItem(#value).innerText();
                        break;

                    case #skipSalesAgreement:
                        skipSalesAgreement = str2int(node.attributes().getNamedItem(#value).innerText());
                        break;                    

                    case #configurationId:
                        configurationId = node.attributes().getNamedItem(#value).innerText();
                        break;
                
                    default:
                        this.customOrderLinesParamsDelegate(node, this);
                        break;
                }
            }

            this.convertDynamicLineParams();

            switch(_basketLinesAction)
            {
                case #deleted:
                    this.deletePersistedBasketLine();
                    break;

                case #updated:
                    this.deletePersistedBasketLine();

                default:
                    if(salesQuotationTable)
                    {
                        this.createQuotationLine(_doProductChecks);
                    }
                    else
                    {
                        this.createSalesLine(_doProductChecks);
                    }
                    break;
            }

            this.clearLineVar();
        }

        if(salesLineFields && salesTable && this.isRetailEnabled())
        {
            MCRSalesTableController::recalculateRetailPricesDiscounts(salesTable);   
            this.createRetailGiftCardAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customOrderLinesParamsDelegate</Name>
				<Source><![CDATA[
    delegate void customOrderLinesParamsDelegate(XmlNode _node, Object _object){}

]]></Source>
			</Method>
			<Method>
				<Name>getOrderParameters</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getOrderParameters()
    {
        EventHandlerResult customResult = new EventHandlerResult();     
   
        //set default parameters values
        allowPostPrepayments = true;

        for(i=0;orderFields && i<orderFields.length();i++)
        {
            node = orderFields.item(i);

            if(node.name() == #commentLines)
            {
                commentLinesExists = true;
            }

            if(!node.attributes().getNamedItem(#value) && !node.childNodes().length())
            {
                continue;
            }

            switch(node.childNodes().length() ? node.name() : node.attributes().getNamedItem(#name).innerText())
            {
                case #salesAgreementId:
                    salesAgreementId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #returnOrderId:
                    returnOrderId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #attachments:
                    attachments = node.childNodes();
                    break;

                case #originalOrderId:
                    originalOrderId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #subTotal:
                    subTotal = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Real);
                    break;

                case #returnReasonCode:
                    returnCode = node.attributes().getNamedItem(#value).innerText(); 
                    break;
 
                case #orderAuthorizationStatus:
                    orderAuthorizationStatus = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #maxExpirationDate:
                    orderDueDate = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Date);
                    break;

                case #originalQuoteId:
                    originalQuoteId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #sanaOrderId:
                    sanaOrderId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #documentId:
                    documentId  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #documentType:
                    documentType  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #accountId:
                    accountId  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #accountType:
                    accountType = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #referenceNo:
                    referenceNo       = node.attributes().getNamedItem(#value).innerText();
                    referenceNoExists = true;
                    break;

                case #requestedDeliveryDate:
                    requestedDeliveryDate  = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Date);
                    break;

                case #contactId:
                    contactId  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #salesPersonId:
                    salesPersonId  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #paymentMethodName:
                    paymentMethodName  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #paymentTransactionId:
                    paymentTransactionId  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #paymentStatus:
                    paymentStatus  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #shippingMethodName:
                    shippingMethodName  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #shippingMethodCode:
                    shippingMethodCode  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #shopAccountEmail:
                    shopAccountEmail  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #commentLines:
                    commentLines = node.childNodes();
                    break;

                case #shippingAddress:
                    shipAddressFields = node.childNodes();
                    break;

                case #salesLines:
                    salesLinesList = node.childNodes();
                    break;

                case #pickupLocation:
                    pickupLocationList = node.childNodes();
                    break; 

                case #paymentMethodType:
                    paymentMethodType  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #adminUserEmail:
                    adminUserEmail  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #allowPostPrepayments:
                    allowPostPrepayments = str2int(node.attributes().getNamedItem(#value).innerText());
                    break;

                case #paymentMethodCode:
                    paymentMethodCode = node.attributes().getNamedItem(#value).innerText();
                    break;
               
                case #externalPaymentMethodType:
                    externalPaymentMethodType  = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #sanaLocationId:
                    sanaLocationId = node.attributes().getNamedItem(#value).innerText();
                    sanaLocationIdExists = true;
                    break;

                case #storeLocationCode:
                    storeLocationCode = node.attributes().getNamedItem(#value).innerText();                    
                    break;

                case #currencyId:
                    currencyId = node.attributes().getNamedItem(#value).innerText();
                    break;

                default:
                    this.customOrderParamsDelegate(node, this, customResult);

                    if(!customResult.result() && !node.childNodes().length()) 
                    {
                        customFieldsIds    += node.attributes().getNamedItem(#name).innerText();
                        customFieldsValues += node.attributes().getNamedItem(#value).innerText();
                    }
                    break;
            }
        }

        if(!documentType)
        {
            documentType = webShopsTable.OrderType == SC_SalesType::Quotation ? #quote : #order;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customOrderParamsDelegate</Name>
				<Source><![CDATA[
    //return true in _result for skip add parameters as custom fields in getOrderParameters
    delegate void customOrderParamsDelegate(XmlNode _node, Object _object, EventHandlerResult _result){}

]]></Source>
			</Method>
			<Method>
				<Name>GetOrders</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetOrders(XmlDocument _request)
    {        
        this.createHeaderXml();

        this.getParameters(_request);

        if(!returnMultipleDocuments)
        {
            pageSize  = pageSize ? pageSize : 1;
        }

        orderTypesCon = str2con(documentType, ',');
        endDate       = endDate ? DateTimeUtil::newDateTime(DateTimeUtil::date(endDate), timeMax()) : startDate ? DateTimeUtil::maxValue() : endDate;
        endDueDate    = endDueDate ? endDueDate : startDueDate ? dateMax() : endDueDate;
        endOrderDate  = endOrderDate ? DateTimeUtil::newDateTime(DateTimeUtil::date(endOrderDate), timeMax()) : startOrderDate ? DateTimeUtil::maxValue() : startOrderDate;

        if(this.isPendingOrdersSearch())
        {
            this.getPendingOrders();
        }
        else
        {
            this.getOrderHistory();
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductVariantConfigurable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isProductVariantConfigurable()
    {
        if(conFind(lineBOMConfigs, salesLine.RecId))
        {
            lineBOMconfigId = conPeek(lineBOMConfigs, conFind(lineBOMConfigs, salesLine.RecId)+1);
        }
        else
        {
            lineBOMconfigId = '';
        }

        return lineBOMconfigId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPendingOrdersSearch</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isPendingOrdersSearch()
    {
        return conFind(orderTypesCon, #quote) || conFind(orderTypesCon, #order) || conFind(orderTypesCon, #returnOrder) || conFind(orderTypesCon, #promotableQuote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSingleOrderByDocumentId</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container getSingleOrderByDocumentId()
    {
        CustInvoiceJour     custInvoiceJour;
        CustPackingSlipJour custPackingSlipJour;
        CommissionSalesRep  commissionSalesRep;

        switch(documentType)
        {
            case #order, #returnOrder:
                select firstonly salesTable
                    where ((salesTable.salesId == documentId && documentType == #order) ||
                            (salesTable.ReturnItemNum == documentId && documentType == #returnOrder)) &&
                            ((salesTable.SC_PaymentStatus != #statusNew &&
                            salesTable.SC_PaymentStatus != #cancelled) || !checkPaymentStatus) &&
                            (salesTable.SalesStatus      != SalesStatus::Invoiced || webShopsTable.ShowInvoicedOrders) &&
                            (salesTable.CustAccount     == accountId || !accountId) &&
                            !salesTable.SC_IsPersistedBasket
                    join custTable
                        where custTable.AccountNum        == salesTable.CustAccount &&
                            ((custTable.MainContactWorker == HcmWorker::findByPersonnelNumber(salesPersonId).RecId || custTable.SalesGroup) || !salesPersonId)
                        outer join Person from commissionSalesRep
                            where commissionSalesRep.GroupId == custTable.SalesGroup &&
                                 (commissionSalesRep.Person  == HcmWorker::findByPersonnelNumber(salesPersonId).Person || !salesPersonId);

                if(custTable.SalesGroup)
                {
                    salesTable = salesPersonId ? commissionSalesRep ? salesTable : null : salesTable;
                }
                break;
            case #invoice, #creditNote:
                select firstonly custInvoiceJour
                    index hint InvoiceNumIdx
                    where (custInvoiceJour.OrderAccount == accountId || !accountId) &&
                           custInvoiceJour.InvoiceId    == documentId &&
                          (custInvoiceJour.SalesId      == originalOrderId || !originalOrderId) &&
                          ((custInvoiceJour.InvoiceAmount >= 0 && documentType == #invoice) ||
                           (custInvoiceJour.InvoiceAmount  < 0 && documentType == #creditNote))
                    join custTable
                        where custTable.AccountNum        == custInvoiceJour.OrderAccount &&
                            ((custTable.MainContactWorker == HcmWorker::findByPersonnelNumber(salesPersonId).RecId || custTable.SalesGroup) || !salesPersonId)
                        outer join Person from commissionSalesRep
                            where commissionSalesRep.GroupId == custTable.SalesGroup &&
                                 (commissionSalesRep.Person  == HcmWorker::findByPersonnelNumber(salesPersonId).Person || !salesPersonId);

                if(custTable.SalesGroup)
                {
                    custInvoiceJour = salesPersonId ? commissionSalesRep ? custInvoiceJour : null : custInvoiceJour;
                }
                break;
            case #shipment, #returnReceipt:
                select firstonly custPackingSlipJour
                    index hint PackingSlipIdx
                    where (custPackingSlipJour.OrderAccount  == accountId || !accountId) &&
                           custPackingSlipJour.PackingSlipId == documentId &&
                          (custPackingSlipJour.SalesId       == originalOrderId || !originalOrderId) &&
                         ((custPackingSlipJour.SalesType     == SalesType::Sales && documentType == #shipment) ||
                          (custPackingSlipJour.SalesType     != SalesType::Sales && documentType == #returnReceipt))
                    join custTable
                        where custTable.AccountNum        == custPackingSlipJour.OrderAccount &&
                            ((custTable.MainContactWorker == HcmWorker::findByPersonnelNumber(salesPersonId).RecId || custTable.SalesGroup) || !salesPersonId)
                        outer join Person from commissionSalesRep
                            where commissionSalesRep.GroupId  == custTable.SalesGroup &&
                                 (commissionSalesRep.Person   == HcmWorker::findByPersonnelNumber(salesPersonId).Person || !salesPersonId);

                if(custTable.SalesGroup)
                {
                    custPackingSlipJour = salesPersonId ? commissionSalesRep ? custPackingSlipJour : null : custPackingSlipJour;
                }
                break;
            case #quote, #promotableQuote:
                select firstonly salesQuotationTable
                    where salesQuotationTable.QuotationId      == documentId &&
                            (((salesQuotationTable.SC_PaymentStatus != #statusNew && salesQuotationTable.SC_PaymentStatus != #cancelled && salesQuotationTable.SC_PaymentStatus != '' && documentType == #quote) ||
                            (salesQuotationTable.SC_PaymentStatus == '' && documentType == #promotableQuote)) || !checkPaymentStatus) &&
                            salesQuotationTable.QuotationStatus  != SalesQuotationStatus::Confirmed &&
                            (salesQuotationTable.CustAccount     == accountId || !accountId) &&
                            !salesQuotationTable.SC_IsPersistedBasket;

                if(salesQuotationTable.CustAccount)
                {
                    custTable = CustTable::find(salesQuotationTable.CustAccount);

                    if(salesPersonId)
                    {
                        if(custTable.SalesGroup)
                        {
                            select firstonly commissionSalesRep
                                where commissionSalesRep.GroupId == custTable.SalesGroup &&
                                      commissionSalesRep.Person  == HcmWorker::findByPersonnelNumber(salesPersonId).Person;

                            salesQuotationTable = commissionSalesRep ? salesQuotationTable : null;
                        }
                        else
                        {
                            salesQuotationTable = custTable.MainContactWorker == HcmWorker::findByPersonnelNumber(salesPersonId).RecId ? salesQuotationTable : null;
                        }
                    }
                }
                else
                {
                    select firstonly smmBusRelTable
                        where smmBusRelTable.BusRelAccount     == salesQuotationTable.BusRelAccount &&
                             (smmBusRelTable.MainContactWorker == HcmWorker::findByPersonnelNumber(salesPersonId).RecId || !salesPersonId);

                    salesQuotationTable = smmBusRelTable ? salesQuotationTable : null;
                }
                break;
        }

        return [custPackingSlipJour, custInvoiceJour];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderPaymentShipmentCost</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Amount getOrderPaymentShipmentCost(boolean _isShipmentCost = false, CustPackingSlipJour _custPackingSlipJour = null, CustInvoiceJour _custInvoiceJour = null)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;

        select firstonly Value, Txt from markupTrans
            where (markupTrans.TransTableId == tablenum(SalesTable) &&
                    markupTrans.TransRecId   == salesTable.RecId && salesTable) ||
                    (markupTrans.TransTableId == tablenum(SalesQuotationTable) &&
                    markupTrans.TransRecId   == salesQuotationTable.RecId && salesQuotationTable) ||
                    (markupTrans.TransTableId == tablenum(CustInvoiceJour) &&
                    markupTrans.TransRecId   == _custInvoiceJour.RecId && _custInvoiceJour) ||
                    (markupTrans.TransTableId == tablenum(CustPackingSlipJour) &&
                    markupTrans.TransRecId   == _custPackingSlipJour.RecId && _custPackingSlipJour)
            exists join TableId from markupTable
                where markupTable.MarkupCode == markupTrans.MarkupCode &&
                        markupTable.MarkupCode like (_isShipmentCost ? #dlvCostWildCard : #pymCostWildCard)  &&
                        markupTable.SC_MarkupCode;

        return markupTrans.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPendingOrders</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getPendingOrders()
    {
        Counter pageStart, pageEnd;

        pageStart = pageIndex * pageSize + 1;
        pageEnd   = pageStart + pageSize - 1;

        for(i=1;i<=conLen(orderTypesCon);i++)
        {
            switch(conPeek(orderTypesCon, i))
            {
                case #order:
                    this.getSalesPending();
                    break;
                case #returnOrder:
                    this.getSalesPending(true);
                    break; 
                case #quote:
                    this.getQuotePending();
                    break;
                case #promotableQuote:
                    this.getQuotePending(true);
                    break;                    
            }
        }

        if(conLen(ordersCon) > 0)
        {
            switch(sortField)
            {
                case #orderDate:
                    this.sortPendingContainer(3, sortAsc);
                    break;
                case #billToName:
                    this.sortPendingContainer(4, sortAsc);
                    break;
                case #shipToName:
                    this.sortPendingContainer(5, sortAsc);
                    break;
                case #documentType:
                    this.sortPendingContainer(1, sortAsc);
                    break;
                default:
                    this.sortPendingContainer(2, sortAsc);
                    break;
            }

            for(k=pageStart;k<=(conLen(ordersCon) <= pageEnd ? conLen(ordersCon) : pageEnd);k++)
            {
                this.createPendingOrdersResponse(conPeek(conPeek(ordersCon, k),1), conPeek(conPeek(ordersCon, k),2));
            }
        }

        resultNode.appendChild(resultXml.createElement(#totalCount)).innerText(int2str(totalOrders));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPending</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getSalesPending(boolean _isReturn = false)
    {
        QueryRun queryRun;        
        
        queryRun = this.salesTableFilter(_isReturn);

        if(pageSize)
        {
            queryRun.enablePositionPaging(true);
            queryRun.addPageRange(1, (pageIndex + 1) * pageSize);
        }

        while(queryRun.next())
        {
            salesTable = queryRun.get(tablenum(SalesTable));
            ordersCon       += [[_isReturn ? #returnOrder : #order, _isReturn ? salesTable.ReturnItemNum : salesTable.SalesId, SalesTable.createdDateTime, SalesTable.SC_BillToName, SalesTable.DeliveryName]];
        }

        totalOrders += this.countQuerytotal(queryRun.pack(false));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuotePending</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getQuotePending(boolean _promotableQuote = false)
    {
        QueryRun queryRun;        
        
        //find all customer quotes  +
        //all quotes for customer sales group (if salesperson logged)
        queryRun = this.salesQuotationTableFilter(false, _promotableQuote);

        if(pageSize)
        {
            queryRun.enablePositionPaging(true);
            queryRun.addPageRange(1, (pageIndex + 1) * pageSize);
        }

        while(queryRun.next())
        {
            salesQuotationTable = queryRun.get(tablenum(SalesQuotationTable));
            ordersCon += [[_promotableQuote ? #promotableQuote : #quote, salesQuotationTable.QuotationId, salesQuotationTable.createdDateTime, salesQuotationTable.SC_BillToName, salesQuotationTable.DeliveryName]];
        }
        totalOrders += this.countQuerytotal(queryRun.pack(false));

        //add all orders with coresponding prospect account (if salesperson logged)
        queryRun = this.salesQuotationTableFilter(true, _promotableQuote);

        if(queryRun)
        {
            if(pageSize)
            {
                queryRun.enablePositionPaging(true);
                queryRun.addPageRange(1, (pageIndex + 1) * pageSize);
            }

            while(queryRun.next())
            {
                salesQuotationTable = queryRun.get(tablenum(SalesQuotationTable));
                ordersCon += [[_promotableQuote ? #promotableQuote : #quote, salesQuotationTable.QuotationId, salesQuotationTable.createdDateTime, salesQuotationTable.SC_BillToName, salesQuotationTable.DeliveryName]];
            }
            totalOrders += this.countQuerytotal(queryRun.pack(false));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortPendingContainer</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void sortPendingContainer(int _sortField, boolean _asc = true)
    {
        container c2, c3;
        anytype   value, nextValue;
        
        for(i=1;i<=conLen(ordersCon);i++)
        {
            for(k=i+1;k<=conLen(ordersCon);k++)
            {
                c2        = conPeek(ordersCon,i);
                value     = conPeek(c2, _sortField);
                c3        = conPeek(ordersCon,k);
                nextValue = conPeek(c3, _sortField);

                if((nextValue > value && !_asc) || (nextValue < value && _asc))
                {
                    ordersCon = condel(ordersCon, k, 1);
                    ordersCon = conins(ordersCon, i, c3);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPendingOrdersResponse</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createPendingOrdersResponse(String50 _orderType, SalesId _orderId)
    {        
        switch(_orderType)
        {
            case #order:
                salesTable = SalesTable::find(_orderId);
                custTable  = CustTable::find(salesTable.CustAccount);
                this.createSaveSalesRespons();
                this.setWebshopDataMappingGetAPI('GetOrders', salesTable);
                break;

            case #returnOrder:
                select firstonly salesTable
                        where salesTable.ReturnItemNum == _orderId && salesTable.SalesType == SalesType::ReturnItem;
                custTable  = CustTable::find(salesTable.CustAccount);
                this.createSaveSalesRespons();
                this.setWebshopDataMappingGetAPI('GetOrders', salesTable);
                break;

            case #quote, #promotableQuote:
                salesQuotationTable = SalesQuotationTable::find(_orderId);
                custTable           = CustTable::find(salesQuotationTable.CustAccount);
                this.createSaveQuoteRespons(_orderType == #promotableQuote);
                this.setWebshopDataMappingGetAPI('GetOrders', salesQuotationTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPersistedBasket</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [Replaceable]
    public XmlDocument GetPersistedBasket(XmlDocument _request)
    {
        this.createHeaderXml();

        this.getParameters(_request);

        notInStockLines        = resultNode.appendChild(resultXml.createElement(#notInStockLines));
        decreasedQuantityLines = resultNode.appendChild(resultXml.createElement(#decreasedQuantityLines));
        nonOrderableLines      = resultNode.appendChild(resultXml.createElement(#nonOrderableLines));        
                        
        if(syncOrderType == #quote || accountType == #contact)
        {
            salesQuotationTable = SalesQuotationTable::find(originalOrderId);
            custTable           = CustTable::find(salesQuotationTable.CustAccount);
        }
        else
        {
            salesTable = SalesTable::find(originalOrderId);
            custTable  = CustTable::find(salesTable.CustAccount);
        }

        if(!salesTable && !salesQuotationTable)
        {
            this.errorHandler(strfmt("@SYS89012", originalOrderId), #errorCode1);
        }
        else
        {
            //payment cost
            totalPaymentShipmentCost = this.getOrderPaymentShipmentCost();            

            //shippping cost
            totalPaymentShipmentCost += this.getOrderPaymentShipmentCost(true);
            
            if(salesQuotationTable)
            {                
                this.createCalcQuoteRespons(calculateTotals, loadOrderLines, true); 
                this.setWebshopDataMappingGetAPI('GetPersistedBasket', salesQuotationTable);
            }

            if(salesTable)
            {             
                this.createCalcSalesRespons(calculateTotals, loadOrderLines, true);  
                this.setWebshopDataMappingGetAPI('GetPersistedBasket', salesTable);
            }
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetOrderReport</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetOrderReport(XmlDocument _request)
    {   
        SrsReportDataContract contract;
        System.Byte[]         reportBytes;              

        this.createHeaderXml();

        this.getParameters(_request);        
        
        contract = this.createReportDataContract();

        if(contract != null)
        {                                                                      
            reportBytes = this.getReportByteArray(contract);

            resultNode.appendChild(resultXml.createElement(#data)).innerText(System.Convert::ToBase64String(reportBytes));            
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportDataContract</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected SrsReportDataContract createReportDataContract()
    {        
        #define.returnDocument('ReturnDocument')
        Args                                 args = new Args();
        SrsReportDataContract                contract;        
        SalesInvoiceController               salesInvoiceController;
        SalesInvoiceContract                 salesInvoiceContract;
        CustInvoiceJour                      custInvoiceJour;
        CustConfirmJour                      custConfirmJour;
        CustQuotationJour                    custQuotationJour;
        CustPackingSlipJour                  custPackingSlipJour;
        SalesPackingSlipContract             pscontract;
        CustQuotationSalesLink               custQuotationSalesLink;       
        ReturnAcknowledgmentAndDocController returnAcknowledgmentAndDocController;
        ReturnAcknowledgmentAndDocContract   returnAcknowledgmentAndDocContract;
        
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::OriginalPrint);

        switch (documentType)
        {
            case #order:
                select firstOnly custConfirmJour
                    order by ConfirmDate Desc, ConfirmId Desc
                    where custConfirmJour.SalesId == documentId;

                args.record(custConfirmJour);
                contract = SalesConfirmController::newDataContract(args);
                break;
            case #quote, #promotableQuote:
                select firstonly quotationId from custQuotationSalesLink
                    order by QuotationDate desc, QuotationId desc
                    where custQuotationSalesLink.origQuotationId == documentId;

                custQuotationJour = custQuotationJour::findFromSalesQuotationQuotation(custQuotationSalesLink.quotationId);

                args.record(custQuotationJour);
                contract = SalesQuotationController::newDataContract(args);
                break;
            case #shipment, #returnReceipt:
                select firstOnly custPackingSlipJour
                where custPackingSlipJour.PackingSlipId == documentId &&
                      custPackingSlipJour.SalesId == originalOrderId;

                args.record(custPackingSlipJour);
                contract = SalesPackingSlipController::newDataContract(args);
                pscontract = contract.parmRdpContract();
                pscontract.parmDocumentTitle("@SYS11549");
                break;
            case #invoice, #creditNote:
                salesInvoiceController = SalesInvoiceController::construct();
                salesInvoiceController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderInvoice).getDefaultReportFormat());                

                select firstOnly custInvoiceJour
                where custInvoiceJour.InvoiceId == documentId &&
                      custInvoiceJour.SalesId == originalOrderId;
                
                args.record(custInvoiceJour);
                salesInvoiceContract = salesInvoiceController.parmReportContract().parmRdpContract();
                salesInvoiceContract.parmRecordId(custInvoiceJour.RecId);
                salesInvoiceContract.parmCountryRegionISOCode(SysCountryRegionCode::countryInfo());
                salesInvoiceContract.parmDocumentTitle(documentType == #invoice ? #invoice : "@SYS8125");
                contract = salesInvoiceController.parmReportContract();
                break;
            case #returnOrder:
                returnAcknowledgmentAndDocController = new ReturnAcknowledgmentAndDocController();
                returnAcknowledgmentAndDocController.parmReportName(ssrsReportStr(ReturnAcknowledgmentAndDocument, Report));

                select firstonly salesTable where salesTable.ReturnItemNum == documentId && salesTable.SalesType == SalesType::ReturnItem;
                args.record(salesTable);
                
                returnAcknowledgmentAndDocContract = returnAcknowledgmentAndDocController.parmReportContract().parmRdpContract();
                returnAcknowledgmentAndDocContract.parmRecordId(salesTable.RecId);
                returnAcknowledgmentAndDocContract.parmReportType(#returnDocument);
                returnAcknowledgmentAndDocContract.parmIsSendDoc(true);
                contract = returnAcknowledgmentAndDocController.parmReportContract();
                break;
        }

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportByteArray</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected System.Byte[] getReportByteArray(SrsReportDataContract _contract)
    {
        #File
        SRSProxy                    srsProxy;
        Map                         reportParametersMap;
        SRSPrintDestinationSettings printSettings;        
        SrsReportRunService         reportRunService = new SrsReportRunService();
        SRSReportExecutionInfo      executionInfo = new SRSReportExecutionInfo();        
        Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[] reportParamArray;

        _contract.parmRdlContract().parmLabelLanguageId(languageId ? languageId : CompanyInfo::languageId());
        printSettings = _contract.parmPrintSettings();
        printSettings.printMediumType(SRSPrintMediumType::File);
        printSettings.fileFormat(SRSReportFileFormat::PDF);
        printSettings.fileName(documentType + '_' + strAlpha(documentId) + #PDF);
        printSettings.overwriteFile(true);
            
        _contract.parmReportExecutionInfo(executionInfo);
        _contract.parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
            
        reportRunService.parmLocalMode(false);
        reportRunService.preRunReport(_contract);
            
        reportParametersMap = reportRunService.createParamMapFromContract(_contract);
        reportParamArray= SrsReportRunUtil::getParameterValueArray(reportParametersMap);

        srsProxy = SRSProxy::constructWithConfiguration(_contract.parmReportServerConfig());

        return srsproxy.renderReportToByteArray(_contract.parmReportPath(), reportParamArray, printSettings.fileFormat(), printSettings.deviceInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetReturnReasonCodes</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetReturnReasonCodes(XmlDocument _request)
    {
        ReturnReasonCode    returnReasonCode;
        XmlNode             returnReasonNode;        

        this.createHeaderXml();

        this.getParameters(_request);
        node = resultNode.appendChild(resultXml.createElement(#orderReturnReasons));

        while select ReasonCodeId, Description from returnReasonCode
            where returnReasonCode.SC_VisibleInWebShop
        {
            returnReasonNode = node.appendChild(resultXml.createElement(#returnReasonCode));

            this.addFieldValue(#id, returnReasonNode, returnReasonCode.ReasonCodeId);
            this.addFieldValue(#bigName, returnReasonNode, returnReasonCode.Description);
            this.setWebshopDataMappingGetAPI('GetReturnReasonCodes', returnReasonCode);
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSalesAgreements</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetSalesAgreements(XmlDocument _request)
    {
        SalesAgreementHeader    salesAgreementHeader;        
        QueryRun                queryRun;
        Counter                 pageStart;        

        this.createHeaderXml();

        this.getParameters(_request);

        if(documentId)
        {
            select firstOnly salesAgreementHeader
                where salesAgreementHeader.SalesNumberSequence == documentId &&
                      salesAgreementHeader.CustAccount == accountId &&
                      salesAgreementHeader.IsDeleted == NoYes::No &&
                      salesAgreementHeader.SellingLegalEntity == CompanyInfo::find().RecId;

            if(salesAgreementHeader)
            {
                this.createSalesAgreementRespons(salesAgreementHeader);
                this.setWebshopDataMappingGetAPI('GetSalesAgreements', salesAgreementHeader);
            }
        }
        else
        {
            queryRun  = this.createSalesAgreementQuery();            
            pageStart = pageIndex * pageSize + 1;

            if(pageSize)
            {
                queryRun.enablePositionPaging(true);
                queryRun.addPageRange(pageStart, pageSize);
            }

            while(queryRun.next())
            {
                salesAgreementHeader = queryRun.get(tablenum(SalesAgreementHeader));
                this.createSalesAgreementRespons(salesAgreementHeader);
                this.setWebshopDataMappingGetAPI('GetSalesAgreements', salesAgreementHeader);
            }
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesAgreementQuery</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun createSalesAgreementQuery()
    {
        SalesAgreementHeader    salesAgreementHeader;
        QueryRun                queryRun;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        Counter                 pageBreak;

        queryBuildDataSource = query.addDataSource(tablenum(SalesAgreementHeader));
        queryBuildDataSource.addOrderByField(fieldnum(SalesAgreementHeader, SalesNumberSequence));
        queryBuildDataSource.addRange(fieldNum(SalesAgreementHeader, CustAccount)).value(accountId);
        queryBuildDataSource.addRange(fieldNum(SalesAgreementHeader, IsDeleted)).value(queryValue(NoYes::No));
        queryBuildDataSource.addRange(fieldNum(SalesAgreementHeader, SellingLegalEntity)).value(queryValue(CompanyInfo::find().RecId));

        if(activeOnly)
        {
            queryBuildDataSource.addRange(fieldNum(SalesAgreementHeader, RecId)).value(queryValue(0));
            pageBreak = pageIndex * pageSize + pageSize;
            i = 0;

            while select salesAgreementHeader
                order by salesNumberSequence
                where salesAgreementHeader.CustAccount == accountId &&
                        salesAgreementHeader.AgreementState == AgreementState::Effective &&
                        salesAgreementHeader.IsDeleted == NoYes::No &&
                        salesAgreementHeader.SellingLegalEntity == CompanyInfo::find().RecId
            {
                if(this.getAgreementStatus(salesAgreementHeader) == #active)
                {
                    queryBuildDataSource.addRange(fieldNum(SalesAgreementHeader, RecId)).value(queryValue(salesAgreementHeader.RecId));
                    i++;

                    if(i == pageBreak)
                    {
                        break;
                    }
                }
            }
        }

        queryRun  = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryAddress</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDeliveryAddress(boolean _quotation = false)
    {
        LogisticsPostalAddress      address;        
        LogisticsPostalAddressView  addressView;        
        boolean                     updateAddressLines;        

        if(shipAddressFields && shipAddressFields.length())
        {
            addressView = this.setAddressFromParams(shipAddressFields);

            if(addressView.RecId)
            {
                address = LogisticsPostalAddress::findRecId(addressView.RecId, true);

                if(_quotation)
                {
                    if(salesQuotationTable.DeliveryPostalAddress != address.RecId)
                    {
                        salesQuotationTable.DeliveryPostalAddress = address.RecId;
                        salesQuotationTable.modifiedField(fieldNum(SalesQuotationTable, DeliveryPostalAddress));
                        updateAddressLines = true;
                    }
                }
                else
                {
                    if(salesTable.DeliveryPostalAddress != address.RecId)
                    {
                        salesTable.DeliveryPostalAddress = address.RecId;
                        salesTable.modifiedField(fieldNum(SalesTable, DeliveryPostalAddress));
                        updateAddressLines = true;
                    }
                }
            }
            else
            {
                //manually entered address
                address = this.createManualDeliveryAddress(addressView, _quotation);

                if (address)
                {
                    if(_quotation)
                    {
                        salesQuotationTable.DeliveryPostalAddress = address.RecId;
                        salesQuotationTable.modifiedField(fieldNum(SalesQuotationTable, DeliveryPostalAddress));
                        salesQuotationTable.DeliveryName = addressView.LocationName ? addressView.LocationName : salesQuotationTable.DeliveryName;
                    }
                    else
                    {
                        salesTable.DeliveryPostalAddress = address.RecId;
                        salesTable.modifiedField(fieldNum(SalesTable, DeliveryPostalAddress));
                        salesTable.DeliveryName = addressView.LocationName ? addressView.LocationName : salesTable.DeliveryName;
                    }
                }
            }

            if(address && updateAddressLines)
            {
                if(_quotation)
                {
                    salesQuotationTable.copyAddressToLine(DialogButton::YesToAll, salesQuotationTable);
                }
                else
                {
                    salesTable.copyAddressToLine(DialogButton::YesToAll, salesTable, DeliveryDateUpdateInLines::RecalculateDeliveryDates);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createManualDeliveryAddress</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected LogisticsPostalAddress createManualDeliveryAddress(LogisticsPostalAddressView _addressView, boolean _quotation = false)
    {
        LogisticsPostalAddress          address;
        LogisticsPostalAddressEntity    postalAddressEntity;
        LogisticsAddressZipCode         addressZipCode;      
        LogisticsLocationExt            logisticsLocationExt;
        TaxGroup                        stateTaxGroup;

        postalAddressEntity = LogisticsPostalAddressEntity::construct();

        if(_quotation)
        {
            salesQuotationTable.DeliveryName = _addressView.LocationName;
            salesQuotationTable.clearAddressReference();
        }
        else
        {
            salesTable.DeliveryName = _addressView.LocationName;
            salesTable.clearAddressReference();
        }

        if(_addressView.ZipCode && !LogisticsAddressZipCode::findZipCodeCountryRegion(_addressView.ZipCode, _addressView.CountryRegionId))
        {
            addressZipCode.initValue();
            addressZipCode.ZipCode         = _addressView.ZipCode;
            addressZipCode.City            = _addressView.City;
            addressZipCode.CountryRegionId = _addressView.CountryRegionId;
            addressZipCode.State           = _addressView.State;
            addressZipCode.StreetName      = _addressView.Street;
            addressZipCode.insert();
        }

        address = this.findAddressDuplicate(_addressView);

        if (!address)
        {
            if (LogisticsPostalAddressEntity::validate(_addressView))
            {
                address          = postalAddressEntity.initFromView(_addressView);
                address.Location = LogisticsLocation::create(_addressView.LocationName, true).RecId;

                address.LogisticsPostalAddressMap::formatAddress();

                if(address.validateWrite())
                {
                    address.insert();
                }
            }

            if(address)
            {
                stateTaxGroup = (select firstOnly SC_TaxGroup from LogisticsAddressState
                                   where LogisticsAddressState.StateId == address.State &&
                                         LogisticsAddressState.CountryRegionId == address.CountryRegionId).SC_TaxGroup;

                if(stateTaxGroup) //set address tax group
                {
                    logisticsLocationExt = LogisticsLocationExt::find(address.Location, true);

                    if(logisticsLocationExt && !logisticsLocationExt.TaxGroup)
                    {
                        logisticsLocationExt.TaxGroup = stateTaxGroup;
                        logisticsLocationExt.doUpdate();
                    }

                    if(!logisticsLocationExt)
                    {
                        logisticsLocationExt.Location = address.Location;
                        logisticsLocationExt.TaxGroup = stateTaxGroup;
                        logisticsLocationExt.insert();
                    }
                }              
            }
        }

        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDecreasedQuantity</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isDecreasedQuantity(Qty _inventory = 0, boolean _calcInventory = true)
    {
        Qty             availQty = _inventory;
        SC_LargeText    tmpStr;
        InventDim       variantDim;        

        if(this.isCheckStock())
        {
            variantDim  = InventDim::find(lineInventDimId);

            if(_calcInventory)
            {
                availQty = this.calcInventory(variantDim);
            }            

            if(lineQty > availQty)
            {
                lineQty = availQty;
                node    = decreasedQuantityLines.appendChild(resultXml.createElement(#line));
                tmpStr  = this.getProductName();

                if(lineInventDimId)
                {
                    tmpStr += ' - ' + this.findVariantDescription(InventDimCombination::findByInventDim(lineProductId, variantDim));
                }

                if(parmUnitId)
                {
                    tmpStr += ' - ' + UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(parmUnitId).RecId, languageId).Description;
                }

                this.initNonOrderableDefaultFields(tmpStr);

                if(agreementLineNo)
                {
                    this.addFieldValue(#agreementLineNo, node, agreementLineNo);
                }
            }
        }

        return lineQty > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonOrderableDefaultFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initNonOrderableDefaultFields(SC_LargeText _tmpStr)
    {
        this.addFieldValue(#description, node, _tmpStr);
        this.addFieldValue(#productId, node, inventTable.ItemId);
        this.addFieldValue(#variantId, node, lineInventDimId);
        this.addFieldValue(#unitOfMeasureId, node, parmUnitId ? parmUnitId : inventTable.salesUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineInStock</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isLineInStock(Qty _inventory = 0, boolean _calcInventory = true)
    {
        boolean         ret = true;
        SC_LargeText    tmpStr;
        InventDim       variantDim;
        Qty             inventory = _inventory;        

        if(this.isCheckStock())
        {
            variantDim  = InventDim::find(lineInventDimId);

            if(_calcInventory)
            {
                inventory = this.calcInventory(variantDim);
            }

            inventory   = lineQuantityPrecision ? roundDown(inventory, lineQuantityPrecision) : inventory;

            if(inventory <=0)
            {
                node    = notInStockLines.appendChild(resultXml.createElement(#line));
                tmpStr  = this.getProductName();
                ret     = false;

                if(lineInventDimId)
                {
                    tmpStr += ' - ' + this.findVariantDescription(InventDimCombination::findByInventDim(lineProductId, variantDim));
                }

                if(parmUnitId)
                {
                    tmpStr += ' - ' + UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(parmUnitId).RecId, languageId).Description;
                }

                this.initNonOrderableDefaultFields(tmpStr);

                if(agreementLineNo)
                {
                    this.addFieldValue(#agreementLineNo, node, agreementLineNo);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineOrderable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isLineOrderable(boolean _isSupplementary = false)
    {
        boolean                 ret;
        SC_LargeText            tmpStr;
        InventDimCombination    inventDimCombination;
        InventDim               storageDim = InventDim::findDim(this.setProductStorageDim());        

        ret = (_isSupplementary || inventTable.SC_VisibleInWebShop) &&                                      //is visible
                 !inventTable.inventItemSalesSetup(storageDim.inventDimId).stopped() &&                        //not blocked
                 !inventTable.inventItemInventSetup(storageDim.inventDimId).stopped();

        if(ret)
        {
            ret = this.checkValidationRules(inventTable);                                                  //valid for rules
        }

        if(ret)                                                                                            //product valid
        {
            ret = inventTable.inventModelGroupItem().RecId && inventTable.inventItemGroupItem().RecId &&
                     inventTable.storageDimensionGroup() && inventTable.trackingDimensionGroup() &&
                     !(inventTable.Product().PdsCWProduct && !PdsCatchWeightItem::find(inventTable.ItemId).PdsCWUnitId);
        }

        if(ret && lineInventDimId && lineInventDimId != InventDim::findOrCreateBlank().inventDimId && !strContains(lineInventDimId, ';')) //variant exist and visible, skip for configured products (with ';')
        {
            inventDimCombination = InventDimCombination::findByInventDim(inventTable.ItemId, InventDim::find(lineInventDimId));
            ret = inventDimCombination && (_isSupplementary || inventDimCombination.SC_VisibleInWebShop);
        }
        else
        {
            ret = ret && !(inventTable.colorActive() || inventTable.sizeActive() ||                         //if no variant id
                              inventTable.configActive() || inventTable.styleActive());                        //check if no active dimensions
        }

        if(ret && parmUnitId && parmUnitId != inventTable.salesUnitId())                                    //line unit convertable and visible
        {
            ret = EcoResProductUnitConverter::canBeConvertedForReleasedProduct(inventTable.ItemId, lineInventDimId, UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId()),
                                                                               UnitOfMeasure::unitOfMeasureIdBySymbol(parmUnitId)) &&
                  UnitOfMeasure::findBySymbol(parmUnitId).SC_VisibleInWebShop;
        }

        if(ret)
        {
            LogisticsPostalAddress deliveryAddress = salesTable ? salesTable.deliveryAddress() : salesQuotationTable.deliveryAddress();
            
            ret = !PdsMRCRestrictedListByItem::checkItemRestrictedForState(deliveryAddress.CountryRegionId, deliveryAddress.State, inventTable.ItemId);                                             
            ret = ret && !PdsMRCRestrictedListByItem::checkItemRestrictedForCountry(deliveryAddress.CountryRegionId, inventTable.ItemId);            
        }

        if(!ret && !_isSupplementary)
        {
            node    = nonOrderableLines.appendChild(resultXml.createElement(#line));
            tmpStr  = this.getProductName();

            if(lineInventDimId)
            {
                tmpStr += ' - ' + this.findVariantDescription(InventDimCombination::findByInventDim(inventTable.ItemId, InventDim::find(lineInventDimId)));
            }

            if(parmUnitId)
            {
                tmpStr += ' - ' + UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(parmUnitId).RecId, languageId).Description;
            }            

            this.initNonOrderableDefaultFields(tmpStr);

            if(agreementLineNo)
            {
                this.addFieldValue(#agreementLineNo, node, agreementLineNo);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesQtyOk</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container isSalesQtyOk()
    {
        InventDim               storageDim;
        boolean                 ret = true;
        SC_LargeText            tmpStr, tmpStr2;
        Qty                     lowestQty, highestQty, multipleQty, origQty = lineQty;
        InventItemOrderSetupMap inventItemOrderSetupMap;
        UnitOfMeasureRecId      fromUnitRecId, toUnitRecId;
        SalesUnit               salesUnit;        

        storageDim              = InventDim::findDim(this.setProductStorageDim());
        inventItemOrderSetupMap = InventItemOrderSetupMap::find(inventtable.ItemId, InventItemOrderSetupType::Sales, storageDim.inventDimId, false, inventtable);
        salesUnit               = inventTable.salesUnitId();

        if(salesUnit != parmUnitId)
        {
            fromUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(salesUnit);
            toUnitRecId   = UnitOfMeasure::unitOfMeasureIdBySymbol(parmUnitId);
                        
            lowestQty     = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, storageDim.inventDimId, inventItemOrderSetupMap.lowestQty(), fromUnitRecId, toUnitRecId, NoYes::Yes);
            highestQty    = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, storageDim.inventDimId, inventItemOrderSetupMap.highestQty(), fromUnitRecId, toUnitRecId, NoYes::Yes);
            multipleQty   = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, storageDim.inventDimId, inventItemOrderSetupMap.multipleQty(), fromUnitRecId, toUnitRecId, NoYes::Yes);
        }
        else
        {
            lowestQty     = inventItemOrderSetupMap.lowestQty();
            highestQty    = inventItemOrderSetupMap.highestQty();
            multipleQty   = inventItemOrderSetupMap.multipleQty(); 
        }

        lineQuantityPrecision = multipleQty && lineQuantityPrecision != multipleQty ? multipleQty : lineQuantityPrecision;

        if(lowestQty != 0 && lineQty < lowestQty)
        {
            lineQty = lowestQty;
            tmpStr2 = "@SCL318";
            ret     = false;
        }

        if(highestQty != 0 && lineQty > highestQty)
        {
            lineQty = highestQty;
            tmpStr2 = "@SCL319";
            ret     = false;
        }

        if(multipleQty != 0 && lineQty != round(lineQty + multipleQty / 2.00001, multipleQty))
        {
            lineQty = round(lineQty + multipleQty / 2.00001, multipleQty); 
            tmpStr2 = "@SCL320";
            ret     = false;
        }

        if(!ret && origQty != lineQty)
        {
            node    = decreasedQuantityLines.appendChild(resultXml.createElement(#line));
            tmpStr  = this.getProductName() + tmpStr2;

            this.initNonOrderableDefaultFields(tmpStr);

            if(agreementLineNo)
            {
                this.addFieldValue(#agreementLineNo, node, agreementLineNo);
            }
        }

        return [highestQty, lineQty > 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDuplicateLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean mergeDuplicateLines(Qty _maxQty, boolean _quote = false)
    {
        SalesLine           salesLineCopy;
        SalesQuotationLine  salesQuotationLineCopy;
        AgreementLine       agreementLine;        

        //merge only alternative items, persisted basket lines or sales agreement lines
        if(this.checkNotMergingLine(_quote))
        {
            return false;
        }

        if(_quote)
        {
            select firstOnly forUpdate salesQuotationLineCopy
                where salesQuotationLineCopy.QuotationId == salesQuotationLine.QuotationId &&
                      salesQuotationLineCopy.ItemId      == salesQuotationLine.ItemId &&
                      salesQuotationLineCopy.SalesUnit   == salesQuotationLine.SalesUnit &&
                      salesQuotationLineCopy.InventDimId == salesQuotationLine.InventDimId &&
                      !salesQuotationLineCopy.SC_SuppItem;

            if(salesQuotationLineCopy)
            {
                salesQuotationLineCopy.SalesQty            += salesQuotationLine.SalesQty;
                salesQuotationLineCopy.SalesQty             = _maxQty ? salesQuotationLineCopy.SalesQty > _maxQty ? _maxQty : salesQuotationLineCopy.SalesQty : salesQuotationLineCopy.SalesQty;
                salesQuotationLineCopy.QtyOrdered           = salesQuotationLineCopy.calcQtyOrdered();
                salesQuotationLineCopy.RemainSalesFinancial = 0;
                salesQuotationLineCopy.setPriceDisc(salesQuotationLineCopy.inventDim());
                salesQuotationLineCopy.doUpdate();    
            
                updateLineCon += salesQuotationLineCopy.RecId; //Big basket functionality
            }
        }
        else
        {
            select firstOnly forUpdate salesLineCopy
                where salesLineCopy.SalesId               == salesLine.SalesId &&
                      salesLineCopy.ItemId                == salesLine.ItemId &&
                      salesLineCopy.SalesUnit             == salesLine.SalesUnit &&
                      salesLineCopy.InventDimId           == salesLine.InventDimId &&
                      salesLineCopy.MatchingAgreementLine == salesLine.MatchingAgreementLine &&
                      !salesLineCopy.SC_SuppItem;

            if(salesLineCopy)
            {
                salesLineCopy.SalesQty            += salesLine.SalesQty;
                salesLineCopy.SalesQty             = _maxQty ? salesLineCopy.SalesQty > _maxQty ? _maxQty : salesLineCopy.SalesQty : salesLineCopy.SalesQty;
                salesLineCopy.QtyOrdered           = salesLineCopy.calcQtyOrdered();
                salesLineCopy.RemainSalesPhysical  = salesLineCopy.SalesQty;
                salesLineCopy.RemainSalesFinancial = 0;
                salesLineCopy.RemainInventPhysical = salesLineCopy.QtyOrdered;
                
                if(salesLineCopy.MatchingAgreementLine && !salesLineCopy.isAgreementLinkValid()) //check if agreement valid after merge and search new if needed
                {
                    salesLineCopy.unLinkAgreementLine();
                    salesLineCopy.SystemEntryChangePolicy = 0;
                    agreementLine = AgreementLine::findLineForAutoMatch(salesLineCopy, salesTable.MatchingAgreement, true);

                    if(agreementLine)
                    {
                        salesLineCopy.initFromAgreementLine(agreementLine);
                    }
                    else
                    {
                        saleslineCopy.setPriceDisc(salesLineCopy.inventDim());
                    }
                }
                else
                {
                    saleslineCopy.setPriceDisc(salesLineCopy.inventDim());
                }

                salesLineCopy.doUpdate();  
                 
                updateLineCon += salesLineCopy.RecId; //Big basket functionality
            }
        }

        return salesQuotationLineCopy || salesLineCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMergingLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean checkNotMergingLine(boolean _quote = false)
    {
        return !altItemFound && !(_quote ? salesQuotationTable.SC_IsPersistedBasket : salesTable.SC_IsPersistedBasket) && !salesTable.MatchingAgreement && !isBasketCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayInvoiceOrders</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument PayInvoiceOrders(XmlDocument _request)
    {        
        CustInvoiceJour         custInvoiceJour;
        XMLNodeList             ordersList;
        LedgerJournalTable      journalTable;                
        boolean                 headerCreated;                        

        this.createHeaderXml();

        this.getParameters(_request);

        ttsbegin;
        ordersList = _request.getElementsByTagName(#order);

        for(k=0;ordersList && k<ordersList.length();k++)
        {
            orderFields = ordersList.item(k).childNodes();

            this.getOrderParameters();

            select firstOnly custInvoiceJour
                where custInvoiceJour.InvoiceId == documentId &&
                      custInvoiceJour.SalesId == originalOrderId;

            if(custInvoiceJour && subTotal)
            {
                if(!headerCreated)
                {                    
                    journalTable  = this.createInvoiceJournal(custInvoiceJour);
                    headerCreated = true;
                }

                this.createInvoiceTrans(k, journalTable, custInvoiceJour);
            }
        }

        if(headerCreated)
        {
            if(webShopsTable.PostAutoInvoicePayment)
            {
                this.postLedgerJournal(journalTable);
            }

            node = resultNode.appendChild(resultXml.createElement(#order));
            this.addFieldValue(#documentId, node, journalTable.JournalNum);
        }
        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerJournal</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean postLedgerJournal(LedgerJournalTable _journalTable, boolean _validate = false)
    {
        Ledgerjournalcheckpost  journalPost;
        boolean                 ret = true;

        if(_validate)
        {
            journalPost = LedgerJournalCheckPost::newLedgerJournalTable(_journalTable,NoYes::No);
            journalPost.run();

            postErrorMsg = journalPost.tableErrorLog();
            ret          = !postErrorMsg;
        }

        if(ret)
        {
            journalPost = LedgerJournalCheckPost::newLedgerJournalTable(_journalTable,NoYes::Yes);
            journalPost.run();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournal</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected LedgerJournalTable createInvoiceJournal(CustInvoiceJour _custInvoiceJour)
    {
        LedgerJournalTable journalTable;
        LedgerJournalName  ledgerJournalName;        

        journalTable.initValue();

        if(webShopsTable.CustPaymJournalName)
        {
            journalTable.initFromLedgerJournalName(webShopsTable.CustPaymJournalName);
            select firstOnly ledgerJournalName where ledgerJournalName.JournalName == webShopsTable.CustPaymJournalName;
        }
        else
        {
            select firstOnly ledgerJournalName where ledgerJournalName.JournalType == LedgerJournalType::CustPayment;

            if(!ledgerJournalName)
            {
                throw error("@SCL325");
            }
            journalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);
        }                    
        
        journalTable.JournalNum       = JournalTableData::newTable(journalTable).nextJournalId();
        journalTable.DefaultDimension = _custInvoiceJour.DefaultDimension;
        journalTable.Name             = strFmt("@SCL633", _custInvoiceJour.InvoiceId, paymentTransactionId);

        if(ledgerJournalName.ApproveActive)
        {
            journalTable.Approver = HcmWorker::userId2Worker(curUserId());
        }       
        journalTable.insert();

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceTrans</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createInvoiceTrans(Integer _lineNum, LedgerJournalTable _journalTable, CustInvoiceJour _custInvoiceJour)
    {
        LedgerJournalTrans  journalTrans;
        LedgerJournalName   ledgerJournalName;
        ExchangeRateHelper  helper;
        CustPaymModeTable   custPaymModeTable;

        journalTrans.clear();
        journalTrans.initValue();
        journalTrans.LineNum                = _lineNum+1;
        journalTrans.AccountType            = LedgerJournalACType::Cust;
        journalTrans.JournalNum             = _journalTable.JournalNum;
        journalTrans.Voucher                = NumberSeq::newGetVoucherFromId(_journalTable.NumberSequenceTable).voucher();
        journalTrans.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        journalTrans.CurrencyCode           = _custInvoiceJour.CurrencyCode;

        helper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curExt()).RecId), journalTrans.CurrencyCode, journalTrans.TransDate);
            
        journalTrans.ExchRate               = helper.getExchangeRate1();
        journalTrans.ExchRateSecond         = helper.getExchangeRate2();
        journalTrans.Triangulation          = journalTrans.ExchRateSecond != 0 ? true : false;

        journalTrans.LedgerDimension        = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumberEnumModule(_custInvoiceJour.InvoiceAccount, enum2int(LedgerJournalACType::Cust), enumNum(LedgerJournalACType), ModuleInventCustVend::Cust);
        journalTrans.MarkedInvoice          = documentId;
        journalTrans.MarkedInvoiceRecId     = CustTransOpen::getFirstDueRecIdByInvoice(documentId);
        journalTrans.MarkedInvoiceCompany   = curext();

        if(documentType == #creditNote)
        {            
            journalTrans.AmountCurDebit     = subTotal;
        }
        else
        {
            journalTrans.AmountCurCredit    = subTotal;
        }
        

        ledgerJournalName = LedgerJournalName::find(_journalTable.JournalName);
    
        if(ledgerJournalName.FixedOffsetAccount)
        {
            journalTrans.OffsetLedgerDimension  = ledgerJournalName.OffsetLedgerDimension;
            journalTrans.OffsetAccountType      = ledgerJournalName.OffsetAccountType;
            journalTrans.OffsetCompany          = curext();
        }
        else if(!webShopsTable.OffsetLedgerDimension)
        {
            custPaymModeTable = CustPaymModeTable::find(_custInvoiceJour.paymMode());
            
            journalTrans.OffsetAccountType      = custPaymModeTable.AccountType;
            journalTrans.OffsetLedgerDimension  = custPaymModeTable.PaymentLedgerDimension;
            journalTrans.OffsetCompany          = curext();
        }
        else
        {
            journalTrans.OffsetLedgerDimension  = webShopsTable.OffsetLedgerDimension;
            journalTrans.OffsetAccountType      = webShopsTable.OffsetLedgerAccountType;
            journalTrans.OffsetCompany          = webShopsTable.OffsetLedgerCompany;
        }

        if(journalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            journalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerJournalName.FixedOffsetAccount ? ledgerJournalName.OffsetLedgerDimension : webShopsTable.OffsetLedgerDimension, _custInvoiceJour.DefaultDimension);
        }

        journalTrans.OffsetTxt              = webShopsTable.OffsetLedgerTxt;
        journalTrans.PaymMode               = _custInvoiceJour.paymMode();
        journalTrans.TransactionType        = LedgerTransType::Payment;
        journalTrans.TaxGroup               = _custInvoiceJour.TaxGroup;
        journalTrans.SettleVoucher          = SettlementType::SelectedTransact;
        journalTrans.PostingProfile         = CustParameters::find().PostingProfile;
        journalTrans.Payment                = _custInvoiceJour.Payment;
        journalTrans.DefaultDimension       = _custInvoiceJour.DefaultDimension;
        journalTrans.OffsetDefaultDimension = _custInvoiceJour.DefaultDimension;
        journalTrans.PaymReference          = this.findPaymReference(_custInvoiceJour);

        if(ledgerJournalName.ApproveActive)
        {
            journalTrans.Approved           = NoYes::Yes;
        }
        journalTrans.PaymentStatus          = CustPaymModeTable::find(_custInvoiceJour.paymMode()).PaymStatus;
        journalTrans.insert();

        LedgerJournalEngine_CustPayment::updateMarkedInvoiceSpecTrans(journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOrderPrepayments</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void postOrderPrepayments(SalesTable _salesTable, LedgerJournalTable _ledgerJournalTable)
    {        
        CustTrans               custTrans;
        CustTransOpen           custTransOpen;
        SpecTrans               specTrans;        
        boolean                 ret;
        
        if(this.postLedgerJournal(_ledgerJournalTable, true))
        {
            select firstOnly custTransOpen
                exists join custTrans
                where custTransOpen.RefRecId  == custTrans.RecId &&
                      custTrans.AccountNum    == _salesTable.InvoiceAccount &&
                      custTrans.PaymReference == this.findPaymReference();

            if(custTransOpen) //settle transactions
            {
                _salesTable.SettleVoucher = SettlementType::SelectedTransact;
                _salesTable.doUpdate();

                specTrans.SpecRecId     = _salesTable.RecId;
                specTrans.RefRecId      = custTransOpen.RecId;
                specTrans.RefTableId    = tablenum(CustTransOpen);
                specTrans.SpecTableId   = _salesTable.TableId;
                specTrans.Balance01     = custTransOpen.AmountCur;                
                specTrans.Code          = _salesTable.CurrencyCode;
                specTrans.SpecCompany   = _salesTable.dataAreaId;
                specTrans.RefCompany    = custTransOpen.dataAreaId;
                specTrans.insert();
                ret = true;
            }
        }

        if(!ret)
        {
            this.errorHandler("@SCL461" + postErrorMsg, #errorCode2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PlacePersistedOrder</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [Replaceable]
    public XmlDocument PlacePersistedOrder(XmlDocument _request)
    {
        boolean ret;        

        this.createHeaderXml();

        this.getParameters(_request);

        this.getOrderParameters();

        documentId = originalOrderId;       

        ttsbegin;

        if(syncOrderType == #quote || accountType == #contact)
        {
            ret = originalOrderId ? this.updateOrderTable(false, syncOrderType, true) : this.createQuotationTable();

            if(ret && accountType != #contact && documentType != syncOrderType)
            {
                salesTable.SalesId = this.convertQuote2Order(salesQuotationTable).SalesId;
                ret                = salesTable.SalesId != '';
            }
        }
        else
        {
            ret = originalOrderId ? this.updateOrderTable(false, syncOrderType, true) : this.createSalesTable();
        }

        if(ret)
        {
            resultNode.appendChild(resultXml.createElement(#documentId)).innerText(salesTable.SalesId ? salesTable.SalesId : salesQuotationTable.QuotationId);
            resultNode.appendChild(resultXml.createElement(#documentType)).innerText(salesTable.SalesId ? #order : #quote);
            ttscommit;
        }
        else
        {
            ttsAbort;
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PromoteQuote</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument PromoteQuote(XmlDocument _request)
    {
        boolean noRestrictions = true;
        
        this.createHeaderXml();
        this.getParameters(_request);

        ttsBegin;
        salesQuotationTable                  = SalesQuotationTable::find(documentId, true);
        salesQuotationTable.SC_IsPromotable  = NoYes::No;
        salesQuotationTable.SC_PaymentStatus = paymentStatus ? paymentStatus : #unpaid;
        salesQuotationTable.update();

        if(documentType == #order && salesQuotationTable.CustAccount)
        {
            salesTable.SalesId = this.convertQuote2Order(salesQuotationTable).SalesId;
            noRestrictions     = salesTable.SalesId != '';
        }
        
        if(noRestrictions)
        {
            if(salesTable)
            {
                Docu::copy(salesQuotationTable, salesTable);
            }

            resultNode.appendChild(resultXml.createElement(#documentId)).innerText(salesTable.SalesId ? salesTable.SalesId : salesQuotationTable.QuotationId);
            resultNode.appendChild(resultXml.createElement(#documentType)).innerText(salesTable.SalesId ? #order : #quote);
            ttsCommit;
        }
        else
        {
            ttsAbort;
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTableFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun salesQuotationTableFilter(boolean _searchSalesPerson = false, boolean _promotableQuote = false)
    {
        Query                query;
        QueryBuildDataSource queryBuildDataSource;
        QueryRun             queryRun;        

        query = new Query();

        //main quote filters
        queryBuildDataSource = this.addSalesQuotationTableMainFilter(query, _searchSalesPerson, _promotableQuote);

        //extra fields filters
        if(!_searchSalesPerson)
        {
            queryBuildDataSource = this.addFilters2Query(queryBuildDataSource, tablenum(SalesQuotationTable));
        }

        //sales person filter
        queryBuildDataSource = this.addSalesQuotationTablePersonFilter(queryBuildDataSource, _searchSalesPerson);       

        if(!_searchSalesPerson || (salespersonid && _searchSalesPerson))
        {
            queryRun = new QueryRun(query);
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesQuotationTableMainFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addSalesQuotationTableMainFilter(Query _query, boolean _searchSalesPerson = false, boolean _promotableQuote = false)
    {
        QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceContact, queryBuildDataSourceDirParty;

        if(!_searchSalesPerson || (salesPersonId && _searchSalesPerson))
        {
            queryBuildDataSource = _query.addDataSource(tablenum(SalesQuotationTable));

            queryBuildDataSource.addSelectionField(fieldNum(SalesQuotationTable, QuotationId));
            queryBuildDataSource.addSelectionField(fieldNum(SalesQuotationTable, createdDateTime));
            queryBuildDataSource.addSelectionField(fieldNum(SalesQuotationTable, SC_BillToName));
            queryBuildDataSource.addSelectionField(fieldNum(SalesQuotationTable, DeliveryName));

            switch(sortField)
            {
                case #orderDate:
                    queryBuildDataSource.addOrderByField(fieldNum(SalesQuotationTable, createdDateTime), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                    break;
                case #billToName:
                    queryBuildDataSource.addOrderByField(fieldNum(SalesQuotationTable, SC_BillToName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                    break;
                case #shipToName:
                    queryBuildDataSource.addOrderByField(fieldNum(SalesQuotationTable, DeliveryName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                    break;
                default:
                    queryBuildDataSource.addOrderByField(fieldNum(SalesQuotationTable, QuotationId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                    break;
            }

            //remove Big Basket orders
            queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, SC_isPersistedBasket)).value(QueryValue(NoYes::No));

            //order type
            queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationType)).value(QueryValue(QuotationType::Sales));
            
            //dates
            if(startdate || enddate)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, createdDateTime)).value(SysQuery::range(startdate, enddate));
            }            

            //orderId
            if(originalOrderId)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationId)).value(SysQuery::valueLike(originalOrderId));
            }

            //customer
            if(accountId)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, CustAccount)).value(queryValue(accountId));
            }

            //Payment Status
            if(_promotableQuote)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, SC_PaymentStatus)).value(SysQuery::valueEmptyString());
            }
            else if(checkPaymentStatus)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, SC_PaymentStatus)).value(SysQuery::valueNot(#statusNew)+','+SysQuery::valueNot(#cancelled)+','+SysQuery::valueNot(''));
            }

            //documentId
            if(documentId)
            {
                if(returnMultipleDocuments)
                {
                    queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationId)).value(SysQuery::valueLike(documentId));
                }
                else
                {
                    queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationId)).value(queryValue(documentId));
                }
            }

            //order status
            switch(status)
            {
                case #cancelled:
                    queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationStatus)).value(strFmt('%1,%2',queryValue(SalesQuotationStatus::Cancelled),queryValue(SalesQuotationStatus::Lost)));
                    break;

                case #open:
                    queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationStatus)).value(strFmt('%1,%2',queryValue(SalesQuotationStatus::Created),queryValue(SalesQuotationStatus::Sent)));
                    break;

                case #released:
                    queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationStatus)).value(strFmt('!%1,!%2, !%3, !%4, !%5',queryValue(SalesQuotationStatus::Confirmed),
                                                                                                                                    queryValue(SalesQuotationStatus::Created),
                                                                                                                                    queryValue(SalesQuotationStatus::Sent),
                                                                                                                                    queryValue(SalesQuotationStatus::Cancelled),
                                                                                                                                    queryValue(SalesQuotationStatus::Lost)));
                    break;
                default:
                    queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, QuotationStatus)).value(SysQuery::valueNot(SalesQuotationStatus::Confirmed));
            }

            //referenceNo
            if(referenceNo)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, CustomerRef)).value(SysQuery::valueLike(referenceNo));
            }

            //shopAccountEmail
            if(shopAccountEmail)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, SC_ShopAccountCode)).value(SysQuery::valueLike(shopAccountEmail));
            }

            //contactName
            if(contactName && (salesPersonId || accountId))
            {
                queryBuildDataSourceContact = queryBuildDataSource.addDataSource(tablenum(ContactPerson), tableStr(ContactPerson));
                queryBuildDataSourceContact.addLink(fieldnum(SalesQuotationTable, ContactPersonId), fieldnum(ContactPerson, ContactPersonId));
                queryBuildDataSourceContact.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceDirParty = queryBuildDataSourceContact.addDataSource(tablenum(DirPartyTable), tableStr(DirPartyTable));
                queryBuildDataSourceDirParty.addLink(fieldnum(ContactPerson, Party), fieldnum(DirPartyTable, RecId));
                queryBuildDataSourceDirParty.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceDirParty.addRange(fieldnum(DirPartyTable, Name)).value(SysQuery::valueLike(contactName));
            }

            //Bill To Name
            if(billToName)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, SC_BillToName)).value(SysQuery::valueLike(billToName));
            }

            //Bill To Name
            if(shipToName)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, DeliveryName)).value(SysQuery::valueLike(shipToName));
            }

            //Comment
            if(comment)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, SC_Comments)).value(SysQuery::valueLike(comment));
            }

            //Order date
            if(startOrderDate || endOrderDate)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, createdDateTime)).value(SysQuery::range(startOrderDate, endOrderDate));
            }

            //Due date
            if(startDueDate || endDueDate)
            {
                queryBuildDataSource.addRange(fieldnum(SalesQuotationTable, FixedDueDate)).value(SysQuery::range(startDueDate, endDueDate));
            }
        }

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesQuotationTablePersonFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addSalesQuotationTablePersonFilter(QueryBuildDataSource _queryBuildDataSource, boolean _searchSalesPerson = false)
    {
        QueryBuildDataSource queryBuildDataSource = _queryBuildDataSource;

        hcmWorker = salesPersonId ? HcmWorker::findByPersonnelNumber(salesPersonId) : null;

        if(salesPersonId && !_searchSalesPerson)
        {
            queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(CustTable), tableStr(CustTable));
            queryBuildDataSource.addLink(fieldnum(SalesQuotationTable, CustAccount), fieldnum(CustTable, AccountNum));
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            
            if((select firstOnly RecId from CommissionSalesRep).RecId) //use query only if sales reps table not empty
            {
                queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(CommissionSalesRep), tableStr(CommissionSalesRep));
                queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource.addRange(fieldnum(CommissionSalesRep, DataAreaId)).value(strFmt(#custSalesRepRange,
                                          hcmWorker ? any2int64(hcmWorker.Person) : -1,
                                          hcmWorker ? any2int64(hcmWorker.RecId) : -1));
            }
            else
            {
                queryBuildDataSource.addRange(fieldNum(CustTable, MainContactWorker)).value(queryValue(hcmWorker.RecId));
            }
        }

        if(salesPersonId && _searchSalesPerson)
        {
            queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(smmBusRelTable));
            queryBuildDataSource.relations(true);
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSource.addRange(fieldnum(smmBusRelTable, MainContactWorker)).value(queryValue(hcmWorker.RecId));
        }

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun salesTableFilter(boolean _isReturn = false)
    {
        Query                query;
        QueryBuildDataSource queryBuildDataSource;
        QueryRun             queryRun;        

        query = new Query();
        
        //main sales table filters
        queryBuildDataSource = this.addSalesTableMainFilters(query, _isReturn);

        //extra fields filters
        queryBuildDataSource = this.addFilters2Query(queryBuildDataSource, tablenum(SalesTable));

        //sales person
        queryBuildDataSource = this.addSalesTablePersonFilter(queryBuildDataSource);        

        queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesTableMainFilters</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addSalesTableMainFilters(Query _query, boolean _isReturn = false)
    {
        QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceContact, queryBuildDataSourceDirParty;

        queryBuildDataSource = _query.addDataSource(tablenum(SalesTable));

        queryBuildDataSource.addSelectionField(fieldNum(SalesTable, SalesId));
        queryBuildDataSource.addSelectionField(fieldNum(SalesTable, ReturnItemNum));
        queryBuildDataSource.addSelectionField(fieldNum(SalesTable, createdDateTime));
        queryBuildDataSource.addSelectionField(fieldNum(SalesTable, SC_BillToName));
        queryBuildDataSource.addSelectionField(fieldNum(SalesTable, DeliveryName));

        switch(sortField)
        {
            case #orderDate:
                queryBuildDataSource.addOrderByField(fieldNum(SalesTable, createdDateTime), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                break;
            case #billToName:
                queryBuildDataSource.addOrderByField(fieldNum(SalesTable, SC_BillToName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                break;
            case #shipToName:
                queryBuildDataSource.addOrderByField(fieldNum(SalesTable, DeliveryName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                break;
            default:
                queryBuildDataSource.addOrderByField(fieldNum(SalesTable, SalesId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                break;
        }

        //remove Big Basket orders
        queryBuildDataSource.addRange(fieldnum(SalesTable, SC_isPersistedBasket)).value(QueryValue(NoYes::No));

        //order type
        if(_isReturn)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, Salestype)).value(QueryValue(SalesType::ReturnItem));
        }
        else
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, Salestype)).value(QueryValue(SalesType::Sales) + ',' + QueryValue(SalesType::Journal)  + ',' + SysQuery::valueNot(SalesType::ReturnItem));
        }


        //dates
        if(startdate || enddate)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, createdDateTime)).value(SysQuery::range(startdate, enddate));
        }

        //SalesStatus
        if(!webShopsTable.ShowInvoicedOrders)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, SalesStatus)).value(SysQuery::valueNot(SalesStatus::Invoiced));
        }

        //orderId
        if(originalOrderId)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, SalesId)).value(SysQuery::valueLike(originalOrderId));
        }

        //customer
        if(accountId)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, CustAccount)).value(queryValue(accountId));
        }

        //Payment Status
        if(checkPaymentStatus)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, SC_PaymentStatus)).value(SysQuery::valueNot(#statusNew)+','+SysQuery::valueNot(#cancelled));
        }

        //documentId
        if(documentId)
        {
            if(returnMultipleDocuments)
            {
                queryBuildDataSource.addRange(fieldnum(SalesTable, SalesId)).value(SysQuery::valueLike(documentId));
            }
            else
            {
                if(_isReturn)
                {
                    queryBuildDataSource.addRange(fieldnum(SalesTable, ReturnItemNum)).value(queryValue(documentId));
                }
                else
                {
                    queryBuildDataSource.addRange(fieldnum(SalesTable, SalesId)).value(queryValue(documentId));
                }
            }
        }

        //order status
        switch(status)
        {
            case #cancelled:
                queryBuildDataSource.addRange(fieldnum(SalesTable, DataAreaId)).value(strFmt('((%1 == %2) || (%3 == %4) || (%5 == %6))',
                                                                                    fieldStr(SalesTable, ReturnStatus), enum2int(ReturnStatusHeader::Canceled),
                                                                                    fieldStr(SalesTable, SalesStatus), enum2int(SalesStatus::Canceled),
                                                                                    fieldStr(SalesTable, DocumentStatus), enum2int(DocumentStatus::Cancelled)));
                break;

            case #open:
                queryBuildDataSource.addRange(fieldnum(SalesTable, ReturnStatus)).value(strFmt('%1,%2', QueryValue(ReturnStatusHeader::None), QueryValue(ReturnStatusHeader::Created)));
                queryBuildDataSource.addRange(fieldnum(SalesTable, SalesStatus)).value(strFmt('%1,%2', QueryValue(SalesStatus::None), QueryValue(SalesStatus::Backorder)));
                queryBuildDataSource.addRange(fieldnum(SalesTable, DocumentStatus)).value(strFmt('%1,%2,%3,%4', QueryValue(DocumentStatus::None), QueryValue(DocumentStatus::Quotation),
                                                                                                            QueryValue(DocumentStatus::PurchaseOrder), QueryValue(DocumentStatus::Confirmation)));
                queryBuildDataSource.addRange(fieldnum(SalesTable, ReleaseStatus)).value(QueryValue(WHSReleaseStatus::Open));
                break;

            case #released:
                queryBuildDataSource.addRange(fieldnum(SalesTable, DataAreaId)).value(strFmt('((%1 > %2) || (%3 > %4) || (%5 > %6) || (%7 != %8))',
                                                                                    fieldStr(SalesTable, ReturnStatus), enum2int(ReturnStatusHeader::Created),
                                                                                    fieldStr(SalesTable, SalesStatus), enum2int(SalesStatus::Backorder),
                                                                                    fieldStr(SalesTable, DocumentStatus), enum2int(DocumentStatus::Confirmation),
                                                                                    fieldStr(SalesTable, ReleaseStatus), enum2int(WHSReleaseStatus::Open)));
                break;
        }

        //referenceNo
        if(referenceNo)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, CustomerRef)).value(SysQuery::valueLike(referenceNo));
        }

        //shopAccountEmail
        if(shopAccountEmail)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, SC_ShopAccountCode)).value(SysQuery::valueLike(shopAccountEmail));
        }

        //contactName
        if(contactName && (salesPersonId || accountId))
        {
            queryBuildDataSourceContact = queryBuildDataSource.addDataSource(tablenum(ContactPerson), tableStr(ContactPerson));
            queryBuildDataSourceContact.addLink(fieldnum(SalesTable, ContactPersonId), fieldnum(ContactPerson, ContactPersonId));
            queryBuildDataSourceContact.joinMode(JoinMode::ExistsJoin);

            queryBuildDataSourceDirParty = queryBuildDataSourceContact.addDataSource(tablenum(DirPartyTable), tableStr(DirPartyTable));
            queryBuildDataSourceDirParty.addLink(fieldnum(ContactPerson, Party), fieldnum(DirPartyTable, RecId));
            queryBuildDataSourceDirParty.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSourceDirParty.addRange(fieldnum(DirPartyTable, Name)).value(SysQuery::valueLike(contactName));
        }

        //Shipping status
        if(shippingStatus)
        {
            if(shippingStatus == #pending)
            {
                queryBuildDataSource.addRange(fieldnum(SalesTable, SalesStatus)).value(SysQuery::value(SalesStatus::Backorder));
            }

            if(shippingStatus == #complete)
            {
                queryBuildDataSource.addRange(fieldnum(SalesTable, SalesStatus)).value(SysQuery::valueNot(SalesStatus::Backorder));
            }
        }

        //Bill To Name
        if(billToName)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, SC_BillToName)).value(SysQuery::valueLike(billToName));
        }

        //Bill To Name
        if(shipToName)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, DeliveryName)).value(SysQuery::valueLike(shipToName));
        }

        //Comment
        if(comment)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, SC_Comments)).value(SysQuery::valueLike(comment));
        }

        //Order date
        if(startOrderDate || endOrderDate)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, createdDateTime)).value(SysQuery::range(startOrderDate, endOrderDate));
        }

        //Due date
        if(startDueDate || endDueDate)
        {
            queryBuildDataSource.addRange(fieldnum(SalesTable, FixedDueDate)).value(SysQuery::range(startDueDate, endDueDate));
        }

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesTablePersonFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addSalesTablePersonFilter(QueryBuildDataSource _queryBuildDataSource)
    {
        QueryBuildDataSource queryBuildDataSource = _queryBuildDataSource;

        hcmWorker = salesPersonId ? HcmWorker::findByPersonnelNumber(salesPersonId) : null;

        if(salesPersonId)
        {
            queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(CustTable), tableStr(CustTable));
            queryBuildDataSource.addLink(fieldnum(SalesTable, CustAccount), fieldnum(CustTable, AccountNum));
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            
            if((select firstOnly RecId from CommissionSalesRep).RecId) //use query only if sales reps table not empty
            {
                queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(CommissionSalesRep), tableStr(CommissionSalesRep));
                queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource.addRange(fieldnum(CommissionSalesRep, DataAreaId)).value(strFmt(#custSalesRepRange,
                                          hcmWorker ? any2int64(hcmWorker.Person) : -1,
                                          hcmWorker ? any2int64(hcmWorker.RecId) : -1));
            }
            else
            {
                queryBuildDataSource.addRange(fieldNum(CustTable, MainContactWorker)).value(queryValue(hcmWorker.RecId));
            }
        }

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableHistoryFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun salesTableHistoryFilter()
    {
        Query                query;
        QueryBuildDataSource queryBuildDataSource;
        QueryRun             queryRun;        

        query = new Query();

        switch(documentType)
        {
            case #invoice, #creditNote:
                queryBuildDataSource = this.addMainHistoryInvoiceFilter(query);

                //extra fields filters
                queryBuildDataSource = this.addFilters2Query(queryBuildDataSource, tablenum(CustInvoiceJour));
                break;

            case #shipment, #returnReceipt:
                queryBuildDataSource = this.addMainHistoryDeliveryFilter(query);

                //extra fields filters
                queryBuildDataSource = this.addFilters2Query(queryBuildDataSource, tablenum(CustPackingslipJour));
                break;

            default:
                throw error("@SCL175");
        }

        //sorting
        queryBuildDataSource = this.addMainHistorySorting(queryBuildDataSource);

        queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainHistoryInvoiceFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addMainHistoryInvoiceFilter(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceSP, queryBuildDataSourceSalesTable, queryBuildDataSourceCustTrans, queryBuildDataSourceContact, queryBuildDataSourceDirParty;

        hcmWorker            = salesPersonId ? HcmWorker::findByPersonnelNumber(salesPersonId) : null;
        queryBuildDataSource = _query.addDataSource(tablenum(CustInvoiceJour));        

        if(documentType == #invoice)
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, InvoiceAmount)).value('0..');
        }
        else
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, InvoiceAmount)).value('<0');
        }

        if(originalOrderId)
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, SalesId)).value(SysQuery::valueLike(originalOrderId));
        }

        if(accountId)
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, OrderAccount)).value(queryValue(accountId));
        }

        if(documentId)
        {
            if(returnMultipleDocuments)
            {
                queryBuildDataSource.addRange(fieldnum(CustinvoiceJour, InvoiceId)).value(SysQuery::valueLike(documentId));
            }
            else
            {
                queryBuildDataSource.addRange(fieldnum(CustinvoiceJour, InvoiceId)).value(queryValue(documentId));
            }
        }

        if(salesPersonId)
        {
            queryBuildDataSourceSP = queryBuildDataSource.addDataSource(tablenum(CustTable), tableStr(CustTable));
            queryBuildDataSourceSP.addLink(fieldnum(CustinvoiceJour, OrderAccount), fieldnum(CustTable, AccountNum));
            queryBuildDataSourceSP.joinMode(JoinMode::ExistsJoin);
           
            if((select firstOnly RecId from CommissionSalesRep).RecId) //use query only if sales reps table not empty
            {
                queryBuildDataSourceSP = queryBuildDataSourceSP.addDataSource(tablenum(CommissionSalesRep), tableStr(CommissionSalesRep));
                queryBuildDataSourceSP.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceSP.addRange(fieldnum(CommissionSalesRep, DataAreaId)).value(strFmt(#custSalesRepRange,
                                            hcmWorker ? any2int64(hcmWorker.Person) : -1,
                                            hcmWorker ? any2int64(hcmWorker.RecId) : -1));
            }
            else
            {
                queryBuildDataSourceSP.addRange(fieldNum(CustTable, MainContactWorker)).value(queryValue(hcmWorker.RecId));
            }
        }

        //referenceNo
        if(referenceNo)
        {
            queryBuildDataSource.addRange(fieldnum(CustinvoiceJour, CustomerRef)).value(SysQuery::valueLike(referenceNo));
        }

        //shopAccountEmail
        if(shopAccountEmail)
        {
            queryBuildDataSourceSalesTable = this.buildSalesFiltersQuery(_query, tablenum(CustInvoiceJour));
            queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, SC_ShopAccountCode)).value(SysQuery::valueLike(shopAccountEmail));
        }

        //contactName
        if(contactName && (salesPersonId || accountId))
        {
            queryBuildDataSourceContact = queryBuildDataSource.addDataSource(tablenum(ContactPerson), tableStr(ContactPerson));
            queryBuildDataSourceContact.addLink(fieldnum(CustInvoiceJour, ContactPersonId), fieldnum(ContactPerson, ContactPersonId));
            queryBuildDataSourceContact.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSourceDirParty = queryBuildDataSourceContact.addDataSource(tablenum(DirPartyTable), tableStr(DirPartyTable));
            queryBuildDataSourceDirParty.addLink(fieldnum(ContactPerson, Party), fieldnum(DirPartyTable, RecId));
            queryBuildDataSourceDirParty.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSourceDirParty.addRange(fieldnum(DirPartyTable, Name)).value(SysQuery::valueLike(contactName));
        }

        //Shipping status
        if(shippingStatus)
        {
            queryBuildDataSourceSalesTable = this.buildSalesFiltersQuery(_query, tablenum(CustInvoiceJour));

            if(shippingStatus == #pending)
            {
                queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, SalesStatus)).value(SysQuery::value(SalesStatus::Backorder));
            }
            else if(shippingStatus == #complete)
            {
                queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, SalesStatus)).value(SysQuery::valueNot(SalesStatus::Backorder));
            }
        }

        //SC_BillToName
        if(billToName)
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, SC_BillToName)).value(SysQuery::valueLike(billToName));
        }

        //shipToName
        if(shipToName)
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, DeliveryName)).value(SysQuery::valueLike(shipToName));
        }

        //commentLine
        if(comment)
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, SC_Comments)).value(SysQuery::valueLike(comment));
        }

        //Invoice date
        if(startdate || enddate)
        {
            queryBuildDataSource.addRange(fieldnum(CustInvoiceJour, InvoiceDate)).value(SysQuery::range(startdate, enddate));
        }

        //Order date
        if(startOrderDate || endOrderDate)
        {
            queryBuildDataSourceSalesTable = this.buildSalesFiltersQuery(_query, tablenum(CustInvoiceJour));
            queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, createdDateTime)).value(SysQuery::range(startOrderDate, endOrderDate));
        }

        //Due date
        if(startDueDate || endDueDate)
        {
            queryBuildDataSourceCustTrans = queryBuildDataSource.addDataSource(tablenum(CustTrans), tableStr(CustTrans));
            queryBuildDataSourceCustTrans.relations(true);
            queryBuildDataSourceCustTrans.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSourceCustTrans.addRange(fieldnum(CustTrans, DueDate)).value(SysQuery::range(startDueDate, endDueDate));
        }

 
    
        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainHistoryDeliveryFilter</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addMainHistoryDeliveryFilter(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource, queryBuildDataSourceSP, queryBuildDataSourceSalesTable, queryBuildDataSourceContact, queryBuildDataSourceDirParty;
    
        hcmWorker            = salesPersonId ? HcmWorker::findByPersonnelNumber(salesPersonId) : null;
        queryBuildDataSource = _query.addDataSource(tablenum(CustPackingslipJour));
        
        if(documentType == #shipment)
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, SalesType)).value(QueryValue(SalesType::Sales));
        }
        else
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, SalesType)).value(QueryValue(SalesType::ReturnItem));
        }

        if(originalOrderId)
        {            
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, SalesId)).value(SysQuery::valueLike(originalOrderId)); 
        }

        if(accountId)
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, OrderAccount)).value(queryValue(accountId));
        }

        if(documentId)
        {
            if(returnMultipleDocuments)
            {
                queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, PackingSlipId)).value(SysQuery::valueLike(documentId));
            }
            else
            {
                queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, PackingSlipId)).value(queryValue(documentId));
            }
        }

        if(salesPersonId)
        {
            queryBuildDataSourceSP = queryBuildDataSource.addDataSource(tablenum(CustTable), tableStr(CustTable));
            queryBuildDataSourceSP.addLink(fieldnum(CustPackingslipJour, OrderAccount), fieldnum(CustTable, AccountNum));
            queryBuildDataSourceSP.joinMode(JoinMode::ExistsJoin);

            if((select firstOnly RecId from CommissionSalesRep).RecId) //use query only if sales reps table not empty
            {
                queryBuildDataSourceSP = queryBuildDataSourceSP.addDataSource(tablenum(CommissionSalesRep), tableStr(CommissionSalesRep));
                queryBuildDataSourceSP.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceSP.addRange(fieldnum(CommissionSalesRep, DataAreaId)).value(strFmt(#custSalesRepRange,
                                            hcmWorker ? any2int64(hcmWorker.Person) : -1,
                                            hcmWorker ? any2int64(hcmWorker.RecId) : -1));
            }
            else
            {
                queryBuildDataSourceSP.addRange(fieldNum(CustTable, MainContactWorker)).value(queryValue(hcmWorker.RecId));
            }
        }

        //referenceNo
        if(referenceNo)
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, CustomerRef)).value(SysQuery::valueLike(referenceNo));
        }

        //shopAccountEmail
        if(shopAccountEmail)
        {
            queryBuildDataSourceSalesTable = this.buildSalesFiltersQuery(_query, tablenum(CustPackingslipJour));
            queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, SC_ShopAccountCode)).value(SysQuery::valueLike(shopAccountEmail));
        }

        //contactName
        if(contactName && (salesPersonId || accountId))
        {
            queryBuildDataSourceSalesTable = this.buildSalesFiltersQuery(_query, tablenum(CustPackingslipJour));

            queryBuildDataSourceContact = queryBuildDataSourceSalesTable.addDataSource(tablenum(ContactPerson), tableStr(ContactPerson));
            queryBuildDataSourceContact.addLink(fieldnum(SalesTable, ContactPersonId), fieldnum(ContactPerson, ContactPersonId));
            queryBuildDataSourceContact.joinMode(JoinMode::ExistsJoin);

            queryBuildDataSourceDirParty = queryBuildDataSourceContact.addDataSource(tablenum(DirPartyTable), tableStr(DirPartyTable));
            queryBuildDataSourceDirParty.addLink(fieldnum(ContactPerson, Party), fieldnum(DirPartyTable, RecId));
            queryBuildDataSourceDirParty.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSourceDirParty.addRange(fieldnum(DirPartyTable, Name)).value(SysQuery::valueLike(contactName));
        }

        //Shipping status
        if(shippingStatus)
        {
            queryBuildDataSourceSalesTable = this.buildSalesFiltersQuery(_query, tablenum(CustPackingslipJour));

            if(shippingStatus == #pending)
            {
                queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, SalesStatus)).value(SysQuery::value(SalesStatus::Backorder));
            }
            else if(shippingStatus == #complete)
            {
                queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, SalesStatus)).value(SysQuery::valueNot(SalesStatus::Backorder));
            }
        }

        //SC_BillToName
        if(billToName)
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, SC_BillToName)).value(SysQuery::valueLike(billToName));
        }

        //shipToName
        if(shipToName)
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, DeliveryName)).value(SysQuery::valueLike(shipToName));
        }

        //commentLine
        if(comment)
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, SC_Comments)).value(SysQuery::valueLike(comment));
        }

        //Shipping date
        if(startdate || enddate)
        {
            queryBuildDataSource.addRange(fieldnum(CustPackingslipJour, DeliveryDate)).value(SysQuery::range(startdate, enddate));
        }

        //Order date
        if(startOrderDate || endOrderDate)
        {
            queryBuildDataSourceSalesTable = this.buildSalesFiltersQuery(_query, tablenum(CustPackingslipJour));
            queryBuildDataSourceSalesTable.addRange(fieldnum(SalesTable, createdDateTime)).value(SysQuery::range(startOrderDate, endOrderDate));
        }
 
        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMainHistorySorting</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addMainHistorySorting(QueryBuildDataSource _queryBuildDataSource)
    {
        QueryBuildDataSource queryBuildDataSource = _queryBuildDataSource;

        switch(sortField)
        {
            case #orderDate:
                if(documentType == #shipment || documentType == #returnReceipt)
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustPackingslipJour, DeliveryDate), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                    queryBuildDataSource.addOrderByField(fieldnum(CustPackingslipJour, RecId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                else
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustInvoiceJour, InvoiceDate), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                    queryBuildDataSource.addOrderByField(fieldnum(CustInvoiceJour, RecId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                break;
            case #billToName:
                if(documentType == #shipment || documentType == #returnReceipt)
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustPackingslipJour, SC_BillToName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                else
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustInvoiceJour, SC_BillToName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                break;
            case #shipToName:
                if(documentType == #shipment || documentType == #returnReceipt)
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustPackingslipJour, DeliveryName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                else
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustInvoiceJour, DeliveryName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                break;
            case #documentId:
                if(documentType == #shipment || documentType == #returnReceipt)
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustPackingslipJour, PackingSlipId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                else
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustInvoiceJour, InvoiceId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                break;
            default:
                if(documentType == #shipment || documentType == #returnReceipt)
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustPackingslipJour, SalesId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                else
                {
                    queryBuildDataSource.addOrderByField(fieldnum(CustInvoiceJour, SalesId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
                }
                break;
        }

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveOrder</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument SaveOrder(XmlDocument _request)
    {
        boolean ret;                

        this.createHeaderXml();

        this.getParameters(_request);

        this.getOrderParameters();

        if(this.checkOrderDuplicates()) //check if order was not imported from mobile before
        {
            return resultXml;
        }

        ttsbegin;
        if(documentType == #quote || documentType == #promotableQuote  || accountType == #contact)
        {
            ret = documentId ? this.updateOrderTable() : this.createQuotationTable();
        }
        else
        {
            ret = documentId ? this.updateOrderTable() : this.createSalesTable();
        }

        if(ret && salesLinesList && salesLinesList.length())
        {
            if(documentId)
            {
                this.updateOrderLines();
            }
            else
            {
                this.getOrderLinesParams(false);
            }

            if(salesTable)
            {
                this.addSalesSuppItem();

                if(!this.isRetailEnabled())
                {
                    this.calcSalesMixAndMatchDiscounts();

                    if(!webShopsTable.DisableMultilineDiscounts)
                    {
                        salesTable.updateMultiLineDisc();
                    }

                    if(!webShopsTable.DisableTotalDiscounts)
                    {
                        salesTable.updateFinalDisc(); //calc total order disc
                    }                                        
                }

                this.applyGiftCard();

                if(!webShopsTable.DisableTieredCharges)
                {
                    salesTable.createMarkupTrans(false, true); //calc tiered charges
                }                
                
                this.createSaveSalesRespons();
            }

            if(salesQuotationTable)
            {
                this.addQuoteSuppItem();
                this.calcQuoteMixAndMatchDiscounts();

                if(!webShopsTable.DisableMultilineDiscounts)
                {
                    salesQuotationTable.updateMultiLineDisc(); //calc multiline disc
                }

                if(!webShopsTable.DisableTotalDiscounts)
                {
                    salesQuotationTable.updateFinalDisc(); //calc total order disc
                }                
                                
                this.createSaveQuoteRespons(documentType == #promotableQuote);
            }
        }
        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveReturnOrder</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument SaveReturnOrder(XmlDocument _request)
    {
        CustInvoiceJour     custInvoiceJour;
        CustInvoiceTrans    custInvoiceTrans;
        XmlNodeList         salesLineFields;        

        this.createHeaderXml();

        this.getParameters(_request);

        this.getOrderParameters();

        select firstOnly custInvoiceJour
            where custInvoiceJour.InvoiceId == documentId &&
                  custInvoiceJour.SalesId == originalOrderId;

        if(custInvoiceJour || !documentId || returnOrderId) //invoice based, new RMA or edit RMA
        {
            ttsbegin;
            //create RMA header
            this.createReturnHeader(custInvoiceJour);

            //create charges for return reason and return disposition codes
            salesTable.createReturnMarkupTrans();

            this.createAttachmentURL();

            commentLines = null;

            //get RMA lines params
            for(i=0;salesLinesList && i<salesLinesList.length();i++)
            {
                salesLineFields = salesLinesList.item(i).childNodes();

                this.getReturnLineParams(salesLineFields);

                if(custInvoiceJour)
                {
                    select firstOnly custInvoiceTrans
                        where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                              custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                              custInvoiceTrans.LineNum == str2int(lineId) / 10000;
                }

                if(custInvoiceTrans || !documentId)
                {
                    //create RMA lines
                    this.createReturnLines(custInvoiceTrans);
                }
                else
                {
                    throw error(strFmt("@SCL345", lineId));
                }

                commentLines = null;
                lineInventDimId = '';
                parmUnitId = '';
                lineQty = 0;
            }

            resultNode.appendChild(resultXml.createElement(#documentId)).innerText(salesTable.ReturnItemNum);
            resultNode.appendChild(resultXml.createElement(#documentType)).innerText(#returnOrder);
            ttscommit;
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createReturnLines(CustInvoiceTrans _custInvoiceTrans)
    {
        InventDim     inventDim;
        AgreementLine agreementLine;

        salesLine.clear();

        if(_custInvoiceTrans)
        {
            salesLine.initFromCustInvoiceTrans(_custInvoiceTrans);
            salesLine.initFromSalesTable(salesTable);
            salesLine.InventTransIdReturn = _custInvoiceTrans.InventTransId;
            salesLine.InventDimId         = _custInvoiceTrans.InventDimId;            
            salesline.SalesStatus         = SalesStatus::Backorder;
            salesline.SC_ConfigurationId  = SalesLine::findInventTransId(_custInvoiceTrans.InventTransId).SC_ConfigurationId;

            [salesLine.ExpectedRetQty, salesLine.PdsCWExpectedRetQty] = SalesLine::pdsRemainReturnLotQtyAllCreditNote(_custInvoiceTrans.InventTransId, '', _custInvoiceTrans.SalesUnit);

            if(salesLine.SalesQty - salesLine.ExpectedRetQty < lineQty)
            {
                throw error("@SCL344");
            }
        }
        else
        {
            inventTable = InventTable::find(lineProductId);

            salesLine.initValue();
            salesLine.initFromSalesTable(salesTable);

            salesline.ItemId = lineProductId;
            salesline.initFromInventTable(inventTable, false);

            inventDim = this.setItemVariantSpecificStorageDim();

            salesLine.setInventDimIdFromInventDim(inventDim);
            salesline.SalesUnit = parmUnitId ? parmUnitId : salesline.SalesUnit;
        }

        salesLine.ExpectedRetQty      = -lineQty;
        salesLine.PdsCWExpectedRetQty = PdsCatchWeight::convertQtyToCWQty(salesline.ItemId, salesline.ExpectedRetQty, salesline.SalesUnit, true);
        salesLine.PdsCWQty            = 0;
        salesLine.SalesQty            = 0;
        salesline.QtyOrdered          = 0;
        salesLine.setPriceDisc(salesline.inventDim());
                    
        for(k=0;commentLines && k<commentLines.length();k++)
        {
            node = commentLines.item(k);

            salesline.Name += '\n' + (k ? node.innerText() : #comment + ': ' + node.innerText());
        }

        if(salesTable.MatchingAgreement)
        {
            agreementLine = AgreementLine::findCustInvoiceTrans(_custInvoiceTrans.RecId);

            if(agreementLine)
            {
                salesLine.MatchingAgreementLine = agreementLine.RecId;

                if (!agreementLine.isLinkValid(salesLine, false))
                {
                    salesLine.MatchingAgreementLine = 0;
                }
            }
        }

        salesLine.createLine(true, false, false, false, false, false, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnLineParams</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getReturnLineParams(XmlNodeList _salesLineFields)
    {
        for(k=0;_salesLineFields && k<_salesLineFields.length();k++)
        {
            node = _salesLineFields.item(k);

            if(!node.attributes().getNamedItem(#value) && !node.childNodes().length())
            {
                continue;
            }

            switch(node.childNodes().length() ? node.name() : node.attributes().getNamedItem(#name).innerText())
            {
                case #lineNo:
                    lineId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #quantity:
                    lineQty = this.convert2Type(node.attributes().getNamedItem(#value).innerText(), Types::Real);
                    break;

                case #commentLines:
                    commentLines = node.childNodes();
                    break;

                case #productId:
                    lineProductId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #variantId:
                    lineInventDimId = node.attributes().getNamedItem(#value).innerText();
                    break;

                case #unitOfMeasureId:
                    parmUnitId = node.attributes().getNamedItem(#value).innerText();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnHeader</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createReturnHeader(CustInvoiceJour _custInvoiceJour)
    {
        SalesTable              origSalesTable;
        DocuRef                 docuRef;
        LogisticsPostalAddress  address;
        boolean                 ret;
        Integer                 b;

        if(!returnOrderId)
        {            
            salesTable.initValue(SalesType::ReturnItem);
            salesTable.initFromCustInvoiceJour(_custInvoiceJour);
            salesTable.SalesStatus          = SalesStatus::Backorder;
            salesTable.SC_SanaOrder         = NoYes::Yes;
            salesTable.SC_DateReceived      = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone()));
            salesTable.SC_TimeReceived      = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone()));
            salesTable.SC_ShopAccountCode   = shopAccountEmail;
            salesTable.SC_AdminAccountCode  = adminUserEmail;
            salesTable.SC_WebshopId         = webShopsTable.WebShopId;

            origSalesTable = _custInvoiceJour.salesTable();

            if(origSalesTable)
            {
                salesTable.initReturnFromSalesTable(origSalesTable);
                salesTable.MatchingAgreement = origSalesTable.MatchingAgreement ? origSalesTable.MatchingAgreement : salesTable.MatchingAgreement;
            }
            else
            {
                salesTable.CustAccount   = _custInvoiceJour ? _custInvoiceJour.OrderAccount : accountId;
                salesTable.initFromCustTable();
                salesTable.SalesId       = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
                salesTable.ReturnItemNum = NumberSeq::newGetNum(SalesParameters::numRefReturnItemNum()).num();
                salesTable.ReturnStatus  = ReturnStatusHeader::Created;
            }

            salesTable.setReturnAddressFromInventLocationId(_custInvoiceJour ? _custInvoiceJour.InventLocationId : salesTable.InventLocationId);

            if(!salesTable.SC_BillToName)
            {
                address = DirParty::postalAddress(CustTable::find(custTable.InvoiceAddress == InvoiceOrderAccount::InvoiceAccount ? salesTable.InvoiceAccount : salesTable.CustAccount).Party, LogisticsLocationRoleType::Invoice);

                if(address)
                {
                    salesTable.SC_BillToName = LogisticsLocation::find(address.Location).Description;
                }
                else
                {
                    salesTable.SC_BillToName = CustTable::find(custTable.InvoiceAddress == InvoiceOrderAccount::InvoiceAccount ? salesTable.InvoiceAccount : salesTable.CustAccount).Name();
                }
            }
            salesTable.ReturnDeadline        = SalesParameters::find().ReturnPeriodOfValidity + DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {            
            select firstonly forupdate salesTable where salesTable.ReturnItemNum == returnOrderId && salesTable.SalesType == SalesType::ReturnItem;
            delete_from docuRef where docuRef.RefRecId == salesTable.RecId && docuRef.RefTableId == salesTable.TableId;
        }
        salesTable.ReturnReasonCodeId = returnCode;

        for(b=0;commentLines && b<commentLines.length();b++)
        {
            node = commentLines.item(b);
            salesTable.SC_Comments = b ? salesTable.SC_Comments : ''; //clear old comments
            salesTable.SC_Comments += salesTable.SC_Comments ? '\n' + node.innerText() : node.innerText();
        }

        this.setSavedCustomFields(salesTable);
            
        if(!returnOrderId)
        {
            salesTable.insert();
        }
        else
        {
            salesTable.update();
            while select salesLine
                where salesLine.SalesId == salesTable.SalesId
            {
                ret = ret && salesLine.validateDelete();
            }

            if(ret)
            {
                delete_from salesLine
                    where salesLine.SalesId == salesTable.SalesId &&
                         (salesLine.ReturnStatus != ReturnStatusLine::Awaiting || (salesLine.ExpectedRetQty < 0 && salesLine.ReturnStatus == ReturnStatusLine::Awaiting));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPickupLocationFromParams</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void setPickupLocationFromParams(boolean _quotation = false)
    {
        Integer b;

        for(b=0;pickupLocationList && b<pickupLocationList.length();b++)
        {
            node = pickupLocationList.item(b);

            if(!node.attributes().getNamedItem(#value))
            {
                continue;
            }

            switch(node.attributes().getNamedItem(#name).innerText())
            {
                case #id:
                    if(_quotation)
                    {
                        salesQuotationTable.SC_PickupLocationId = node.attributes().getNamedItem(#value).innerText();
                    }
                    else
                    {
                        salesTable.SC_PickupLocationId = node.attributes().getNamedItem(#value).innerText();
                    }
                    break;

                case #address:
                    if(_quotation)
                    {
                        salesQuotationTable.SC_PickupLocationAddress = node.attributes().getNamedItem(#value).innerText();
                    }
                    else
                    {
                        salesTable.SC_PickupLocationAddress = node.attributes().getNamedItem(#value).innerText();
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntryChangePolicy</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void updateEntryChangePolicy()
    {        
        container                        policySystemEntry;
        RefFieldId                       singleFieldSystemEntry = fieldNum(salesTable, DiscPercent);
        PriceDiscPolicyFindOrCreate      policyFindOrCreate;
        RefRecId                         newPriceDiscPolicy;        

        if(salesTable.SystemEntryChangePolicy)
        {
            policySystemEntry  = PriceDiscPolicyFields::retrieveTablePolicyFields(salesTable.TableId, salesTable.SystemEntryChangePolicy);
        }

        if (policySystemEntry)
        {
            policyFindOrCreate = PriceDiscPolicyFindOrCreate::newFromPriceDiscResultFields(salesTable);
            policySystemEntry  = conDel(policySystemEntry, conFind(policySystemEntry, singleFieldSystemEntry),1);            
            newPriceDiscPolicy = policySystemEntry ? policyFindOrCreate.findOrCreateChangePolicyFromPolicyFieldList(PriceDiscResultFields::tableFieldMapping().table2PolicyFieldList(salesTable.TableId, policySystemEntry)) : 0;

            if(newPriceDiscPolicy)
            {
                salesTable.SystemEntryChangePolicy = newPriceDiscPolicy;
            }

            salesTable.SystemEntrySource = salesTable.SystemEntryChangePolicy ? salesTable.SystemEntrySource : PriceDiscSystemSource::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderLines</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void updateOrderLines()
    {
        boolean             ret = true;
        MarkupTrans         markupTrans;
        MarkupTable         markupTable;
        RetailCouponUsage   retailCouponUsage;        

        if(salesLinesList && salesLinesList.length())
        {
            if(salesQuotationTable && this.checkQuoteOpen(salesQuotationTable))
            {
                //delete all lines
                while select salesQuotationLine
                    where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                {
                    ret = ret && salesQuotationLine.validateDelete();
                }

                if(ret)
                {
                    delete_from salesQuotationLine
                        where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId;

                    //clear payment and shippment
                    delete_from markupTrans
                        where markupTrans.TransTableId == salesQuotationTable.TableId &&
                                markupTrans.TransRecId == salesQuotationTable.RecId
                        exists join markupTable
                            where markupTable.MarkupCode == markupTrans.MarkupCode &&
                                  markupTable.SC_MarkupCode;

                    //clear promotion
                    salesQuotationTable.reread(); //to prevent update issues after lines delete
                    salesQuotationTable.SC_PromotionCode  = '';
                    salesQuotationTable.SC_PromotionTitle = '';
                    salesQuotationTable.SC_PromotionType  = SC_DiscountType::None;
                    salesQuotationTable.SC_PromotionValue = 0;
                    salesQuotationTable.doUpdate();
                    salesQuotationTable.modifiedField(fieldnum(salesQuotationTable, SC_PromotionValue));

                    this.getOrderLinesParams(false);
                }
            }

            if(salesTable && this.checkOrderOpen(salesTable))
            {
                //delete all lines
                while select salesLine
                    where salesLine.SalesId == salesTable.SalesId
                {
                    ret = ret && salesLine.validateDelete();
                }

                if(ret)
                {
                    delete_from salesLine
                        where salesLine.SalesId == salesTable.SalesId;

                    salesTable.reread(); //to prevent update issues after lines delete

                    //clear payment and shippment
                    delete_from markupTrans
                        where markupTrans.TransTableId == salesTable.TableId &&
                                markupTrans.TransRecId == salesTable.RecId
                        exists join markupTable
                            where markupTable.MarkupCode == markupTrans.MarkupCode &&
                                  markupTable.SC_MarkupCode;

                    //clear coupon
                    if(this.isRetailEnabled())
                    {
                        delete_from retailCouponUsage
                            where retailCouponUsage.SalesId == salesTable.SalesId;
                    }
                    else //clear promotion 
                    {
                        salesTable.SC_PromotionCode  = '';
                        salesTable.SC_PromotionTitle = '';
                        salesTable.SC_PromotionType  = SC_DiscountType::None;
                        salesTable.SC_PromotionValue = 0;
                        salesTable.doUpdate();
                        salesTable.type().modifiedField(fieldnum(salesTable, SC_PromotionValue));                        
                    }

                    this.deleteGiftCardHistory(salesTable.SalesId);
                    this.getOrderLinesParams(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean updateOrderTable(boolean _isPersistedBasket = false, String50 _documentType = documentType, boolean _updateOrderType = false)
    {           
        LedgerJournalTable          ledgerJournalTable;
        boolean                     ret;
        String50                    errorCode;        

        if(_documentType == #order)
        {
            salesTable = SalesTable::find(documentId, true);
            custTable  = CustTable::find(salesTable.CustAccount);            
        }
        else
        {
            salesQuotationTable = SalesQuotationTable::find(documentId, true);
            custTable           = CustTable::find(salesQuotationTable.CustAccount);

            if(!custTable)
            {
                smmBusRelTable  = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty);
            }
        }
        //there is no order but it`s update for persisted basket
        if(!salesTable && !salesQuotationTable && _updateOrderType)
        {
            errorCode = #errorCode1;
        }

        ttsbegin;
        if(this.checkOrderOpen(salesTable))
        {            
            ret = this.updateSalesTable(_isPersistedBasket, _updateOrderType);
        }
        else if(salesTable)
        {            
            ret = this.updateOnlySanaSalesTable();
        }

        if(this.checkQuoteOpen(salesQuotationTable))
        {
            ret = this.updateQuotationTable(_isPersistedBasket);
        }
        else if(salesQuotationTable)
        {
            ret = this.updateOnlySanaQuotationTable();
        }

        if(ret)
        {
            this.activateOrderGiftCards();
        }

        //create prepayments and settle transactions after online payment
        if(ret && this.allowCreatePrepayments() && !this.isCallCenterUser())
        {
            select firstonly ledgerJournalTable
                where ledgerJournalTable.Name like strFmt('Order: %1*', salesTable.SalesId);

            if(!ledgerJournalTable)
            {
                this.createOrderPrepayments(salesTable);
            }

            if(ledgerJournalTable && !ledgerJournalTable.Posted)
            {
                this.postOrderPrepayments(salesTable, ledgerJournalTable);
            } 
        }

        if(ret && this.isCallCenterUser() && this.allowCallCenterPayments())
        {
            this.createCallCenterOrderPayment();

            if(this.allowCompleteCallCenterOrder())
            {
                this.completeCallCenterOrder();
            }
        }
        ttscommit;

        if(!ret && !CustInvoiceTrans::existSalesId(documentId))
        {
            this.errorHandler(strfmt("@SCL85", documentId), errorCode);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean updateSalesTable(boolean _isPersistedBasket = false, boolean _updateOrderType = false)
    {
        Integer b;

        salesTable.SC_AuthorizationStatus   = orderAuthorizationStatus ? orderAuthorizationStatus : salesTable.SC_AuthorizationStatus;
        salesTable.SC_PaymentMethod         = paymentMethodName ? paymentMethodName : salesTable.SC_PaymentMethod;
        salesTable.SC_PaymentStatus         = paymentStatus ? paymentStatus : salesTable.SC_PaymentStatus;
        salesTable.SC_PaymentTransactionId  = paymentTransactionId ? paymentTransactionId : salesTable.SC_PaymentTransactionId;
        salesTable.SC_ShipmentMethodName    = shippingMethodName ? shippingMethodName : salesTable.SC_ShipmentMethodName;
        salesTable.CustomerRef              = referenceNoExists ? referenceNo : salesTable.CustomerRef;
        salesTable.SC_IsPersistedBasket     = _isPersistedBasket; //BigBasket functionality
        salesTable.SC_Comments              = commentLinesExists ? '' : salesTable.SC_Comments;
        salesTable.SC_ShopAccountCode       = shopAccountEmail ? shopAccountEmail : salesTable.SC_ShopAccountCode;
        salesTable.SC_AdminAccountCode      = adminUserEmail ? adminUserEmail : salesTable.SC_AdminAccountCode;
        salesTable.DlvMode                  = shippingMethodCode ? shippingMethodCode : salesTable.DlvMode;
        salesTable.PaymMode                 = this.getOrderPaymentMethodCode(salesTable.PaymMode);

        if(_updateOrderType)
        {
            salesTable.SalesType            = webShopsTable.OrderType == SC_SalesType::Sales ? SalesType::Sales : SalesType::Journal;
        }

        this.setSavedCustomFields(salesTable);

        //add comments
        for(b=0;commentLines && b<commentLines.length();b++)
        {
            node = commentLines.item(b);
            salesTable.SC_Comments          += salesTable.SC_Comments ? '\n' + node.innerText() : node.innerText();
        }

        //setup dates according delivery date control
        this.setSalesDeliveryDates();

        this.initDeliveryAddress();
        this.setPickupLocationFromParams();
                
        salesTable.update();

        this.createAttachmentURL();
        this.updateSalesTableExt();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableExt</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void updateSalesTableExt()
    {
        salesTableExt = SC_SalesTable::find(salesTable.RecId, true);

        if(!salesTableExt)
        {
            salesTableExt.SysExtensionSerializerExtensionMap::insertAfterBaseTable(salesTable);
        }

        salesTableExt.ExternalPaymentMethodType = externalPaymentMethodType ? externalPaymentMethodType : salesTableExt.ExternalPaymentMethodType;
        salesTableExt.SanaLocationId            = sanaLocationIdExists ? sanaLocationId : salesTableExt.SanaLocationId;
        salesTableExt.StoreLocationCode         = sanaLocationIdExists ? storeLocationCode : salesTableExt.StoreLocationCode;
        salesTableExt.update();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnlySanaSalesTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean updateOnlySanaSalesTable()
    {
        salesTable.SC_AuthorizationStatus           = orderAuthorizationStatus ? orderAuthorizationStatus : salesTable.SC_AuthorizationStatus;
        salesTable.SC_PaymentMethod                 = paymentMethodName ? paymentMethodName : salesTable.SC_PaymentMethod;
        salesTable.SC_PaymentStatus                 = paymentStatus ? paymentStatus : salesTable.SC_PaymentStatus;
        salesTable.SC_PaymentTransactionId          = paymentTransactionId ? paymentTransactionId : salesTable.SC_PaymentTransactionId;
        salesTable.doUpdate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotationTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean updateQuotationTable(boolean _isPersistedBasket = false)
    {
        Integer b;

        salesQuotationTable.SC_AuthorizationStatus  = orderAuthorizationStatus ? orderAuthorizationStatus : salesQuotationTable.SC_AuthorizationStatus;
        salesQuotationTable.SC_PaymentMethod        = paymentMethodName ? paymentMethodName : salesQuotationTable.SC_PaymentMethod;
        salesQuotationTable.SC_PaymentStatus        = paymentStatus ? paymentStatus : salesQuotationTable.SC_PaymentStatus;
        salesQuotationTable.SC_PaymentTransactionId = paymentTransactionId ? paymentTransactionId : salesQuotationTable.SC_PaymentTransactionId;
        salesQuotationTable.SC_ShipmentMethodName   = shippingMethodName ? shippingMethodName : salesQuotationTable.SC_ShipmentMethodName;
        salesQuotationTable.CustomerRef             = referenceNoExists ? referenceNo : salesQuotationTable.CustomerRef;
        salesQuotationTable.SC_IsPersistedBasket    = _isPersistedBasket; //BigBasket functionality
        salesQuotationTable.SC_Comments             = commentLinesExists ? '' : salesQuotationTable.SC_Comments;
        salesQuotationTable.SC_ShopAccountCode      = shopAccountEmail ? shopAccountEmail : salesQuotationTable.SC_ShopAccountCode;
        salesQuotationTable.SC_AdminAccountCode     = adminUserEmail ? adminUserEmail : salesQuotationTable.SC_AdminAccountCode;
        salesQuotationTable.DlvMode                 = shippingMethodCode ? shippingMethodCode : salesQuotationTable.DlvMode;
        salesQuotationTable.PaymMode                = this.getOrderPaymentMethodCode(salesQuotationTable.PaymMode);

        if(orderDueDate)
        {
            salesQuotationTable.QuotationExpiryDate = orderDueDate < salesQuotationTable.QuotationExpiryDate ? orderDueDate : salesQuotationTable.QuotationExpiryDate;
        }

        this.setSavedCustomFields(salesQuotationTable);

        //add comments
        for(b=0;commentLines && b<commentLines.length();b++)
        {
            node = commentLines.item(b);
            salesQuotationTable.SC_Comments        += salesQuotationTable.SC_Comments ? '\n' + node.innerText() : node.innerText();
        }

        //setup dates according delivery date control
        this.setQuoteDeliveryDates();

        //remove promotability on quote edit
        if(!webShopsTable.QuotePromotableDefault && salesQuotationTable.SC_IsPromotable && !salesPersonId)
        {
            salesQuotationTable.SC_IsPromotable = false;
        }

        this.initDeliveryAddress(true);
        this.setPickupLocationFromParams(true);
        
        salesQuotationTable.update();

        this.updateSalesQuotationTableExt();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationTableExt</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void updateSalesQuotationTableExt()
    {
        salesQuotationTableExt = SC_SalesQuotationTable::find(salesQuotationTable.RecId, true);

        if(!salesQuotationTableExt)
        {
            salesQuotationTableExt.SysExtensionSerializerExtensionMap::insertAfterBaseTable(salesQuotationTable);
        }

        salesQuotationTableExt.ExternalPaymentMethodType = externalPaymentMethodType ? externalPaymentMethodType : salesQuotationTableExt.ExternalPaymentMethodType;
        salesQuotationTableExt.SanaLocationId            = sanaLocationIdExists ? sanaLocationId : salesQuotationTableExt.SanaLocationId;
        salesQuotationTableExt.StoreLocationCode         = sanaLocationIdExists ? storeLocationCode : salesQuotationTableExt.StoreLocationCode;
        salesQuotationTableExt.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnlySanaQuotationTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean updateOnlySanaQuotationTable()
    {
        salesQuotationTable.SC_AuthorizationStatus  = orderAuthorizationStatus ? orderAuthorizationStatus : salesQuotationTable.SC_AuthorizationStatus;
        salesQuotationTable.SC_PaymentMethod        = paymentMethodName ? paymentMethodName : salesQuotationTable.SC_PaymentMethod;
        salesQuotationTable.SC_PaymentStatus        = paymentStatus ? paymentStatus : salesQuotationTable.SC_PaymentStatus;
        salesQuotationTable.SC_PaymentTransactionId = paymentTransactionId ? paymentTransactionId : salesQuotationTable.SC_PaymentTransactionId;
        salesQuotationTable.doUpdate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreatePrepayments</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean allowCreatePrepayments()
    {        
        return salesTable && webShopsTable.PostAutoPrepayment && paymentStatus == #paid && paymentMethodType == #online && allowPostPrepayments; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCallCenterPayments</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean allowCallCenterPayments()
    {
        boolean ret;

        ret = salesTable && (paymentMethodCode || webShopsTable.RetailPaymMethod) && paymentStatus == #paid && paymentMethodType == #online;

        if(ret && RetailTenderTypeTable::find(paymentMethodCode ? paymentMethodCode : webShopsTable.RetailPaymMethod).defaultFunction == RetailTenderFunction::Customer)
        {
            ret = MCRCustTable::findByCustAccount(custTable.AccountNum).AllowOnAccount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCompleteCallCenterOrder</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean allowCompleteCallCenterOrder()
    {
        return salesTable.SalesType == SalesType::Sales && webShopsTable.CompleteRetailOrder && RetailMCRChannelTable::findForCurrentUser().MCREnableOrderCompletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeCallCenterOrder</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void completeCallCenterOrder()
    {
        MCROrderRecapStatus recapStatus;

        recapStatus = MCREndOrder::orderRecap(salesTable, new MCRSalesOrderTotals(salesTable));

        if(recapStatus != MCROrderRecapStatus::CloseAuth)
        {
            throw error("@SCL520");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdatePersistedBasket</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [Replaceable]
    public XmlDocument UpdatePersistedBasket(XmlDocument _request)
    {
        this.createHeaderXml();

        this.getParameters(_request);

        this.getOrderParameters();

        documentId = originalOrderId;       

        ttsbegin;

        this.updateOrderTable(true, syncOrderType);

        resultNode.appendChild(resultXml.createElement(#requiresRecalculation)).innerText(#one);

        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdatePersistedBasketLines</Name>
				<Source><![CDATA[
    //BigBasket functionality
    [Replaceable]
    public XmlDocument UpdatePersistedBasketLines(XmlDocument _request)
    {
        XMLNodeList salesLinesListOrig;
        boolean     ret;                

        this.createHeaderXml();

        this.getParameters(_request);

        salesLinesListOrig     = salesLinesList;
        notInStockLines        = resultNode.appendChild(resultXml.createElement(#notInStockLines));
        decreasedQuantityLines = resultNode.appendChild(resultXml.createElement(#decreasedQuantityLines));
        nonOrderableLines      = resultNode.appendChild(resultXml.createElement(#nonOrderableLines));              
                
        if(syncOrderType == #quote || accountType == #contact)
        {
            salesQuotationTable = SalesQuotationTable::find(originalOrderId, true);
            custTable           = CustTable::find(salesQuotationTable.CustAccount);
            ret                 = this.checkQuoteOpen(salesQuotationTable);
        }
        else
        {
            salesTable = SalesTable::find(originalOrderId, true);
            custTable  = CustTable::find(salesTable.CustAccount);
            ret        = this.checkOrderOpen(salesTable);
        }

        if(!salesTable && !salesQuotationTable)
        {
            ret = false;
            this.errorHandler(strfmt("@SCL85", documentId), #errorCode1);
        }

        if(ret)
        {
            if(delSalesLinesList && delSalesLinesList.length())
            {
                salesLinesList = delSalesLinesList;
                this.getOrderLinesParams(true, #deleted);

                salesLinesList = salesLinesListOrig;
            }

            if(salesLinesList  && salesLinesList.length())
            {
                this.getOrderLinesParams(true, #added);
            }

            if(updSalesLinesList && updSalesLinesList.length())
            {
                salesLinesList = updSalesLinesList;
                this.getOrderLinesParams(true, #updated);

                salesLinesList = salesLinesListOrig;
            }            

            if(salesTable)
            {
                this.addSalesSuppItem();                

                if(!webShopsTable.DisableMultilineDiscounts)
                {
                    salesTable.updateMultiLineDisc();
                }

                if(!webShopsTable.DisableTotalDiscounts)
                {
                    salesTable.updateFinalDisc();
                }

                if(!webShopsTable.DisableTieredCharges)
                {
                    salesTable.createMarkupTrans(false, true); //calc tiered charges
                }
                               
                this.createTmpSalesLine();
                this.createCalcSalesRespons(false, true, true, tmpSalesLine);
            }
            else
            {
                this.addQuoteSuppItem();

                if(!webShopsTable.DisableMultilineDiscounts)
                {
                    salesQuotationTable.updateMultiLineDisc(); //calc multiline disc
                }

                if(!webShopsTable.DisableTotalDiscounts)
                {
                    salesQuotationTable.updateFinalDisc(); //calc total order disc
                }

                this.createTmpSalesQuotationLine();                
                this.createCalcQuoteRespons(false, true, true, tmpSalesQuotationLine);
            }
        }        

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailInformation</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void updateRetailInformation()
    {
        RetailSalesTable    retailSalesTable;
        RetailChannelTable  retailChannelTable;

        if(this.isRetailEnabled())
        {
            retailChannelTable = this.getRetailChannelTable();

            if(retailChannelTable)
            {
                retailSalesTable = retailSalesTable::find(salesTable.SalesId, true);
                
                retailSalesTable.OriginalTransactionTime = DateTimeUtil::utcNow();
                retailSalesTable.OMInternalOrganization = retailChannelTable.OMOperatingUnitID;
                    
                if(!this.isCallCenterUser())
                {
                    retailSalesTable.RetailStoreId = webShopsTable.RetailStore;
                    retailSalesTable.RetailTerminalId = webShopsTable.RetailTerminalId;
                }
                retailSalesTable.RetailOrder = NoYes::Yes;
                retailSalesTable.RetailChannel = retailChannelTable.RecId;
                retailSalesTable.SalesTable = salesTable.RecId;

                if(retailSalesTable)
                {
                    retailSalesTable.doupdate();
                }
                else
                {                    
                    retailSalesTable.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Replaceable]
    public static SC_AXDataServiceClient_Order construct()
    {
        SC_AXDataServiceClient_Order seviceclient = new SC_AXDataServiceClient_Order();
        
        seviceclient.clearCache();

        return seviceclient;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderPaymentMethodCode</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected CustPaymMode getOrderPaymentMethodCode(CustPaymMode _defaultCode)
    {
        CustPaymMode code;

        if(this.isCallCenterUser())
        {
            code = webShopsTable.TemplatePaymentCode ? webShopsTable.TemplatePaymentCode : _defaultCode;
        }
        else
        {
            code = paymentMethodCode ? paymentMethodCode : webShopsTable.TemplatePaymentCode ? webShopsTable.TemplatePaymentCode : _defaultCode;
        }

        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGiftCard</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createGiftCard()
    {
        SC_GiftCardTable giftCardTableLocal;
        System.Random    rand = new System.Random();
        Integer          num;
        DiscCode         code;

        num = rand.Next(100001, 999999);
        code = 'GC' + int2Str(num);

        if(!SC_GiftCardTable::exists(websiteId, code))
        {            
            giftCardTableLocal.GiftCardCode = code;
            giftCardTableLocal.Name = salesline.Name;
            giftCardTableLocal.Balance = salesline.LineAmount;
            giftCardTableLocal.Currency = custTable.Currency;
            giftCardTableLocal.MaxDiscPct = 99;
            giftCardTableLocal.WebShopId = websiteId;
            giftCardTableLocal.insert();

            salesline.Name = 'Gift card number: ' + code;
            salesline.doUpdate();
        }
        else
        {
            this.createGiftCard();
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyGiftCard</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void applyGiftCard()
    {
        SalesLine           salesLineLocal;   
        Amount              lineTotal, availableBalance, lineDiscAmount, maxDiscPct;
        SC_GiftCardHistory  gitCardHistory;
        InventTable         inventTableLocal;        

        if(giftCardTable && !webShopsTable.DisableSanaDiscounts && !salesTable.SC_IsPersistedBasket)
        {
            select firstonly RecId from salesLineLocal
                where salesLineLocal.SalesId == salestable.SalesId &&
                      salesLineLocal.ItemId
                exists join inventTableLocal
                    where inventTableLocal.ItemId == salesLineLocal.ItemId &&
                          inventTableLocal.SC_GiftCard;

            if(salesLineLocal) //do not apply gift card on gift card
            {
                giftCardTable = null;
                return;
            }

            if(this.isRetailEnabled())
            {
                MCRSalesTableController::recalculateRetailPricesDiscounts(salesTable);               
            }

            select sum(LineAmount) from salesLineLocal
                    where salesLineLocal.SalesId == salestable.SalesId &&
                          salesLineLocal.ItemId;

            lineTotal        = salesLineLocal.LineAmount;
            availableBalance = giftCardTable.Balance > lineTotal ? lineTotal : giftCardTable.Balance;
            maxDiscPct       = lineTotal > giftCardTable.Balance || !giftCardTable.MaxDiscPct ? 100 : giftCardTable.MaxDiscPct;

            while select forupdate salesLineLocal
                where salesLineLocal.SalesId == salestable.SalesId &&
                        salesLineLocal.ItemId
            { 
                
                giftCardTable.MaxDiscPct = giftCardTable.MaxDiscPct == 0 ? 100 : giftCardTable.MaxDiscPct;                
                lineDiscAmount = ((availableBalance * maxDiscPct) / 100) / lineTotal * 100;

                salesLineLocal.LinePercent = (100 * (1 - (1 - salesLineLocal.LinePercent / 100) * (1 - lineDiscAmount / 100)));
                salesLineLocal.LinePercent = salesLineLocal.LinePercent > 100 ? 100 : salesLineLocal.LinePercent;                                  
                lineDiscAmount = salesLineLocal.LineAmount * lineDiscAmount / 100;

                salesLineLocal.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesLine, LinePercent));
                salesLineLocal.LineAmount = salesLineLocal.calcLineAmountForced();                

                giftCardTable.Balance -= round(lineDiscAmount, 0.00001);
                gitCardHistory.Amount += round(lineDiscAmount, 0.00001);
                salesLineLocal.Name = 'Gift card used: ' + giftCardTable.GiftCardCode;
                salesLineLocal.update();               
            }
            
            giftCardTable.update();    
        
            gitCardHistory.WebshopId       = giftCardTable.WebshopId;
            gitCardHistory.GiftCardCode    = giftCardTable.GiftCardCode;
            gitCardHistory.SalesId         = salestable.SalesId;            
            gitCardHistory.ShopAccountCode = salestable.SC_ShopAccountCode;
            gitCardHistory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailGiftCardAmount</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void createRetailGiftCardAmount()
    {
        SalesLine        salesLineLocal;
        InventTable      inventTableLocal;
        SC_GiftCardTable giftCardTableLocal;
        DiscCode         giftCardNum;

        while select LineAmount, Name from salesLineLocal
                where salesLineLocal.SalesId == salestable.SalesId &&
                      salesLineLocal.ItemId
            exists join TableId from inventTableLocal
                where inventTableLocal.ItemId == salesLineLocal.ItemId &&
                      inventTableLocal.SC_GiftCard
        {
            giftCardNum   = subStr(salesLineLocal.Name, strLen(salesLineLocal.Name)-7, strLen(salesLineLocal.Name));
            giftCardTableLocal = SC_GiftCardTable::find(websiteId, giftCardNum, true);

            if(giftCardTableLocal)
            {
                giftCardTableLocal.Balance = salesLineLocal.LineAmount;
                giftCardTableLocal.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setManualDiscChangePolicy</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void setManualDiscChangePolicy(SalesPurchLine _buffer, boolean _islineDiscChanged = false)
    {
        SalesLine           salesLineLocal;
        SalesQuotationLine  salesQuotationLineLocal;

        if(_buffer.TableId == tableNum(SalesLine))
        {
            salesLineLocal = _buffer;
            salesLineLocal.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesLine, LinePercent));

            if(_islineDiscChanged)
            {
                salesLineLocal.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesLine, LineDisc));
            }
        }
        else if(_buffer.TableId == tableNum(SalesQuotationLine))
        {
            salesQuotationLineLocal = _buffer;
            salesQuotationLineLocal.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesQuotationLine, LinePercent));

            if(_islineDiscChanged)
            {
                salesQuotationLineLocal.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesQuotationLine, LineDisc));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveBuffer</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Common getActiveBuffer(TableId _tableId)
    {
        Common  ret;

        switch(_tableId)
        {
            case tableNum(CustTable):
                ret = custTable as CustTable;                
                break;
            case tableNum(SalesTable):
                ret = salesTable as SalesTable;                
                break;
            case tableNum(SalesLine):
                ret = salesLine as SalesLine;
                break;
            case tableNum(SalesQuotationTable):
                ret = salesQuotationTable as SalesQuotationTable;
                break;
            case tableNum(SalesQuotationLine):
                ret = salesQuotationLine as SalesQuotationLine;
                break;            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateOrderGiftCards</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void activateOrderGiftCards()
    {
        SC_GiftCardTable    giftCardTableLocal;
    
        if(salesTable && paymentMethodType == #online && paymentStatus == #paid)
        {
            while select Name from salesLine
            order by LineNum
            where salesLine.SalesId == salesTable.SalesId
            {
                if(strscan(salesLine.Name, 'Gift card number:', 1, 15))
                {
                    giftCardTableLocal = SC_GiftCardTable::find(websiteId, subStr(salesLine.Name, strLen(salesLine.Name)-7, strLen(salesLine.Name)), true);

                    if(giftCardTableLocal)
                    {
                        giftCardTableLocal.Active = NoYes::Yes;
                        giftCardTableLocal.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCouponGiftCard</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isCouponGiftCard()
    {
        giftCardTable = SC_GiftCardTable::findActive(websiteId, lineProductId, custTable.Currency, true);

        return giftCardTable.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteGiftCardHistory</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void deleteGiftCardHistory(SalesId _salesId)
    {
        SC_GiftCardHistory  gitCardHistory;
    
        select forUpdate firstOnly GiftCardCode, Amount, SalesId
        from gitCardHistory
            where gitCardHistory.SalesId == _salesId;

        giftCardTable = SC_GiftCardTable::find(webShopsTable.WebShopId, gitCardHistory.GiftCardCode, true);
    
        if(giftCardTable)
        {
            giftCardTable.Balance += gitCardHistory.Amount;
            giftCardTable.doUpdate();

            if(gitCardHistory.validateDelete())
            {
                gitCardHistory.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOrderMiscChargesInclTax</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Amount calcOrderMiscChargesInclTax(boolean _quote = false)
    {
        MarkupTrans        markupTrans;
        SalesLine          salesLineLocal;
        SalesQuotationLine salesQuotationLineLocal;
        Amount             totalMarkup;

        if(_quote)
        {
            while select markupTrans
            where !markupTrans.MCRCouponMarkup
            join LineAmount, SalesQty from salesQuotationLineLocal
                where salesQuotationLineLocal.TableId == markupTrans.TransTableId &&
                      salesQuotationLineLocal.RecId == markupTrans.TransRecId &&
                      salesQuotationLineLocal.QuotationId == salesQuotationTable.QuotationId && salesQuotationLineLocal.ItemId
            {
                totalMarkup += this.calcMiscChargeValue(markupTrans, salesQuotationLineLocal.SalesQty, salesQuotationLineLocal.LineAmount);
            }

            while select markupTrans
            where !markupTrans.MCRCouponMarkup &&
                  markupTrans.TransTableId == salesQuotationTable.TableId &&
                  markupTrans.TransRecId == salesQuotationTable.recId
            {
                totalMarkup += this.calcMiscChargeValue(markupTrans, 1, totalBalance);
            }
        }
        else
        {
            while select markupTrans
            where !markupTrans.MCRCouponMarkup
            join LineAmount, SalesQty from salesLineLocal
                where salesLineLocal.TableId == markupTrans.TransTableId &&
                      salesLineLocal.RecId == markupTrans.TransRecId &&
                      salesLineLocal.SalesId == salesTable.salesId && salesLineLocal.ItemId
            {
                totalMarkup += this.calcMiscChargeValue(markupTrans, salesLineLocal.SalesQty, salesLineLocal.LineAmount);
            }

            while select markupTrans
            where !markupTrans.MCRCouponMarkup &&
                  markupTrans.TransTableId == salesTable.TableId &&
                  markupTrans.TransRecId == salesTable.recId
            {
                totalMarkup += this.calcMiscChargeValue(markupTrans, 1, totalBalance);
            }
        }

        return totalMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineCreateLine</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void salesLineCreateLine(boolean _isBasketCalculation = false)
    {
        SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();

        salesLineCreateLineParameters.validation                  = false;
        salesLineCreateLineParameters.initFromSalesOrderTable     = false;
        salesLineCreateLineParameters.initFromItemOrCategory      = false;
        salesLineCreateLineParameters.calcInventQty               = !_isBasketCalculation;
        salesLineCreateLineParameters.searchMarkup                = true;
        salesLineCreateLineParameters.searchPrice                 = false;
        salesLineCreateLineParameters.checkReservation            = false;
        salesLineCreateLineParameters.skipCreditLimitCheck        = false;
        salesLineCreateLineParameters.ignoreSalesTableInventDim   = false;
        salesLineCreateLineParameters.setLineNum                  = true;
        salesLineCreateLineParameters.searchAgreementLine         = false;
        salesLineCreateLineParameters.smaServiceOrderTable        = null;
        salesLineCreateLineParameters.oldAgreementLineRecId       = 0;
        salesLineCreateLineParameters.mcrExchangeInventRefTransId = '';
        salesLineCreateLineParameters.interCompanyInventTransId   = '';
        salesLineCreateLineParameters.skipInventoryProcessing     = _isBasketCalculation;

        salesline.createLineFromParameters(salesLineCreateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesParametersForBasketCalc</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void setSalesParametersForBasketCalc()
    {
        SalesParameters salesParameters = SalesParameters::find(true);

        if(salesParameters.MCRCopyNotes || salesParameters.MCREnableMarginAlert || salesParameters.DeliveryDateControlType != SalesDeliveryDateControlType::None)
        {
            salesParameters.MCRCopyNotes = false;
            salesParameters.MCREnableMarginAlert = false;
            salesParameters.DeliveryDateControlType = SalesDeliveryDateControlType::None;
            salesParameters.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineTitle</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container getOrderLineTitle(ItemId _itemId, InventDimCombination _inventDimCombination, RefRecId _salesCategory)
    {
        SC_LargeText productTitle, variantTitle;

        if(_itemId)
        {            
            productTitle = this.getProductName();
            variantTitle = this.findVariantDescription(_inventDimCombination);
        }
        else if(_salesCategory) //sales category instead of item
        {
            productTitle = EcoResCategoryTranslation::find(_salesCategory, languageId).FriendlyName;
            productTitle = productTitle ? productTitle : EcoResCategory::find(_salesCategory).Name;
        }

        return [productTitle, variantTitle];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesFiltersQuery</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource buildSalesFiltersQuery(Query _query, TableId _parentTableId)
    {
        QueryBuildDataSource queryBuildDataSourceSalesTable;

        queryBuildDataSourceSalesTable = SysQuery::findOrCreateDataSource(_query, tablenum(SalesTable), _parentTableId);

        if(_parentTableId == tableNum(CustInvoiceJour))
        {
            queryBuildDataSourceSalesTable.addLink(fieldNum(CustInvoiceJour, SalesId), fieldNum(SalesTable, SalesId));
        }
        else
        {
            queryBuildDataSourceSalesTable.relations(true);
        }

        queryBuildDataSourceSalesTable.joinMode(JoinMode::ExistsJoin);

        return queryBuildDataSourceSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAlternativeItem</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean allowAlternativeItem(boolean _quote = false)
    {
        boolean   ret;
    
        ret = !webShopsTable.DisableAlternativeItems && !originalQuoteId;
        ret = ret && (inventTable.UseAltItemId == ItemNumAlternative::Always || this.calcInventoryByDocumentId(InventDim::find(lineInventDimId), 0) == 0);

        if(_quote)
        {
            ret = ret && documentType != #promotableQuote;
        }
   
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>