<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SC_AXDataServiceClient_Product</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Threading.Tasks;
using System.Threading;

class SC_AXDataServiceClient_Product extends SC_AXDataServiceClient
{
    XmlNode     productNode, matchingAgreementsNode;
    QueryRun    queryRun;
    Counter     pageStart;
    InventDim   blankInventDim;
    ErrorMsg    formErrorMsg;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBOM</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected XmlNode addBOM(XmlNode _parentNode, InventDim _variantDim = blankInventDim)
    {        
        BOM                     BOM;
        XmlNode                 materialsNode, materialNode;
        InventDim               inventDim;
        BOMVersion              bomVersion;
        boolean                 isRetailKit, isBOMVersionSpec, variantVersionExists, specificQtyRulesExists;

        specificQtyRulesExists = this.isSpecificQtyRulesExist();

        materialsNode = _parentNode.appendChild(resultXml.createElement(#materials));

        if(isOrderable && !webshopsTable.DisableBOM && inventTable.isBOMAllowed())
        {            
            if(webshopsTable.OverrideCustDim)
            {
                inventDim.InventSiteId = webshopsTable.DefaultSiteId;
            }
            else
            {
                //take from customer
                inventDim.InventSiteId = custTable.InventSiteId;
            }

            //override site if invent setting is mandatory
            inventDim.InventSiteId = inventTable.inventItemOrderSetupMap(InventItemOrderSetupType::Sales).inventSiteId(inventDim.InventsiteId, inventTable);
            //if no site warehouse settings on item, take default from Sana parameters
            inventDim.InventSiteId = inventDim.InventSiteId ? inventDim.InventSiteId : webshopsTable.DefaultSiteId;
            inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(inventTable.ItemId), _variantDim);

            [bomVersion, isBOMVersionSpec, variantVersionExists] = this.findBOMVersion(inventDim);
            
            if(_variantDim == blankInventDim)
            {
                this.addFieldValue(#isCustomerSpecific, _parentNode, isBOMVersionSpec || specificQtyRulesExists ? #one : #zero);
            }

            if(bomVersion.BOMId && loadRelatedSkus)
            {
                while select ItemId, InventDimId, BOMQty from BOM where BOM.BOMId == bomVersion.BOMId && BOM.SC_VisibleInWebShop
                {
                    materialNode = materialsNode.appendChild(resultXml.createElement(#material));
                    
                    this.initDefaultBOMFields(materialNode, BOM);
                }
            }
        }
        else
        {
            if(_variantDim == blankInventDim)
            {
                this.addFieldValue(#isCustomerSpecific, _parentNode, specificQtyRulesExists ? #one : #zero);
            }
        }

        if(!bomVersion.BOMId && isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            isRetailKit = RetailKit::existByProductMaster(inventTable.Product);
        }

        this.addFieldValue(#hasMaterials, _parentNode, bomVersion.BOMId || variantVersionExists || isRetailKit ? #one : #zero);

        return materialsNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimesionBasedBOMVariants</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addDimesionBasedBOMVariants(XmlNode _parentNode)
    {
        Integer b;

        BOM                         BOM;
        BOMConfigRoute              BOMConfigRoute;
        InventDim                   inventDim;
        BOMVersion                  bomVersion;
        InventDimCombination        inventDimCombination;
        Price                       unitPrice, listPrice, discValue;
        boolean                     isBOMVersionSpec, someVariantOrderable;
        XmlNode                     componentsNode, groupNode;
        XmlNode                     variants, variant;
        Xmlelement                  componentNode;
        container                   configRoutes, configRouteValues, configs, allBOMRoutes;
        EcoResItemConfigurationName configId;

        if(loadRelatedSkus)
        {
            if(webshopsTable.OverrideCustDim)
            {
                inventDim.InventSiteId = webshopsTable.DefaultSiteId;
            }
            else
            {
                //take from customer
                inventDim.InventSiteId = custTable.InventSiteId;
            }

            //override site if invent setting is mandatory
            inventDim.InventSiteId = inventTable.inventItemOrderSetupMap(InventItemOrderSetupType::Sales).inventSiteId(inventDim.InventsiteId, inventTable);
            //if no site warehouse settings on item, take default from Sana parameters
            inventDim.InventSiteId = inventDim.InventSiteId ? inventDim.InventSiteId : webshopsTable.DefaultSiteId;

            [bomVersion, isBOMVersionSpec] = this.findBOMVersion(inventDim);

            this.addFieldValue(#isCustomerSpecific, _parentNode, #one);

            componentsNode = _parentNode.appendChild(resultXml.createElement(#variantComponents));

            while select BOMConfigRoute
                order by LineNum
                where BOMConfigRoute.BOMId == bomVersion.BOMId
            {
                groupNode     = componentsNode.appendChild(resultXml.createElement(#group));

                this.addFieldValue(#id, groupNode, BOMConfigRoute.ConfigGroupId);
                this.addFieldValue(#bigName, groupNode, BOMConfigRoute.Name ? BOMConfigRoute.Name : BOMConfigRoute.configGroupName() ? BOMConfigRoute.configGroupName() : BOMConfigRoute.ConfigGroupId);

                while select BOM
                    where BOM.BOMId == bomVersion.BOMId &&
                          BOM.ConfigGroupId == BOMConfigRoute.ConfigGroupId
                {
                    componentNode = groupNode.appendChild(resultXml.createElement(#variantComponent));

                    this.initDefaultComponentFields(componentNode, BOM.ItemId, BOM.itemName(), InventTable::find(BOM.ItemId).Product, 0);
                }
            }

            //variants
            variants = _parentNode.appendChild(resultXml.createElement(#variants));            

            select firstOnly BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == bomVersion.BOMId;

            allBOMRoutes = this.findBOMRouteCombinations(BOMConfigRoute);

            while select ConfigGroupId from BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == bomVersion.BOMId
            {
                configRoutes += BOMConfigRoute.ConfigGroupId;
            }

            for(b=1;b<=conLen(allBOMRoutes);b++)
            {
                variant = variants.appendChild(resultXml.createElement(#variant));

                while select ConfigGroupId from BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == bomVersion.BOMId
                {
                    configRouteValues += [[BOMConfigRoute.ConfigGroupId, conPeek(conPeek(allBOMRoutes, b), conLen(configRouteValues)+1), '']];
                }
            
                configs  = ConfigChoice::findConfig(inventTable.ItemId, configRouteValues);
                configId = conLen(configs) == 4 ? any2str(conPeek(configs, 4)) : '';
                configRouteValues = conNull();
            
                select firstOnly inventDimCombination
                    where inventDimCombination.ItemId == inventTable.ItemId
                    exists join inventDim
                        where inventDim.inventDimId == inventDimCombination.InventDimId &&
                              inventDim.configId == configId;
            
                inventDim = inventDimCombination.inventDim();

                this.addFieldValue(#id, variant, inventDimCombination ? inventDim.inventDimId : bomVersion.BOMId + ';' + int2str(b));
                this.addFieldValue(#title, variant, inventDimCombination ? this.findVariantDescription(inventDimCombination) : strFmt("@SCL525", b));

                if(calculateSkuPrices)
                {
                    [unitPrice, listPrice, discValue] = this.calcItemPrices(true, true, custTable.Currency, inventDimCombination ? inventDim : blankInventDim);

                    this.addFieldValue(#price, variant, unitPrice);

                    if(multiCurrency)
                    {
                        this.addFieldValue(#price + '_' + Currency::find(custTable.Currency).CurrencyCodeISO, variant, unitPrice);
                        this.addMultiCurrency(variant, inventDimCombination ? inventDim : blankInventDim);
                    }

                    this.addFieldValue(#listPrice, variant, this.calcBaseItemPrice(unitPrice, listPrice, discValue));
                }

                if(calculateSkuInventory)
                {
                    this.addFieldValue(#inventory, variant, inventDimCombination ? this.calcInventory(inventDim) : 0);
                }

                this.addFieldValue(#isOrderable, variant, inventDimCombination ? inventDimCombination.SC_VisibleInWebShop : true);
                someVariantOrderable = someVariantOrderable || (inventDimCombination ? inventDimCombination.SC_VisibleInWebShop : true);

                //components
                componentsNode = variant.appendChild(resultXml.createElement(#components));

                for(k=1;k<=conLen(configRoutes);k++)
                {
                    componentNode = componentsNode.appendChild(resultXml.createElement(#component));
                    componentNode.setAttribute(#key, conPeek(configRoutes, k));
                    componentNode.setAttribute(#value, conPeek(conPeek(allBOMRoutes, b), k));
                }
            }

            isOrderable = isOrderable && someVariantOrderable; //update main product orderability status
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBOMVersion</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container findBOMVersion(InventDim _inventDim)
    {
        BOMVersion  bomVersion, bomVersionSpec;
        InventDim   inventDimCriteria;
        boolean     variantVersionExists;

        select firstonly BOMId, InventDimId from bomVersion
        order by inventDimCriteria.InventSiteId desc, bomVersion.FromQty
        where bomVersion.ItemId   == inventTable.ItemId &&
                bomVersion.Active   == NoYes::Yes &&
                bomVersion.Approved == NoYes::Yes &&
                bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())  &&
                (bomVersion.ToDate   >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())  || !bomVersion.ToDate)
        join TableId from inventDimCriteria
            where inventDimCriteria.InventDimId    == bomVersion.InventDimId   &&
                    (inventDimCriteria.InventSiteId  == _inventDim.InventSiteId  || !inventDimCriteria.InventSiteId) &&
                    (inventDimCriteria.InventColorId == _inventDim.InventColorId || !inventDimCriteria.InventColorId) &&
                    (inventDimCriteria.InventSizeId  == _inventDim.InventSizeId  || !inventDimCriteria.InventSizeId) &&
                    (inventDimCriteria.configId      == _inventDim.configId      || !inventDimCriteria.configId) &&
                    (inventDimCriteria.InventStyleId == _inventDim.InventStyleId || !inventDimCriteria.InventStyleId);
    
        //search if any variant BOM version exists, skip for variants
        if(!bomVersion.BOMId && inventTable.hasProductDimensions() && !_inventDim.InventColorId && !_inventDim.InventSizeId && !_inventDim.configId && !_inventDim.InventStyleId)
        {
            select firstonly BOMId from bomVersion
            order by inventDimCriteria.InventSiteId desc, bomVersion.FromQty
            where bomVersion.ItemId   == inventTable.ItemId &&
                  bomVersion.Active   == NoYes::Yes &&
                  bomVersion.Approved == NoYes::Yes &&
                  bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())  &&
                 (bomVersion.ToDate   >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())  || !bomVersion.ToDate)
            join TableId from inventDimCriteria
                where inventDimCriteria.InventDimId   == bomVersion.InventDimId &&
                      (inventDimCriteria.InventSiteId == _inventDim.InventSiteId  || !inventDimCriteria.InventSiteId) &&
                      (inventDimCriteria.InventColorId || inventDimCriteria.InventSizeId || inventDimCriteria.configId || inventDimCriteria.InventStyleId);
        
            variantVersionExists = bomVersion.RecId ? true : false;
            bomVersion.clear();
        }

        if(!bomVersion.BOMId || (bomVersion.BOMId && !bomVersion.inventSiteId()))  //if any Site, its customer specific
        {
            select firstonly BOMId from bomVersionSpec
            where bomVersionSpec.ItemId   == inventTable.ItemId &&
                    bomVersionSpec.Active   == NoYes::Yes &&
                    bomVersionSpec.Approved == NoYes::Yes &&
                    bomVersionSpec.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())  &&
                    (bomVersionSpec.ToDate   >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())  || !bomVersionSpec.ToDate)
            exists join TableId from inventDimCriteria
                where inventDimCriteria.InventDimId == bomVersionSpec.InventDimId &&
                        inventDimCriteria.InventSiteId;
        }

        return [bomVersion, bomVersionSpec || bomVersion.inventSiteId() ? true : false, variantVersionExists];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultBOMFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultBOMFields(XmlNode _materialNode, BOM _BOM)
    {
        InventDimCombination inventDimCombination;
        InventTable          inventTableLocal;
        InventDim            inventDimLocal;

        inventTableLocal = _BOM.inventTable();
    
        if(inventTableLocal.hasProductDimensions())
        {
            inventDimLocal = _BOM.InventDim();
            inventDimLocal.clearNotProductDim(InventDimGroupSetup::newItemId(_BOM.ItemId));
            inventDimLocal = InventDim::findDim(inventDimLocal);
        }

        this.addFieldValue(#productId, _materialNode, _BOM.ItemId);
        this.addFieldValue(#title, _materialNode, this.getProductName(inventTableLocal));
        this.addProductTranslations(#title, _materialNode, inventTableLocal.Product);
        this.addFieldValue(#variantId, _materialNode, inventDimLocal.InventDimId);
        this.addFieldValue(#quantity, _materialNode, _BOM.BOMQty);

        inventDimCombination = InventDimCombination::findByInventDim(_BOM.ItemId, inventDimLocal);

        if(inventDimCombination)
        {
            this.addFieldValue(#variantTitle, _materialNode, this.findVariantDescription(inventDimCombination));
            this.addProductTranslations(#variantTitle, _materialNode, inventDimCombination.DistinctProductVariant);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemBarCodes</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addItemBarCodes(XmlNode _parentNode, InventDim _inventDim = blankInventDim)
    {
        InventItemBarcode   inventItemBarcode;
        Str1260             barCodes;        

        while select itemId, inventDimId, itemBarCode, barcodeSetupId from inventItemBarcode
            where inventItemBarcode.itemId      == inventTable.ItemId &&
                  inventItemBarcode.inventDimId == _inventDim.inventDimId
        {
            barCodes = barCodes ? barCodes + ' ' + inventItemBarcode.itemBarCode : inventItemBarcode.itemBarCode;
        }

        this.addFieldValue(#barCodes, _parentNode, barCodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMultiCurrency</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addMultiCurrency(XmlNode _parentNode, InventDim _inventDim = blankInventDim, boolean _priceInfoResponse = false, boolean _isOrderableValue = isOrderable)
    {
        Price                       unitPrice, listPrice, discValue;
        ErrorMsg                    errorMsgSave = errorMsg;
        ExchangeRateCurrencyPair    exchangeRateCurrencyPair;
        CurrencyCode                exchCurrencyCode;
        Currency                    exchCurrency;
        container                   currencyList;
        XmlNode                     priceNode;        

        currencyList += Currency::find(custTable.Currency).CurrencyCodeISO;

        while select ToCurrencyCode, FromCurrencyCode from exchangeRateCurrencyPair
            where exchangeRateCurrencyPair.ExchangeRateType  == Ledger::defaultExchangeRateType(CompanyInfo::current()) &&
                 (exchangeRateCurrencyPair.FromCurrencyCode == custTable.Currency ||
                  exchangeRateCurrencyPair.ToCurrencyCode   == custTable.Currency)
        {
            exchCurrencyCode = exchangeRateCurrencyPair.FromCurrencyCode == custTable.Currency ? exchangeRateCurrencyPair.ToCurrencyCode : exchangeRateCurrencyPair.FromCurrencyCode;
            exchCurrency     = Currency::find(exchCurrencyCode);

            if(!conFind(currencyList, exchCurrency.CurrencyCodeISO) && (exchCurrencyCode == Ledger::accountingCurrency() || this.checkValidationRules(exchCurrency)))
            {
                if(_priceInfoResponse)
                {
                    priceNode = _parentNode.appendChild(resultXml.createElement(#price));

                    [unitPrice, listPrice, discValue] = this.calcItemPrices(true, true, exchCurrencyCode, _inventDim);

                    this.initDefaultPriceFields(priceNode, unitPrice, listPrice, discValue, exchCurrency.CurrencyCodeISO, _isOrderableValue && !errorMsg, _inventDim.inventDimId);

                    if(errorMsg)
                    {
                        this.addFieldValue(#nonOrderableReason, priceNode, errorMsg);
                        errorMsg = '';
                    }
                }
                else
                {
                    this.addFieldValue(#price + '_' + exchCurrency.CurrencyCodeISO, _parentNode, conpeek(this.calcItemPrices(true, false, exchCurrencyCode, _inventDim), 1));
                }
                currencyList += exchCurrency.CurrencyCodeISO;
            }
        }

        errorMsg = errorMsgSave; //all errors skiped for multicurrency exchange rates, no reason to handle it, for now.
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPriceFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultPriceFields(XMLnode _priceNode, Price _unitPrice, Price _listPrice, Price _discValue, CurrencyCodeISO _currencyCode, boolean _isOrderable, InventDimId _inventDimId)
    {
        this.addFieldValue(#productId, _priceNode, inventTable.itemId);
        this.addFieldValue(#price, _priceNode, _unitPrice);
        this.addFieldValue(#listPrice, _priceNode, this.calcBaseItemPrice(_unitPrice, _listPrice, _discValue));
        this.addFieldValue(#currencyId, _priceNode, _currencyCode);
        this.addFieldValue(#unitOfMeasureId, _priceNode, parmUnitId ? parmUnitId : inventTable.salesUnitId());
        this.addFieldValue(#isOrderable, _priceNode, _isOrderable);

        if(_inventDimId && _inventDimId != blankInventDim.inventDimId)
        {
            this.addFieldValue(#variantId, _priceNode, _inventDimId);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdDimCombinationTranslations</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addProdDimCombinationTranslations(String50 _fieldName, XmlNode _parentNode, EcoResProductMasterDimensionValueId _product)
    {
        EcoResProductMasterDimValueTranslation  inventTxt;
        SC_LanguageParametersTable              languageParametersTable;        
                
        while select Name, LanguageId from inventTxt
            index hint ProductMasterDimValueLanguageIDx
            where inventTxt.ProductMasterDimensionValue == _product
            exists join TableId from languageParametersTable
                where languageParametersTable.LanguageId == inventTxt.LanguageId
        {
            this.addFieldValue(_fieldName + '_' + int2str(this.language2LocaleId(inventTxt.LanguageId)), _parentNode, inventTxt.Name);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDescriptions</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addProductDescriptions(XmlNode _parentNode)
    {   
        EcoResProductTranslation    inventTxt;
        SC_LanguageParametersTable  languageParametersTable;        
     
        //extended texts - Description
        if(!inventTable.SC_HideDescription)
        {
            while select Description, LanguageId from inventTxt
                index hint ProductLanguageIdx
                where inventTxt.Product == inventTable.Product && inventTxt.Description
                exists join TableId from languageParametersTable
                    where languageParametersTable.LanguageId == inventTxt.LanguageId
            {
                this.addFieldValue(#description + '_' + int2str(this.language2LocaleId(inventTxt.LanguageId)), _parentNode, inventTxt.Description);
            }     
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensions</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addProductDimensions(XmlNode _parentNode)
    {
        EcoResProductMaster              ecoResProductMaster = EcoResProductMaster::find(inventTable.Product);
        EcoResProductMasterColor         ecoResProductMasterColor;
        EcoResProductMasterConfiguration ecoResProductMasterConfiguration;
        EcoResProductMasterSize          ecoResProductMasterSize;
        EcoResProductMasterStyle         ecoResProductMasterStyle;
        XmlNode                          componentsNode, groupNode, componentNode;
        List                             productDimensions;
        ListEnumerator                   leDim;
        SysDictField                     dictDimField;
        Name                             componentName, componentDescription;        

        if(inventTable.hasProductDimensions())
        {
            productDimensions = InventDimGroupSetup::newDimensionGroups(inventTable.productDimensionGroup(), 0, 0).ecoResProductDimGroupSetup().activeDimensionFields();
            this.addFieldValue(#variantComponentsCount, _parentNode, productDimensions.elements());
        }

        if(loadRelatedSkus && productDimensions)
        {
            componentsNode    = _parentNode.appendChild(resultXml.createElement(#variantComponents));
            leDim             = productDimensions.getEnumerator();

            while(leDim.moveNext())
            {
                groupNode     = componentsNode.appendChild(resultXml.createElement(#group));
                dictDimField  = new SysDictField(tableNum(InventDim), leDim.current());

                this.addFieldValue(#id, groupNode, dictDimField.name());
                this.addFieldValue(#bigName, groupNode, dictDimField.label());
                this.addProductDimensionTranslation(groupNode, dictDimField);

                switch(leDim.current())
                {
                    case fieldNum(InventDim, InventColorId):
                        while select Color, RecId, SC_SortNumColor from ecoResProductMasterColor
                            order by SC_SortNumColor
                            where ecoResProductMasterColor.ColorProductMaster == ecoResProductMaster.RecId
                        {
                            componentNode        = groupNode.appendChild(resultXml.createElement(#variantComponent));
                            componentName        = EcoResColor::find(ecoResProductMasterColor.Color).Name;
                            componentDescription = EcoResProductMasterDimValueTranslation::getDescriptionOrDefaultDescription(ecoResProductMasterColor.RecId, CompanyInfo::languageId());

                            this.initDefaultComponentFields(componentNode, componentName, componentDescription ? componentDescription : componentName, ecoResProductMasterColor.RecId, ecoResProductMasterColor.SC_SortNumColor);
                        }
                        break;
                    case fieldNum(InventDim, InventSizeId):
                        while select Size, RecId, SC_SortNumSize from ecoResProductMasterSize
                            order by SC_SortNumSize
                            where ecoResProductMasterSize.SizeProductMaster == ecoResProductMaster.RecId
                        {
                            componentNode        = groupNode.appendChild(resultXml.createElement(#variantComponent));
                            componentName        = EcoResSize::find(ecoResProductMasterSize.Size).Name;
                            componentDescription = EcoResProductMasterDimValueTranslation::getDescriptionOrDefaultDescription(ecoResProductMasterSize.RecId, CompanyInfo::languageId());

                            this.initDefaultComponentFields(componentNode, componentName, componentDescription ? componentDescription : componentName, ecoResProductMasterSize.RecId, ecoResProductMasterSize.SC_SortNumSize);                            
                        }
                        break;
                    case fieldNum(InventDim, ConfigId):
                        while select Configuration, RecId, SC_SortNumConfig from ecoResProductMasterConfiguration
                            order by SC_SortNumConfig
                            where ecoResProductMasterConfiguration.ConfigProductMaster == ecoResProductMaster.RecId
                        {
                            componentNode        = groupNode.appendChild(resultXml.createElement(#variantComponent));
                            componentName        = EcoResConfiguration::find(ecoResProductMasterConfiguration.Configuration).Name;
                            componentDescription = EcoResProductMasterDimValueTranslation::getDescriptionOrDefaultDescription(ecoResProductMasterConfiguration.RecId, CompanyInfo::languageId());

                            this.initDefaultComponentFields(componentNode, componentName, componentDescription ? componentDescription : componentName, ecoResProductMasterConfiguration.RecId, ecoResProductMasterConfiguration.SC_SortNumConfig);
                        }
                        break;
                    case fieldNum(InventDim, InventStyleId):
                        while select Style, RecId, SC_SortNumStyle from ecoResProductMasterStyle
                            order by SC_SortNumStyle
                            where ecoResProductMasterStyle.StyleProductMaster == ecoResProductMaster.RecId
                        {
                            componentNode        = groupNode.appendChild(resultXml.createElement(#variantComponent));
                            componentName        = EcoResStyle::find(ecoResProductMasterStyle.Style).Name;
                            componentDescription = EcoResProductMasterDimValueTranslation::getDescriptionOrDefaultDescription(ecoResProductMasterStyle.RecId, CompanyInfo::languageId());

                            this.initDefaultComponentFields(componentNode, componentName, componentDescription ? componentDescription : componentName, ecoResProductMasterStyle.RecId, ecoResProductMasterStyle.SC_SortNumStyle);                            
                        }
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultComponentFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultComponentFields(XmlNode _componentNode, Name _componentName, Name _componentDescription, RefRecId _product, Integer _sortNum)
    {
        this.addFieldValue(#id, _componentNode, _componentName);
        this.addFieldValue(#bigName, _componentNode, _componentDescription);
        this.addProdDimCombinationTranslations(#bigName, _componentNode, _product);
        this.addFieldValue(#sortId, _componentNode, _sortNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensionsCombination</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addProductDimensionsCombination(XmlNode _parentNode, InventDim _inventDim)
    {
        XmlNode         componentsNode;
        Xmlelement      componentNode;
        List            productDimensions;
        ListEnumerator  leDim;        

        componentsNode    = _parentNode.appendChild(resultXml.createElement(#components));
        productDimensions = InventDimGroupSetup::newDimensionGroups(inventTable.productDimensionGroup(), 0, 0).ecoResProductDimGroupSetup().activeDimensionFields();
        leDim             = productDimensions.getEnumerator();

        while(leDim.moveNext())
        {
            componentNode = componentsNode.appendChild(resultXml.createElement(#component));
            componentNode.setAttribute(#key, fieldId2name(tableNum(InventDim), leDim.current()));
            componentNode.setAttribute(#value, _inventDim.(leDim.current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensionTranslation</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addProductDimensionTranslation(XmlNode _parentNode, SysDictField _dictDimField)
    {
        SC_LanguageParametersTable languageParametersTable;
        String255                  labelText, localeId;
        container                  cachedValues;
        int                        c;        

        cachedValues = globalCache.get(classId2Name(classIdGet(this)), int2str(_dictDimField.id()) + #id, conNull());

        if(cachedValues == conNull())
        {
            while select languageParametersTable
            {
                labelText = SysLabel::labelId2String(_dictDimField.labelLabel(), languageParametersTable.LanguageId);

                if(!strFind(labelText, '@', 1, strLen(labelText)))
                {
                    this.addFieldValue(#bigName + '_' + int2str(languageParametersTable.LocaleId), _parentNode, labelText);

                    cachedValues += [[int2str(languageParametersTable.LocaleId), labelText]];
                    globalCache.set(classId2Name(classIdGet(this)), int2str(_dictDimField.id()) + #id, cachedValues);
                }
            }
        }
        else
        {
            for(c=1;c<=conLen(cachedValues);c++)
            {
                [localeId, labelText] = conPeek(cachedValues, c);
                this.addFieldValue(#bigName + '_' + localeId, _parentNode, labelText);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductTranslations</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addProductTranslations(String50 _fieldName, XmlNode _parentNode, EcoResProductRecId _product = inventTable.Product)
    {
        EcoResProductTranslation    inventTxt;
        SC_LanguageParametersTable  languageParametersTable;        

        while select Name, LanguageId from inventTxt
            index hint ProductLanguageIdx
            where inventTxt.Product == _product && inventTxt.Name
            exists join TableId from languageParametersTable
                where languageParametersTable.LanguageId == inventTxt.LanguageId
        {
            this.addFieldValue(_fieldName + '_' + int2str(this.language2LocaleId(inventTxt.LanguageId)), _parentNode, inventTxt.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductVariant</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addProductVariant(XmlNode _parentNode)
    {
        boolean                 someVariantOrderable, isRetailKit;
        XmlNode                 variants, variant;
        InventDimCombination    inventDimCombination;                

        variants = _parentNode.appendChild(resultXml.createElement(#variants));

        if(loadRelatedSkus)
        {
            if(isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                isRetailKit = RetailKit::existByProductMaster(inventTable.Product);
            }

            while select inventDimCombination
                where inventDimCombination.ItemId == inventTable.itemId &&
                      inventDimCombination.SC_VisibleInWebShop
            {
                variant              = variants.appendChild(resultXml.createElement(#variant));                
                someVariantOrderable = this.initVariantDefaultFields(variant, inventDimCombination, isRetailKit) || someVariantOrderable;
            }

            if(inventTable.hasProductDimensions())
            {
                isOrderable = isOrderable && (someVariantOrderable || inventTable.SC_ConfiguratorModel); //update main product orderability status
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariantDefaultFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean initVariantDefaultFields(XmlNode _variant, InventDimCombination _inventDimCombination, boolean _isRetailKit)
    {
        InventDim                           inventDimLocal; 
        EcoResProductVariantDimensionValue  ecoResProductVariantDimensionValue;
        Price                               unitPrice, listPrice, discValue;
        boolean                             variantOrderable;
        XmlNode                             materialsNode;

        inventDimLocal = _inventDimCombination.inventDim();

        this.addFieldValue(#id, _variant, _inventDimCombination.InventDimId);
        this.addFieldValue(#title, _variant, this.findVariantDescription(_inventDimCombination));
        this.addProductTranslations(#title, _variant, _inventDimCombination.DistinctProductVariant);
                
        if(calculateSkuPrices)
        {
            [unitPrice, listPrice, discValue] = this.calcItemPrices(true, true, custTable.Currency, inventDimLocal);

            this.addFieldValue(#price, _variant, unitPrice);

            if(multiCurrency)
            {
                this.addFieldValue(#price + '_' + Currency::find(custTable.Currency).CurrencyCodeISO, _variant, unitPrice);
                this.addMultiCurrency(_variant, inventDimLocal);
            }
                
            this.addFieldValue(#listPrice, _variant, this.calcBaseItemPrice(unitPrice, listPrice, discValue));
        }
  
        if(calculateSkuInventory)
        {
            this.addFieldValue(#inventory, _variant, this.calcInventory(inventDimLocal));
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            select firstOnly RecId from ecoResProductVariantDimensionValue
                where ecoResProductVariantDimensionValue.DistinctProductVariant == _inventDimCombination.DistinctProductVariant &&
                      ecoResProductVariantDimensionValue.RetailWeight;

            this.addFieldValue(#grossWeight, _variant, (ecoResProductVariantDimensionValue ? EcoResDistinctProductVariant::find(_inventDimCombination.DistinctProductVariant).RetaiTotalWeight : 0) + inventTable.grossWeight());
        }

        variantOrderable = this.checkProductOrderability(_variant, inventDimLocal);        

        this.addFieldValue(#isOrderable, _variant, variantOrderable);
                
        this.addItemBarCodes(_variant, inventDimLocal);
        this.addProductDimensionsCombination(_variant, inventDimLocal);
        materialsNode = this.addBOM(_variant, inventDimLocal);
                
        if(webShopsTable.EnableProdAttachments)
        {
            this.addAttachments(_variant, _inventDimCombination.RecId, _inventDimCombination.TableId);
        }

        if(_isRetailKit)
        {
            this.addRetailKit(materialsNode, _inventDimCombination.DistinctProductVariant);
        }

        return variantOrderable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRelatedProducts</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addRelatedProducts(XmlNode _parentNode)
    {
        EcoResProductRelationTable  relatedItemsTable;
        String30                    relationType;
        XmlNode                     relatedProductsNode;
        Xmlelement                  relatedProductNode;
        container                   relationList;        

        relatedProductsNode = _parentNode.appendChild(resultXml.createElement(#relatedProducts));

        while select Product2, ProductRelationType from relatedItemsTable
            order by SC_SortNum
            where relatedItemsTable.Product1 == inventTable.Product
        {
            inventTable = InventTable::findByProduct(relatedItemsTable.Product2);

            if(!inventTable)
            {
                continue;
            }

            this.inventTableWebshopFilters();

            if(inventTable)
            {
                relationType = (select firstOnly Name from EcoResProductRelationType where EcoResProductRelationType.RecId == relatedItemsTable.ProductRelationType).Name;

                if(!conFind(relationList, [inventTable.ItemId, relationType]))
                {
                    relatedProductNode = relatedProductsNode.appendChild(resultXml.createElement(#relatedProduct));
                    relationList      += [[inventTable.ItemId, relationType]];

                    relatedProductNode.setAttribute(#idLow, inventTable.ItemId);
                    relatedProductNode.setAttribute(#type, relationType);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRetailKit</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addRetailKit(XmlNode _parentNode, RefRecId _distinctProductVariant)
    {
        RetailKitVariantComponent   retailKitVariantComponent;
        XmlNode                     materialNode;                

        if(isOrderable && !webShopsTable.DisableBOM)
        {
            while select retailKitVariantComponent
                where retailKitVariantComponent.KitVariant == _distinctProductVariant
            {
                materialNode = _parentNode.appendChild(resultXml.createElement(#material));

                this.initDefaultRetailKitFields(materialNode, retailKitVariantComponent);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultRetailKitFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultRetailKitFields(XmlNode _materialNode, RetailKitVariantComponent _retailKitVariantComponent)
    {
        InventTable             inventTableLocal;
        InventDimCombination    inventDimCombination;

        inventTableLocal = InventTable::findByProduct(_retailKitVariantComponent.Component);

        if(!inventTableLocal)
        {
            inventDimCombination = InventDimCombination::findByDistinctProductVariant(_retailKitVariantComponent.Component);
            inventTableLocal     = inventDimCombination.inventTable();
        }

        this.addFieldValue(#productId, _materialNode, inventTableLocal.ItemId);
        this.addFieldValue(#title, _materialNode, this.getProductName(inventTableLocal));
        this.addProductTranslations(#title, _materialNode, inventTableLocal.Product);
        this.addFieldValue(#quantity, _materialNode, _retailKitVariantComponent.Quantity);

        if(inventDimCombination)
        {
            this.addFieldValue(#variantId, _materialNode, inventDimCombination.InventDimId);
            this.addFieldValue(#variantTitle, _materialNode, this.findVariantDescription(inventDimCombination));
            this.addProductTranslations(#variantTitle, _materialNode, inventDimCombination.DistinctProductVariant);
        }
        else
        {
            this.addFieldValue(#variantId, _materialNode, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesQtyDefaults</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addSalesQtyDefaults(XmlNode _parentNode, SalesUnit _unitId = '')
    {
        InventDim               storageDim;
        InventItemOrderSetupMap inventItemOrderSetupMap;
        UnitOfMeasureRecId      fromUnitRecId, toUnitRecId;
        Qty                     lowestQty, highestQty, multipleQty, standardQty;
        SalesUnit               salesUnit = inventTable.salesUnitId();     
      
        try
        {
            storageDim              = InventDim::findDim(this.setProductStorageDim());
            inventItemOrderSetupMap = InventItemOrderSetupMap::find(inventtable.ItemId, InventItemOrderSetupType::Sales, storageDim.inventDimId, false, inventtable);
        }
        catch
        {
            return;
        }

        if(_unitId && salesUnit != _unitId)
        {
            fromUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(salesUnit);
            toUnitRecId   = UnitOfMeasure::unitOfMeasureIdBySymbol(_unitId);
                        
            lowestQty     = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, blankInventDim.inventDimId, inventItemOrderSetupMap.lowestQty(), fromUnitRecId, toUnitRecId, NoYes::Yes);
            highestQty    = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, blankInventDim.inventDimId, inventItemOrderSetupMap.highestQty(), fromUnitRecId, toUnitRecId, NoYes::Yes);
            multipleQty   = EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, blankInventDim.inventDimId, inventItemOrderSetupMap.multipleQty(), fromUnitRecId, toUnitRecId, NoYes::Yes);
            standardQty   = inventItemOrderSetupMap.StandardQty ? inventItemOrderSetupMap.StandardQty() : InventItemSalesSetup::find(inventTable.ItemId, blankInventDim.inventDimId).StandardQty;
            standardQty   = standardQty ? EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId, blankInventDim.inventDimId, standardQty, fromUnitRecId, toUnitRecId, NoYes::Yes) : 0;
        }
        else
        {
            lowestQty     = inventItemOrderSetupMap.lowestQty();
            highestQty    = inventItemOrderSetupMap.highestQty();
            multipleQty   = inventItemOrderSetupMap.multipleQty();
            standardQty   = inventItemOrderSetupMap.StandardQty ? inventItemOrderSetupMap.StandardQty() : InventItemSalesSetup::find(inventTable.ItemId, blankInventDim.inventDimId).StandardQty;
        }        

        if(multipleQty)
        {
            lowestQty     = round(lowestQty + multipleQty / 2.00001, multipleQty);
            highestQty    = roundDown(highestQty + multipleQty / 2.00001, multipleQty);
            standardQty   = round(standardQty + multipleQty / 2.00001, multipleQty);
        }

        if(!multipleQty && PdsGlobal::pdsIsCWItem(inventTable.ItemId))
        {
            multipleQty = PdsCatchWeight::inventQty(inventTable.ItemId, 1, _unitId);
        }
 
        if(lowestQty)
        {
            this.addFieldValue(#minimumQuantity, _parentNode, lowestQty);
        }

        if(highestQty)
        {
            this.addFieldValue(#maximumQuantity, _parentNode, highestQty);
        }

        if(multipleQty)
        {
            this.addFieldValue(#quantityStep, _parentNode, multipleQty);
        }

        if(standardQty)
        {
            this.addFieldValue(#defaultQuantity, _parentNode, standardQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUOM</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addUOM(XmlNode _parentNode, UnitOfMeasure _unitOfMeasure)
    {
        UnitOfMeasureTranslation    unitOfMeasureTranslation;
        container                   cachedValues;
        Description                 unitDescription;
        Name                        localeId;
        int                         c;
        WHSPhysDimUOM               WHSPhysDimUOM;
        SC_LanguageParametersTable  languageParametersTable;  
        UnitOfMeasureRecId          inventUnitRecId;
        Qty                         baseQty;

        if(_unitOfMeasure)
        {
            node         = _parentNode.appendChild(resultXml.createElement(#unitOfMeasure));
            cachedValues = globalCache.get(classId2Name(classIdGet(this)), _unitOfMeasure.Symbol + #value, conNull());

            this.addFieldValue(#id, node, _unitOfMeasure.Symbol);

            if(cachedValues == conNull())
            {
                unitDescription = UnitOfMeasureTranslation::findByTranslation(_unitOfMeasure.RecId, CompanyInfo::languageId()).Description;
                this.addFieldValue(#description, node, unitDescription);

                globalCache.set(classId2Name(classIdGet(this)), _unitOfMeasure.Symbol + #value, [unitDescription]);
            }
            else
            {
                this.addFieldValue(#description, node, conPeek(cachedValues, 1));
            }

            cachedValues = globalCache.get(classId2Name(classIdGet(this)), _unitOfMeasure.Symbol + #description, conNull());

            if(cachedValues == conNull())
            {
                while select unitOfMeasureTranslation
                    where unitOfMeasureTranslation.UnitOfMeasure == _unitOfMeasure.RecId
                    exists join TableId from languageParametersTable
                        where languageParametersTable.LanguageId == unitOfMeasureTranslation.LanguageId
                {
                    localeId = int2str(this.language2LocaleId(unitOfMeasureTranslation.LanguageId));
                    this.addFieldValue(#description + '_' + localeId, node, unitOfMeasureTranslation.Description);

                    cachedValues += [[localeId, unitOfMeasureTranslation.Description]];
                    globalCache.set(classId2Name(classIdGet(this)), _unitOfMeasure.Symbol + #description, cachedValues);
                }
            }
            else
            {
                for(c=1;c<=conLen(cachedValues);c++)
                {
                    [localeId, unitDescription] = conPeek(cachedValues, c);
                    this.addFieldValue(#description + '_' + localeId, node, unitDescription);
                }
            }

            if(isConfigurationKeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                WHSPhysDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(inventTable.ItemId, _unitOfMeasure.Symbol);
                
                if(WHSPhysDimUOM.Width || WHSPhysDimUOM.Height || WHSPhysDimUOM.Depth)
                {
                    this.addFieldValue(#length, node, WHSPhysDimUOM.Depth);
                    this.addFieldValue(#width, node, WHSPhysDimUOM.Width);
                    this.addFieldValue(#height, node, WHSPhysDimUOM.Height);
                    this.addFieldValue(#grossWeight, node, WHSPhysDimUOM.Weight);
                }
            }

            inventUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId());

            if(inventUnitRecId != _unitOfMeasure.RecId)
            {
                baseQty = UnitOfMeasureConverter::convert(1, _unitOfMeasure.RecId, inventUnitRecId, NoYes::Yes, inventTable.Product);
                this.addFieldValue(#baseQuantity, node, baseQty);
            }

            this.addSalesQtyDefaults(node, _unitOfMeasure.Symbol);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBaseUOM</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addBaseUOM(XmlNode _parentNode)
    {
        UnitOfMeasureTranslation    unitOfMeasureTranslation;
        container                   cachedValues;
        Description                 unitDescription;
        Name                        localeId;
        int                         c;
        WHSPhysDimUOM               WHSPhysDimUOM;
        SC_LanguageParametersTable  languageParametersTable;
        UnitOfMeasure               baseUnitOfMeasure = UnitOfMeasure::findBySymbol(inventTable.inventUnitId());

        node         = _parentNode.appendChild(resultXml.createElement(#baseunitOfMeasure));
        cachedValues = globalCache.get(classId2Name(classIdGet(this)), baseUnitOfMeasure.Symbol + #value, conNull());

        this.addFieldValue(#id, node, baseUnitOfMeasure.Symbol);

        if(cachedValues == conNull())
        {
            unitDescription = UnitOfMeasureTranslation::findByTranslation(baseUnitOfMeasure.RecId, CompanyInfo::languageId()).Description;
            this.addFieldValue(#description, node, unitDescription);

            globalCache.set(classId2Name(classIdGet(this)), baseUnitOfMeasure.Symbol + #value, [unitDescription]);
        }
        else
        {
            this.addFieldValue(#description, node, conPeek(cachedValues, 1));
        }

        cachedValues = globalCache.get(classId2Name(classIdGet(this)), baseUnitOfMeasure.Symbol + #description, conNull());

        if(cachedValues == conNull())
        {
            while select unitOfMeasureTranslation
            where unitOfMeasureTranslation.UnitOfMeasure == baseUnitOfMeasure.RecId
            exists join TableId from languageParametersTable
                where languageParametersTable.LanguageId == unitOfMeasureTranslation.LanguageId
            {
                localeId = int2str(this.language2LocaleId(unitOfMeasureTranslation.LanguageId));
                this.addFieldValue(#description + '_' + localeId, node, unitOfMeasureTranslation.Description);

                cachedValues += [[localeId, unitOfMeasureTranslation.Description]];
                globalCache.set(classId2Name(classIdGet(this)), baseUnitOfMeasure.Symbol + #description, cachedValues);
            }
        }
        else
        {
            for(c=1;c<=conLen(cachedValues);c++)
            {
                [localeId, unitDescription] = conPeek(cachedValues, c);
                this.addFieldValue(#description + '_' + localeId, node, unitDescription);
            }
        }

        if(isConfigurationKeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            WHSPhysDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(inventTable.ItemId, baseUnitOfMeasure.Symbol);

            if(WHSPhysDimUOM.Width || WHSPhysDimUOM.Height || WHSPhysDimUOM.Depth)
            {
                this.addFieldValue(#length, node, WHSPhysDimUOM.Depth);
                this.addFieldValue(#width, node, WHSPhysDimUOM.Width);
                this.addFieldValue(#height, node, WHSPhysDimUOM.Height);
                this.addFieldValue(#grossWeight, node, WHSPhysDimUOM.Weight);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUOMConvertions</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addUOMConvertions(XmlNode _parentNode)
    {
        UnitOfMeasureSymbol unitId = inventTable.inventUnitId();
        XmlNode             units;
        Query               query;
        QueryRun            queryRunLocal;
        UnitOfMeasure       unitOfMeasure;
        container           cachedValues;
        int                 c;      
        UnitOfMeasureRecId  salesUnitRecId;
        UnitOfMeasureSymbol salesUnitId = inventTable.salesUnitId();

        units = _parentNode.appendChild(resultXml.createElement(#unitsOfMeasure));

        if(unitId && !webShopsTable.DisableUOM)
        {
            if(!UnitOfMeasureConversion::existsProductSpecificConversion(inventTable.Product))
            {
                cachedValues = globalCache.get(classId2Name(classIdGet(this)), unitId + salesUnitId, conNull());
            }

            if(cachedValues == conNull())
            {
                salesUnitRecId  = UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.salesUnitId());
                unitOfMeasure   = UnitOfMeasure::findBySymbol(unitId);                
                query           = UnitOfMeasureConverter::convertibleUnitsQuery(unitOfMeasure.RecId, inventTable.Product);
                queryRunLocal   = new QueryRun(query);

                while(queryRunLocal.next())
                {
                    unitOfMeasure = queryRunLocal.get(tableNum(UnitOfMeasure));
                    unitOfMeasure.reread(); //refresh cached unit data

                    if(unitOfMeasure.Symbol == inventTable.salesUnitId() || this.checkValidationRules(unitOfMeasure)) //main sales unit should allways be returned
                    {
                        if(UnitOfMeasureConverter::canBeConverted(salesUnitRecId, unitOfMeasure.RecId, inventTable.Product)) //check because query may return not convertible interclass UOMs
                        {
                            this.addUOM(units, unitOfMeasure);

                            if(!UnitOfMeasureConversion::existsProductSpecificConversion(inventTable.Product))
                            {
                                cachedValues += [buf2Con(unitOfMeasure)];
                                globalCache.set(classId2Name(classIdGet(this)), unitId + salesUnitId, cachedValues);
                            }
                        }
                    }
                }
            }
            else
            {
                for(c=1;c<=conLen(cachedValues);c++)
                {
                    this.addUOM(units, con2Buf(conPeek(cachedValues, c), unitOfMeasure));
                }
            }
        }
        else
        {
            this.addUOM(units, UnitOfMeasure::findBySymbol(unitId));
        }

        this.addBaseUOM(_parentNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVisibilityRules</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void addVisibilityRules(XmlNode _parentNode)
    {
        SC_ItemVisibilityRulesTable  itemVisibilityRules;
        XmlNode                      visibilityRules;
        Xmlelement                   rule;
        InventItemGroupItem          inventItemGroupItem;        
        container                    visibilityRulesCon;
        Query                        query;
        QueryBuildDataSource         queryBuildDataSource;
        QueryRun                     queryRunLocal;
        InventTable                  inventTableLocal;
        EcoResCategory               ecoResCategory, ecoResCategory2;
        EcoResProductCategory        ecoResProductCategory;

        visibilityRules = _parentNode.appendChild(resultXml.createElement(#visibilityRules));

        //all rules for single item
        while select AccountCode, AccountRelation, Mode from itemVisibilityRules
            where itemVisibilityRules.ItemCode == SC_TableGroupCategory::Table &&
                  itemVisibilityRules.ItemRelation == inventTable.ItemId &&
                  itemVisibilityRules.WebShopId == webshopsTable.WebShopId
        {
            if(!conFind(visibilityRulesCon, enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode)))
            {
                rule = visibilityRules.appendChild(resultXml.createElement(#rule));

                this.initVisibilityRulesDefaultFields(rule, itemVisibilityRules);
                visibilityRulesCon += enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode);
            }
        }

        //all rules for item group
        while select AccountCode, AccountRelation, Mode from itemVisibilityRules
            where itemVisibilityRules.ItemCode == SC_TableGroupCategory::Group &&
                  itemVisibilityRules.WebShopId == webshopsTable.WebShopId
            exists join inventItemGroupItem
                where inventItemGroupItem.ItemId == inventTable.ItemId &&
                      inventItemGroupItem.ItemGroupId == itemVisibilityRules.ItemRelation
        {
            if(!conFind(visibilityRulesCon, enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode)))
            {
                rule = visibilityRules.appendChild(resultXml.createElement(#rule));

                this.initVisibilityRulesDefaultFields(rule, itemVisibilityRules);
                visibilityRulesCon += enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode);
            }
        }

        //all rules for item category
        while select AccountCode, AccountRelation, Mode, ItemRelation from itemVisibilityRules
            where itemVisibilityRules.ItemCode == SC_TableGroupCategory::Category &&
                  itemVisibilityRules.WebShopId == webshopsTable.WebShopId
            exists join TableId from ecoResCategory2
                where ecoResCategory2.RecId == itemVisibilityRules.ItemCategoryRelation
            exists join TableId from ecoResCategory
                where ecoResCategory.CategoryHierarchy == ecoResCategory2.CategoryHierarchy &&
                      ecoResCategory.NestedSetLeft >= ecoResCategory2.NestedSetLeft &&
                      ecoResCategory.NestedSetRight <= ecoResCategory2.NestedSetRight
            exists join TableId from ecoResProductCategory
                where ecoResProductCategory.Category == ecoResCategory.RecId &&
                      ecoResProductCategory.Product == inventTable.Product
        {   
            if(!conFind(visibilityRulesCon, enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode)))
            {
                rule = visibilityRules.appendChild(resultXml.createElement(#rule));

                this.initVisibilityRulesDefaultFields(rule, itemVisibilityRules);
                visibilityRulesCon += enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode);
            }
        }

        //all rules for custom item field
        while select AccountRelation, AccountCode, Mode, ItemRelation, Value from itemVisibilityRules
            where itemVisibilityRules.ItemCode == SC_TableGroupCategory::ItemField &&
                  itemVisibilityRules.WebShopId == webshopsTable.WebShopId &&
                  itemVisibilityRules.ItemRelation
        {          
            if(!conFind(visibilityRulesCon, enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode)))
            {                
                query = new Query();
                queryBuildDataSource = query.addDataSource(tableNum(InventTable));
                queryBuildDataSource.addRange(fieldName2id(tableNum(InventTable), itemVisibilityRules.ItemRelation)).value(itemVisibilityRules.Value);                
                queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(InventTable));
                queryBuildDataSource.addLink(fieldnum(InventTable, ItemId), fieldnum(InventTable, ItemId));
                queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource.addRange(fieldnum(InventTable, ItemId)).value(inventTable.ItemId);

                queryRunLocal = new QueryRun(query);
                queryRunLocal.next();

                inventTableLocal = queryRunLocal.get(tablenum(InventTable));

                if(inventTableLocal)
                {
                    rule = visibilityRules.appendChild(resultXml.createElement(#rule));

                    this.initVisibilityRulesDefaultFields(rule, itemVisibilityRules);
                    visibilityRulesCon += enum2str(itemVisibilityRules.AccountCode) + itemVisibilityRules.AccountRelation + enum2str(itemVisibilityRules.Mode);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVisibilityRulesDefaultFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initVisibilityRulesDefaultFields(Xmlelement _rule, SC_ItemVisibilityRulesTable _itemVisibilityRules)
    {
        _rule.setAttribute(#customerType, _itemVisibilityRules.AccountCode == SC_TableGroup::Table ? #customer : #customerGroup);
        _rule.setAttribute(#customerId, _itemVisibilityRules.AccountRelation);
        _rule.setAttribute(#mode, _itemVisibilityRules.Mode == SC_AllowDeny::Deny ? #deny : #allow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItemFormData</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Replaceable]
    server container calcItemFormData(InventTable _inventTable, CustTable _custTable, SC_WebshopId _websiteId, InventDimCombination _inventDimCombination = null)
    {
        Price       unitPrice, listPrice, discValue;
        Qty         inventory;        
        InventDim   variantDim = _inventDimCombination ? _inventDimCombination.inventDim() : null;
        
        this.setCustTable(_custTable);
        this.setInventTable(_inventTable);
        this.setErrorMsg('');
        this.setWebsite(_websiteId);

        [unitPrice, listPrice, discValue] = this.calcItemPrices(true, true, _custTable.Currency, variantDim ? variantDim : InventDim::findOrCreateBlank());
        listPrice = this.calcBaseItemPrice(unitPrice, listPrice, discValue);
        inventory = this.calcInventory(variantDim);

        if(!this.checkProductOrderability(null, variantDim))
        {
            errorMsg = this.setFormErrorMsg();
        }

        if(!errorMsg && !this.checkValidationRules(_inventTable, false, true)) //check validation rules
        {
            errorMsg = this.setErrorMsg();
        }

        infolog.clear(0);

        return [unitPrice, listPrice, errorMsg, inventory];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBaseItemPrice</Name>
				<Source><![CDATA[
    [Replaceable]
    public Price calcBaseItemPrice(Price _unitPrice, Price _listPrice, Price _discValue)
    {
        Price listPrice;        

        if(webShopsTable.DefaultPrice == SC_DefaultPrice::BasePrice) //base price as default
        {
            listPrice = _listPrice ? _listPrice : _unitPrice;
        }
        else //unit price as default
        {
            listPrice = _discValue ? _unitPrice + _discValue : _unitPrice;
        }

        return listPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItemPrices</Name>
				<Source><![CDATA[
    [Replaceable]
    public container calcItemPrices(boolean _unitPrice = false, boolean _listPrice = false, CurrencyCode _currency = custTable.Currency, InventDim _inventDim = blankInventDim,
                                    TransDate _priceDiscDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Price           unitPrice, listPrice, priceExlDisc, discValue;
        PriceDisc       priceDisc;
        InventDim       inventStorageDim;
        container       cachedUnitPrice, cachedListPrice;
        SC_LargeText    cacheKey = strFmt('%1%2%3%4%5%6%7', webShopsTable.WebShopId, custTable.AccountNum, inventTable.ItemId, _currency, _inventDim.inventDimId, _priceDiscDate, (parmUnitId ? parmUnitId : inventTable.salesUnitId()));        
        
        try
        {
            if(this.isRetailEnabled())
            {
                [unitPrice, discValue] = this.calcRetailItemPrice(_currency, _inventDim);
            }
            else
            {
                if(webShopsTable.TemplateCustAccount == custTable.AccountNum) //check only for anonymouse customer cache in DB
                {
                    cachedUnitPrice = SC_DataCacheTable::find(cacheKey).Value;
                    cachedListPrice = cachedUnitPrice;
                    [unitPrice, listPrice, discValue] = cachedUnitPrice;
                }

                if(cachedUnitPrice == conNull())
                {
                    cachedUnitPrice        = globalCacheV2.find(classId2Name(classIdGet(this)), [#one, cacheKey]);
                    [unitPrice, discValue] = cachedUnitPrice;
        
                    cachedListPrice = globalCacheV2.find(classId2Name(classIdGet(this)), [#zero, cacheKey]);
                    [listPrice]     = cachedListPrice;
                }

                if(_unitPrice && cachedUnitPrice == conNull())
                {
                    inventStorageDim            = this.setProductStorageDim();
                    _inventDim.InventSiteId     = inventStorageDim.InventSiteId;
                    _inventDim.InventLocationId = inventStorageDim.InventLocationId;                    
                    _inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, _inventDim);

                    if(_inventDim.InventSiteId && !_inventDim.InventLocationId) //retry to search default location if site found
                    {
                        _inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, _inventDim);
                    }

                    priceDisc = this.createPriceDiscInstance(inventTable.ItemId,
                                                                _inventDim,
                                                                parmUnitId ? parmUnitId : inventTable.salesUnitId(),
                                                                1,
                                                                _unitPrice ? custTable.AccountNum : '',
                                                                _currency,
                                                                _priceDiscDate);

                    if(priceDisc.findPrice(custTable.PriceGroup))
                    {
                        priceDisc.findLineDisc(inventTable.salesLineDisc(), custTable.LineDisc);
                        unitPrice = this.calcListPriceValue(priceDisc.price(), priceDisc.priceUnit(), priceDisc.markup(), _currency);

                        if(!webShopsTable.DisablePriceDisc) //calculate price discount for 1 pcs for product page
                        {                            
                            priceExlDisc = PriceDisc::price2Amount(unitPrice, 1, priceDisc.getDiscAmount(),
                                                                    1, 1, 0, priceDisc.getDiscPercent(), _currency, 0, true);                         
                        }

                        [unitPrice, discValue] = this.calcUnitPriceDiscValues(unitPrice, priceExlDisc);

                        globalCacheV2.insert(classId2Name(classIdGet(this)), [#one, cacheKey], [unitPrice, discValue]);
                    }
                }

                if(_listPrice && cachedListPrice == conNull())
                {
                    if(priceDisc && priceDisc.findItemPrice())
                    {
                        listPrice = this.calcListPriceValue(priceDisc.price(), priceDisc.priceUnit(), priceDisc.markup(), _currency);

                        globalCacheV2.insert(classId2Name(classIdGet(this)), [#zero, cacheKey], [listPrice]);
                    }
                }
            }
        }
        catch(Exception::Error)
        {
            errorMsg = infolog.text();
            infolog.clear();
        }
           
        return [unitPrice, listPrice, discValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetailItemPrice</Name>
				<Source><![CDATA[
    [Replaceable]
    public container calcRetailItemPrice(CurrencyCode _currency, InventDim _inventDim, UnitOfMeasureSymbol _unitId = parmUnitId ? parmUnitId : inventTable.salesUnitId(), Qty _qty = 1)
    {
        Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.IPricingDataAccessor pricingManager;
        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction crtSalesTransaction;
        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine crtSalesLine;
        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesAffiliationLoyaltyTier crtSalesAffiliationLoyaltyTier;

        System.DateTimeOffset dateTimeOffset;
        System.Guid transactionId = System.Guid::NewGuid();
        CLRObject clrSalesLines, enumeratorSalesLine, clrSalesAffiliations;
                
        RetailCurrencyOperations currencyAndRoundingHelper;
        RetailTempOrderItem      tmpOrderItem;
        RetailAffiliation        retailAffiliation;
        RetailCustAffiliation    retailCustAffiliation;
        RetailChannelTable       currentChannel = this.getRetailChannelTable();        
        InventDimCombination     inventDimCombination;
        String255                lineId, transactionIdStr = transactionId.ToString('N');
        Price                    price;
        DiscAmount               discountAmount, discountPct;
        container                cacheData, cacheDataValues, cacheDataIdx;        
        SC_LargeText             cacheKey = currentChannel.RetailChannelId + custTable.AccountNum + inventTable.ItemId + _inventDim.inventDimId + _currency + _unitId + int2Str(_qty);

        cacheData = globalCacheV2.find(classId2Name(classIdGet(this)), [#one, cacheKey + #retailOffer]);

        if(cacheData == conNull())
        {                    
            crtSalesTransaction = new Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction();
            crtSalesTransaction.set_Id(transactionIdStr);
            clrSalesLines = crtSalesTransaction.get_SalesLines();

            if(loadRelatedSkus && inventTable.hasProductDimensions())
            {
                while select DistinctProductVariant, RetailVariantId, InventDimId from inventDimCombination
                    where inventDimCombination.ItemId == inventTable.ItemId &&
                            inventDimCombination.SC_VisibleInWebShop
                {                               
                    crtSalesLine = new Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine();

                    crtSalesLine.set_ItemId(inventTable.ItemId);
                    crtSalesLine.set_InventoryDimensionId(inventDimCombination.inventDimId);                    
                    crtSalesLine.set_Quantity(_qty);
                    crtSalesLine.set_SalesOrderUnitOfMeasure(_unitId);
                    crtSalesLine.set_OriginalSalesOrderUnitOfMeasure(inventTable.salesUnitId());
                    lineId = guid2str(newGuid());
                    crtSalesLine.set_LineId(lineId);

                    RetailPricingUnitOfMeasureConversionHelper::updateCrtUnitOfMeasureConversion(crtSalesLine, inventTable.itemId, _unitId, inventTable.salesUnitId());

                    crtSalesLine.set_Variant(RetailPricingEngineHelper::getProductVariant(inventDimCombination.RetailVariantId, inventTable.ItemId, inventDimCombination.inventDimId));

                    RetailPricingEngine::addToRetailTempOrderItem(tmpOrderItem, inventTable.itemId, inventDimCombination.inventDimId);

                    clrSalesLines.Add(crtSalesLine);
                }
            }
            else
            {
                crtSalesLine = new Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine();
                inventDimCombination = inventDimCombination::find(inventTable.ItemId, _inventDim.inventDimId);
               
                crtSalesLine.set_ItemId(inventTable.ItemId);
                crtSalesLine.set_InventoryDimensionId(inventDimCombination ? inventDimCombination.inventDimId : '');
                crtSalesLine.set_Quantity(_qty);
                crtSalesLine.set_SalesOrderUnitOfMeasure(_unitId);
                crtSalesLine.set_OriginalSalesOrderUnitOfMeasure(inventTable.salesUnitId());
                lineId = guid2str(newGuid());
                crtSalesLine.set_LineId(lineId);
                
                RetailPricingUnitOfMeasureConversionHelper::updateCrtUnitOfMeasureConversion(crtSalesLine, inventTable.itemId, _unitId, inventTable.salesUnitId());                              

                if(inventDimCombination)
                {
                    crtSalesLine.set_Variant(RetailPricingEngineHelper::getProductVariant(inventDimCombination.RetailVariantId, inventTable.ItemId, inventDimCombination.inventDimId));                    
                }

                RetailPricingEngine::addToRetailTempOrderItem(tmpOrderItem, inventTable.itemId, inventDimCombination ? inventDimCombination.inventDimId : '');
                clrSalesLines.Add(crtSalesLine);
            }

            crtSalesTransaction.set_IsTaxIncludedInPrice(custTable.InclTax);
            crtSalesTransaction.set_CustomerId(custTable.AccountNum);
                        
            pricingManager = new RetailPricingDataManagerV3(currentChannel.RecId, transactionIdStr, tmpOrderItem, true);
            currencyAndRoundingHelper = new RetailCurrencyOperations(CompanyInfoHelper::standardCurrency());
            dateTimeOffset = RetailPricingEngineHelper::getSessionDateTimeInChannelTimeZone(currentChannel.RecId);

            clrSalesAffiliations = crtSalesTransaction.get_AffiliationLoyaltyTierLines();

            while select CustAccountNum, RetailAffiliationId from retailCustAffiliation
                where retailCustAffiliation.CustAccountNum == custTable.AccountNum
                exists join TableId from retailAffiliation
                    where retailCustAffiliation.RetailAffiliationId == retailAffiliation.RecId
            {
                crtSalesAffiliationLoyaltyTier = new Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesAffiliationLoyaltyTier();
                crtSalesAffiliationLoyaltyTier.set_AffiliationId(retailCustAffiliation.RetailAffiliationId);
                clrSalesAffiliations.Add(crtSalesAffiliationLoyaltyTier);
            }

            Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PricingEngine::CalculatePricesForTransaction(
            crtSalesTransaction,
            pricingManager,
            currencyAndRoundingHelper,
            custTable.PriceGroup,
            _currency,
            dateTimeOffset);

            select count(RecId) from tmpOrderItem
                where tmpOrderItem.Product == inventTable.Product;

            Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PricingEngine::CalculateDiscountsForLines(
            pricingManager,
            crtSalesTransaction,
            currencyAndRoundingHelper,
            _currency,
            custTable.LineDisc,
            custTable.MultiLineDisc,
            custTable.EndDisc,
            true,
            tmpOrderItem.RecId == 1 ? Microsoft.Dynamics.Commerce.Runtime.DataModel.DiscountCalculationMode::CalculateAll : Microsoft.Dynamics.Commerce.Runtime.DataModel.DiscountCalculationMode::CalculateOffer,
            dateTimeOffset);

            clrSalesLines = crtSalesTransaction.get_SalesLines();
            enumeratorSalesLine = clrSalesLines.GetEnumerator();

            while (enumeratorSalesLine.MoveNext())
            {
                crtSalesLine = enumeratorSalesLine.get_Current();

                price = crtSalesLine.get_Price();
                discountAmount = crtSalesLine.get_DiscountAmount();
                discountPct    = discountAmount ? round(discountAmount * 100 / (price * _qty), 0.1) : 0;
                discountAmount = discountAmount / _qty;
                inventDimCombination.InventDimId = crtSalesLine.get_InventoryDimensionId();

                cacheDataValues += [[price, discountAmount, discountPct]];
                cacheDataIdx += [inventDimCombination.InventDimId ? inventDimCombination.InventDimId : _inventDim.inventDimId];
            }

            globalCacheV2.insert(classId2Name(classIdGet(this)), [#one, cacheKey + #retailOffer], [cacheDataIdx, cacheDataValues]);
        }
        else
        {
            [cacheDataIdx, cacheDataValues] = cacheData;
        }

        [price, discountAmount, discountPct] = conPeek(cacheDataValues, conFind(cacheDataIdx, _inventDim.inventDimId));

        return [price - discountAmount, discountAmount, discountPct];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnitPriceDiscValues</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcUnitPriceDiscValues(Price _unitPrice, Price _priceExlDisc)
    {
        Price discValue, unitPrice;

        discValue = _priceExlDisc ? _unitPrice - _priceExlDisc : 0;
        unitPrice = _priceExlDisc ? _priceExlDisc : _unitPrice;

        return [unitPrice, discValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcListPriceValue</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Price calcListPriceValue(Price _price, PriceUnit _priceUnit, PriceMarkup _markup, CurrencyCode _currency)
    {
        return CurrencyExchangeHelper::amount(_price / _priceUnit + abs(_markup), _currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItemTaxPercent</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Percent calcItemTaxPercent()
    {
        Percent         ret;
        TaxGroupData    taxGroupData;
        TaxOnItem       taxOnItem;        

        if(custTable && inventTable && !webShopsTable.DisableTax)
        {
            while select TaxGroup, TaxCode from taxGroupData
                index hint TaxGroupIdx
                where taxGroupData.TaxGroup      == custTable.TaxGroup
                join TaxCode from taxOnItem
                    index hint TaxItemGroupIdx
                    where taxOnItem.TaxItemGroup == InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId     &&
                          taxOnItem.TaxCode      == taxGroupData.TaxCode
            {
                ret += TaxTable::find(taxOnItem.TaxCode).showTaxValue();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductOrderability</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    public boolean checkProductOrderability(XmlNode _parentNode = null, InventDim _inventDim = null)
    {
        boolean                     ret;
        InventDimGroupSetup         inventDimGroupSetup;
        InventDimGroupFieldSetup    config, color, size, style;
        InventDim                   storageDim;
        InventDimCombination        inventDimCombLocal;
        BOMConfigRoute              BOMConfigRoute, BOMConfigRouteExist;
        BOM                         BOMLocal;
        BOMVersion                  bomVersion;
        container                   allBOMRoutes;

        try
        {
            if(!errorMsg && ExchangeRateHelper::exchRate(currencyId ? currencyId : custTable.Currency, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, false) == 0)
            {
                errorMsg = strFmt("@SYS20792", currencyId ? currencyId : custTable.Currency);
            }

            if(!errorMsg && !_inventDim) //skip this check for variants
            {
                if(!inventTable.inventModelGroupItem().RecId || !inventTable.inventItemGroupItem().RecId ||
               !inventTable.storageDimensionGroup() || !inventTable.trackingDimensionGroup() ||
               (inventTable.Product().PdsCWProduct && !PdsCatchWeightItem::find(inventTable.ItemId).PdsCWUnitId))
                {
                    errorMsg = "@SCL264";
                }
            }

            if(!errorMsg && !_inventDim) //skip this check for variants
            {
                storageDim = InventDim::findDim(this.setProductStorageDim());

                if(inventTable.inventItemSalesSetup(storageDim.inventDimId).stopped() || inventTable.inventItemInventSetup(storageDim.inventDimId).stopped())
                {
                    errorMsg = "@SCL235";
                }
            }        

            if(!errorMsg && this.isCheckStock() && (_inventDim || !inventTable.hasProductDimensions())) //stock will be checked for variant or for simple product
            {
                if(this.calcInventory(_inventDim) <= 0)
                {
                    errorMsg = "@SCL236";
                }
            }

            if(!errorMsg && _inventDim) //check only for variants
            {
                inventDimGroupSetup = InventDimGroupSetup::newItemId(inventTable.ItemId);
                config     = inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, ConfigId));
                color      = inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventColorId));
                size       = inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventSizeId));
                style      = inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventStyleId));
                        
                if((!_inventDim.configId && config.isActive() && config.isMandatory()) ||
                   (!_inventDim.InventColorId && color.isActive() && color.isMandatory()) ||
                   (!_inventDim.InventSizeId && size.isActive() && size.isMandatory()) ||
                   (!_inventDim.InventStyleId && style.isActive() && style.isMandatory()))
                {
                    errorMsg = "@SCL237";
                }
            }

            if(!errorMsg && !_inventDim && inventTable.hasProductDimensions() && !this.isProductDimensionBasedBOM() && !inventTable.SC_ConfiguratorModel)
            {
                select firstOnly RecId from inventDimCombLocal where inventDimCombLocal.ItemId == inventTable.ItemId;
                if(!inventDimCombLocal)
                {
                    errorMsg = "@SCL238";
                }

                if(!errorMsg && (select count(RecId) from inventDimCombination
                where inventDimCombination.ItemId == inventTable.itemId && inventDimCombination.SC_VisibleInWebShop).RecId == 0)
                {
                    errorMsg = "@SCL239";
                }
            }

            if(!errorMsg && !_inventDim && TaxParameters::find().CheckIntersection == CheckTaxGroups::Error &&
               !InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId)
            {
                errorMsg = "@SCL274";
            }

            if(!errorMsg && this.isProductDimensionBasedBOM())
            {
                [bomVersion] = this.findBOMVersion(storageDim);

                select firstOnly BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == bomVersion.BOMId;

                select firstOnly BOMId from BOMLocal
                exists join BOMConfigRouteExist
                where BOMConfigRouteExist.BOMId == BOMLocal.BOMId &&
                      BOMConfigRouteExist.ConfigGroupId == BOMLocal.ConfigGroupId &&
                      BOMConfigRouteExist.BOMId == bomVersion.BOMId;

                if(!BOMConfigRoute || !BOMLocal)
                {
                    errorMsg = "@SYS135235";
                }
                else
                {
                    allBOMRoutes = this.findBOMRouteCombinations(BOMConfigRoute);

                    if((select count(RecId) from inventDimCombination
                        where inventDimCombination.ItemId == inventTable.ItemId && !inventDimCombination.SC_VisibleInWebShop).RecId >= conLen(allBOMRoutes))
                    {
                        errorMsg = "@SCL239";
                    }
                }
            }
        }
        catch(Exception::Error)
        {
            errorMsg = infolog.text();
            infolog.clear();
        }

        if(errorMsg)
        {
            if(_parentNode)
            {
                this.addFieldValue(#nonOrderableReason, _parentNode, errorMsg);
            }
            else
            {
                this.setFormErrorMsg(errorMsg);
            }
        }

        ret      = !errorMsg;
        errorMsg = '';

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected PriceDisc createPriceDiscInstance(ItemId              _itemId,
                                                InventDim           _inventDim,
                                                UnitOfMeasureSymbol _unit,
                                                Qty                 _quantity,
                                                CustVendAC          _custAccount,
                                                CurrencyCode        _currency,
                                                TransDate           _priceDiscDate)
    {
        PriceDisc           priceDisc;
        PriceDiscParameters priceParameters = PriceDiscParameters::construct();

        priceParameters.parmModuleType(ModuleInventPurchSales::Sales);
        priceParameters.parmItemId(_itemId);
        priceParameters.parmInventDim(_inventDim);
        priceParameters.parmUnitID(_unit);        
        priceParameters.parmQty(_quantity);
        priceParameters.parmAccountNum(_custAccount);
        priceParameters.parmCurrencyCode(_currency);
        priceParameters.parmPriceDiscDate(_priceDiscDate);

        priceDisc = PriceDisc::newFromPriceDiscParameters(priceParameters);

        return priceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryPriceInfo</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getCategoryPriceInfo(Name _categoryName)
    {
        EcoResCategory ecoResCategoryLocal = EcoResCategory::findByName(_categoryName,
                        EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales).CategoryHierarchy).RecId);

        if(ecoResCategoryLocal)
        {
            productNode = resultNode.appendChild(resultXml.createElement(#price));

            this.addFieldValue(#productId, productNode, ecoResCategoryLocal.Name);
            this.addFieldValue(#price, productNode, ecoResCategoryLocal.SC_SalesPrice);
            this.addFieldValue(#listPrice, productNode, #zero);
            this.addFieldValue(#currencyId, productNode, Currency::find(custTable.Currency).CurrencyCodeISO);
            this.addFieldValue(#unitOfMeasureId, productNode, parmUnitId ? parmUnitId : 'ea');
            this.addFieldValue(#isOrderable, productNode, ecoResCategoryLocal.SC_VisibleInWebshop);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryStockInfo</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getCategoryStockInfo(Name _categoryName)
    {
        EcoResCategory ecoResCategoryLocal = EcoResCategory::findByName(_categoryName,
                        EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales).CategoryHierarchy).RecId);

        if(ecoResCategoryLocal)
        {
            productNode = resultNode.appendChild(resultXml.createElement(#price));

            this.addFieldValue(#productId, productNode, ecoResCategoryLocal.Name);
            this.addFieldValue(#inventory, productNode, #one);
            this.addFieldValue(#unitOfMeasureId, productNode, parmUnitId ? parmUnitId : 'ea');
            this.addFieldValue(#isOrderable, productNode, ecoResCategoryLocal.SC_VisibleInWebshop);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPriceInfo</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetPriceInfo(XmlDocument _request)
    {
        Price                       unitPrice, listPrice, discValue;
        XmlNode                     variantNode;
        InventDimCombination        inventDimCombination;
        InventDim                   inventDimLocal;
        boolean                     variantOrderable, someVariantOrderable;                
                
        this.createHeaderXml();

        this.getParameters(_request);

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        else
        {
            custTable.Currency = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty).Currency;
        }

        productsList    = _request.getElementsByTagName(#product);

        if(!webShopsTable.DisableMultiThreading && productsList.length() > 1)
        {
            this.calcProductPriceCacheAsync(productsList);
        }
        
        for(i=0;productsList && i<productsList.length();i++)
        {
            node        = productsList.item(i);
            parmUnitId  = node.getNamedElement(#unitOfMeasureId) ? node.getNamedElement(#unitOfMeasureId).innerText() : '';
            inventTable = InventTable::find(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');
            isOrderable = true;

            this.inventTableWebshopFilters();

            if(inventTable)
            {
                productNode = resultNode.appendChild(resultXml.createElement(#price));

                if(loadRelatedSkus)
                {
                    while select inventDimCombination
                       where inventDimCombination.ItemId == inventTable.itemId &&
                             inventDimCombination.SC_VisibleInWebShop
                    {
                        variantNode    = resultNode.appendChild(resultXml.createElement(#price));
                        inventDimLocal = inventDimCombination.inventDim();

                        [unitPrice, listPrice, discValue] = this.calcItemPrices(true, true, custTable.Currency, inventDimLocal);
                        variantOrderable     = this.checkProductOrderability(variantNode, inventDimLocal);
                        someVariantOrderable = someVariantOrderable || variantOrderable;

                        this.initDefaultPriceFields(variantNode, unitPrice, listPrice, discValue, Currency::find(custTable.Currency).CurrencyCodeISO, variantOrderable, inventDimCombination.InventDimId);
                                                
                        if(multiCurrency)
                        {
                            this.addMultiCurrency(resultNode, inventDimLocal, true, variantOrderable);
                        }
                        this.setWebshopDataMappingGetAPI('GetPriceInfo', inventTable);
                    }

                    if(inventTable.hasProductDimensions())
                    {
                        isOrderable = someVariantOrderable || inventTable.SC_ConfiguratorModel;
                    }
                }

                [unitPrice, listPrice, discValue] = this.calcItemPrices(true, true, custTable.Currency);

                if(this.isProductDimensionBasedBOM())
                {
                    this.initDimesionBasedBOMPriceStockFields(true, unitPrice, this.calcBaseItemPrice(unitPrice, listPrice, discValue));                    
                }

                if(isOrderable) //update main product orderability status
                {
                    this.checkValidationRules(inventTable, false, true);
                    isOrderable = this.checkProductOrderability(productNode); //check orderability for main prod
                }

                this.initDefaultPriceFields(productNode, unitPrice, listPrice, discValue, Currency::find(custTable.Currency).CurrencyCodeISO, isOrderable, '');                

                if(multiCurrency)
                {
                    this.addMultiCurrency(resultNode, blankInventDim, true);
                }
                
                this.setWebshopDataMappingGetAPI('GetPriceInfo', inventTable);
                someVariantOrderable = false;
            }
            else
            {
                this.getCategoryPriceInfo(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');
            } 
        }        

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProductPriceCacheAsync</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void calcProductPriceCacheAsync(XmlNodeList _productsList)
    {        
        InventDimCombination    inventDimCombination;        
        Generic.List<Task>      taskList = new Generic.List<Task>();
        Task[]                  allTasks;        

        for(i=0;_productsList && i<_productsList.length();i++)
        {            
            node        = _productsList.item(i);            
            inventTable = InventTable::find(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');            

            this.inventTableWebshopFilters();

            if(inventTable)
            {
                if(loadRelatedSkus)
                {
                    while select inventDimCombination
                       where inventDimCombination.ItemId == inventTable.itemId &&
                             inventDimCombination.SC_VisibleInWebShop
                    {                       
                        this.waitAsyncTasksLimit(taskList);
                        taskList.add(Global::runAsync(classNum(SC_AXDataServiceClient_Product), staticMethodStr(SC_AXDataServiceClient_Product, calcProductPriceCache), [webShopsTable.WebShopId, custTable.AccountNum, inventTable.itemId, inventDimCombination.InventDimId]));                        
                    }                    
                }
                
                this.waitAsyncTasksLimit(taskList);
                taskList.add(Global::runAsync(classNum(SC_AXDataServiceClient_Product), staticMethodStr(SC_AXDataServiceClient_Product, calcProductPriceCache), [webShopsTable.WebShopId, custTable.AccountNum, inventTable.itemId, blankInventDim.inventDimId]));                
            }
        }

        allTasks = taskList.ToArray();
        Task::WaitAll(allTasks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitAsyncTasksLimit</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void waitAsyncTasksLimit(CLRObject _taskList)
    {
        Generic.List<Task> taskList = _taskList;
        Task[]             allTasks = taskList.ToArray();
        Counter            completed;

        for(int b=0;b<tasklist.Count;b++)
        {
            completed += taskList.get_Item(b).IsCompleted ? 1 : 0;
        }

        if((taskList.Count - completed) >= (webShopsTable.MaxMultiThreads ? webShopsTable.MaxMultiThreads : 5))
        {
            Task::WaitAll(allTasks);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProductPriceCache</Name>
				<Source><![CDATA[
    [Replaceable]
    public static container calcProductPriceCache(container _parameters)
    {        
        InventTable                     inventTable = InventTable::find(conPeek(_parameters,3));
        SC_WebshopId                    webshopId = conPeek(_parameters,1);
        CustTable                       custTable = CustTable::find(conPeek(_parameters,2));
        InventDim                       inventDimLocal = InventDim::find(conPeek(_parameters,4));
        SC_AXDataServiceClient_Product  dataServiceClient = SC_AXDataServiceClient_Product::construct();
                
        dataServiceClient.setCustTable(custTable);
        dataServiceClient.setWebsite(webshopId);
        dataServiceClient.setInventTable(inventTable);
          
        return dataServiceClient.calcItemPrices(true, true, custTable.Currency, inventDimLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdCategoriesJob</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getProdCategoriesJob(XmlNode _parentNode, RecId _category)
    {
        EcoResCategory subCategories;
        XmlNode        subNode;        

        while select RecId, Name, SC_VisibleInWebshop from subCategories
            order by Name
            where subCategories.ParentCategory == _category &&
                ((subCategories.SC_VisibleInWebshop == NoYes::Yes && subCategories.IsActive == NoYes::Yes) || !visibleOnly)
        {
            subNode = _parentNode.appendChild(resultXml.createElement(#node));

            this.initCategoryFields(subNode, subCategories);
            this.getProdCategoriesJob(subNode, subCategories.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductBase</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getProductBase()
    {
        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }

        if(accountType == #contact)
        {
            custTable.Currency = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty).Currency;
        }

        if(inventTable)
        {
            productNode = resultNode.appendChild(resultXml.createElement(#product));

            this.initItemFields(productNode);

            this.addProductDescriptions(productNode);

            //check orderability for main prod
            this.checkValidationRules(inventTable, false, true);
            isOrderable = this.checkProductOrderability(productNode);

            if(this.isProductDimensionBasedBOM())
            {
                this.addDimesionBasedBOMVariants(productNode);
            }
            else
            {
                this.addProductDimensions(productNode);
                this.addProductVariant(productNode);
                this.addBOM(productNode);
            }

            this.addItemBarCodes(productNode);
            
            if(webShopsTable.EnableProdAttachments)
            {
                this.addAttachments(productNode, inventTable.RecId, inventTable.TableId);
            }

            this.addFieldValue(#isOrderable, productNode, isOrderable);

            if(loadVisibilityRules)
            {
                this.addVisibilityRules(productNode);
            }

            if(loadRelatedSkus)
            {
                this.addRelatedProducts(productNode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetProductCategories</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetProductCategories(XmlDocument _request)
    {
        InventItemGroup itemGroup;
        EcoResCategory  productCategory;        

        this.createHeaderXml();

        this.getParameters(_request);

        if(webShopsTable.EnableProdCategories)
        {
            productCategory = EcoResCategory::getRoot(webShopsTable.CategoryHierarchy);

            this.getProdCategoriesJob(resultNode, productCategory.recId);
            this.setWebshopDataMappingGetAPI('GetProductCategories', productCategory);
        }
        else
        {
            while select ItemGroupId, Name, SC_VisibleInWebshop, SC_SortNum from itemGroup
                order by SC_SortNum
                where itemGroup.SC_VisibleInWebshop == NoYes::Yes || !visibleOnly
            {
                this.initGroupFields(itemGroup);
                this.setWebshopDataMappingGetAPI('GetProductCategories', itemGroup);
            }
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesCategoriesProducts</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Integer getSalesCategoriesProducts(Counter _availableToResponse, Counter _totalItems)
    {
        QueryRun        queryRunCategory;
        EcoResCategory  ecoResCategoryLocal;

        if(webShopsTable.EnableSalesCategoryAsProduct)
        {
            queryRunCategory = this.salesCategoryMainFilters(_availableToResponse != pageSize);

            if(pageStart > _totalItems || _availableToResponse > 0)
            {
                pageStart = pageStart > _totalItems ? pageStart - _totalItems : 1;
                pageSize  = _availableToResponse ? _availableToResponse : pageSize;

                if(pageSize)
                {
                    queryRunCategory.enablePositionPaging(true);
                    queryRunCategory.addPageRange(pageStart, pageSize);
                }

                while(queryRunCategory.next())
                {
                    ecoResCategoryLocal = queryRunCategory.get(tablenum(EcoResCategory));
                    productNode = resultNode.appendChild(resultXml.createElement(#product));

                    this.initDefaultSalesCategoryFields(productNode, ecoResCategoryLocal);
                }
            }
        }

        return webShopsTable.EnableSalesCategoryAsProduct ? this.countQuerytotal(queryRunCategory.pack(false)) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetProducts</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetProducts(XmlDocument _request)
    {    
        Integer totalItems, totalResponseItems;

        this.createHeaderXml();

        this.getParameters(_request);

        queryRun  = this.inventTableMainFilters();
        pageStart = pageIndex * pageSize + 1;

        if(pageSize)
        {
            queryRun.enablePositionPaging(true);
            queryRun.addPageRange(pageStart, pageSize);
        }

        while(queryRun.next())
        {
            inventTable = queryRun.get(tablenum(InventTable));
           
            if(inventTable.SC_VisibleInWebShop)
            {
                this.getProductBase();
            }
            else
            {
                this.initInvisibleItemFields();
            }    
       
            this.setWebshopDataMappingGetAPI('GetProducts', inventTable);
            totalResponseItems++;
        }

        totalItems  = this.countQuerytotal(queryRun.pack(false));
        totalItems += this.getSalesCategoriesProducts(pageSize - totalResponseItems, totalItems);

        resultNode.appendChild(resultXml.createElement(#totalCount)).innerText(int2str(totalItems));

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetProductImages</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetProductImages(XmlDocument _request)
    {        
        this.createHeaderXml();

        this.getParameters(_request);

        queryRun  = this.inventTableMainFilters();
        pageStart = pageIndex * pageSize + 1;

        if(pageSize)
        {
            queryRun.enablePositionPaging(true);
            queryRun.addPageRange(pageStart, pageSize);
        }

        while(queryRun.next())
        {
            inventTable = queryRun.get(tablenum(InventTable));

            this.getProductImagesBase();
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductImagesBase</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getProductImagesBase()
    {
        EcoResProductImage      ecoResProductImage;
        DocuRef                 docuRef;
        InventDimCombination    inventDimCombination;
        DocuType                docuType;    
        boolean                 isReleasedProductImageExist;

        //select related info images first
        while select TableId from ecoResProductImage
            where ecoResProductImage.RefRecord == inventTable.RecId
            join docuRef
                where docuRef.RecId == ecoResProductImage.RefRecId &&
                     (docuRef.SC_VisibleInWebShop || ecoResProductImage.DefaultImage)
        {
            this.initImageFields(docuRef, inventTable.ItemId);
            this.setWebshopDataMappingGetAPI('GetProductImages', docuRef);
            isReleasedProductImageExist = true;
        }

        while select docuRef
            where docuRef.RefRecId == inventTable.RecId &&                  
                  docuRef.RefTableId == tableNum(InventTable) &&
                  docuRef.ActualCompanyId == curExt() &&
                  docuRef.SC_VisibleInWebShop
                join TableId from docuType
                    where docuType.TypeId == docuRef.TypeId &&
                          docuType.TypeGroup == DocuTypeGroup::Image
                notexists join TableId from ecoResProductImage
                    where ecoResProductImage.RefRecId == docuRef.RecId
        {
            this.initImageFields(docuRef, inventTable.ItemId);
            this.setWebshopDataMappingGetAPI('GetProductImages', docuRef);
            isReleasedProductImageExist = true;
        }

        if(inventTable.hasProductDimensions())
        {
            while select RecId, InventDimId from inventDimCombination
                where inventDimCombination.ItemId == inventTable.itemId &&
                      inventDimCombination.SC_VisibleInWebShop
                join docuRef
                    where docuRef.RefRecId == inventDimCombination.RecId &&             
                          docuRef.RefTableId == tableNum(InventDimCombination) &&
                          docuRef.ActualCompanyId == curExt() &&
                          docuRef.SC_VisibleInWebShop
                        join TableId from docuType
                            where docuType.TypeId == docuRef.TypeId &&
                                  docuType.TypeGroup == DocuTypeGroup::Image
            {
                this.initImageFields(docuRef, inventTable.ItemId, inventDimCombination.InventDimId);
                this.setWebshopDataMappingGetAPI('GetProductImages', docuRef);
                isReleasedProductImageExist = true;
            }            
        }

        if(!isReleasedProductImageExist)
        {
            this.getNotReleasedProductImages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotReleasedProductImages</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void getNotReleasedProductImages()
    {
        EcoResProductImage      ecoResProductImage;
        DocuRef                 docuRef;
        InventDimCombination    inventDimCombination;
        DocuType                docuType;

        //select related info images first
        while select TableId from ecoResProductImage
            where ecoResProductImage.RefRecord == inventTable.Product
            join docuRef
                where docuRef.RecId == ecoResProductImage.RefRecId &&
                     (docuRef.SC_VisibleInWebShop || ecoResProductImage.DefaultImage)
        {
            this.initImageFields(docuRef, inventTable.ItemId); 
            this.setWebshopDataMappingGetAPI('GetProductImages', docuRef);
        }        

        while select docuRef
            where docuRef.RefRecId == inventTable.Product &&                  
                  docuRef.RefTableId == tableNum(EcoResProduct) &&
                  docuRef.ActualCompanyId == curExt() &&
                  docuRef.SC_VisibleInWebShop
                join TableId from docuType
                    where docuType.TypeId == docuRef.TypeId &&
                          docuType.TypeGroup == DocuTypeGroup::Image
                notexists join TableId from ecoResProductImage
                    where ecoResProductImage.RefRecId == docuRef.RecId
        {
            this.initImageFields(docuRef, inventTable.ItemId);
            this.setWebshopDataMappingGetAPI('GetProductImages', docuRef);
        }

        if(inventTable.hasProductDimensions())
        {
            while select RecId, InventDimId from inventDimCombination
                where inventDimCombination.ItemId == inventTable.itemId &&
                      inventDimCombination.SC_VisibleInWebShop
                join docuRef
                    where docuRef.RefRecId == inventDimCombination.DistinctProductVariant &&
                          docuRef.RefTableId == tableNum(EcoResProduct) &&
                          docuRef.ActualCompanyId == curExt() &&
                          docuRef.SC_VisibleInWebShop
                        join TableId from docuType
                            where docuType.TypeId == docuRef.TypeId &&
                                  docuType.TypeGroup == DocuTypeGroup::Image
            {
                this.initImageFields(docuRef, inventTable.ItemId, inventDimCombination.InventDimId);
                this.setWebshopDataMappingGetAPI('GetProductImages', docuRef);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetProductSalesAgreementLines</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetProductSalesAgreementLines(XmlDocument _request)
    {
        SalesLine               salesLineLocal;
        SalesTable              salesTableLocal;
        InventDim               inventDim;
        AgreementLine           agreementLine, agreementLineLocal;
        SalesAgreementHeader    salesAgreementHeader;
        ListEnumerator          agreementLinesListEnumerator;
        List                    agreementLinesList;
        InventDimCombination    inventDimCombination;        

        this.createHeaderXml();

        this.getParameters(_request);

        custTable            = CustTable::find(accountId);
        salesAgreementHeader = SalesAgreementHeader::findAgreementId(salesAgreementId);

        if(salesAgreementHeader && custTable)
        {
            salesTableLocal.initValue();
            salesTableLocal.CustAccount  = custTable.AccountNum;
            salesTableLocal.initFromCustTable();

            productsList    = _request.getElementsByTagName(#product);

            for(i=0;productsList && i<productsList.length();i++)
            {
                node        = productsList.item(i);
                inventTable = InventTable::find(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');

                if(inventTable)
                {
                    salesLineLocal.clear();
                    salesLineLocal.initValue();
                    salesLineLocal.initFromSalesTable(salesTableLocal);
                    salesLineLocal.ItemId = inventTable.ItemId;
                    salesLineLocal.initFromInventTable(inventTable, false);

                    ttsBegin;
                    inventDim = this.setProductStorageDim();
                    salesLineLocal.setInventDimIdFromInventDim(inventDim);

                    this.clearAgreementsStorageDim(salesAgreementHeader.RecId);

                    if(!inventTable.hasProductDimensions())
                    {
                        agreementLinesList           = AgreementLine::getAgreementLinesForOrderLine(salesLineLocal, salesAgreementHeader.RecId, true);
                        agreementLinesListEnumerator = agreementLinesList.getEnumerator();

                        while(agreementLinesListEnumerator.moveNext())
                        {
                            matchingAgreementsNode = resultNode.appendChild(resultXml.createElement(#salesAgreementLine));
                            agreementLine          = agreementLinesListEnumerator.current();
                            agreementLine          = AgreementLine::find(agreementLine.RecId);
                        
                            this.addFieldValue(#productId, matchingAgreementsNode, inventTable.ItemId);
                            this.addFieldValue(#lineNo, matchingAgreementsNode, agreementLine.LineNumber);
                            this.setWebshopDataMappingGetAPI('GetProductSalesAgreementLines', agreementLine);
                        }
                    }
                    else
                    {
                        while select inventDimCombination
                            order by InventDimId
                            where inventDimCombination.ItemId == inventTable.itemId &&
                                  inventDimCombination.SC_VisibleInWebShop
                            exists join agreementLineLocal
                                where agreementLineLocal.Agreement   == salesAgreementHeader.RecId &&
                                      (agreementLineLocal.InventDimId == inventDimCombination.InventDimId ||
                                       agreementLineLocal.InventDimId == blankInventDim.inventDimId)
                        {
                            inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(salesLineLocal.ItemId), inventDimCombination.inventDim());
                            salesLineLocal.setInventDimIdFromInventDim(inventDim);

                            agreementLinesList           = AgreementLine::getAgreementLinesForOrderLine(salesLineLocal, salesAgreementHeader.RecId, true);
                            agreementLinesListEnumerator = agreementLinesList.getEnumerator();
                        
                            while(agreementLinesListEnumerator.moveNext())
                            {
                                matchingAgreementsNode = resultNode.appendChild(resultXml.createElement(#salesAgreementLine));
                                agreementLine          = agreementLinesListEnumerator.current();
                                agreementLine          = AgreementLine::find(agreementLine.RecId);
                            
                                this.addFieldValue(#productId, matchingAgreementsNode, inventTable.ItemId);
                                this.addFieldValue(#variantId, matchingAgreementsNode, inventDimCombination.InventDimId);
                                this.addFieldValue(#lineNo, matchingAgreementsNode, agreementLine.LineNumber);
                                this.setWebshopDataMappingGetAPI('GetProductSalesAgreementLines', agreementLine);
                            }
                        }                        
                    }
                    ttsAbort;
                }
            }
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetProductSuggestions</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetProductSuggestions(XmlDocument _request)
    {
        XmlNode                     productsNode;
        SalesQuotationBasketLine    dataReal;                
        QueryRun                    queryRunLocal;

        ttsBegin;

        this.createHeaderXml();

        this.getParameters(_request);

        productsNode  = resultNode.appendChild(resultXml.createElement(#products));

        if(accountId)
        {
            custTable = CustTable::find(accountId);
        }

        if(contactId)
        {
            custTable = CustTable::findByPartyRecId(ContactPerson::find(contactId).ContactForParty);
        }
                
        //create data
        this.fillSuggestionsDataTable();

        //sorting and filtering
        queryRunLocal = this.createSuggestionsQuery();

        if(pageSize)
        {
            pageStart = pageIndex * pageSize + 1;
            queryRunLocal.enablePositionPaging(true);
            queryRunLocal.addPageRange(pageStart, pageSize);
        }

        while(queryRunLocal.next())
        {
            dataReal    = queryRunLocal.get(tableNum(SalesQuotationBasketLine));
            productNode = productsNode.appendChild(resultXml.createElement(#product));

            this.addFieldValue(#Id, productNode, dataReal.ItemId);
        }

        this.setWebshopDataMappingGetAPI('GetProductSuggestions', null);

        resultNode.appendChild(resultXml.createElement(#totalCount)).innerText(int2str(this.countQuerytotal(queryRunLocal.pack(false))));
        ttsAbort;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSuggestionsDataTable</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void fillSuggestionsDataTable()
    {
        TransDate                   sDate, eDate;
        QueryBuildDataSource        queryBuildDataSource, queryBuildDataSourceTable;
        Query                       query;
        QueryRun                    queryRunLocal;
        SalesQuotationBasketLine    dataReal;
        CustInvoiceTrans            custInvoiceTrans;
        RecordInsertList            dataRealInsertList = new RecordInsertList(tableNum(SalesQuotationBasketLine));        

        sDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - webShopsTable.DayRange;
        eDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        
        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(CustInvoiceTrans));
        queryBuildDataSource.addSelectionField(fieldNum(CustInvoiceTrans, ItemId));
        queryBuildDataSource.addSelectionField(fieldNum(CustInvoiceTrans, RecId), SelectionField::Count);
        queryBuildDataSource.addSelectionField(fieldNum(CustInvoiceTrans, LineAmount), SelectionField::Sum);
        queryBuildDataSource.addGroupByField(fieldNum(CustInvoiceTrans, ItemId));

        queryBuildDataSourceTable = queryBuildDataSource.addDataSource(tablenum(CustInvoiceJour));
        queryBuildDataSourceTable.relations(true);
        queryBuildDataSourceTable.addRange(fieldNum(CustInvoiceJour, OrderAccount)).value(queryValue(custTable.AccountNum));

        while(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - year(sDate) <= webShopsTable.LookbackYears)
        {
            queryBuildDataSourceTable.addRange(fieldNum(CustInvoiceJour, InvoiceDate)).value(SysQuery::range(sDate,eDate));

            sDate = prevYr(sDate);
            eDate = eDate == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) ? prevYr(eDate) + webShopsTable.DayRange : prevYr(eDate);
        }

        queryRunLocal = new QueryRun(query);

        while(queryRunLocal.next()) //save temporary data
        {
            custInvoiceTrans    = queryRunLocal.get(tableNum(CustInvoiceTrans));

            dataReal.ItemId     = custInvoiceTrans.ItemId;
            dataReal.SalesQty   = int642int(custInvoiceTrans.RecId);
            dataReal.LineAmount = custInvoiceTrans.LineAmount;
            dataReal.TransDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            dataRealInsertList.add(dataReal);
        }

        dataRealInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSuggestionsQuery</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun createSuggestionsQuery()
    {
        Query                       query;
        QueryRun                    queryRunLocal;
        QueryBuildDataSource        queryBuildDataSource, queryBuildDataSourceTable;
        SC_FilterWebShopsTable      filterWebShopsTable;
        RetailAssortmentView        retailAssortmentView;
        TransDate                   systemDate;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(SalesQuotationBasketLine));
        queryBuildDataSource.addRange(fieldNum(SalesQuotationBasketLine, TransDate)).value(queryValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        queryBuildDataSource.addSelectionField(fieldNum(SalesQuotationBasketLine, ItemId));

        if(webShopsTable.SortingOption == SC_SortingOption::Counts)
        {
            queryBuildDataSource.addSortField(fieldNum(SalesQuotationBasketLine, SalesQty), SortOrder::Descending);
        }
        else
        {
            queryBuildDataSource.addSortField(fieldNum(SalesQuotationBasketLine, LineAmount), SortOrder::Descending);
        }

        queryBuildDataSourceTable = queryBuildDataSource.addDataSource(tablenum(InventTable));
        queryBuildDataSourceTable.relations(true);
        queryBuildDataSourceTable.addRange(fieldNum(InventTable, SC_VisibleInWebshop)).value(queryValue(NoYes::Yes));

        while select FieldName, FilterStr from filterWebShopsTable
            where filterWebShopsTable.WebShopId == webShopsTable.WebShopId &&
                  filterWebShopsTable.TableName == tableStr(InventTable)
        {
            queryBuildDataSourceTable.addRange(fieldname2id(tablenum(InventTable), filterWebShopsTable.FieldName)).value(filterWebShopsTable.FilterStr);
        }
        
        if(webShopsTable.EnableRetailAssortments && this.isRetailEnabled())
        {
            systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            while select Product, ValidFrom, ValidTo from retailAssortmentView
                where retailAssortmentView.OMOperatingUnitId == this.getRetailChannelTable().OMOperatingUnitID &&
                        (retailAssortmentView.ValidFrom <= systemDate || !retailAssortmentView.ValidFrom) &&
                        (retailAssortmentView.ValidTo >= systemDate || !retailAssortmentView.ValidTo)
            {
                queryBuildDataSourceTable.addRange(fieldNum(InventTable, Product)).value(queryValue(retailAssortmentView.Product));
            }
        }

        queryRunLocal = new QueryRun(query);

        return queryRunLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetRetailOffers</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetRetailOffers(XmlDocument _request)
    {
        RetailGroupMemberLine       retailGroupMemberLine;
        RetailPeriodicDiscountLine  retailPeriodicDiscountLine;
        RetailPeriodicDiscount      retailPeriodicDiscount;        
        RetailChannelPriceGroup     retailChannelPriceGroup;
        RetailDiscountPriceGroup    retailDiscountPriceGroup;
        RetailChannelTable          retailChannelTable;
        RetailAffiliationPriceGroup retailAffiliationPriceGroup;
        RetailCustAffiliation       retailCustAffiliation;
        SC_MixMatchDiscountTable    mixMatchDiscountTable;
        SC_MixMatchDiscountLine     mixMatchDiscountLine;
        XmlNode                     offerNode;  
        container                   foundDiscountCon;

        ttsbegin; //to avoid extra calls to SQL on Production envs.
        this.createHeaderXml();

        this.getParameters(_request);

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        else
        {
            custTable.Currency = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty).Currency;
        }

        inventTable = InventTable::find(productId);
        
        if(this.isRetailEnabled())
        {            
            retailChannelTable = this.getRetailChannelTable();

            while select OfferId from retailPeriodicDiscountLine
                join retailGroupMemberLine
                    where retailPeriodicDiscountLine.RetailGroupMemberLine == retailGroupMemberLine.RecId &&
                         (retailGroupMemberLine.Product == inventTable.Product || !retailGroupMemberLine.Product)
                join TableId from retailPeriodicDiscount
                    where retailPeriodicDiscount.OfferId        == retailPeriodicDiscountLine.OfferId &&
                          retailPeriodicDiscount.Status         == RetailDisabledEnabled::Enabled &&
                         (retailPeriodicDiscount.CurrencyCode   == custTable.Currency || !retailPeriodicDiscount.CurrencyCode) &&
                         (retailPeriodicDiscount.ValidFrom      <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !retailPeriodicDiscount.ValidFrom) &&
                         (retailPeriodicDiscount.ValidTo        >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !retailPeriodicDiscount.ValidTo) &&
                         !retailPeriodicDiscount.IsDiscountCodeRequired
                join PriceDiscGroup from RetailDiscountPriceGroup
                    where RetailDiscountPriceGroup.OfferId      == retailPeriodicDiscountLine.OfferId
                outer join RecId from retailChannelPriceGroup
                    where retailChannelPriceGroup.RetailChannel == retailChannelTable.RecId &&
                          retailChannelPriceGroup.PriceGroup    == RetailDiscountPriceGroup.PriceDiscGroup
                outer join RecId, RetailAffiliation from retailAffiliationPriceGroup
                    where retailAffiliationPriceGroup.PriceDiscGroup == RetailDiscountPriceGroup.PriceDiscGroup                    
            {
                if(!retailChannelPriceGroup && !retailAffiliationPriceGroup || conFind(foundDiscountCon, [retailPeriodicDiscountLine.OfferId, retailGroupMemberLine.Variant]))
                {
                    continue;
                }

                if(!retailChannelPriceGroup && retailAffiliationPriceGroup)
                {
                    select firstonly RecId from retailCustAffiliation
                        where retailCustAffiliation.RetailAffiliationId == retailAffiliationPriceGroup.RetailAffiliation &&
                              retailCustAffiliation.CustAccountNum == custTable.AccountNum;
                
                    if(!retailCustAffiliation)
                    {
                        continue;
                    }
                }

                if(this.checkRetailOffer(retailGroupMemberLine))
                {                    
                    offerNode = resultNode.appendChild(resultXml.createElement(#retailOffer));
                    
                    this.initDefaultRetailOfferFields(offerNode, retailPeriodicDiscountLine.OfferId, retailGroupMemberLine.Variant);
                    this.setWebshopDataMappingGetAPI('GetRetailOffers', retailPeriodicDiscountLine);

                    foundDiscountCon += [[retailPeriodicDiscountLine.OfferId, retailGroupMemberLine.Variant]];
                }
            }
        }
        else
        {
            if(!webShopsTable.DisableSanaDiscounts)
            {
                while select DiscountId from mixMatchDiscountTable
                    order by DiscountId
                    where mixMatchDiscountTable.Currency    == custTable.Currency &&
                         (mixMatchDiscountTable.DiscGroupId == custTable.LineDisc || !mixMatchDiscountTable.DiscGroupId) &&
                          mixMatchDiscountTable.WebShopId   == webShopsTable.WebShopId &&
                          mixMatchDiscountTable.Active      == DirRelationshipStatus::Active &&
                         (mixMatchDiscountTable.StartDate   <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.StartDate) &&
                         (mixMatchDiscountTable.EndDate     >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !mixMatchDiscountTable.EndDate)
                    join Variant, DiscPercent, Category from mixMatchDiscountLine
                        where mixMatchDiscountLine.DiscountId == mixMatchDiscountTable.DiscountId &&
                              mixMatchDiscountLine.WebShopId  == mixMatchDiscountTable.WebShopId &&
                              mixMatchDiscountLine.SalesUnit  == parmUnitId &&
                             (mixMatchDiscountLine.Product    == inventTable.Product ||
                             (!mixMatchDiscountLine.Product && mixMatchDiscountLine.Category))

                {
                    if(mixMatchDiscountLine.Category && !this.isProductBelongCategory(mixMatchDiscountLine.Category, inventTable.Product) || 
                       conFind(foundDiscountCon, mixMatchDiscountTable.DiscountId))
                    {
                        continue;
                    }

                    offerNode = resultNode.appendChild(resultXml.createElement(#retailOffer));

                    this.initDefaultRetailOfferFields(offerNode, mixMatchDiscountTable.DiscountId, mixMatchDiscountLine.Variant);
                    this.setWebshopDataMappingGetAPI('GetRetailOffers', mixMatchDiscountLine);

                    foundDiscountCon += mixMatchDiscountTable.DiscountId;
                }
            }
        }
        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRetailOffer</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean checkRetailOffer(RetailGroupMemberLine _retailGroupMemberLine)
    {
        return _retailGroupMemberLine.Product || (!_retailGroupMemberLine.Product && this.isProductBelongCategory(_retailGroupMemberLine.Category, inventTable.Product));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultRetailOfferFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultRetailOfferFields(XmlNode _offerNode, RetailOfferId _offerId, RefRecId _variant)
    {
        this.addFieldValue(#code, _offerNode, _offerId);
        this.addFieldValue(#variantId, _offerNode, InventDimCombination::findByDistinctProductVariant(_variant).InventDimId);
        
        if(this.isRetailEnabled())
        {
            this.addFieldValue(#description, _offerNode, RetailPeriodicDiscount::findByOfferId(_offerId).Name);
        }
        else
        {
            this.addFieldValue(#description, _offerNode, SC_MixMatchDiscountTable::find(webShopsTable.WebShopId, _offerId).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetStockInfo</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetStockInfo(XmlDocument _request)
    {
        XmlNode                 variantNode;
        InventDimCombination    inventDimCombination;
        InventDim               inventDimLocal;
        boolean                 variantOrderable, someVariantOrderable;    
       
        this.createHeaderXml();

        this.getParameters(_request);

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        else
        {
            custTable.Currency = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty).Currency;
        }

        productsList    = _request.getElementsByTagName(#product);

        if(!webShopsTable.DisableMultiThreading && productsList.length() > 1)
        {
            this.calcProductStockCacheAsync(productsList);
        }

        for(i=0;productsList && i<productsList.length();i++)
        {
            node        = productsList.item(i);
            parmUnitId  = node.getNamedElement(#unitOfMeasureId) ? node.getNamedElement(#unitOfMeasureId).innerText() : '';
            inventTable = InventTable::find(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');
            isOrderable = true;

            this.inventTableWebshopFilters();            

            if(inventTable)
            {
                productNode = resultNode.appendChild(resultXml.createElement(#stock));

                if(loadRelatedSkus)
                {
                    while select inventDimCombination
                        where inventDimCombination.ItemId == inventTable.itemId &&
                              inventDimCombination.SC_VisibleInWebShop
                    {
                        variantNode          = resultNode.appendChild(resultXml.createElement(#stock));
                        inventDimLocal       = inventDimCombination.inventDim();
                        variantOrderable     = this.checkProductOrderability(variantNode, inventDimLocal);
                        someVariantOrderable = someVariantOrderable || variantOrderable;

                        this.initDefaultStockFields(variantNode, variantOrderable, inventDimLocal);
                        this.setWebshopDataMappingGetAPI('GetStockInfo', inventTable);
                    }    
                
                    if(inventTable.hasProductDimensions())
                    {
                        isOrderable = someVariantOrderable || inventTable.SC_ConfiguratorModel;
                    }
                }

                if(this.isProductDimensionBasedBOM())
                {
                    this.initDimesionBasedBOMPriceStockFields();
                }

                if(isOrderable) //update main product orderability status
                {
                    this.checkValidationRules(inventTable, false, true);
                    isOrderable = this.checkProductOrderability(productNode); //check orderability for main prod
                }

                this.initDefaultStockFields(productNode, isOrderable);
                this.setWebshopDataMappingGetAPI('GetStockInfo', inventTable);
                
                someVariantOrderable = false;
            }
            else
            {
                this.getCategoryStockInfo(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');
            } 
        }    

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProductStockCacheAsync</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void calcProductStockCacheAsync(XmlNodeList _productsList)
    {        
        InventDimCombination    inventDimCombination;
        Generic.List<Task>      taskList = new Generic.List<Task>();
        Task[]                  allTasks;
        int                     arrayLength;
        Qty                     available;
        SC_LargeText            cacheKey;

        for(i=0;_productsList && i<_productsList.length();i++)
        {
            node        = _productsList.item(i);
            inventTable = InventTable::find(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');

            this.inventTableWebshopFilters();

            if(inventTable)
            {
                if(loadRelatedSkus)
                {
                    while select inventDimCombination
                       where inventDimCombination.ItemId == inventTable.itemId &&
                             inventDimCombination.SC_VisibleInWebShop
                    {
                        this.waitAsyncTasksLimit(taskList);
                        taskList.add(Global::runAsync(classNum(SC_AXDataServiceClient_Product), staticMethodStr(SC_AXDataServiceClient_Product, calcProductStockCache), [webShopsTable.WebShopId, custTable.AccountNum, inventTable.itemId, inventDimCombination.InventDimId]));                        
                    }
                }

                this.waitAsyncTasksLimit(taskList);
                taskList.add(Global::runAsync(classNum(SC_AXDataServiceClient_Product), staticMethodStr(SC_AXDataServiceClient_Product, calcProductStockCache), [webShopsTable.WebShopId, custTable.AccountNum, inventTable.itemId]));
            }
        }

        allTasks = taskList.ToArray();
        Task::WaitAll(allTasks);

        arrayLength = allTasks.get_Length();

        for (i = 0; i < arrayLength; i++)
        {
            var currentTask = allTasks.GetValue(i);
            [available, cacheKey] = AsyncTaskResult::getAsyncTaskResult(currentTask).getResult();

            globalCache.set(classId2Name(classIdGet(this)), cacheKey, [available]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProductStockCache</Name>
				<Source><![CDATA[
    [Replaceable]
    protected static container calcProductStockCache(container _parameters)
    {
        InventTable                     inventTable = InventTable::find(conPeek(_parameters,3));
        SC_WebshopId                    webshopId = conPeek(_parameters,1);
        CustTable                       custTable = CustTable::find(conPeek(_parameters,2));
        InventDim                       inventDimLocal = InventDim::find(conPeek(_parameters,4));
        SC_AXDataServiceClient_Product  dataServiceClient = SC_AXDataServiceClient_Product::construct();
        SC_LargeText                    cacheKey = strFmt('%1%2%3%4%5', webshopId, custTable.AccountNum, inventTable.ItemId, inventDimLocal.inventDimId, inventTable.salesUnitId());
                
        dataServiceClient.setCustTable(custTable);
        dataServiceClient.setWebsite(webshopId);
        dataServiceClient.setInventTable(inventTable);

        return [dataServiceClient.calcInventory(inventDimLocal), cacheKey];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultStockFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultStockFields(XmlNode _stockNode, boolean _isOrderable, InventDim _inventDim = null)
    {
        this.addFieldValue(#productId, _stockNode, inventTable.itemId);        
        this.addFieldValue(#inventory, _stockNode, this.calcInventory(_inventDim));
        this.addFieldValue(#unitOfMeasureId, _stockNode, parmUnitId ? parmUnitId : inventTable.salesUnitId());
        this.addFieldValue(#isOrderable, _stockNode, _isOrderable);

        if(_inventDim)
        {
            this.addFieldValue(#variantId, _stockNode, _inventDim.InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultSalesCategoryFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultSalesCategoryFields(XmlNode _parentNode, EcoResCategory _ecoResCategory)
    {
        SC_LargeText                titleStr;
        EcoResCategoryTranslation   ecoResCategoryTranslation;
        EcoResCategoryFriendlyName  friendlyName;
        SC_LanguageParametersTable  languageParametersTable;

        this.addFieldValue(#id, _parentNode, _ecoResCategory.Name);

        titleStr = EcoResCategoryTranslation::find(_ecoResCategory.RecId, CompanyInfo::languageId()).FriendlyName;
        titleStr = titleStr ? titleStr : _ecoResCategory.Name;
        this.addFieldValue(#title, _parentNode, titleStr);
        this.addFieldValue(#description, _parentNode, _ecoResCategory.description(false, ''));

        while select FriendlyName, Description, LanguageId from ecoResCategoryTranslation
        index hint CategoryLanguageIdx
        where ecoResCategoryTranslation.Category == _ecoResCategory.RecId &&
                ecoResCategoryTranslation.FriendlyName
        exists join TableId from languageParametersTable
                where languageParametersTable.LanguageId == ecoResCategoryTranslation.LanguageId
        {
            friendlyName = ecoResCategoryTranslation.LanguageId == CompanyInfo::languageId() ? ecoResCategoryTranslation.FriendlyName : friendlyName;
            this.addFieldValue(#title + '_' + int2str(this.language2LocaleId(ecoResCategoryTranslation.LanguageId)), _parentNode, ecoResCategoryTranslation.FriendlyName);
            this.addFieldValue(#description + '_' + int2str(this.language2LocaleId(ecoResCategoryTranslation.LanguageId)), _parentNode, ecoResCategoryTranslation.Description);
        }

        this.addFieldValue(#blocked, _parentNode, #zero);
        this.addFieldValue(#visible, _parentNode, _ecoResCategory.SC_VisibleInWebShop);

        if(calculatePrices)
        {
            this.addFieldValue(#price, _parentNode, _ecoResCategory.SC_SalesPrice);
            this.addFieldValue(#listPrice, _parentNode, _ecoResCategory.SC_SalesPrice);
        }

        if(calculateInventory)
        {
            this.addFieldValue(#inventory, _parentNode, #one);
        }

        this.addFieldValue(#unitOfMeasureId, _parentNode, 'ea');        
        this.addFieldValue(#hasVariants, _parentNode, #zero);
        this.addFieldValue(#modifiedDate, _parentNode, _ecoResCategory.modifiedDateTime);
        this.addFieldValue(#isOrderable, _parentNode, #one);

        node = _parentNode.appendChild(resultXml.createElement(#unitsOfMeasure));
        this.addUOM(node, UnitOfMeasure::findBySymbol('ea'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesCategoryMainFilters</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun salesCategoryMainFilters(boolean _checkFilters)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryRun                queryRunCategory;
        EcoResCategoryHierarchy salesEcoResCategoryHierarchy;
        XmlElement              filterNode;
        Name                    filterField;
        Integer                 b;

        salesEcoResCategoryHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales).CategoryHierarchy);

        if(_checkFilters && filterFields) //remove greater filter if it's not sales category
        {
            for(b=0;b<filterFields.length();b++)
            {
                node = filterFields.item(b);
                filterNode  = node.getNamedElement(#Greater);
                filterField = node.attributes() ? node.attributes().getNamedItem(#field).text() : '';
            
                if(filterNode && filterField == #id && !EcoResCategory::findByName(filterNode.text(), salesEcoResCategoryHierarchy.RecId))
                {         
                    node.attributes().getNamedItem(#field).removeAll();
                    break;
                }
            }
        }

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(EcoResCategory));
        queryBuildDataSource.addRange(fieldnum(EcoResCategory, CategoryHierarchy)).value(queryValue(salesEcoResCategoryHierarchy.RecId));

        //visibility
        if(visibleOnly)
        {
            queryBuildDataSource.addRange(fieldnum(EcoResCategory, SC_VisibleInWebshop)).value(queryValue(NoYes::Yes));
        }

        //sorting
        queryBuildDataSource.addOrderByField(fieldnum(EcoResCategory, Name), sortAsc ? SortOrder::Ascending : SortOrder::Descending);

        //filters from request
        queryBuildDataSource = this.addFilters2Query(queryBuildDataSource, tablenum(EcoResCategory));

        queryRunCategory = new QueryRun(query);

        return queryRunCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetUnitsOfMeasure</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetUnitsOfMeasure(XmlDocument _request)
    {
        UnitOfMeasure               unitOfMeasure;
        UnitOfMeasureTranslation    unitOfMeasureTranslation;
        UnitOfMeasureSymbol         unitSymbol;
        SC_LanguageParametersTable  languageParamTable;        

        this.createHeaderXml();
        this.getParameters(_request);

        while select unitOfMeasure
            order by Symbol
            join unitOfMeasureTranslation
            where unitOfMeasureTranslation.UnitOfMeasure == unitOfMeasure.RecId
            outer join LocaleId from languageParamTable
                where languageParamTable.LanguageId == unitOfMeasureTranslation.LanguageId
        {
            if(unitOfMeasure.Symbol != unitSymbol)
            {
                node = resultNode.appendChild(resultXml.createElement(#unitOfMeasure));

                this.initDefaultUnitsOfMeasureFields(unitOfMeasure, unitOfMeasureTranslation.Description, languageParamTable.LocaleId);

                unitSymbol = unitOfMeasure.Symbol;
            }            
            else
            {
                this.initDefaultUnitsOfMeasureFields(unitOfMeasure, unitOfMeasureTranslation.Description, languageParamTable.LocaleId, true);
            }
            this.setWebshopDataMappingGetAPI('GetUnitsOfMeasure', unitOfMeasure);
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultUnitsOfMeasureFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultUnitsOfMeasureFields(UnitOfMeasure _unitOfMeasure, Description _description, Integer _locale, boolean _translationOnly = false)
    {
        if(!_translationOnly)
        {
            this.addFieldValue(#id, node, _unitOfMeasure.Symbol);
            this.addFieldValue(#description, node, UnitOfMeasureTranslation::findByTranslation(_unitOfMeasure.RecId, CompanyInfo::languageId()).Description);
        }

        if(_locale)
        {
            this.addFieldValue(#description + '_' + int2str(_locale), node, _description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariantComponentGroups</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetVariantComponentGroups(XmlDocument _request)
    {
        List            prodDim = InventDim::dimProductDimensionEnabledFieldList();
        ListEnumerator  prodDimenum = prodDim.getEnumerator();
        SysDictField    dictDimField;        

        this.createHeaderXml();
        this.getParameters(_request);

        while(prodDimenum.moveNext())
        {
            dictDimField = new SysDictField(tableNum(InventDim), prodDimenum.current());
            node         = resultNode.appendChild(resultXml.createElement(#group));

            this.initDefaultComponentGroupsFields(dictDimField.name(), dictDimField.label());
            this.addProductDimensionTranslation(node, dictDimField);
            this.setWebshopDataMappingGetAPI('GetVariantComponentGroups', null);
        }

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultComponentGroupsFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultComponentGroupsFields(FieldName _name, FieldLabel _description)
    {
        this.addFieldValue(#id, node, _name);
        this.addFieldValue(#bigName, node, _description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVariantComponents</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetVariantComponents(XmlDocument _request)
    {
        EcoResSize                             sizeTable;
        EcoResColor                            colorTable;
        EcoResConfiguration                    configurationTable;
        EcoResStyle                            styleTable;
        EcoResProductMasterColor               ecoResProductMasterColor;
        EcoResProductMasterConfiguration       ecoResProductMasterConfiguration;
        EcoResProductMasterSize                ecoResProductMasterSize;
        EcoResProductMasterStyle               ecoResProductMasterStyle;
        EcoResProductMasterDimValueTranslation ecoResProductMasterDimValueTranslation;
        boolean                                translationFound;
        LanguageId                             lastLanguageId;
        SC_LanguageParametersTable             languageParametersTable;        

        this.createHeaderXml();

        this.getParameters(_request);

        queryRun  = this.createComponentsQuery();
        pageStart = pageIndex * pageSize + 1;

        if(pageSize)
        {
            queryRun.enablePositionPaging(true);
            queryRun.addPageRange(pageStart, pageSize);
        }

        switch(fieldName2id(tableNum(InventDim), groupId))
        {
            case fieldNum(InventDim, InventColorId):
                while(queryRun.next())
                {
                    colorTable = queryRun.get(tablenum(EcoResColor));             
                    node       = resultNode.appendChild(resultXml.createElement(#variantComponent));

                    this.addFieldValue(#id, node, colorTable.Name);

                    while select Name, LanguageId from ecoResProductMasterDimValueTranslation
                        group by LanguageId, Name
                        order by LanguageId
                        where ecoResProductMasterDimValueTranslation.Name
                        join TableId from ecoResProductMasterColor
                            where ecoResProductMasterColor.Color == colorTable.RecId &&
                                  ecoResProductMasterColor.RecId == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue
                        exists join TableId from languageParametersTable
                            where languageParametersTable.LanguageId == ecoResProductMasterDimValueTranslation.LanguageId
                    {
                        if(lastLanguageId == ecoResProductMasterDimValueTranslation.LanguageId)
                        {
                            continue;
                        }

                        if(ecoResProductMasterDimValueTranslation.LanguageId == CompanyInfo::languageId())
                        {
                            this.addFieldValue(#bigName, node, ecoResProductMasterDimValueTranslation.Name);
                            translationFound = true;
                        }

                        this.addFieldValue(#bigName + '_' + int2str(this.language2LocaleId(ecoResProductMasterDimValueTranslation.LanguageId)), node, ecoResProductMasterDimValueTranslation.Name);
                        lastLanguageId = ecoResProductMasterDimValueTranslation.LanguageId;
                    }

                    if(!translationFound)
                    {
                        this.addFieldValue(#bigName, node, colorTable.Name);
                    }

                    this.setWebshopDataMappingGetAPI('GetVariantComponents', colorTable);
                    translationFound = false;
                    lastLanguageId   = '';
                }
                break;
            case fieldNum(InventDim, InventSizeId):
                while(queryRun.next())
                {
                    sizeTable = queryRun.get(tablenum(EcoResSize));             
                    node      = resultNode.appendChild(resultXml.createElement(#variantComponent));

                    this.addFieldValue(#id, node, sizeTable.Name);

                    while select Name, LanguageId from ecoResProductMasterDimValueTranslation
                        group by LanguageId, Name
                        order by LanguageId
                        where ecoResProductMasterDimValueTranslation.Name
                        join TableId from ecoResProductMasterSize
                            where ecoResProductMasterSize.Size == sizeTable.RecId &&
                                  ecoResProductMasterSize.RecId == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue
                        exists join TableId from languageParametersTable
                            where languageParametersTable.LanguageId == ecoResProductMasterDimValueTranslation.LanguageId
                    {
                        if(lastLanguageId == ecoResProductMasterDimValueTranslation.LanguageId)
                        {
                            continue;
                        }

                        if(ecoResProductMasterDimValueTranslation.LanguageId == CompanyInfo::languageId())
                        {
                            this.addFieldValue(#bigName, node, ecoResProductMasterDimValueTranslation.Name);
                            translationFound = true;
                        }

                        this.addFieldValue(#bigName + '_' + int2str(this.language2LocaleId(ecoResProductMasterDimValueTranslation.LanguageId)), node, ecoResProductMasterDimValueTranslation.Name);
                        lastLanguageId = ecoResProductMasterDimValueTranslation.LanguageId;
                    }

                    if(!translationFound)
                    {
                        this.addFieldValue(#bigName, node, sizeTable.Name);
                    }

                    this.setWebshopDataMappingGetAPI('GetVariantComponents', sizeTable);
                    translationFound = false;
                    lastLanguageId   = '';
                }
                break;
            case fieldNum(InventDim, ConfigId):
                while(queryRun.next())
                {
                    configurationTable = queryRun.get(tablenum(EcoResConfiguration));             
                    node               = resultNode.appendChild(resultXml.createElement(#variantComponent));

                    this.addFieldValue(#id, node, configurationTable.Name);

                    while select Name, LanguageId from ecoResProductMasterDimValueTranslation
                        group by LanguageId, Name
                        order by LanguageId
                        where ecoResProductMasterDimValueTranslation.Name
                        join TableId from ecoResProductMasterConfiguration
                            where ecoResProductMasterConfiguration.Configuration == configurationTable.RecId &&
                                  ecoResProductMasterConfiguration.RecId == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue
                        exists join TableId from languageParametersTable
                            where languageParametersTable.LanguageId == ecoResProductMasterDimValueTranslation.LanguageId
                    {
                        if(lastLanguageId == ecoResProductMasterDimValueTranslation.LanguageId)
                        {
                            continue;
                        }

                        if(ecoResProductMasterDimValueTranslation.LanguageId == CompanyInfo::languageId())
                        {
                            this.addFieldValue(#bigName, node, ecoResProductMasterDimValueTranslation.Name);
                            translationFound = true;
                        }

                        this.addFieldValue(#bigName + '_' + int2str(this.language2LocaleId(ecoResProductMasterDimValueTranslation.LanguageId)), node, ecoResProductMasterDimValueTranslation.Name);
                        lastLanguageId = ecoResProductMasterDimValueTranslation.LanguageId;
                    }

                    if(!translationFound)
                    {
                        this.addFieldValue(#bigName, node, configurationTable.Name);
                    }

                    this.setWebshopDataMappingGetAPI('GetVariantComponents', configurationTable);
                    translationFound = false;
                    lastLanguageId   = '';
                }
                break;
            case fieldNum(InventDim, InventStyleId):
                while(queryRun.next())
                {
                    styleTable = queryRun.get(tablenum(EcoResStyle));              
                    node       = resultNode.appendChild(resultXml.createElement(#variantComponent));

                    this.addFieldValue(#id, node, styleTable.Name);

                    while select Name, LanguageId from ecoResProductMasterDimValueTranslation
                        group by LanguageId, Name
                        order by LanguageId
                        where ecoResProductMasterDimValueTranslation.Name
                        join TableId from ecoResProductMasterStyle
                            where ecoResProductMasterStyle.Style == styleTable.RecId &&
                                  ecoResProductMasterStyle.RecId == ecoResProductMasterDimValueTranslation.ProductMasterDimensionValue
                        exists join TableId from languageParametersTable
                            where languageParametersTable.LanguageId == ecoResProductMasterDimValueTranslation.LanguageId
                    {
                        if(lastLanguageId == ecoResProductMasterDimValueTranslation.LanguageId)
                        {
                            continue;
                        }

                        if(ecoResProductMasterDimValueTranslation.LanguageId == CompanyInfo::languageId())
                        {
                            this.addFieldValue(#bigName, node, ecoResProductMasterDimValueTranslation.Name);
                            translationFound = true;
                        }

                        this.addFieldValue(#bigName + '_' + int2str(this.language2LocaleId(ecoResProductMasterDimValueTranslation.LanguageId)), node, ecoResProductMasterDimValueTranslation.Name);
                        lastLanguageId = ecoResProductMasterDimValueTranslation.LanguageId;
                    }

                    if(!translationFound)
                    {
                        this.addFieldValue(#bigName, node, styleTable.Name);
                    }

                    this.setWebshopDataMappingGetAPI('GetVariantComponents', styleTable);
                    translationFound = false;
                    lastLanguageId   = '';
                }
                break;
        }

        resultNode.appendChild(resultXml.createElement(#totalCount)).innerText(int2str(this.countQuerytotal(queryRun.pack(false))));

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComponentsQuery</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun createComponentsQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource, componentsBuildDataSource;
        QueryRun                queryRunLocal;

        query = new Query();
    
        switch(fieldName2id(tableNum(InventDim), groupId))
        {
            case fieldNum(InventDim, InventColorId):
                queryBuildDataSource = query.addDataSource(tablenum(EcoResColor));
                queryBuildDataSource.addSelectionField(fieldNum(EcoResColor, Name));
                queryBuildDataSource.addSortField(fieldNum(EcoResColor, Name));
                componentsBuildDataSource = queryBuildDataSource.addDataSource(tableNum(EcoResProductMasterColor));
                componentsBuildDataSource.addLink(fieldnum(EcoResColor, RecId), fieldnum(EcoResProductMasterColor, Color));
                componentsBuildDataSource.joinMode(JoinMode::ExistsJoin);
                break;
            case fieldNum(InventDim, InventSizeId):
                queryBuildDataSource = query.addDataSource(tablenum(EcoResSize));
                queryBuildDataSource.addSelectionField(fieldNum(EcoResSize, Name));
                queryBuildDataSource.addSortField(fieldNum(EcoResSize, Name));
                componentsBuildDataSource = queryBuildDataSource.addDataSource(tableNum(EcoResProductMasterSize));
                componentsBuildDataSource.addLink(fieldnum(EcoResSize, RecId), fieldnum(EcoResProductMasterSize, Size));
                componentsBuildDataSource.joinMode(JoinMode::ExistsJoin);
                break;
            case fieldNum(InventDim, ConfigId):
                queryBuildDataSource = query.addDataSource(tablenum(EcoResConfiguration));
                queryBuildDataSource.addSelectionField(fieldNum(EcoResConfiguration, Name));
                queryBuildDataSource.addSortField(fieldNum(EcoResConfiguration, Name));
                componentsBuildDataSource = queryBuildDataSource.addDataSource(tableNum(EcoResProductMasterConfiguration));
                componentsBuildDataSource.addLink(fieldnum(EcoResConfiguration, RecId), fieldnum(EcoResProductMasterConfiguration, Configuration));
                componentsBuildDataSource.joinMode(JoinMode::ExistsJoin);
                break;
            case fieldNum(InventDim, InventStyleId):
                queryBuildDataSource = query.addDataSource(tablenum(EcoResStyle));
                queryBuildDataSource.addSelectionField(fieldNum(EcoResStyle, Name));
                queryBuildDataSource.addSortField(fieldNum(EcoResStyle, Name));
                componentsBuildDataSource = queryBuildDataSource.addDataSource(tableNum(EcoResProductMasterStyle));
                componentsBuildDataSource.addLink(fieldnum(EcoResStyle, RecId), fieldnum(EcoResProductMasterStyle, Style));
                componentsBuildDataSource.joinMode(JoinMode::ExistsJoin);
                break;
        }

        queryRunLocal = new QueryRun(query);

        return queryRunLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetVolumePrices</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument GetVolumePrices(XmlDocument _request)
    {
        InventDim                inventDim, inventDimActivated, inventDimDefault, variantInventDim;
        PriceDiscProductCodeType itemCode;
        PriceDiscPartyCodeType   accountCode;
        ItemRelation             itemRelationLineDisc, itemRelationMultiDisc;
        CustVendRel              accountRelationPrice, accountRelationLineDisc, accountRelationMultiDisc;
        Integer                  idx;        
        Price                    unitPrice, listPrice;
        Percent                  percentage;
        UnitOfMeasureSymbol      unitId, prevUnitId;
        container                con, priceCon;
        Qty                      qtyValue;
        UnitOfMeasureSymbol      salesUnitId;
        InventDimCombination     inventDimCombination;        

        ttsbegin; //to avoid extra calls to SQL on Production envs.
        this.createHeaderXml();

        this.getParameters(_request);

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        else
        {
            custTable.Currency = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty).Currency;
        }
        inventTable  = InventTable::find(productId);
        salesUnitId  = inventTable.salesUnitId();

        variantInventDim = InventDim::find(variantId);
        inventDimDefault = this.setProductStorageDim();
        inventDimActivated.initFromInventDim(inventDimDefault, InventDimGroupSetup::newItemId(inventTable.itemId).activeSalesPriceFields());

        if(custTable.Currency && inventTable)
        {
            while (idx < 9)
            {
                itemCode    = idx mod 3;
                accountCode = idx div 3;

                itemRelationLineDisc     = itemCode == PriceDiscProductCodeType::Table ? inventTable.itemId : (itemCode == PriceDiscProductCodeType::GroupId ? inventTable.inventTableModuleSales().LineDisc : '');
                itemRelationMultiDisc    = itemCode == PriceDiscProductCodeType::Table ? inventTable.itemId : (itemCode == PriceDiscProductCodeType::GroupId ? inventTable.inventTableModuleSales().MultiLineDisc : '');
                accountRelationPrice     = accountCode == PriceDiscPartyCodeType::Table ? custTable.AccountNum : (accountCode == PriceDiscPartyCodeType::GroupId   ? custTable.PriceGroup : '');
                accountRelationLineDisc  = accountCode == PriceDiscPartyCodeType::Table ? custTable.AccountNum : (accountCode == PriceDiscPartyCodeType::GroupId   ? custTable.LineDisc : '');
                accountRelationMultiDisc = accountCode == PriceDiscPartyCodeType::Table ? custTable.AccountNum : (accountCode == PriceDiscPartyCodeType::GroupId   ? custTable.MultiLineDisc : '');
                
                if (PriceDisc::validatePartyRelation(accountCode, accountRelationPrice) || PriceDisc::validatePartyRelation(accountCode, accountRelationLineDisc) ||
                    PriceDisc::validatePartyRelation(accountCode, accountRelationMultiDisc) &&
                   (PriceDisc::validateProductRelation(itemCode, itemRelationLineDisc) || PriceDisc::validateProductRelation(itemCode, itemRelationMultiDisc)))
                {
                    con += this.findAllPrices(itemCode, accountCode, accountRelationPrice, accountRelationLineDisc, accountRelationMultiDisc, itemRelationLineDisc, 
                                             itemRelationMultiDisc, variantInventDim, inventDimActivated);
                }
                idx++;
            }

            //find all qty discounts if Retail enabled
            con = this.findAllRetailDiscQty(con, variantId);

            //sort by UnitId and Qty
            con = this.sortPrices(con);

            //remove duplicate without dim for variant
            con = this.removePriceDuplicates(con);

            //calculate prices for all found qty's
            for(i=1;i<=conLen(con);i++)
            {
                unitId    = conpeek(conPeek(con, i), 2);
                unitId    = unitId ? unitId : parmUnitId ? parmUnitId : salesUnitId;
                qtyValue  = conpeek(conPeek(con, i), 1);
                inventDim = variantInventDim ? variantInventDim : InventDim::find(conpeek(conPeek(con, i), 3));

                if(inventDim.inventDimId == blankInventDim.inventDimId && inventTable.hasProductDimensions())
                {
                    while select inventDimCombination
                        where inventDimCombination.ItemId == inventTable.itemId &&
                                inventDimCombination.SC_VisibleInWebShop
                    {
                        inventDim                          = inventDimCombination.inventDim();
                        inventDim.InventSiteId             = inventDimActivated.InventSiteId;
                        inventDim.InventLocationId         = inventDimActivated.InventLocationId;
                        inventDim                          = InventDim::findOrCreate(inventDim);

                        if(this.isRetailEnabled())
                        {
                            [unitPrice, listPrice, percentage] = this.calcRetailVolumePrices(inventDim, qtyValue, unitId);
                        }
                        else
                        {
                            [unitPrice, listPrice, percentage] = this.calcVolumePrices(inventDim, qtyValue, unitId, prevUnitId, listPrice);
                        }

                        //output unic results per variant, unit, price and qty
                        if(!conFind(priceCon, [unitPrice, unitId, inventDim.inventDimId, qtyValue]) &&
                           !conFind(priceCon, [unitPrice, unitId, blankInventDim.inventDimId, qtyValue]) && percentage > 0)
                        {
                            node = resultNode.appendChild(resultXml.createElement(#volumePrice));

                            priceCon += [[unitPrice, unitId, inventDim.inventDimId, qtyValue]];
                            inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(inventTable.ItemId));
                            inventDim = InventDim::findDim(inventDim);

                            this.initDefaultVolumePriceFields(qtyValue, unitPrice, unitId, inventDim.inventDimId, percentage);
                            this.setWebshopDataMappingGetAPI('GetVolumePrices', inventTable);
                        }
                    }
                }
                else
                {
                    inventDim.InventSiteId             = inventDimActivated.InventSiteId;
                    inventDim.InventLocationId         = inventDimActivated.InventLocationId;

                    if(this.isRetailEnabled())
                    {
                        [unitPrice, listPrice, percentage] = this.calcRetailVolumePrices(inventDim, qtyValue, unitId);
                    }
                    else
                    {
                        [unitPrice, listPrice, percentage] = this.calcVolumePrices(inventDim, qtyValue, unitId, prevUnitId, listPrice);
                    }

                    //output unic results per variant, unit, price and quantity
                    if(!conFind(priceCon, [unitPrice, unitId, inventDim.inventDimId, qtyValue]) &&
                       !conFind(priceCon, [unitPrice, unitId, blankInventDim.inventDimId, qtyValue]) && percentage > 0)
                    {
                        node = resultNode.appendChild(resultXml.createElement(#volumePrice));

                        priceCon += [[unitPrice, unitId, inventDim.inventDimId, qtyValue]];
                        inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(inventTable.ItemId));
                        inventDim = InventDim::findDim(inventDim);

                        this.initDefaultVolumePriceFields(qtyValue, unitPrice, unitId, inventDim.inventDimId, percentage);
                        this.setWebshopDataMappingGetAPI('GetVolumePrices', inventTable);
                    }
                }                               

                prevUnitId = unitId;                
            }
        }
        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllPrices</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container findAllPrices(PriceDiscProductCodeType _itemCode, PriceDiscPartyCodeType _accountCode, CustVendRel _accountRelationPrice, CustVendRel _accountRelationLineDisc, 
                                      CustVendRel _accountRelationMultiDisc, ItemRelation _itemRelationLineDisc, ItemRelation _itemRelationMultiDisc, 
                                      InventDim _variantInventDim, InventDim _inventDimActivated)
    {      
        PriceDiscTable      priceDiscTable;
        PriceParameters     priceParameters = PriceParameters::find();
        InventDim           inventDim;
        UnitOfMeasureSymbol salesUnitId = inventTable.salesUnitId();
        container           con;

        while select QuantityAmountFrom, QuantityAmountTo, UnitId, InventDimId, relation from priceDiscTable
            order by Relation, UnitId, QuantityAmountFrom, InventDimId
            where priceDiscTable.AccountCode == _accountCode &&
                    (priceDiscTable.relation == PriceType::PriceSales && priceDiscTable.AccountRelation == _accountRelationPrice) ||
                    (priceDiscTable.relation == PriceType::LineDiscSales && priceDiscTable.AccountRelation == _accountRelationLineDisc) ||
                    (priceDiscTable.relation == PriceType::MultiLineDiscSales && priceDiscTable.AccountRelation == _accountRelationMultiDisc) &&
                    priceDiscTable.ItemCode == _itemCode &&
                    ((priceDiscTable.relation == PriceType::PriceSales && priceDiscTable.ItemRelation == inventTable.itemId) ||
                    (priceDiscTable.relation == PriceType::LineDiscSales && priceDiscTable.ItemRelation == _itemRelationLineDisc) ||
                    (priceDiscTable.relation == PriceType::MultiLineDiscSales && priceDiscTable.ItemRelation == _itemRelationMultiDisc)) &&
                    priceDiscTable.Currency == custTable.Currency &&
                    (priceDiscTable.UnitId == parmUnitId || !parmUnitId || !priceDiscTable.UnitId) &&
                    (priceDiscTable.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !priceDiscTable.FromDate) &&
                    (priceDiscTable.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || !priceDiscTable.ToDate)
            join TableId from inventDim
                where inventDim.inventDimId       == priceDiscTable.InventDimId &&
                        (inventDim.InventSizeId     == _variantInventDim.InventSizeId || !inventDim.InventSizeId || !variantId) &&
                        (inventDim.configId         == _variantInventDim.configId || !inventDim.configId || !variantId) &&
                        (inventDim.InventStyleId    == _variantInventDim.InventStyleId || !inventDim.InventStyleId || !variantId) &&
                        (inventDim.InventColorId    == _variantInventDim.InventColorId || !inventDim.InventColorId || !variantId) &&
                        (inventDim.InventSiteId     == _inventDimActivated.InventSiteId || !inventDim.InventSiteId) &&
                        (inventDim.InventLocationId == _inventDimActivated.InventLocationId || !inventDim.InventLocationId)
        {
            if(!PriceDiscTable::isPartyCodeProductCodeActivated(priceDiscTable.relation, _accountCode, _itemCode, priceParameters))
            {
                continue;
            }

            priceDiscTable.QuantityAmountFrom = priceDiscTable.QuantityAmountFrom == 0 ? priceDiscTable.QuantityAmountFrom + 1 : priceDiscTable.QuantityAmountFrom;
            priceDiscTable.QuantityAmountTo = priceDiscTable.QuantityAmountTo == 0 ? priceDiscTable.QuantityAmountTo + 1 : priceDiscTable.QuantityAmountTo;

            if(priceDiscTable.UnitId && priceDiscTable.UnitId != salesUnitId && !this.checkValidationRules(UnitOfMeasure::findBySymbol(priceDiscTable.UnitId)))
            {
                continue;
            }

            //find all agreements qty's
            if(!conFind(con, [priceDiscTable.QuantityAmountFrom, priceDiscTable.UnitId, priceDiscTable.InventDimId]))
            {
                con += [[priceDiscTable.QuantityAmountFrom, priceDiscTable.UnitId, priceDiscTable.InventDimId]];
            }

            if(!conFind(con, [priceDiscTable.QuantityAmountTo, priceDiscTable.UnitId, priceDiscTable.InventDimId]))
            {
                con += [[priceDiscTable.QuantityAmountTo, priceDiscTable.UnitId, priceDiscTable.InventDimId]];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllRetailDiscQty</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container findAllRetailDiscQty(container _con, InventDimId _variantInventDimId = '')
    {
        Map                         mapdisc;        
        RetailOfferId               offerId;
        container                   offerIds;
        RetailPeriodicDiscountLine  retailPeriodicDiscountLine;
        RetailGroupMemberLine       retailGroupMemberLine;
        RetailMultibuyDiscountLine  retailMultibuyDiscountLine;
        TmpRetailPriceCheckProduct  tmpPriceCheck;
        RefRecId                    productVariant;
    
        if(custTable && this.isRetailEnabled())
        {            
            tmpPriceCheck.Product = inventTable.Product;
            tmpPriceCheck.insert();

            mapdisc = RetailPeriodicDiscount::getOfferIdsByProductsV2(this.getRetailChannelTable().RecId, 0, tmpPriceCheck, '0', DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            if (!mapdisc.empty())
            {
                if(_variantInventDimId)
                {
                    productVariant = InventDimCombination::find(inventTable.ItemId, _variantInventDimId).DistinctProductVariant;
                }

                offerIds = str2con(mapdisc.lookup(inventTable.Product), ', ', false);
            
                for(int ii=1;ii<=conLen(offerIds);ii++)
                {
                    offerId = conPeek(offerIds, ii);

                    select firstOnly UnitOfMeasure, RetailGroupMemberLine from retailPeriodicDiscountLine
                       where retailPeriodicDiscountLine.OfferId == offerId
                       join firstOnly Variant from retailGroupMemberLine
                            where retailGroupMemberLine.RecId   == retailPeriodicDiscountLine.RetailGroupMemberLine &&
                                 (retailGroupMemberLine.Variant == productVariant || !productVariant || !retailGroupMemberLine.Variant) ||
                                 (retailGroupMemberLine.InventDimId == _variantInventDimId || !_variantInventDimId);
                
                    if(!retailGroupMemberLine || RetailPeriodicDiscount::findByOfferId(offerId).CurrencyCode != custTable.Currency)
                    {
                        continue;
                    }

                    while select qtyLowest from retailMultibuyDiscountLine
                    where retailMultibuyDiscountLine.multibuyId == offerId
                    {
                        if(retailGroupMemberLine.Variant)
                        {
                            _variantInventDimId = InventDimCombination::findByDistinctProductVariant(retailGroupMemberLine.Variant).InventDimId;
                        }
                    
                        if(!conFind(_con, [retailMultibuyDiscountLine.qtyLowest, UnitOfMeasure::find(retailPeriodicDiscountLine.UnitOfMeasure).Symbol, _variantInventDimId]))
                        {
                            _con += [[retailMultibuyDiscountLine.qtyLowest, UnitOfMeasure::find(retailPeriodicDiscountLine.UnitOfMeasure).Symbol, _variantInventDimId]];
                        }
                    }
                }
            }
        }
    
        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyRetailDisc</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean findAnyRetailDisc()
    {
        Map                         mapdisc;        
        TmpRetailPriceCheckProduct  tmpPriceCheck;        
        container                   offerIds;
        RetailOfferId               offerId;
        boolean                     ret;        
    
        if(custTable && this.isRetailEnabled())
        {
            tmpPriceCheck.Product = inventTable.Product;
            tmpPriceCheck.insert();

            mapdisc = RetailPeriodicDiscount::getOfferIdsByProductsV2(this.getRetailChannelTable().RecId, 0, tmpPriceCheck, '0', DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            
            if (!mapdisc.empty())
            {
                offerIds = str2con(mapdisc.lookup(inventTable.Product), ', ', false);                
            
                for(int ii=1;ii<=conLen(offerIds);ii++)
                {
                    offerId = conPeek(offerIds, ii);
                    ret     = ret || RetailPeriodicDiscount::findByOfferId(offerId).CurrencyCode == custTable.Currency;                    
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortPrices</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container sortPrices(container _con)
    {
        container           c2, c3;
        UnitOfMeasureSymbol c2Value, c3Value;
        Qty                 qtyValue, nextQtyValue;
        Integer             a, b;

        //by Unit
        if(!parmUnitId)
        {
            for(b=1;b<=conLen(_con);b++)
            {
                for(a=1+b;a<=conLen(_con);a++)
                {
                    c2      = conPeek(_con,b);
                    c2Value = conPeek(c2, 2);
                    c3      = conPeek(_con,a);
                    c3Value = conPeek(c3, 2);

                    if(c3Value < c2Value)
                    {
                        _con = conpoke(_con, b, c3);
                        _con = conpoke(_con, a, c2);
                    }
                }
            }
        }

        //by Qty
        for(b=1;b<=conLen(_con);b++)
        {
            for(a=1+b;a<=conLen(_con);a++)
            {
                c2           = conPeek(_con,b);
                qtyValue     = conPeek(c2, 1);
                c3           = conPeek(_con,a);
                nextQtyValue = conPeek(c3, 1);

                if(nextQtyValue < qtyValue && conPeek(c2, 2) == conPeek(c3, 2))
                {
                    _con = conpoke(_con, b, c3);
                    _con = conpoke(_con, a, c2);
                }
            }
        }

        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePriceDuplicates</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container removePriceDuplicates(container _con)
    {
        InventDim   inventDim;
        container   c2, c3;        
        Integer     a, b;

        for(b=1;b<=conLen(_con);b++)
        {
            for(a=1+b;a<=conLen(_con);a++)
            {
                c2 = conPeek(_con,b);
                c3 = conPeek(_con,a);

                if(conPeek(c2, 1) == conPeek(c3, 1) && conPeek(c2, 2) == conPeek(c3, 2))
                {
                    inventDim = InventDim::find(conPeek(c2, 3));
                    inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(productId));
                    inventDim = InventDim::findDim(inventDim);
                    if(inventDim.inventDimId == blankInventDim.inventDimId)
                    {
                        _con = conDel(_con, b, 1);
                    }
                }
            }
        }

        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultVolumePriceFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultVolumePriceFields(Qty _qty, Price _unitPrice, UnitOfMeasureSymbol _unitId, InventDimId _inventDimId, Percent _percentage)
    {
        this.addFieldValue(#quantity, node, _qty);
        this.addFieldValue(#price, node, _unitPrice);
        this.addFieldValue(#unitOfMeasureId, node, _unitId);
        this.addFieldValue(#variantId, node, _inventDimId == blankInventDim.inventDimId ? '' : _inventDimId);
        this.addFieldValue(#discountPercent, node, _percentage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVolumePrices</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcVolumePrices(InventDim _inventDim = blankInventDim, Qty _qtyValue = 1, UnitOfMeasureSymbol _unitId = inventTable.salesUnitId(), UnitOfMeasureSymbol _prevUnitId = '',
                                         Price _prevListPrice = 0, TransDate _priceDiscDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PriceDisc   priceDisc, priceDiscSingle;
        Price       listPrice, unitPrice;
        Percent     percentage;        

        priceDisc = this.createPriceDiscInstance(inventTable.ItemId,
                                                 _inventDim,
                                                 _unitId,
                                                 _qtyValue,
                                                 custTable.AccountNum,
                                                 custTable.currency,
                                                 _priceDiscDate);

        priceDisc.findPrice(custTable.PriceGroup);

        //if unitid changed calculate price for 1 unit (to find percentage)
        if(_prevUnitId != _unitId)
        {            
            if(webShopsTable.DefaultPrice == SC_DefaultPrice::BasePrice)
            {
                priceDiscSingle = this.createPriceDiscInstance(inventTable.ItemId,
                                                               _inventDim,
                                                               _unitId,
                                                               1,
                                                               '',
                                                               custTable.currency,
                                                               _priceDiscDate);

                priceDiscSingle.findItemPrice();

                listPrice = this.calcListPriceValue(priceDiscSingle.price(), priceDiscSingle.priceUnit(), priceDiscSingle.markup(), custTable.currency);                
            }
            else
            {
                _prevListPrice = 0; //if unitid changed and defaultPrice set as unitPrice - we need erase _prevListPrice value to recalculate list price
            }
        }
        else
        {
            listPrice = _prevListPrice;
        }

        //calculate price for agreement qty
        priceDisc.findLineDisc(inventTable.salesLineDisc(), custTable.LineDisc);
        priceDisc.findMultiLineDisc(inventTable.salesMultiLineDisc(), custTable.MultiLineDisc, _qtyValue);

        if(webShopsTable.DefaultPrice == SC_DefaultPrice::UnitPrice)
        {
            if(!_prevListPrice)
            {
                listPrice = this.calcListPriceValue(priceDisc.price(), priceDisc.priceUnit(), priceDisc.markup(), custTable.currency);                
            }
        }
                
        unitPrice = this.calcUnitPriceValue(priceDisc, _qtyValue, custTable.Currency);
        
        //calculate price discount percent
        if(unitPrice != listPrice && listPrice)
        {
            percentage = round(100 - unitPrice / listPrice * 100, 0.1);
        }
        else
        {
            percentage = 0;
        }

        return [decRound(unitPrice, 2), listPrice, percentage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimesionBasedBOMPriceStockFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDimesionBasedBOMPriceStockFields(boolean _isPriceFields = false, Price _unitPrice = 0, Price _listPrice = 0)
    {
        BOMConfigRoute              BOMConfigRoute;
        InventDim                   inventDim;
        BOMVersion                  bomVersion;
        InventDimCombination        inventDimCombination;
        boolean                     isBOMVersionSpec;
        container                   configRoutes, configRouteValues, configs, allBOMRoutes;
        EcoResItemConfigurationName configId;
        XmlNode                     stockNode, priceNode;

        if(loadRelatedSkus)
        {
            if(webshopsTable.OverrideCustDim)
            {
                inventDim.InventSiteId = webshopsTable.DefaultSiteId;
            }
            else
            {
                //take from customer
                inventDim.InventSiteId = custTable.InventSiteId;
            }

            //override site if invent setting is mandatory
            inventDim.InventSiteId = inventTable.inventItemOrderSetupMap(InventItemOrderSetupType::Sales).inventSiteId(inventDim.InventsiteId, inventTable);
            //if no site warehouse settings on item, take default from Sana parameters
            inventDim.InventSiteId = inventDim.InventSiteId ? inventDim.InventSiteId : webshopsTable.DefaultSiteId;

            [bomVersion, isBOMVersionSpec] = this.findBOMVersion(inventDim);

            select firstOnly BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == bomVersion.BOMId;

            allBOMRoutes = this.findBOMRouteCombinations(BOMConfigRoute);

            while select ConfigGroupId from BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == bomVersion.BOMId
            {
                configRoutes += BOMConfigRoute.ConfigGroupId;
            }

            for(k=1;k<=conLen(allBOMRoutes);k++)
            {
                while select ConfigGroupId from BOMConfigRoute order by LineNum where BOMConfigRoute.BOMId == bomVersion.BOMId
                {
                    configRouteValues += [[BOMConfigRoute.ConfigGroupId, conPeek(conPeek(allBOMRoutes, k), conLen(configRouteValues)+1), '']];
                }

                configs  = ConfigChoice::findConfig(inventTable.ItemId, configRouteValues);
                configId = conLen(configs) == 4 ? any2str(conPeek(configs, 4)) : '';
                configRouteValues = conNull();

                select firstOnly inventDimCombination
                    where inventDimCombination.ItemId == inventTable.ItemId
                    exists join inventDim
                        where inventDim.inventDimId == inventDimCombination.InventDimId &&
                              inventDim.configId == configId;

                if(inventDimCombination)
                {
                    continue; //skip existing variants, generate variant IDs only for potential variant configuration
                }

                if(_isPriceFields)
                {
                    priceNode = resultNode.appendChild(resultXml.createElement(#price));
                    this.addFieldValue(#productId, priceNode, inventTable.itemId);
                    this.addFieldValue(#variantId, priceNode, bomVersion.BOMId + ';' + int2str(k));
                    this.addFieldValue(#price, priceNode, _unitPrice);
                    this.addFieldValue(#listPrice, priceNode, _listPrice);
                    this.addFieldValue(#currencyId, priceNode, Currency::find(custTable.Currency).CurrencyCodeISO);
                    this.addFieldValue(#unitOfMeasureId, priceNode, parmUnitId ? parmUnitId : inventTable.salesUnitId());
                    this.addFieldValue(#isOrderable, priceNode, #one);
                }
                else
                {
                    stockNode = resultNode.appendChild(resultXml.createElement(#stock));
                    this.addFieldValue(#productId, stockNode, inventTable.itemId);
                    this.addFieldValue(#variantId, stockNode, bomVersion.BOMId + ';' + int2str(k));
                    this.addFieldValue(#inventory, stockNode, 0);
                    this.addFieldValue(#unitOfMeasureId, stockNode, parmUnitId ? parmUnitId : inventTable.salesUnitId());
                    this.addFieldValue(#isOrderable, stockNode, #one);
                }
            }            
        }
        
        isOrderable = !loadRelatedSkus || conLen(allBOMRoutes); //configurable variants always orderable if routes setup but could not exist in inventory
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRetailVolumePrices</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected container calcRetailVolumePrices(InventDim _inventDim = blankInventDim, Qty _qtyValue = 1, UnitOfMeasureSymbol _unitId = inventTable.salesUnitId())
    {
        Price       listPrice, unitPrice, discValue;
        Percent     percentage;

        [unitPrice, discValue, percentage] = this.calcRetailItemPrice(custTable.currency, _inventDim, _unitId, _qtyValue);

        listPrice = this.calcBaseItemPrice(unitPrice, listPrice, discValue);

        return [unitPrice, listPrice, percentage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnitPriceValue</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected Price calcUnitPriceValue(PriceDisc _priceDisc, Qty _qtyValue, CurrencyCode _currency)
    {
        return PriceDisc::price2Amount(_priceDisc.price(), _priceDisc.priceUnit(), _priceDisc.getDiscAmount(), _qtyValue, _qtyValue, _priceDisc.markup(), _priceDisc.getDiscPercent(), _currency, 0) / _qtyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HasVolumePrices</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument HasVolumePrices(XmlDocument _request)
    {
        ttsbegin; //to avoid extra calls to SQL on Production envs.
        this.createHeaderXml();

        this.getParameters(_request);

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        else
        {
            custTable.Currency = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty).Currency;
        }

        inventTable = InventTable::find(productId);        
                
        resultNode.appendChild(resultXml.createElement(#hasVolumePrices)).innerText(this.findAnyTradeAgreement() || this.findAnyRetailDisc() ? #one : #zero); 
        ttscommit;

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyTradeAgreement</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean findAnyTradeAgreement()
    {
        InventDim       inventDimDefault, inventDimActivated, inventDim;
        PriceDiscTable  priceDiscTable;

        inventDimDefault = this.setProductStorageDim();
        inventDimActivated.initFromInventDim(inventDimDefault, InventDimGroupSetup::newItemId(inventTable.itemId).activeSalesPriceFields());

        select firstonly RecId from priceDiscTable
            where (priceDiscTable.Relation          == PriceType::PriceSales    || priceDiscTable.Relation == PriceType::LineDiscSales ||
                   priceDiscTable.Relation          == PriceType::MultiLineDiscSales)                                                  &&
                  (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) >= priceDiscTable.FromDate  || !priceDiscTable.FromDate) &&
                  (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) <= priceDiscTable.ToDate    || !priceDiscTable.ToDate)   &&
                  ((priceDiscTable.ItemCode         == PriceDiscProductCodeType::Table   &&
                  priceDiscTable.ItemRelation       == inventTable.ItemId)                                                             ||
                  (priceDiscTable.ItemCode          == PriceDiscProductCodeType::GroupId &&
                  ((priceDiscTable.Relation         == PriceType::LineDiscSales && priceDiscTable.ItemRelation == inventTable.salesLineDisc())             ||
                   (priceDiscTable.Relation         == PriceType::MultiLineDiscSales && priceDiscTable.ItemRelation == inventTable.salesMultiLineDisc()))) ||
                  (priceDiscTable.ItemCode          == PriceDiscProductCodeType::All))                                                 &&
                  ((priceDiscTable.AccountCode      == PriceDiscPartyCodeType::Table     &&
                  priceDiscTable.AccountRelation    == custTable.AccountNum)                                                           ||
                  (priceDiscTable.AccountCode       == PriceDiscPartyCodeType::GroupId   &&
                  ((priceDiscTable.Relation         == PriceType::PriceSales && priceDiscTable.AccountRelation   == custTable.PriceGroup)            ||
                  (priceDiscTable.Relation          == PriceType::LineDiscSales && priceDiscTable.AccountRelation == custTable.LineDisc)             ||
                  (priceDiscTable.Relation          == PriceType::MultiLineDiscSales && priceDiscTable.AccountRelation == custTable.MultiLineDisc))) ||
                  (priceDiscTable.AccountCode       == PriceDiscPartyCodeType::All))                                                   &&
                  priceDiscTable.QuantityAmountFrom > 1                                                                                &&
                  priceDiscTable.Currency           == custTable.Currency
        exists join inventDim
            where priceDiscTable.InventDimId == inventDim.inventDimId &&
                 (inventDim.InventSiteId     == inventDimActivated.InventSiteId     || !inventDim.InventSiteId) &&
                 (inventDim.InventLocationId == inventDimActivated.InventLocationId || !inventDim.InventLocationId);

        return priceDiscTable ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategoryFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initCategoryFields(XmlNode _parentNode, EcoResCategory _productCategory)
    {
        EcoResCategoryTranslation   ecoResCategoryTranslation;
        EcoResCategoryFriendlyName  friendlyName;        
        SC_LanguageParametersTable  languageParametersTable;        

        categoryName = '';

        this.mergeCategoryHierarchyNames(_productCategory.RecId);

        this.addFieldValue(#id, _parentNode, categoryName);        

        while select FriendlyName, LanguageId from ecoResCategoryTranslation
            index hint CategoryLanguageIdx
            where ecoResCategoryTranslation.Category == _productCategory.RecId &&
                  ecoResCategoryTranslation.FriendlyName
            exists join TableId from languageParametersTable
                where languageParametersTable.LanguageId == ecoResCategoryTranslation.LanguageId
        {
            friendlyName = ecoResCategoryTranslation.LanguageId == CompanyInfo::languageId() ? ecoResCategoryTranslation.FriendlyName : friendlyName;
            this.addFieldValue(#title + '_' + int2str(this.language2LocaleId(ecoResCategoryTranslation.LanguageId)), _parentNode, ecoResCategoryTranslation.FriendlyName);
        }

        this.addFieldValue(#title, _parentNode, friendlyName ? friendlyName : _productCategory.Name);
        this.addFieldValue(#visible, _parentNode, _productCategory.SC_VisibleInWebshop);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initImageFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initImageFields(DocuRef _docuRef, ItemId _itemId, InventDimId _inventDimId = '')
    {
        DocuValue docuValue = _docuRef.docuValue();        

        if(docuValue)
        {
            node = resultNode.appendChild(resultXml.createElement(#productImage));
            this.addFieldValue(#productId, node, _itemId);
            this.addFieldValue(#variantId, node, _InventDimId);
            this.addFieldValue(#imageName, node, docuValue.fileNameValue());    
            this.addFieldValue(#modifiedDate, node, _docuRef.modifiedDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGroupFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initGroupFields(InventItemGroup _itemGroup)
    {
        SC_InventGroupTxt   inventGroupTxt;
        Integer             locale;
        
        node = resultNode.appendChild(resultXml.createElement(#node));

        this.addFieldValue(#id, node, _itemGroup.ItemGroupId);
        this.addFieldValue(#title, node, _itemGroup.Name);

        while select inventGroupTxt
            index hint ItemLanguageIdx
            where inventGroupTxt.ItemGroupId ==  _itemGroup.ItemGroupId && inventGroupTxt.Txt
        {
            locale = this.language2LocaleId(inventGroupTxt.LanguageId);
        
            if(locale)
            {
                this.addFieldValue(#title + '_' + int2str(locale), node, inventGroupTxt.Txt);
            }
        }

        this.addFieldValue(#visible, node, _itemGroup.SC_VisibleInWebshop);
        this.addFieldValue(#sortId, node, _itemGroup.SC_SortNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvisibleItemFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initInvisibleItemFields()
    {        
        productNode = resultNode.appendChild(resultXml.createElement(#product));

        this.addFieldValue(#id, productNode, inventTable.ItemId);
        this.addFieldValue(#title, productNode, this.getProductName());
        this.addProductTranslations(#title, productNode);
        this.addFieldValue(#visible, productNode, inventTable.SC_VisibleInWebShop);
        this.addFieldValue(#unitOfMeasureId, productNode, inventTable.salesUnitId());
        this.addUOMConvertions(productNode);
        new InteropPermission(InteropKind::ClrInterop).assert();
        this.addFieldValue(#modifiedDate, productNode, System.DateTime::FromOADate(Global::real2double(inventTable.SC_LastModified)));
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initItemFields(XmlNode _parentNode)
    {
        Price unitPrice, listPrice, discValue;        

        this.addFieldValue(#id, _parentNode, inventTable.ItemId);
        this.addFieldValue(#title, _parentNode, this.getProductName());
        this.addProductTranslations(#title, _parentNode);
        this.addFieldValue(#visible, _parentNode, inventTable.SC_VisibleInWebShop);
        this.addFieldValue(#visibleFrom, _parentNode, inventTable.SC_VisibleFrom);
        this.addFieldValue(#visibleTo, _parentNode, inventTable.SC_VisibleTo);
        this.addField(#blocked, _parentNode, inventTable);
        this.addField(#categoryId, _parentNode, inventTable);
        this.addFieldValue(#length, _parentNode, inventTable.grossDepth);
        this.addFieldValue(#width, _parentNode, inventTable.grossWidth);
        this.addFieldValue(#height, _parentNode, inventTable.grossHeight);
        this.addFieldValue(#grossWeight, _parentNode, inventTable.grossWeight());
        this.addFieldValue(#taxPercent, _parentNode, calculatePrices ? this.calcItemTaxPercent() : 0);        

        if(calculatePrices)
        {
            [unitPrice, listPrice, discValue] = this.calcItemPrices(true, true);

            this.addFieldValue(#price, _parentNode, unitPrice);

            if(multiCurrency)
            {
                this.addFieldValue(#price + '_' + Currency::find(custTable.Currency).CurrencyCodeISO, _parentNode, unitPrice);
                this.addMultiCurrency(_parentNode);
            }
            this.addFieldValue(#listPrice, _parentNode, this.calcBaseItemPrice(unitPrice, listPrice, discValue));
        }
  
        if(calculateInventory)
        {
            this.addFieldValue(#inventory, _parentNode, this.calcInventory());
        }

        this.addFieldValue(#hasVariants, _parentNode, inventTable.hasProductDimensions());
        new InteropPermission(InteropKind::ClrInterop).assert();
        this.addFieldValue(#modifiedDate, _parentNode, System.DateTime::FromOADate(Global::real2double(inventTable.SC_LastModified)));
        CodeAccessPermission::revertAssert();
        this.addFieldValue(#configuratorModel, _parentNode, inventTable.SC_ConfiguratorModel);
        this.addFieldValue(#unitOfMeasureId, _parentNode, inventTable.salesUnitId());        
        
        if(this.isProductDimensionBasedBOM()) //dimension based BOM can be used only in sales UOM
        {
            node = _parentNode.appendChild(resultXml.createElement(#unitsOfMeasure));
            this.addUOM(node, UnitOfMeasure::findBySymbol(inventTable.salesUnitId()));
        }
        else
        {
            this.addUOMConvertions(_parentNode);
        }

        this.addExtraFields(_parentNode, inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableMainFilters</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryRun inventTableMainFilters()
    {
        SC_FilterWebShopsTable  filterWebShopsTable;        
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource, titleBuildDataSource, assortmentBuildDataSource, assortmentTableBuildDataSource, categoryBuildDataSource, categoryBuildDataSource2, categoryBuildDataSource3;
        QueryRun                queryRunInvent;
        TransDate               systemDate;        

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(InventTable));

        //item visibility
        if(visibleOnly)
        {
            queryBuildDataSource.addRange(fieldnum(InventTable, SC_VisibleInWebshop)).value(queryValue(NoYes::Yes));
        }

        //product filters from webshop        
        while select FieldName, FilterStr from filterWebShopsTable
            where filterWebShopsTable.WebShopId == webShopsTable.WebShopId &&
                  filterWebShopsTable.TableName == tableStr(InventTable)
        {
            queryBuildDataSource.addRange(fieldname2id(tablenum(InventTable), filterWebShopsTable.FieldName)).value(filterWebShopsTable.FilterStr);
        }

        //category filters from webshop
        if(SC_FilterWebShopsTable::existFilters(webShopsTable.WebShopId, tableStr(EcoResCategory)))
        {
            categoryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(EcoResProductCategory));
            categoryBuildDataSource.addLink(fieldnum(EcoResProductCategory, Product), fieldnum(InventTable, Product));
            categoryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            categoryBuildDataSource.fetchMode(QueryFetchMode::One2One);
            categoryBuildDataSource2 = categoryBuildDataSource.addDataSource(tablenum(EcoResCategory));
            categoryBuildDataSource2.addLink(fieldnum(EcoResProductCategory, Category), fieldnum(EcoResCategory, RecId));
            categoryBuildDataSource2.joinMode(JoinMode::ExistsJoin);
            categoryBuildDataSource2.fetchMode(QueryFetchMode::One2One);
            categoryBuildDataSource2.addRange(fieldnum(EcoResCategory, CategoryHierarchy)).value(queryValue(webShopsTable.CategoryHierarchy));
            categoryBuildDataSource3 = categoryBuildDataSource2.addDataSource(tablenum(EcoResCategory));
            categoryBuildDataSource3.addLink(fieldnum(EcoResCategory, CategoryHierarchy), fieldnum(EcoResCategory, CategoryHierarchy));
            categoryBuildDataSource3.joinMode(JoinMode::ExistsJoin);            
            categoryBuildDataSource3.addRange(fieldNum(EcoResCategory, DataAreaId)).value(strFmt('((%1.%2 <= %3.%2) && (%1.%4 >= %3.%4))',
                                              categoryBuildDataSource3.name(), fieldStr(EcoResCategory,NestedSetLeft),categoryBuildDataSource2.name(), fieldStr(EcoResCategory,NestedSetRight)));

            while select FieldName, FilterStr from filterWebShopsTable
                where filterWebShopsTable.WebShopId == webShopsTable.WebShopId &&
                      filterWebShopsTable.TableName == tableStr(EcoResCategory)
            {
                categoryBuildDataSource3.addRange(fieldname2id(tablenum(EcoResCategory), filterWebShopsTable.FieldName)).value(filterWebShopsTable.FilterStr);
            }           
        }

        //retail assortments filters
        if(webShopsTable.EnableRetailAssortments && this.isRetailEnabled())
        {
            systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            assortmentBuildDataSource = queryBuildDataSource.addDataSource(tablenum(RetailAssortmentView));
            assortmentBuildDataSource.addLink(fieldnum(InventTable, Product), fieldnum(RetailAssortmentView, Product));
            assortmentBuildDataSource.joinMode(JoinMode::ExistsJoin);
            assortmentBuildDataSource.fetchMode(QueryFetchMode::One2One);
            assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, OMOperatingUnitId)).value(queryValue(this.getRetailChannelTable().OMOperatingUnitID));
            assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidFrom)).value(SysQuery::valueEmptyString());
            assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidFrom)).value('..' + queryValue(systemDate));
            assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidTo)).value(SysQuery::valueEmptyString());
            assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidTo)).value(queryValue(systemDate) + '..');

            assortmentTableBuildDataSource = assortmentBuildDataSource.addDataSource(tablenum(RetailAssortmentTable));
            assortmentTableBuildDataSource.addLink(fieldnum(RetailAssortmentView, AssortmentID), fieldnum(RetailAssortmentTable, RecId));
            assortmentTableBuildDataSource.joinMode(JoinMode::ExistsJoin);
            assortmentTableBuildDataSource.fetchMode(QueryFetchMode::One2One);
            assortmentTableBuildDataSource.addRange(fieldNum(RetailAssortmentTable, Status)).value(QueryValue(RetailAssortmentStatusType::Published));
        }

        //sorting
        if(sortField == #title)
        {
            titleBuildDataSource = queryBuildDataSource.addDataSource(tablenum(InventTableExpanded));
            titleBuildDataSource.addLink(fieldnum(InventTable, ItemId), fieldnum(InventTableExpanded, ItemId));
            titleBuildDataSource.joinMode(JoinMode::InnerJoin);
            titleBuildDataSource.fetchMode(QueryFetchMode::One2One);
            titleBuildDataSource.addOrderByField(fieldnum(InventTableExpanded, ProductName), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
        }
        else
        {
            queryBuildDataSource.addOrderByField(fieldnum(InventTable, ItemId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);
        }

        //filters from request
        queryBuildDataSource = this.addExtraFieldsQueryFilters(queryBuildDataSource);

        queryRunInvent = new QueryRun(query);

        return queryRunInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtraFieldsQueryFilters</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected QueryBuildDataSource addExtraFieldsQueryFilters(QueryBuildDataSource _queryBuildDataSource)
    {
        QueryBuildDataSource queryBuildDataSource = _queryBuildDataSource;

        if(filterFields)
        {
            queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(InventTable));
            queryBuildDataSource.addLink(fieldnum(InventTable, ItemId), fieldnum(InventTable, ItemId));
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            this.addFilters2Query(queryBuildDataSource, tablenum(InventTable));
        }

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableWebshopFilters</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void inventTableWebshopFilters(ItemId _itemId = inventTable.ItemId)
    {
        SC_FilterWebShopsTable  filterWebShopsTable;        
        QueryBuildDataSource    queryBuildDataSource, assortmentBuildDataSource, assortmentTableBuildDataSource;
        QueryRun                queryRunLocal;
        Query                   query;                
        TransDate               systemDate;  

        if(SC_FilterWebShopsTable::existFilters(webShopsTable.WebshopId, tableStr(InventTable)) || (webShopsTable.EnableRetailAssortments && this.isRetailEnabled()))
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(InventTable));

            queryBuildDataSource.addOrderByField(fieldnum(InventTable, ItemId), sortAsc ? SortOrder::Ascending : SortOrder::Descending);

            if(visibleOnly)
            {
                queryBuildDataSource.addRange(fieldnum(InventTable, SC_VisibleInWebshop)).value(queryValue(NoYes::Yes));
            }

            while select FieldName, FilterStr from filterWebShopsTable
                where filterWebShopsTable.WebShopId == webShopsTable.WebShopId &&
                      filterWebShopsTable.TableName == tableStr(InventTable)
            {
                queryBuildDataSource.addRange(fieldname2id(tablenum(InventTable), filterWebShopsTable.FieldName)).value(filterWebShopsTable.FilterStr);
            }

            if(webShopsTable.EnableRetailAssortments && this.isRetailEnabled())
            {
                systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

                assortmentBuildDataSource = queryBuildDataSource.addDataSource(tablenum(RetailAssortmentView));
                assortmentBuildDataSource.addLink(fieldnum(InventTable, Product), fieldnum(RetailAssortmentView, Product));
                assortmentBuildDataSource.joinMode(JoinMode::ExistsJoin);
                assortmentBuildDataSource.fetchMode(QueryFetchMode::One2One);
                assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, OMOperatingUnitId)).value(queryValue(this.getRetailChannelTable().OMOperatingUnitID));
                assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidFrom)).value(SysQuery::valueEmptyString());
                assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidFrom)).value('..' + queryValue(systemDate));
                assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidTo)).value(SysQuery::valueEmptyString());
                assortmentBuildDataSource.addRange(fieldNum(RetailAssortmentView, ValidTo)).value(queryValue(systemDate) + '..');

                assortmentTableBuildDataSource = assortmentBuildDataSource.addDataSource(tablenum(RetailAssortmentTable));
                assortmentTableBuildDataSource.addLink(fieldnum(RetailAssortmentView, AssortmentID), fieldnum(RetailAssortmentTable, RecId));
                assortmentTableBuildDataSource.joinMode(JoinMode::ExistsJoin);
                assortmentTableBuildDataSource.fetchMode(QueryFetchMode::One2One);
                assortmentTableBuildDataSource.addRange(fieldNum(RetailAssortmentTable, Status)).value(QueryValue(RetailAssortmentStatusType::Published));
            }

            queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(InventTable));
            queryBuildDataSource.addLink(fieldnum(InventTable, ItemId), fieldnum(InventTable, ItemId));
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSource.addRange(fieldnum(InventTable, ItemId)).value(this.normalizeValue(_itemId));

            queryRunLocal = new QueryRun(query);
            queryRunLocal.next();

            inventTable = queryRunLocal.get(tablenum(InventTable));            
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimensionBasedBOM</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isProductDimensionBasedBOM()
    {
        return !webShopsTable.DisableBOM && inventtable.hasProductDimensions() && inventtable.isConfigurable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {        
        blankInventDim = InventDim::findOrCreateBlank();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustTable</Name>
				<Source><![CDATA[
    [Replaceable]
    public void setCustTable(CustTable _custTable)
    {        
        custTable = _custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setErrorMsg</Name>
				<Source><![CDATA[
    [Replaceable]
    public ErrorMsg setErrorMsg(ErrorMsg _errorMsg = errorMsg)
    {        
        errorMsg = _errorMsg;

        return errorMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormErrorMsg</Name>
				<Source><![CDATA[
    [Replaceable]
    public ErrorMsg setFormErrorMsg(ErrorMsg _formErrorMsg = formErrorMsg)
    {
        formErrorMsg = _formErrorMsg;

        return formErrorMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTable</Name>
				<Source><![CDATA[
    [Replaceable]
    public void setInventTable(InventTable _inventTable)
    {        
        inventTable = _inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllVariantsVisibility</Name>
				<Source><![CDATA[
    [Replaceable]
    static void updateAllVariantsVisibility(ItemId _itemid, NoYes _value)
    {
        InventDimCombination inventDimCombination;        
    
        ttsBegin;
        while select forupdate inventDimCombination
            where inventDimCombination.ItemId == _itemid
        {
            inventDimCombination.SC_VisibleInWebShop = _value;
            inventDimCombination.doUpdate();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVariantVisibility</Name>
				<Source><![CDATA[
    [Replaceable]
    static void updateVariantVisibility(InventDimCombination _inventDimCombination, NoYes _value)
    {        
        _inventDimCombination.selectForUpdate(true);

        ttsBegin;
        _inventDimCombination.SC_VisibleInWebShop = _value;
        _inventDimCombination.doUpdate();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastModifiedDate</Name>
				<Source><![CDATA[
    [Replaceable]
    static void updateLastModifiedDate(ItemId _itemId='', EcoResProductRecId _product=0)
    {
        System.DateTime     dateTimeClr;
        utcDateTime         dateTime;
        Real                dReal;
        InventTable         inventTable;
        SC_ParametersTable  parameters;        

        if(_product && !InventTable::findByProduct(_product).RecId)
        {
            _itemId = InventDimCombination::findByDistinctProductVariant(_product).ItemId;
            _product= 0;
        }

        ttsBegin;
        select firstonly forupdate SC_LastModified from inventTable
            where (inventTable.ItemId == _itemId && _itemId) ||
                  (inventTable.Product == _product && _product) &&
                  inventTable.SC_VisibleInWebShop;

        if(inventTable)
        {
            new InteropPermission(InteropKind::ClrInterop).assert();

            dateTimeClr = DateTimeUtil::utcNow();
            dReal       = dateTimeClr.ToOADate();
            parameters  = SC_ParametersTable::find();

            if(parameters.UpdateThreshold)
            {
                dateTimeClr = System.DateTime::FromOADate(Global::real2double(inventTable.SC_LastModified));
                dateTime    = dateTimeClr.AddSeconds(parameters.UpdateThreshold); //update threshold, the record will be updated if the previous value of the lastmodified fields is older then 30 sec. ago.

                if(DateTimeUtil::utcNow() > dateTime)
                {
                    inventTable.SC_LastModified = dReal;
                    inventTable.doUpdate();
                }
            }
            else
            {
                inventTable.SC_LastModified = dReal;
                inventTable.doUpdate();
            }
        }
        ttsCommit;

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Replaceable]
    public static SC_AXDataServiceClient_Product construct()
    {
        SC_AXDataServiceClient_Product seviceclient = new SC_AXDataServiceClient_Product();
        
        seviceclient.clearCache();

        return seviceclient;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>Addon_GetDueDates</Name>
				<Source><![CDATA[
    [Replaceable]
    public XmlDocument Addon_GetDueDates(XmlDocument _request)
    {
        InventDim               storageDim;
        SalesTmpATP             salesTmpATP, salesTmpATPCurrent;
        SC_SalesATPCalculation  salesATPCalculation;
        WHSInventStatus         WHSInventStatus;
        Counter                 totalEstimates;

        this.createHeaderXml();

        this.getParameters(_request);

        if(accountType == #customer)
        {
            custTable = CustTable::find(accountId);
        }
        else
        {
            custTable.Currency = smmBusRelTable::findByParty(ContactPerson::find(accountId).ContactForParty).Currency;
        }

        productsList    = _request.getElementsByTagName(#product);

        for(i=0;productsList && i<productsList.length();i++)
        {
            node        = productsList.item(i);
            inventTable = InventTable::find(node.getNamedElement(#id) ? node.getNamedElement(#id).innerText() : '');
            parmUnitId  = node.getNamedElement(#unitOfMeasureId) ? node.getNamedElement(#unitOfMeasureId).innerText() : '';
            variantId   = node.getNamedElement(#variantId) ? node.getNamedElement(#variantId).innerText() : '';
            storageDim  = InventDim::find(variantId);
            storageDim.mergeUsedDim(InventDimGroupSetup::newItemId(inventTable.ItemId), this.setProductStorageDim());
            storageDim  = InventDim::findOrCreate(storageDim);

            this.inventTableWebshopFilters();

            if(inventTable)
            {
                delete_from salesTmpATP;

                if(webShopsTable.EnableInventoryStatuses && WHSInventEnabled::exist(inventTable.ItemId)) //warehouse management products per statuses
                {
                    while select InventStatusId from WHSInventStatus
                        where WHSInventStatus.SC_VisibleInWebShop
                    {
                        storageDim.InventStatusId = WHSInventStatus.InventStatusId;
                        storageDim                = InventDim::findOrCreate(storageDim);
                        salesATPCalculation       = SC_SalesATPCalculation::newSalesCalculation(inventTable.ItemId, storageDim.inventDimId, custTable.AccountNum);
                        salesTmpATPCurrent        = salesATPCalculation.calcSalesTmpATP();
                        salesTmpATP               = this.mergeSalesTmpATP(salesTmpATP, salesTmpATPCurrent);
                    }

                }
                else //standard products or statuses disabled
                {
                    salesATPCalculation = SC_SalesATPCalculation::newSalesCalculation(inventTable.ItemId, storageDim.inventDimId, custTable.AccountNum);
                    salesTmpATP = salesATPCalculation.calcSalesTmpATP();
                }

                while select salesTmpATP
                    group by ATPQty where salesTmpATP.ATPQty
                {
                    productNode = resultNode.appendChild(resultXml.createElement(#estimatedShipment));
                    this.initDefaultFutureStockFields(productNode, salesTmpATP.ATPDate, salesTmpATP.ATPQty, variantId);
                    totalEstimates ++;
                }

                select firstOnly RecId from salesTmpATP where salesTmpATP.ATPQty;

                if(!salesTmpATP) // if no ATP information then return lead time with zero qty
                {
                    k = InventItemSalesSetup::find(inventTable.itemId, storageDim.inventDimId).leadTime();
                    productNode = resultNode.appendChild(resultXml.createElement(#estimatedShipment));
                    this.initDefaultFutureStockFields(productNode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + k, 0, variantId);
                    totalEstimates ++;
                }
            }
        }

        resultNode.appendChild(resultXml.createElement(#totalCount)).innerText(int2str(totalEstimates));

        return resultXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultFutureStockFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected void initDefaultFutureStockFields(XmlNode _stockNode, TransDate _dueDate, Qty _qty, InventDimId _variantId = '')
    {
        this.addNodeValue(#Id, _stockNode, inventTable.itemId);
        this.addNodeValue(#variantId, _stockNode, _variantId);
        this.addNodeValue(#unitOfMeasureId, _stockNode, parmUnitId ? parmUnitId : inventTable.salesUnitId());
        this.addNodeValue(#dueDate, _stockNode, _dueDate);

        if(_qty)
        {
            this.addNodeValue(#quantity, _stockNode, _qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeSalesTmpATP</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected SalesTmpATP mergeSalesTmpATP(SalesTmpATP _salesTmpATPAll, SalesTmpATP _salesTmpATP)
    {
        while select _salesTmpATP
            group by ATPQty
        {
            select firstOnly _salesTmpATPAll where _salesTmpATPAll.ATPDate == _salesTmpATP.ATPDate;

            if(_salesTmpATPAll)
            {
                _salesTmpATPAll.ATPQty += _salesTmpATP.ATPQty;
                ttsBegin;
                _salesTmpATPAll.update();
                ttsCommit;
            }
            else
            {
                _salesTmpATPAll.ATPDate = _salesTmpATP.ATPDate;
                _salesTmpATPAll.ATPQty  = _salesTmpATP.ATPQty;
                _salesTmpATPAll.insert();
            }
        }

        return _salesTmpATPAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecificQtyRulesExist</Name>
				<Source><![CDATA[
    [HookableAttribute(true), Replaceable]
    protected boolean isSpecificQtyRulesExist()
    {
        InventItemSalesSetup    inventItemSalesSetup;
        Counter rules, sites, wares;
        boolean ret;

        sites = any2int((select count(RecId) from InventSite).RecId);
        wares = any2int((select count(RecId) from InventLocation).RecId);

        if(sites > 1 || wares > 1)
        {
            while select MultipleQty, StandardQty, LowestQty, HighestQty from inventItemSalesSetup
                group by MultipleQty, StandardQty, LowestQty, HighestQty
                where inventItemSalesSetup.ItemId == inventTable.ItemId &&
                     (inventItemSalesSetup.InventDimId == blankInventDim.InventDimId || inventItemSalesSetup.Override)
            {
                rules++;
            }

            if(rules>1)
            {
                //search for any site specific rule
                select firstonly inventItemSalesSetup
                    where inventItemSalesSetup.ItemId == inventTable.ItemId &&
                         (inventItemSalesSetup.InventDimId != blankInventDim.InventDimId && sites > 1);

                if(inventItemSalesSetup)
                {
                    ret = true;
                }
                else if(wares > 1) //search for any warehouse specific rule
                {
                    while select InventDimIdDefault from inventItemSalesSetup
                        where inventItemSalesSetup.ItemId == inventTable.ItemId &&
                              inventItemSalesSetup.InventDimIdDefault != blankInventDim.InventDimId &&
                              inventItemSalesSetup.Override
                    {
                        if(InventDim::find(inventItemSalesSetup.InventDimIdDefault).InventLocationId)
                        {
                            ret = true;
                            break;
                        }
                    }                    
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>